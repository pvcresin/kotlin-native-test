@file:Suppress("UNUSED_EXPRESSION", "UNUSED_VARIABLE")
package win32

import konan.SymbolName
import kotlinx.cinterop.*

fun _rotl8(Value: Byte, Shift: Byte): Byte {
    val _Value = Value
    val _Shift = Shift
    val res = kni__rotl8(_Value, _Shift)
    return res
}

@SymbolName("win32_kni__rotl8")
private external fun kni__rotl8(Value: Byte, Shift: Byte): Byte

fun _rotl16(Value: Short, Shift: Byte): Short {
    val _Value = Value
    val _Shift = Shift
    val res = kni__rotl16(_Value, _Shift)
    return res
}

@SymbolName("win32_kni__rotl16")
private external fun kni__rotl16(Value: Short, Shift: Byte): Short

fun _rotr8(Value: Byte, Shift: Byte): Byte {
    val _Value = Value
    val _Shift = Shift
    val res = kni__rotr8(_Value, _Shift)
    return res
}

@SymbolName("win32_kni__rotr8")
private external fun kni__rotr8(Value: Byte, Shift: Byte): Byte

fun _rotr16(Value: Short, Shift: Byte): Short {
    val _Value = Value
    val _Shift = Shift
    val res = kni__rotr16(_Value, _Shift)
    return res
}

@SymbolName("win32_kni__rotr16")
private external fun kni__rotr16(Value: Short, Shift: Byte): Short

fun _rotl(Value: Int, Shift: Int): Int {
    val _Value = Value
    val _Shift = Shift
    val res = kni__rotl(_Value, _Shift)
    return res
}

@SymbolName("win32_kni__rotl")
private external fun kni__rotl(Value: Int, Shift: Int): Int

fun _rotr(Value: Int, Shift: Int): Int {
    val _Value = Value
    val _Shift = Shift
    val res = kni__rotr(_Value, _Shift)
    return res
}

@SymbolName("win32_kni__rotr")
private external fun kni__rotr(Value: Int, Shift: Int): Int

fun _rotl64(Value: Long, Shift: Int): Long {
    val _Value = Value
    val _Shift = Shift
    val res = kni__rotl64(_Value, _Shift)
    return res
}

@SymbolName("win32_kni__rotl64")
private external fun kni__rotl64(Value: Long, Shift: Int): Long

fun _rotr64(Value: Long, Shift: Int): Long {
    val _Value = Value
    val _Shift = Shift
    val res = kni__rotr64(_Value, _Shift)
    return res
}

@SymbolName("win32_kni__rotr64")
private external fun kni__rotr64(Value: Long, Shift: Int): Long

fun __getcallerseflags(): Int {
    val res = kni___getcallerseflags()
    return res
}

@SymbolName("win32_kni___getcallerseflags")
private external fun kni___getcallerseflags(): Int

fun __segmentlimit(Selector: DWORD): DWORD {
    val _Selector = Selector
    val res = kni___segmentlimit(_Selector)
    return res
}

@SymbolName("win32_kni___segmentlimit")
private external fun kni___segmentlimit(Selector: Int): Int

fun __mulh(Multiplier: LONGLONG, Multiplicand: LONGLONG): LONGLONG {
    val _Multiplier = Multiplier
    val _Multiplicand = Multiplicand
    val res = kni___mulh(_Multiplier, _Multiplicand)
    return res
}

@SymbolName("win32_kni___mulh")
private external fun kni___mulh(Multiplier: Long, Multiplicand: Long): Long

fun __umulh(Multiplier: ULONGLONG, Multiplicand: ULONGLONG): ULONGLONG {
    val _Multiplier = Multiplier
    val _Multiplicand = Multiplicand
    val res = kni___umulh(_Multiplier, _Multiplicand)
    return res
}

@SymbolName("win32_kni___umulh")
private external fun kni___umulh(Multiplier: Long, Multiplicand: Long): Long

fun __shiftleft128(LowPart: DWORD64, HighPart: DWORD64, Shift: BYTE): DWORD64 {
    val _LowPart = LowPart
    val _HighPart = HighPart
    val _Shift = Shift
    val res = kni___shiftleft128(_LowPart, _HighPart, _Shift)
    return res
}

@SymbolName("win32_kni___shiftleft128")
private external fun kni___shiftleft128(LowPart: Long, HighPart: Long, Shift: Byte): Long

fun __shiftright128(LowPart: DWORD64, HighPart: DWORD64, Shift: BYTE): DWORD64 {
    val _LowPart = LowPart
    val _HighPart = HighPart
    val _Shift = Shift
    val res = kni___shiftright128(_LowPart, _HighPart, _Shift)
    return res
}

@SymbolName("win32_kni___shiftright128")
private external fun kni___shiftright128(LowPart: Long, HighPart: Long, Shift: Byte): Long

fun _mul128(Multiplier: LONG64, Multiplicand: LONG64, HighProduct: CValuesRef<LONG64Var>?): LONG64 {
    return memScoped {
        val _Multiplier = Multiplier
        val _Multiplicand = Multiplicand
        val _HighProduct = HighProduct?.getPointer(memScope).rawValue
        val res = kni__mul128(_Multiplier, _Multiplicand, _HighProduct)
        res
    }
}

@SymbolName("win32_kni__mul128")
private external fun kni__mul128(Multiplier: Long, Multiplicand: Long, HighProduct: NativePtr): Long

fun _umul128(Multiplier: DWORD64, Multiplicand: DWORD64, HighProduct: CValuesRef<DWORD64Var>?): DWORD64 {
    return memScoped {
        val _Multiplier = Multiplier
        val _Multiplicand = Multiplicand
        val _HighProduct = HighProduct?.getPointer(memScope).rawValue
        val res = kni__umul128(_Multiplier, _Multiplicand, _HighProduct)
        res
    }
}

@SymbolName("win32_kni__umul128")
private external fun kni__umul128(Multiplier: Long, Multiplicand: Long, HighProduct: NativePtr): Long

fun MultiplyExtract128(Multiplier: LONG64, Multiplicand: LONG64, Shift: BYTE): LONG64 {
    val _Multiplier = Multiplier
    val _Multiplicand = Multiplicand
    val _Shift = Shift
    val res = kni_MultiplyExtract128(_Multiplier, _Multiplicand, _Shift)
    return res
}

@SymbolName("win32_kni_MultiplyExtract128")
private external fun kni_MultiplyExtract128(Multiplier: Long, Multiplicand: Long, Shift: Byte): Long

fun UnsignedMultiplyExtract128(Multiplier: DWORD64, Multiplicand: DWORD64, Shift: BYTE): DWORD64 {
    val _Multiplier = Multiplier
    val _Multiplicand = Multiplicand
    val _Shift = Shift
    val res = kni_UnsignedMultiplyExtract128(_Multiplier, _Multiplicand, _Shift)
    return res
}

@SymbolName("win32_kni_UnsignedMultiplyExtract128")
private external fun kni_UnsignedMultiplyExtract128(Multiplier: Long, Multiplicand: Long, Shift: Byte): Long

fun RtlCaptureStackBackTrace(FramesToSkip: DWORD, FramesToCapture: DWORD, BackTrace: CValuesRef<PVOIDVar>?, BackTraceHash: PDWORD?): WORD {
    return memScoped {
        val _FramesToSkip = FramesToSkip
        val _FramesToCapture = FramesToCapture
        val _BackTrace = BackTrace?.getPointer(memScope).rawValue
        val _BackTraceHash = BackTraceHash.rawValue
        val res = kni_RtlCaptureStackBackTrace(_FramesToSkip, _FramesToCapture, _BackTrace, _BackTraceHash)
        res
    }
}

@SymbolName("win32_kni_RtlCaptureStackBackTrace")
private external fun kni_RtlCaptureStackBackTrace(FramesToSkip: Int, FramesToCapture: Int, BackTrace: NativePtr, BackTraceHash: NativePtr): Short

fun RtlCaptureContext(ContextRecord: PCONTEXT?): Unit {
    val _ContextRecord = ContextRecord.rawValue
    val res = kni_RtlCaptureContext(_ContextRecord)
    return res
}

@SymbolName("win32_kni_RtlCaptureContext")
private external fun kni_RtlCaptureContext(ContextRecord: NativePtr): Unit

fun RtlCompareMemory(Source1: COpaquePointer?, Source2: COpaquePointer?, Length: SIZE_T): SIZE_T {
    val _Source1 = Source1.rawValue
    val _Source2 = Source2.rawValue
    val _Length = Length
    val res = kni_RtlCompareMemory(_Source1, _Source2, _Length)
    return res
}

@SymbolName("win32_kni_RtlCompareMemory")
private external fun kni_RtlCompareMemory(Source1: NativePtr, Source2: NativePtr, Length: Long): Long

fun RtlAddFunctionTable(FunctionTable: PRUNTIME_FUNCTION?, EntryCount: DWORD, BaseAddress: DWORD64): BOOLEAN {
    val _FunctionTable = FunctionTable.rawValue
    val _EntryCount = EntryCount
    val _BaseAddress = BaseAddress
    val res = kni_RtlAddFunctionTable(_FunctionTable, _EntryCount, _BaseAddress)
    return res
}

@SymbolName("win32_kni_RtlAddFunctionTable")
private external fun kni_RtlAddFunctionTable(FunctionTable: NativePtr, EntryCount: Int, BaseAddress: Long): Byte

fun RtlDeleteFunctionTable(FunctionTable: PRUNTIME_FUNCTION?): BOOLEAN {
    val _FunctionTable = FunctionTable.rawValue
    val res = kni_RtlDeleteFunctionTable(_FunctionTable)
    return res
}

@SymbolName("win32_kni_RtlDeleteFunctionTable")
private external fun kni_RtlDeleteFunctionTable(FunctionTable: NativePtr): Byte

fun RtlInstallFunctionTableCallback(TableIdentifier: DWORD64, BaseAddress: DWORD64, Length: DWORD, Callback: PGET_RUNTIME_FUNCTION_CALLBACK?, Context: PVOID?, OutOfProcessCallbackDll: PCWSTR?): BOOLEAN {
    val _TableIdentifier = TableIdentifier
    val _BaseAddress = BaseAddress
    val _Length = Length
    val _Callback = Callback.rawValue
    val _Context = Context.rawValue
    val _OutOfProcessCallbackDll = OutOfProcessCallbackDll.rawValue
    val res = kni_RtlInstallFunctionTableCallback(_TableIdentifier, _BaseAddress, _Length, _Callback, _Context, _OutOfProcessCallbackDll)
    return res
}

@SymbolName("win32_kni_RtlInstallFunctionTableCallback")
private external fun kni_RtlInstallFunctionTableCallback(TableIdentifier: Long, BaseAddress: Long, Length: Int, Callback: NativePtr, Context: NativePtr, OutOfProcessCallbackDll: NativePtr): Byte

fun RtlRestoreContext(ContextRecord: PCONTEXT?, ExceptionRecord: CValuesRef<_EXCEPTION_RECORD>?): Unit {
    return memScoped {
        val _ContextRecord = ContextRecord.rawValue
        val _ExceptionRecord = ExceptionRecord?.getPointer(memScope).rawValue
        val res = kni_RtlRestoreContext(_ContextRecord, _ExceptionRecord)
        res
    }
}

@SymbolName("win32_kni_RtlRestoreContext")
private external fun kni_RtlRestoreContext(ContextRecord: NativePtr, ExceptionRecord: NativePtr): Unit

fun RtlVirtualUnwind(HandlerType: DWORD, ImageBase: DWORD64, ControlPc: DWORD64, FunctionEntry: PRUNTIME_FUNCTION?, ContextRecord: PCONTEXT?, HandlerData: CValuesRef<PVOIDVar>?, EstablisherFrame: PDWORD64?, ContextPointers: PKNONVOLATILE_CONTEXT_POINTERS?): PEXCEPTION_ROUTINE? {
    return memScoped {
        val _HandlerType = HandlerType
        val _ImageBase = ImageBase
        val _ControlPc = ControlPc
        val _FunctionEntry = FunctionEntry.rawValue
        val _ContextRecord = ContextRecord.rawValue
        val _HandlerData = HandlerData?.getPointer(memScope).rawValue
        val _EstablisherFrame = EstablisherFrame.rawValue
        val _ContextPointers = ContextPointers.rawValue
        val res = kni_RtlVirtualUnwind(_HandlerType, _ImageBase, _ControlPc, _FunctionEntry, _ContextRecord, _HandlerData, _EstablisherFrame, _ContextPointers)
        interpretCPointer<EXCEPTION_ROUTINE>(res)
    }
}

@SymbolName("win32_kni_RtlVirtualUnwind")
private external fun kni_RtlVirtualUnwind(HandlerType: Int, ImageBase: Long, ControlPc: Long, FunctionEntry: NativePtr, ContextRecord: NativePtr, HandlerData: NativePtr, EstablisherFrame: NativePtr, ContextPointers: NativePtr): NativePtr

fun RtlUnwind(TargetFrame: PVOID?, TargetIp: PVOID?, ExceptionRecord: PEXCEPTION_RECORD?, ReturnValue: PVOID?): Unit {
    val _TargetFrame = TargetFrame.rawValue
    val _TargetIp = TargetIp.rawValue
    val _ExceptionRecord = ExceptionRecord.rawValue
    val _ReturnValue = ReturnValue.rawValue
    val res = kni_RtlUnwind(_TargetFrame, _TargetIp, _ExceptionRecord, _ReturnValue)
    return res
}

@SymbolName("win32_kni_RtlUnwind")
private external fun kni_RtlUnwind(TargetFrame: NativePtr, TargetIp: NativePtr, ExceptionRecord: NativePtr, ReturnValue: NativePtr): Unit

fun RtlPcToFileHeader(PcValue: PVOID?, BaseOfImage: CValuesRef<PVOIDVar>?): PVOID? {
    return memScoped {
        val _PcValue = PcValue.rawValue
        val _BaseOfImage = BaseOfImage?.getPointer(memScope).rawValue
        val res = kni_RtlPcToFileHeader(_PcValue, _BaseOfImage)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_RtlPcToFileHeader")
private external fun kni_RtlPcToFileHeader(PcValue: NativePtr, BaseOfImage: NativePtr): NativePtr

fun RtlLookupFunctionEntry(ControlPc: DWORD64, ImageBase: PDWORD64?, HistoryTable: PUNWIND_HISTORY_TABLE?): PRUNTIME_FUNCTION? {
    val _ControlPc = ControlPc
    val _ImageBase = ImageBase.rawValue
    val _HistoryTable = HistoryTable.rawValue
    val res = kni_RtlLookupFunctionEntry(_ControlPc, _ImageBase, _HistoryTable)
    return interpretCPointer<_RUNTIME_FUNCTION>(res)
}

@SymbolName("win32_kni_RtlLookupFunctionEntry")
private external fun kni_RtlLookupFunctionEntry(ControlPc: Long, ImageBase: NativePtr, HistoryTable: NativePtr): NativePtr

fun RtlUnwindEx(TargetFrame: PVOID?, TargetIp: PVOID?, ExceptionRecord: PEXCEPTION_RECORD?, ReturnValue: PVOID?, ContextRecord: PCONTEXT?, HistoryTable: PUNWIND_HISTORY_TABLE?): Unit {
    val _TargetFrame = TargetFrame.rawValue
    val _TargetIp = TargetIp.rawValue
    val _ExceptionRecord = ExceptionRecord.rawValue
    val _ReturnValue = ReturnValue.rawValue
    val _ContextRecord = ContextRecord.rawValue
    val _HistoryTable = HistoryTable.rawValue
    val res = kni_RtlUnwindEx(_TargetFrame, _TargetIp, _ExceptionRecord, _ReturnValue, _ContextRecord, _HistoryTable)
    return res
}

@SymbolName("win32_kni_RtlUnwindEx")
private external fun kni_RtlUnwindEx(TargetFrame: NativePtr, TargetIp: NativePtr, ExceptionRecord: NativePtr, ReturnValue: NativePtr, ContextRecord: NativePtr, HistoryTable: NativePtr): Unit

fun RtlInitializeSListHead(ListHead: PSLIST_HEADER?): Unit {
    val _ListHead = ListHead.rawValue
    val res = kni_RtlInitializeSListHead(_ListHead)
    return res
}

@SymbolName("win32_kni_RtlInitializeSListHead")
private external fun kni_RtlInitializeSListHead(ListHead: NativePtr): Unit

fun RtlFirstEntrySList(ListHead: CValuesRef<SLIST_HEADER>?): PSLIST_ENTRY? {
    return memScoped {
        val _ListHead = ListHead?.getPointer(memScope).rawValue
        val res = kni_RtlFirstEntrySList(_ListHead)
        interpretCPointer<_SLIST_ENTRY>(res)
    }
}

@SymbolName("win32_kni_RtlFirstEntrySList")
private external fun kni_RtlFirstEntrySList(ListHead: NativePtr): NativePtr

fun RtlInterlockedPopEntrySList(ListHead: PSLIST_HEADER?): PSLIST_ENTRY? {
    val _ListHead = ListHead.rawValue
    val res = kni_RtlInterlockedPopEntrySList(_ListHead)
    return interpretCPointer<_SLIST_ENTRY>(res)
}

@SymbolName("win32_kni_RtlInterlockedPopEntrySList")
private external fun kni_RtlInterlockedPopEntrySList(ListHead: NativePtr): NativePtr

fun RtlInterlockedPushEntrySList(ListHead: PSLIST_HEADER?, ListEntry: PSLIST_ENTRY?): PSLIST_ENTRY? {
    val _ListHead = ListHead.rawValue
    val _ListEntry = ListEntry.rawValue
    val res = kni_RtlInterlockedPushEntrySList(_ListHead, _ListEntry)
    return interpretCPointer<_SLIST_ENTRY>(res)
}

@SymbolName("win32_kni_RtlInterlockedPushEntrySList")
private external fun kni_RtlInterlockedPushEntrySList(ListHead: NativePtr, ListEntry: NativePtr): NativePtr

fun RtlInterlockedPushListSListEx(ListHead: PSLIST_HEADER?, List: PSLIST_ENTRY?, ListEnd: PSLIST_ENTRY?, Count: DWORD): PSLIST_ENTRY? {
    val _ListHead = ListHead.rawValue
    val _List = List.rawValue
    val _ListEnd = ListEnd.rawValue
    val _Count = Count
    val res = kni_RtlInterlockedPushListSListEx(_ListHead, _List, _ListEnd, _Count)
    return interpretCPointer<_SLIST_ENTRY>(res)
}

@SymbolName("win32_kni_RtlInterlockedPushListSListEx")
private external fun kni_RtlInterlockedPushListSListEx(ListHead: NativePtr, List: NativePtr, ListEnd: NativePtr, Count: Int): NativePtr

fun RtlInterlockedFlushSList(ListHead: PSLIST_HEADER?): PSLIST_ENTRY? {
    val _ListHead = ListHead.rawValue
    val res = kni_RtlInterlockedFlushSList(_ListHead)
    return interpretCPointer<_SLIST_ENTRY>(res)
}

@SymbolName("win32_kni_RtlInterlockedFlushSList")
private external fun kni_RtlInterlockedFlushSList(ListHead: NativePtr): NativePtr

fun RtlQueryDepthSList(ListHead: PSLIST_HEADER?): WORD {
    val _ListHead = ListHead.rawValue
    val res = kni_RtlQueryDepthSList(_ListHead)
    return res
}

@SymbolName("win32_kni_RtlQueryDepthSList")
private external fun kni_RtlQueryDepthSList(ListHead: NativePtr): Short

fun RtlSecureZeroMemory(ptr: PVOID?, cnt: SIZE_T): PVOID? {
    val _ptr = ptr.rawValue
    val _cnt = cnt
    val res = kni_RtlSecureZeroMemory(_ptr, _cnt)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_RtlSecureZeroMemory")
private external fun kni_RtlSecureZeroMemory(ptr: NativePtr, cnt: Long): NativePtr

fun VerSetConditionMask(ConditionMask: ULONGLONG, TypeMask: DWORD, Condition: BYTE): ULONGLONG {
    val _ConditionMask = ConditionMask
    val _TypeMask = TypeMask
    val _Condition = Condition
    val res = kni_VerSetConditionMask(_ConditionMask, _TypeMask, _Condition)
    return res
}

@SymbolName("win32_kni_VerSetConditionMask")
private external fun kni_VerSetConditionMask(ConditionMask: Long, TypeMask: Int, Condition: Byte): Long

fun RtlApplicationVerifierStop(Code: ULONG_PTR, Message: PSTR?, Param1: ULONG_PTR, Description1: PSTR?, Param2: ULONG_PTR, Description2: PSTR?, Param3: ULONG_PTR, Description3: PSTR?, Param4: ULONG_PTR, Description4: PSTR?): Unit {
    val _Code = Code
    val _Message = Message.rawValue
    val _Param1 = Param1
    val _Description1 = Description1.rawValue
    val _Param2 = Param2
    val _Description2 = Description2.rawValue
    val _Param3 = Param3
    val _Description3 = Description3.rawValue
    val _Param4 = Param4
    val _Description4 = Description4.rawValue
    val res = kni_RtlApplicationVerifierStop(_Code, _Message, _Param1, _Description1, _Param2, _Description2, _Param3, _Description3, _Param4, _Description4)
    return res
}

@SymbolName("win32_kni_RtlApplicationVerifierStop")
private external fun kni_RtlApplicationVerifierStop(Code: Long, Message: NativePtr, Param1: Long, Description1: NativePtr, Param2: Long, Description2: NativePtr, Param3: Long, Description3: NativePtr, Param4: Long, Description4: NativePtr): Unit

fun RtlSetHeapInformation(HeapHandle: PVOID?, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID?, HeapInformationLength: SIZE_T): DWORD {
    val _HeapHandle = HeapHandle.rawValue
    val _HeapInformationClass = HeapInformationClass.value
    val _HeapInformation = HeapInformation.rawValue
    val _HeapInformationLength = HeapInformationLength
    val res = kni_RtlSetHeapInformation(_HeapHandle, _HeapInformationClass, _HeapInformation, _HeapInformationLength)
    return res
}

@SymbolName("win32_kni_RtlSetHeapInformation")
private external fun kni_RtlSetHeapInformation(HeapHandle: NativePtr, HeapInformationClass: Int, HeapInformation: NativePtr, HeapInformationLength: Long): Int

fun RtlQueryHeapInformation(HeapHandle: PVOID?, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID?, HeapInformationLength: SIZE_T, ReturnLength: PSIZE_T?): DWORD {
    val _HeapHandle = HeapHandle.rawValue
    val _HeapInformationClass = HeapInformationClass.value
    val _HeapInformation = HeapInformation.rawValue
    val _HeapInformationLength = HeapInformationLength
    val _ReturnLength = ReturnLength.rawValue
    val res = kni_RtlQueryHeapInformation(_HeapHandle, _HeapInformationClass, _HeapInformation, _HeapInformationLength, _ReturnLength)
    return res
}

@SymbolName("win32_kni_RtlQueryHeapInformation")
private external fun kni_RtlQueryHeapInformation(HeapHandle: NativePtr, HeapInformationClass: Int, HeapInformation: NativePtr, HeapInformationLength: Long, ReturnLength: NativePtr): Int

fun RtlMultipleAllocateHeap(HeapHandle: PVOID?, Flags: DWORD, Size: SIZE_T, Count: DWORD, Array: CValuesRef<PVOIDVar>?): DWORD {
    return memScoped {
        val _HeapHandle = HeapHandle.rawValue
        val _Flags = Flags
        val _Size = Size
        val _Count = Count
        val _Array = Array?.getPointer(memScope).rawValue
        val res = kni_RtlMultipleAllocateHeap(_HeapHandle, _Flags, _Size, _Count, _Array)
        res
    }
}

@SymbolName("win32_kni_RtlMultipleAllocateHeap")
private external fun kni_RtlMultipleAllocateHeap(HeapHandle: NativePtr, Flags: Int, Size: Long, Count: Int, Array: NativePtr): Int

fun RtlMultipleFreeHeap(HeapHandle: PVOID?, Flags: DWORD, Count: DWORD, Array: CValuesRef<PVOIDVar>?): DWORD {
    return memScoped {
        val _HeapHandle = HeapHandle.rawValue
        val _Flags = Flags
        val _Count = Count
        val _Array = Array?.getPointer(memScope).rawValue
        val res = kni_RtlMultipleFreeHeap(_HeapHandle, _Flags, _Count, _Array)
        res
    }
}

@SymbolName("win32_kni_RtlMultipleFreeHeap")
private external fun kni_RtlMultipleFreeHeap(HeapHandle: NativePtr, Flags: Int, Count: Int, Array: NativePtr): Int

fun TpInitializeCallbackEnviron(cbe: PTP_CALLBACK_ENVIRON?): Unit {
    val _cbe = cbe.rawValue
    val res = kni_TpInitializeCallbackEnviron(_cbe)
    return res
}

@SymbolName("win32_kni_TpInitializeCallbackEnviron")
private external fun kni_TpInitializeCallbackEnviron(cbe: NativePtr): Unit

fun TpSetCallbackThreadpool(cbe: PTP_CALLBACK_ENVIRON?, pool: PTP_POOL?): Unit {
    val _cbe = cbe.rawValue
    val _pool = pool.rawValue
    val res = kni_TpSetCallbackThreadpool(_cbe, _pool)
    return res
}

@SymbolName("win32_kni_TpSetCallbackThreadpool")
private external fun kni_TpSetCallbackThreadpool(cbe: NativePtr, pool: NativePtr): Unit

fun TpSetCallbackCleanupGroup(cbe: PTP_CALLBACK_ENVIRON?, cleanup_group: PTP_CLEANUP_GROUP?, cleanup_group_cb: PTP_CLEANUP_GROUP_CANCEL_CALLBACK?): Unit {
    val _cbe = cbe.rawValue
    val _cleanup_group = cleanup_group.rawValue
    val _cleanup_group_cb = cleanup_group_cb.rawValue
    val res = kni_TpSetCallbackCleanupGroup(_cbe, _cleanup_group, _cleanup_group_cb)
    return res
}

@SymbolName("win32_kni_TpSetCallbackCleanupGroup")
private external fun kni_TpSetCallbackCleanupGroup(cbe: NativePtr, cleanup_group: NativePtr, cleanup_group_cb: NativePtr): Unit

fun TpSetCallbackActivationContext(cbe: PTP_CALLBACK_ENVIRON?, actx: CValuesRef<_ACTIVATION_CONTEXT>?): Unit {
    return memScoped {
        val _cbe = cbe.rawValue
        val _actx = actx?.getPointer(memScope).rawValue
        val res = kni_TpSetCallbackActivationContext(_cbe, _actx)
        res
    }
}

@SymbolName("win32_kni_TpSetCallbackActivationContext")
private external fun kni_TpSetCallbackActivationContext(cbe: NativePtr, actx: NativePtr): Unit

fun TpSetCallbackNoActivationContext(cbe: PTP_CALLBACK_ENVIRON?): Unit {
    val _cbe = cbe.rawValue
    val res = kni_TpSetCallbackNoActivationContext(_cbe)
    return res
}

@SymbolName("win32_kni_TpSetCallbackNoActivationContext")
private external fun kni_TpSetCallbackNoActivationContext(cbe: NativePtr): Unit

fun TpSetCallbackLongFunction(cbe: PTP_CALLBACK_ENVIRON?): Unit {
    val _cbe = cbe.rawValue
    val res = kni_TpSetCallbackLongFunction(_cbe)
    return res
}

@SymbolName("win32_kni_TpSetCallbackLongFunction")
private external fun kni_TpSetCallbackLongFunction(cbe: NativePtr): Unit

fun TpSetCallbackRaceWithDll(cbe: PTP_CALLBACK_ENVIRON?, h: PVOID?): Unit {
    val _cbe = cbe.rawValue
    val _h = h.rawValue
    val res = kni_TpSetCallbackRaceWithDll(_cbe, _h)
    return res
}

@SymbolName("win32_kni_TpSetCallbackRaceWithDll")
private external fun kni_TpSetCallbackRaceWithDll(cbe: NativePtr, h: NativePtr): Unit

fun TpSetCallbackFinalizationCallback(cbe: PTP_CALLBACK_ENVIRON?, fini_cb: PTP_SIMPLE_CALLBACK?): Unit {
    val _cbe = cbe.rawValue
    val _fini_cb = fini_cb.rawValue
    val res = kni_TpSetCallbackFinalizationCallback(_cbe, _fini_cb)
    return res
}

@SymbolName("win32_kni_TpSetCallbackFinalizationCallback")
private external fun kni_TpSetCallbackFinalizationCallback(cbe: NativePtr, fini_cb: NativePtr): Unit

fun TpSetCallbackPersistent(cbe: PTP_CALLBACK_ENVIRON?): Unit {
    val _cbe = cbe.rawValue
    val res = kni_TpSetCallbackPersistent(_cbe)
    return res
}

@SymbolName("win32_kni_TpSetCallbackPersistent")
private external fun kni_TpSetCallbackPersistent(cbe: NativePtr): Unit

fun TpDestroyCallbackEnviron(cbe: PTP_CALLBACK_ENVIRON?): Unit {
    val _cbe = cbe.rawValue
    val res = kni_TpDestroyCallbackEnviron(_cbe)
    return res
}

@SymbolName("win32_kni_TpDestroyCallbackEnviron")
private external fun kni_TpDestroyCallbackEnviron(cbe: NativePtr): Unit

fun NtCurrentTeb(): CPointer<_TEB>? {
    val res = kni_NtCurrentTeb()
    return interpretCPointer<_TEB>(res)
}

@SymbolName("win32_kni_NtCurrentTeb")
private external fun kni_NtCurrentTeb(): NativePtr

fun GetCurrentFiber(): PVOID? {
    val res = kni_GetCurrentFiber()
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GetCurrentFiber")
private external fun kni_GetCurrentFiber(): NativePtr

fun GetFiberData(): PVOID? {
    val res = kni_GetFiberData()
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GetFiberData")
private external fun kni_GetFiberData(): NativePtr

fun _InterlockedAnd(Destination: CValuesRef<LONGVar>?, Value: LONG): Int {
    return memScoped {
        val _Destination = Destination?.getPointer(memScope).rawValue
        val _Value = Value
        val res = kni__InterlockedAnd(_Destination, _Value)
        res
    }
}

@SymbolName("win32_kni__InterlockedAnd")
private external fun kni__InterlockedAnd(Destination: NativePtr, Value: Int): Int

fun _InterlockedOr(Destination: CValuesRef<LONGVar>?, Value: LONG): Int {
    return memScoped {
        val _Destination = Destination?.getPointer(memScope).rawValue
        val _Value = Value
        val res = kni__InterlockedOr(_Destination, _Value)
        res
    }
}

@SymbolName("win32_kni__InterlockedOr")
private external fun kni__InterlockedOr(Destination: NativePtr, Value: Int): Int

fun _InterlockedXor(Destination: CValuesRef<LONGVar>?, Value: LONG): Int {
    return memScoped {
        val _Destination = Destination?.getPointer(memScope).rawValue
        val _Value = Value
        val res = kni__InterlockedXor(_Destination, _Value)
        res
    }
}

@SymbolName("win32_kni__InterlockedXor")
private external fun kni__InterlockedXor(Destination: NativePtr, Value: Int): Int

fun _InterlockedAnd8(Destination: CValuesRef<ByteVar>?, Value: Byte): Byte {
    return memScoped {
        val _Destination = Destination?.getPointer(memScope).rawValue
        val _Value = Value
        val res = kni__InterlockedAnd8(_Destination, _Value)
        res
    }
}

@SymbolName("win32_kni__InterlockedAnd8")
private external fun kni__InterlockedAnd8(Destination: NativePtr, Value: Byte): Byte

fun _InterlockedOr8(Destination: CValuesRef<ByteVar>?, Value: Byte): Byte {
    return memScoped {
        val _Destination = Destination?.getPointer(memScope).rawValue
        val _Value = Value
        val res = kni__InterlockedOr8(_Destination, _Value)
        res
    }
}

@SymbolName("win32_kni__InterlockedOr8")
private external fun kni__InterlockedOr8(Destination: NativePtr, Value: Byte): Byte

fun _InterlockedXor8(Destination: CValuesRef<ByteVar>?, Value: Byte): Byte {
    return memScoped {
        val _Destination = Destination?.getPointer(memScope).rawValue
        val _Value = Value
        val res = kni__InterlockedXor8(_Destination, _Value)
        res
    }
}

@SymbolName("win32_kni__InterlockedXor8")
private external fun kni__InterlockedXor8(Destination: NativePtr, Value: Byte): Byte

fun _InterlockedAnd16(Destination: CValuesRef<SHORTVar>?, Value: SHORT): SHORT {
    return memScoped {
        val _Destination = Destination?.getPointer(memScope).rawValue
        val _Value = Value
        val res = kni__InterlockedAnd16(_Destination, _Value)
        res
    }
}

@SymbolName("win32_kni__InterlockedAnd16")
private external fun kni__InterlockedAnd16(Destination: NativePtr, Value: Short): Short

fun _InterlockedOr16(Destination: CValuesRef<SHORTVar>?, Value: SHORT): SHORT {
    return memScoped {
        val _Destination = Destination?.getPointer(memScope).rawValue
        val _Value = Value
        val res = kni__InterlockedOr16(_Destination, _Value)
        res
    }
}

@SymbolName("win32_kni__InterlockedOr16")
private external fun kni__InterlockedOr16(Destination: NativePtr, Value: Short): Short

fun _InterlockedXor16(Destination: CValuesRef<SHORTVar>?, Value: SHORT): SHORT {
    return memScoped {
        val _Destination = Destination?.getPointer(memScope).rawValue
        val _Value = Value
        val res = kni__InterlockedXor16(_Destination, _Value)
        res
    }
}

@SymbolName("win32_kni__InterlockedXor16")
private external fun kni__InterlockedXor16(Destination: NativePtr, Value: Short): Short

fun LocalAlloc(uFlags: UINT, uBytes: SIZE_T): HLOCAL? {
    val _uFlags = uFlags
    val _uBytes = uBytes
    val res = kni_LocalAlloc(_uFlags, _uBytes)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_LocalAlloc")
private external fun kni_LocalAlloc(uFlags: Int, uBytes: Long): NativePtr

fun LocalFree(hMem: HLOCAL?): HLOCAL? {
    val _hMem = hMem.rawValue
    val res = kni_LocalFree(_hMem)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_LocalFree")
private external fun kni_LocalFree(hMem: NativePtr): NativePtr

fun WinMain(hInstance: HINSTANCE?, hPrevInstance: HINSTANCE?, lpCmdLine: LPSTR?, nShowCmd: Int): Int {
    val _hInstance = hInstance.rawValue
    val _hPrevInstance = hPrevInstance.rawValue
    val _lpCmdLine = lpCmdLine.rawValue
    val _nShowCmd = nShowCmd
    val res = kni_WinMain(_hInstance, _hPrevInstance, _lpCmdLine, _nShowCmd)
    return res
}

@SymbolName("win32_kni_WinMain")
private external fun kni_WinMain(hInstance: NativePtr, hPrevInstance: NativePtr, lpCmdLine: NativePtr, nShowCmd: Int): Int

fun wWinMain(hInstance: HINSTANCE?, hPrevInstance: HINSTANCE?, lpCmdLine: LPWSTR?, nShowCmd: Int): Int {
    val _hInstance = hInstance.rawValue
    val _hPrevInstance = hPrevInstance.rawValue
    val _lpCmdLine = lpCmdLine.rawValue
    val _nShowCmd = nShowCmd
    val res = kni_wWinMain(_hInstance, _hPrevInstance, _lpCmdLine, _nShowCmd)
    return res
}

@SymbolName("win32_kni_wWinMain")
private external fun kni_wWinMain(hInstance: NativePtr, hPrevInstance: NativePtr, lpCmdLine: NativePtr, nShowCmd: Int): Int

fun GlobalAlloc(uFlags: UINT, dwBytes: SIZE_T): HGLOBAL? {
    val _uFlags = uFlags
    val _dwBytes = dwBytes
    val res = kni_GlobalAlloc(_uFlags, _dwBytes)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GlobalAlloc")
private external fun kni_GlobalAlloc(uFlags: Int, dwBytes: Long): NativePtr

fun GlobalReAlloc(hMem: HGLOBAL?, dwBytes: SIZE_T, uFlags: UINT): HGLOBAL? {
    val _hMem = hMem.rawValue
    val _dwBytes = dwBytes
    val _uFlags = uFlags
    val res = kni_GlobalReAlloc(_hMem, _dwBytes, _uFlags)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GlobalReAlloc")
private external fun kni_GlobalReAlloc(hMem: NativePtr, dwBytes: Long, uFlags: Int): NativePtr

fun GlobalSize(hMem: HGLOBAL?): SIZE_T {
    val _hMem = hMem.rawValue
    val res = kni_GlobalSize(_hMem)
    return res
}

@SymbolName("win32_kni_GlobalSize")
private external fun kni_GlobalSize(hMem: NativePtr): Long

fun GlobalFlags(hMem: HGLOBAL?): UINT {
    val _hMem = hMem.rawValue
    val res = kni_GlobalFlags(_hMem)
    return res
}

@SymbolName("win32_kni_GlobalFlags")
private external fun kni_GlobalFlags(hMem: NativePtr): Int

fun GlobalLock(hMem: HGLOBAL?): LPVOID? {
    val _hMem = hMem.rawValue
    val res = kni_GlobalLock(_hMem)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GlobalLock")
private external fun kni_GlobalLock(hMem: NativePtr): NativePtr

fun GlobalHandle(pMem: LPCVOID?): HGLOBAL? {
    val _pMem = pMem.rawValue
    val res = kni_GlobalHandle(_pMem)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GlobalHandle")
private external fun kni_GlobalHandle(pMem: NativePtr): NativePtr

fun GlobalUnlock(hMem: HGLOBAL?): WINBOOL {
    val _hMem = hMem.rawValue
    val res = kni_GlobalUnlock(_hMem)
    return res
}

@SymbolName("win32_kni_GlobalUnlock")
private external fun kni_GlobalUnlock(hMem: NativePtr): Int

fun GlobalFree(hMem: HGLOBAL?): HGLOBAL? {
    val _hMem = hMem.rawValue
    val res = kni_GlobalFree(_hMem)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GlobalFree")
private external fun kni_GlobalFree(hMem: NativePtr): NativePtr

fun GlobalCompact(dwMinFree: DWORD): SIZE_T {
    val _dwMinFree = dwMinFree
    val res = kni_GlobalCompact(_dwMinFree)
    return res
}

@SymbolName("win32_kni_GlobalCompact")
private external fun kni_GlobalCompact(dwMinFree: Int): Long

fun GlobalFix(hMem: HGLOBAL?): Unit {
    val _hMem = hMem.rawValue
    val res = kni_GlobalFix(_hMem)
    return res
}

@SymbolName("win32_kni_GlobalFix")
private external fun kni_GlobalFix(hMem: NativePtr): Unit

fun GlobalUnfix(hMem: HGLOBAL?): Unit {
    val _hMem = hMem.rawValue
    val res = kni_GlobalUnfix(_hMem)
    return res
}

@SymbolName("win32_kni_GlobalUnfix")
private external fun kni_GlobalUnfix(hMem: NativePtr): Unit

fun GlobalWire(hMem: HGLOBAL?): LPVOID? {
    val _hMem = hMem.rawValue
    val res = kni_GlobalWire(_hMem)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GlobalWire")
private external fun kni_GlobalWire(hMem: NativePtr): NativePtr

fun GlobalUnWire(hMem: HGLOBAL?): WINBOOL {
    val _hMem = hMem.rawValue
    val res = kni_GlobalUnWire(_hMem)
    return res
}

@SymbolName("win32_kni_GlobalUnWire")
private external fun kni_GlobalUnWire(hMem: NativePtr): Int

fun GlobalMemoryStatus(lpBuffer: LPMEMORYSTATUS?): Unit {
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GlobalMemoryStatus(_lpBuffer)
    return res
}

@SymbolName("win32_kni_GlobalMemoryStatus")
private external fun kni_GlobalMemoryStatus(lpBuffer: NativePtr): Unit

fun LocalReAlloc(hMem: HLOCAL?, uBytes: SIZE_T, uFlags: UINT): HLOCAL? {
    val _hMem = hMem.rawValue
    val _uBytes = uBytes
    val _uFlags = uFlags
    val res = kni_LocalReAlloc(_hMem, _uBytes, _uFlags)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_LocalReAlloc")
private external fun kni_LocalReAlloc(hMem: NativePtr, uBytes: Long, uFlags: Int): NativePtr

fun LocalLock(hMem: HLOCAL?): LPVOID? {
    val _hMem = hMem.rawValue
    val res = kni_LocalLock(_hMem)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_LocalLock")
private external fun kni_LocalLock(hMem: NativePtr): NativePtr

fun LocalHandle(pMem: LPCVOID?): HLOCAL? {
    val _pMem = pMem.rawValue
    val res = kni_LocalHandle(_pMem)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_LocalHandle")
private external fun kni_LocalHandle(pMem: NativePtr): NativePtr

fun LocalUnlock(hMem: HLOCAL?): WINBOOL {
    val _hMem = hMem.rawValue
    val res = kni_LocalUnlock(_hMem)
    return res
}

@SymbolName("win32_kni_LocalUnlock")
private external fun kni_LocalUnlock(hMem: NativePtr): Int

fun LocalSize(hMem: HLOCAL?): SIZE_T {
    val _hMem = hMem.rawValue
    val res = kni_LocalSize(_hMem)
    return res
}

@SymbolName("win32_kni_LocalSize")
private external fun kni_LocalSize(hMem: NativePtr): Long

fun LocalFlags(hMem: HLOCAL?): UINT {
    val _hMem = hMem.rawValue
    val res = kni_LocalFlags(_hMem)
    return res
}

@SymbolName("win32_kni_LocalFlags")
private external fun kni_LocalFlags(hMem: NativePtr): Int

fun LocalShrink(hMem: HLOCAL?, cbNewSize: UINT): SIZE_T {
    val _hMem = hMem.rawValue
    val _cbNewSize = cbNewSize
    val res = kni_LocalShrink(_hMem, _cbNewSize)
    return res
}

@SymbolName("win32_kni_LocalShrink")
private external fun kni_LocalShrink(hMem: NativePtr, cbNewSize: Int): Long

fun LocalCompact(uMinFree: UINT): SIZE_T {
    val _uMinFree = uMinFree
    val res = kni_LocalCompact(_uMinFree)
    return res
}

@SymbolName("win32_kni_LocalCompact")
private external fun kni_LocalCompact(uMinFree: Int): Long

fun GetBinaryTypeA(lpApplicationName: String?, lpBinaryType: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpApplicationName = lpApplicationName?.cstr?.getPointer(memScope).rawValue
        val _lpBinaryType = lpBinaryType.rawValue
        val res = kni_GetBinaryTypeA(_lpApplicationName, _lpBinaryType)
        res
    }
}

@SymbolName("win32_kni_GetBinaryTypeA")
private external fun kni_GetBinaryTypeA(lpApplicationName: NativePtr, lpBinaryType: NativePtr): Int

fun GetBinaryTypeW(lpApplicationName: String?, lpBinaryType: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpApplicationName = lpApplicationName?.wcstr?.getPointer(memScope).rawValue
        val _lpBinaryType = lpBinaryType.rawValue
        val res = kni_GetBinaryTypeW(_lpApplicationName, _lpBinaryType)
        res
    }
}

@SymbolName("win32_kni_GetBinaryTypeW")
private external fun kni_GetBinaryTypeW(lpApplicationName: NativePtr, lpBinaryType: NativePtr): Int

fun GetShortPathNameA(lpszLongPath: String?, lpszShortPath: LPSTR?, cchBuffer: DWORD): DWORD {
    return memScoped {
        val _lpszLongPath = lpszLongPath?.cstr?.getPointer(memScope).rawValue
        val _lpszShortPath = lpszShortPath.rawValue
        val _cchBuffer = cchBuffer
        val res = kni_GetShortPathNameA(_lpszLongPath, _lpszShortPath, _cchBuffer)
        res
    }
}

@SymbolName("win32_kni_GetShortPathNameA")
private external fun kni_GetShortPathNameA(lpszLongPath: NativePtr, lpszShortPath: NativePtr, cchBuffer: Int): Int

fun GetProcessAffinityMask(hProcess: HANDLE?, lpProcessAffinityMask: PDWORD_PTR?, lpSystemAffinityMask: PDWORD_PTR?): WINBOOL {
    val _hProcess = hProcess.rawValue
    val _lpProcessAffinityMask = lpProcessAffinityMask.rawValue
    val _lpSystemAffinityMask = lpSystemAffinityMask.rawValue
    val res = kni_GetProcessAffinityMask(_hProcess, _lpProcessAffinityMask, _lpSystemAffinityMask)
    return res
}

@SymbolName("win32_kni_GetProcessAffinityMask")
private external fun kni_GetProcessAffinityMask(hProcess: NativePtr, lpProcessAffinityMask: NativePtr, lpSystemAffinityMask: NativePtr): Int

fun SetProcessAffinityMask(hProcess: HANDLE?, dwProcessAffinityMask: DWORD_PTR): WINBOOL {
    val _hProcess = hProcess.rawValue
    val _dwProcessAffinityMask = dwProcessAffinityMask
    val res = kni_SetProcessAffinityMask(_hProcess, _dwProcessAffinityMask)
    return res
}

@SymbolName("win32_kni_SetProcessAffinityMask")
private external fun kni_SetProcessAffinityMask(hProcess: NativePtr, dwProcessAffinityMask: Long): Int

fun GetProcessIoCounters(hProcess: HANDLE?, lpIoCounters: PIO_COUNTERS?): WINBOOL {
    val _hProcess = hProcess.rawValue
    val _lpIoCounters = lpIoCounters.rawValue
    val res = kni_GetProcessIoCounters(_hProcess, _lpIoCounters)
    return res
}

@SymbolName("win32_kni_GetProcessIoCounters")
private external fun kni_GetProcessIoCounters(hProcess: NativePtr, lpIoCounters: NativePtr): Int

fun GetProcessWorkingSetSize(hProcess: HANDLE?, lpMinimumWorkingSetSize: PSIZE_T?, lpMaximumWorkingSetSize: PSIZE_T?): WINBOOL {
    val _hProcess = hProcess.rawValue
    val _lpMinimumWorkingSetSize = lpMinimumWorkingSetSize.rawValue
    val _lpMaximumWorkingSetSize = lpMaximumWorkingSetSize.rawValue
    val res = kni_GetProcessWorkingSetSize(_hProcess, _lpMinimumWorkingSetSize, _lpMaximumWorkingSetSize)
    return res
}

@SymbolName("win32_kni_GetProcessWorkingSetSize")
private external fun kni_GetProcessWorkingSetSize(hProcess: NativePtr, lpMinimumWorkingSetSize: NativePtr, lpMaximumWorkingSetSize: NativePtr): Int

fun SetProcessWorkingSetSize(hProcess: HANDLE?, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T): WINBOOL {
    val _hProcess = hProcess.rawValue
    val _dwMinimumWorkingSetSize = dwMinimumWorkingSetSize
    val _dwMaximumWorkingSetSize = dwMaximumWorkingSetSize
    val res = kni_SetProcessWorkingSetSize(_hProcess, _dwMinimumWorkingSetSize, _dwMaximumWorkingSetSize)
    return res
}

@SymbolName("win32_kni_SetProcessWorkingSetSize")
private external fun kni_SetProcessWorkingSetSize(hProcess: NativePtr, dwMinimumWorkingSetSize: Long, dwMaximumWorkingSetSize: Long): Int

fun FatalExit(ExitCode: Int): Unit {
    val _ExitCode = ExitCode
    val res = kni_FatalExit(_ExitCode)
    return res
}

@SymbolName("win32_kni_FatalExit")
private external fun kni_FatalExit(ExitCode: Int): Unit

fun SetEnvironmentStringsA(NewEnvironment: LPCH?): WINBOOL {
    val _NewEnvironment = NewEnvironment.rawValue
    val res = kni_SetEnvironmentStringsA(_NewEnvironment)
    return res
}

@SymbolName("win32_kni_SetEnvironmentStringsA")
private external fun kni_SetEnvironmentStringsA(NewEnvironment: NativePtr): Int

fun RaiseFailFastException(pExceptionRecord: PEXCEPTION_RECORD?, pContextRecord: PCONTEXT?, dwFlags: DWORD): Unit {
    val _pExceptionRecord = pExceptionRecord.rawValue
    val _pContextRecord = pContextRecord.rawValue
    val _dwFlags = dwFlags
    val res = kni_RaiseFailFastException(_pExceptionRecord, _pContextRecord, _dwFlags)
    return res
}

@SymbolName("win32_kni_RaiseFailFastException")
private external fun kni_RaiseFailFastException(pExceptionRecord: NativePtr, pContextRecord: NativePtr, dwFlags: Int): Unit

fun SetThreadIdealProcessor(hThread: HANDLE?, dwIdealProcessor: DWORD): DWORD {
    val _hThread = hThread.rawValue
    val _dwIdealProcessor = dwIdealProcessor
    val res = kni_SetThreadIdealProcessor(_hThread, _dwIdealProcessor)
    return res
}

@SymbolName("win32_kni_SetThreadIdealProcessor")
private external fun kni_SetThreadIdealProcessor(hThread: NativePtr, dwIdealProcessor: Int): Int

fun CreateFiber(dwStackSize: SIZE_T, lpStartAddress: LPFIBER_START_ROUTINE?, lpParameter: LPVOID?): LPVOID? {
    val _dwStackSize = dwStackSize
    val _lpStartAddress = lpStartAddress.rawValue
    val _lpParameter = lpParameter.rawValue
    val res = kni_CreateFiber(_dwStackSize, _lpStartAddress, _lpParameter)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CreateFiber")
private external fun kni_CreateFiber(dwStackSize: Long, lpStartAddress: NativePtr, lpParameter: NativePtr): NativePtr

fun CreateFiberEx(dwStackCommitSize: SIZE_T, dwStackReserveSize: SIZE_T, dwFlags: DWORD, lpStartAddress: LPFIBER_START_ROUTINE?, lpParameter: LPVOID?): LPVOID? {
    val _dwStackCommitSize = dwStackCommitSize
    val _dwStackReserveSize = dwStackReserveSize
    val _dwFlags = dwFlags
    val _lpStartAddress = lpStartAddress.rawValue
    val _lpParameter = lpParameter.rawValue
    val res = kni_CreateFiberEx(_dwStackCommitSize, _dwStackReserveSize, _dwFlags, _lpStartAddress, _lpParameter)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CreateFiberEx")
private external fun kni_CreateFiberEx(dwStackCommitSize: Long, dwStackReserveSize: Long, dwFlags: Int, lpStartAddress: NativePtr, lpParameter: NativePtr): NativePtr

fun DeleteFiber(lpFiber: LPVOID?): Unit {
    val _lpFiber = lpFiber.rawValue
    val res = kni_DeleteFiber(_lpFiber)
    return res
}

@SymbolName("win32_kni_DeleteFiber")
private external fun kni_DeleteFiber(lpFiber: NativePtr): Unit

fun ConvertThreadToFiber(lpParameter: LPVOID?): LPVOID? {
    val _lpParameter = lpParameter.rawValue
    val res = kni_ConvertThreadToFiber(_lpParameter)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_ConvertThreadToFiber")
private external fun kni_ConvertThreadToFiber(lpParameter: NativePtr): NativePtr

fun ConvertThreadToFiberEx(lpParameter: LPVOID?, dwFlags: DWORD): LPVOID? {
    val _lpParameter = lpParameter.rawValue
    val _dwFlags = dwFlags
    val res = kni_ConvertThreadToFiberEx(_lpParameter, _dwFlags)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_ConvertThreadToFiberEx")
private external fun kni_ConvertThreadToFiberEx(lpParameter: NativePtr, dwFlags: Int): NativePtr

fun ConvertFiberToThread(): WINBOOL {
    val res = kni_ConvertFiberToThread()
    return res
}

@SymbolName("win32_kni_ConvertFiberToThread")
private external fun kni_ConvertFiberToThread(): Int

fun SwitchToFiber(lpFiber: LPVOID?): Unit {
    val _lpFiber = lpFiber.rawValue
    val res = kni_SwitchToFiber(_lpFiber)
    return res
}

@SymbolName("win32_kni_SwitchToFiber")
private external fun kni_SwitchToFiber(lpFiber: NativePtr): Unit

fun SetThreadAffinityMask(hThread: HANDLE?, dwThreadAffinityMask: DWORD_PTR): DWORD_PTR {
    val _hThread = hThread.rawValue
    val _dwThreadAffinityMask = dwThreadAffinityMask
    val res = kni_SetThreadAffinityMask(_hThread, _dwThreadAffinityMask)
    return res
}

@SymbolName("win32_kni_SetThreadAffinityMask")
private external fun kni_SetThreadAffinityMask(hThread: NativePtr, dwThreadAffinityMask: Long): Long

fun SetProcessPriorityBoost(hProcess: HANDLE?, bDisablePriorityBoost: WINBOOL): WINBOOL {
    val _hProcess = hProcess.rawValue
    val _bDisablePriorityBoost = bDisablePriorityBoost
    val res = kni_SetProcessPriorityBoost(_hProcess, _bDisablePriorityBoost)
    return res
}

@SymbolName("win32_kni_SetProcessPriorityBoost")
private external fun kni_SetProcessPriorityBoost(hProcess: NativePtr, bDisablePriorityBoost: Int): Int

fun GetProcessPriorityBoost(hProcess: HANDLE?, pDisablePriorityBoost: PBOOL?): WINBOOL {
    val _hProcess = hProcess.rawValue
    val _pDisablePriorityBoost = pDisablePriorityBoost.rawValue
    val res = kni_GetProcessPriorityBoost(_hProcess, _pDisablePriorityBoost)
    return res
}

@SymbolName("win32_kni_GetProcessPriorityBoost")
private external fun kni_GetProcessPriorityBoost(hProcess: NativePtr, pDisablePriorityBoost: NativePtr): Int

fun RequestWakeupLatency(latency: LATENCY_TIME): WINBOOL {
    val _latency = latency.value
    val res = kni_RequestWakeupLatency(_latency)
    return res
}

@SymbolName("win32_kni_RequestWakeupLatency")
private external fun kni_RequestWakeupLatency(latency: Int): Int

fun IsSystemResumeAutomatic(): WINBOOL {
    val res = kni_IsSystemResumeAutomatic()
    return res
}

@SymbolName("win32_kni_IsSystemResumeAutomatic")
private external fun kni_IsSystemResumeAutomatic(): Int

fun GetThreadIOPendingFlag(hThread: HANDLE?, lpIOIsPending: PBOOL?): WINBOOL {
    val _hThread = hThread.rawValue
    val _lpIOIsPending = lpIOIsPending.rawValue
    val res = kni_GetThreadIOPendingFlag(_hThread, _lpIOIsPending)
    return res
}

@SymbolName("win32_kni_GetThreadIOPendingFlag")
private external fun kni_GetThreadIOPendingFlag(hThread: NativePtr, lpIOIsPending: NativePtr): Int

fun GetThreadSelectorEntry(hThread: HANDLE?, dwSelector: DWORD, lpSelectorEntry: LPLDT_ENTRY?): WINBOOL {
    val _hThread = hThread.rawValue
    val _dwSelector = dwSelector
    val _lpSelectorEntry = lpSelectorEntry.rawValue
    val res = kni_GetThreadSelectorEntry(_hThread, _dwSelector, _lpSelectorEntry)
    return res
}

@SymbolName("win32_kni_GetThreadSelectorEntry")
private external fun kni_GetThreadSelectorEntry(hThread: NativePtr, dwSelector: Int, lpSelectorEntry: NativePtr): Int

fun SetThreadExecutionState(esFlags: EXECUTION_STATE): EXECUTION_STATE {
    val _esFlags = esFlags
    val res = kni_SetThreadExecutionState(_esFlags)
    return res
}

@SymbolName("win32_kni_SetThreadExecutionState")
private external fun kni_SetThreadExecutionState(esFlags: Int): Int

fun GetThreadErrorMode(): DWORD {
    val res = kni_GetThreadErrorMode()
    return res
}

@SymbolName("win32_kni_GetThreadErrorMode")
private external fun kni_GetThreadErrorMode(): Int

fun SetThreadErrorMode(dwNewMode: DWORD, lpOldMode: LPDWORD?): WINBOOL {
    val _dwNewMode = dwNewMode
    val _lpOldMode = lpOldMode.rawValue
    val res = kni_SetThreadErrorMode(_dwNewMode, _lpOldMode)
    return res
}

@SymbolName("win32_kni_SetThreadErrorMode")
private external fun kni_SetThreadErrorMode(dwNewMode: Int, lpOldMode: NativePtr): Int

fun DebugSetProcessKillOnExit(KillOnExit: WINBOOL): WINBOOL {
    val _KillOnExit = KillOnExit
    val res = kni_DebugSetProcessKillOnExit(_KillOnExit)
    return res
}

@SymbolName("win32_kni_DebugSetProcessKillOnExit")
private external fun kni_DebugSetProcessKillOnExit(KillOnExit: Int): Int

fun DebugBreakProcess(Process: HANDLE?): WINBOOL {
    val _Process = Process.rawValue
    val res = kni_DebugBreakProcess(_Process)
    return res
}

@SymbolName("win32_kni_DebugBreakProcess")
private external fun kni_DebugBreakProcess(Process: NativePtr): Int

fun PulseEvent(hEvent: HANDLE?): WINBOOL {
    val _hEvent = hEvent.rawValue
    val res = kni_PulseEvent(_hEvent)
    return res
}

@SymbolName("win32_kni_PulseEvent")
private external fun kni_PulseEvent(hEvent: NativePtr): Int

fun WaitForMultipleObjects(nCount: DWORD, lpHandles: CValuesRef<HANDLEVar>?, bWaitAll: WINBOOL, dwMilliseconds: DWORD): DWORD {
    return memScoped {
        val _nCount = nCount
        val _lpHandles = lpHandles?.getPointer(memScope).rawValue
        val _bWaitAll = bWaitAll
        val _dwMilliseconds = dwMilliseconds
        val res = kni_WaitForMultipleObjects(_nCount, _lpHandles, _bWaitAll, _dwMilliseconds)
        res
    }
}

@SymbolName("win32_kni_WaitForMultipleObjects")
private external fun kni_WaitForMultipleObjects(nCount: Int, lpHandles: NativePtr, bWaitAll: Int, dwMilliseconds: Int): Int

fun GlobalDeleteAtom(nAtom: ATOM): ATOM {
    val _nAtom = nAtom
    val res = kni_GlobalDeleteAtom(_nAtom)
    return res
}

@SymbolName("win32_kni_GlobalDeleteAtom")
private external fun kni_GlobalDeleteAtom(nAtom: Short): Short

fun InitAtomTable(nSize: DWORD): WINBOOL {
    val _nSize = nSize
    val res = kni_InitAtomTable(_nSize)
    return res
}

@SymbolName("win32_kni_InitAtomTable")
private external fun kni_InitAtomTable(nSize: Int): Int

fun DeleteAtom(nAtom: ATOM): ATOM {
    val _nAtom = nAtom
    val res = kni_DeleteAtom(_nAtom)
    return res
}

@SymbolName("win32_kni_DeleteAtom")
private external fun kni_DeleteAtom(nAtom: Short): Short

fun SetHandleCount(uNumber: UINT): UINT {
    val _uNumber = uNumber
    val res = kni_SetHandleCount(_uNumber)
    return res
}

@SymbolName("win32_kni_SetHandleCount")
private external fun kni_SetHandleCount(uNumber: Int): Int

fun RequestDeviceWakeup(hDevice: HANDLE?): WINBOOL {
    val _hDevice = hDevice.rawValue
    val res = kni_RequestDeviceWakeup(_hDevice)
    return res
}

@SymbolName("win32_kni_RequestDeviceWakeup")
private external fun kni_RequestDeviceWakeup(hDevice: NativePtr): Int

fun CancelDeviceWakeupRequest(hDevice: HANDLE?): WINBOOL {
    val _hDevice = hDevice.rawValue
    val res = kni_CancelDeviceWakeupRequest(_hDevice)
    return res
}

@SymbolName("win32_kni_CancelDeviceWakeupRequest")
private external fun kni_CancelDeviceWakeupRequest(hDevice: NativePtr): Int

fun GetDevicePowerState(hDevice: HANDLE?, pfOn: CValuesRef<WINBOOLVar>?): WINBOOL {
    return memScoped {
        val _hDevice = hDevice.rawValue
        val _pfOn = pfOn?.getPointer(memScope).rawValue
        val res = kni_GetDevicePowerState(_hDevice, _pfOn)
        res
    }
}

@SymbolName("win32_kni_GetDevicePowerState")
private external fun kni_GetDevicePowerState(hDevice: NativePtr, pfOn: NativePtr): Int

fun SetMessageWaitingIndicator(hMsgIndicator: HANDLE?, ulMsgCount: ULONG): WINBOOL {
    val _hMsgIndicator = hMsgIndicator.rawValue
    val _ulMsgCount = ulMsgCount
    val res = kni_SetMessageWaitingIndicator(_hMsgIndicator, _ulMsgCount)
    return res
}

@SymbolName("win32_kni_SetMessageWaitingIndicator")
private external fun kni_SetMessageWaitingIndicator(hMsgIndicator: NativePtr, ulMsgCount: Int): Int

fun SetFileShortNameA(hFile: HANDLE?, lpShortName: String?): WINBOOL {
    return memScoped {
        val _hFile = hFile.rawValue
        val _lpShortName = lpShortName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetFileShortNameA(_hFile, _lpShortName)
        res
    }
}

@SymbolName("win32_kni_SetFileShortNameA")
private external fun kni_SetFileShortNameA(hFile: NativePtr, lpShortName: NativePtr): Int

fun SetFileShortNameW(hFile: HANDLE?, lpShortName: String?): WINBOOL {
    return memScoped {
        val _hFile = hFile.rawValue
        val _lpShortName = lpShortName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetFileShortNameW(_hFile, _lpShortName)
        res
    }
}

@SymbolName("win32_kni_SetFileShortNameW")
private external fun kni_SetFileShortNameW(hFile: NativePtr, lpShortName: NativePtr): Int

fun LoadModule(lpModuleName: String?, lpParameterBlock: LPVOID?): DWORD {
    return memScoped {
        val _lpModuleName = lpModuleName?.cstr?.getPointer(memScope).rawValue
        val _lpParameterBlock = lpParameterBlock.rawValue
        val res = kni_LoadModule(_lpModuleName, _lpParameterBlock)
        res
    }
}

@SymbolName("win32_kni_LoadModule")
private external fun kni_LoadModule(lpModuleName: NativePtr, lpParameterBlock: NativePtr): Int

fun WinExec(lpCmdLine: String?, uCmdShow: UINT): UINT {
    return memScoped {
        val _lpCmdLine = lpCmdLine?.cstr?.getPointer(memScope).rawValue
        val _uCmdShow = uCmdShow
        val res = kni_WinExec(_lpCmdLine, _uCmdShow)
        res
    }
}

@SymbolName("win32_kni_WinExec")
private external fun kni_WinExec(lpCmdLine: NativePtr, uCmdShow: Int): Int

fun ClearCommBreak(hFile: HANDLE?): WINBOOL {
    val _hFile = hFile.rawValue
    val res = kni_ClearCommBreak(_hFile)
    return res
}

@SymbolName("win32_kni_ClearCommBreak")
private external fun kni_ClearCommBreak(hFile: NativePtr): Int

fun ClearCommError(hFile: HANDLE?, lpErrors: LPDWORD?, lpStat: LPCOMSTAT?): WINBOOL {
    val _hFile = hFile.rawValue
    val _lpErrors = lpErrors.rawValue
    val _lpStat = lpStat.rawValue
    val res = kni_ClearCommError(_hFile, _lpErrors, _lpStat)
    return res
}

@SymbolName("win32_kni_ClearCommError")
private external fun kni_ClearCommError(hFile: NativePtr, lpErrors: NativePtr, lpStat: NativePtr): Int

fun SetupComm(hFile: HANDLE?, dwInQueue: DWORD, dwOutQueue: DWORD): WINBOOL {
    val _hFile = hFile.rawValue
    val _dwInQueue = dwInQueue
    val _dwOutQueue = dwOutQueue
    val res = kni_SetupComm(_hFile, _dwInQueue, _dwOutQueue)
    return res
}

@SymbolName("win32_kni_SetupComm")
private external fun kni_SetupComm(hFile: NativePtr, dwInQueue: Int, dwOutQueue: Int): Int

fun EscapeCommFunction(hFile: HANDLE?, dwFunc: DWORD): WINBOOL {
    val _hFile = hFile.rawValue
    val _dwFunc = dwFunc
    val res = kni_EscapeCommFunction(_hFile, _dwFunc)
    return res
}

@SymbolName("win32_kni_EscapeCommFunction")
private external fun kni_EscapeCommFunction(hFile: NativePtr, dwFunc: Int): Int

fun GetCommConfig(hCommDev: HANDLE?, lpCC: LPCOMMCONFIG?, lpdwSize: LPDWORD?): WINBOOL {
    val _hCommDev = hCommDev.rawValue
    val _lpCC = lpCC.rawValue
    val _lpdwSize = lpdwSize.rawValue
    val res = kni_GetCommConfig(_hCommDev, _lpCC, _lpdwSize)
    return res
}

@SymbolName("win32_kni_GetCommConfig")
private external fun kni_GetCommConfig(hCommDev: NativePtr, lpCC: NativePtr, lpdwSize: NativePtr): Int

fun GetCommMask(hFile: HANDLE?, lpEvtMask: LPDWORD?): WINBOOL {
    val _hFile = hFile.rawValue
    val _lpEvtMask = lpEvtMask.rawValue
    val res = kni_GetCommMask(_hFile, _lpEvtMask)
    return res
}

@SymbolName("win32_kni_GetCommMask")
private external fun kni_GetCommMask(hFile: NativePtr, lpEvtMask: NativePtr): Int

fun GetCommProperties(hFile: HANDLE?, lpCommProp: LPCOMMPROP?): WINBOOL {
    val _hFile = hFile.rawValue
    val _lpCommProp = lpCommProp.rawValue
    val res = kni_GetCommProperties(_hFile, _lpCommProp)
    return res
}

@SymbolName("win32_kni_GetCommProperties")
private external fun kni_GetCommProperties(hFile: NativePtr, lpCommProp: NativePtr): Int

fun GetCommModemStatus(hFile: HANDLE?, lpModemStat: LPDWORD?): WINBOOL {
    val _hFile = hFile.rawValue
    val _lpModemStat = lpModemStat.rawValue
    val res = kni_GetCommModemStatus(_hFile, _lpModemStat)
    return res
}

@SymbolName("win32_kni_GetCommModemStatus")
private external fun kni_GetCommModemStatus(hFile: NativePtr, lpModemStat: NativePtr): Int

fun GetCommState(hFile: HANDLE?, lpDCB: LPDCB?): WINBOOL {
    val _hFile = hFile.rawValue
    val _lpDCB = lpDCB.rawValue
    val res = kni_GetCommState(_hFile, _lpDCB)
    return res
}

@SymbolName("win32_kni_GetCommState")
private external fun kni_GetCommState(hFile: NativePtr, lpDCB: NativePtr): Int

fun GetCommTimeouts(hFile: HANDLE?, lpCommTimeouts: LPCOMMTIMEOUTS?): WINBOOL {
    val _hFile = hFile.rawValue
    val _lpCommTimeouts = lpCommTimeouts.rawValue
    val res = kni_GetCommTimeouts(_hFile, _lpCommTimeouts)
    return res
}

@SymbolName("win32_kni_GetCommTimeouts")
private external fun kni_GetCommTimeouts(hFile: NativePtr, lpCommTimeouts: NativePtr): Int

fun PurgeComm(hFile: HANDLE?, dwFlags: DWORD): WINBOOL {
    val _hFile = hFile.rawValue
    val _dwFlags = dwFlags
    val res = kni_PurgeComm(_hFile, _dwFlags)
    return res
}

@SymbolName("win32_kni_PurgeComm")
private external fun kni_PurgeComm(hFile: NativePtr, dwFlags: Int): Int

fun SetCommBreak(hFile: HANDLE?): WINBOOL {
    val _hFile = hFile.rawValue
    val res = kni_SetCommBreak(_hFile)
    return res
}

@SymbolName("win32_kni_SetCommBreak")
private external fun kni_SetCommBreak(hFile: NativePtr): Int

fun SetCommConfig(hCommDev: HANDLE?, lpCC: LPCOMMCONFIG?, dwSize: DWORD): WINBOOL {
    val _hCommDev = hCommDev.rawValue
    val _lpCC = lpCC.rawValue
    val _dwSize = dwSize
    val res = kni_SetCommConfig(_hCommDev, _lpCC, _dwSize)
    return res
}

@SymbolName("win32_kni_SetCommConfig")
private external fun kni_SetCommConfig(hCommDev: NativePtr, lpCC: NativePtr, dwSize: Int): Int

fun SetCommMask(hFile: HANDLE?, dwEvtMask: DWORD): WINBOOL {
    val _hFile = hFile.rawValue
    val _dwEvtMask = dwEvtMask
    val res = kni_SetCommMask(_hFile, _dwEvtMask)
    return res
}

@SymbolName("win32_kni_SetCommMask")
private external fun kni_SetCommMask(hFile: NativePtr, dwEvtMask: Int): Int

fun SetCommState(hFile: HANDLE?, lpDCB: LPDCB?): WINBOOL {
    val _hFile = hFile.rawValue
    val _lpDCB = lpDCB.rawValue
    val res = kni_SetCommState(_hFile, _lpDCB)
    return res
}

@SymbolName("win32_kni_SetCommState")
private external fun kni_SetCommState(hFile: NativePtr, lpDCB: NativePtr): Int

fun SetCommTimeouts(hFile: HANDLE?, lpCommTimeouts: LPCOMMTIMEOUTS?): WINBOOL {
    val _hFile = hFile.rawValue
    val _lpCommTimeouts = lpCommTimeouts.rawValue
    val res = kni_SetCommTimeouts(_hFile, _lpCommTimeouts)
    return res
}

@SymbolName("win32_kni_SetCommTimeouts")
private external fun kni_SetCommTimeouts(hFile: NativePtr, lpCommTimeouts: NativePtr): Int

fun TransmitCommChar(hFile: HANDLE?, cChar: Byte): WINBOOL {
    val _hFile = hFile.rawValue
    val _cChar = cChar
    val res = kni_TransmitCommChar(_hFile, _cChar)
    return res
}

@SymbolName("win32_kni_TransmitCommChar")
private external fun kni_TransmitCommChar(hFile: NativePtr, cChar: Byte): Int

fun WaitCommEvent(hFile: HANDLE?, lpEvtMask: LPDWORD?, lpOverlapped: LPOVERLAPPED?): WINBOOL {
    val _hFile = hFile.rawValue
    val _lpEvtMask = lpEvtMask.rawValue
    val _lpOverlapped = lpOverlapped.rawValue
    val res = kni_WaitCommEvent(_hFile, _lpEvtMask, _lpOverlapped)
    return res
}

@SymbolName("win32_kni_WaitCommEvent")
private external fun kni_WaitCommEvent(hFile: NativePtr, lpEvtMask: NativePtr, lpOverlapped: NativePtr): Int

fun SetTapePosition(hDevice: HANDLE?, dwPositionMethod: DWORD, dwPartition: DWORD, dwOffsetLow: DWORD, dwOffsetHigh: DWORD, bImmediate: WINBOOL): DWORD {
    val _hDevice = hDevice.rawValue
    val _dwPositionMethod = dwPositionMethod
    val _dwPartition = dwPartition
    val _dwOffsetLow = dwOffsetLow
    val _dwOffsetHigh = dwOffsetHigh
    val _bImmediate = bImmediate
    val res = kni_SetTapePosition(_hDevice, _dwPositionMethod, _dwPartition, _dwOffsetLow, _dwOffsetHigh, _bImmediate)
    return res
}

@SymbolName("win32_kni_SetTapePosition")
private external fun kni_SetTapePosition(hDevice: NativePtr, dwPositionMethod: Int, dwPartition: Int, dwOffsetLow: Int, dwOffsetHigh: Int, bImmediate: Int): Int

fun GetTapePosition(hDevice: HANDLE?, dwPositionType: DWORD, lpdwPartition: LPDWORD?, lpdwOffsetLow: LPDWORD?, lpdwOffsetHigh: LPDWORD?): DWORD {
    val _hDevice = hDevice.rawValue
    val _dwPositionType = dwPositionType
    val _lpdwPartition = lpdwPartition.rawValue
    val _lpdwOffsetLow = lpdwOffsetLow.rawValue
    val _lpdwOffsetHigh = lpdwOffsetHigh.rawValue
    val res = kni_GetTapePosition(_hDevice, _dwPositionType, _lpdwPartition, _lpdwOffsetLow, _lpdwOffsetHigh)
    return res
}

@SymbolName("win32_kni_GetTapePosition")
private external fun kni_GetTapePosition(hDevice: NativePtr, dwPositionType: Int, lpdwPartition: NativePtr, lpdwOffsetLow: NativePtr, lpdwOffsetHigh: NativePtr): Int

fun PrepareTape(hDevice: HANDLE?, dwOperation: DWORD, bImmediate: WINBOOL): DWORD {
    val _hDevice = hDevice.rawValue
    val _dwOperation = dwOperation
    val _bImmediate = bImmediate
    val res = kni_PrepareTape(_hDevice, _dwOperation, _bImmediate)
    return res
}

@SymbolName("win32_kni_PrepareTape")
private external fun kni_PrepareTape(hDevice: NativePtr, dwOperation: Int, bImmediate: Int): Int

fun EraseTape(hDevice: HANDLE?, dwEraseType: DWORD, bImmediate: WINBOOL): DWORD {
    val _hDevice = hDevice.rawValue
    val _dwEraseType = dwEraseType
    val _bImmediate = bImmediate
    val res = kni_EraseTape(_hDevice, _dwEraseType, _bImmediate)
    return res
}

@SymbolName("win32_kni_EraseTape")
private external fun kni_EraseTape(hDevice: NativePtr, dwEraseType: Int, bImmediate: Int): Int

fun CreateTapePartition(hDevice: HANDLE?, dwPartitionMethod: DWORD, dwCount: DWORD, dwSize: DWORD): DWORD {
    val _hDevice = hDevice.rawValue
    val _dwPartitionMethod = dwPartitionMethod
    val _dwCount = dwCount
    val _dwSize = dwSize
    val res = kni_CreateTapePartition(_hDevice, _dwPartitionMethod, _dwCount, _dwSize)
    return res
}

@SymbolName("win32_kni_CreateTapePartition")
private external fun kni_CreateTapePartition(hDevice: NativePtr, dwPartitionMethod: Int, dwCount: Int, dwSize: Int): Int

fun WriteTapemark(hDevice: HANDLE?, dwTapemarkType: DWORD, dwTapemarkCount: DWORD, bImmediate: WINBOOL): DWORD {
    val _hDevice = hDevice.rawValue
    val _dwTapemarkType = dwTapemarkType
    val _dwTapemarkCount = dwTapemarkCount
    val _bImmediate = bImmediate
    val res = kni_WriteTapemark(_hDevice, _dwTapemarkType, _dwTapemarkCount, _bImmediate)
    return res
}

@SymbolName("win32_kni_WriteTapemark")
private external fun kni_WriteTapemark(hDevice: NativePtr, dwTapemarkType: Int, dwTapemarkCount: Int, bImmediate: Int): Int

fun GetTapeStatus(hDevice: HANDLE?): DWORD {
    val _hDevice = hDevice.rawValue
    val res = kni_GetTapeStatus(_hDevice)
    return res
}

@SymbolName("win32_kni_GetTapeStatus")
private external fun kni_GetTapeStatus(hDevice: NativePtr): Int

fun GetTapeParameters(hDevice: HANDLE?, dwOperation: DWORD, lpdwSize: LPDWORD?, lpTapeInformation: LPVOID?): DWORD {
    val _hDevice = hDevice.rawValue
    val _dwOperation = dwOperation
    val _lpdwSize = lpdwSize.rawValue
    val _lpTapeInformation = lpTapeInformation.rawValue
    val res = kni_GetTapeParameters(_hDevice, _dwOperation, _lpdwSize, _lpTapeInformation)
    return res
}

@SymbolName("win32_kni_GetTapeParameters")
private external fun kni_GetTapeParameters(hDevice: NativePtr, dwOperation: Int, lpdwSize: NativePtr, lpTapeInformation: NativePtr): Int

fun SetTapeParameters(hDevice: HANDLE?, dwOperation: DWORD, lpTapeInformation: LPVOID?): DWORD {
    val _hDevice = hDevice.rawValue
    val _dwOperation = dwOperation
    val _lpTapeInformation = lpTapeInformation.rawValue
    val res = kni_SetTapeParameters(_hDevice, _dwOperation, _lpTapeInformation)
    return res
}

@SymbolName("win32_kni_SetTapeParameters")
private external fun kni_SetTapeParameters(hDevice: NativePtr, dwOperation: Int, lpTapeInformation: NativePtr): Int

fun GetSystemDEPPolicy(): DEP_SYSTEM_POLICY_TYPE {
    val res = kni_GetSystemDEPPolicy()
    return res
}

@SymbolName("win32_kni_GetSystemDEPPolicy")
private external fun kni_GetSystemDEPPolicy(): Int

fun GetSystemRegistryQuota(pdwQuotaAllowed: PDWORD?, pdwQuotaUsed: PDWORD?): WINBOOL {
    val _pdwQuotaAllowed = pdwQuotaAllowed.rawValue
    val _pdwQuotaUsed = pdwQuotaUsed.rawValue
    val res = kni_GetSystemRegistryQuota(_pdwQuotaAllowed, _pdwQuotaUsed)
    return res
}

@SymbolName("win32_kni_GetSystemRegistryQuota")
private external fun kni_GetSystemRegistryQuota(pdwQuotaAllowed: NativePtr, pdwQuotaUsed: NativePtr): Int

fun GetSystemTimes(lpIdleTime: LPFILETIME?, lpKernelTime: LPFILETIME?, lpUserTime: LPFILETIME?): WINBOOL {
    val _lpIdleTime = lpIdleTime.rawValue
    val _lpKernelTime = lpKernelTime.rawValue
    val _lpUserTime = lpUserTime.rawValue
    val res = kni_GetSystemTimes(_lpIdleTime, _lpKernelTime, _lpUserTime)
    return res
}

@SymbolName("win32_kni_GetSystemTimes")
private external fun kni_GetSystemTimes(lpIdleTime: NativePtr, lpKernelTime: NativePtr, lpUserTime: NativePtr): Int

fun FileTimeToDosDateTime(lpFileTime: CValuesRef<FILETIME>?, lpFatDate: LPWORD?, lpFatTime: LPWORD?): WINBOOL {
    return memScoped {
        val _lpFileTime = lpFileTime?.getPointer(memScope).rawValue
        val _lpFatDate = lpFatDate.rawValue
        val _lpFatTime = lpFatTime.rawValue
        val res = kni_FileTimeToDosDateTime(_lpFileTime, _lpFatDate, _lpFatTime)
        res
    }
}

@SymbolName("win32_kni_FileTimeToDosDateTime")
private external fun kni_FileTimeToDosDateTime(lpFileTime: NativePtr, lpFatDate: NativePtr, lpFatTime: NativePtr): Int

fun DosDateTimeToFileTime(wFatDate: WORD, wFatTime: WORD, lpFileTime: LPFILETIME?): WINBOOL {
    val _wFatDate = wFatDate
    val _wFatTime = wFatTime
    val _lpFileTime = lpFileTime.rawValue
    val res = kni_DosDateTimeToFileTime(_wFatDate, _wFatTime, _lpFileTime)
    return res
}

@SymbolName("win32_kni_DosDateTimeToFileTime")
private external fun kni_DosDateTimeToFileTime(wFatDate: Short, wFatTime: Short, lpFileTime: NativePtr): Int

fun SetSystemTimeAdjustment(dwTimeAdjustment: DWORD, bTimeAdjustmentDisabled: WINBOOL): WINBOOL {
    val _dwTimeAdjustment = dwTimeAdjustment
    val _bTimeAdjustmentDisabled = bTimeAdjustmentDisabled
    val res = kni_SetSystemTimeAdjustment(_dwTimeAdjustment, _bTimeAdjustmentDisabled)
    return res
}

@SymbolName("win32_kni_SetSystemTimeAdjustment")
private external fun kni_SetSystemTimeAdjustment(dwTimeAdjustment: Int, bTimeAdjustmentDisabled: Int): Int

fun MulDiv(nNumber: Int, nNumerator: Int, nDenominator: Int): Int {
    val _nNumber = nNumber
    val _nNumerator = nNumerator
    val _nDenominator = nDenominator
    val res = kni_MulDiv(_nNumber, _nNumerator, _nDenominator)
    return res
}

@SymbolName("win32_kni_MulDiv")
private external fun kni_MulDiv(nNumber: Int, nNumerator: Int, nDenominator: Int): Int

fun GetNamedPipeInfo(hNamedPipe: HANDLE?, lpFlags: LPDWORD?, lpOutBufferSize: LPDWORD?, lpInBufferSize: LPDWORD?, lpMaxInstances: LPDWORD?): WINBOOL {
    val _hNamedPipe = hNamedPipe.rawValue
    val _lpFlags = lpFlags.rawValue
    val _lpOutBufferSize = lpOutBufferSize.rawValue
    val _lpInBufferSize = lpInBufferSize.rawValue
    val _lpMaxInstances = lpMaxInstances.rawValue
    val res = kni_GetNamedPipeInfo(_hNamedPipe, _lpFlags, _lpOutBufferSize, _lpInBufferSize, _lpMaxInstances)
    return res
}

@SymbolName("win32_kni_GetNamedPipeInfo")
private external fun kni_GetNamedPipeInfo(hNamedPipe: NativePtr, lpFlags: NativePtr, lpOutBufferSize: NativePtr, lpInBufferSize: NativePtr, lpMaxInstances: NativePtr): Int

fun CreateMailslotA(lpName: String?, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?): HANDLE? {
    return memScoped {
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _nMaxMessageSize = nMaxMessageSize
        val _lReadTimeout = lReadTimeout
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val res = kni_CreateMailslotA(_lpName, _nMaxMessageSize, _lReadTimeout, _lpSecurityAttributes)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateMailslotA")
private external fun kni_CreateMailslotA(lpName: NativePtr, nMaxMessageSize: Int, lReadTimeout: Int, lpSecurityAttributes: NativePtr): NativePtr

fun CreateMailslotW(lpName: String?, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?): HANDLE? {
    return memScoped {
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _nMaxMessageSize = nMaxMessageSize
        val _lReadTimeout = lReadTimeout
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val res = kni_CreateMailslotW(_lpName, _nMaxMessageSize, _lReadTimeout, _lpSecurityAttributes)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateMailslotW")
private external fun kni_CreateMailslotW(lpName: NativePtr, nMaxMessageSize: Int, lReadTimeout: Int, lpSecurityAttributes: NativePtr): NativePtr

fun GetMailslotInfo(hMailslot: HANDLE?, lpMaxMessageSize: LPDWORD?, lpNextSize: LPDWORD?, lpMessageCount: LPDWORD?, lpReadTimeout: LPDWORD?): WINBOOL {
    val _hMailslot = hMailslot.rawValue
    val _lpMaxMessageSize = lpMaxMessageSize.rawValue
    val _lpNextSize = lpNextSize.rawValue
    val _lpMessageCount = lpMessageCount.rawValue
    val _lpReadTimeout = lpReadTimeout.rawValue
    val res = kni_GetMailslotInfo(_hMailslot, _lpMaxMessageSize, _lpNextSize, _lpMessageCount, _lpReadTimeout)
    return res
}

@SymbolName("win32_kni_GetMailslotInfo")
private external fun kni_GetMailslotInfo(hMailslot: NativePtr, lpMaxMessageSize: NativePtr, lpNextSize: NativePtr, lpMessageCount: NativePtr, lpReadTimeout: NativePtr): Int

fun SetMailslotInfo(hMailslot: HANDLE?, lReadTimeout: DWORD): WINBOOL {
    val _hMailslot = hMailslot.rawValue
    val _lReadTimeout = lReadTimeout
    val res = kni_SetMailslotInfo(_hMailslot, _lReadTimeout)
    return res
}

@SymbolName("win32_kni_SetMailslotInfo")
private external fun kni_SetMailslotInfo(hMailslot: NativePtr, lReadTimeout: Int): Int

fun EncryptFileA(lpFileName: String?): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_EncryptFileA(_lpFileName)
        res
    }
}

@SymbolName("win32_kni_EncryptFileA")
private external fun kni_EncryptFileA(lpFileName: NativePtr): Int

fun EncryptFileW(lpFileName: String?): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_EncryptFileW(_lpFileName)
        res
    }
}

@SymbolName("win32_kni_EncryptFileW")
private external fun kni_EncryptFileW(lpFileName: NativePtr): Int

fun DecryptFileA(lpFileName: String?, dwReserved: DWORD): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val _dwReserved = dwReserved
        val res = kni_DecryptFileA(_lpFileName, _dwReserved)
        res
    }
}

@SymbolName("win32_kni_DecryptFileA")
private external fun kni_DecryptFileA(lpFileName: NativePtr, dwReserved: Int): Int

fun DecryptFileW(lpFileName: String?, dwReserved: DWORD): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val _dwReserved = dwReserved
        val res = kni_DecryptFileW(_lpFileName, _dwReserved)
        res
    }
}

@SymbolName("win32_kni_DecryptFileW")
private external fun kni_DecryptFileW(lpFileName: NativePtr, dwReserved: Int): Int

fun FileEncryptionStatusA(lpFileName: String?, lpStatus: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val _lpStatus = lpStatus.rawValue
        val res = kni_FileEncryptionStatusA(_lpFileName, _lpStatus)
        res
    }
}

@SymbolName("win32_kni_FileEncryptionStatusA")
private external fun kni_FileEncryptionStatusA(lpFileName: NativePtr, lpStatus: NativePtr): Int

fun FileEncryptionStatusW(lpFileName: String?, lpStatus: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpStatus = lpStatus.rawValue
        val res = kni_FileEncryptionStatusW(_lpFileName, _lpStatus)
        res
    }
}

@SymbolName("win32_kni_FileEncryptionStatusW")
private external fun kni_FileEncryptionStatusW(lpFileName: NativePtr, lpStatus: NativePtr): Int

fun OpenEncryptedFileRawA(lpFileName: String?, ulFlags: ULONG, pvContext: CValuesRef<PVOIDVar>?): DWORD {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val _ulFlags = ulFlags
        val _pvContext = pvContext?.getPointer(memScope).rawValue
        val res = kni_OpenEncryptedFileRawA(_lpFileName, _ulFlags, _pvContext)
        res
    }
}

@SymbolName("win32_kni_OpenEncryptedFileRawA")
private external fun kni_OpenEncryptedFileRawA(lpFileName: NativePtr, ulFlags: Int, pvContext: NativePtr): Int

fun OpenEncryptedFileRawW(lpFileName: String?, ulFlags: ULONG, pvContext: CValuesRef<PVOIDVar>?): DWORD {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val _ulFlags = ulFlags
        val _pvContext = pvContext?.getPointer(memScope).rawValue
        val res = kni_OpenEncryptedFileRawW(_lpFileName, _ulFlags, _pvContext)
        res
    }
}

@SymbolName("win32_kni_OpenEncryptedFileRawW")
private external fun kni_OpenEncryptedFileRawW(lpFileName: NativePtr, ulFlags: Int, pvContext: NativePtr): Int

fun ReadEncryptedFileRaw(pfExportCallback: PFE_EXPORT_FUNC?, pvCallbackContext: PVOID?, pvContext: PVOID?): DWORD {
    val _pfExportCallback = pfExportCallback.rawValue
    val _pvCallbackContext = pvCallbackContext.rawValue
    val _pvContext = pvContext.rawValue
    val res = kni_ReadEncryptedFileRaw(_pfExportCallback, _pvCallbackContext, _pvContext)
    return res
}

@SymbolName("win32_kni_ReadEncryptedFileRaw")
private external fun kni_ReadEncryptedFileRaw(pfExportCallback: NativePtr, pvCallbackContext: NativePtr, pvContext: NativePtr): Int

fun WriteEncryptedFileRaw(pfImportCallback: PFE_IMPORT_FUNC?, pvCallbackContext: PVOID?, pvContext: PVOID?): DWORD {
    val _pfImportCallback = pfImportCallback.rawValue
    val _pvCallbackContext = pvCallbackContext.rawValue
    val _pvContext = pvContext.rawValue
    val res = kni_WriteEncryptedFileRaw(_pfImportCallback, _pvCallbackContext, _pvContext)
    return res
}

@SymbolName("win32_kni_WriteEncryptedFileRaw")
private external fun kni_WriteEncryptedFileRaw(pfImportCallback: NativePtr, pvCallbackContext: NativePtr, pvContext: NativePtr): Int

fun CloseEncryptedFileRaw(pvContext: PVOID?): Unit {
    val _pvContext = pvContext.rawValue
    val res = kni_CloseEncryptedFileRaw(_pvContext)
    return res
}

@SymbolName("win32_kni_CloseEncryptedFileRaw")
private external fun kni_CloseEncryptedFileRaw(pvContext: NativePtr): Unit

fun lstrcmpA(lpString1: String?, lpString2: String?): Int {
    return memScoped {
        val _lpString1 = lpString1?.cstr?.getPointer(memScope).rawValue
        val _lpString2 = lpString2?.cstr?.getPointer(memScope).rawValue
        val res = kni_lstrcmpA(_lpString1, _lpString2)
        res
    }
}

@SymbolName("win32_kni_lstrcmpA")
private external fun kni_lstrcmpA(lpString1: NativePtr, lpString2: NativePtr): Int

fun lstrcmpW(lpString1: String?, lpString2: String?): Int {
    return memScoped {
        val _lpString1 = lpString1?.wcstr?.getPointer(memScope).rawValue
        val _lpString2 = lpString2?.wcstr?.getPointer(memScope).rawValue
        val res = kni_lstrcmpW(_lpString1, _lpString2)
        res
    }
}

@SymbolName("win32_kni_lstrcmpW")
private external fun kni_lstrcmpW(lpString1: NativePtr, lpString2: NativePtr): Int

fun lstrcmpiA(lpString1: String?, lpString2: String?): Int {
    return memScoped {
        val _lpString1 = lpString1?.cstr?.getPointer(memScope).rawValue
        val _lpString2 = lpString2?.cstr?.getPointer(memScope).rawValue
        val res = kni_lstrcmpiA(_lpString1, _lpString2)
        res
    }
}

@SymbolName("win32_kni_lstrcmpiA")
private external fun kni_lstrcmpiA(lpString1: NativePtr, lpString2: NativePtr): Int

fun lstrcmpiW(lpString1: String?, lpString2: String?): Int {
    return memScoped {
        val _lpString1 = lpString1?.wcstr?.getPointer(memScope).rawValue
        val _lpString2 = lpString2?.wcstr?.getPointer(memScope).rawValue
        val res = kni_lstrcmpiW(_lpString1, _lpString2)
        res
    }
}

@SymbolName("win32_kni_lstrcmpiW")
private external fun kni_lstrcmpiW(lpString1: NativePtr, lpString2: NativePtr): Int

fun lstrcpynA(lpString1: LPSTR?, lpString2: String?, iMaxLength: Int): LPSTR? {
    return memScoped {
        val _lpString1 = lpString1.rawValue
        val _lpString2 = lpString2?.cstr?.getPointer(memScope).rawValue
        val _iMaxLength = iMaxLength
        val res = kni_lstrcpynA(_lpString1, _lpString2, _iMaxLength)
        interpretCPointer<CHARVar>(res)
    }
}

@SymbolName("win32_kni_lstrcpynA")
private external fun kni_lstrcpynA(lpString1: NativePtr, lpString2: NativePtr, iMaxLength: Int): NativePtr

fun lstrcpynW(lpString1: LPWSTR?, lpString2: String?, iMaxLength: Int): LPWSTR? {
    return memScoped {
        val _lpString1 = lpString1.rawValue
        val _lpString2 = lpString2?.wcstr?.getPointer(memScope).rawValue
        val _iMaxLength = iMaxLength
        val res = kni_lstrcpynW(_lpString1, _lpString2, _iMaxLength)
        interpretCPointer<WCHARVar>(res)
    }
}

@SymbolName("win32_kni_lstrcpynW")
private external fun kni_lstrcpynW(lpString1: NativePtr, lpString2: NativePtr, iMaxLength: Int): NativePtr

fun lstrcpyA(lpString1: LPSTR?, lpString2: String?): LPSTR? {
    return memScoped {
        val _lpString1 = lpString1.rawValue
        val _lpString2 = lpString2?.cstr?.getPointer(memScope).rawValue
        val res = kni_lstrcpyA(_lpString1, _lpString2)
        interpretCPointer<CHARVar>(res)
    }
}

@SymbolName("win32_kni_lstrcpyA")
private external fun kni_lstrcpyA(lpString1: NativePtr, lpString2: NativePtr): NativePtr

fun lstrcpyW(lpString1: LPWSTR?, lpString2: String?): LPWSTR? {
    return memScoped {
        val _lpString1 = lpString1.rawValue
        val _lpString2 = lpString2?.wcstr?.getPointer(memScope).rawValue
        val res = kni_lstrcpyW(_lpString1, _lpString2)
        interpretCPointer<WCHARVar>(res)
    }
}

@SymbolName("win32_kni_lstrcpyW")
private external fun kni_lstrcpyW(lpString1: NativePtr, lpString2: NativePtr): NativePtr

fun lstrcatA(lpString1: LPSTR?, lpString2: String?): LPSTR? {
    return memScoped {
        val _lpString1 = lpString1.rawValue
        val _lpString2 = lpString2?.cstr?.getPointer(memScope).rawValue
        val res = kni_lstrcatA(_lpString1, _lpString2)
        interpretCPointer<CHARVar>(res)
    }
}

@SymbolName("win32_kni_lstrcatA")
private external fun kni_lstrcatA(lpString1: NativePtr, lpString2: NativePtr): NativePtr

fun lstrcatW(lpString1: LPWSTR?, lpString2: String?): LPWSTR? {
    return memScoped {
        val _lpString1 = lpString1.rawValue
        val _lpString2 = lpString2?.wcstr?.getPointer(memScope).rawValue
        val res = kni_lstrcatW(_lpString1, _lpString2)
        interpretCPointer<WCHARVar>(res)
    }
}

@SymbolName("win32_kni_lstrcatW")
private external fun kni_lstrcatW(lpString1: NativePtr, lpString2: NativePtr): NativePtr

fun lstrlenA(lpString: String?): Int {
    return memScoped {
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_lstrlenA(_lpString)
        res
    }
}

@SymbolName("win32_kni_lstrlenA")
private external fun kni_lstrlenA(lpString: NativePtr): Int

fun lstrlenW(lpString: String?): Int {
    return memScoped {
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_lstrlenW(_lpString)
        res
    }
}

@SymbolName("win32_kni_lstrlenW")
private external fun kni_lstrlenW(lpString: NativePtr): Int

fun OpenFile(lpFileName: String?, lpReOpenBuff: LPOFSTRUCT?, uStyle: UINT): HFILE {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val _lpReOpenBuff = lpReOpenBuff.rawValue
        val _uStyle = uStyle
        val res = kni_OpenFile(_lpFileName, _lpReOpenBuff, _uStyle)
        res
    }
}

@SymbolName("win32_kni_OpenFile")
private external fun kni_OpenFile(lpFileName: NativePtr, lpReOpenBuff: NativePtr, uStyle: Int): Int

fun _lopen(lpPathName: String?, iReadWrite: Int): HFILE {
    return memScoped {
        val _lpPathName = lpPathName?.cstr?.getPointer(memScope).rawValue
        val _iReadWrite = iReadWrite
        val res = kni__lopen(_lpPathName, _iReadWrite)
        res
    }
}

@SymbolName("win32_kni__lopen")
private external fun kni__lopen(lpPathName: NativePtr, iReadWrite: Int): Int

fun _lcreat(lpPathName: String?, iAttribute: Int): HFILE {
    return memScoped {
        val _lpPathName = lpPathName?.cstr?.getPointer(memScope).rawValue
        val _iAttribute = iAttribute
        val res = kni__lcreat(_lpPathName, _iAttribute)
        res
    }
}

@SymbolName("win32_kni__lcreat")
private external fun kni__lcreat(lpPathName: NativePtr, iAttribute: Int): Int

fun _lread(hFile: HFILE, lpBuffer: LPVOID?, uBytes: UINT): UINT {
    val _hFile = hFile
    val _lpBuffer = lpBuffer.rawValue
    val _uBytes = uBytes
    val res = kni__lread(_hFile, _lpBuffer, _uBytes)
    return res
}

@SymbolName("win32_kni__lread")
private external fun kni__lread(hFile: Int, lpBuffer: NativePtr, uBytes: Int): Int

fun _lwrite(hFile: HFILE, lpBuffer: String?, uBytes: UINT): UINT {
    return memScoped {
        val _hFile = hFile
        val _lpBuffer = lpBuffer?.cstr?.getPointer(memScope).rawValue
        val _uBytes = uBytes
        val res = kni__lwrite(_hFile, _lpBuffer, _uBytes)
        res
    }
}

@SymbolName("win32_kni__lwrite")
private external fun kni__lwrite(hFile: Int, lpBuffer: NativePtr, uBytes: Int): Int

fun _hread(hFile: HFILE, lpBuffer: LPVOID?, lBytes: Int): Int {
    val _hFile = hFile
    val _lpBuffer = lpBuffer.rawValue
    val _lBytes = lBytes
    val res = kni__hread(_hFile, _lpBuffer, _lBytes)
    return res
}

@SymbolName("win32_kni__hread")
private external fun kni__hread(hFile: Int, lpBuffer: NativePtr, lBytes: Int): Int

fun _hwrite(hFile: HFILE, lpBuffer: String?, lBytes: Int): Int {
    return memScoped {
        val _hFile = hFile
        val _lpBuffer = lpBuffer?.cstr?.getPointer(memScope).rawValue
        val _lBytes = lBytes
        val res = kni__hwrite(_hFile, _lpBuffer, _lBytes)
        res
    }
}

@SymbolName("win32_kni__hwrite")
private external fun kni__hwrite(hFile: Int, lpBuffer: NativePtr, lBytes: Int): Int

fun _lclose(hFile: HFILE): HFILE {
    val _hFile = hFile
    val res = kni__lclose(_hFile)
    return res
}

@SymbolName("win32_kni__lclose")
private external fun kni__lclose(hFile: Int): Int

fun _llseek(hFile: HFILE, lOffset: LONG, iOrigin: Int): LONG {
    val _hFile = hFile
    val _lOffset = lOffset
    val _iOrigin = iOrigin
    val res = kni__llseek(_hFile, _lOffset, _iOrigin)
    return res
}

@SymbolName("win32_kni__llseek")
private external fun kni__llseek(hFile: Int, lOffset: Int, iOrigin: Int): Int

fun IsTextUnicode(lpv: COpaquePointer?, iSize: Int, lpiResult: LPINT?): WINBOOL {
    val _lpv = lpv.rawValue
    val _iSize = iSize
    val _lpiResult = lpiResult.rawValue
    val res = kni_IsTextUnicode(_lpv, _iSize, _lpiResult)
    return res
}

@SymbolName("win32_kni_IsTextUnicode")
private external fun kni_IsTextUnicode(lpv: NativePtr, iSize: Int, lpiResult: NativePtr): Int

fun SignalObjectAndWait(hObjectToSignal: HANDLE?, hObjectToWaitOn: HANDLE?, dwMilliseconds: DWORD, bAlertable: WINBOOL): DWORD {
    val _hObjectToSignal = hObjectToSignal.rawValue
    val _hObjectToWaitOn = hObjectToWaitOn.rawValue
    val _dwMilliseconds = dwMilliseconds
    val _bAlertable = bAlertable
    val res = kni_SignalObjectAndWait(_hObjectToSignal, _hObjectToWaitOn, _dwMilliseconds, _bAlertable)
    return res
}

@SymbolName("win32_kni_SignalObjectAndWait")
private external fun kni_SignalObjectAndWait(hObjectToSignal: NativePtr, hObjectToWaitOn: NativePtr, dwMilliseconds: Int, bAlertable: Int): Int

fun BackupRead(hFile: HANDLE?, lpBuffer: LPBYTE?, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD?, bAbort: WINBOOL, bProcessSecurity: WINBOOL, lpContext: CValuesRef<LPVOIDVar>?): WINBOOL {
    return memScoped {
        val _hFile = hFile.rawValue
        val _lpBuffer = lpBuffer.rawValue
        val _nNumberOfBytesToRead = nNumberOfBytesToRead
        val _lpNumberOfBytesRead = lpNumberOfBytesRead.rawValue
        val _bAbort = bAbort
        val _bProcessSecurity = bProcessSecurity
        val _lpContext = lpContext?.getPointer(memScope).rawValue
        val res = kni_BackupRead(_hFile, _lpBuffer, _nNumberOfBytesToRead, _lpNumberOfBytesRead, _bAbort, _bProcessSecurity, _lpContext)
        res
    }
}

@SymbolName("win32_kni_BackupRead")
private external fun kni_BackupRead(hFile: NativePtr, lpBuffer: NativePtr, nNumberOfBytesToRead: Int, lpNumberOfBytesRead: NativePtr, bAbort: Int, bProcessSecurity: Int, lpContext: NativePtr): Int

fun BackupSeek(hFile: HANDLE?, dwLowBytesToSeek: DWORD, dwHighBytesToSeek: DWORD, lpdwLowByteSeeked: LPDWORD?, lpdwHighByteSeeked: LPDWORD?, lpContext: CValuesRef<LPVOIDVar>?): WINBOOL {
    return memScoped {
        val _hFile = hFile.rawValue
        val _dwLowBytesToSeek = dwLowBytesToSeek
        val _dwHighBytesToSeek = dwHighBytesToSeek
        val _lpdwLowByteSeeked = lpdwLowByteSeeked.rawValue
        val _lpdwHighByteSeeked = lpdwHighByteSeeked.rawValue
        val _lpContext = lpContext?.getPointer(memScope).rawValue
        val res = kni_BackupSeek(_hFile, _dwLowBytesToSeek, _dwHighBytesToSeek, _lpdwLowByteSeeked, _lpdwHighByteSeeked, _lpContext)
        res
    }
}

@SymbolName("win32_kni_BackupSeek")
private external fun kni_BackupSeek(hFile: NativePtr, dwLowBytesToSeek: Int, dwHighBytesToSeek: Int, lpdwLowByteSeeked: NativePtr, lpdwHighByteSeeked: NativePtr, lpContext: NativePtr): Int

fun BackupWrite(hFile: HANDLE?, lpBuffer: LPBYTE?, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD?, bAbort: WINBOOL, bProcessSecurity: WINBOOL, lpContext: CValuesRef<LPVOIDVar>?): WINBOOL {
    return memScoped {
        val _hFile = hFile.rawValue
        val _lpBuffer = lpBuffer.rawValue
        val _nNumberOfBytesToWrite = nNumberOfBytesToWrite
        val _lpNumberOfBytesWritten = lpNumberOfBytesWritten.rawValue
        val _bAbort = bAbort
        val _bProcessSecurity = bProcessSecurity
        val _lpContext = lpContext?.getPointer(memScope).rawValue
        val res = kni_BackupWrite(_hFile, _lpBuffer, _nNumberOfBytesToWrite, _lpNumberOfBytesWritten, _bAbort, _bProcessSecurity, _lpContext)
        res
    }
}

@SymbolName("win32_kni_BackupWrite")
private external fun kni_BackupWrite(hFile: NativePtr, lpBuffer: NativePtr, nNumberOfBytesToWrite: Int, lpNumberOfBytesWritten: NativePtr, bAbort: Int, bProcessSecurity: Int, lpContext: NativePtr): Int

fun CreateSemaphoreW(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES?, lInitialCount: LONG, lMaximumCount: LONG, lpName: String?): HANDLE? {
    return memScoped {
        val _lpSemaphoreAttributes = lpSemaphoreAttributes.rawValue
        val _lInitialCount = lInitialCount
        val _lMaximumCount = lMaximumCount
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CreateSemaphoreW(_lpSemaphoreAttributes, _lInitialCount, _lMaximumCount, _lpName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateSemaphoreW")
private external fun kni_CreateSemaphoreW(lpSemaphoreAttributes: NativePtr, lInitialCount: Int, lMaximumCount: Int, lpName: NativePtr): NativePtr

fun LoadLibraryW(lpLibFileName: String?): HMODULE? {
    return memScoped {
        val _lpLibFileName = lpLibFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_LoadLibraryW(_lpLibFileName)
        interpretCPointer<HINSTANCE__>(res)
    }
}

@SymbolName("win32_kni_LoadLibraryW")
private external fun kni_LoadLibraryW(lpLibFileName: NativePtr): NativePtr

fun OpenMutexA(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL, lpName: String?): HANDLE? {
    return memScoped {
        val _dwDesiredAccess = dwDesiredAccess
        val _bInheritHandle = bInheritHandle
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val res = kni_OpenMutexA(_dwDesiredAccess, _bInheritHandle, _lpName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenMutexA")
private external fun kni_OpenMutexA(dwDesiredAccess: Int, bInheritHandle: Int, lpName: NativePtr): NativePtr

fun CreateSemaphoreA(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES?, lInitialCount: LONG, lMaximumCount: LONG, lpName: String?): HANDLE? {
    return memScoped {
        val _lpSemaphoreAttributes = lpSemaphoreAttributes.rawValue
        val _lInitialCount = lInitialCount
        val _lMaximumCount = lMaximumCount
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val res = kni_CreateSemaphoreA(_lpSemaphoreAttributes, _lInitialCount, _lMaximumCount, _lpName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateSemaphoreA")
private external fun kni_CreateSemaphoreA(lpSemaphoreAttributes: NativePtr, lInitialCount: Int, lMaximumCount: Int, lpName: NativePtr): NativePtr

fun OpenSemaphoreA(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL, lpName: String?): HANDLE? {
    return memScoped {
        val _dwDesiredAccess = dwDesiredAccess
        val _bInheritHandle = bInheritHandle
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val res = kni_OpenSemaphoreA(_dwDesiredAccess, _bInheritHandle, _lpName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenSemaphoreA")
private external fun kni_OpenSemaphoreA(dwDesiredAccess: Int, bInheritHandle: Int, lpName: NativePtr): NativePtr

fun CreateWaitableTimerA(lpTimerAttributes: LPSECURITY_ATTRIBUTES?, bManualReset: WINBOOL, lpTimerName: String?): HANDLE? {
    return memScoped {
        val _lpTimerAttributes = lpTimerAttributes.rawValue
        val _bManualReset = bManualReset
        val _lpTimerName = lpTimerName?.cstr?.getPointer(memScope).rawValue
        val res = kni_CreateWaitableTimerA(_lpTimerAttributes, _bManualReset, _lpTimerName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateWaitableTimerA")
private external fun kni_CreateWaitableTimerA(lpTimerAttributes: NativePtr, bManualReset: Int, lpTimerName: NativePtr): NativePtr

fun CreateWaitableTimerW(lpTimerAttributes: LPSECURITY_ATTRIBUTES?, bManualReset: WINBOOL, lpTimerName: String?): HANDLE? {
    return memScoped {
        val _lpTimerAttributes = lpTimerAttributes.rawValue
        val _bManualReset = bManualReset
        val _lpTimerName = lpTimerName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CreateWaitableTimerW(_lpTimerAttributes, _bManualReset, _lpTimerName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateWaitableTimerW")
private external fun kni_CreateWaitableTimerW(lpTimerAttributes: NativePtr, bManualReset: Int, lpTimerName: NativePtr): NativePtr

fun OpenWaitableTimerA(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL, lpTimerName: String?): HANDLE? {
    return memScoped {
        val _dwDesiredAccess = dwDesiredAccess
        val _bInheritHandle = bInheritHandle
        val _lpTimerName = lpTimerName?.cstr?.getPointer(memScope).rawValue
        val res = kni_OpenWaitableTimerA(_dwDesiredAccess, _bInheritHandle, _lpTimerName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenWaitableTimerA")
private external fun kni_OpenWaitableTimerA(dwDesiredAccess: Int, bInheritHandle: Int, lpTimerName: NativePtr): NativePtr

fun CreateFileMappingA(hFile: HANDLE?, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES?, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: String?): HANDLE? {
    return memScoped {
        val _hFile = hFile.rawValue
        val _lpFileMappingAttributes = lpFileMappingAttributes.rawValue
        val _flProtect = flProtect
        val _dwMaximumSizeHigh = dwMaximumSizeHigh
        val _dwMaximumSizeLow = dwMaximumSizeLow
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val res = kni_CreateFileMappingA(_hFile, _lpFileMappingAttributes, _flProtect, _dwMaximumSizeHigh, _dwMaximumSizeLow, _lpName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateFileMappingA")
private external fun kni_CreateFileMappingA(hFile: NativePtr, lpFileMappingAttributes: NativePtr, flProtect: Int, dwMaximumSizeHigh: Int, dwMaximumSizeLow: Int, lpName: NativePtr): NativePtr

fun OpenFileMappingA(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL, lpName: String?): HANDLE? {
    return memScoped {
        val _dwDesiredAccess = dwDesiredAccess
        val _bInheritHandle = bInheritHandle
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val res = kni_OpenFileMappingA(_dwDesiredAccess, _bInheritHandle, _lpName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenFileMappingA")
private external fun kni_OpenFileMappingA(dwDesiredAccess: Int, bInheritHandle: Int, lpName: NativePtr): NativePtr

fun GetLogicalDriveStringsA(nBufferLength: DWORD, lpBuffer: LPSTR?): DWORD {
    val _nBufferLength = nBufferLength
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GetLogicalDriveStringsA(_nBufferLength, _lpBuffer)
    return res
}

@SymbolName("win32_kni_GetLogicalDriveStringsA")
private external fun kni_GetLogicalDriveStringsA(nBufferLength: Int, lpBuffer: NativePtr): Int

fun LoadLibraryA(lpLibFileName: String?): HMODULE? {
    return memScoped {
        val _lpLibFileName = lpLibFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_LoadLibraryA(_lpLibFileName)
        interpretCPointer<HINSTANCE__>(res)
    }
}

@SymbolName("win32_kni_LoadLibraryA")
private external fun kni_LoadLibraryA(lpLibFileName: NativePtr): NativePtr

fun GetProcessShutdownParameters(lpdwLevel: LPDWORD?, lpdwFlags: LPDWORD?): WINBOOL {
    val _lpdwLevel = lpdwLevel.rawValue
    val _lpdwFlags = lpdwFlags.rawValue
    val res = kni_GetProcessShutdownParameters(_lpdwLevel, _lpdwFlags)
    return res
}

@SymbolName("win32_kni_GetProcessShutdownParameters")
private external fun kni_GetProcessShutdownParameters(lpdwLevel: NativePtr, lpdwFlags: NativePtr): Int

fun FatalAppExitA(uAction: UINT, lpMessageText: String?): Unit {
    return memScoped {
        val _uAction = uAction
        val _lpMessageText = lpMessageText?.cstr?.getPointer(memScope).rawValue
        val res = kni_FatalAppExitA(_uAction, _lpMessageText)
        res
    }
}

@SymbolName("win32_kni_FatalAppExitA")
private external fun kni_FatalAppExitA(uAction: Int, lpMessageText: NativePtr): Unit

fun FatalAppExitW(uAction: UINT, lpMessageText: String?): Unit {
    return memScoped {
        val _uAction = uAction
        val _lpMessageText = lpMessageText?.wcstr?.getPointer(memScope).rawValue
        val res = kni_FatalAppExitW(_uAction, _lpMessageText)
        res
    }
}

@SymbolName("win32_kni_FatalAppExitW")
private external fun kni_FatalAppExitW(uAction: Int, lpMessageText: NativePtr): Unit

fun GetStartupInfoA(lpStartupInfo: LPSTARTUPINFOA?): Unit {
    val _lpStartupInfo = lpStartupInfo.rawValue
    val res = kni_GetStartupInfoA(_lpStartupInfo)
    return res
}

@SymbolName("win32_kni_GetStartupInfoA")
private external fun kni_GetStartupInfoA(lpStartupInfo: NativePtr): Unit

fun GetFirmwareEnvironmentVariableA(lpName: String?, lpGuid: String?, pBuffer: PVOID?, nSize: DWORD): DWORD {
    return memScoped {
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _lpGuid = lpGuid?.cstr?.getPointer(memScope).rawValue
        val _pBuffer = pBuffer.rawValue
        val _nSize = nSize
        val res = kni_GetFirmwareEnvironmentVariableA(_lpName, _lpGuid, _pBuffer, _nSize)
        res
    }
}

@SymbolName("win32_kni_GetFirmwareEnvironmentVariableA")
private external fun kni_GetFirmwareEnvironmentVariableA(lpName: NativePtr, lpGuid: NativePtr, pBuffer: NativePtr, nSize: Int): Int

fun GetFirmwareEnvironmentVariableW(lpName: String?, lpGuid: String?, pBuffer: PVOID?, nSize: DWORD): DWORD {
    return memScoped {
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _lpGuid = lpGuid?.wcstr?.getPointer(memScope).rawValue
        val _pBuffer = pBuffer.rawValue
        val _nSize = nSize
        val res = kni_GetFirmwareEnvironmentVariableW(_lpName, _lpGuid, _pBuffer, _nSize)
        res
    }
}

@SymbolName("win32_kni_GetFirmwareEnvironmentVariableW")
private external fun kni_GetFirmwareEnvironmentVariableW(lpName: NativePtr, lpGuid: NativePtr, pBuffer: NativePtr, nSize: Int): Int

fun SetFirmwareEnvironmentVariableA(lpName: String?, lpGuid: String?, pValue: PVOID?, nSize: DWORD): WINBOOL {
    return memScoped {
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _lpGuid = lpGuid?.cstr?.getPointer(memScope).rawValue
        val _pValue = pValue.rawValue
        val _nSize = nSize
        val res = kni_SetFirmwareEnvironmentVariableA(_lpName, _lpGuid, _pValue, _nSize)
        res
    }
}

@SymbolName("win32_kni_SetFirmwareEnvironmentVariableA")
private external fun kni_SetFirmwareEnvironmentVariableA(lpName: NativePtr, lpGuid: NativePtr, pValue: NativePtr, nSize: Int): Int

fun SetFirmwareEnvironmentVariableW(lpName: String?, lpGuid: String?, pValue: PVOID?, nSize: DWORD): WINBOOL {
    return memScoped {
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _lpGuid = lpGuid?.wcstr?.getPointer(memScope).rawValue
        val _pValue = pValue.rawValue
        val _nSize = nSize
        val res = kni_SetFirmwareEnvironmentVariableW(_lpName, _lpGuid, _pValue, _nSize)
        res
    }
}

@SymbolName("win32_kni_SetFirmwareEnvironmentVariableW")
private external fun kni_SetFirmwareEnvironmentVariableW(lpName: NativePtr, lpGuid: NativePtr, pValue: NativePtr, nSize: Int): Int

fun FindResourceA(hModule: HMODULE?, lpName: String?, lpType: String?): HRSRC? {
    return memScoped {
        val _hModule = hModule.rawValue
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _lpType = lpType?.cstr?.getPointer(memScope).rawValue
        val res = kni_FindResourceA(_hModule, _lpName, _lpType)
        interpretCPointer<HRSRC__>(res)
    }
}

@SymbolName("win32_kni_FindResourceA")
private external fun kni_FindResourceA(hModule: NativePtr, lpName: NativePtr, lpType: NativePtr): NativePtr

fun FindResourceW(hModule: HMODULE?, lpName: String?, lpType: String?): HRSRC? {
    return memScoped {
        val _hModule = hModule.rawValue
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _lpType = lpType?.wcstr?.getPointer(memScope).rawValue
        val res = kni_FindResourceW(_hModule, _lpName, _lpType)
        interpretCPointer<HRSRC__>(res)
    }
}

@SymbolName("win32_kni_FindResourceW")
private external fun kni_FindResourceW(hModule: NativePtr, lpName: NativePtr, lpType: NativePtr): NativePtr

fun FindResourceExA(hModule: HMODULE?, lpType: String?, lpName: String?, wLanguage: WORD): HRSRC? {
    return memScoped {
        val _hModule = hModule.rawValue
        val _lpType = lpType?.cstr?.getPointer(memScope).rawValue
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _wLanguage = wLanguage
        val res = kni_FindResourceExA(_hModule, _lpType, _lpName, _wLanguage)
        interpretCPointer<HRSRC__>(res)
    }
}

@SymbolName("win32_kni_FindResourceExA")
private external fun kni_FindResourceExA(hModule: NativePtr, lpType: NativePtr, lpName: NativePtr, wLanguage: Short): NativePtr

fun EnumResourceTypesA(hModule: HMODULE?, lpEnumFunc: ENUMRESTYPEPROCA?, lParam: LONG_PTR): WINBOOL {
    val _hModule = hModule.rawValue
    val _lpEnumFunc = lpEnumFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumResourceTypesA(_hModule, _lpEnumFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumResourceTypesA")
private external fun kni_EnumResourceTypesA(hModule: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumResourceTypesW(hModule: HMODULE?, lpEnumFunc: ENUMRESTYPEPROCW?, lParam: LONG_PTR): WINBOOL {
    val _hModule = hModule.rawValue
    val _lpEnumFunc = lpEnumFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumResourceTypesW(_hModule, _lpEnumFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumResourceTypesW")
private external fun kni_EnumResourceTypesW(hModule: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumResourceNamesA(hModule: HMODULE?, lpType: String?, lpEnumFunc: ENUMRESNAMEPROCA?, lParam: LONG_PTR): WINBOOL {
    return memScoped {
        val _hModule = hModule.rawValue
        val _lpType = lpType?.cstr?.getPointer(memScope).rawValue
        val _lpEnumFunc = lpEnumFunc.rawValue
        val _lParam = lParam
        val res = kni_EnumResourceNamesA(_hModule, _lpType, _lpEnumFunc, _lParam)
        res
    }
}

@SymbolName("win32_kni_EnumResourceNamesA")
private external fun kni_EnumResourceNamesA(hModule: NativePtr, lpType: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumResourceNamesW(hModule: HMODULE?, lpType: String?, lpEnumFunc: ENUMRESNAMEPROCW?, lParam: LONG_PTR): WINBOOL {
    return memScoped {
        val _hModule = hModule.rawValue
        val _lpType = lpType?.wcstr?.getPointer(memScope).rawValue
        val _lpEnumFunc = lpEnumFunc.rawValue
        val _lParam = lParam
        val res = kni_EnumResourceNamesW(_hModule, _lpType, _lpEnumFunc, _lParam)
        res
    }
}

@SymbolName("win32_kni_EnumResourceNamesW")
private external fun kni_EnumResourceNamesW(hModule: NativePtr, lpType: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumResourceLanguagesA(hModule: HMODULE?, lpType: String?, lpName: String?, lpEnumFunc: ENUMRESLANGPROCA?, lParam: LONG_PTR): WINBOOL {
    return memScoped {
        val _hModule = hModule.rawValue
        val _lpType = lpType?.cstr?.getPointer(memScope).rawValue
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _lpEnumFunc = lpEnumFunc.rawValue
        val _lParam = lParam
        val res = kni_EnumResourceLanguagesA(_hModule, _lpType, _lpName, _lpEnumFunc, _lParam)
        res
    }
}

@SymbolName("win32_kni_EnumResourceLanguagesA")
private external fun kni_EnumResourceLanguagesA(hModule: NativePtr, lpType: NativePtr, lpName: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumResourceLanguagesW(hModule: HMODULE?, lpType: String?, lpName: String?, lpEnumFunc: ENUMRESLANGPROCW?, lParam: LONG_PTR): WINBOOL {
    return memScoped {
        val _hModule = hModule.rawValue
        val _lpType = lpType?.wcstr?.getPointer(memScope).rawValue
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _lpEnumFunc = lpEnumFunc.rawValue
        val _lParam = lParam
        val res = kni_EnumResourceLanguagesW(_hModule, _lpType, _lpName, _lpEnumFunc, _lParam)
        res
    }
}

@SymbolName("win32_kni_EnumResourceLanguagesW")
private external fun kni_EnumResourceLanguagesW(hModule: NativePtr, lpType: NativePtr, lpName: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun BeginUpdateResourceA(pFileName: String?, bDeleteExistingResources: WINBOOL): HANDLE? {
    return memScoped {
        val _pFileName = pFileName?.cstr?.getPointer(memScope).rawValue
        val _bDeleteExistingResources = bDeleteExistingResources
        val res = kni_BeginUpdateResourceA(_pFileName, _bDeleteExistingResources)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_BeginUpdateResourceA")
private external fun kni_BeginUpdateResourceA(pFileName: NativePtr, bDeleteExistingResources: Int): NativePtr

fun BeginUpdateResourceW(pFileName: String?, bDeleteExistingResources: WINBOOL): HANDLE? {
    return memScoped {
        val _pFileName = pFileName?.wcstr?.getPointer(memScope).rawValue
        val _bDeleteExistingResources = bDeleteExistingResources
        val res = kni_BeginUpdateResourceW(_pFileName, _bDeleteExistingResources)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_BeginUpdateResourceW")
private external fun kni_BeginUpdateResourceW(pFileName: NativePtr, bDeleteExistingResources: Int): NativePtr

fun UpdateResourceA(hUpdate: HANDLE?, lpType: String?, lpName: String?, wLanguage: WORD, lpData: LPVOID?, cb: DWORD): WINBOOL {
    return memScoped {
        val _hUpdate = hUpdate.rawValue
        val _lpType = lpType?.cstr?.getPointer(memScope).rawValue
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _wLanguage = wLanguage
        val _lpData = lpData.rawValue
        val _cb = cb
        val res = kni_UpdateResourceA(_hUpdate, _lpType, _lpName, _wLanguage, _lpData, _cb)
        res
    }
}

@SymbolName("win32_kni_UpdateResourceA")
private external fun kni_UpdateResourceA(hUpdate: NativePtr, lpType: NativePtr, lpName: NativePtr, wLanguage: Short, lpData: NativePtr, cb: Int): Int

fun UpdateResourceW(hUpdate: HANDLE?, lpType: String?, lpName: String?, wLanguage: WORD, lpData: LPVOID?, cb: DWORD): WINBOOL {
    return memScoped {
        val _hUpdate = hUpdate.rawValue
        val _lpType = lpType?.wcstr?.getPointer(memScope).rawValue
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _wLanguage = wLanguage
        val _lpData = lpData.rawValue
        val _cb = cb
        val res = kni_UpdateResourceW(_hUpdate, _lpType, _lpName, _wLanguage, _lpData, _cb)
        res
    }
}

@SymbolName("win32_kni_UpdateResourceW")
private external fun kni_UpdateResourceW(hUpdate: NativePtr, lpType: NativePtr, lpName: NativePtr, wLanguage: Short, lpData: NativePtr, cb: Int): Int

fun EndUpdateResourceA(hUpdate: HANDLE?, fDiscard: WINBOOL): WINBOOL {
    val _hUpdate = hUpdate.rawValue
    val _fDiscard = fDiscard
    val res = kni_EndUpdateResourceA(_hUpdate, _fDiscard)
    return res
}

@SymbolName("win32_kni_EndUpdateResourceA")
private external fun kni_EndUpdateResourceA(hUpdate: NativePtr, fDiscard: Int): Int

fun EndUpdateResourceW(hUpdate: HANDLE?, fDiscard: WINBOOL): WINBOOL {
    val _hUpdate = hUpdate.rawValue
    val _fDiscard = fDiscard
    val res = kni_EndUpdateResourceW(_hUpdate, _fDiscard)
    return res
}

@SymbolName("win32_kni_EndUpdateResourceW")
private external fun kni_EndUpdateResourceW(hUpdate: NativePtr, fDiscard: Int): Int

fun GlobalAddAtomA(lpString: String?): ATOM {
    return memScoped {
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_GlobalAddAtomA(_lpString)
        res
    }
}

@SymbolName("win32_kni_GlobalAddAtomA")
private external fun kni_GlobalAddAtomA(lpString: NativePtr): Short

fun GlobalAddAtomW(lpString: String?): ATOM {
    return memScoped {
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_GlobalAddAtomW(_lpString)
        res
    }
}

@SymbolName("win32_kni_GlobalAddAtomW")
private external fun kni_GlobalAddAtomW(lpString: NativePtr): Short

fun GlobalAddAtomExA(lpString: String?, Flags: DWORD): ATOM {
    return memScoped {
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _Flags = Flags
        val res = kni_GlobalAddAtomExA(_lpString, _Flags)
        res
    }
}

@SymbolName("win32_kni_GlobalAddAtomExA")
private external fun kni_GlobalAddAtomExA(lpString: NativePtr, Flags: Int): Short

fun GlobalAddAtomExW(lpString: String?, Flags: DWORD): ATOM {
    return memScoped {
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _Flags = Flags
        val res = kni_GlobalAddAtomExW(_lpString, _Flags)
        res
    }
}

@SymbolName("win32_kni_GlobalAddAtomExW")
private external fun kni_GlobalAddAtomExW(lpString: NativePtr, Flags: Int): Short

fun GlobalFindAtomA(lpString: String?): ATOM {
    return memScoped {
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_GlobalFindAtomA(_lpString)
        res
    }
}

@SymbolName("win32_kni_GlobalFindAtomA")
private external fun kni_GlobalFindAtomA(lpString: NativePtr): Short

fun GlobalFindAtomW(lpString: String?): ATOM {
    return memScoped {
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_GlobalFindAtomW(_lpString)
        res
    }
}

@SymbolName("win32_kni_GlobalFindAtomW")
private external fun kni_GlobalFindAtomW(lpString: NativePtr): Short

fun GlobalGetAtomNameA(nAtom: ATOM, lpBuffer: LPSTR?, nSize: Int): UINT {
    val _nAtom = nAtom
    val _lpBuffer = lpBuffer.rawValue
    val _nSize = nSize
    val res = kni_GlobalGetAtomNameA(_nAtom, _lpBuffer, _nSize)
    return res
}

@SymbolName("win32_kni_GlobalGetAtomNameA")
private external fun kni_GlobalGetAtomNameA(nAtom: Short, lpBuffer: NativePtr, nSize: Int): Int

fun GlobalGetAtomNameW(nAtom: ATOM, lpBuffer: LPWSTR?, nSize: Int): UINT {
    val _nAtom = nAtom
    val _lpBuffer = lpBuffer.rawValue
    val _nSize = nSize
    val res = kni_GlobalGetAtomNameW(_nAtom, _lpBuffer, _nSize)
    return res
}

@SymbolName("win32_kni_GlobalGetAtomNameW")
private external fun kni_GlobalGetAtomNameW(nAtom: Short, lpBuffer: NativePtr, nSize: Int): Int

fun AddAtomA(lpString: String?): ATOM {
    return memScoped {
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_AddAtomA(_lpString)
        res
    }
}

@SymbolName("win32_kni_AddAtomA")
private external fun kni_AddAtomA(lpString: NativePtr): Short

fun AddAtomW(lpString: String?): ATOM {
    return memScoped {
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_AddAtomW(_lpString)
        res
    }
}

@SymbolName("win32_kni_AddAtomW")
private external fun kni_AddAtomW(lpString: NativePtr): Short

fun FindAtomA(lpString: String?): ATOM {
    return memScoped {
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_FindAtomA(_lpString)
        res
    }
}

@SymbolName("win32_kni_FindAtomA")
private external fun kni_FindAtomA(lpString: NativePtr): Short

fun FindAtomW(lpString: String?): ATOM {
    return memScoped {
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_FindAtomW(_lpString)
        res
    }
}

@SymbolName("win32_kni_FindAtomW")
private external fun kni_FindAtomW(lpString: NativePtr): Short

fun GetAtomNameA(nAtom: ATOM, lpBuffer: LPSTR?, nSize: Int): UINT {
    val _nAtom = nAtom
    val _lpBuffer = lpBuffer.rawValue
    val _nSize = nSize
    val res = kni_GetAtomNameA(_nAtom, _lpBuffer, _nSize)
    return res
}

@SymbolName("win32_kni_GetAtomNameA")
private external fun kni_GetAtomNameA(nAtom: Short, lpBuffer: NativePtr, nSize: Int): Int

fun GetAtomNameW(nAtom: ATOM, lpBuffer: LPWSTR?, nSize: Int): UINT {
    val _nAtom = nAtom
    val _lpBuffer = lpBuffer.rawValue
    val _nSize = nSize
    val res = kni_GetAtomNameW(_nAtom, _lpBuffer, _nSize)
    return res
}

@SymbolName("win32_kni_GetAtomNameW")
private external fun kni_GetAtomNameW(nAtom: Short, lpBuffer: NativePtr, nSize: Int): Int

fun GetProfileIntA(lpAppName: String?, lpKeyName: String?, nDefault: INT): UINT {
    return memScoped {
        val _lpAppName = lpAppName?.cstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.cstr?.getPointer(memScope).rawValue
        val _nDefault = nDefault
        val res = kni_GetProfileIntA(_lpAppName, _lpKeyName, _nDefault)
        res
    }
}

@SymbolName("win32_kni_GetProfileIntA")
private external fun kni_GetProfileIntA(lpAppName: NativePtr, lpKeyName: NativePtr, nDefault: Int): Int

fun GetProfileIntW(lpAppName: String?, lpKeyName: String?, nDefault: INT): UINT {
    return memScoped {
        val _lpAppName = lpAppName?.wcstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.wcstr?.getPointer(memScope).rawValue
        val _nDefault = nDefault
        val res = kni_GetProfileIntW(_lpAppName, _lpKeyName, _nDefault)
        res
    }
}

@SymbolName("win32_kni_GetProfileIntW")
private external fun kni_GetProfileIntW(lpAppName: NativePtr, lpKeyName: NativePtr, nDefault: Int): Int

fun GetProfileStringA(lpAppName: String?, lpKeyName: String?, lpDefault: String?, lpReturnedString: LPSTR?, nSize: DWORD): DWORD {
    return memScoped {
        val _lpAppName = lpAppName?.cstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.cstr?.getPointer(memScope).rawValue
        val _lpDefault = lpDefault?.cstr?.getPointer(memScope).rawValue
        val _lpReturnedString = lpReturnedString.rawValue
        val _nSize = nSize
        val res = kni_GetProfileStringA(_lpAppName, _lpKeyName, _lpDefault, _lpReturnedString, _nSize)
        res
    }
}

@SymbolName("win32_kni_GetProfileStringA")
private external fun kni_GetProfileStringA(lpAppName: NativePtr, lpKeyName: NativePtr, lpDefault: NativePtr, lpReturnedString: NativePtr, nSize: Int): Int

fun GetProfileStringW(lpAppName: String?, lpKeyName: String?, lpDefault: String?, lpReturnedString: LPWSTR?, nSize: DWORD): DWORD {
    return memScoped {
        val _lpAppName = lpAppName?.wcstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.wcstr?.getPointer(memScope).rawValue
        val _lpDefault = lpDefault?.wcstr?.getPointer(memScope).rawValue
        val _lpReturnedString = lpReturnedString.rawValue
        val _nSize = nSize
        val res = kni_GetProfileStringW(_lpAppName, _lpKeyName, _lpDefault, _lpReturnedString, _nSize)
        res
    }
}

@SymbolName("win32_kni_GetProfileStringW")
private external fun kni_GetProfileStringW(lpAppName: NativePtr, lpKeyName: NativePtr, lpDefault: NativePtr, lpReturnedString: NativePtr, nSize: Int): Int

fun WriteProfileStringA(lpAppName: String?, lpKeyName: String?, lpString: String?): WINBOOL {
    return memScoped {
        val _lpAppName = lpAppName?.cstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.cstr?.getPointer(memScope).rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_WriteProfileStringA(_lpAppName, _lpKeyName, _lpString)
        res
    }
}

@SymbolName("win32_kni_WriteProfileStringA")
private external fun kni_WriteProfileStringA(lpAppName: NativePtr, lpKeyName: NativePtr, lpString: NativePtr): Int

fun WriteProfileStringW(lpAppName: String?, lpKeyName: String?, lpString: String?): WINBOOL {
    return memScoped {
        val _lpAppName = lpAppName?.wcstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.wcstr?.getPointer(memScope).rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_WriteProfileStringW(_lpAppName, _lpKeyName, _lpString)
        res
    }
}

@SymbolName("win32_kni_WriteProfileStringW")
private external fun kni_WriteProfileStringW(lpAppName: NativePtr, lpKeyName: NativePtr, lpString: NativePtr): Int

fun GetProfileSectionA(lpAppName: String?, lpReturnedString: LPSTR?, nSize: DWORD): DWORD {
    return memScoped {
        val _lpAppName = lpAppName?.cstr?.getPointer(memScope).rawValue
        val _lpReturnedString = lpReturnedString.rawValue
        val _nSize = nSize
        val res = kni_GetProfileSectionA(_lpAppName, _lpReturnedString, _nSize)
        res
    }
}

@SymbolName("win32_kni_GetProfileSectionA")
private external fun kni_GetProfileSectionA(lpAppName: NativePtr, lpReturnedString: NativePtr, nSize: Int): Int

fun GetProfileSectionW(lpAppName: String?, lpReturnedString: LPWSTR?, nSize: DWORD): DWORD {
    return memScoped {
        val _lpAppName = lpAppName?.wcstr?.getPointer(memScope).rawValue
        val _lpReturnedString = lpReturnedString.rawValue
        val _nSize = nSize
        val res = kni_GetProfileSectionW(_lpAppName, _lpReturnedString, _nSize)
        res
    }
}

@SymbolName("win32_kni_GetProfileSectionW")
private external fun kni_GetProfileSectionW(lpAppName: NativePtr, lpReturnedString: NativePtr, nSize: Int): Int

fun WriteProfileSectionA(lpAppName: String?, lpString: String?): WINBOOL {
    return memScoped {
        val _lpAppName = lpAppName?.cstr?.getPointer(memScope).rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_WriteProfileSectionA(_lpAppName, _lpString)
        res
    }
}

@SymbolName("win32_kni_WriteProfileSectionA")
private external fun kni_WriteProfileSectionA(lpAppName: NativePtr, lpString: NativePtr): Int

fun WriteProfileSectionW(lpAppName: String?, lpString: String?): WINBOOL {
    return memScoped {
        val _lpAppName = lpAppName?.wcstr?.getPointer(memScope).rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_WriteProfileSectionW(_lpAppName, _lpString)
        res
    }
}

@SymbolName("win32_kni_WriteProfileSectionW")
private external fun kni_WriteProfileSectionW(lpAppName: NativePtr, lpString: NativePtr): Int

fun GetPrivateProfileIntA(lpAppName: String?, lpKeyName: String?, nDefault: INT, lpFileName: String?): UINT {
    return memScoped {
        val _lpAppName = lpAppName?.cstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.cstr?.getPointer(memScope).rawValue
        val _nDefault = nDefault
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_GetPrivateProfileIntA(_lpAppName, _lpKeyName, _nDefault, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_GetPrivateProfileIntA")
private external fun kni_GetPrivateProfileIntA(lpAppName: NativePtr, lpKeyName: NativePtr, nDefault: Int, lpFileName: NativePtr): Int

fun GetPrivateProfileIntW(lpAppName: String?, lpKeyName: String?, nDefault: INT, lpFileName: String?): UINT {
    return memScoped {
        val _lpAppName = lpAppName?.wcstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.wcstr?.getPointer(memScope).rawValue
        val _nDefault = nDefault
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_GetPrivateProfileIntW(_lpAppName, _lpKeyName, _nDefault, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_GetPrivateProfileIntW")
private external fun kni_GetPrivateProfileIntW(lpAppName: NativePtr, lpKeyName: NativePtr, nDefault: Int, lpFileName: NativePtr): Int

fun GetPrivateProfileStringA(lpAppName: String?, lpKeyName: String?, lpDefault: String?, lpReturnedString: LPSTR?, nSize: DWORD, lpFileName: String?): DWORD {
    return memScoped {
        val _lpAppName = lpAppName?.cstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.cstr?.getPointer(memScope).rawValue
        val _lpDefault = lpDefault?.cstr?.getPointer(memScope).rawValue
        val _lpReturnedString = lpReturnedString.rawValue
        val _nSize = nSize
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_GetPrivateProfileStringA(_lpAppName, _lpKeyName, _lpDefault, _lpReturnedString, _nSize, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_GetPrivateProfileStringA")
private external fun kni_GetPrivateProfileStringA(lpAppName: NativePtr, lpKeyName: NativePtr, lpDefault: NativePtr, lpReturnedString: NativePtr, nSize: Int, lpFileName: NativePtr): Int

fun GetPrivateProfileStringW(lpAppName: String?, lpKeyName: String?, lpDefault: String?, lpReturnedString: LPWSTR?, nSize: DWORD, lpFileName: String?): DWORD {
    return memScoped {
        val _lpAppName = lpAppName?.wcstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.wcstr?.getPointer(memScope).rawValue
        val _lpDefault = lpDefault?.wcstr?.getPointer(memScope).rawValue
        val _lpReturnedString = lpReturnedString.rawValue
        val _nSize = nSize
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_GetPrivateProfileStringW(_lpAppName, _lpKeyName, _lpDefault, _lpReturnedString, _nSize, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_GetPrivateProfileStringW")
private external fun kni_GetPrivateProfileStringW(lpAppName: NativePtr, lpKeyName: NativePtr, lpDefault: NativePtr, lpReturnedString: NativePtr, nSize: Int, lpFileName: NativePtr): Int

fun WritePrivateProfileStringA(lpAppName: String?, lpKeyName: String?, lpString: String?, lpFileName: String?): WINBOOL {
    return memScoped {
        val _lpAppName = lpAppName?.cstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.cstr?.getPointer(memScope).rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_WritePrivateProfileStringA(_lpAppName, _lpKeyName, _lpString, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_WritePrivateProfileStringA")
private external fun kni_WritePrivateProfileStringA(lpAppName: NativePtr, lpKeyName: NativePtr, lpString: NativePtr, lpFileName: NativePtr): Int

fun WritePrivateProfileStringW(lpAppName: String?, lpKeyName: String?, lpString: String?, lpFileName: String?): WINBOOL {
    return memScoped {
        val _lpAppName = lpAppName?.wcstr?.getPointer(memScope).rawValue
        val _lpKeyName = lpKeyName?.wcstr?.getPointer(memScope).rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_WritePrivateProfileStringW(_lpAppName, _lpKeyName, _lpString, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_WritePrivateProfileStringW")
private external fun kni_WritePrivateProfileStringW(lpAppName: NativePtr, lpKeyName: NativePtr, lpString: NativePtr, lpFileName: NativePtr): Int

fun GetPrivateProfileSectionA(lpAppName: String?, lpReturnedString: LPSTR?, nSize: DWORD, lpFileName: String?): DWORD {
    return memScoped {
        val _lpAppName = lpAppName?.cstr?.getPointer(memScope).rawValue
        val _lpReturnedString = lpReturnedString.rawValue
        val _nSize = nSize
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_GetPrivateProfileSectionA(_lpAppName, _lpReturnedString, _nSize, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_GetPrivateProfileSectionA")
private external fun kni_GetPrivateProfileSectionA(lpAppName: NativePtr, lpReturnedString: NativePtr, nSize: Int, lpFileName: NativePtr): Int

fun GetPrivateProfileSectionW(lpAppName: String?, lpReturnedString: LPWSTR?, nSize: DWORD, lpFileName: String?): DWORD {
    return memScoped {
        val _lpAppName = lpAppName?.wcstr?.getPointer(memScope).rawValue
        val _lpReturnedString = lpReturnedString.rawValue
        val _nSize = nSize
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_GetPrivateProfileSectionW(_lpAppName, _lpReturnedString, _nSize, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_GetPrivateProfileSectionW")
private external fun kni_GetPrivateProfileSectionW(lpAppName: NativePtr, lpReturnedString: NativePtr, nSize: Int, lpFileName: NativePtr): Int

fun WritePrivateProfileSectionA(lpAppName: String?, lpString: String?, lpFileName: String?): WINBOOL {
    return memScoped {
        val _lpAppName = lpAppName?.cstr?.getPointer(memScope).rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_WritePrivateProfileSectionA(_lpAppName, _lpString, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_WritePrivateProfileSectionA")
private external fun kni_WritePrivateProfileSectionA(lpAppName: NativePtr, lpString: NativePtr, lpFileName: NativePtr): Int

fun WritePrivateProfileSectionW(lpAppName: String?, lpString: String?, lpFileName: String?): WINBOOL {
    return memScoped {
        val _lpAppName = lpAppName?.wcstr?.getPointer(memScope).rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_WritePrivateProfileSectionW(_lpAppName, _lpString, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_WritePrivateProfileSectionW")
private external fun kni_WritePrivateProfileSectionW(lpAppName: NativePtr, lpString: NativePtr, lpFileName: NativePtr): Int

fun GetPrivateProfileSectionNamesA(lpszReturnBuffer: LPSTR?, nSize: DWORD, lpFileName: String?): DWORD {
    return memScoped {
        val _lpszReturnBuffer = lpszReturnBuffer.rawValue
        val _nSize = nSize
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_GetPrivateProfileSectionNamesA(_lpszReturnBuffer, _nSize, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_GetPrivateProfileSectionNamesA")
private external fun kni_GetPrivateProfileSectionNamesA(lpszReturnBuffer: NativePtr, nSize: Int, lpFileName: NativePtr): Int

fun GetPrivateProfileSectionNamesW(lpszReturnBuffer: LPWSTR?, nSize: DWORD, lpFileName: String?): DWORD {
    return memScoped {
        val _lpszReturnBuffer = lpszReturnBuffer.rawValue
        val _nSize = nSize
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_GetPrivateProfileSectionNamesW(_lpszReturnBuffer, _nSize, _lpFileName)
        res
    }
}

@SymbolName("win32_kni_GetPrivateProfileSectionNamesW")
private external fun kni_GetPrivateProfileSectionNamesW(lpszReturnBuffer: NativePtr, nSize: Int, lpFileName: NativePtr): Int

fun GetPrivateProfileStructA(lpszSection: String?, lpszKey: String?, lpStruct: LPVOID?, uSizeStruct: UINT, szFile: String?): WINBOOL {
    return memScoped {
        val _lpszSection = lpszSection?.cstr?.getPointer(memScope).rawValue
        val _lpszKey = lpszKey?.cstr?.getPointer(memScope).rawValue
        val _lpStruct = lpStruct.rawValue
        val _uSizeStruct = uSizeStruct
        val _szFile = szFile?.cstr?.getPointer(memScope).rawValue
        val res = kni_GetPrivateProfileStructA(_lpszSection, _lpszKey, _lpStruct, _uSizeStruct, _szFile)
        res
    }
}

@SymbolName("win32_kni_GetPrivateProfileStructA")
private external fun kni_GetPrivateProfileStructA(lpszSection: NativePtr, lpszKey: NativePtr, lpStruct: NativePtr, uSizeStruct: Int, szFile: NativePtr): Int

fun GetPrivateProfileStructW(lpszSection: String?, lpszKey: String?, lpStruct: LPVOID?, uSizeStruct: UINT, szFile: String?): WINBOOL {
    return memScoped {
        val _lpszSection = lpszSection?.wcstr?.getPointer(memScope).rawValue
        val _lpszKey = lpszKey?.wcstr?.getPointer(memScope).rawValue
        val _lpStruct = lpStruct.rawValue
        val _uSizeStruct = uSizeStruct
        val _szFile = szFile?.wcstr?.getPointer(memScope).rawValue
        val res = kni_GetPrivateProfileStructW(_lpszSection, _lpszKey, _lpStruct, _uSizeStruct, _szFile)
        res
    }
}

@SymbolName("win32_kni_GetPrivateProfileStructW")
private external fun kni_GetPrivateProfileStructW(lpszSection: NativePtr, lpszKey: NativePtr, lpStruct: NativePtr, uSizeStruct: Int, szFile: NativePtr): Int

fun WritePrivateProfileStructA(lpszSection: String?, lpszKey: String?, lpStruct: LPVOID?, uSizeStruct: UINT, szFile: String?): WINBOOL {
    return memScoped {
        val _lpszSection = lpszSection?.cstr?.getPointer(memScope).rawValue
        val _lpszKey = lpszKey?.cstr?.getPointer(memScope).rawValue
        val _lpStruct = lpStruct.rawValue
        val _uSizeStruct = uSizeStruct
        val _szFile = szFile?.cstr?.getPointer(memScope).rawValue
        val res = kni_WritePrivateProfileStructA(_lpszSection, _lpszKey, _lpStruct, _uSizeStruct, _szFile)
        res
    }
}

@SymbolName("win32_kni_WritePrivateProfileStructA")
private external fun kni_WritePrivateProfileStructA(lpszSection: NativePtr, lpszKey: NativePtr, lpStruct: NativePtr, uSizeStruct: Int, szFile: NativePtr): Int

fun WritePrivateProfileStructW(lpszSection: String?, lpszKey: String?, lpStruct: LPVOID?, uSizeStruct: UINT, szFile: String?): WINBOOL {
    return memScoped {
        val _lpszSection = lpszSection?.wcstr?.getPointer(memScope).rawValue
        val _lpszKey = lpszKey?.wcstr?.getPointer(memScope).rawValue
        val _lpStruct = lpStruct.rawValue
        val _uSizeStruct = uSizeStruct
        val _szFile = szFile?.wcstr?.getPointer(memScope).rawValue
        val res = kni_WritePrivateProfileStructW(_lpszSection, _lpszKey, _lpStruct, _uSizeStruct, _szFile)
        res
    }
}

@SymbolName("win32_kni_WritePrivateProfileStructW")
private external fun kni_WritePrivateProfileStructW(lpszSection: NativePtr, lpszKey: NativePtr, lpStruct: NativePtr, uSizeStruct: Int, szFile: NativePtr): Int

fun GetTempPathA(nBufferLength: DWORD, lpBuffer: LPSTR?): DWORD {
    val _nBufferLength = nBufferLength
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GetTempPathA(_nBufferLength, _lpBuffer)
    return res
}

@SymbolName("win32_kni_GetTempPathA")
private external fun kni_GetTempPathA(nBufferLength: Int, lpBuffer: NativePtr): Int

fun GetTempFileNameA(lpPathName: String?, lpPrefixString: String?, uUnique: UINT, lpTempFileName: LPSTR?): UINT {
    return memScoped {
        val _lpPathName = lpPathName?.cstr?.getPointer(memScope).rawValue
        val _lpPrefixString = lpPrefixString?.cstr?.getPointer(memScope).rawValue
        val _uUnique = uUnique
        val _lpTempFileName = lpTempFileName.rawValue
        val res = kni_GetTempFileNameA(_lpPathName, _lpPrefixString, _uUnique, _lpTempFileName)
        res
    }
}

@SymbolName("win32_kni_GetTempFileNameA")
private external fun kni_GetTempFileNameA(lpPathName: NativePtr, lpPrefixString: NativePtr, uUnique: Int, lpTempFileName: NativePtr): Int

fun GetSystemWow64DirectoryA(lpBuffer: LPSTR?, uSize: UINT): UINT {
    val _lpBuffer = lpBuffer.rawValue
    val _uSize = uSize
    val res = kni_GetSystemWow64DirectoryA(_lpBuffer, _uSize)
    return res
}

@SymbolName("win32_kni_GetSystemWow64DirectoryA")
private external fun kni_GetSystemWow64DirectoryA(lpBuffer: NativePtr, uSize: Int): Int

fun GetSystemWow64DirectoryW(lpBuffer: LPWSTR?, uSize: UINT): UINT {
    val _lpBuffer = lpBuffer.rawValue
    val _uSize = uSize
    val res = kni_GetSystemWow64DirectoryW(_lpBuffer, _uSize)
    return res
}

@SymbolName("win32_kni_GetSystemWow64DirectoryW")
private external fun kni_GetSystemWow64DirectoryW(lpBuffer: NativePtr, uSize: Int): Int

fun Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection: BOOLEAN): BOOLEAN {
    val _Wow64FsEnableRedirection = Wow64FsEnableRedirection
    val res = kni_Wow64EnableWow64FsRedirection(_Wow64FsEnableRedirection)
    return res
}

@SymbolName("win32_kni_Wow64EnableWow64FsRedirection")
private external fun kni_Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection: Byte): Byte

fun SetDllDirectoryA(lpPathName: String?): WINBOOL {
    return memScoped {
        val _lpPathName = lpPathName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetDllDirectoryA(_lpPathName)
        res
    }
}

@SymbolName("win32_kni_SetDllDirectoryA")
private external fun kni_SetDllDirectoryA(lpPathName: NativePtr): Int

fun SetDllDirectoryW(lpPathName: String?): WINBOOL {
    return memScoped {
        val _lpPathName = lpPathName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetDllDirectoryW(_lpPathName)
        res
    }
}

@SymbolName("win32_kni_SetDllDirectoryW")
private external fun kni_SetDllDirectoryW(lpPathName: NativePtr): Int

fun GetDllDirectoryA(nBufferLength: DWORD, lpBuffer: LPSTR?): DWORD {
    val _nBufferLength = nBufferLength
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GetDllDirectoryA(_nBufferLength, _lpBuffer)
    return res
}

@SymbolName("win32_kni_GetDllDirectoryA")
private external fun kni_GetDllDirectoryA(nBufferLength: Int, lpBuffer: NativePtr): Int

fun GetDllDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR?): DWORD {
    val _nBufferLength = nBufferLength
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GetDllDirectoryW(_nBufferLength, _lpBuffer)
    return res
}

@SymbolName("win32_kni_GetDllDirectoryW")
private external fun kni_GetDllDirectoryW(nBufferLength: Int, lpBuffer: NativePtr): Int

fun SetSearchPathMode(Flags: DWORD): WINBOOL {
    val _Flags = Flags
    val res = kni_SetSearchPathMode(_Flags)
    return res
}

@SymbolName("win32_kni_SetSearchPathMode")
private external fun kni_SetSearchPathMode(Flags: Int): Int

fun CreateDirectoryExA(lpTemplateDirectory: String?, lpNewDirectory: String?, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?): WINBOOL {
    return memScoped {
        val _lpTemplateDirectory = lpTemplateDirectory?.cstr?.getPointer(memScope).rawValue
        val _lpNewDirectory = lpNewDirectory?.cstr?.getPointer(memScope).rawValue
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val res = kni_CreateDirectoryExA(_lpTemplateDirectory, _lpNewDirectory, _lpSecurityAttributes)
        res
    }
}

@SymbolName("win32_kni_CreateDirectoryExA")
private external fun kni_CreateDirectoryExA(lpTemplateDirectory: NativePtr, lpNewDirectory: NativePtr, lpSecurityAttributes: NativePtr): Int

fun CreateDirectoryExW(lpTemplateDirectory: String?, lpNewDirectory: String?, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?): WINBOOL {
    return memScoped {
        val _lpTemplateDirectory = lpTemplateDirectory?.wcstr?.getPointer(memScope).rawValue
        val _lpNewDirectory = lpNewDirectory?.wcstr?.getPointer(memScope).rawValue
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val res = kni_CreateDirectoryExW(_lpTemplateDirectory, _lpNewDirectory, _lpSecurityAttributes)
        res
    }
}

@SymbolName("win32_kni_CreateDirectoryExW")
private external fun kni_CreateDirectoryExW(lpTemplateDirectory: NativePtr, lpNewDirectory: NativePtr, lpSecurityAttributes: NativePtr): Int

fun DefineDosDeviceA(dwFlags: DWORD, lpDeviceName: String?, lpTargetPath: String?): WINBOOL {
    return memScoped {
        val _dwFlags = dwFlags
        val _lpDeviceName = lpDeviceName?.cstr?.getPointer(memScope).rawValue
        val _lpTargetPath = lpTargetPath?.cstr?.getPointer(memScope).rawValue
        val res = kni_DefineDosDeviceA(_dwFlags, _lpDeviceName, _lpTargetPath)
        res
    }
}

@SymbolName("win32_kni_DefineDosDeviceA")
private external fun kni_DefineDosDeviceA(dwFlags: Int, lpDeviceName: NativePtr, lpTargetPath: NativePtr): Int

fun QueryDosDeviceA(lpDeviceName: String?, lpTargetPath: LPSTR?, ucchMax: DWORD): DWORD {
    return memScoped {
        val _lpDeviceName = lpDeviceName?.cstr?.getPointer(memScope).rawValue
        val _lpTargetPath = lpTargetPath.rawValue
        val _ucchMax = ucchMax
        val res = kni_QueryDosDeviceA(_lpDeviceName, _lpTargetPath, _ucchMax)
        res
    }
}

@SymbolName("win32_kni_QueryDosDeviceA")
private external fun kni_QueryDosDeviceA(lpDeviceName: NativePtr, lpTargetPath: NativePtr, ucchMax: Int): Int

fun ReOpenFile(hOriginalFile: HANDLE?, dwDesiredAccess: DWORD, dwShareMode: DWORD, dwFlagsAndAttributes: DWORD): HANDLE? {
    val _hOriginalFile = hOriginalFile.rawValue
    val _dwDesiredAccess = dwDesiredAccess
    val _dwShareMode = dwShareMode
    val _dwFlagsAndAttributes = dwFlagsAndAttributes
    val res = kni_ReOpenFile(_hOriginalFile, _dwDesiredAccess, _dwShareMode, _dwFlagsAndAttributes)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_ReOpenFile")
private external fun kni_ReOpenFile(hOriginalFile: NativePtr, dwDesiredAccess: Int, dwShareMode: Int, dwFlagsAndAttributes: Int): NativePtr

fun GetCompressedFileSizeA(lpFileName: String?, lpFileSizeHigh: LPDWORD?): DWORD {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val _lpFileSizeHigh = lpFileSizeHigh.rawValue
        val res = kni_GetCompressedFileSizeA(_lpFileName, _lpFileSizeHigh)
        res
    }
}

@SymbolName("win32_kni_GetCompressedFileSizeA")
private external fun kni_GetCompressedFileSizeA(lpFileName: NativePtr, lpFileSizeHigh: NativePtr): Int

fun GetCompressedFileSizeW(lpFileName: String?, lpFileSizeHigh: LPDWORD?): DWORD {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpFileSizeHigh = lpFileSizeHigh.rawValue
        val res = kni_GetCompressedFileSizeW(_lpFileName, _lpFileSizeHigh)
        res
    }
}

@SymbolName("win32_kni_GetCompressedFileSizeW")
private external fun kni_GetCompressedFileSizeW(lpFileName: NativePtr, lpFileSizeHigh: NativePtr): Int

fun CheckNameLegalDOS8Dot3A(lpName: String?, lpOemName: LPSTR?, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL?, pbNameLegal: PBOOL?): WINBOOL {
    return memScoped {
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _lpOemName = lpOemName.rawValue
        val _OemNameSize = OemNameSize
        val _pbNameContainsSpaces = pbNameContainsSpaces.rawValue
        val _pbNameLegal = pbNameLegal.rawValue
        val res = kni_CheckNameLegalDOS8Dot3A(_lpName, _lpOemName, _OemNameSize, _pbNameContainsSpaces, _pbNameLegal)
        res
    }
}

@SymbolName("win32_kni_CheckNameLegalDOS8Dot3A")
private external fun kni_CheckNameLegalDOS8Dot3A(lpName: NativePtr, lpOemName: NativePtr, OemNameSize: Int, pbNameContainsSpaces: NativePtr, pbNameLegal: NativePtr): Int

fun CheckNameLegalDOS8Dot3W(lpName: String?, lpOemName: LPSTR?, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL?, pbNameLegal: PBOOL?): WINBOOL {
    return memScoped {
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _lpOemName = lpOemName.rawValue
        val _OemNameSize = OemNameSize
        val _pbNameContainsSpaces = pbNameContainsSpaces.rawValue
        val _pbNameLegal = pbNameLegal.rawValue
        val res = kni_CheckNameLegalDOS8Dot3W(_lpName, _lpOemName, _OemNameSize, _pbNameContainsSpaces, _pbNameLegal)
        res
    }
}

@SymbolName("win32_kni_CheckNameLegalDOS8Dot3W")
private external fun kni_CheckNameLegalDOS8Dot3W(lpName: NativePtr, lpOemName: NativePtr, OemNameSize: Int, pbNameContainsSpaces: NativePtr, pbNameLegal: NativePtr): Int

fun CopyFileA(lpExistingFileName: String?, lpNewFileName: String?, bFailIfExists: WINBOOL): WINBOOL {
    return memScoped {
        val _lpExistingFileName = lpExistingFileName?.cstr?.getPointer(memScope).rawValue
        val _lpNewFileName = lpNewFileName?.cstr?.getPointer(memScope).rawValue
        val _bFailIfExists = bFailIfExists
        val res = kni_CopyFileA(_lpExistingFileName, _lpNewFileName, _bFailIfExists)
        res
    }
}

@SymbolName("win32_kni_CopyFileA")
private external fun kni_CopyFileA(lpExistingFileName: NativePtr, lpNewFileName: NativePtr, bFailIfExists: Int): Int

fun CopyFileW(lpExistingFileName: String?, lpNewFileName: String?, bFailIfExists: WINBOOL): WINBOOL {
    return memScoped {
        val _lpExistingFileName = lpExistingFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpNewFileName = lpNewFileName?.wcstr?.getPointer(memScope).rawValue
        val _bFailIfExists = bFailIfExists
        val res = kni_CopyFileW(_lpExistingFileName, _lpNewFileName, _bFailIfExists)
        res
    }
}

@SymbolName("win32_kni_CopyFileW")
private external fun kni_CopyFileW(lpExistingFileName: NativePtr, lpNewFileName: NativePtr, bFailIfExists: Int): Int

fun CopyFileExA(lpExistingFileName: String?, lpNewFileName: String?, lpProgressRoutine: LPPROGRESS_ROUTINE?, lpData: LPVOID?, pbCancel: LPBOOL?, dwCopyFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpExistingFileName = lpExistingFileName?.cstr?.getPointer(memScope).rawValue
        val _lpNewFileName = lpNewFileName?.cstr?.getPointer(memScope).rawValue
        val _lpProgressRoutine = lpProgressRoutine.rawValue
        val _lpData = lpData.rawValue
        val _pbCancel = pbCancel.rawValue
        val _dwCopyFlags = dwCopyFlags
        val res = kni_CopyFileExA(_lpExistingFileName, _lpNewFileName, _lpProgressRoutine, _lpData, _pbCancel, _dwCopyFlags)
        res
    }
}

@SymbolName("win32_kni_CopyFileExA")
private external fun kni_CopyFileExA(lpExistingFileName: NativePtr, lpNewFileName: NativePtr, lpProgressRoutine: NativePtr, lpData: NativePtr, pbCancel: NativePtr, dwCopyFlags: Int): Int

fun CopyFileExW(lpExistingFileName: String?, lpNewFileName: String?, lpProgressRoutine: LPPROGRESS_ROUTINE?, lpData: LPVOID?, pbCancel: LPBOOL?, dwCopyFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpExistingFileName = lpExistingFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpNewFileName = lpNewFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpProgressRoutine = lpProgressRoutine.rawValue
        val _lpData = lpData.rawValue
        val _pbCancel = pbCancel.rawValue
        val _dwCopyFlags = dwCopyFlags
        val res = kni_CopyFileExW(_lpExistingFileName, _lpNewFileName, _lpProgressRoutine, _lpData, _pbCancel, _dwCopyFlags)
        res
    }
}

@SymbolName("win32_kni_CopyFileExW")
private external fun kni_CopyFileExW(lpExistingFileName: NativePtr, lpNewFileName: NativePtr, lpProgressRoutine: NativePtr, lpData: NativePtr, pbCancel: NativePtr, dwCopyFlags: Int): Int

fun MoveFileA(lpExistingFileName: String?, lpNewFileName: String?): WINBOOL {
    return memScoped {
        val _lpExistingFileName = lpExistingFileName?.cstr?.getPointer(memScope).rawValue
        val _lpNewFileName = lpNewFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_MoveFileA(_lpExistingFileName, _lpNewFileName)
        res
    }
}

@SymbolName("win32_kni_MoveFileA")
private external fun kni_MoveFileA(lpExistingFileName: NativePtr, lpNewFileName: NativePtr): Int

fun MoveFileW(lpExistingFileName: String?, lpNewFileName: String?): WINBOOL {
    return memScoped {
        val _lpExistingFileName = lpExistingFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpNewFileName = lpNewFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_MoveFileW(_lpExistingFileName, _lpNewFileName)
        res
    }
}

@SymbolName("win32_kni_MoveFileW")
private external fun kni_MoveFileW(lpExistingFileName: NativePtr, lpNewFileName: NativePtr): Int

fun MoveFileExA(lpExistingFileName: String?, lpNewFileName: String?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpExistingFileName = lpExistingFileName?.cstr?.getPointer(memScope).rawValue
        val _lpNewFileName = lpNewFileName?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_MoveFileExA(_lpExistingFileName, _lpNewFileName, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_MoveFileExA")
private external fun kni_MoveFileExA(lpExistingFileName: NativePtr, lpNewFileName: NativePtr, dwFlags: Int): Int

fun MoveFileExW(lpExistingFileName: String?, lpNewFileName: String?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpExistingFileName = lpExistingFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpNewFileName = lpNewFileName?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_MoveFileExW(_lpExistingFileName, _lpNewFileName, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_MoveFileExW")
private external fun kni_MoveFileExW(lpExistingFileName: NativePtr, lpNewFileName: NativePtr, dwFlags: Int): Int

fun MoveFileWithProgressA(lpExistingFileName: String?, lpNewFileName: String?, lpProgressRoutine: LPPROGRESS_ROUTINE?, lpData: LPVOID?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpExistingFileName = lpExistingFileName?.cstr?.getPointer(memScope).rawValue
        val _lpNewFileName = lpNewFileName?.cstr?.getPointer(memScope).rawValue
        val _lpProgressRoutine = lpProgressRoutine.rawValue
        val _lpData = lpData.rawValue
        val _dwFlags = dwFlags
        val res = kni_MoveFileWithProgressA(_lpExistingFileName, _lpNewFileName, _lpProgressRoutine, _lpData, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_MoveFileWithProgressA")
private external fun kni_MoveFileWithProgressA(lpExistingFileName: NativePtr, lpNewFileName: NativePtr, lpProgressRoutine: NativePtr, lpData: NativePtr, dwFlags: Int): Int

fun MoveFileWithProgressW(lpExistingFileName: String?, lpNewFileName: String?, lpProgressRoutine: LPPROGRESS_ROUTINE?, lpData: LPVOID?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpExistingFileName = lpExistingFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpNewFileName = lpNewFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpProgressRoutine = lpProgressRoutine.rawValue
        val _lpData = lpData.rawValue
        val _dwFlags = dwFlags
        val res = kni_MoveFileWithProgressW(_lpExistingFileName, _lpNewFileName, _lpProgressRoutine, _lpData, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_MoveFileWithProgressW")
private external fun kni_MoveFileWithProgressW(lpExistingFileName: NativePtr, lpNewFileName: NativePtr, lpProgressRoutine: NativePtr, lpData: NativePtr, dwFlags: Int): Int

fun ReplaceFileA(lpReplacedFileName: String?, lpReplacementFileName: String?, lpBackupFileName: String?, dwReplaceFlags: DWORD, lpExclude: LPVOID?, lpReserved: LPVOID?): WINBOOL {
    return memScoped {
        val _lpReplacedFileName = lpReplacedFileName?.cstr?.getPointer(memScope).rawValue
        val _lpReplacementFileName = lpReplacementFileName?.cstr?.getPointer(memScope).rawValue
        val _lpBackupFileName = lpBackupFileName?.cstr?.getPointer(memScope).rawValue
        val _dwReplaceFlags = dwReplaceFlags
        val _lpExclude = lpExclude.rawValue
        val _lpReserved = lpReserved.rawValue
        val res = kni_ReplaceFileA(_lpReplacedFileName, _lpReplacementFileName, _lpBackupFileName, _dwReplaceFlags, _lpExclude, _lpReserved)
        res
    }
}

@SymbolName("win32_kni_ReplaceFileA")
private external fun kni_ReplaceFileA(lpReplacedFileName: NativePtr, lpReplacementFileName: NativePtr, lpBackupFileName: NativePtr, dwReplaceFlags: Int, lpExclude: NativePtr, lpReserved: NativePtr): Int

fun ReplaceFileW(lpReplacedFileName: String?, lpReplacementFileName: String?, lpBackupFileName: String?, dwReplaceFlags: DWORD, lpExclude: LPVOID?, lpReserved: LPVOID?): WINBOOL {
    return memScoped {
        val _lpReplacedFileName = lpReplacedFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpReplacementFileName = lpReplacementFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpBackupFileName = lpBackupFileName?.wcstr?.getPointer(memScope).rawValue
        val _dwReplaceFlags = dwReplaceFlags
        val _lpExclude = lpExclude.rawValue
        val _lpReserved = lpReserved.rawValue
        val res = kni_ReplaceFileW(_lpReplacedFileName, _lpReplacementFileName, _lpBackupFileName, _dwReplaceFlags, _lpExclude, _lpReserved)
        res
    }
}

@SymbolName("win32_kni_ReplaceFileW")
private external fun kni_ReplaceFileW(lpReplacedFileName: NativePtr, lpReplacementFileName: NativePtr, lpBackupFileName: NativePtr, dwReplaceFlags: Int, lpExclude: NativePtr, lpReserved: NativePtr): Int

fun CreateHardLinkA(lpFileName: String?, lpExistingFileName: String?, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val _lpExistingFileName = lpExistingFileName?.cstr?.getPointer(memScope).rawValue
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val res = kni_CreateHardLinkA(_lpFileName, _lpExistingFileName, _lpSecurityAttributes)
        res
    }
}

@SymbolName("win32_kni_CreateHardLinkA")
private external fun kni_CreateHardLinkA(lpFileName: NativePtr, lpExistingFileName: NativePtr, lpSecurityAttributes: NativePtr): Int

fun CreateHardLinkW(lpFileName: String?, lpExistingFileName: String?, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpExistingFileName = lpExistingFileName?.wcstr?.getPointer(memScope).rawValue
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val res = kni_CreateHardLinkW(_lpFileName, _lpExistingFileName, _lpSecurityAttributes)
        res
    }
}

@SymbolName("win32_kni_CreateHardLinkW")
private external fun kni_CreateHardLinkW(lpFileName: NativePtr, lpExistingFileName: NativePtr, lpSecurityAttributes: NativePtr): Int

fun FindFirstStreamW(lpFileName: String?, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID?, dwFlags: DWORD): HANDLE? {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val _InfoLevel = InfoLevel.value
        val _lpFindStreamData = lpFindStreamData.rawValue
        val _dwFlags = dwFlags
        val res = kni_FindFirstStreamW(_lpFileName, _InfoLevel, _lpFindStreamData, _dwFlags)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_FindFirstStreamW")
private external fun kni_FindFirstStreamW(lpFileName: NativePtr, InfoLevel: Int, lpFindStreamData: NativePtr, dwFlags: Int): NativePtr

fun FindNextStreamW(hFindStream: HANDLE?, lpFindStreamData: LPVOID?): WINBOOL {
    val _hFindStream = hFindStream.rawValue
    val _lpFindStreamData = lpFindStreamData.rawValue
    val res = kni_FindNextStreamW(_hFindStream, _lpFindStreamData)
    return res
}

@SymbolName("win32_kni_FindNextStreamW")
private external fun kni_FindNextStreamW(hFindStream: NativePtr, lpFindStreamData: NativePtr): Int

fun CreateNamedPipeA(lpName: String?, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?): HANDLE? {
    return memScoped {
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _dwOpenMode = dwOpenMode
        val _dwPipeMode = dwPipeMode
        val _nMaxInstances = nMaxInstances
        val _nOutBufferSize = nOutBufferSize
        val _nInBufferSize = nInBufferSize
        val _nDefaultTimeOut = nDefaultTimeOut
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val res = kni_CreateNamedPipeA(_lpName, _dwOpenMode, _dwPipeMode, _nMaxInstances, _nOutBufferSize, _nInBufferSize, _nDefaultTimeOut, _lpSecurityAttributes)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateNamedPipeA")
private external fun kni_CreateNamedPipeA(lpName: NativePtr, dwOpenMode: Int, dwPipeMode: Int, nMaxInstances: Int, nOutBufferSize: Int, nInBufferSize: Int, nDefaultTimeOut: Int, lpSecurityAttributes: NativePtr): NativePtr

fun GetNamedPipeHandleStateA(hNamedPipe: HANDLE?, lpState: LPDWORD?, lpCurInstances: LPDWORD?, lpMaxCollectionCount: LPDWORD?, lpCollectDataTimeout: LPDWORD?, lpUserName: LPSTR?, nMaxUserNameSize: DWORD): WINBOOL {
    val _hNamedPipe = hNamedPipe.rawValue
    val _lpState = lpState.rawValue
    val _lpCurInstances = lpCurInstances.rawValue
    val _lpMaxCollectionCount = lpMaxCollectionCount.rawValue
    val _lpCollectDataTimeout = lpCollectDataTimeout.rawValue
    val _lpUserName = lpUserName.rawValue
    val _nMaxUserNameSize = nMaxUserNameSize
    val res = kni_GetNamedPipeHandleStateA(_hNamedPipe, _lpState, _lpCurInstances, _lpMaxCollectionCount, _lpCollectDataTimeout, _lpUserName, _nMaxUserNameSize)
    return res
}

@SymbolName("win32_kni_GetNamedPipeHandleStateA")
private external fun kni_GetNamedPipeHandleStateA(hNamedPipe: NativePtr, lpState: NativePtr, lpCurInstances: NativePtr, lpMaxCollectionCount: NativePtr, lpCollectDataTimeout: NativePtr, lpUserName: NativePtr, nMaxUserNameSize: Int): Int

fun GetNamedPipeHandleStateW(hNamedPipe: HANDLE?, lpState: LPDWORD?, lpCurInstances: LPDWORD?, lpMaxCollectionCount: LPDWORD?, lpCollectDataTimeout: LPDWORD?, lpUserName: LPWSTR?, nMaxUserNameSize: DWORD): WINBOOL {
    val _hNamedPipe = hNamedPipe.rawValue
    val _lpState = lpState.rawValue
    val _lpCurInstances = lpCurInstances.rawValue
    val _lpMaxCollectionCount = lpMaxCollectionCount.rawValue
    val _lpCollectDataTimeout = lpCollectDataTimeout.rawValue
    val _lpUserName = lpUserName.rawValue
    val _nMaxUserNameSize = nMaxUserNameSize
    val res = kni_GetNamedPipeHandleStateW(_hNamedPipe, _lpState, _lpCurInstances, _lpMaxCollectionCount, _lpCollectDataTimeout, _lpUserName, _nMaxUserNameSize)
    return res
}

@SymbolName("win32_kni_GetNamedPipeHandleStateW")
private external fun kni_GetNamedPipeHandleStateW(hNamedPipe: NativePtr, lpState: NativePtr, lpCurInstances: NativePtr, lpMaxCollectionCount: NativePtr, lpCollectDataTimeout: NativePtr, lpUserName: NativePtr, nMaxUserNameSize: Int): Int

fun CallNamedPipeA(lpNamedPipeName: String?, lpInBuffer: LPVOID?, nInBufferSize: DWORD, lpOutBuffer: LPVOID?, nOutBufferSize: DWORD, lpBytesRead: LPDWORD?, nTimeOut: DWORD): WINBOOL {
    return memScoped {
        val _lpNamedPipeName = lpNamedPipeName?.cstr?.getPointer(memScope).rawValue
        val _lpInBuffer = lpInBuffer.rawValue
        val _nInBufferSize = nInBufferSize
        val _lpOutBuffer = lpOutBuffer.rawValue
        val _nOutBufferSize = nOutBufferSize
        val _lpBytesRead = lpBytesRead.rawValue
        val _nTimeOut = nTimeOut
        val res = kni_CallNamedPipeA(_lpNamedPipeName, _lpInBuffer, _nInBufferSize, _lpOutBuffer, _nOutBufferSize, _lpBytesRead, _nTimeOut)
        res
    }
}

@SymbolName("win32_kni_CallNamedPipeA")
private external fun kni_CallNamedPipeA(lpNamedPipeName: NativePtr, lpInBuffer: NativePtr, nInBufferSize: Int, lpOutBuffer: NativePtr, nOutBufferSize: Int, lpBytesRead: NativePtr, nTimeOut: Int): Int

fun CallNamedPipeW(lpNamedPipeName: String?, lpInBuffer: LPVOID?, nInBufferSize: DWORD, lpOutBuffer: LPVOID?, nOutBufferSize: DWORD, lpBytesRead: LPDWORD?, nTimeOut: DWORD): WINBOOL {
    return memScoped {
        val _lpNamedPipeName = lpNamedPipeName?.wcstr?.getPointer(memScope).rawValue
        val _lpInBuffer = lpInBuffer.rawValue
        val _nInBufferSize = nInBufferSize
        val _lpOutBuffer = lpOutBuffer.rawValue
        val _nOutBufferSize = nOutBufferSize
        val _lpBytesRead = lpBytesRead.rawValue
        val _nTimeOut = nTimeOut
        val res = kni_CallNamedPipeW(_lpNamedPipeName, _lpInBuffer, _nInBufferSize, _lpOutBuffer, _nOutBufferSize, _lpBytesRead, _nTimeOut)
        res
    }
}

@SymbolName("win32_kni_CallNamedPipeW")
private external fun kni_CallNamedPipeW(lpNamedPipeName: NativePtr, lpInBuffer: NativePtr, nInBufferSize: Int, lpOutBuffer: NativePtr, nOutBufferSize: Int, lpBytesRead: NativePtr, nTimeOut: Int): Int

fun WaitNamedPipeA(lpNamedPipeName: String?, nTimeOut: DWORD): WINBOOL {
    return memScoped {
        val _lpNamedPipeName = lpNamedPipeName?.cstr?.getPointer(memScope).rawValue
        val _nTimeOut = nTimeOut
        val res = kni_WaitNamedPipeA(_lpNamedPipeName, _nTimeOut)
        res
    }
}

@SymbolName("win32_kni_WaitNamedPipeA")
private external fun kni_WaitNamedPipeA(lpNamedPipeName: NativePtr, nTimeOut: Int): Int

fun SetVolumeLabelA(lpRootPathName: String?, lpVolumeName: String?): WINBOOL {
    return memScoped {
        val _lpRootPathName = lpRootPathName?.cstr?.getPointer(memScope).rawValue
        val _lpVolumeName = lpVolumeName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetVolumeLabelA(_lpRootPathName, _lpVolumeName)
        res
    }
}

@SymbolName("win32_kni_SetVolumeLabelA")
private external fun kni_SetVolumeLabelA(lpRootPathName: NativePtr, lpVolumeName: NativePtr): Int

fun SetVolumeLabelW(lpRootPathName: String?, lpVolumeName: String?): WINBOOL {
    return memScoped {
        val _lpRootPathName = lpRootPathName?.wcstr?.getPointer(memScope).rawValue
        val _lpVolumeName = lpVolumeName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetVolumeLabelW(_lpRootPathName, _lpVolumeName)
        res
    }
}

@SymbolName("win32_kni_SetVolumeLabelW")
private external fun kni_SetVolumeLabelW(lpRootPathName: NativePtr, lpVolumeName: NativePtr): Int

fun SetFileApisToOEM(): Unit {
    val res = kni_SetFileApisToOEM()
    return res
}

@SymbolName("win32_kni_SetFileApisToOEM")
private external fun kni_SetFileApisToOEM(): Unit

fun SetFileApisToANSI(): Unit {
    val res = kni_SetFileApisToANSI()
    return res
}

@SymbolName("win32_kni_SetFileApisToANSI")
private external fun kni_SetFileApisToANSI(): Unit

fun AreFileApisANSI(): WINBOOL {
    val res = kni_AreFileApisANSI()
    return res
}

@SymbolName("win32_kni_AreFileApisANSI")
private external fun kni_AreFileApisANSI(): Int

fun GetVolumeInformationA(lpRootPathName: String?, lpVolumeNameBuffer: LPSTR?, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD?, lpMaximumComponentLength: LPDWORD?, lpFileSystemFlags: LPDWORD?, lpFileSystemNameBuffer: LPSTR?, nFileSystemNameSize: DWORD): WINBOOL {
    return memScoped {
        val _lpRootPathName = lpRootPathName?.cstr?.getPointer(memScope).rawValue
        val _lpVolumeNameBuffer = lpVolumeNameBuffer.rawValue
        val _nVolumeNameSize = nVolumeNameSize
        val _lpVolumeSerialNumber = lpVolumeSerialNumber.rawValue
        val _lpMaximumComponentLength = lpMaximumComponentLength.rawValue
        val _lpFileSystemFlags = lpFileSystemFlags.rawValue
        val _lpFileSystemNameBuffer = lpFileSystemNameBuffer.rawValue
        val _nFileSystemNameSize = nFileSystemNameSize
        val res = kni_GetVolumeInformationA(_lpRootPathName, _lpVolumeNameBuffer, _nVolumeNameSize, _lpVolumeSerialNumber, _lpMaximumComponentLength, _lpFileSystemFlags, _lpFileSystemNameBuffer, _nFileSystemNameSize)
        res
    }
}

@SymbolName("win32_kni_GetVolumeInformationA")
private external fun kni_GetVolumeInformationA(lpRootPathName: NativePtr, lpVolumeNameBuffer: NativePtr, nVolumeNameSize: Int, lpVolumeSerialNumber: NativePtr, lpMaximumComponentLength: NativePtr, lpFileSystemFlags: NativePtr, lpFileSystemNameBuffer: NativePtr, nFileSystemNameSize: Int): Int

fun ClearEventLogA(hEventLog: HANDLE?, lpBackupFileName: String?): WINBOOL {
    return memScoped {
        val _hEventLog = hEventLog.rawValue
        val _lpBackupFileName = lpBackupFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_ClearEventLogA(_hEventLog, _lpBackupFileName)
        res
    }
}

@SymbolName("win32_kni_ClearEventLogA")
private external fun kni_ClearEventLogA(hEventLog: NativePtr, lpBackupFileName: NativePtr): Int

fun ClearEventLogW(hEventLog: HANDLE?, lpBackupFileName: String?): WINBOOL {
    return memScoped {
        val _hEventLog = hEventLog.rawValue
        val _lpBackupFileName = lpBackupFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_ClearEventLogW(_hEventLog, _lpBackupFileName)
        res
    }
}

@SymbolName("win32_kni_ClearEventLogW")
private external fun kni_ClearEventLogW(hEventLog: NativePtr, lpBackupFileName: NativePtr): Int

fun BackupEventLogA(hEventLog: HANDLE?, lpBackupFileName: String?): WINBOOL {
    return memScoped {
        val _hEventLog = hEventLog.rawValue
        val _lpBackupFileName = lpBackupFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_BackupEventLogA(_hEventLog, _lpBackupFileName)
        res
    }
}

@SymbolName("win32_kni_BackupEventLogA")
private external fun kni_BackupEventLogA(hEventLog: NativePtr, lpBackupFileName: NativePtr): Int

fun BackupEventLogW(hEventLog: HANDLE?, lpBackupFileName: String?): WINBOOL {
    return memScoped {
        val _hEventLog = hEventLog.rawValue
        val _lpBackupFileName = lpBackupFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_BackupEventLogW(_hEventLog, _lpBackupFileName)
        res
    }
}

@SymbolName("win32_kni_BackupEventLogW")
private external fun kni_BackupEventLogW(hEventLog: NativePtr, lpBackupFileName: NativePtr): Int

fun CloseEventLog(hEventLog: HANDLE?): WINBOOL {
    val _hEventLog = hEventLog.rawValue
    val res = kni_CloseEventLog(_hEventLog)
    return res
}

@SymbolName("win32_kni_CloseEventLog")
private external fun kni_CloseEventLog(hEventLog: NativePtr): Int

fun DeregisterEventSource(hEventLog: HANDLE?): WINBOOL {
    val _hEventLog = hEventLog.rawValue
    val res = kni_DeregisterEventSource(_hEventLog)
    return res
}

@SymbolName("win32_kni_DeregisterEventSource")
private external fun kni_DeregisterEventSource(hEventLog: NativePtr): Int

fun NotifyChangeEventLog(hEventLog: HANDLE?, hEvent: HANDLE?): WINBOOL {
    val _hEventLog = hEventLog.rawValue
    val _hEvent = hEvent.rawValue
    val res = kni_NotifyChangeEventLog(_hEventLog, _hEvent)
    return res
}

@SymbolName("win32_kni_NotifyChangeEventLog")
private external fun kni_NotifyChangeEventLog(hEventLog: NativePtr, hEvent: NativePtr): Int

fun GetNumberOfEventLogRecords(hEventLog: HANDLE?, NumberOfRecords: PDWORD?): WINBOOL {
    val _hEventLog = hEventLog.rawValue
    val _NumberOfRecords = NumberOfRecords.rawValue
    val res = kni_GetNumberOfEventLogRecords(_hEventLog, _NumberOfRecords)
    return res
}

@SymbolName("win32_kni_GetNumberOfEventLogRecords")
private external fun kni_GetNumberOfEventLogRecords(hEventLog: NativePtr, NumberOfRecords: NativePtr): Int

fun GetOldestEventLogRecord(hEventLog: HANDLE?, OldestRecord: PDWORD?): WINBOOL {
    val _hEventLog = hEventLog.rawValue
    val _OldestRecord = OldestRecord.rawValue
    val res = kni_GetOldestEventLogRecord(_hEventLog, _OldestRecord)
    return res
}

@SymbolName("win32_kni_GetOldestEventLogRecord")
private external fun kni_GetOldestEventLogRecord(hEventLog: NativePtr, OldestRecord: NativePtr): Int

fun OpenEventLogA(lpUNCServerName: String?, lpSourceName: String?): HANDLE? {
    return memScoped {
        val _lpUNCServerName = lpUNCServerName?.cstr?.getPointer(memScope).rawValue
        val _lpSourceName = lpSourceName?.cstr?.getPointer(memScope).rawValue
        val res = kni_OpenEventLogA(_lpUNCServerName, _lpSourceName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenEventLogA")
private external fun kni_OpenEventLogA(lpUNCServerName: NativePtr, lpSourceName: NativePtr): NativePtr

fun OpenEventLogW(lpUNCServerName: String?, lpSourceName: String?): HANDLE? {
    return memScoped {
        val _lpUNCServerName = lpUNCServerName?.wcstr?.getPointer(memScope).rawValue
        val _lpSourceName = lpSourceName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_OpenEventLogW(_lpUNCServerName, _lpSourceName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenEventLogW")
private external fun kni_OpenEventLogW(lpUNCServerName: NativePtr, lpSourceName: NativePtr): NativePtr

fun RegisterEventSourceA(lpUNCServerName: String?, lpSourceName: String?): HANDLE? {
    return memScoped {
        val _lpUNCServerName = lpUNCServerName?.cstr?.getPointer(memScope).rawValue
        val _lpSourceName = lpSourceName?.cstr?.getPointer(memScope).rawValue
        val res = kni_RegisterEventSourceA(_lpUNCServerName, _lpSourceName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_RegisterEventSourceA")
private external fun kni_RegisterEventSourceA(lpUNCServerName: NativePtr, lpSourceName: NativePtr): NativePtr

fun RegisterEventSourceW(lpUNCServerName: String?, lpSourceName: String?): HANDLE? {
    return memScoped {
        val _lpUNCServerName = lpUNCServerName?.wcstr?.getPointer(memScope).rawValue
        val _lpSourceName = lpSourceName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_RegisterEventSourceW(_lpUNCServerName, _lpSourceName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_RegisterEventSourceW")
private external fun kni_RegisterEventSourceW(lpUNCServerName: NativePtr, lpSourceName: NativePtr): NativePtr

fun OpenBackupEventLogA(lpUNCServerName: String?, lpFileName: String?): HANDLE? {
    return memScoped {
        val _lpUNCServerName = lpUNCServerName?.cstr?.getPointer(memScope).rawValue
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_OpenBackupEventLogA(_lpUNCServerName, _lpFileName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenBackupEventLogA")
private external fun kni_OpenBackupEventLogA(lpUNCServerName: NativePtr, lpFileName: NativePtr): NativePtr

fun OpenBackupEventLogW(lpUNCServerName: String?, lpFileName: String?): HANDLE? {
    return memScoped {
        val _lpUNCServerName = lpUNCServerName?.wcstr?.getPointer(memScope).rawValue
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_OpenBackupEventLogW(_lpUNCServerName, _lpFileName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenBackupEventLogW")
private external fun kni_OpenBackupEventLogW(lpUNCServerName: NativePtr, lpFileName: NativePtr): NativePtr

fun ReadEventLogA(hEventLog: HANDLE?, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID?, nNumberOfBytesToRead: DWORD, pnBytesRead: CValuesRef<DWORDVar>?, pnMinNumberOfBytesNeeded: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hEventLog = hEventLog.rawValue
        val _dwReadFlags = dwReadFlags
        val _dwRecordOffset = dwRecordOffset
        val _lpBuffer = lpBuffer.rawValue
        val _nNumberOfBytesToRead = nNumberOfBytesToRead
        val _pnBytesRead = pnBytesRead?.getPointer(memScope).rawValue
        val _pnMinNumberOfBytesNeeded = pnMinNumberOfBytesNeeded?.getPointer(memScope).rawValue
        val res = kni_ReadEventLogA(_hEventLog, _dwReadFlags, _dwRecordOffset, _lpBuffer, _nNumberOfBytesToRead, _pnBytesRead, _pnMinNumberOfBytesNeeded)
        res
    }
}

@SymbolName("win32_kni_ReadEventLogA")
private external fun kni_ReadEventLogA(hEventLog: NativePtr, dwReadFlags: Int, dwRecordOffset: Int, lpBuffer: NativePtr, nNumberOfBytesToRead: Int, pnBytesRead: NativePtr, pnMinNumberOfBytesNeeded: NativePtr): Int

fun ReadEventLogW(hEventLog: HANDLE?, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID?, nNumberOfBytesToRead: DWORD, pnBytesRead: CValuesRef<DWORDVar>?, pnMinNumberOfBytesNeeded: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hEventLog = hEventLog.rawValue
        val _dwReadFlags = dwReadFlags
        val _dwRecordOffset = dwRecordOffset
        val _lpBuffer = lpBuffer.rawValue
        val _nNumberOfBytesToRead = nNumberOfBytesToRead
        val _pnBytesRead = pnBytesRead?.getPointer(memScope).rawValue
        val _pnMinNumberOfBytesNeeded = pnMinNumberOfBytesNeeded?.getPointer(memScope).rawValue
        val res = kni_ReadEventLogW(_hEventLog, _dwReadFlags, _dwRecordOffset, _lpBuffer, _nNumberOfBytesToRead, _pnBytesRead, _pnMinNumberOfBytesNeeded)
        res
    }
}

@SymbolName("win32_kni_ReadEventLogW")
private external fun kni_ReadEventLogW(hEventLog: NativePtr, dwReadFlags: Int, dwRecordOffset: Int, lpBuffer: NativePtr, nNumberOfBytesToRead: Int, pnBytesRead: NativePtr, pnMinNumberOfBytesNeeded: NativePtr): Int

fun ReportEventA(hEventLog: HANDLE?, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID?, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: CValuesRef<LPCSTRVar>?, lpRawData: LPVOID?): WINBOOL {
    return memScoped {
        val _hEventLog = hEventLog.rawValue
        val _wType = wType
        val _wCategory = wCategory
        val _dwEventID = dwEventID
        val _lpUserSid = lpUserSid.rawValue
        val _wNumStrings = wNumStrings
        val _dwDataSize = dwDataSize
        val _lpStrings = lpStrings?.getPointer(memScope).rawValue
        val _lpRawData = lpRawData.rawValue
        val res = kni_ReportEventA(_hEventLog, _wType, _wCategory, _dwEventID, _lpUserSid, _wNumStrings, _dwDataSize, _lpStrings, _lpRawData)
        res
    }
}

@SymbolName("win32_kni_ReportEventA")
private external fun kni_ReportEventA(hEventLog: NativePtr, wType: Short, wCategory: Short, dwEventID: Int, lpUserSid: NativePtr, wNumStrings: Short, dwDataSize: Int, lpStrings: NativePtr, lpRawData: NativePtr): Int

fun ReportEventW(hEventLog: HANDLE?, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID?, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: CValuesRef<LPCWSTRVar>?, lpRawData: LPVOID?): WINBOOL {
    return memScoped {
        val _hEventLog = hEventLog.rawValue
        val _wType = wType
        val _wCategory = wCategory
        val _dwEventID = dwEventID
        val _lpUserSid = lpUserSid.rawValue
        val _wNumStrings = wNumStrings
        val _dwDataSize = dwDataSize
        val _lpStrings = lpStrings?.getPointer(memScope).rawValue
        val _lpRawData = lpRawData.rawValue
        val res = kni_ReportEventW(_hEventLog, _wType, _wCategory, _dwEventID, _lpUserSid, _wNumStrings, _dwDataSize, _lpStrings, _lpRawData)
        res
    }
}

@SymbolName("win32_kni_ReportEventW")
private external fun kni_ReportEventW(hEventLog: NativePtr, wType: Short, wCategory: Short, dwEventID: Int, lpUserSid: NativePtr, wNumStrings: Short, dwDataSize: Int, lpStrings: NativePtr, lpRawData: NativePtr): Int

fun GetEventLogInformation(hEventLog: HANDLE?, dwInfoLevel: DWORD, lpBuffer: LPVOID?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?): WINBOOL {
    val _hEventLog = hEventLog.rawValue
    val _dwInfoLevel = dwInfoLevel
    val _lpBuffer = lpBuffer.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val res = kni_GetEventLogInformation(_hEventLog, _dwInfoLevel, _lpBuffer, _cbBufSize, _pcbBytesNeeded)
    return res
}

@SymbolName("win32_kni_GetEventLogInformation")
private external fun kni_GetEventLogInformation(hEventLog: NativePtr, dwInfoLevel: Int, lpBuffer: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr): Int

fun AccessCheckAndAuditAlarmA(SubsystemName: String?, HandleId: LPVOID?, ObjectTypeName: LPSTR?, ObjectName: LPSTR?, SecurityDescriptor: PSECURITY_DESCRIPTOR?, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING?, ObjectCreation: WINBOOL, GrantedAccess: LPDWORD?, AccessStatus: LPBOOL?, pfGenerateOnClose: LPBOOL?): WINBOOL {
    return memScoped {
        val _SubsystemName = SubsystemName?.cstr?.getPointer(memScope).rawValue
        val _HandleId = HandleId.rawValue
        val _ObjectTypeName = ObjectTypeName.rawValue
        val _ObjectName = ObjectName.rawValue
        val _SecurityDescriptor = SecurityDescriptor.rawValue
        val _DesiredAccess = DesiredAccess
        val _GenericMapping = GenericMapping.rawValue
        val _ObjectCreation = ObjectCreation
        val _GrantedAccess = GrantedAccess.rawValue
        val _AccessStatus = AccessStatus.rawValue
        val _pfGenerateOnClose = pfGenerateOnClose.rawValue
        val res = kni_AccessCheckAndAuditAlarmA(_SubsystemName, _HandleId, _ObjectTypeName, _ObjectName, _SecurityDescriptor, _DesiredAccess, _GenericMapping, _ObjectCreation, _GrantedAccess, _AccessStatus, _pfGenerateOnClose)
        res
    }
}

@SymbolName("win32_kni_AccessCheckAndAuditAlarmA")
private external fun kni_AccessCheckAndAuditAlarmA(SubsystemName: NativePtr, HandleId: NativePtr, ObjectTypeName: NativePtr, ObjectName: NativePtr, SecurityDescriptor: NativePtr, DesiredAccess: Int, GenericMapping: NativePtr, ObjectCreation: Int, GrantedAccess: NativePtr, AccessStatus: NativePtr, pfGenerateOnClose: NativePtr): Int

fun AccessCheckByTypeAndAuditAlarmA(SubsystemName: String?, HandleId: LPVOID?, ObjectTypeName: String?, ObjectName: String?, SecurityDescriptor: PSECURITY_DESCRIPTOR?, PrincipalSelfSid: PSID?, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST?, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING?, ObjectCreation: WINBOOL, GrantedAccess: LPDWORD?, AccessStatus: LPBOOL?, pfGenerateOnClose: LPBOOL?): WINBOOL {
    return memScoped {
        val _SubsystemName = SubsystemName?.cstr?.getPointer(memScope).rawValue
        val _HandleId = HandleId.rawValue
        val _ObjectTypeName = ObjectTypeName?.cstr?.getPointer(memScope).rawValue
        val _ObjectName = ObjectName?.cstr?.getPointer(memScope).rawValue
        val _SecurityDescriptor = SecurityDescriptor.rawValue
        val _PrincipalSelfSid = PrincipalSelfSid.rawValue
        val _DesiredAccess = DesiredAccess
        val _AuditType = AuditType.value
        val _Flags = Flags
        val _ObjectTypeList = ObjectTypeList.rawValue
        val _ObjectTypeListLength = ObjectTypeListLength
        val _GenericMapping = GenericMapping.rawValue
        val _ObjectCreation = ObjectCreation
        val _GrantedAccess = GrantedAccess.rawValue
        val _AccessStatus = AccessStatus.rawValue
        val _pfGenerateOnClose = pfGenerateOnClose.rawValue
        val res = kni_AccessCheckByTypeAndAuditAlarmA(_SubsystemName, _HandleId, _ObjectTypeName, _ObjectName, _SecurityDescriptor, _PrincipalSelfSid, _DesiredAccess, _AuditType, _Flags, _ObjectTypeList, _ObjectTypeListLength, _GenericMapping, _ObjectCreation, _GrantedAccess, _AccessStatus, _pfGenerateOnClose)
        res
    }
}

@SymbolName("win32_kni_AccessCheckByTypeAndAuditAlarmA")
private external fun kni_AccessCheckByTypeAndAuditAlarmA(SubsystemName: NativePtr, HandleId: NativePtr, ObjectTypeName: NativePtr, ObjectName: NativePtr, SecurityDescriptor: NativePtr, PrincipalSelfSid: NativePtr, DesiredAccess: Int, AuditType: Int, Flags: Int, ObjectTypeList: NativePtr, ObjectTypeListLength: Int, GenericMapping: NativePtr, ObjectCreation: Int, GrantedAccess: NativePtr, AccessStatus: NativePtr, pfGenerateOnClose: NativePtr): Int

fun AccessCheckByTypeResultListAndAuditAlarmA(SubsystemName: String?, HandleId: LPVOID?, ObjectTypeName: String?, ObjectName: String?, SecurityDescriptor: PSECURITY_DESCRIPTOR?, PrincipalSelfSid: PSID?, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST?, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING?, ObjectCreation: WINBOOL, GrantedAccess: LPDWORD?, AccessStatusList: LPDWORD?, pfGenerateOnClose: LPBOOL?): WINBOOL {
    return memScoped {
        val _SubsystemName = SubsystemName?.cstr?.getPointer(memScope).rawValue
        val _HandleId = HandleId.rawValue
        val _ObjectTypeName = ObjectTypeName?.cstr?.getPointer(memScope).rawValue
        val _ObjectName = ObjectName?.cstr?.getPointer(memScope).rawValue
        val _SecurityDescriptor = SecurityDescriptor.rawValue
        val _PrincipalSelfSid = PrincipalSelfSid.rawValue
        val _DesiredAccess = DesiredAccess
        val _AuditType = AuditType.value
        val _Flags = Flags
        val _ObjectTypeList = ObjectTypeList.rawValue
        val _ObjectTypeListLength = ObjectTypeListLength
        val _GenericMapping = GenericMapping.rawValue
        val _ObjectCreation = ObjectCreation
        val _GrantedAccess = GrantedAccess.rawValue
        val _AccessStatusList = AccessStatusList.rawValue
        val _pfGenerateOnClose = pfGenerateOnClose.rawValue
        val res = kni_AccessCheckByTypeResultListAndAuditAlarmA(_SubsystemName, _HandleId, _ObjectTypeName, _ObjectName, _SecurityDescriptor, _PrincipalSelfSid, _DesiredAccess, _AuditType, _Flags, _ObjectTypeList, _ObjectTypeListLength, _GenericMapping, _ObjectCreation, _GrantedAccess, _AccessStatusList, _pfGenerateOnClose)
        res
    }
}

@SymbolName("win32_kni_AccessCheckByTypeResultListAndAuditAlarmA")
private external fun kni_AccessCheckByTypeResultListAndAuditAlarmA(SubsystemName: NativePtr, HandleId: NativePtr, ObjectTypeName: NativePtr, ObjectName: NativePtr, SecurityDescriptor: NativePtr, PrincipalSelfSid: NativePtr, DesiredAccess: Int, AuditType: Int, Flags: Int, ObjectTypeList: NativePtr, ObjectTypeListLength: Int, GenericMapping: NativePtr, ObjectCreation: Int, GrantedAccess: NativePtr, AccessStatusList: NativePtr, pfGenerateOnClose: NativePtr): Int

fun AccessCheckByTypeResultListAndAuditAlarmByHandleA(SubsystemName: String?, HandleId: LPVOID?, ClientToken: HANDLE?, ObjectTypeName: String?, ObjectName: String?, SecurityDescriptor: PSECURITY_DESCRIPTOR?, PrincipalSelfSid: PSID?, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST?, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING?, ObjectCreation: WINBOOL, GrantedAccess: LPDWORD?, AccessStatusList: LPDWORD?, pfGenerateOnClose: LPBOOL?): WINBOOL {
    return memScoped {
        val _SubsystemName = SubsystemName?.cstr?.getPointer(memScope).rawValue
        val _HandleId = HandleId.rawValue
        val _ClientToken = ClientToken.rawValue
        val _ObjectTypeName = ObjectTypeName?.cstr?.getPointer(memScope).rawValue
        val _ObjectName = ObjectName?.cstr?.getPointer(memScope).rawValue
        val _SecurityDescriptor = SecurityDescriptor.rawValue
        val _PrincipalSelfSid = PrincipalSelfSid.rawValue
        val _DesiredAccess = DesiredAccess
        val _AuditType = AuditType.value
        val _Flags = Flags
        val _ObjectTypeList = ObjectTypeList.rawValue
        val _ObjectTypeListLength = ObjectTypeListLength
        val _GenericMapping = GenericMapping.rawValue
        val _ObjectCreation = ObjectCreation
        val _GrantedAccess = GrantedAccess.rawValue
        val _AccessStatusList = AccessStatusList.rawValue
        val _pfGenerateOnClose = pfGenerateOnClose.rawValue
        val res = kni_AccessCheckByTypeResultListAndAuditAlarmByHandleA(_SubsystemName, _HandleId, _ClientToken, _ObjectTypeName, _ObjectName, _SecurityDescriptor, _PrincipalSelfSid, _DesiredAccess, _AuditType, _Flags, _ObjectTypeList, _ObjectTypeListLength, _GenericMapping, _ObjectCreation, _GrantedAccess, _AccessStatusList, _pfGenerateOnClose)
        res
    }
}

@SymbolName("win32_kni_AccessCheckByTypeResultListAndAuditAlarmByHandleA")
private external fun kni_AccessCheckByTypeResultListAndAuditAlarmByHandleA(SubsystemName: NativePtr, HandleId: NativePtr, ClientToken: NativePtr, ObjectTypeName: NativePtr, ObjectName: NativePtr, SecurityDescriptor: NativePtr, PrincipalSelfSid: NativePtr, DesiredAccess: Int, AuditType: Int, Flags: Int, ObjectTypeList: NativePtr, ObjectTypeListLength: Int, GenericMapping: NativePtr, ObjectCreation: Int, GrantedAccess: NativePtr, AccessStatusList: NativePtr, pfGenerateOnClose: NativePtr): Int

fun ObjectOpenAuditAlarmA(SubsystemName: String?, HandleId: LPVOID?, ObjectTypeName: LPSTR?, ObjectName: LPSTR?, pSecurityDescriptor: PSECURITY_DESCRIPTOR?, ClientToken: HANDLE?, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET?, ObjectCreation: WINBOOL, AccessGranted: WINBOOL, GenerateOnClose: LPBOOL?): WINBOOL {
    return memScoped {
        val _SubsystemName = SubsystemName?.cstr?.getPointer(memScope).rawValue
        val _HandleId = HandleId.rawValue
        val _ObjectTypeName = ObjectTypeName.rawValue
        val _ObjectName = ObjectName.rawValue
        val _pSecurityDescriptor = pSecurityDescriptor.rawValue
        val _ClientToken = ClientToken.rawValue
        val _DesiredAccess = DesiredAccess
        val _GrantedAccess = GrantedAccess
        val _Privileges = Privileges.rawValue
        val _ObjectCreation = ObjectCreation
        val _AccessGranted = AccessGranted
        val _GenerateOnClose = GenerateOnClose.rawValue
        val res = kni_ObjectOpenAuditAlarmA(_SubsystemName, _HandleId, _ObjectTypeName, _ObjectName, _pSecurityDescriptor, _ClientToken, _DesiredAccess, _GrantedAccess, _Privileges, _ObjectCreation, _AccessGranted, _GenerateOnClose)
        res
    }
}

@SymbolName("win32_kni_ObjectOpenAuditAlarmA")
private external fun kni_ObjectOpenAuditAlarmA(SubsystemName: NativePtr, HandleId: NativePtr, ObjectTypeName: NativePtr, ObjectName: NativePtr, pSecurityDescriptor: NativePtr, ClientToken: NativePtr, DesiredAccess: Int, GrantedAccess: Int, Privileges: NativePtr, ObjectCreation: Int, AccessGranted: Int, GenerateOnClose: NativePtr): Int

fun ObjectPrivilegeAuditAlarmA(SubsystemName: String?, HandleId: LPVOID?, ClientToken: HANDLE?, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET?, AccessGranted: WINBOOL): WINBOOL {
    return memScoped {
        val _SubsystemName = SubsystemName?.cstr?.getPointer(memScope).rawValue
        val _HandleId = HandleId.rawValue
        val _ClientToken = ClientToken.rawValue
        val _DesiredAccess = DesiredAccess
        val _Privileges = Privileges.rawValue
        val _AccessGranted = AccessGranted
        val res = kni_ObjectPrivilegeAuditAlarmA(_SubsystemName, _HandleId, _ClientToken, _DesiredAccess, _Privileges, _AccessGranted)
        res
    }
}

@SymbolName("win32_kni_ObjectPrivilegeAuditAlarmA")
private external fun kni_ObjectPrivilegeAuditAlarmA(SubsystemName: NativePtr, HandleId: NativePtr, ClientToken: NativePtr, DesiredAccess: Int, Privileges: NativePtr, AccessGranted: Int): Int

fun ObjectCloseAuditAlarmA(SubsystemName: String?, HandleId: LPVOID?, GenerateOnClose: WINBOOL): WINBOOL {
    return memScoped {
        val _SubsystemName = SubsystemName?.cstr?.getPointer(memScope).rawValue
        val _HandleId = HandleId.rawValue
        val _GenerateOnClose = GenerateOnClose
        val res = kni_ObjectCloseAuditAlarmA(_SubsystemName, _HandleId, _GenerateOnClose)
        res
    }
}

@SymbolName("win32_kni_ObjectCloseAuditAlarmA")
private external fun kni_ObjectCloseAuditAlarmA(SubsystemName: NativePtr, HandleId: NativePtr, GenerateOnClose: Int): Int

fun ObjectDeleteAuditAlarmA(SubsystemName: String?, HandleId: LPVOID?, GenerateOnClose: WINBOOL): WINBOOL {
    return memScoped {
        val _SubsystemName = SubsystemName?.cstr?.getPointer(memScope).rawValue
        val _HandleId = HandleId.rawValue
        val _GenerateOnClose = GenerateOnClose
        val res = kni_ObjectDeleteAuditAlarmA(_SubsystemName, _HandleId, _GenerateOnClose)
        res
    }
}

@SymbolName("win32_kni_ObjectDeleteAuditAlarmA")
private external fun kni_ObjectDeleteAuditAlarmA(SubsystemName: NativePtr, HandleId: NativePtr, GenerateOnClose: Int): Int

fun PrivilegedServiceAuditAlarmA(SubsystemName: String?, ServiceName: String?, ClientToken: HANDLE?, Privileges: PPRIVILEGE_SET?, AccessGranted: WINBOOL): WINBOOL {
    return memScoped {
        val _SubsystemName = SubsystemName?.cstr?.getPointer(memScope).rawValue
        val _ServiceName = ServiceName?.cstr?.getPointer(memScope).rawValue
        val _ClientToken = ClientToken.rawValue
        val _Privileges = Privileges.rawValue
        val _AccessGranted = AccessGranted
        val res = kni_PrivilegedServiceAuditAlarmA(_SubsystemName, _ServiceName, _ClientToken, _Privileges, _AccessGranted)
        res
    }
}

@SymbolName("win32_kni_PrivilegedServiceAuditAlarmA")
private external fun kni_PrivilegedServiceAuditAlarmA(SubsystemName: NativePtr, ServiceName: NativePtr, ClientToken: NativePtr, Privileges: NativePtr, AccessGranted: Int): Int

fun SetFileSecurityA(lpFileName: String?, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR?): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val _SecurityInformation = SecurityInformation
        val _pSecurityDescriptor = pSecurityDescriptor.rawValue
        val res = kni_SetFileSecurityA(_lpFileName, _SecurityInformation, _pSecurityDescriptor)
        res
    }
}

@SymbolName("win32_kni_SetFileSecurityA")
private external fun kni_SetFileSecurityA(lpFileName: NativePtr, SecurityInformation: Int, pSecurityDescriptor: NativePtr): Int

fun GetFileSecurityA(lpFileName: String?, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR?, nLength: DWORD, lpnLengthNeeded: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val _RequestedInformation = RequestedInformation
        val _pSecurityDescriptor = pSecurityDescriptor.rawValue
        val _nLength = nLength
        val _lpnLengthNeeded = lpnLengthNeeded.rawValue
        val res = kni_GetFileSecurityA(_lpFileName, _RequestedInformation, _pSecurityDescriptor, _nLength, _lpnLengthNeeded)
        res
    }
}

@SymbolName("win32_kni_GetFileSecurityA")
private external fun kni_GetFileSecurityA(lpFileName: NativePtr, RequestedInformation: Int, pSecurityDescriptor: NativePtr, nLength: Int, lpnLengthNeeded: NativePtr): Int

fun ReadDirectoryChangesW(hDirectory: HANDLE?, lpBuffer: LPVOID?, nBufferLength: DWORD, bWatchSubtree: WINBOOL, dwNotifyFilter: DWORD, lpBytesReturned: LPDWORD?, lpOverlapped: LPOVERLAPPED?, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE?): WINBOOL {
    val _hDirectory = hDirectory.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nBufferLength = nBufferLength
    val _bWatchSubtree = bWatchSubtree
    val _dwNotifyFilter = dwNotifyFilter
    val _lpBytesReturned = lpBytesReturned.rawValue
    val _lpOverlapped = lpOverlapped.rawValue
    val _lpCompletionRoutine = lpCompletionRoutine.rawValue
    val res = kni_ReadDirectoryChangesW(_hDirectory, _lpBuffer, _nBufferLength, _bWatchSubtree, _dwNotifyFilter, _lpBytesReturned, _lpOverlapped, _lpCompletionRoutine)
    return res
}

@SymbolName("win32_kni_ReadDirectoryChangesW")
private external fun kni_ReadDirectoryChangesW(hDirectory: NativePtr, lpBuffer: NativePtr, nBufferLength: Int, bWatchSubtree: Int, dwNotifyFilter: Int, lpBytesReturned: NativePtr, lpOverlapped: NativePtr, lpCompletionRoutine: NativePtr): Int

fun IsBadReadPtr(lp: COpaquePointer?, ucb: UINT_PTR): WINBOOL {
    val _lp = lp.rawValue
    val _ucb = ucb
    val res = kni_IsBadReadPtr(_lp, _ucb)
    return res
}

@SymbolName("win32_kni_IsBadReadPtr")
private external fun kni_IsBadReadPtr(lp: NativePtr, ucb: Long): Int

fun IsBadWritePtr(lp: LPVOID?, ucb: UINT_PTR): WINBOOL {
    val _lp = lp.rawValue
    val _ucb = ucb
    val res = kni_IsBadWritePtr(_lp, _ucb)
    return res
}

@SymbolName("win32_kni_IsBadWritePtr")
private external fun kni_IsBadWritePtr(lp: NativePtr, ucb: Long): Int

fun IsBadHugeReadPtr(lp: COpaquePointer?, ucb: UINT_PTR): WINBOOL {
    val _lp = lp.rawValue
    val _ucb = ucb
    val res = kni_IsBadHugeReadPtr(_lp, _ucb)
    return res
}

@SymbolName("win32_kni_IsBadHugeReadPtr")
private external fun kni_IsBadHugeReadPtr(lp: NativePtr, ucb: Long): Int

fun IsBadHugeWritePtr(lp: LPVOID?, ucb: UINT_PTR): WINBOOL {
    val _lp = lp.rawValue
    val _ucb = ucb
    val res = kni_IsBadHugeWritePtr(_lp, _ucb)
    return res
}

@SymbolName("win32_kni_IsBadHugeWritePtr")
private external fun kni_IsBadHugeWritePtr(lp: NativePtr, ucb: Long): Int

fun IsBadStringPtrA(lpsz: String?, ucchMax: UINT_PTR): WINBOOL {
    return memScoped {
        val _lpsz = lpsz?.cstr?.getPointer(memScope).rawValue
        val _ucchMax = ucchMax
        val res = kni_IsBadStringPtrA(_lpsz, _ucchMax)
        res
    }
}

@SymbolName("win32_kni_IsBadStringPtrA")
private external fun kni_IsBadStringPtrA(lpsz: NativePtr, ucchMax: Long): Int

fun IsBadStringPtrW(lpsz: String?, ucchMax: UINT_PTR): WINBOOL {
    return memScoped {
        val _lpsz = lpsz?.wcstr?.getPointer(memScope).rawValue
        val _ucchMax = ucchMax
        val res = kni_IsBadStringPtrW(_lpsz, _ucchMax)
        res
    }
}

@SymbolName("win32_kni_IsBadStringPtrW")
private external fun kni_IsBadStringPtrW(lpsz: NativePtr, ucchMax: Long): Int

fun LookupAccountSidA(lpSystemName: String?, Sid: PSID?, Name: LPSTR?, cchName: LPDWORD?, ReferencedDomainName: LPSTR?, cchReferencedDomainName: LPDWORD?, peUse: PSID_NAME_USE?): WINBOOL {
    return memScoped {
        val _lpSystemName = lpSystemName?.cstr?.getPointer(memScope).rawValue
        val _Sid = Sid.rawValue
        val _Name = Name.rawValue
        val _cchName = cchName.rawValue
        val _ReferencedDomainName = ReferencedDomainName.rawValue
        val _cchReferencedDomainName = cchReferencedDomainName.rawValue
        val _peUse = peUse.rawValue
        val res = kni_LookupAccountSidA(_lpSystemName, _Sid, _Name, _cchName, _ReferencedDomainName, _cchReferencedDomainName, _peUse)
        res
    }
}

@SymbolName("win32_kni_LookupAccountSidA")
private external fun kni_LookupAccountSidA(lpSystemName: NativePtr, Sid: NativePtr, Name: NativePtr, cchName: NativePtr, ReferencedDomainName: NativePtr, cchReferencedDomainName: NativePtr, peUse: NativePtr): Int

fun LookupAccountSidW(lpSystemName: String?, Sid: PSID?, Name: LPWSTR?, cchName: LPDWORD?, ReferencedDomainName: LPWSTR?, cchReferencedDomainName: LPDWORD?, peUse: PSID_NAME_USE?): WINBOOL {
    return memScoped {
        val _lpSystemName = lpSystemName?.wcstr?.getPointer(memScope).rawValue
        val _Sid = Sid.rawValue
        val _Name = Name.rawValue
        val _cchName = cchName.rawValue
        val _ReferencedDomainName = ReferencedDomainName.rawValue
        val _cchReferencedDomainName = cchReferencedDomainName.rawValue
        val _peUse = peUse.rawValue
        val res = kni_LookupAccountSidW(_lpSystemName, _Sid, _Name, _cchName, _ReferencedDomainName, _cchReferencedDomainName, _peUse)
        res
    }
}

@SymbolName("win32_kni_LookupAccountSidW")
private external fun kni_LookupAccountSidW(lpSystemName: NativePtr, Sid: NativePtr, Name: NativePtr, cchName: NativePtr, ReferencedDomainName: NativePtr, cchReferencedDomainName: NativePtr, peUse: NativePtr): Int

fun LookupAccountNameA(lpSystemName: String?, lpAccountName: String?, Sid: PSID?, cbSid: LPDWORD?, ReferencedDomainName: LPSTR?, cchReferencedDomainName: LPDWORD?, peUse: PSID_NAME_USE?): WINBOOL {
    return memScoped {
        val _lpSystemName = lpSystemName?.cstr?.getPointer(memScope).rawValue
        val _lpAccountName = lpAccountName?.cstr?.getPointer(memScope).rawValue
        val _Sid = Sid.rawValue
        val _cbSid = cbSid.rawValue
        val _ReferencedDomainName = ReferencedDomainName.rawValue
        val _cchReferencedDomainName = cchReferencedDomainName.rawValue
        val _peUse = peUse.rawValue
        val res = kni_LookupAccountNameA(_lpSystemName, _lpAccountName, _Sid, _cbSid, _ReferencedDomainName, _cchReferencedDomainName, _peUse)
        res
    }
}

@SymbolName("win32_kni_LookupAccountNameA")
private external fun kni_LookupAccountNameA(lpSystemName: NativePtr, lpAccountName: NativePtr, Sid: NativePtr, cbSid: NativePtr, ReferencedDomainName: NativePtr, cchReferencedDomainName: NativePtr, peUse: NativePtr): Int

fun LookupAccountNameW(lpSystemName: String?, lpAccountName: String?, Sid: PSID?, cbSid: LPDWORD?, ReferencedDomainName: LPWSTR?, cchReferencedDomainName: LPDWORD?, peUse: PSID_NAME_USE?): WINBOOL {
    return memScoped {
        val _lpSystemName = lpSystemName?.wcstr?.getPointer(memScope).rawValue
        val _lpAccountName = lpAccountName?.wcstr?.getPointer(memScope).rawValue
        val _Sid = Sid.rawValue
        val _cbSid = cbSid.rawValue
        val _ReferencedDomainName = ReferencedDomainName.rawValue
        val _cchReferencedDomainName = cchReferencedDomainName.rawValue
        val _peUse = peUse.rawValue
        val res = kni_LookupAccountNameW(_lpSystemName, _lpAccountName, _Sid, _cbSid, _ReferencedDomainName, _cchReferencedDomainName, _peUse)
        res
    }
}

@SymbolName("win32_kni_LookupAccountNameW")
private external fun kni_LookupAccountNameW(lpSystemName: NativePtr, lpAccountName: NativePtr, Sid: NativePtr, cbSid: NativePtr, ReferencedDomainName: NativePtr, cchReferencedDomainName: NativePtr, peUse: NativePtr): Int

fun LookupPrivilegeValueA(lpSystemName: String?, lpName: String?, lpLuid: PLUID?): WINBOOL {
    return memScoped {
        val _lpSystemName = lpSystemName?.cstr?.getPointer(memScope).rawValue
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _lpLuid = lpLuid.rawValue
        val res = kni_LookupPrivilegeValueA(_lpSystemName, _lpName, _lpLuid)
        res
    }
}

@SymbolName("win32_kni_LookupPrivilegeValueA")
private external fun kni_LookupPrivilegeValueA(lpSystemName: NativePtr, lpName: NativePtr, lpLuid: NativePtr): Int

fun LookupPrivilegeValueW(lpSystemName: String?, lpName: String?, lpLuid: PLUID?): WINBOOL {
    return memScoped {
        val _lpSystemName = lpSystemName?.wcstr?.getPointer(memScope).rawValue
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _lpLuid = lpLuid.rawValue
        val res = kni_LookupPrivilegeValueW(_lpSystemName, _lpName, _lpLuid)
        res
    }
}

@SymbolName("win32_kni_LookupPrivilegeValueW")
private external fun kni_LookupPrivilegeValueW(lpSystemName: NativePtr, lpName: NativePtr, lpLuid: NativePtr): Int

fun LookupPrivilegeNameA(lpSystemName: String?, lpLuid: PLUID?, lpName: LPSTR?, cchName: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpSystemName = lpSystemName?.cstr?.getPointer(memScope).rawValue
        val _lpLuid = lpLuid.rawValue
        val _lpName = lpName.rawValue
        val _cchName = cchName.rawValue
        val res = kni_LookupPrivilegeNameA(_lpSystemName, _lpLuid, _lpName, _cchName)
        res
    }
}

@SymbolName("win32_kni_LookupPrivilegeNameA")
private external fun kni_LookupPrivilegeNameA(lpSystemName: NativePtr, lpLuid: NativePtr, lpName: NativePtr, cchName: NativePtr): Int

fun LookupPrivilegeNameW(lpSystemName: String?, lpLuid: PLUID?, lpName: LPWSTR?, cchName: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpSystemName = lpSystemName?.wcstr?.getPointer(memScope).rawValue
        val _lpLuid = lpLuid.rawValue
        val _lpName = lpName.rawValue
        val _cchName = cchName.rawValue
        val res = kni_LookupPrivilegeNameW(_lpSystemName, _lpLuid, _lpName, _cchName)
        res
    }
}

@SymbolName("win32_kni_LookupPrivilegeNameW")
private external fun kni_LookupPrivilegeNameW(lpSystemName: NativePtr, lpLuid: NativePtr, lpName: NativePtr, cchName: NativePtr): Int

fun LookupPrivilegeDisplayNameA(lpSystemName: String?, lpName: String?, lpDisplayName: LPSTR?, cchDisplayName: LPDWORD?, lpLanguageId: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpSystemName = lpSystemName?.cstr?.getPointer(memScope).rawValue
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _lpDisplayName = lpDisplayName.rawValue
        val _cchDisplayName = cchDisplayName.rawValue
        val _lpLanguageId = lpLanguageId.rawValue
        val res = kni_LookupPrivilegeDisplayNameA(_lpSystemName, _lpName, _lpDisplayName, _cchDisplayName, _lpLanguageId)
        res
    }
}

@SymbolName("win32_kni_LookupPrivilegeDisplayNameA")
private external fun kni_LookupPrivilegeDisplayNameA(lpSystemName: NativePtr, lpName: NativePtr, lpDisplayName: NativePtr, cchDisplayName: NativePtr, lpLanguageId: NativePtr): Int

fun LookupPrivilegeDisplayNameW(lpSystemName: String?, lpName: String?, lpDisplayName: LPWSTR?, cchDisplayName: LPDWORD?, lpLanguageId: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpSystemName = lpSystemName?.wcstr?.getPointer(memScope).rawValue
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _lpDisplayName = lpDisplayName.rawValue
        val _cchDisplayName = cchDisplayName.rawValue
        val _lpLanguageId = lpLanguageId.rawValue
        val res = kni_LookupPrivilegeDisplayNameW(_lpSystemName, _lpName, _lpDisplayName, _cchDisplayName, _lpLanguageId)
        res
    }
}

@SymbolName("win32_kni_LookupPrivilegeDisplayNameW")
private external fun kni_LookupPrivilegeDisplayNameW(lpSystemName: NativePtr, lpName: NativePtr, lpDisplayName: NativePtr, cchDisplayName: NativePtr, lpLanguageId: NativePtr): Int

fun BuildCommDCBA(lpDef: String?, lpDCB: LPDCB?): WINBOOL {
    return memScoped {
        val _lpDef = lpDef?.cstr?.getPointer(memScope).rawValue
        val _lpDCB = lpDCB.rawValue
        val res = kni_BuildCommDCBA(_lpDef, _lpDCB)
        res
    }
}

@SymbolName("win32_kni_BuildCommDCBA")
private external fun kni_BuildCommDCBA(lpDef: NativePtr, lpDCB: NativePtr): Int

fun BuildCommDCBW(lpDef: String?, lpDCB: LPDCB?): WINBOOL {
    return memScoped {
        val _lpDef = lpDef?.wcstr?.getPointer(memScope).rawValue
        val _lpDCB = lpDCB.rawValue
        val res = kni_BuildCommDCBW(_lpDef, _lpDCB)
        res
    }
}

@SymbolName("win32_kni_BuildCommDCBW")
private external fun kni_BuildCommDCBW(lpDef: NativePtr, lpDCB: NativePtr): Int

fun BuildCommDCBAndTimeoutsA(lpDef: String?, lpDCB: LPDCB?, lpCommTimeouts: LPCOMMTIMEOUTS?): WINBOOL {
    return memScoped {
        val _lpDef = lpDef?.cstr?.getPointer(memScope).rawValue
        val _lpDCB = lpDCB.rawValue
        val _lpCommTimeouts = lpCommTimeouts.rawValue
        val res = kni_BuildCommDCBAndTimeoutsA(_lpDef, _lpDCB, _lpCommTimeouts)
        res
    }
}

@SymbolName("win32_kni_BuildCommDCBAndTimeoutsA")
private external fun kni_BuildCommDCBAndTimeoutsA(lpDef: NativePtr, lpDCB: NativePtr, lpCommTimeouts: NativePtr): Int

fun BuildCommDCBAndTimeoutsW(lpDef: String?, lpDCB: LPDCB?, lpCommTimeouts: LPCOMMTIMEOUTS?): WINBOOL {
    return memScoped {
        val _lpDef = lpDef?.wcstr?.getPointer(memScope).rawValue
        val _lpDCB = lpDCB.rawValue
        val _lpCommTimeouts = lpCommTimeouts.rawValue
        val res = kni_BuildCommDCBAndTimeoutsW(_lpDef, _lpDCB, _lpCommTimeouts)
        res
    }
}

@SymbolName("win32_kni_BuildCommDCBAndTimeoutsW")
private external fun kni_BuildCommDCBAndTimeoutsW(lpDef: NativePtr, lpDCB: NativePtr, lpCommTimeouts: NativePtr): Int

fun CommConfigDialogA(lpszName: String?, hWnd: HWND?, lpCC: LPCOMMCONFIG?): WINBOOL {
    return memScoped {
        val _lpszName = lpszName?.cstr?.getPointer(memScope).rawValue
        val _hWnd = hWnd.rawValue
        val _lpCC = lpCC.rawValue
        val res = kni_CommConfigDialogA(_lpszName, _hWnd, _lpCC)
        res
    }
}

@SymbolName("win32_kni_CommConfigDialogA")
private external fun kni_CommConfigDialogA(lpszName: NativePtr, hWnd: NativePtr, lpCC: NativePtr): Int

fun CommConfigDialogW(lpszName: String?, hWnd: HWND?, lpCC: LPCOMMCONFIG?): WINBOOL {
    return memScoped {
        val _lpszName = lpszName?.wcstr?.getPointer(memScope).rawValue
        val _hWnd = hWnd.rawValue
        val _lpCC = lpCC.rawValue
        val res = kni_CommConfigDialogW(_lpszName, _hWnd, _lpCC)
        res
    }
}

@SymbolName("win32_kni_CommConfigDialogW")
private external fun kni_CommConfigDialogW(lpszName: NativePtr, hWnd: NativePtr, lpCC: NativePtr): Int

fun GetDefaultCommConfigA(lpszName: String?, lpCC: LPCOMMCONFIG?, lpdwSize: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpszName = lpszName?.cstr?.getPointer(memScope).rawValue
        val _lpCC = lpCC.rawValue
        val _lpdwSize = lpdwSize.rawValue
        val res = kni_GetDefaultCommConfigA(_lpszName, _lpCC, _lpdwSize)
        res
    }
}

@SymbolName("win32_kni_GetDefaultCommConfigA")
private external fun kni_GetDefaultCommConfigA(lpszName: NativePtr, lpCC: NativePtr, lpdwSize: NativePtr): Int

fun GetDefaultCommConfigW(lpszName: String?, lpCC: LPCOMMCONFIG?, lpdwSize: LPDWORD?): WINBOOL {
    return memScoped {
        val _lpszName = lpszName?.wcstr?.getPointer(memScope).rawValue
        val _lpCC = lpCC.rawValue
        val _lpdwSize = lpdwSize.rawValue
        val res = kni_GetDefaultCommConfigW(_lpszName, _lpCC, _lpdwSize)
        res
    }
}

@SymbolName("win32_kni_GetDefaultCommConfigW")
private external fun kni_GetDefaultCommConfigW(lpszName: NativePtr, lpCC: NativePtr, lpdwSize: NativePtr): Int

fun SetDefaultCommConfigA(lpszName: String?, lpCC: LPCOMMCONFIG?, dwSize: DWORD): WINBOOL {
    return memScoped {
        val _lpszName = lpszName?.cstr?.getPointer(memScope).rawValue
        val _lpCC = lpCC.rawValue
        val _dwSize = dwSize
        val res = kni_SetDefaultCommConfigA(_lpszName, _lpCC, _dwSize)
        res
    }
}

@SymbolName("win32_kni_SetDefaultCommConfigA")
private external fun kni_SetDefaultCommConfigA(lpszName: NativePtr, lpCC: NativePtr, dwSize: Int): Int

fun SetDefaultCommConfigW(lpszName: String?, lpCC: LPCOMMCONFIG?, dwSize: DWORD): WINBOOL {
    return memScoped {
        val _lpszName = lpszName?.wcstr?.getPointer(memScope).rawValue
        val _lpCC = lpCC.rawValue
        val _dwSize = dwSize
        val res = kni_SetDefaultCommConfigW(_lpszName, _lpCC, _dwSize)
        res
    }
}

@SymbolName("win32_kni_SetDefaultCommConfigW")
private external fun kni_SetDefaultCommConfigW(lpszName: NativePtr, lpCC: NativePtr, dwSize: Int): Int

fun GetComputerNameA(lpBuffer: LPSTR?, nSize: LPDWORD?): WINBOOL {
    val _lpBuffer = lpBuffer.rawValue
    val _nSize = nSize.rawValue
    val res = kni_GetComputerNameA(_lpBuffer, _nSize)
    return res
}

@SymbolName("win32_kni_GetComputerNameA")
private external fun kni_GetComputerNameA(lpBuffer: NativePtr, nSize: NativePtr): Int

fun GetComputerNameW(lpBuffer: LPWSTR?, nSize: LPDWORD?): WINBOOL {
    val _lpBuffer = lpBuffer.rawValue
    val _nSize = nSize.rawValue
    val res = kni_GetComputerNameW(_lpBuffer, _nSize)
    return res
}

@SymbolName("win32_kni_GetComputerNameW")
private external fun kni_GetComputerNameW(lpBuffer: NativePtr, nSize: NativePtr): Int

fun SetComputerNameA(lpComputerName: String?): WINBOOL {
    return memScoped {
        val _lpComputerName = lpComputerName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetComputerNameA(_lpComputerName)
        res
    }
}

@SymbolName("win32_kni_SetComputerNameA")
private external fun kni_SetComputerNameA(lpComputerName: NativePtr): Int

fun SetComputerNameW(lpComputerName: String?): WINBOOL {
    return memScoped {
        val _lpComputerName = lpComputerName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetComputerNameW(_lpComputerName)
        res
    }
}

@SymbolName("win32_kni_SetComputerNameW")
private external fun kni_SetComputerNameW(lpComputerName: NativePtr): Int

fun SetComputerNameExA(NameType: COMPUTER_NAME_FORMAT, lpBuffer: String?): WINBOOL {
    return memScoped {
        val _NameType = NameType.value
        val _lpBuffer = lpBuffer?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetComputerNameExA(_NameType, _lpBuffer)
        res
    }
}

@SymbolName("win32_kni_SetComputerNameExA")
private external fun kni_SetComputerNameExA(NameType: Int, lpBuffer: NativePtr): Int

fun DnsHostnameToComputerNameA(Hostname: String?, ComputerName: LPSTR?, nSize: LPDWORD?): WINBOOL {
    return memScoped {
        val _Hostname = Hostname?.cstr?.getPointer(memScope).rawValue
        val _ComputerName = ComputerName.rawValue
        val _nSize = nSize.rawValue
        val res = kni_DnsHostnameToComputerNameA(_Hostname, _ComputerName, _nSize)
        res
    }
}

@SymbolName("win32_kni_DnsHostnameToComputerNameA")
private external fun kni_DnsHostnameToComputerNameA(Hostname: NativePtr, ComputerName: NativePtr, nSize: NativePtr): Int

fun DnsHostnameToComputerNameW(Hostname: String?, ComputerName: LPWSTR?, nSize: LPDWORD?): WINBOOL {
    return memScoped {
        val _Hostname = Hostname?.wcstr?.getPointer(memScope).rawValue
        val _ComputerName = ComputerName.rawValue
        val _nSize = nSize.rawValue
        val res = kni_DnsHostnameToComputerNameW(_Hostname, _ComputerName, _nSize)
        res
    }
}

@SymbolName("win32_kni_DnsHostnameToComputerNameW")
private external fun kni_DnsHostnameToComputerNameW(Hostname: NativePtr, ComputerName: NativePtr, nSize: NativePtr): Int

fun GetUserNameA(lpBuffer: LPSTR?, pcbBuffer: LPDWORD?): WINBOOL {
    val _lpBuffer = lpBuffer.rawValue
    val _pcbBuffer = pcbBuffer.rawValue
    val res = kni_GetUserNameA(_lpBuffer, _pcbBuffer)
    return res
}

@SymbolName("win32_kni_GetUserNameA")
private external fun kni_GetUserNameA(lpBuffer: NativePtr, pcbBuffer: NativePtr): Int

fun GetUserNameW(lpBuffer: LPWSTR?, pcbBuffer: LPDWORD?): WINBOOL {
    val _lpBuffer = lpBuffer.rawValue
    val _pcbBuffer = pcbBuffer.rawValue
    val res = kni_GetUserNameW(_lpBuffer, _pcbBuffer)
    return res
}

@SymbolName("win32_kni_GetUserNameW")
private external fun kni_GetUserNameW(lpBuffer: NativePtr, pcbBuffer: NativePtr): Int

fun LogonUserA(lpszUsername: String?, lpszDomain: String?, lpszPassword: String?, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE?): WINBOOL {
    return memScoped {
        val _lpszUsername = lpszUsername?.cstr?.getPointer(memScope).rawValue
        val _lpszDomain = lpszDomain?.cstr?.getPointer(memScope).rawValue
        val _lpszPassword = lpszPassword?.cstr?.getPointer(memScope).rawValue
        val _dwLogonType = dwLogonType
        val _dwLogonProvider = dwLogonProvider
        val _phToken = phToken.rawValue
        val res = kni_LogonUserA(_lpszUsername, _lpszDomain, _lpszPassword, _dwLogonType, _dwLogonProvider, _phToken)
        res
    }
}

@SymbolName("win32_kni_LogonUserA")
private external fun kni_LogonUserA(lpszUsername: NativePtr, lpszDomain: NativePtr, lpszPassword: NativePtr, dwLogonType: Int, dwLogonProvider: Int, phToken: NativePtr): Int

fun LogonUserW(lpszUsername: String?, lpszDomain: String?, lpszPassword: String?, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE?): WINBOOL {
    return memScoped {
        val _lpszUsername = lpszUsername?.wcstr?.getPointer(memScope).rawValue
        val _lpszDomain = lpszDomain?.wcstr?.getPointer(memScope).rawValue
        val _lpszPassword = lpszPassword?.wcstr?.getPointer(memScope).rawValue
        val _dwLogonType = dwLogonType
        val _dwLogonProvider = dwLogonProvider
        val _phToken = phToken.rawValue
        val res = kni_LogonUserW(_lpszUsername, _lpszDomain, _lpszPassword, _dwLogonType, _dwLogonProvider, _phToken)
        res
    }
}

@SymbolName("win32_kni_LogonUserW")
private external fun kni_LogonUserW(lpszUsername: NativePtr, lpszDomain: NativePtr, lpszPassword: NativePtr, dwLogonType: Int, dwLogonProvider: Int, phToken: NativePtr): Int

fun LogonUserExA(lpszUsername: String?, lpszDomain: String?, lpszPassword: String?, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE?, ppLogonSid: CValuesRef<PSIDVar>?, ppProfileBuffer: CValuesRef<PVOIDVar>?, pdwProfileLength: LPDWORD?, pQuotaLimits: PQUOTA_LIMITS?): WINBOOL {
    return memScoped {
        val _lpszUsername = lpszUsername?.cstr?.getPointer(memScope).rawValue
        val _lpszDomain = lpszDomain?.cstr?.getPointer(memScope).rawValue
        val _lpszPassword = lpszPassword?.cstr?.getPointer(memScope).rawValue
        val _dwLogonType = dwLogonType
        val _dwLogonProvider = dwLogonProvider
        val _phToken = phToken.rawValue
        val _ppLogonSid = ppLogonSid?.getPointer(memScope).rawValue
        val _ppProfileBuffer = ppProfileBuffer?.getPointer(memScope).rawValue
        val _pdwProfileLength = pdwProfileLength.rawValue
        val _pQuotaLimits = pQuotaLimits.rawValue
        val res = kni_LogonUserExA(_lpszUsername, _lpszDomain, _lpszPassword, _dwLogonType, _dwLogonProvider, _phToken, _ppLogonSid, _ppProfileBuffer, _pdwProfileLength, _pQuotaLimits)
        res
    }
}

@SymbolName("win32_kni_LogonUserExA")
private external fun kni_LogonUserExA(lpszUsername: NativePtr, lpszDomain: NativePtr, lpszPassword: NativePtr, dwLogonType: Int, dwLogonProvider: Int, phToken: NativePtr, ppLogonSid: NativePtr, ppProfileBuffer: NativePtr, pdwProfileLength: NativePtr, pQuotaLimits: NativePtr): Int

fun LogonUserExW(lpszUsername: String?, lpszDomain: String?, lpszPassword: String?, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE?, ppLogonSid: CValuesRef<PSIDVar>?, ppProfileBuffer: CValuesRef<PVOIDVar>?, pdwProfileLength: LPDWORD?, pQuotaLimits: PQUOTA_LIMITS?): WINBOOL {
    return memScoped {
        val _lpszUsername = lpszUsername?.wcstr?.getPointer(memScope).rawValue
        val _lpszDomain = lpszDomain?.wcstr?.getPointer(memScope).rawValue
        val _lpszPassword = lpszPassword?.wcstr?.getPointer(memScope).rawValue
        val _dwLogonType = dwLogonType
        val _dwLogonProvider = dwLogonProvider
        val _phToken = phToken.rawValue
        val _ppLogonSid = ppLogonSid?.getPointer(memScope).rawValue
        val _ppProfileBuffer = ppProfileBuffer?.getPointer(memScope).rawValue
        val _pdwProfileLength = pdwProfileLength.rawValue
        val _pQuotaLimits = pQuotaLimits.rawValue
        val res = kni_LogonUserExW(_lpszUsername, _lpszDomain, _lpszPassword, _dwLogonType, _dwLogonProvider, _phToken, _ppLogonSid, _ppProfileBuffer, _pdwProfileLength, _pQuotaLimits)
        res
    }
}

@SymbolName("win32_kni_LogonUserExW")
private external fun kni_LogonUserExW(lpszUsername: NativePtr, lpszDomain: NativePtr, lpszPassword: NativePtr, dwLogonType: Int, dwLogonProvider: Int, phToken: NativePtr, ppLogonSid: NativePtr, ppProfileBuffer: NativePtr, pdwProfileLength: NativePtr, pQuotaLimits: NativePtr): Int

fun CreateProcessAsUserA(hToken: HANDLE?, lpApplicationName: String?, lpCommandLine: LPSTR?, lpProcessAttributes: LPSECURITY_ATTRIBUTES?, lpThreadAttributes: LPSECURITY_ATTRIBUTES?, bInheritHandles: WINBOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID?, lpCurrentDirectory: String?, lpStartupInfo: LPSTARTUPINFOA?, lpProcessInformation: LPPROCESS_INFORMATION?): WINBOOL {
    return memScoped {
        val _hToken = hToken.rawValue
        val _lpApplicationName = lpApplicationName?.cstr?.getPointer(memScope).rawValue
        val _lpCommandLine = lpCommandLine.rawValue
        val _lpProcessAttributes = lpProcessAttributes.rawValue
        val _lpThreadAttributes = lpThreadAttributes.rawValue
        val _bInheritHandles = bInheritHandles
        val _dwCreationFlags = dwCreationFlags
        val _lpEnvironment = lpEnvironment.rawValue
        val _lpCurrentDirectory = lpCurrentDirectory?.cstr?.getPointer(memScope).rawValue
        val _lpStartupInfo = lpStartupInfo.rawValue
        val _lpProcessInformation = lpProcessInformation.rawValue
        val res = kni_CreateProcessAsUserA(_hToken, _lpApplicationName, _lpCommandLine, _lpProcessAttributes, _lpThreadAttributes, _bInheritHandles, _dwCreationFlags, _lpEnvironment, _lpCurrentDirectory, _lpStartupInfo, _lpProcessInformation)
        res
    }
}

@SymbolName("win32_kni_CreateProcessAsUserA")
private external fun kni_CreateProcessAsUserA(hToken: NativePtr, lpApplicationName: NativePtr, lpCommandLine: NativePtr, lpProcessAttributes: NativePtr, lpThreadAttributes: NativePtr, bInheritHandles: Int, dwCreationFlags: Int, lpEnvironment: NativePtr, lpCurrentDirectory: NativePtr, lpStartupInfo: NativePtr, lpProcessInformation: NativePtr): Int

fun CreateProcessWithLogonW(lpUsername: String?, lpDomain: String?, lpPassword: String?, dwLogonFlags: DWORD, lpApplicationName: String?, lpCommandLine: LPWSTR?, dwCreationFlags: DWORD, lpEnvironment: LPVOID?, lpCurrentDirectory: String?, lpStartupInfo: LPSTARTUPINFOW?, lpProcessInformation: LPPROCESS_INFORMATION?): WINBOOL {
    return memScoped {
        val _lpUsername = lpUsername?.wcstr?.getPointer(memScope).rawValue
        val _lpDomain = lpDomain?.wcstr?.getPointer(memScope).rawValue
        val _lpPassword = lpPassword?.wcstr?.getPointer(memScope).rawValue
        val _dwLogonFlags = dwLogonFlags
        val _lpApplicationName = lpApplicationName?.wcstr?.getPointer(memScope).rawValue
        val _lpCommandLine = lpCommandLine.rawValue
        val _dwCreationFlags = dwCreationFlags
        val _lpEnvironment = lpEnvironment.rawValue
        val _lpCurrentDirectory = lpCurrentDirectory?.wcstr?.getPointer(memScope).rawValue
        val _lpStartupInfo = lpStartupInfo.rawValue
        val _lpProcessInformation = lpProcessInformation.rawValue
        val res = kni_CreateProcessWithLogonW(_lpUsername, _lpDomain, _lpPassword, _dwLogonFlags, _lpApplicationName, _lpCommandLine, _dwCreationFlags, _lpEnvironment, _lpCurrentDirectory, _lpStartupInfo, _lpProcessInformation)
        res
    }
}

@SymbolName("win32_kni_CreateProcessWithLogonW")
private external fun kni_CreateProcessWithLogonW(lpUsername: NativePtr, lpDomain: NativePtr, lpPassword: NativePtr, dwLogonFlags: Int, lpApplicationName: NativePtr, lpCommandLine: NativePtr, dwCreationFlags: Int, lpEnvironment: NativePtr, lpCurrentDirectory: NativePtr, lpStartupInfo: NativePtr, lpProcessInformation: NativePtr): Int

fun CreateProcessWithTokenW(hToken: HANDLE?, dwLogonFlags: DWORD, lpApplicationName: String?, lpCommandLine: LPWSTR?, dwCreationFlags: DWORD, lpEnvironment: LPVOID?, lpCurrentDirectory: String?, lpStartupInfo: LPSTARTUPINFOW?, lpProcessInformation: LPPROCESS_INFORMATION?): WINBOOL {
    return memScoped {
        val _hToken = hToken.rawValue
        val _dwLogonFlags = dwLogonFlags
        val _lpApplicationName = lpApplicationName?.wcstr?.getPointer(memScope).rawValue
        val _lpCommandLine = lpCommandLine.rawValue
        val _dwCreationFlags = dwCreationFlags
        val _lpEnvironment = lpEnvironment.rawValue
        val _lpCurrentDirectory = lpCurrentDirectory?.wcstr?.getPointer(memScope).rawValue
        val _lpStartupInfo = lpStartupInfo.rawValue
        val _lpProcessInformation = lpProcessInformation.rawValue
        val res = kni_CreateProcessWithTokenW(_hToken, _dwLogonFlags, _lpApplicationName, _lpCommandLine, _dwCreationFlags, _lpEnvironment, _lpCurrentDirectory, _lpStartupInfo, _lpProcessInformation)
        res
    }
}

@SymbolName("win32_kni_CreateProcessWithTokenW")
private external fun kni_CreateProcessWithTokenW(hToken: NativePtr, dwLogonFlags: Int, lpApplicationName: NativePtr, lpCommandLine: NativePtr, dwCreationFlags: Int, lpEnvironment: NativePtr, lpCurrentDirectory: NativePtr, lpStartupInfo: NativePtr, lpProcessInformation: NativePtr): Int

fun IsTokenUntrusted(TokenHandle: HANDLE?): WINBOOL {
    val _TokenHandle = TokenHandle.rawValue
    val res = kni_IsTokenUntrusted(_TokenHandle)
    return res
}

@SymbolName("win32_kni_IsTokenUntrusted")
private external fun kni_IsTokenUntrusted(TokenHandle: NativePtr): Int

fun RegisterWaitForSingleObject(phNewWaitObject: PHANDLE?, hObject: HANDLE?, Callback: WAITORTIMERCALLBACK?, Context: PVOID?, dwMilliseconds: ULONG, dwFlags: ULONG): WINBOOL {
    val _phNewWaitObject = phNewWaitObject.rawValue
    val _hObject = hObject.rawValue
    val _Callback = Callback.rawValue
    val _Context = Context.rawValue
    val _dwMilliseconds = dwMilliseconds
    val _dwFlags = dwFlags
    val res = kni_RegisterWaitForSingleObject(_phNewWaitObject, _hObject, _Callback, _Context, _dwMilliseconds, _dwFlags)
    return res
}

@SymbolName("win32_kni_RegisterWaitForSingleObject")
private external fun kni_RegisterWaitForSingleObject(phNewWaitObject: NativePtr, hObject: NativePtr, Callback: NativePtr, Context: NativePtr, dwMilliseconds: Int, dwFlags: Int): Int

fun UnregisterWait(WaitHandle: HANDLE?): WINBOOL {
    val _WaitHandle = WaitHandle.rawValue
    val res = kni_UnregisterWait(_WaitHandle)
    return res
}

@SymbolName("win32_kni_UnregisterWait")
private external fun kni_UnregisterWait(WaitHandle: NativePtr): Int

fun BindIoCompletionCallback(FileHandle: HANDLE?, Function: LPOVERLAPPED_COMPLETION_ROUTINE?, Flags: ULONG): WINBOOL {
    val _FileHandle = FileHandle.rawValue
    val _Function = Function.rawValue
    val _Flags = Flags
    val res = kni_BindIoCompletionCallback(_FileHandle, _Function, _Flags)
    return res
}

@SymbolName("win32_kni_BindIoCompletionCallback")
private external fun kni_BindIoCompletionCallback(FileHandle: NativePtr, Function: NativePtr, Flags: Int): Int

fun SetTimerQueueTimer(TimerQueue: HANDLE?, Callback: WAITORTIMERCALLBACK?, Parameter: PVOID?, DueTime: DWORD, Period: DWORD, PreferIo: WINBOOL): HANDLE? {
    val _TimerQueue = TimerQueue.rawValue
    val _Callback = Callback.rawValue
    val _Parameter = Parameter.rawValue
    val _DueTime = DueTime
    val _Period = Period
    val _PreferIo = PreferIo
    val res = kni_SetTimerQueueTimer(_TimerQueue, _Callback, _Parameter, _DueTime, _Period, _PreferIo)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_SetTimerQueueTimer")
private external fun kni_SetTimerQueueTimer(TimerQueue: NativePtr, Callback: NativePtr, Parameter: NativePtr, DueTime: Int, Period: Int, PreferIo: Int): NativePtr

fun CancelTimerQueueTimer(TimerQueue: HANDLE?, Timer: HANDLE?): WINBOOL {
    val _TimerQueue = TimerQueue.rawValue
    val _Timer = Timer.rawValue
    val res = kni_CancelTimerQueueTimer(_TimerQueue, _Timer)
    return res
}

@SymbolName("win32_kni_CancelTimerQueueTimer")
private external fun kni_CancelTimerQueueTimer(TimerQueue: NativePtr, Timer: NativePtr): Int

fun DeleteTimerQueue(TimerQueue: HANDLE?): WINBOOL {
    val _TimerQueue = TimerQueue.rawValue
    val res = kni_DeleteTimerQueue(_TimerQueue)
    return res
}

@SymbolName("win32_kni_DeleteTimerQueue")
private external fun kni_DeleteTimerQueue(TimerQueue: NativePtr): Int

fun CreatePrivateNamespaceA(lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES?, lpBoundaryDescriptor: LPVOID?, lpAliasPrefix: String?): HANDLE? {
    return memScoped {
        val _lpPrivateNamespaceAttributes = lpPrivateNamespaceAttributes.rawValue
        val _lpBoundaryDescriptor = lpBoundaryDescriptor.rawValue
        val _lpAliasPrefix = lpAliasPrefix?.cstr?.getPointer(memScope).rawValue
        val res = kni_CreatePrivateNamespaceA(_lpPrivateNamespaceAttributes, _lpBoundaryDescriptor, _lpAliasPrefix)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreatePrivateNamespaceA")
private external fun kni_CreatePrivateNamespaceA(lpPrivateNamespaceAttributes: NativePtr, lpBoundaryDescriptor: NativePtr, lpAliasPrefix: NativePtr): NativePtr

fun OpenPrivateNamespaceA(lpBoundaryDescriptor: LPVOID?, lpAliasPrefix: String?): HANDLE? {
    return memScoped {
        val _lpBoundaryDescriptor = lpBoundaryDescriptor.rawValue
        val _lpAliasPrefix = lpAliasPrefix?.cstr?.getPointer(memScope).rawValue
        val res = kni_OpenPrivateNamespaceA(_lpBoundaryDescriptor, _lpAliasPrefix)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenPrivateNamespaceA")
private external fun kni_OpenPrivateNamespaceA(lpBoundaryDescriptor: NativePtr, lpAliasPrefix: NativePtr): NativePtr

fun CreateBoundaryDescriptorA(Name: String?, Flags: ULONG): HANDLE? {
    return memScoped {
        val _Name = Name?.cstr?.getPointer(memScope).rawValue
        val _Flags = Flags
        val res = kni_CreateBoundaryDescriptorA(_Name, _Flags)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateBoundaryDescriptorA")
private external fun kni_CreateBoundaryDescriptorA(Name: NativePtr, Flags: Int): NativePtr

fun AddIntegrityLabelToBoundaryDescriptor(BoundaryDescriptor: CValuesRef<HANDLEVar>?, IntegrityLabel: PSID?): WINBOOL {
    return memScoped {
        val _BoundaryDescriptor = BoundaryDescriptor?.getPointer(memScope).rawValue
        val _IntegrityLabel = IntegrityLabel.rawValue
        val res = kni_AddIntegrityLabelToBoundaryDescriptor(_BoundaryDescriptor, _IntegrityLabel)
        res
    }
}

@SymbolName("win32_kni_AddIntegrityLabelToBoundaryDescriptor")
private external fun kni_AddIntegrityLabelToBoundaryDescriptor(BoundaryDescriptor: NativePtr, IntegrityLabel: NativePtr): Int

fun GetCurrentHwProfileA(lpHwProfileInfo: LPHW_PROFILE_INFOA?): WINBOOL {
    val _lpHwProfileInfo = lpHwProfileInfo.rawValue
    val res = kni_GetCurrentHwProfileA(_lpHwProfileInfo)
    return res
}

@SymbolName("win32_kni_GetCurrentHwProfileA")
private external fun kni_GetCurrentHwProfileA(lpHwProfileInfo: NativePtr): Int

fun GetCurrentHwProfileW(lpHwProfileInfo: LPHW_PROFILE_INFOW?): WINBOOL {
    val _lpHwProfileInfo = lpHwProfileInfo.rawValue
    val res = kni_GetCurrentHwProfileW(_lpHwProfileInfo)
    return res
}

@SymbolName("win32_kni_GetCurrentHwProfileW")
private external fun kni_GetCurrentHwProfileW(lpHwProfileInfo: NativePtr): Int

fun VerifyVersionInfoA(lpVersionInformation: LPOSVERSIONINFOEXA?, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG): WINBOOL {
    val _lpVersionInformation = lpVersionInformation.rawValue
    val _dwTypeMask = dwTypeMask
    val _dwlConditionMask = dwlConditionMask
    val res = kni_VerifyVersionInfoA(_lpVersionInformation, _dwTypeMask, _dwlConditionMask)
    return res
}

@SymbolName("win32_kni_VerifyVersionInfoA")
private external fun kni_VerifyVersionInfoA(lpVersionInformation: NativePtr, dwTypeMask: Int, dwlConditionMask: Long): Int

fun VerifyVersionInfoW(lpVersionInformation: LPOSVERSIONINFOEXW?, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG): WINBOOL {
    val _lpVersionInformation = lpVersionInformation.rawValue
    val _dwTypeMask = dwTypeMask
    val _dwlConditionMask = dwlConditionMask
    val res = kni_VerifyVersionInfoW(_lpVersionInformation, _dwTypeMask, _dwlConditionMask)
    return res
}

@SymbolName("win32_kni_VerifyVersionInfoW")
private external fun kni_VerifyVersionInfoW(lpVersionInformation: NativePtr, dwTypeMask: Int, dwlConditionMask: Long): Int

fun GetSystemPowerStatus(lpSystemPowerStatus: LPSYSTEM_POWER_STATUS?): WINBOOL {
    val _lpSystemPowerStatus = lpSystemPowerStatus.rawValue
    val res = kni_GetSystemPowerStatus(_lpSystemPowerStatus)
    return res
}

@SymbolName("win32_kni_GetSystemPowerStatus")
private external fun kni_GetSystemPowerStatus(lpSystemPowerStatus: NativePtr): Int

fun SetSystemPowerState(fSuspend: WINBOOL, fForce: WINBOOL): WINBOOL {
    val _fSuspend = fSuspend
    val _fForce = fForce
    val res = kni_SetSystemPowerState(_fSuspend, _fForce)
    return res
}

@SymbolName("win32_kni_SetSystemPowerState")
private external fun kni_SetSystemPowerState(fSuspend: Int, fForce: Int): Int

fun AllocateUserPhysicalPages(hProcess: HANDLE?, NumberOfPages: PULONG_PTR?, PageArray: PULONG_PTR?): WINBOOL {
    val _hProcess = hProcess.rawValue
    val _NumberOfPages = NumberOfPages.rawValue
    val _PageArray = PageArray.rawValue
    val res = kni_AllocateUserPhysicalPages(_hProcess, _NumberOfPages, _PageArray)
    return res
}

@SymbolName("win32_kni_AllocateUserPhysicalPages")
private external fun kni_AllocateUserPhysicalPages(hProcess: NativePtr, NumberOfPages: NativePtr, PageArray: NativePtr): Int

fun FreeUserPhysicalPages(hProcess: HANDLE?, NumberOfPages: PULONG_PTR?, PageArray: PULONG_PTR?): WINBOOL {
    val _hProcess = hProcess.rawValue
    val _NumberOfPages = NumberOfPages.rawValue
    val _PageArray = PageArray.rawValue
    val res = kni_FreeUserPhysicalPages(_hProcess, _NumberOfPages, _PageArray)
    return res
}

@SymbolName("win32_kni_FreeUserPhysicalPages")
private external fun kni_FreeUserPhysicalPages(hProcess: NativePtr, NumberOfPages: NativePtr, PageArray: NativePtr): Int

fun MapUserPhysicalPages(VirtualAddress: PVOID?, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR?): WINBOOL {
    val _VirtualAddress = VirtualAddress.rawValue
    val _NumberOfPages = NumberOfPages
    val _PageArray = PageArray.rawValue
    val res = kni_MapUserPhysicalPages(_VirtualAddress, _NumberOfPages, _PageArray)
    return res
}

@SymbolName("win32_kni_MapUserPhysicalPages")
private external fun kni_MapUserPhysicalPages(VirtualAddress: NativePtr, NumberOfPages: Long, PageArray: NativePtr): Int

fun MapUserPhysicalPagesScatter(VirtualAddresses: CValuesRef<PVOIDVar>?, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR?): WINBOOL {
    return memScoped {
        val _VirtualAddresses = VirtualAddresses?.getPointer(memScope).rawValue
        val _NumberOfPages = NumberOfPages
        val _PageArray = PageArray.rawValue
        val res = kni_MapUserPhysicalPagesScatter(_VirtualAddresses, _NumberOfPages, _PageArray)
        res
    }
}

@SymbolName("win32_kni_MapUserPhysicalPagesScatter")
private external fun kni_MapUserPhysicalPagesScatter(VirtualAddresses: NativePtr, NumberOfPages: Long, PageArray: NativePtr): Int

fun CreateJobObjectA(lpJobAttributes: LPSECURITY_ATTRIBUTES?, lpName: String?): HANDLE? {
    return memScoped {
        val _lpJobAttributes = lpJobAttributes.rawValue
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val res = kni_CreateJobObjectA(_lpJobAttributes, _lpName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateJobObjectA")
private external fun kni_CreateJobObjectA(lpJobAttributes: NativePtr, lpName: NativePtr): NativePtr

fun CreateJobObjectW(lpJobAttributes: LPSECURITY_ATTRIBUTES?, lpName: String?): HANDLE? {
    return memScoped {
        val _lpJobAttributes = lpJobAttributes.rawValue
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CreateJobObjectW(_lpJobAttributes, _lpName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateJobObjectW")
private external fun kni_CreateJobObjectW(lpJobAttributes: NativePtr, lpName: NativePtr): NativePtr

fun OpenJobObjectA(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL, lpName: String?): HANDLE? {
    return memScoped {
        val _dwDesiredAccess = dwDesiredAccess
        val _bInheritHandle = bInheritHandle
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val res = kni_OpenJobObjectA(_dwDesiredAccess, _bInheritHandle, _lpName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenJobObjectA")
private external fun kni_OpenJobObjectA(dwDesiredAccess: Int, bInheritHandle: Int, lpName: NativePtr): NativePtr

fun OpenJobObjectW(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL, lpName: String?): HANDLE? {
    return memScoped {
        val _dwDesiredAccess = dwDesiredAccess
        val _bInheritHandle = bInheritHandle
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_OpenJobObjectW(_dwDesiredAccess, _bInheritHandle, _lpName)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_OpenJobObjectW")
private external fun kni_OpenJobObjectW(dwDesiredAccess: Int, bInheritHandle: Int, lpName: NativePtr): NativePtr

fun AssignProcessToJobObject(hJob: HANDLE?, hProcess: HANDLE?): WINBOOL {
    val _hJob = hJob.rawValue
    val _hProcess = hProcess.rawValue
    val res = kni_AssignProcessToJobObject(_hJob, _hProcess)
    return res
}

@SymbolName("win32_kni_AssignProcessToJobObject")
private external fun kni_AssignProcessToJobObject(hJob: NativePtr, hProcess: NativePtr): Int

fun TerminateJobObject(hJob: HANDLE?, uExitCode: UINT): WINBOOL {
    val _hJob = hJob.rawValue
    val _uExitCode = uExitCode
    val res = kni_TerminateJobObject(_hJob, _uExitCode)
    return res
}

@SymbolName("win32_kni_TerminateJobObject")
private external fun kni_TerminateJobObject(hJob: NativePtr, uExitCode: Int): Int

fun QueryInformationJobObject(hJob: HANDLE?, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID?, cbJobObjectInformationLength: DWORD, lpReturnLength: LPDWORD?): WINBOOL {
    val _hJob = hJob.rawValue
    val _JobObjectInformationClass = JobObjectInformationClass
    val _lpJobObjectInformation = lpJobObjectInformation.rawValue
    val _cbJobObjectInformationLength = cbJobObjectInformationLength
    val _lpReturnLength = lpReturnLength.rawValue
    val res = kni_QueryInformationJobObject(_hJob, _JobObjectInformationClass, _lpJobObjectInformation, _cbJobObjectInformationLength, _lpReturnLength)
    return res
}

@SymbolName("win32_kni_QueryInformationJobObject")
private external fun kni_QueryInformationJobObject(hJob: NativePtr, JobObjectInformationClass: Int, lpJobObjectInformation: NativePtr, cbJobObjectInformationLength: Int, lpReturnLength: NativePtr): Int

fun SetInformationJobObject(hJob: HANDLE?, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID?, cbJobObjectInformationLength: DWORD): WINBOOL {
    val _hJob = hJob.rawValue
    val _JobObjectInformationClass = JobObjectInformationClass
    val _lpJobObjectInformation = lpJobObjectInformation.rawValue
    val _cbJobObjectInformationLength = cbJobObjectInformationLength
    val res = kni_SetInformationJobObject(_hJob, _JobObjectInformationClass, _lpJobObjectInformation, _cbJobObjectInformationLength)
    return res
}

@SymbolName("win32_kni_SetInformationJobObject")
private external fun kni_SetInformationJobObject(hJob: NativePtr, JobObjectInformationClass: Int, lpJobObjectInformation: NativePtr, cbJobObjectInformationLength: Int): Int

fun CreateJobSet(NumJob: ULONG, UserJobSet: PJOB_SET_ARRAY?, Flags: ULONG): WINBOOL {
    val _NumJob = NumJob
    val _UserJobSet = UserJobSet.rawValue
    val _Flags = Flags
    val res = kni_CreateJobSet(_NumJob, _UserJobSet, _Flags)
    return res
}

@SymbolName("win32_kni_CreateJobSet")
private external fun kni_CreateJobSet(NumJob: Int, UserJobSet: NativePtr, Flags: Int): Int

fun FindFirstVolumeA(lpszVolumeName: LPSTR?, cchBufferLength: DWORD): HANDLE? {
    val _lpszVolumeName = lpszVolumeName.rawValue
    val _cchBufferLength = cchBufferLength
    val res = kni_FindFirstVolumeA(_lpszVolumeName, _cchBufferLength)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_FindFirstVolumeA")
private external fun kni_FindFirstVolumeA(lpszVolumeName: NativePtr, cchBufferLength: Int): NativePtr

fun FindNextVolumeA(hFindVolume: HANDLE?, lpszVolumeName: LPSTR?, cchBufferLength: DWORD): WINBOOL {
    val _hFindVolume = hFindVolume.rawValue
    val _lpszVolumeName = lpszVolumeName.rawValue
    val _cchBufferLength = cchBufferLength
    val res = kni_FindNextVolumeA(_hFindVolume, _lpszVolumeName, _cchBufferLength)
    return res
}

@SymbolName("win32_kni_FindNextVolumeA")
private external fun kni_FindNextVolumeA(hFindVolume: NativePtr, lpszVolumeName: NativePtr, cchBufferLength: Int): Int

fun FindFirstVolumeMountPointA(lpszRootPathName: String?, lpszVolumeMountPoint: LPSTR?, cchBufferLength: DWORD): HANDLE? {
    return memScoped {
        val _lpszRootPathName = lpszRootPathName?.cstr?.getPointer(memScope).rawValue
        val _lpszVolumeMountPoint = lpszVolumeMountPoint.rawValue
        val _cchBufferLength = cchBufferLength
        val res = kni_FindFirstVolumeMountPointA(_lpszRootPathName, _lpszVolumeMountPoint, _cchBufferLength)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_FindFirstVolumeMountPointA")
private external fun kni_FindFirstVolumeMountPointA(lpszRootPathName: NativePtr, lpszVolumeMountPoint: NativePtr, cchBufferLength: Int): NativePtr

fun FindFirstVolumeMountPointW(lpszRootPathName: String?, lpszVolumeMountPoint: LPWSTR?, cchBufferLength: DWORD): HANDLE? {
    return memScoped {
        val _lpszRootPathName = lpszRootPathName?.wcstr?.getPointer(memScope).rawValue
        val _lpszVolumeMountPoint = lpszVolumeMountPoint.rawValue
        val _cchBufferLength = cchBufferLength
        val res = kni_FindFirstVolumeMountPointW(_lpszRootPathName, _lpszVolumeMountPoint, _cchBufferLength)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_FindFirstVolumeMountPointW")
private external fun kni_FindFirstVolumeMountPointW(lpszRootPathName: NativePtr, lpszVolumeMountPoint: NativePtr, cchBufferLength: Int): NativePtr

fun FindNextVolumeMountPointA(hFindVolumeMountPoint: HANDLE?, lpszVolumeMountPoint: LPSTR?, cchBufferLength: DWORD): WINBOOL {
    val _hFindVolumeMountPoint = hFindVolumeMountPoint.rawValue
    val _lpszVolumeMountPoint = lpszVolumeMountPoint.rawValue
    val _cchBufferLength = cchBufferLength
    val res = kni_FindNextVolumeMountPointA(_hFindVolumeMountPoint, _lpszVolumeMountPoint, _cchBufferLength)
    return res
}

@SymbolName("win32_kni_FindNextVolumeMountPointA")
private external fun kni_FindNextVolumeMountPointA(hFindVolumeMountPoint: NativePtr, lpszVolumeMountPoint: NativePtr, cchBufferLength: Int): Int

fun FindNextVolumeMountPointW(hFindVolumeMountPoint: HANDLE?, lpszVolumeMountPoint: LPWSTR?, cchBufferLength: DWORD): WINBOOL {
    val _hFindVolumeMountPoint = hFindVolumeMountPoint.rawValue
    val _lpszVolumeMountPoint = lpszVolumeMountPoint.rawValue
    val _cchBufferLength = cchBufferLength
    val res = kni_FindNextVolumeMountPointW(_hFindVolumeMountPoint, _lpszVolumeMountPoint, _cchBufferLength)
    return res
}

@SymbolName("win32_kni_FindNextVolumeMountPointW")
private external fun kni_FindNextVolumeMountPointW(hFindVolumeMountPoint: NativePtr, lpszVolumeMountPoint: NativePtr, cchBufferLength: Int): Int

fun FindVolumeMountPointClose(hFindVolumeMountPoint: HANDLE?): WINBOOL {
    val _hFindVolumeMountPoint = hFindVolumeMountPoint.rawValue
    val res = kni_FindVolumeMountPointClose(_hFindVolumeMountPoint)
    return res
}

@SymbolName("win32_kni_FindVolumeMountPointClose")
private external fun kni_FindVolumeMountPointClose(hFindVolumeMountPoint: NativePtr): Int

fun SetVolumeMountPointA(lpszVolumeMountPoint: String?, lpszVolumeName: String?): WINBOOL {
    return memScoped {
        val _lpszVolumeMountPoint = lpszVolumeMountPoint?.cstr?.getPointer(memScope).rawValue
        val _lpszVolumeName = lpszVolumeName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetVolumeMountPointA(_lpszVolumeMountPoint, _lpszVolumeName)
        res
    }
}

@SymbolName("win32_kni_SetVolumeMountPointA")
private external fun kni_SetVolumeMountPointA(lpszVolumeMountPoint: NativePtr, lpszVolumeName: NativePtr): Int

fun SetVolumeMountPointW(lpszVolumeMountPoint: String?, lpszVolumeName: String?): WINBOOL {
    return memScoped {
        val _lpszVolumeMountPoint = lpszVolumeMountPoint?.wcstr?.getPointer(memScope).rawValue
        val _lpszVolumeName = lpszVolumeName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetVolumeMountPointW(_lpszVolumeMountPoint, _lpszVolumeName)
        res
    }
}

@SymbolName("win32_kni_SetVolumeMountPointW")
private external fun kni_SetVolumeMountPointW(lpszVolumeMountPoint: NativePtr, lpszVolumeName: NativePtr): Int

fun DeleteVolumeMountPointA(lpszVolumeMountPoint: String?): WINBOOL {
    return memScoped {
        val _lpszVolumeMountPoint = lpszVolumeMountPoint?.cstr?.getPointer(memScope).rawValue
        val res = kni_DeleteVolumeMountPointA(_lpszVolumeMountPoint)
        res
    }
}

@SymbolName("win32_kni_DeleteVolumeMountPointA")
private external fun kni_DeleteVolumeMountPointA(lpszVolumeMountPoint: NativePtr): Int

fun GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint: String?, lpszVolumeName: LPSTR?, cchBufferLength: DWORD): WINBOOL {
    return memScoped {
        val _lpszVolumeMountPoint = lpszVolumeMountPoint?.cstr?.getPointer(memScope).rawValue
        val _lpszVolumeName = lpszVolumeName.rawValue
        val _cchBufferLength = cchBufferLength
        val res = kni_GetVolumeNameForVolumeMountPointA(_lpszVolumeMountPoint, _lpszVolumeName, _cchBufferLength)
        res
    }
}

@SymbolName("win32_kni_GetVolumeNameForVolumeMountPointA")
private external fun kni_GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint: NativePtr, lpszVolumeName: NativePtr, cchBufferLength: Int): Int

fun GetVolumePathNameA(lpszFileName: String?, lpszVolumePathName: LPSTR?, cchBufferLength: DWORD): WINBOOL {
    return memScoped {
        val _lpszFileName = lpszFileName?.cstr?.getPointer(memScope).rawValue
        val _lpszVolumePathName = lpszVolumePathName.rawValue
        val _cchBufferLength = cchBufferLength
        val res = kni_GetVolumePathNameA(_lpszFileName, _lpszVolumePathName, _cchBufferLength)
        res
    }
}

@SymbolName("win32_kni_GetVolumePathNameA")
private external fun kni_GetVolumePathNameA(lpszFileName: NativePtr, lpszVolumePathName: NativePtr, cchBufferLength: Int): Int

fun GetVolumePathNamesForVolumeNameA(lpszVolumeName: String?, lpszVolumePathNames: LPCH?, cchBufferLength: DWORD, lpcchReturnLength: PDWORD?): WINBOOL {
    return memScoped {
        val _lpszVolumeName = lpszVolumeName?.cstr?.getPointer(memScope).rawValue
        val _lpszVolumePathNames = lpszVolumePathNames.rawValue
        val _cchBufferLength = cchBufferLength
        val _lpcchReturnLength = lpcchReturnLength.rawValue
        val res = kni_GetVolumePathNamesForVolumeNameA(_lpszVolumeName, _lpszVolumePathNames, _cchBufferLength, _lpcchReturnLength)
        res
    }
}

@SymbolName("win32_kni_GetVolumePathNamesForVolumeNameA")
private external fun kni_GetVolumePathNamesForVolumeNameA(lpszVolumeName: NativePtr, lpszVolumePathNames: NativePtr, cchBufferLength: Int, lpcchReturnLength: NativePtr): Int

fun CreateActCtxA(pActCtx: PCACTCTXA?): HANDLE? {
    val _pActCtx = pActCtx.rawValue
    val res = kni_CreateActCtxA(_pActCtx)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CreateActCtxA")
private external fun kni_CreateActCtxA(pActCtx: NativePtr): NativePtr

fun CreateActCtxW(pActCtx: PCACTCTXW?): HANDLE? {
    val _pActCtx = pActCtx.rawValue
    val res = kni_CreateActCtxW(_pActCtx)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CreateActCtxW")
private external fun kni_CreateActCtxW(pActCtx: NativePtr): NativePtr

fun AddRefActCtx(hActCtx: HANDLE?): Unit {
    val _hActCtx = hActCtx.rawValue
    val res = kni_AddRefActCtx(_hActCtx)
    return res
}

@SymbolName("win32_kni_AddRefActCtx")
private external fun kni_AddRefActCtx(hActCtx: NativePtr): Unit

fun ReleaseActCtx(hActCtx: HANDLE?): Unit {
    val _hActCtx = hActCtx.rawValue
    val res = kni_ReleaseActCtx(_hActCtx)
    return res
}

@SymbolName("win32_kni_ReleaseActCtx")
private external fun kni_ReleaseActCtx(hActCtx: NativePtr): Unit

fun ZombifyActCtx(hActCtx: HANDLE?): WINBOOL {
    val _hActCtx = hActCtx.rawValue
    val res = kni_ZombifyActCtx(_hActCtx)
    return res
}

@SymbolName("win32_kni_ZombifyActCtx")
private external fun kni_ZombifyActCtx(hActCtx: NativePtr): Int

fun ActivateActCtx(hActCtx: HANDLE?, lpCookie: CValuesRef<ULONG_PTRVar>?): WINBOOL {
    return memScoped {
        val _hActCtx = hActCtx.rawValue
        val _lpCookie = lpCookie?.getPointer(memScope).rawValue
        val res = kni_ActivateActCtx(_hActCtx, _lpCookie)
        res
    }
}

@SymbolName("win32_kni_ActivateActCtx")
private external fun kni_ActivateActCtx(hActCtx: NativePtr, lpCookie: NativePtr): Int

fun DeactivateActCtx(dwFlags: DWORD, ulCookie: ULONG_PTR): WINBOOL {
    val _dwFlags = dwFlags
    val _ulCookie = ulCookie
    val res = kni_DeactivateActCtx(_dwFlags, _ulCookie)
    return res
}

@SymbolName("win32_kni_DeactivateActCtx")
private external fun kni_DeactivateActCtx(dwFlags: Int, ulCookie: Long): Int

fun GetCurrentActCtx(lphActCtx: CValuesRef<HANDLEVar>?): WINBOOL {
    return memScoped {
        val _lphActCtx = lphActCtx?.getPointer(memScope).rawValue
        val res = kni_GetCurrentActCtx(_lphActCtx)
        res
    }
}

@SymbolName("win32_kni_GetCurrentActCtx")
private external fun kni_GetCurrentActCtx(lphActCtx: NativePtr): Int

fun FindActCtxSectionStringA(dwFlags: DWORD, lpExtensionGuid: CValuesRef<GUID>?, ulSectionId: ULONG, lpStringToFind: String?, ReturnedData: PACTCTX_SECTION_KEYED_DATA?): WINBOOL {
    return memScoped {
        val _dwFlags = dwFlags
        val _lpExtensionGuid = lpExtensionGuid?.getPointer(memScope).rawValue
        val _ulSectionId = ulSectionId
        val _lpStringToFind = lpStringToFind?.cstr?.getPointer(memScope).rawValue
        val _ReturnedData = ReturnedData.rawValue
        val res = kni_FindActCtxSectionStringA(_dwFlags, _lpExtensionGuid, _ulSectionId, _lpStringToFind, _ReturnedData)
        res
    }
}

@SymbolName("win32_kni_FindActCtxSectionStringA")
private external fun kni_FindActCtxSectionStringA(dwFlags: Int, lpExtensionGuid: NativePtr, ulSectionId: Int, lpStringToFind: NativePtr, ReturnedData: NativePtr): Int

fun FindActCtxSectionStringW(dwFlags: DWORD, lpExtensionGuid: CValuesRef<GUID>?, ulSectionId: ULONG, lpStringToFind: String?, ReturnedData: PACTCTX_SECTION_KEYED_DATA?): WINBOOL {
    return memScoped {
        val _dwFlags = dwFlags
        val _lpExtensionGuid = lpExtensionGuid?.getPointer(memScope).rawValue
        val _ulSectionId = ulSectionId
        val _lpStringToFind = lpStringToFind?.wcstr?.getPointer(memScope).rawValue
        val _ReturnedData = ReturnedData.rawValue
        val res = kni_FindActCtxSectionStringW(_dwFlags, _lpExtensionGuid, _ulSectionId, _lpStringToFind, _ReturnedData)
        res
    }
}

@SymbolName("win32_kni_FindActCtxSectionStringW")
private external fun kni_FindActCtxSectionStringW(dwFlags: Int, lpExtensionGuid: NativePtr, ulSectionId: Int, lpStringToFind: NativePtr, ReturnedData: NativePtr): Int

fun FindActCtxSectionGuid(dwFlags: DWORD, lpExtensionGuid: CValuesRef<GUID>?, ulSectionId: ULONG, lpGuidToFind: CValuesRef<GUID>?, ReturnedData: PACTCTX_SECTION_KEYED_DATA?): WINBOOL {
    return memScoped {
        val _dwFlags = dwFlags
        val _lpExtensionGuid = lpExtensionGuid?.getPointer(memScope).rawValue
        val _ulSectionId = ulSectionId
        val _lpGuidToFind = lpGuidToFind?.getPointer(memScope).rawValue
        val _ReturnedData = ReturnedData.rawValue
        val res = kni_FindActCtxSectionGuid(_dwFlags, _lpExtensionGuid, _ulSectionId, _lpGuidToFind, _ReturnedData)
        res
    }
}

@SymbolName("win32_kni_FindActCtxSectionGuid")
private external fun kni_FindActCtxSectionGuid(dwFlags: Int, lpExtensionGuid: NativePtr, ulSectionId: Int, lpGuidToFind: NativePtr, ReturnedData: NativePtr): Int

fun QueryActCtxW(dwFlags: DWORD, hActCtx: HANDLE?, pvSubInstance: PVOID?, ulInfoClass: ULONG, pvBuffer: PVOID?, cbBuffer: SIZE_T, pcbWrittenOrRequired: CValuesRef<SIZE_TVar>?): WINBOOL {
    return memScoped {
        val _dwFlags = dwFlags
        val _hActCtx = hActCtx.rawValue
        val _pvSubInstance = pvSubInstance.rawValue
        val _ulInfoClass = ulInfoClass
        val _pvBuffer = pvBuffer.rawValue
        val _cbBuffer = cbBuffer
        val _pcbWrittenOrRequired = pcbWrittenOrRequired?.getPointer(memScope).rawValue
        val res = kni_QueryActCtxW(_dwFlags, _hActCtx, _pvSubInstance, _ulInfoClass, _pvBuffer, _cbBuffer, _pcbWrittenOrRequired)
        res
    }
}

@SymbolName("win32_kni_QueryActCtxW")
private external fun kni_QueryActCtxW(dwFlags: Int, hActCtx: NativePtr, pvSubInstance: NativePtr, ulInfoClass: Int, pvBuffer: NativePtr, cbBuffer: Long, pcbWrittenOrRequired: NativePtr): Int

fun WTSGetActiveConsoleSessionId(): DWORD {
    val res = kni_WTSGetActiveConsoleSessionId()
    return res
}

@SymbolName("win32_kni_WTSGetActiveConsoleSessionId")
private external fun kni_WTSGetActiveConsoleSessionId(): Int

fun GetNumaProcessorNode(Processor: UCHAR, NodeNumber: PUCHAR?): WINBOOL {
    val _Processor = Processor
    val _NodeNumber = NodeNumber.rawValue
    val res = kni_GetNumaProcessorNode(_Processor, _NodeNumber)
    return res
}

@SymbolName("win32_kni_GetNumaProcessorNode")
private external fun kni_GetNumaProcessorNode(Processor: Byte, NodeNumber: NativePtr): Int

fun GetNumaNodeProcessorMask(Node: UCHAR, ProcessorMask: PULONGLONG?): WINBOOL {
    val _Node = Node
    val _ProcessorMask = ProcessorMask.rawValue
    val res = kni_GetNumaNodeProcessorMask(_Node, _ProcessorMask)
    return res
}

@SymbolName("win32_kni_GetNumaNodeProcessorMask")
private external fun kni_GetNumaNodeProcessorMask(Node: Byte, ProcessorMask: NativePtr): Int

fun GetNumaAvailableMemoryNode(Node: UCHAR, AvailableBytes: PULONGLONG?): WINBOOL {
    val _Node = Node
    val _AvailableBytes = AvailableBytes.rawValue
    val res = kni_GetNumaAvailableMemoryNode(_Node, _AvailableBytes)
    return res
}

@SymbolName("win32_kni_GetNumaAvailableMemoryNode")
private external fun kni_GetNumaAvailableMemoryNode(Node: Byte, AvailableBytes: NativePtr): Int

fun CopyContext(Destination: PCONTEXT?, ContextFlags: DWORD, Source: PCONTEXT?): WINBOOL {
    val _Destination = Destination.rawValue
    val _ContextFlags = ContextFlags
    val _Source = Source.rawValue
    val res = kni_CopyContext(_Destination, _ContextFlags, _Source)
    return res
}

@SymbolName("win32_kni_CopyContext")
private external fun kni_CopyContext(Destination: NativePtr, ContextFlags: Int, Source: NativePtr): Int

fun InitializeContext(Buffer: PVOID?, ContextFlags: DWORD, Context: CValuesRef<PCONTEXTVar>?, ContextLength: PDWORD?): WINBOOL {
    return memScoped {
        val _Buffer = Buffer.rawValue
        val _ContextFlags = ContextFlags
        val _Context = Context?.getPointer(memScope).rawValue
        val _ContextLength = ContextLength.rawValue
        val res = kni_InitializeContext(_Buffer, _ContextFlags, _Context, _ContextLength)
        res
    }
}

@SymbolName("win32_kni_InitializeContext")
private external fun kni_InitializeContext(Buffer: NativePtr, ContextFlags: Int, Context: NativePtr, ContextLength: NativePtr): Int

fun GetEnabledXStateFeatures(): DWORD64 {
    val res = kni_GetEnabledXStateFeatures()
    return res
}

@SymbolName("win32_kni_GetEnabledXStateFeatures")
private external fun kni_GetEnabledXStateFeatures(): Long

fun GetXStateFeaturesMask(Context: PCONTEXT?, FeatureMask: PDWORD64?): WINBOOL {
    val _Context = Context.rawValue
    val _FeatureMask = FeatureMask.rawValue
    val res = kni_GetXStateFeaturesMask(_Context, _FeatureMask)
    return res
}

@SymbolName("win32_kni_GetXStateFeaturesMask")
private external fun kni_GetXStateFeaturesMask(Context: NativePtr, FeatureMask: NativePtr): Int

fun LocateXStateFeature(Context: PCONTEXT?, FeatureId: DWORD, Length: PDWORD?): PVOID? {
    val _Context = Context.rawValue
    val _FeatureId = FeatureId
    val _Length = Length.rawValue
    val res = kni_LocateXStateFeature(_Context, _FeatureId, _Length)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_LocateXStateFeature")
private external fun kni_LocateXStateFeature(Context: NativePtr, FeatureId: Int, Length: NativePtr): NativePtr

fun SetXStateFeaturesMask(Context: PCONTEXT?, FeatureMask: DWORD64): WINBOOL {
    val _Context = Context.rawValue
    val _FeatureMask = FeatureMask
    val res = kni_SetXStateFeaturesMask(_Context, _FeatureMask)
    return res
}

@SymbolName("win32_kni_SetXStateFeaturesMask")
private external fun kni_SetXStateFeaturesMask(Context: NativePtr, FeatureMask: Long): Int

fun AddFontResourceA(arg0: String?): Int {
    return memScoped {
        val _arg0 = arg0?.cstr?.getPointer(memScope).rawValue
        val res = kni_AddFontResourceA(_arg0)
        res
    }
}

@SymbolName("win32_kni_AddFontResourceA")
private external fun kni_AddFontResourceA(arg0: NativePtr): Int

fun AddFontResourceW(arg0: String?): Int {
    return memScoped {
        val _arg0 = arg0?.wcstr?.getPointer(memScope).rawValue
        val res = kni_AddFontResourceW(_arg0)
        res
    }
}

@SymbolName("win32_kni_AddFontResourceW")
private external fun kni_AddFontResourceW(arg0: NativePtr): Int

fun AnimatePalette(hPal: HPALETTE?, iStartIndex: UINT, cEntries: UINT, ppe: CValuesRef<PALETTEENTRY>?): WINBOOL {
    return memScoped {
        val _hPal = hPal.rawValue
        val _iStartIndex = iStartIndex
        val _cEntries = cEntries
        val _ppe = ppe?.getPointer(memScope).rawValue
        val res = kni_AnimatePalette(_hPal, _iStartIndex, _cEntries, _ppe)
        res
    }
}

@SymbolName("win32_kni_AnimatePalette")
private external fun kni_AnimatePalette(hPal: NativePtr, iStartIndex: Int, cEntries: Int, ppe: NativePtr): Int

fun Arc(hdc: HDC?, x1: Int, y1: Int, x2: Int, y2: Int, x3: Int, y3: Int, x4: Int, y4: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _x1 = x1
    val _y1 = y1
    val _x2 = x2
    val _y2 = y2
    val _x3 = x3
    val _y3 = y3
    val _x4 = x4
    val _y4 = y4
    val res = kni_Arc(_hdc, _x1, _y1, _x2, _y2, _x3, _y3, _x4, _y4)
    return res
}

@SymbolName("win32_kni_Arc")
private external fun kni_Arc(hdc: NativePtr, x1: Int, y1: Int, x2: Int, y2: Int, x3: Int, y3: Int, x4: Int, y4: Int): Int

fun BitBlt(hdc: HDC?, x: Int, y: Int, cx: Int, cy: Int, hdcSrc: HDC?, x1: Int, y1: Int, rop: DWORD): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _cx = cx
    val _cy = cy
    val _hdcSrc = hdcSrc.rawValue
    val _x1 = x1
    val _y1 = y1
    val _rop = rop
    val res = kni_BitBlt(_hdc, _x, _y, _cx, _cy, _hdcSrc, _x1, _y1, _rop)
    return res
}

@SymbolName("win32_kni_BitBlt")
private external fun kni_BitBlt(hdc: NativePtr, x: Int, y: Int, cx: Int, cy: Int, hdcSrc: NativePtr, x1: Int, y1: Int, rop: Int): Int

fun CancelDC(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_CancelDC(_hdc)
    return res
}

@SymbolName("win32_kni_CancelDC")
private external fun kni_CancelDC(hdc: NativePtr): Int

fun Chord(hdc: HDC?, x1: Int, y1: Int, x2: Int, y2: Int, x3: Int, y3: Int, x4: Int, y4: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _x1 = x1
    val _y1 = y1
    val _x2 = x2
    val _y2 = y2
    val _x3 = x3
    val _y3 = y3
    val _x4 = x4
    val _y4 = y4
    val res = kni_Chord(_hdc, _x1, _y1, _x2, _y2, _x3, _y3, _x4, _y4)
    return res
}

@SymbolName("win32_kni_Chord")
private external fun kni_Chord(hdc: NativePtr, x1: Int, y1: Int, x2: Int, y2: Int, x3: Int, y3: Int, x4: Int, y4: Int): Int

fun ChoosePixelFormat(hdc: HDC?, ppfd: CValuesRef<PIXELFORMATDESCRIPTOR>?): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _ppfd = ppfd?.getPointer(memScope).rawValue
        val res = kni_ChoosePixelFormat(_hdc, _ppfd)
        res
    }
}

@SymbolName("win32_kni_ChoosePixelFormat")
private external fun kni_ChoosePixelFormat(hdc: NativePtr, ppfd: NativePtr): Int

fun CloseMetaFile(hdc: HDC?): HMETAFILE? {
    val _hdc = hdc.rawValue
    val res = kni_CloseMetaFile(_hdc)
    return interpretCPointer<HMETAFILE__>(res)
}

@SymbolName("win32_kni_CloseMetaFile")
private external fun kni_CloseMetaFile(hdc: NativePtr): NativePtr

fun CombineRgn(hrgnDst: HRGN?, hrgnSrc1: HRGN?, hrgnSrc2: HRGN?, iMode: Int): Int {
    val _hrgnDst = hrgnDst.rawValue
    val _hrgnSrc1 = hrgnSrc1.rawValue
    val _hrgnSrc2 = hrgnSrc2.rawValue
    val _iMode = iMode
    val res = kni_CombineRgn(_hrgnDst, _hrgnSrc1, _hrgnSrc2, _iMode)
    return res
}

@SymbolName("win32_kni_CombineRgn")
private external fun kni_CombineRgn(hrgnDst: NativePtr, hrgnSrc1: NativePtr, hrgnSrc2: NativePtr, iMode: Int): Int

fun CopyMetaFileA(arg0: HMETAFILE?, arg1: String?): HMETAFILE? {
    return memScoped {
        val _arg0 = arg0.rawValue
        val _arg1 = arg1?.cstr?.getPointer(memScope).rawValue
        val res = kni_CopyMetaFileA(_arg0, _arg1)
        interpretCPointer<HMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_CopyMetaFileA")
private external fun kni_CopyMetaFileA(arg0: NativePtr, arg1: NativePtr): NativePtr

fun CopyMetaFileW(arg0: HMETAFILE?, arg1: String?): HMETAFILE? {
    return memScoped {
        val _arg0 = arg0.rawValue
        val _arg1 = arg1?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CopyMetaFileW(_arg0, _arg1)
        interpretCPointer<HMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_CopyMetaFileW")
private external fun kni_CopyMetaFileW(arg0: NativePtr, arg1: NativePtr): NativePtr

fun CreateBitmap(nWidth: Int, nHeight: Int, nPlanes: UINT, nBitCount: UINT, lpBits: COpaquePointer?): HBITMAP? {
    val _nWidth = nWidth
    val _nHeight = nHeight
    val _nPlanes = nPlanes
    val _nBitCount = nBitCount
    val _lpBits = lpBits.rawValue
    val res = kni_CreateBitmap(_nWidth, _nHeight, _nPlanes, _nBitCount, _lpBits)
    return interpretCPointer<HBITMAP__>(res)
}

@SymbolName("win32_kni_CreateBitmap")
private external fun kni_CreateBitmap(nWidth: Int, nHeight: Int, nPlanes: Int, nBitCount: Int, lpBits: NativePtr): NativePtr

fun CreateBitmapIndirect(pbm: CValuesRef<BITMAP>?): HBITMAP? {
    return memScoped {
        val _pbm = pbm?.getPointer(memScope).rawValue
        val res = kni_CreateBitmapIndirect(_pbm)
        interpretCPointer<HBITMAP__>(res)
    }
}

@SymbolName("win32_kni_CreateBitmapIndirect")
private external fun kni_CreateBitmapIndirect(pbm: NativePtr): NativePtr

fun CreateBrushIndirect(plbrush: CValuesRef<LOGBRUSH>?): HBRUSH? {
    return memScoped {
        val _plbrush = plbrush?.getPointer(memScope).rawValue
        val res = kni_CreateBrushIndirect(_plbrush)
        interpretCPointer<HBRUSH__>(res)
    }
}

@SymbolName("win32_kni_CreateBrushIndirect")
private external fun kni_CreateBrushIndirect(plbrush: NativePtr): NativePtr

fun CreateCompatibleBitmap(hdc: HDC?, cx: Int, cy: Int): HBITMAP? {
    val _hdc = hdc.rawValue
    val _cx = cx
    val _cy = cy
    val res = kni_CreateCompatibleBitmap(_hdc, _cx, _cy)
    return interpretCPointer<HBITMAP__>(res)
}

@SymbolName("win32_kni_CreateCompatibleBitmap")
private external fun kni_CreateCompatibleBitmap(hdc: NativePtr, cx: Int, cy: Int): NativePtr

fun CreateDiscardableBitmap(hdc: HDC?, cx: Int, cy: Int): HBITMAP? {
    val _hdc = hdc.rawValue
    val _cx = cx
    val _cy = cy
    val res = kni_CreateDiscardableBitmap(_hdc, _cx, _cy)
    return interpretCPointer<HBITMAP__>(res)
}

@SymbolName("win32_kni_CreateDiscardableBitmap")
private external fun kni_CreateDiscardableBitmap(hdc: NativePtr, cx: Int, cy: Int): NativePtr

fun CreateCompatibleDC(hdc: HDC?): HDC? {
    val _hdc = hdc.rawValue
    val res = kni_CreateCompatibleDC(_hdc)
    return interpretCPointer<HDC__>(res)
}

@SymbolName("win32_kni_CreateCompatibleDC")
private external fun kni_CreateCompatibleDC(hdc: NativePtr): NativePtr

fun CreateDCA(pwszDriver: String?, pwszDevice: String?, pszPort: String?, pdm: CValuesRef<DEVMODEA>?): HDC? {
    return memScoped {
        val _pwszDriver = pwszDriver?.cstr?.getPointer(memScope).rawValue
        val _pwszDevice = pwszDevice?.cstr?.getPointer(memScope).rawValue
        val _pszPort = pszPort?.cstr?.getPointer(memScope).rawValue
        val _pdm = pdm?.getPointer(memScope).rawValue
        val res = kni_CreateDCA(_pwszDriver, _pwszDevice, _pszPort, _pdm)
        interpretCPointer<HDC__>(res)
    }
}

@SymbolName("win32_kni_CreateDCA")
private external fun kni_CreateDCA(pwszDriver: NativePtr, pwszDevice: NativePtr, pszPort: NativePtr, pdm: NativePtr): NativePtr

fun CreateDCW(pwszDriver: String?, pwszDevice: String?, pszPort: String?, pdm: CValuesRef<DEVMODEW>?): HDC? {
    return memScoped {
        val _pwszDriver = pwszDriver?.wcstr?.getPointer(memScope).rawValue
        val _pwszDevice = pwszDevice?.wcstr?.getPointer(memScope).rawValue
        val _pszPort = pszPort?.wcstr?.getPointer(memScope).rawValue
        val _pdm = pdm?.getPointer(memScope).rawValue
        val res = kni_CreateDCW(_pwszDriver, _pwszDevice, _pszPort, _pdm)
        interpretCPointer<HDC__>(res)
    }
}

@SymbolName("win32_kni_CreateDCW")
private external fun kni_CreateDCW(pwszDriver: NativePtr, pwszDevice: NativePtr, pszPort: NativePtr, pdm: NativePtr): NativePtr

fun CreateDIBitmap(hdc: HDC?, pbmih: CValuesRef<BITMAPINFOHEADER>?, flInit: DWORD, pjBits: COpaquePointer?, pbmi: CValuesRef<BITMAPINFO>?, iUsage: UINT): HBITMAP? {
    return memScoped {
        val _hdc = hdc.rawValue
        val _pbmih = pbmih?.getPointer(memScope).rawValue
        val _flInit = flInit
        val _pjBits = pjBits.rawValue
        val _pbmi = pbmi?.getPointer(memScope).rawValue
        val _iUsage = iUsage
        val res = kni_CreateDIBitmap(_hdc, _pbmih, _flInit, _pjBits, _pbmi, _iUsage)
        interpretCPointer<HBITMAP__>(res)
    }
}

@SymbolName("win32_kni_CreateDIBitmap")
private external fun kni_CreateDIBitmap(hdc: NativePtr, pbmih: NativePtr, flInit: Int, pjBits: NativePtr, pbmi: NativePtr, iUsage: Int): NativePtr

fun CreateDIBPatternBrush(h: HGLOBAL?, iUsage: UINT): HBRUSH? {
    val _h = h.rawValue
    val _iUsage = iUsage
    val res = kni_CreateDIBPatternBrush(_h, _iUsage)
    return interpretCPointer<HBRUSH__>(res)
}

@SymbolName("win32_kni_CreateDIBPatternBrush")
private external fun kni_CreateDIBPatternBrush(h: NativePtr, iUsage: Int): NativePtr

fun CreateDIBPatternBrushPt(lpPackedDIB: COpaquePointer?, iUsage: UINT): HBRUSH? {
    val _lpPackedDIB = lpPackedDIB.rawValue
    val _iUsage = iUsage
    val res = kni_CreateDIBPatternBrushPt(_lpPackedDIB, _iUsage)
    return interpretCPointer<HBRUSH__>(res)
}

@SymbolName("win32_kni_CreateDIBPatternBrushPt")
private external fun kni_CreateDIBPatternBrushPt(lpPackedDIB: NativePtr, iUsage: Int): NativePtr

fun CreateEllipticRgn(x1: Int, y1: Int, x2: Int, y2: Int): HRGN? {
    val _x1 = x1
    val _y1 = y1
    val _x2 = x2
    val _y2 = y2
    val res = kni_CreateEllipticRgn(_x1, _y1, _x2, _y2)
    return interpretCPointer<HRGN__>(res)
}

@SymbolName("win32_kni_CreateEllipticRgn")
private external fun kni_CreateEllipticRgn(x1: Int, y1: Int, x2: Int, y2: Int): NativePtr

fun CreateEllipticRgnIndirect(lprect: CValuesRef<RECT>?): HRGN? {
    return memScoped {
        val _lprect = lprect?.getPointer(memScope).rawValue
        val res = kni_CreateEllipticRgnIndirect(_lprect)
        interpretCPointer<HRGN__>(res)
    }
}

@SymbolName("win32_kni_CreateEllipticRgnIndirect")
private external fun kni_CreateEllipticRgnIndirect(lprect: NativePtr): NativePtr

fun CreateFontIndirectA(lplf: CValuesRef<LOGFONTA>?): HFONT? {
    return memScoped {
        val _lplf = lplf?.getPointer(memScope).rawValue
        val res = kni_CreateFontIndirectA(_lplf)
        interpretCPointer<HFONT__>(res)
    }
}

@SymbolName("win32_kni_CreateFontIndirectA")
private external fun kni_CreateFontIndirectA(lplf: NativePtr): NativePtr

fun CreateFontIndirectW(lplf: CValuesRef<LOGFONTW>?): HFONT? {
    return memScoped {
        val _lplf = lplf?.getPointer(memScope).rawValue
        val res = kni_CreateFontIndirectW(_lplf)
        interpretCPointer<HFONT__>(res)
    }
}

@SymbolName("win32_kni_CreateFontIndirectW")
private external fun kni_CreateFontIndirectW(lplf: NativePtr): NativePtr

fun CreateFontA(cHeight: Int, cWidth: Int, cEscapement: Int, cOrientation: Int, cWeight: Int, bItalic: DWORD, bUnderline: DWORD, bStrikeOut: DWORD, iCharSet: DWORD, iOutPrecision: DWORD, iClipPrecision: DWORD, iQuality: DWORD, iPitchAndFamily: DWORD, pszFaceName: String?): HFONT? {
    return memScoped {
        val _cHeight = cHeight
        val _cWidth = cWidth
        val _cEscapement = cEscapement
        val _cOrientation = cOrientation
        val _cWeight = cWeight
        val _bItalic = bItalic
        val _bUnderline = bUnderline
        val _bStrikeOut = bStrikeOut
        val _iCharSet = iCharSet
        val _iOutPrecision = iOutPrecision
        val _iClipPrecision = iClipPrecision
        val _iQuality = iQuality
        val _iPitchAndFamily = iPitchAndFamily
        val _pszFaceName = pszFaceName?.cstr?.getPointer(memScope).rawValue
        val res = kni_CreateFontA(_cHeight, _cWidth, _cEscapement, _cOrientation, _cWeight, _bItalic, _bUnderline, _bStrikeOut, _iCharSet, _iOutPrecision, _iClipPrecision, _iQuality, _iPitchAndFamily, _pszFaceName)
        interpretCPointer<HFONT__>(res)
    }
}

@SymbolName("win32_kni_CreateFontA")
private external fun kni_CreateFontA(cHeight: Int, cWidth: Int, cEscapement: Int, cOrientation: Int, cWeight: Int, bItalic: Int, bUnderline: Int, bStrikeOut: Int, iCharSet: Int, iOutPrecision: Int, iClipPrecision: Int, iQuality: Int, iPitchAndFamily: Int, pszFaceName: NativePtr): NativePtr

fun CreateFontW(cHeight: Int, cWidth: Int, cEscapement: Int, cOrientation: Int, cWeight: Int, bItalic: DWORD, bUnderline: DWORD, bStrikeOut: DWORD, iCharSet: DWORD, iOutPrecision: DWORD, iClipPrecision: DWORD, iQuality: DWORD, iPitchAndFamily: DWORD, pszFaceName: String?): HFONT? {
    return memScoped {
        val _cHeight = cHeight
        val _cWidth = cWidth
        val _cEscapement = cEscapement
        val _cOrientation = cOrientation
        val _cWeight = cWeight
        val _bItalic = bItalic
        val _bUnderline = bUnderline
        val _bStrikeOut = bStrikeOut
        val _iCharSet = iCharSet
        val _iOutPrecision = iOutPrecision
        val _iClipPrecision = iClipPrecision
        val _iQuality = iQuality
        val _iPitchAndFamily = iPitchAndFamily
        val _pszFaceName = pszFaceName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CreateFontW(_cHeight, _cWidth, _cEscapement, _cOrientation, _cWeight, _bItalic, _bUnderline, _bStrikeOut, _iCharSet, _iOutPrecision, _iClipPrecision, _iQuality, _iPitchAndFamily, _pszFaceName)
        interpretCPointer<HFONT__>(res)
    }
}

@SymbolName("win32_kni_CreateFontW")
private external fun kni_CreateFontW(cHeight: Int, cWidth: Int, cEscapement: Int, cOrientation: Int, cWeight: Int, bItalic: Int, bUnderline: Int, bStrikeOut: Int, iCharSet: Int, iOutPrecision: Int, iClipPrecision: Int, iQuality: Int, iPitchAndFamily: Int, pszFaceName: NativePtr): NativePtr

fun CreateHatchBrush(iHatch: Int, color: COLORREF): HBRUSH? {
    val _iHatch = iHatch
    val _color = color
    val res = kni_CreateHatchBrush(_iHatch, _color)
    return interpretCPointer<HBRUSH__>(res)
}

@SymbolName("win32_kni_CreateHatchBrush")
private external fun kni_CreateHatchBrush(iHatch: Int, color: Int): NativePtr

fun CreateICA(pszDriver: String?, pszDevice: String?, pszPort: String?, pdm: CValuesRef<DEVMODEA>?): HDC? {
    return memScoped {
        val _pszDriver = pszDriver?.cstr?.getPointer(memScope).rawValue
        val _pszDevice = pszDevice?.cstr?.getPointer(memScope).rawValue
        val _pszPort = pszPort?.cstr?.getPointer(memScope).rawValue
        val _pdm = pdm?.getPointer(memScope).rawValue
        val res = kni_CreateICA(_pszDriver, _pszDevice, _pszPort, _pdm)
        interpretCPointer<HDC__>(res)
    }
}

@SymbolName("win32_kni_CreateICA")
private external fun kni_CreateICA(pszDriver: NativePtr, pszDevice: NativePtr, pszPort: NativePtr, pdm: NativePtr): NativePtr

fun CreateICW(pszDriver: String?, pszDevice: String?, pszPort: String?, pdm: CValuesRef<DEVMODEW>?): HDC? {
    return memScoped {
        val _pszDriver = pszDriver?.wcstr?.getPointer(memScope).rawValue
        val _pszDevice = pszDevice?.wcstr?.getPointer(memScope).rawValue
        val _pszPort = pszPort?.wcstr?.getPointer(memScope).rawValue
        val _pdm = pdm?.getPointer(memScope).rawValue
        val res = kni_CreateICW(_pszDriver, _pszDevice, _pszPort, _pdm)
        interpretCPointer<HDC__>(res)
    }
}

@SymbolName("win32_kni_CreateICW")
private external fun kni_CreateICW(pszDriver: NativePtr, pszDevice: NativePtr, pszPort: NativePtr, pdm: NativePtr): NativePtr

fun CreateMetaFileA(pszFile: String?): HDC? {
    return memScoped {
        val _pszFile = pszFile?.cstr?.getPointer(memScope).rawValue
        val res = kni_CreateMetaFileA(_pszFile)
        interpretCPointer<HDC__>(res)
    }
}

@SymbolName("win32_kni_CreateMetaFileA")
private external fun kni_CreateMetaFileA(pszFile: NativePtr): NativePtr

fun CreateMetaFileW(pszFile: String?): HDC? {
    return memScoped {
        val _pszFile = pszFile?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CreateMetaFileW(_pszFile)
        interpretCPointer<HDC__>(res)
    }
}

@SymbolName("win32_kni_CreateMetaFileW")
private external fun kni_CreateMetaFileW(pszFile: NativePtr): NativePtr

fun CreatePalette(plpal: CValuesRef<LOGPALETTE>?): HPALETTE? {
    return memScoped {
        val _plpal = plpal?.getPointer(memScope).rawValue
        val res = kni_CreatePalette(_plpal)
        interpretCPointer<HPALETTE__>(res)
    }
}

@SymbolName("win32_kni_CreatePalette")
private external fun kni_CreatePalette(plpal: NativePtr): NativePtr

fun CreatePen(iStyle: Int, cWidth: Int, color: COLORREF): HPEN? {
    val _iStyle = iStyle
    val _cWidth = cWidth
    val _color = color
    val res = kni_CreatePen(_iStyle, _cWidth, _color)
    return interpretCPointer<HPEN__>(res)
}

@SymbolName("win32_kni_CreatePen")
private external fun kni_CreatePen(iStyle: Int, cWidth: Int, color: Int): NativePtr

fun CreatePenIndirect(plpen: CValuesRef<LOGPEN>?): HPEN? {
    return memScoped {
        val _plpen = plpen?.getPointer(memScope).rawValue
        val res = kni_CreatePenIndirect(_plpen)
        interpretCPointer<HPEN__>(res)
    }
}

@SymbolName("win32_kni_CreatePenIndirect")
private external fun kni_CreatePenIndirect(plpen: NativePtr): NativePtr

fun CreatePolyPolygonRgn(pptl: CValuesRef<POINT>?, pc: CValuesRef<INTVar>?, cPoly: Int, iMode: Int): HRGN? {
    return memScoped {
        val _pptl = pptl?.getPointer(memScope).rawValue
        val _pc = pc?.getPointer(memScope).rawValue
        val _cPoly = cPoly
        val _iMode = iMode
        val res = kni_CreatePolyPolygonRgn(_pptl, _pc, _cPoly, _iMode)
        interpretCPointer<HRGN__>(res)
    }
}

@SymbolName("win32_kni_CreatePolyPolygonRgn")
private external fun kni_CreatePolyPolygonRgn(pptl: NativePtr, pc: NativePtr, cPoly: Int, iMode: Int): NativePtr

fun CreatePatternBrush(hbm: HBITMAP?): HBRUSH? {
    val _hbm = hbm.rawValue
    val res = kni_CreatePatternBrush(_hbm)
    return interpretCPointer<HBRUSH__>(res)
}

@SymbolName("win32_kni_CreatePatternBrush")
private external fun kni_CreatePatternBrush(hbm: NativePtr): NativePtr

fun CreateRectRgn(x1: Int, y1: Int, x2: Int, y2: Int): HRGN? {
    val _x1 = x1
    val _y1 = y1
    val _x2 = x2
    val _y2 = y2
    val res = kni_CreateRectRgn(_x1, _y1, _x2, _y2)
    return interpretCPointer<HRGN__>(res)
}

@SymbolName("win32_kni_CreateRectRgn")
private external fun kni_CreateRectRgn(x1: Int, y1: Int, x2: Int, y2: Int): NativePtr

fun CreateRectRgnIndirect(lprect: CValuesRef<RECT>?): HRGN? {
    return memScoped {
        val _lprect = lprect?.getPointer(memScope).rawValue
        val res = kni_CreateRectRgnIndirect(_lprect)
        interpretCPointer<HRGN__>(res)
    }
}

@SymbolName("win32_kni_CreateRectRgnIndirect")
private external fun kni_CreateRectRgnIndirect(lprect: NativePtr): NativePtr

fun CreateRoundRectRgn(x1: Int, y1: Int, x2: Int, y2: Int, w: Int, h: Int): HRGN? {
    val _x1 = x1
    val _y1 = y1
    val _x2 = x2
    val _y2 = y2
    val _w = w
    val _h = h
    val res = kni_CreateRoundRectRgn(_x1, _y1, _x2, _y2, _w, _h)
    return interpretCPointer<HRGN__>(res)
}

@SymbolName("win32_kni_CreateRoundRectRgn")
private external fun kni_CreateRoundRectRgn(x1: Int, y1: Int, x2: Int, y2: Int, w: Int, h: Int): NativePtr

fun CreateScalableFontResourceA(fdwHidden: DWORD, lpszFont: String?, lpszFile: String?, lpszPath: String?): WINBOOL {
    return memScoped {
        val _fdwHidden = fdwHidden
        val _lpszFont = lpszFont?.cstr?.getPointer(memScope).rawValue
        val _lpszFile = lpszFile?.cstr?.getPointer(memScope).rawValue
        val _lpszPath = lpszPath?.cstr?.getPointer(memScope).rawValue
        val res = kni_CreateScalableFontResourceA(_fdwHidden, _lpszFont, _lpszFile, _lpszPath)
        res
    }
}

@SymbolName("win32_kni_CreateScalableFontResourceA")
private external fun kni_CreateScalableFontResourceA(fdwHidden: Int, lpszFont: NativePtr, lpszFile: NativePtr, lpszPath: NativePtr): Int

fun CreateScalableFontResourceW(fdwHidden: DWORD, lpszFont: String?, lpszFile: String?, lpszPath: String?): WINBOOL {
    return memScoped {
        val _fdwHidden = fdwHidden
        val _lpszFont = lpszFont?.wcstr?.getPointer(memScope).rawValue
        val _lpszFile = lpszFile?.wcstr?.getPointer(memScope).rawValue
        val _lpszPath = lpszPath?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CreateScalableFontResourceW(_fdwHidden, _lpszFont, _lpszFile, _lpszPath)
        res
    }
}

@SymbolName("win32_kni_CreateScalableFontResourceW")
private external fun kni_CreateScalableFontResourceW(fdwHidden: Int, lpszFont: NativePtr, lpszFile: NativePtr, lpszPath: NativePtr): Int

fun CreateSolidBrush(color: COLORREF): HBRUSH? {
    val _color = color
    val res = kni_CreateSolidBrush(_color)
    return interpretCPointer<HBRUSH__>(res)
}

@SymbolName("win32_kni_CreateSolidBrush")
private external fun kni_CreateSolidBrush(color: Int): NativePtr

fun DeleteDC(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_DeleteDC(_hdc)
    return res
}

@SymbolName("win32_kni_DeleteDC")
private external fun kni_DeleteDC(hdc: NativePtr): Int

fun DeleteMetaFile(hmf: HMETAFILE?): WINBOOL {
    val _hmf = hmf.rawValue
    val res = kni_DeleteMetaFile(_hmf)
    return res
}

@SymbolName("win32_kni_DeleteMetaFile")
private external fun kni_DeleteMetaFile(hmf: NativePtr): Int

fun DeleteObject(ho: HGDIOBJ?): WINBOOL {
    val _ho = ho.rawValue
    val res = kni_DeleteObject(_ho)
    return res
}

@SymbolName("win32_kni_DeleteObject")
private external fun kni_DeleteObject(ho: NativePtr): Int

fun DescribePixelFormat(hdc: HDC?, iPixelFormat: Int, nBytes: UINT, ppfd: LPPIXELFORMATDESCRIPTOR?): Int {
    val _hdc = hdc.rawValue
    val _iPixelFormat = iPixelFormat
    val _nBytes = nBytes
    val _ppfd = ppfd.rawValue
    val res = kni_DescribePixelFormat(_hdc, _iPixelFormat, _nBytes, _ppfd)
    return res
}

@SymbolName("win32_kni_DescribePixelFormat")
private external fun kni_DescribePixelFormat(hdc: NativePtr, iPixelFormat: Int, nBytes: Int, ppfd: NativePtr): Int

fun DeviceCapabilitiesA(pDevice: String?, pPort: String?, fwCapability: WORD, pOutput: LPSTR?, pDevMode: CValuesRef<DEVMODEA>?): Int {
    return memScoped {
        val _pDevice = pDevice?.cstr?.getPointer(memScope).rawValue
        val _pPort = pPort?.cstr?.getPointer(memScope).rawValue
        val _fwCapability = fwCapability
        val _pOutput = pOutput.rawValue
        val _pDevMode = pDevMode?.getPointer(memScope).rawValue
        val res = kni_DeviceCapabilitiesA(_pDevice, _pPort, _fwCapability, _pOutput, _pDevMode)
        res
    }
}

@SymbolName("win32_kni_DeviceCapabilitiesA")
private external fun kni_DeviceCapabilitiesA(pDevice: NativePtr, pPort: NativePtr, fwCapability: Short, pOutput: NativePtr, pDevMode: NativePtr): Int

fun DeviceCapabilitiesW(pDevice: String?, pPort: String?, fwCapability: WORD, pOutput: LPWSTR?, pDevMode: CValuesRef<DEVMODEW>?): Int {
    return memScoped {
        val _pDevice = pDevice?.wcstr?.getPointer(memScope).rawValue
        val _pPort = pPort?.wcstr?.getPointer(memScope).rawValue
        val _fwCapability = fwCapability
        val _pOutput = pOutput.rawValue
        val _pDevMode = pDevMode?.getPointer(memScope).rawValue
        val res = kni_DeviceCapabilitiesW(_pDevice, _pPort, _fwCapability, _pOutput, _pDevMode)
        res
    }
}

@SymbolName("win32_kni_DeviceCapabilitiesW")
private external fun kni_DeviceCapabilitiesW(pDevice: NativePtr, pPort: NativePtr, fwCapability: Short, pOutput: NativePtr, pDevMode: NativePtr): Int

fun DrawEscape(hdc: HDC?, iEscape: Int, cjIn: Int, lpIn: String?): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _iEscape = iEscape
        val _cjIn = cjIn
        val _lpIn = lpIn?.cstr?.getPointer(memScope).rawValue
        val res = kni_DrawEscape(_hdc, _iEscape, _cjIn, _lpIn)
        res
    }
}

@SymbolName("win32_kni_DrawEscape")
private external fun kni_DrawEscape(hdc: NativePtr, iEscape: Int, cjIn: Int, lpIn: NativePtr): Int

fun Ellipse(hdc: HDC?, left: Int, top: Int, right: Int, bottom: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _left = left
    val _top = top
    val _right = right
    val _bottom = bottom
    val res = kni_Ellipse(_hdc, _left, _top, _right, _bottom)
    return res
}

@SymbolName("win32_kni_Ellipse")
private external fun kni_Ellipse(hdc: NativePtr, left: Int, top: Int, right: Int, bottom: Int): Int

fun EnumFontFamiliesExA(hdc: HDC?, lpLogfont: LPLOGFONTA?, lpProc: FONTENUMPROCA?, lParam: LPARAM, dwFlags: DWORD): Int {
    val _hdc = hdc.rawValue
    val _lpLogfont = lpLogfont.rawValue
    val _lpProc = lpProc.rawValue
    val _lParam = lParam
    val _dwFlags = dwFlags
    val res = kni_EnumFontFamiliesExA(_hdc, _lpLogfont, _lpProc, _lParam, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumFontFamiliesExA")
private external fun kni_EnumFontFamiliesExA(hdc: NativePtr, lpLogfont: NativePtr, lpProc: NativePtr, lParam: Long, dwFlags: Int): Int

fun EnumFontFamiliesExW(hdc: HDC?, lpLogfont: LPLOGFONTW?, lpProc: FONTENUMPROCW?, lParam: LPARAM, dwFlags: DWORD): Int {
    val _hdc = hdc.rawValue
    val _lpLogfont = lpLogfont.rawValue
    val _lpProc = lpProc.rawValue
    val _lParam = lParam
    val _dwFlags = dwFlags
    val res = kni_EnumFontFamiliesExW(_hdc, _lpLogfont, _lpProc, _lParam, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumFontFamiliesExW")
private external fun kni_EnumFontFamiliesExW(hdc: NativePtr, lpLogfont: NativePtr, lpProc: NativePtr, lParam: Long, dwFlags: Int): Int

fun EnumFontFamiliesA(hdc: HDC?, lpLogfont: String?, lpProc: FONTENUMPROCA?, lParam: LPARAM): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpLogfont = lpLogfont?.cstr?.getPointer(memScope).rawValue
        val _lpProc = lpProc.rawValue
        val _lParam = lParam
        val res = kni_EnumFontFamiliesA(_hdc, _lpLogfont, _lpProc, _lParam)
        res
    }
}

@SymbolName("win32_kni_EnumFontFamiliesA")
private external fun kni_EnumFontFamiliesA(hdc: NativePtr, lpLogfont: NativePtr, lpProc: NativePtr, lParam: Long): Int

fun EnumFontFamiliesW(hdc: HDC?, lpLogfont: String?, lpProc: FONTENUMPROCW?, lParam: LPARAM): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpLogfont = lpLogfont?.wcstr?.getPointer(memScope).rawValue
        val _lpProc = lpProc.rawValue
        val _lParam = lParam
        val res = kni_EnumFontFamiliesW(_hdc, _lpLogfont, _lpProc, _lParam)
        res
    }
}

@SymbolName("win32_kni_EnumFontFamiliesW")
private external fun kni_EnumFontFamiliesW(hdc: NativePtr, lpLogfont: NativePtr, lpProc: NativePtr, lParam: Long): Int

fun EnumFontsA(hdc: HDC?, lpLogfont: String?, lpProc: FONTENUMPROCA?, lParam: LPARAM): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpLogfont = lpLogfont?.cstr?.getPointer(memScope).rawValue
        val _lpProc = lpProc.rawValue
        val _lParam = lParam
        val res = kni_EnumFontsA(_hdc, _lpLogfont, _lpProc, _lParam)
        res
    }
}

@SymbolName("win32_kni_EnumFontsA")
private external fun kni_EnumFontsA(hdc: NativePtr, lpLogfont: NativePtr, lpProc: NativePtr, lParam: Long): Int

fun EnumFontsW(hdc: HDC?, lpLogfont: String?, lpProc: FONTENUMPROCW?, lParam: LPARAM): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpLogfont = lpLogfont?.wcstr?.getPointer(memScope).rawValue
        val _lpProc = lpProc.rawValue
        val _lParam = lParam
        val res = kni_EnumFontsW(_hdc, _lpLogfont, _lpProc, _lParam)
        res
    }
}

@SymbolName("win32_kni_EnumFontsW")
private external fun kni_EnumFontsW(hdc: NativePtr, lpLogfont: NativePtr, lpProc: NativePtr, lParam: Long): Int

fun EnumObjects(hdc: HDC?, nType: Int, lpFunc: GOBJENUMPROC?, lParam: LPARAM): Int {
    val _hdc = hdc.rawValue
    val _nType = nType
    val _lpFunc = lpFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumObjects(_hdc, _nType, _lpFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumObjects")
private external fun kni_EnumObjects(hdc: NativePtr, nType: Int, lpFunc: NativePtr, lParam: Long): Int

fun EqualRgn(hrgn1: HRGN?, hrgn2: HRGN?): WINBOOL {
    val _hrgn1 = hrgn1.rawValue
    val _hrgn2 = hrgn2.rawValue
    val res = kni_EqualRgn(_hrgn1, _hrgn2)
    return res
}

@SymbolName("win32_kni_EqualRgn")
private external fun kni_EqualRgn(hrgn1: NativePtr, hrgn2: NativePtr): Int

fun Escape(hdc: HDC?, iEscape: Int, cjIn: Int, pvIn: String?, pvOut: LPVOID?): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _iEscape = iEscape
        val _cjIn = cjIn
        val _pvIn = pvIn?.cstr?.getPointer(memScope).rawValue
        val _pvOut = pvOut.rawValue
        val res = kni_Escape(_hdc, _iEscape, _cjIn, _pvIn, _pvOut)
        res
    }
}

@SymbolName("win32_kni_Escape")
private external fun kni_Escape(hdc: NativePtr, iEscape: Int, cjIn: Int, pvIn: NativePtr, pvOut: NativePtr): Int

fun ExtEscape(hdc: HDC?, iEscape: Int, cjInput: Int, lpInData: String?, cjOutput: Int, lpOutData: LPSTR?): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _iEscape = iEscape
        val _cjInput = cjInput
        val _lpInData = lpInData?.cstr?.getPointer(memScope).rawValue
        val _cjOutput = cjOutput
        val _lpOutData = lpOutData.rawValue
        val res = kni_ExtEscape(_hdc, _iEscape, _cjInput, _lpInData, _cjOutput, _lpOutData)
        res
    }
}

@SymbolName("win32_kni_ExtEscape")
private external fun kni_ExtEscape(hdc: NativePtr, iEscape: Int, cjInput: Int, lpInData: NativePtr, cjOutput: Int, lpOutData: NativePtr): Int

fun ExcludeClipRect(hdc: HDC?, left: Int, top: Int, right: Int, bottom: Int): Int {
    val _hdc = hdc.rawValue
    val _left = left
    val _top = top
    val _right = right
    val _bottom = bottom
    val res = kni_ExcludeClipRect(_hdc, _left, _top, _right, _bottom)
    return res
}

@SymbolName("win32_kni_ExcludeClipRect")
private external fun kni_ExcludeClipRect(hdc: NativePtr, left: Int, top: Int, right: Int, bottom: Int): Int

fun ExtCreateRegion(lpx: CValuesRef<XFORM>?, nCount: DWORD, lpData: CValuesRef<RGNDATA>?): HRGN? {
    return memScoped {
        val _lpx = lpx?.getPointer(memScope).rawValue
        val _nCount = nCount
        val _lpData = lpData?.getPointer(memScope).rawValue
        val res = kni_ExtCreateRegion(_lpx, _nCount, _lpData)
        interpretCPointer<HRGN__>(res)
    }
}

@SymbolName("win32_kni_ExtCreateRegion")
private external fun kni_ExtCreateRegion(lpx: NativePtr, nCount: Int, lpData: NativePtr): NativePtr

fun ExtFloodFill(hdc: HDC?, x: Int, y: Int, color: COLORREF, type: UINT): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _color = color
    val _type = type
    val res = kni_ExtFloodFill(_hdc, _x, _y, _color, _type)
    return res
}

@SymbolName("win32_kni_ExtFloodFill")
private external fun kni_ExtFloodFill(hdc: NativePtr, x: Int, y: Int, color: Int, type: Int): Int

fun FillRgn(hdc: HDC?, hrgn: HRGN?, hbr: HBRUSH?): WINBOOL {
    val _hdc = hdc.rawValue
    val _hrgn = hrgn.rawValue
    val _hbr = hbr.rawValue
    val res = kni_FillRgn(_hdc, _hrgn, _hbr)
    return res
}

@SymbolName("win32_kni_FillRgn")
private external fun kni_FillRgn(hdc: NativePtr, hrgn: NativePtr, hbr: NativePtr): Int

fun FloodFill(hdc: HDC?, x: Int, y: Int, color: COLORREF): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _color = color
    val res = kni_FloodFill(_hdc, _x, _y, _color)
    return res
}

@SymbolName("win32_kni_FloodFill")
private external fun kni_FloodFill(hdc: NativePtr, x: Int, y: Int, color: Int): Int

fun FrameRgn(hdc: HDC?, hrgn: HRGN?, hbr: HBRUSH?, w: Int, h: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _hrgn = hrgn.rawValue
    val _hbr = hbr.rawValue
    val _w = w
    val _h = h
    val res = kni_FrameRgn(_hdc, _hrgn, _hbr, _w, _h)
    return res
}

@SymbolName("win32_kni_FrameRgn")
private external fun kni_FrameRgn(hdc: NativePtr, hrgn: NativePtr, hbr: NativePtr, w: Int, h: Int): Int

fun GetROP2(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_GetROP2(_hdc)
    return res
}

@SymbolName("win32_kni_GetROP2")
private external fun kni_GetROP2(hdc: NativePtr): Int

fun GetAspectRatioFilterEx(hdc: HDC?, lpsize: LPSIZE?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpsize = lpsize.rawValue
    val res = kni_GetAspectRatioFilterEx(_hdc, _lpsize)
    return res
}

@SymbolName("win32_kni_GetAspectRatioFilterEx")
private external fun kni_GetAspectRatioFilterEx(hdc: NativePtr, lpsize: NativePtr): Int

fun GetBkColor(hdc: HDC?): COLORREF {
    val _hdc = hdc.rawValue
    val res = kni_GetBkColor(_hdc)
    return res
}

@SymbolName("win32_kni_GetBkColor")
private external fun kni_GetBkColor(hdc: NativePtr): Int

fun GetDCBrushColor(hdc: HDC?): COLORREF {
    val _hdc = hdc.rawValue
    val res = kni_GetDCBrushColor(_hdc)
    return res
}

@SymbolName("win32_kni_GetDCBrushColor")
private external fun kni_GetDCBrushColor(hdc: NativePtr): Int

fun GetDCPenColor(hdc: HDC?): COLORREF {
    val _hdc = hdc.rawValue
    val res = kni_GetDCPenColor(_hdc)
    return res
}

@SymbolName("win32_kni_GetDCPenColor")
private external fun kni_GetDCPenColor(hdc: NativePtr): Int

fun GetBkMode(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_GetBkMode(_hdc)
    return res
}

@SymbolName("win32_kni_GetBkMode")
private external fun kni_GetBkMode(hdc: NativePtr): Int

fun GetBitmapBits(hbit: HBITMAP?, cb: LONG, lpvBits: LPVOID?): LONG {
    val _hbit = hbit.rawValue
    val _cb = cb
    val _lpvBits = lpvBits.rawValue
    val res = kni_GetBitmapBits(_hbit, _cb, _lpvBits)
    return res
}

@SymbolName("win32_kni_GetBitmapBits")
private external fun kni_GetBitmapBits(hbit: NativePtr, cb: Int, lpvBits: NativePtr): Int

fun GetBitmapDimensionEx(hbit: HBITMAP?, lpsize: LPSIZE?): WINBOOL {
    val _hbit = hbit.rawValue
    val _lpsize = lpsize.rawValue
    val res = kni_GetBitmapDimensionEx(_hbit, _lpsize)
    return res
}

@SymbolName("win32_kni_GetBitmapDimensionEx")
private external fun kni_GetBitmapDimensionEx(hbit: NativePtr, lpsize: NativePtr): Int

fun GetBoundsRect(hdc: HDC?, lprect: LPRECT?, flags: UINT): UINT {
    val _hdc = hdc.rawValue
    val _lprect = lprect.rawValue
    val _flags = flags
    val res = kni_GetBoundsRect(_hdc, _lprect, _flags)
    return res
}

@SymbolName("win32_kni_GetBoundsRect")
private external fun kni_GetBoundsRect(hdc: NativePtr, lprect: NativePtr, flags: Int): Int

fun GetBrushOrgEx(hdc: HDC?, lppt: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lppt = lppt.rawValue
    val res = kni_GetBrushOrgEx(_hdc, _lppt)
    return res
}

@SymbolName("win32_kni_GetBrushOrgEx")
private external fun kni_GetBrushOrgEx(hdc: NativePtr, lppt: NativePtr): Int

fun GetCharWidthA(hdc: HDC?, iFirst: UINT, iLast: UINT, lpBuffer: LPINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _iFirst = iFirst
    val _iLast = iLast
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GetCharWidthA(_hdc, _iFirst, _iLast, _lpBuffer)
    return res
}

@SymbolName("win32_kni_GetCharWidthA")
private external fun kni_GetCharWidthA(hdc: NativePtr, iFirst: Int, iLast: Int, lpBuffer: NativePtr): Int

fun GetCharWidthW(hdc: HDC?, iFirst: UINT, iLast: UINT, lpBuffer: LPINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _iFirst = iFirst
    val _iLast = iLast
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GetCharWidthW(_hdc, _iFirst, _iLast, _lpBuffer)
    return res
}

@SymbolName("win32_kni_GetCharWidthW")
private external fun kni_GetCharWidthW(hdc: NativePtr, iFirst: Int, iLast: Int, lpBuffer: NativePtr): Int

fun GetCharWidth32A(hdc: HDC?, iFirst: UINT, iLast: UINT, lpBuffer: LPINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _iFirst = iFirst
    val _iLast = iLast
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GetCharWidth32A(_hdc, _iFirst, _iLast, _lpBuffer)
    return res
}

@SymbolName("win32_kni_GetCharWidth32A")
private external fun kni_GetCharWidth32A(hdc: NativePtr, iFirst: Int, iLast: Int, lpBuffer: NativePtr): Int

fun GetCharWidth32W(hdc: HDC?, iFirst: UINT, iLast: UINT, lpBuffer: LPINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _iFirst = iFirst
    val _iLast = iLast
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GetCharWidth32W(_hdc, _iFirst, _iLast, _lpBuffer)
    return res
}

@SymbolName("win32_kni_GetCharWidth32W")
private external fun kni_GetCharWidth32W(hdc: NativePtr, iFirst: Int, iLast: Int, lpBuffer: NativePtr): Int

fun GetCharWidthFloatA(hdc: HDC?, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _iFirst = iFirst
    val _iLast = iLast
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GetCharWidthFloatA(_hdc, _iFirst, _iLast, _lpBuffer)
    return res
}

@SymbolName("win32_kni_GetCharWidthFloatA")
private external fun kni_GetCharWidthFloatA(hdc: NativePtr, iFirst: Int, iLast: Int, lpBuffer: NativePtr): Int

fun GetCharWidthFloatW(hdc: HDC?, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _iFirst = iFirst
    val _iLast = iLast
    val _lpBuffer = lpBuffer.rawValue
    val res = kni_GetCharWidthFloatW(_hdc, _iFirst, _iLast, _lpBuffer)
    return res
}

@SymbolName("win32_kni_GetCharWidthFloatW")
private external fun kni_GetCharWidthFloatW(hdc: NativePtr, iFirst: Int, iLast: Int, lpBuffer: NativePtr): Int

fun GetCharABCWidthsA(hdc: HDC?, wFirst: UINT, wLast: UINT, lpABC: LPABC?): WINBOOL {
    val _hdc = hdc.rawValue
    val _wFirst = wFirst
    val _wLast = wLast
    val _lpABC = lpABC.rawValue
    val res = kni_GetCharABCWidthsA(_hdc, _wFirst, _wLast, _lpABC)
    return res
}

@SymbolName("win32_kni_GetCharABCWidthsA")
private external fun kni_GetCharABCWidthsA(hdc: NativePtr, wFirst: Int, wLast: Int, lpABC: NativePtr): Int

fun GetCharABCWidthsW(hdc: HDC?, wFirst: UINT, wLast: UINT, lpABC: LPABC?): WINBOOL {
    val _hdc = hdc.rawValue
    val _wFirst = wFirst
    val _wLast = wLast
    val _lpABC = lpABC.rawValue
    val res = kni_GetCharABCWidthsW(_hdc, _wFirst, _wLast, _lpABC)
    return res
}

@SymbolName("win32_kni_GetCharABCWidthsW")
private external fun kni_GetCharABCWidthsW(hdc: NativePtr, wFirst: Int, wLast: Int, lpABC: NativePtr): Int

fun GetCharABCWidthsFloatA(hdc: HDC?, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _iFirst = iFirst
    val _iLast = iLast
    val _lpABC = lpABC.rawValue
    val res = kni_GetCharABCWidthsFloatA(_hdc, _iFirst, _iLast, _lpABC)
    return res
}

@SymbolName("win32_kni_GetCharABCWidthsFloatA")
private external fun kni_GetCharABCWidthsFloatA(hdc: NativePtr, iFirst: Int, iLast: Int, lpABC: NativePtr): Int

fun GetCharABCWidthsFloatW(hdc: HDC?, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _iFirst = iFirst
    val _iLast = iLast
    val _lpABC = lpABC.rawValue
    val res = kni_GetCharABCWidthsFloatW(_hdc, _iFirst, _iLast, _lpABC)
    return res
}

@SymbolName("win32_kni_GetCharABCWidthsFloatW")
private external fun kni_GetCharABCWidthsFloatW(hdc: NativePtr, iFirst: Int, iLast: Int, lpABC: NativePtr): Int

fun GetClipBox(hdc: HDC?, lprect: LPRECT?): Int {
    val _hdc = hdc.rawValue
    val _lprect = lprect.rawValue
    val res = kni_GetClipBox(_hdc, _lprect)
    return res
}

@SymbolName("win32_kni_GetClipBox")
private external fun kni_GetClipBox(hdc: NativePtr, lprect: NativePtr): Int

fun GetClipRgn(hdc: HDC?, hrgn: HRGN?): Int {
    val _hdc = hdc.rawValue
    val _hrgn = hrgn.rawValue
    val res = kni_GetClipRgn(_hdc, _hrgn)
    return res
}

@SymbolName("win32_kni_GetClipRgn")
private external fun kni_GetClipRgn(hdc: NativePtr, hrgn: NativePtr): Int

fun GetMetaRgn(hdc: HDC?, hrgn: HRGN?): Int {
    val _hdc = hdc.rawValue
    val _hrgn = hrgn.rawValue
    val res = kni_GetMetaRgn(_hdc, _hrgn)
    return res
}

@SymbolName("win32_kni_GetMetaRgn")
private external fun kni_GetMetaRgn(hdc: NativePtr, hrgn: NativePtr): Int

fun GetCurrentObject(hdc: HDC?, type: UINT): HGDIOBJ? {
    val _hdc = hdc.rawValue
    val _type = type
    val res = kni_GetCurrentObject(_hdc, _type)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GetCurrentObject")
private external fun kni_GetCurrentObject(hdc: NativePtr, type: Int): NativePtr

fun GetCurrentPositionEx(hdc: HDC?, lppt: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lppt = lppt.rawValue
    val res = kni_GetCurrentPositionEx(_hdc, _lppt)
    return res
}

@SymbolName("win32_kni_GetCurrentPositionEx")
private external fun kni_GetCurrentPositionEx(hdc: NativePtr, lppt: NativePtr): Int

fun GetDeviceCaps(hdc: HDC?, index: Int): Int {
    val _hdc = hdc.rawValue
    val _index = index
    val res = kni_GetDeviceCaps(_hdc, _index)
    return res
}

@SymbolName("win32_kni_GetDeviceCaps")
private external fun kni_GetDeviceCaps(hdc: NativePtr, index: Int): Int

fun GetDIBits(hdc: HDC?, hbm: HBITMAP?, start: UINT, cLines: UINT, lpvBits: LPVOID?, lpbmi: LPBITMAPINFO?, usage: UINT): Int {
    val _hdc = hdc.rawValue
    val _hbm = hbm.rawValue
    val _start = start
    val _cLines = cLines
    val _lpvBits = lpvBits.rawValue
    val _lpbmi = lpbmi.rawValue
    val _usage = usage
    val res = kni_GetDIBits(_hdc, _hbm, _start, _cLines, _lpvBits, _lpbmi, _usage)
    return res
}

@SymbolName("win32_kni_GetDIBits")
private external fun kni_GetDIBits(hdc: NativePtr, hbm: NativePtr, start: Int, cLines: Int, lpvBits: NativePtr, lpbmi: NativePtr, usage: Int): Int

fun GetFontData(hdc: HDC?, dwTable: DWORD, dwOffset: DWORD, pvBuffer: PVOID?, cjBuffer: DWORD): DWORD {
    val _hdc = hdc.rawValue
    val _dwTable = dwTable
    val _dwOffset = dwOffset
    val _pvBuffer = pvBuffer.rawValue
    val _cjBuffer = cjBuffer
    val res = kni_GetFontData(_hdc, _dwTable, _dwOffset, _pvBuffer, _cjBuffer)
    return res
}

@SymbolName("win32_kni_GetFontData")
private external fun kni_GetFontData(hdc: NativePtr, dwTable: Int, dwOffset: Int, pvBuffer: NativePtr, cjBuffer: Int): Int

fun GetGlyphOutlineA(hdc: HDC?, uChar: UINT, fuFormat: UINT, lpgm: LPGLYPHMETRICS?, cjBuffer: DWORD, pvBuffer: LPVOID?, lpmat2: CValuesRef<MAT2>?): DWORD {
    return memScoped {
        val _hdc = hdc.rawValue
        val _uChar = uChar
        val _fuFormat = fuFormat
        val _lpgm = lpgm.rawValue
        val _cjBuffer = cjBuffer
        val _pvBuffer = pvBuffer.rawValue
        val _lpmat2 = lpmat2?.getPointer(memScope).rawValue
        val res = kni_GetGlyphOutlineA(_hdc, _uChar, _fuFormat, _lpgm, _cjBuffer, _pvBuffer, _lpmat2)
        res
    }
}

@SymbolName("win32_kni_GetGlyphOutlineA")
private external fun kni_GetGlyphOutlineA(hdc: NativePtr, uChar: Int, fuFormat: Int, lpgm: NativePtr, cjBuffer: Int, pvBuffer: NativePtr, lpmat2: NativePtr): Int

fun GetGlyphOutlineW(hdc: HDC?, uChar: UINT, fuFormat: UINT, lpgm: LPGLYPHMETRICS?, cjBuffer: DWORD, pvBuffer: LPVOID?, lpmat2: CValuesRef<MAT2>?): DWORD {
    return memScoped {
        val _hdc = hdc.rawValue
        val _uChar = uChar
        val _fuFormat = fuFormat
        val _lpgm = lpgm.rawValue
        val _cjBuffer = cjBuffer
        val _pvBuffer = pvBuffer.rawValue
        val _lpmat2 = lpmat2?.getPointer(memScope).rawValue
        val res = kni_GetGlyphOutlineW(_hdc, _uChar, _fuFormat, _lpgm, _cjBuffer, _pvBuffer, _lpmat2)
        res
    }
}

@SymbolName("win32_kni_GetGlyphOutlineW")
private external fun kni_GetGlyphOutlineW(hdc: NativePtr, uChar: Int, fuFormat: Int, lpgm: NativePtr, cjBuffer: Int, pvBuffer: NativePtr, lpmat2: NativePtr): Int

fun GetGraphicsMode(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_GetGraphicsMode(_hdc)
    return res
}

@SymbolName("win32_kni_GetGraphicsMode")
private external fun kni_GetGraphicsMode(hdc: NativePtr): Int

fun GetMapMode(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_GetMapMode(_hdc)
    return res
}

@SymbolName("win32_kni_GetMapMode")
private external fun kni_GetMapMode(hdc: NativePtr): Int

fun GetMetaFileBitsEx(hMF: HMETAFILE?, cbBuffer: UINT, lpData: LPVOID?): UINT {
    val _hMF = hMF.rawValue
    val _cbBuffer = cbBuffer
    val _lpData = lpData.rawValue
    val res = kni_GetMetaFileBitsEx(_hMF, _cbBuffer, _lpData)
    return res
}

@SymbolName("win32_kni_GetMetaFileBitsEx")
private external fun kni_GetMetaFileBitsEx(hMF: NativePtr, cbBuffer: Int, lpData: NativePtr): Int

fun GetMetaFileA(lpName: String?): HMETAFILE? {
    return memScoped {
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val res = kni_GetMetaFileA(_lpName)
        interpretCPointer<HMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_GetMetaFileA")
private external fun kni_GetMetaFileA(lpName: NativePtr): NativePtr

fun GetMetaFileW(lpName: String?): HMETAFILE? {
    return memScoped {
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_GetMetaFileW(_lpName)
        interpretCPointer<HMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_GetMetaFileW")
private external fun kni_GetMetaFileW(lpName: NativePtr): NativePtr

fun GetNearestColor(hdc: HDC?, color: COLORREF): COLORREF {
    val _hdc = hdc.rawValue
    val _color = color
    val res = kni_GetNearestColor(_hdc, _color)
    return res
}

@SymbolName("win32_kni_GetNearestColor")
private external fun kni_GetNearestColor(hdc: NativePtr, color: Int): Int

fun GetNearestPaletteIndex(h: HPALETTE?, color: COLORREF): UINT {
    val _h = h.rawValue
    val _color = color
    val res = kni_GetNearestPaletteIndex(_h, _color)
    return res
}

@SymbolName("win32_kni_GetNearestPaletteIndex")
private external fun kni_GetNearestPaletteIndex(h: NativePtr, color: Int): Int

fun GetObjectType(h: HGDIOBJ?): DWORD {
    val _h = h.rawValue
    val res = kni_GetObjectType(_h)
    return res
}

@SymbolName("win32_kni_GetObjectType")
private external fun kni_GetObjectType(h: NativePtr): Int

fun GetOutlineTextMetricsA(hdc: HDC?, cjCopy: UINT, potm: LPOUTLINETEXTMETRICA?): UINT {
    val _hdc = hdc.rawValue
    val _cjCopy = cjCopy
    val _potm = potm.rawValue
    val res = kni_GetOutlineTextMetricsA(_hdc, _cjCopy, _potm)
    return res
}

@SymbolName("win32_kni_GetOutlineTextMetricsA")
private external fun kni_GetOutlineTextMetricsA(hdc: NativePtr, cjCopy: Int, potm: NativePtr): Int

fun GetOutlineTextMetricsW(hdc: HDC?, cjCopy: UINT, potm: LPOUTLINETEXTMETRICW?): UINT {
    val _hdc = hdc.rawValue
    val _cjCopy = cjCopy
    val _potm = potm.rawValue
    val res = kni_GetOutlineTextMetricsW(_hdc, _cjCopy, _potm)
    return res
}

@SymbolName("win32_kni_GetOutlineTextMetricsW")
private external fun kni_GetOutlineTextMetricsW(hdc: NativePtr, cjCopy: Int, potm: NativePtr): Int

fun GetPaletteEntries(hpal: HPALETTE?, iStart: UINT, cEntries: UINT, pPalEntries: LPPALETTEENTRY?): UINT {
    val _hpal = hpal.rawValue
    val _iStart = iStart
    val _cEntries = cEntries
    val _pPalEntries = pPalEntries.rawValue
    val res = kni_GetPaletteEntries(_hpal, _iStart, _cEntries, _pPalEntries)
    return res
}

@SymbolName("win32_kni_GetPaletteEntries")
private external fun kni_GetPaletteEntries(hpal: NativePtr, iStart: Int, cEntries: Int, pPalEntries: NativePtr): Int

fun GetPixel(hdc: HDC?, x: Int, y: Int): COLORREF {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val res = kni_GetPixel(_hdc, _x, _y)
    return res
}

@SymbolName("win32_kni_GetPixel")
private external fun kni_GetPixel(hdc: NativePtr, x: Int, y: Int): Int

fun GetPixelFormat(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_GetPixelFormat(_hdc)
    return res
}

@SymbolName("win32_kni_GetPixelFormat")
private external fun kni_GetPixelFormat(hdc: NativePtr): Int

fun GetPolyFillMode(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_GetPolyFillMode(_hdc)
    return res
}

@SymbolName("win32_kni_GetPolyFillMode")
private external fun kni_GetPolyFillMode(hdc: NativePtr): Int

fun GetRasterizerCaps(lpraststat: LPRASTERIZER_STATUS?, cjBytes: UINT): WINBOOL {
    val _lpraststat = lpraststat.rawValue
    val _cjBytes = cjBytes
    val res = kni_GetRasterizerCaps(_lpraststat, _cjBytes)
    return res
}

@SymbolName("win32_kni_GetRasterizerCaps")
private external fun kni_GetRasterizerCaps(lpraststat: NativePtr, cjBytes: Int): Int

fun GetRandomRgn(hdc: HDC?, hrgn: HRGN?, i: INT): Int {
    val _hdc = hdc.rawValue
    val _hrgn = hrgn.rawValue
    val _i = i
    val res = kni_GetRandomRgn(_hdc, _hrgn, _i)
    return res
}

@SymbolName("win32_kni_GetRandomRgn")
private external fun kni_GetRandomRgn(hdc: NativePtr, hrgn: NativePtr, i: Int): Int

fun GetRegionData(hrgn: HRGN?, nCount: DWORD, lpRgnData: LPRGNDATA?): DWORD {
    val _hrgn = hrgn.rawValue
    val _nCount = nCount
    val _lpRgnData = lpRgnData.rawValue
    val res = kni_GetRegionData(_hrgn, _nCount, _lpRgnData)
    return res
}

@SymbolName("win32_kni_GetRegionData")
private external fun kni_GetRegionData(hrgn: NativePtr, nCount: Int, lpRgnData: NativePtr): Int

fun GetRgnBox(hrgn: HRGN?, lprc: LPRECT?): Int {
    val _hrgn = hrgn.rawValue
    val _lprc = lprc.rawValue
    val res = kni_GetRgnBox(_hrgn, _lprc)
    return res
}

@SymbolName("win32_kni_GetRgnBox")
private external fun kni_GetRgnBox(hrgn: NativePtr, lprc: NativePtr): Int

fun GetStockObject(i: Int): HGDIOBJ? {
    val _i = i
    val res = kni_GetStockObject(_i)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GetStockObject")
private external fun kni_GetStockObject(i: Int): NativePtr

fun GetStretchBltMode(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_GetStretchBltMode(_hdc)
    return res
}

@SymbolName("win32_kni_GetStretchBltMode")
private external fun kni_GetStretchBltMode(hdc: NativePtr): Int

fun GetSystemPaletteEntries(hdc: HDC?, iStart: UINT, cEntries: UINT, pPalEntries: LPPALETTEENTRY?): UINT {
    val _hdc = hdc.rawValue
    val _iStart = iStart
    val _cEntries = cEntries
    val _pPalEntries = pPalEntries.rawValue
    val res = kni_GetSystemPaletteEntries(_hdc, _iStart, _cEntries, _pPalEntries)
    return res
}

@SymbolName("win32_kni_GetSystemPaletteEntries")
private external fun kni_GetSystemPaletteEntries(hdc: NativePtr, iStart: Int, cEntries: Int, pPalEntries: NativePtr): Int

fun GetSystemPaletteUse(hdc: HDC?): UINT {
    val _hdc = hdc.rawValue
    val res = kni_GetSystemPaletteUse(_hdc)
    return res
}

@SymbolName("win32_kni_GetSystemPaletteUse")
private external fun kni_GetSystemPaletteUse(hdc: NativePtr): Int

fun GetTextCharacterExtra(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_GetTextCharacterExtra(_hdc)
    return res
}

@SymbolName("win32_kni_GetTextCharacterExtra")
private external fun kni_GetTextCharacterExtra(hdc: NativePtr): Int

fun GetTextAlign(hdc: HDC?): UINT {
    val _hdc = hdc.rawValue
    val res = kni_GetTextAlign(_hdc)
    return res
}

@SymbolName("win32_kni_GetTextAlign")
private external fun kni_GetTextAlign(hdc: NativePtr): Int

fun GetTextColor(hdc: HDC?): COLORREF {
    val _hdc = hdc.rawValue
    val res = kni_GetTextColor(_hdc)
    return res
}

@SymbolName("win32_kni_GetTextColor")
private external fun kni_GetTextColor(hdc: NativePtr): Int

fun GetTextExtentPointA(hdc: HDC?, lpString: String?, c: Int, lpsz: LPSIZE?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _c = c
        val _lpsz = lpsz.rawValue
        val res = kni_GetTextExtentPointA(_hdc, _lpString, _c, _lpsz)
        res
    }
}

@SymbolName("win32_kni_GetTextExtentPointA")
private external fun kni_GetTextExtentPointA(hdc: NativePtr, lpString: NativePtr, c: Int, lpsz: NativePtr): Int

fun GetTextExtentPointW(hdc: HDC?, lpString: String?, c: Int, lpsz: LPSIZE?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _c = c
        val _lpsz = lpsz.rawValue
        val res = kni_GetTextExtentPointW(_hdc, _lpString, _c, _lpsz)
        res
    }
}

@SymbolName("win32_kni_GetTextExtentPointW")
private external fun kni_GetTextExtentPointW(hdc: NativePtr, lpString: NativePtr, c: Int, lpsz: NativePtr): Int

fun GetTextExtentPoint32A(hdc: HDC?, lpString: String?, c: Int, psizl: LPSIZE?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _c = c
        val _psizl = psizl.rawValue
        val res = kni_GetTextExtentPoint32A(_hdc, _lpString, _c, _psizl)
        res
    }
}

@SymbolName("win32_kni_GetTextExtentPoint32A")
private external fun kni_GetTextExtentPoint32A(hdc: NativePtr, lpString: NativePtr, c: Int, psizl: NativePtr): Int

fun GetTextExtentPoint32W(hdc: HDC?, lpString: String?, c: Int, psizl: LPSIZE?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _c = c
        val _psizl = psizl.rawValue
        val res = kni_GetTextExtentPoint32W(_hdc, _lpString, _c, _psizl)
        res
    }
}

@SymbolName("win32_kni_GetTextExtentPoint32W")
private external fun kni_GetTextExtentPoint32W(hdc: NativePtr, lpString: NativePtr, c: Int, psizl: NativePtr): Int

fun GetTextExtentExPointA(hdc: HDC?, lpszString: String?, cchString: Int, nMaxExtent: Int, lpnFit: LPINT?, lpnDx: LPINT?, lpSize: LPSIZE?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpszString = lpszString?.cstr?.getPointer(memScope).rawValue
        val _cchString = cchString
        val _nMaxExtent = nMaxExtent
        val _lpnFit = lpnFit.rawValue
        val _lpnDx = lpnDx.rawValue
        val _lpSize = lpSize.rawValue
        val res = kni_GetTextExtentExPointA(_hdc, _lpszString, _cchString, _nMaxExtent, _lpnFit, _lpnDx, _lpSize)
        res
    }
}

@SymbolName("win32_kni_GetTextExtentExPointA")
private external fun kni_GetTextExtentExPointA(hdc: NativePtr, lpszString: NativePtr, cchString: Int, nMaxExtent: Int, lpnFit: NativePtr, lpnDx: NativePtr, lpSize: NativePtr): Int

fun GetTextExtentExPointW(hdc: HDC?, lpszString: String?, cchString: Int, nMaxExtent: Int, lpnFit: LPINT?, lpnDx: LPINT?, lpSize: LPSIZE?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpszString = lpszString?.wcstr?.getPointer(memScope).rawValue
        val _cchString = cchString
        val _nMaxExtent = nMaxExtent
        val _lpnFit = lpnFit.rawValue
        val _lpnDx = lpnDx.rawValue
        val _lpSize = lpSize.rawValue
        val res = kni_GetTextExtentExPointW(_hdc, _lpszString, _cchString, _nMaxExtent, _lpnFit, _lpnDx, _lpSize)
        res
    }
}

@SymbolName("win32_kni_GetTextExtentExPointW")
private external fun kni_GetTextExtentExPointW(hdc: NativePtr, lpszString: NativePtr, cchString: Int, nMaxExtent: Int, lpnFit: NativePtr, lpnDx: NativePtr, lpSize: NativePtr): Int

fun GetTextCharset(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_GetTextCharset(_hdc)
    return res
}

@SymbolName("win32_kni_GetTextCharset")
private external fun kni_GetTextCharset(hdc: NativePtr): Int

fun GetTextCharsetInfo(hdc: HDC?, lpSig: LPFONTSIGNATURE?, dwFlags: DWORD): Int {
    val _hdc = hdc.rawValue
    val _lpSig = lpSig.rawValue
    val _dwFlags = dwFlags
    val res = kni_GetTextCharsetInfo(_hdc, _lpSig, _dwFlags)
    return res
}

@SymbolName("win32_kni_GetTextCharsetInfo")
private external fun kni_GetTextCharsetInfo(hdc: NativePtr, lpSig: NativePtr, dwFlags: Int): Int

fun TranslateCharsetInfo(lpSrc: CValuesRef<DWORDVar>?, lpCs: LPCHARSETINFO?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpSrc = lpSrc?.getPointer(memScope).rawValue
        val _lpCs = lpCs.rawValue
        val _dwFlags = dwFlags
        val res = kni_TranslateCharsetInfo(_lpSrc, _lpCs, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_TranslateCharsetInfo")
private external fun kni_TranslateCharsetInfo(lpSrc: NativePtr, lpCs: NativePtr, dwFlags: Int): Int

fun GetFontLanguageInfo(hdc: HDC?): DWORD {
    val _hdc = hdc.rawValue
    val res = kni_GetFontLanguageInfo(_hdc)
    return res
}

@SymbolName("win32_kni_GetFontLanguageInfo")
private external fun kni_GetFontLanguageInfo(hdc: NativePtr): Int

fun GetCharacterPlacementA(hdc: HDC?, lpString: String?, nCount: Int, nMexExtent: Int, lpResults: LPGCP_RESULTSA?, dwFlags: DWORD): DWORD {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _nCount = nCount
        val _nMexExtent = nMexExtent
        val _lpResults = lpResults.rawValue
        val _dwFlags = dwFlags
        val res = kni_GetCharacterPlacementA(_hdc, _lpString, _nCount, _nMexExtent, _lpResults, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_GetCharacterPlacementA")
private external fun kni_GetCharacterPlacementA(hdc: NativePtr, lpString: NativePtr, nCount: Int, nMexExtent: Int, lpResults: NativePtr, dwFlags: Int): Int

fun GetCharacterPlacementW(hdc: HDC?, lpString: String?, nCount: Int, nMexExtent: Int, lpResults: LPGCP_RESULTSW?, dwFlags: DWORD): DWORD {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _nCount = nCount
        val _nMexExtent = nMexExtent
        val _lpResults = lpResults.rawValue
        val _dwFlags = dwFlags
        val res = kni_GetCharacterPlacementW(_hdc, _lpString, _nCount, _nMexExtent, _lpResults, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_GetCharacterPlacementW")
private external fun kni_GetCharacterPlacementW(hdc: NativePtr, lpString: NativePtr, nCount: Int, nMexExtent: Int, lpResults: NativePtr, dwFlags: Int): Int

fun GetFontUnicodeRanges(hdc: HDC?, lpgs: LPGLYPHSET?): DWORD {
    val _hdc = hdc.rawValue
    val _lpgs = lpgs.rawValue
    val res = kni_GetFontUnicodeRanges(_hdc, _lpgs)
    return res
}

@SymbolName("win32_kni_GetFontUnicodeRanges")
private external fun kni_GetFontUnicodeRanges(hdc: NativePtr, lpgs: NativePtr): Int

fun GetGlyphIndicesA(hdc: HDC?, lpstr: String?, c: Int, pgi: LPWORD?, fl: DWORD): DWORD {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpstr = lpstr?.cstr?.getPointer(memScope).rawValue
        val _c = c
        val _pgi = pgi.rawValue
        val _fl = fl
        val res = kni_GetGlyphIndicesA(_hdc, _lpstr, _c, _pgi, _fl)
        res
    }
}

@SymbolName("win32_kni_GetGlyphIndicesA")
private external fun kni_GetGlyphIndicesA(hdc: NativePtr, lpstr: NativePtr, c: Int, pgi: NativePtr, fl: Int): Int

fun GetGlyphIndicesW(hdc: HDC?, lpstr: String?, c: Int, pgi: LPWORD?, fl: DWORD): DWORD {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpstr = lpstr?.wcstr?.getPointer(memScope).rawValue
        val _c = c
        val _pgi = pgi.rawValue
        val _fl = fl
        val res = kni_GetGlyphIndicesW(_hdc, _lpstr, _c, _pgi, _fl)
        res
    }
}

@SymbolName("win32_kni_GetGlyphIndicesW")
private external fun kni_GetGlyphIndicesW(hdc: NativePtr, lpstr: NativePtr, c: Int, pgi: NativePtr, fl: Int): Int

fun GetTextExtentPointI(hdc: HDC?, pgiIn: LPWORD?, cgi: Int, psize: LPSIZE?): WINBOOL {
    val _hdc = hdc.rawValue
    val _pgiIn = pgiIn.rawValue
    val _cgi = cgi
    val _psize = psize.rawValue
    val res = kni_GetTextExtentPointI(_hdc, _pgiIn, _cgi, _psize)
    return res
}

@SymbolName("win32_kni_GetTextExtentPointI")
private external fun kni_GetTextExtentPointI(hdc: NativePtr, pgiIn: NativePtr, cgi: Int, psize: NativePtr): Int

fun GetTextExtentExPointI(hdc: HDC?, lpwszString: LPWORD?, cwchString: Int, nMaxExtent: Int, lpnFit: LPINT?, lpnDx: LPINT?, lpSize: LPSIZE?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpwszString = lpwszString.rawValue
    val _cwchString = cwchString
    val _nMaxExtent = nMaxExtent
    val _lpnFit = lpnFit.rawValue
    val _lpnDx = lpnDx.rawValue
    val _lpSize = lpSize.rawValue
    val res = kni_GetTextExtentExPointI(_hdc, _lpwszString, _cwchString, _nMaxExtent, _lpnFit, _lpnDx, _lpSize)
    return res
}

@SymbolName("win32_kni_GetTextExtentExPointI")
private external fun kni_GetTextExtentExPointI(hdc: NativePtr, lpwszString: NativePtr, cwchString: Int, nMaxExtent: Int, lpnFit: NativePtr, lpnDx: NativePtr, lpSize: NativePtr): Int

fun GetCharWidthI(hdc: HDC?, giFirst: UINT, cgi: UINT, pgi: LPWORD?, piWidths: LPINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _giFirst = giFirst
    val _cgi = cgi
    val _pgi = pgi.rawValue
    val _piWidths = piWidths.rawValue
    val res = kni_GetCharWidthI(_hdc, _giFirst, _cgi, _pgi, _piWidths)
    return res
}

@SymbolName("win32_kni_GetCharWidthI")
private external fun kni_GetCharWidthI(hdc: NativePtr, giFirst: Int, cgi: Int, pgi: NativePtr, piWidths: NativePtr): Int

fun GetCharABCWidthsI(hdc: HDC?, giFirst: UINT, cgi: UINT, pgi: LPWORD?, pabc: LPABC?): WINBOOL {
    val _hdc = hdc.rawValue
    val _giFirst = giFirst
    val _cgi = cgi
    val _pgi = pgi.rawValue
    val _pabc = pabc.rawValue
    val res = kni_GetCharABCWidthsI(_hdc, _giFirst, _cgi, _pgi, _pabc)
    return res
}

@SymbolName("win32_kni_GetCharABCWidthsI")
private external fun kni_GetCharABCWidthsI(hdc: NativePtr, giFirst: Int, cgi: Int, pgi: NativePtr, pabc: NativePtr): Int

fun AddFontResourceExA(name: String?, fl: DWORD, res: PVOID?): Int {
    return memScoped {
        val _name = name?.cstr?.getPointer(memScope).rawValue
        val _fl = fl
        val _res = res.rawValue
        val res = kni_AddFontResourceExA(_name, _fl, _res)
        res
    }
}

@SymbolName("win32_kni_AddFontResourceExA")
private external fun kni_AddFontResourceExA(name: NativePtr, fl: Int, res: NativePtr): Int

fun AddFontResourceExW(name: String?, fl: DWORD, res: PVOID?): Int {
    return memScoped {
        val _name = name?.wcstr?.getPointer(memScope).rawValue
        val _fl = fl
        val _res = res.rawValue
        val res = kni_AddFontResourceExW(_name, _fl, _res)
        res
    }
}

@SymbolName("win32_kni_AddFontResourceExW")
private external fun kni_AddFontResourceExW(name: NativePtr, fl: Int, res: NativePtr): Int

fun RemoveFontResourceExA(name: String?, fl: DWORD, pdv: PVOID?): WINBOOL {
    return memScoped {
        val _name = name?.cstr?.getPointer(memScope).rawValue
        val _fl = fl
        val _pdv = pdv.rawValue
        val res = kni_RemoveFontResourceExA(_name, _fl, _pdv)
        res
    }
}

@SymbolName("win32_kni_RemoveFontResourceExA")
private external fun kni_RemoveFontResourceExA(name: NativePtr, fl: Int, pdv: NativePtr): Int

fun RemoveFontResourceExW(name: String?, fl: DWORD, pdv: PVOID?): WINBOOL {
    return memScoped {
        val _name = name?.wcstr?.getPointer(memScope).rawValue
        val _fl = fl
        val _pdv = pdv.rawValue
        val res = kni_RemoveFontResourceExW(_name, _fl, _pdv)
        res
    }
}

@SymbolName("win32_kni_RemoveFontResourceExW")
private external fun kni_RemoveFontResourceExW(name: NativePtr, fl: Int, pdv: NativePtr): Int

fun AddFontMemResourceEx(pFileView: PVOID?, cjSize: DWORD, pvResrved: PVOID?, pNumFonts: CValuesRef<DWORDVar>?): HANDLE? {
    return memScoped {
        val _pFileView = pFileView.rawValue
        val _cjSize = cjSize
        val _pvResrved = pvResrved.rawValue
        val _pNumFonts = pNumFonts?.getPointer(memScope).rawValue
        val res = kni_AddFontMemResourceEx(_pFileView, _cjSize, _pvResrved, _pNumFonts)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_AddFontMemResourceEx")
private external fun kni_AddFontMemResourceEx(pFileView: NativePtr, cjSize: Int, pvResrved: NativePtr, pNumFonts: NativePtr): NativePtr

fun RemoveFontMemResourceEx(h: HANDLE?): WINBOOL {
    val _h = h.rawValue
    val res = kni_RemoveFontMemResourceEx(_h)
    return res
}

@SymbolName("win32_kni_RemoveFontMemResourceEx")
private external fun kni_RemoveFontMemResourceEx(h: NativePtr): Int

fun CreateFontIndirectExA(arg0: CValuesRef<ENUMLOGFONTEXDVA>?): HFONT? {
    return memScoped {
        val _arg0 = arg0?.getPointer(memScope).rawValue
        val res = kni_CreateFontIndirectExA(_arg0)
        interpretCPointer<HFONT__>(res)
    }
}

@SymbolName("win32_kni_CreateFontIndirectExA")
private external fun kni_CreateFontIndirectExA(arg0: NativePtr): NativePtr

fun CreateFontIndirectExW(arg0: CValuesRef<ENUMLOGFONTEXDVW>?): HFONT? {
    return memScoped {
        val _arg0 = arg0?.getPointer(memScope).rawValue
        val res = kni_CreateFontIndirectExW(_arg0)
        interpretCPointer<HFONT__>(res)
    }
}

@SymbolName("win32_kni_CreateFontIndirectExW")
private external fun kni_CreateFontIndirectExW(arg0: NativePtr): NativePtr

fun GetViewportExtEx(hdc: HDC?, lpsize: LPSIZE?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpsize = lpsize.rawValue
    val res = kni_GetViewportExtEx(_hdc, _lpsize)
    return res
}

@SymbolName("win32_kni_GetViewportExtEx")
private external fun kni_GetViewportExtEx(hdc: NativePtr, lpsize: NativePtr): Int

fun GetViewportOrgEx(hdc: HDC?, lppoint: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lppoint = lppoint.rawValue
    val res = kni_GetViewportOrgEx(_hdc, _lppoint)
    return res
}

@SymbolName("win32_kni_GetViewportOrgEx")
private external fun kni_GetViewportOrgEx(hdc: NativePtr, lppoint: NativePtr): Int

fun GetWindowExtEx(hdc: HDC?, lpsize: LPSIZE?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpsize = lpsize.rawValue
    val res = kni_GetWindowExtEx(_hdc, _lpsize)
    return res
}

@SymbolName("win32_kni_GetWindowExtEx")
private external fun kni_GetWindowExtEx(hdc: NativePtr, lpsize: NativePtr): Int

fun GetWindowOrgEx(hdc: HDC?, lppoint: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lppoint = lppoint.rawValue
    val res = kni_GetWindowOrgEx(_hdc, _lppoint)
    return res
}

@SymbolName("win32_kni_GetWindowOrgEx")
private external fun kni_GetWindowOrgEx(hdc: NativePtr, lppoint: NativePtr): Int

fun IntersectClipRect(hdc: HDC?, left: Int, top: Int, right: Int, bottom: Int): Int {
    val _hdc = hdc.rawValue
    val _left = left
    val _top = top
    val _right = right
    val _bottom = bottom
    val res = kni_IntersectClipRect(_hdc, _left, _top, _right, _bottom)
    return res
}

@SymbolName("win32_kni_IntersectClipRect")
private external fun kni_IntersectClipRect(hdc: NativePtr, left: Int, top: Int, right: Int, bottom: Int): Int

fun InvertRgn(hdc: HDC?, hrgn: HRGN?): WINBOOL {
    val _hdc = hdc.rawValue
    val _hrgn = hrgn.rawValue
    val res = kni_InvertRgn(_hdc, _hrgn)
    return res
}

@SymbolName("win32_kni_InvertRgn")
private external fun kni_InvertRgn(hdc: NativePtr, hrgn: NativePtr): Int

fun LineDDA(xStart: Int, yStart: Int, xEnd: Int, yEnd: Int, lpProc: LINEDDAPROC?, data: LPARAM): WINBOOL {
    val _xStart = xStart
    val _yStart = yStart
    val _xEnd = xEnd
    val _yEnd = yEnd
    val _lpProc = lpProc.rawValue
    val _data = data
    val res = kni_LineDDA(_xStart, _yStart, _xEnd, _yEnd, _lpProc, _data)
    return res
}

@SymbolName("win32_kni_LineDDA")
private external fun kni_LineDDA(xStart: Int, yStart: Int, xEnd: Int, yEnd: Int, lpProc: NativePtr, data: Long): Int

fun LineTo(hdc: HDC?, x: Int, y: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val res = kni_LineTo(_hdc, _x, _y)
    return res
}

@SymbolName("win32_kni_LineTo")
private external fun kni_LineTo(hdc: NativePtr, x: Int, y: Int): Int

fun MaskBlt(hdcDest: HDC?, xDest: Int, yDest: Int, width: Int, height: Int, hdcSrc: HDC?, xSrc: Int, ySrc: Int, hbmMask: HBITMAP?, xMask: Int, yMask: Int, rop: DWORD): WINBOOL {
    val _hdcDest = hdcDest.rawValue
    val _xDest = xDest
    val _yDest = yDest
    val _width = width
    val _height = height
    val _hdcSrc = hdcSrc.rawValue
    val _xSrc = xSrc
    val _ySrc = ySrc
    val _hbmMask = hbmMask.rawValue
    val _xMask = xMask
    val _yMask = yMask
    val _rop = rop
    val res = kni_MaskBlt(_hdcDest, _xDest, _yDest, _width, _height, _hdcSrc, _xSrc, _ySrc, _hbmMask, _xMask, _yMask, _rop)
    return res
}

@SymbolName("win32_kni_MaskBlt")
private external fun kni_MaskBlt(hdcDest: NativePtr, xDest: Int, yDest: Int, width: Int, height: Int, hdcSrc: NativePtr, xSrc: Int, ySrc: Int, hbmMask: NativePtr, xMask: Int, yMask: Int, rop: Int): Int

fun PlgBlt(hdcDest: HDC?, lpPoint: CValuesRef<POINT>?, hdcSrc: HDC?, xSrc: Int, ySrc: Int, width: Int, height: Int, hbmMask: HBITMAP?, xMask: Int, yMask: Int): WINBOOL {
    return memScoped {
        val _hdcDest = hdcDest.rawValue
        val _lpPoint = lpPoint?.getPointer(memScope).rawValue
        val _hdcSrc = hdcSrc.rawValue
        val _xSrc = xSrc
        val _ySrc = ySrc
        val _width = width
        val _height = height
        val _hbmMask = hbmMask.rawValue
        val _xMask = xMask
        val _yMask = yMask
        val res = kni_PlgBlt(_hdcDest, _lpPoint, _hdcSrc, _xSrc, _ySrc, _width, _height, _hbmMask, _xMask, _yMask)
        res
    }
}

@SymbolName("win32_kni_PlgBlt")
private external fun kni_PlgBlt(hdcDest: NativePtr, lpPoint: NativePtr, hdcSrc: NativePtr, xSrc: Int, ySrc: Int, width: Int, height: Int, hbmMask: NativePtr, xMask: Int, yMask: Int): Int

fun OffsetClipRgn(hdc: HDC?, x: Int, y: Int): Int {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val res = kni_OffsetClipRgn(_hdc, _x, _y)
    return res
}

@SymbolName("win32_kni_OffsetClipRgn")
private external fun kni_OffsetClipRgn(hdc: NativePtr, x: Int, y: Int): Int

fun OffsetRgn(hrgn: HRGN?, x: Int, y: Int): Int {
    val _hrgn = hrgn.rawValue
    val _x = x
    val _y = y
    val res = kni_OffsetRgn(_hrgn, _x, _y)
    return res
}

@SymbolName("win32_kni_OffsetRgn")
private external fun kni_OffsetRgn(hrgn: NativePtr, x: Int, y: Int): Int

fun PatBlt(hdc: HDC?, x: Int, y: Int, w: Int, h: Int, rop: DWORD): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _w = w
    val _h = h
    val _rop = rop
    val res = kni_PatBlt(_hdc, _x, _y, _w, _h, _rop)
    return res
}

@SymbolName("win32_kni_PatBlt")
private external fun kni_PatBlt(hdc: NativePtr, x: Int, y: Int, w: Int, h: Int, rop: Int): Int

fun Pie(hdc: HDC?, left: Int, top: Int, right: Int, bottom: Int, xr1: Int, yr1: Int, xr2: Int, yr2: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _left = left
    val _top = top
    val _right = right
    val _bottom = bottom
    val _xr1 = xr1
    val _yr1 = yr1
    val _xr2 = xr2
    val _yr2 = yr2
    val res = kni_Pie(_hdc, _left, _top, _right, _bottom, _xr1, _yr1, _xr2, _yr2)
    return res
}

@SymbolName("win32_kni_Pie")
private external fun kni_Pie(hdc: NativePtr, left: Int, top: Int, right: Int, bottom: Int, xr1: Int, yr1: Int, xr2: Int, yr2: Int): Int

fun PlayMetaFile(hdc: HDC?, hmf: HMETAFILE?): WINBOOL {
    val _hdc = hdc.rawValue
    val _hmf = hmf.rawValue
    val res = kni_PlayMetaFile(_hdc, _hmf)
    return res
}

@SymbolName("win32_kni_PlayMetaFile")
private external fun kni_PlayMetaFile(hdc: NativePtr, hmf: NativePtr): Int

fun PaintRgn(hdc: HDC?, hrgn: HRGN?): WINBOOL {
    val _hdc = hdc.rawValue
    val _hrgn = hrgn.rawValue
    val res = kni_PaintRgn(_hdc, _hrgn)
    return res
}

@SymbolName("win32_kni_PaintRgn")
private external fun kni_PaintRgn(hdc: NativePtr, hrgn: NativePtr): Int

fun PolyPolygon(hdc: HDC?, apt: CValuesRef<POINT>?, asz: CValuesRef<INTVar>?, csz: Int): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _apt = apt?.getPointer(memScope).rawValue
        val _asz = asz?.getPointer(memScope).rawValue
        val _csz = csz
        val res = kni_PolyPolygon(_hdc, _apt, _asz, _csz)
        res
    }
}

@SymbolName("win32_kni_PolyPolygon")
private external fun kni_PolyPolygon(hdc: NativePtr, apt: NativePtr, asz: NativePtr, csz: Int): Int

fun PtInRegion(hrgn: HRGN?, x: Int, y: Int): WINBOOL {
    val _hrgn = hrgn.rawValue
    val _x = x
    val _y = y
    val res = kni_PtInRegion(_hrgn, _x, _y)
    return res
}

@SymbolName("win32_kni_PtInRegion")
private external fun kni_PtInRegion(hrgn: NativePtr, x: Int, y: Int): Int

fun PtVisible(hdc: HDC?, x: Int, y: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val res = kni_PtVisible(_hdc, _x, _y)
    return res
}

@SymbolName("win32_kni_PtVisible")
private external fun kni_PtVisible(hdc: NativePtr, x: Int, y: Int): Int

fun RectInRegion(hrgn: HRGN?, lprect: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _hrgn = hrgn.rawValue
        val _lprect = lprect?.getPointer(memScope).rawValue
        val res = kni_RectInRegion(_hrgn, _lprect)
        res
    }
}

@SymbolName("win32_kni_RectInRegion")
private external fun kni_RectInRegion(hrgn: NativePtr, lprect: NativePtr): Int

fun RectVisible(hdc: HDC?, lprect: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lprect = lprect?.getPointer(memScope).rawValue
        val res = kni_RectVisible(_hdc, _lprect)
        res
    }
}

@SymbolName("win32_kni_RectVisible")
private external fun kni_RectVisible(hdc: NativePtr, lprect: NativePtr): Int

fun Rectangle(hdc: HDC?, left: Int, top: Int, right: Int, bottom: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _left = left
    val _top = top
    val _right = right
    val _bottom = bottom
    val res = kni_Rectangle(_hdc, _left, _top, _right, _bottom)
    return res
}

@SymbolName("win32_kni_Rectangle")
private external fun kni_Rectangle(hdc: NativePtr, left: Int, top: Int, right: Int, bottom: Int): Int

fun RestoreDC(hdc: HDC?, nSavedDC: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _nSavedDC = nSavedDC
    val res = kni_RestoreDC(_hdc, _nSavedDC)
    return res
}

@SymbolName("win32_kni_RestoreDC")
private external fun kni_RestoreDC(hdc: NativePtr, nSavedDC: Int): Int

fun ResetDCA(hdc: HDC?, lpdm: CValuesRef<DEVMODEA>?): HDC? {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpdm = lpdm?.getPointer(memScope).rawValue
        val res = kni_ResetDCA(_hdc, _lpdm)
        interpretCPointer<HDC__>(res)
    }
}

@SymbolName("win32_kni_ResetDCA")
private external fun kni_ResetDCA(hdc: NativePtr, lpdm: NativePtr): NativePtr

fun ResetDCW(hdc: HDC?, lpdm: CValuesRef<DEVMODEW>?): HDC? {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpdm = lpdm?.getPointer(memScope).rawValue
        val res = kni_ResetDCW(_hdc, _lpdm)
        interpretCPointer<HDC__>(res)
    }
}

@SymbolName("win32_kni_ResetDCW")
private external fun kni_ResetDCW(hdc: NativePtr, lpdm: NativePtr): NativePtr

fun RealizePalette(hdc: HDC?): UINT {
    val _hdc = hdc.rawValue
    val res = kni_RealizePalette(_hdc)
    return res
}

@SymbolName("win32_kni_RealizePalette")
private external fun kni_RealizePalette(hdc: NativePtr): Int

fun RemoveFontResourceA(lpFileName: String?): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_RemoveFontResourceA(_lpFileName)
        res
    }
}

@SymbolName("win32_kni_RemoveFontResourceA")
private external fun kni_RemoveFontResourceA(lpFileName: NativePtr): Int

fun RemoveFontResourceW(lpFileName: String?): WINBOOL {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_RemoveFontResourceW(_lpFileName)
        res
    }
}

@SymbolName("win32_kni_RemoveFontResourceW")
private external fun kni_RemoveFontResourceW(lpFileName: NativePtr): Int

fun RoundRect(hdc: HDC?, left: Int, top: Int, right: Int, bottom: Int, width: Int, height: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _left = left
    val _top = top
    val _right = right
    val _bottom = bottom
    val _width = width
    val _height = height
    val res = kni_RoundRect(_hdc, _left, _top, _right, _bottom, _width, _height)
    return res
}

@SymbolName("win32_kni_RoundRect")
private external fun kni_RoundRect(hdc: NativePtr, left: Int, top: Int, right: Int, bottom: Int, width: Int, height: Int): Int

fun ResizePalette(hpal: HPALETTE?, n: UINT): WINBOOL {
    val _hpal = hpal.rawValue
    val _n = n
    val res = kni_ResizePalette(_hpal, _n)
    return res
}

@SymbolName("win32_kni_ResizePalette")
private external fun kni_ResizePalette(hpal: NativePtr, n: Int): Int

fun SaveDC(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_SaveDC(_hdc)
    return res
}

@SymbolName("win32_kni_SaveDC")
private external fun kni_SaveDC(hdc: NativePtr): Int

fun SelectClipRgn(hdc: HDC?, hrgn: HRGN?): Int {
    val _hdc = hdc.rawValue
    val _hrgn = hrgn.rawValue
    val res = kni_SelectClipRgn(_hdc, _hrgn)
    return res
}

@SymbolName("win32_kni_SelectClipRgn")
private external fun kni_SelectClipRgn(hdc: NativePtr, hrgn: NativePtr): Int

fun ExtSelectClipRgn(hdc: HDC?, hrgn: HRGN?, mode: Int): Int {
    val _hdc = hdc.rawValue
    val _hrgn = hrgn.rawValue
    val _mode = mode
    val res = kni_ExtSelectClipRgn(_hdc, _hrgn, _mode)
    return res
}

@SymbolName("win32_kni_ExtSelectClipRgn")
private external fun kni_ExtSelectClipRgn(hdc: NativePtr, hrgn: NativePtr, mode: Int): Int

fun SetMetaRgn(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_SetMetaRgn(_hdc)
    return res
}

@SymbolName("win32_kni_SetMetaRgn")
private external fun kni_SetMetaRgn(hdc: NativePtr): Int

fun SelectObject(hdc: HDC?, h: HGDIOBJ?): HGDIOBJ? {
    val _hdc = hdc.rawValue
    val _h = h.rawValue
    val res = kni_SelectObject(_hdc, _h)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_SelectObject")
private external fun kni_SelectObject(hdc: NativePtr, h: NativePtr): NativePtr

fun SelectPalette(hdc: HDC?, hPal: HPALETTE?, bForceBkgd: WINBOOL): HPALETTE? {
    val _hdc = hdc.rawValue
    val _hPal = hPal.rawValue
    val _bForceBkgd = bForceBkgd
    val res = kni_SelectPalette(_hdc, _hPal, _bForceBkgd)
    return interpretCPointer<HPALETTE__>(res)
}

@SymbolName("win32_kni_SelectPalette")
private external fun kni_SelectPalette(hdc: NativePtr, hPal: NativePtr, bForceBkgd: Int): NativePtr

fun SetBkColor(hdc: HDC?, color: COLORREF): COLORREF {
    val _hdc = hdc.rawValue
    val _color = color
    val res = kni_SetBkColor(_hdc, _color)
    return res
}

@SymbolName("win32_kni_SetBkColor")
private external fun kni_SetBkColor(hdc: NativePtr, color: Int): Int

fun SetDCBrushColor(hdc: HDC?, color: COLORREF): COLORREF {
    val _hdc = hdc.rawValue
    val _color = color
    val res = kni_SetDCBrushColor(_hdc, _color)
    return res
}

@SymbolName("win32_kni_SetDCBrushColor")
private external fun kni_SetDCBrushColor(hdc: NativePtr, color: Int): Int

fun SetDCPenColor(hdc: HDC?, color: COLORREF): COLORREF {
    val _hdc = hdc.rawValue
    val _color = color
    val res = kni_SetDCPenColor(_hdc, _color)
    return res
}

@SymbolName("win32_kni_SetDCPenColor")
private external fun kni_SetDCPenColor(hdc: NativePtr, color: Int): Int

fun SetBkMode(hdc: HDC?, mode: Int): Int {
    val _hdc = hdc.rawValue
    val _mode = mode
    val res = kni_SetBkMode(_hdc, _mode)
    return res
}

@SymbolName("win32_kni_SetBkMode")
private external fun kni_SetBkMode(hdc: NativePtr, mode: Int): Int

fun SetBitmapBits(hbm: HBITMAP?, cb: DWORD, pvBits: COpaquePointer?): LONG {
    val _hbm = hbm.rawValue
    val _cb = cb
    val _pvBits = pvBits.rawValue
    val res = kni_SetBitmapBits(_hbm, _cb, _pvBits)
    return res
}

@SymbolName("win32_kni_SetBitmapBits")
private external fun kni_SetBitmapBits(hbm: NativePtr, cb: Int, pvBits: NativePtr): Int

fun SetBoundsRect(hdc: HDC?, lprect: CValuesRef<RECT>?, flags: UINT): UINT {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lprect = lprect?.getPointer(memScope).rawValue
        val _flags = flags
        val res = kni_SetBoundsRect(_hdc, _lprect, _flags)
        res
    }
}

@SymbolName("win32_kni_SetBoundsRect")
private external fun kni_SetBoundsRect(hdc: NativePtr, lprect: NativePtr, flags: Int): Int

fun SetDIBits(hdc: HDC?, hbm: HBITMAP?, start: UINT, cLines: UINT, lpBits: COpaquePointer?, lpbmi: CValuesRef<BITMAPINFO>?, ColorUse: UINT): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _hbm = hbm.rawValue
        val _start = start
        val _cLines = cLines
        val _lpBits = lpBits.rawValue
        val _lpbmi = lpbmi?.getPointer(memScope).rawValue
        val _ColorUse = ColorUse
        val res = kni_SetDIBits(_hdc, _hbm, _start, _cLines, _lpBits, _lpbmi, _ColorUse)
        res
    }
}

@SymbolName("win32_kni_SetDIBits")
private external fun kni_SetDIBits(hdc: NativePtr, hbm: NativePtr, start: Int, cLines: Int, lpBits: NativePtr, lpbmi: NativePtr, ColorUse: Int): Int

fun SetDIBitsToDevice(hdc: HDC?, xDest: Int, yDest: Int, w: DWORD, h: DWORD, xSrc: Int, ySrc: Int, StartScan: UINT, cLines: UINT, lpvBits: COpaquePointer?, lpbmi: CValuesRef<BITMAPINFO>?, ColorUse: UINT): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _xDest = xDest
        val _yDest = yDest
        val _w = w
        val _h = h
        val _xSrc = xSrc
        val _ySrc = ySrc
        val _StartScan = StartScan
        val _cLines = cLines
        val _lpvBits = lpvBits.rawValue
        val _lpbmi = lpbmi?.getPointer(memScope).rawValue
        val _ColorUse = ColorUse
        val res = kni_SetDIBitsToDevice(_hdc, _xDest, _yDest, _w, _h, _xSrc, _ySrc, _StartScan, _cLines, _lpvBits, _lpbmi, _ColorUse)
        res
    }
}

@SymbolName("win32_kni_SetDIBitsToDevice")
private external fun kni_SetDIBitsToDevice(hdc: NativePtr, xDest: Int, yDest: Int, w: Int, h: Int, xSrc: Int, ySrc: Int, StartScan: Int, cLines: Int, lpvBits: NativePtr, lpbmi: NativePtr, ColorUse: Int): Int

fun SetMapperFlags(hdc: HDC?, flags: DWORD): DWORD {
    val _hdc = hdc.rawValue
    val _flags = flags
    val res = kni_SetMapperFlags(_hdc, _flags)
    return res
}

@SymbolName("win32_kni_SetMapperFlags")
private external fun kni_SetMapperFlags(hdc: NativePtr, flags: Int): Int

fun SetGraphicsMode(hdc: HDC?, iMode: Int): Int {
    val _hdc = hdc.rawValue
    val _iMode = iMode
    val res = kni_SetGraphicsMode(_hdc, _iMode)
    return res
}

@SymbolName("win32_kni_SetGraphicsMode")
private external fun kni_SetGraphicsMode(hdc: NativePtr, iMode: Int): Int

fun SetMapMode(hdc: HDC?, iMode: Int): Int {
    val _hdc = hdc.rawValue
    val _iMode = iMode
    val res = kni_SetMapMode(_hdc, _iMode)
    return res
}

@SymbolName("win32_kni_SetMapMode")
private external fun kni_SetMapMode(hdc: NativePtr, iMode: Int): Int

fun SetLayout(hdc: HDC?, l: DWORD): DWORD {
    val _hdc = hdc.rawValue
    val _l = l
    val res = kni_SetLayout(_hdc, _l)
    return res
}

@SymbolName("win32_kni_SetLayout")
private external fun kni_SetLayout(hdc: NativePtr, l: Int): Int

fun GetLayout(hdc: HDC?): DWORD {
    val _hdc = hdc.rawValue
    val res = kni_GetLayout(_hdc)
    return res
}

@SymbolName("win32_kni_GetLayout")
private external fun kni_GetLayout(hdc: NativePtr): Int

fun SetMetaFileBitsEx(cbBuffer: UINT, lpData: CValuesRef<BYTEVar>?): HMETAFILE? {
    return memScoped {
        val _cbBuffer = cbBuffer
        val _lpData = lpData?.getPointer(memScope).rawValue
        val res = kni_SetMetaFileBitsEx(_cbBuffer, _lpData)
        interpretCPointer<HMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_SetMetaFileBitsEx")
private external fun kni_SetMetaFileBitsEx(cbBuffer: Int, lpData: NativePtr): NativePtr

fun SetPaletteEntries(hpal: HPALETTE?, iStart: UINT, cEntries: UINT, pPalEntries: CValuesRef<PALETTEENTRY>?): UINT {
    return memScoped {
        val _hpal = hpal.rawValue
        val _iStart = iStart
        val _cEntries = cEntries
        val _pPalEntries = pPalEntries?.getPointer(memScope).rawValue
        val res = kni_SetPaletteEntries(_hpal, _iStart, _cEntries, _pPalEntries)
        res
    }
}

@SymbolName("win32_kni_SetPaletteEntries")
private external fun kni_SetPaletteEntries(hpal: NativePtr, iStart: Int, cEntries: Int, pPalEntries: NativePtr): Int

fun SetPixel(hdc: HDC?, x: Int, y: Int, color: COLORREF): COLORREF {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _color = color
    val res = kni_SetPixel(_hdc, _x, _y, _color)
    return res
}

@SymbolName("win32_kni_SetPixel")
private external fun kni_SetPixel(hdc: NativePtr, x: Int, y: Int, color: Int): Int

fun SetPixelV(hdc: HDC?, x: Int, y: Int, color: COLORREF): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _color = color
    val res = kni_SetPixelV(_hdc, _x, _y, _color)
    return res
}

@SymbolName("win32_kni_SetPixelV")
private external fun kni_SetPixelV(hdc: NativePtr, x: Int, y: Int, color: Int): Int

fun SetPixelFormat(hdc: HDC?, format: Int, ppfd: CValuesRef<PIXELFORMATDESCRIPTOR>?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _format = format
        val _ppfd = ppfd?.getPointer(memScope).rawValue
        val res = kni_SetPixelFormat(_hdc, _format, _ppfd)
        res
    }
}

@SymbolName("win32_kni_SetPixelFormat")
private external fun kni_SetPixelFormat(hdc: NativePtr, format: Int, ppfd: NativePtr): Int

fun SetPolyFillMode(hdc: HDC?, mode: Int): Int {
    val _hdc = hdc.rawValue
    val _mode = mode
    val res = kni_SetPolyFillMode(_hdc, _mode)
    return res
}

@SymbolName("win32_kni_SetPolyFillMode")
private external fun kni_SetPolyFillMode(hdc: NativePtr, mode: Int): Int

fun StretchBlt(hdcDest: HDC?, xDest: Int, yDest: Int, wDest: Int, hDest: Int, hdcSrc: HDC?, xSrc: Int, ySrc: Int, wSrc: Int, hSrc: Int, rop: DWORD): WINBOOL {
    val _hdcDest = hdcDest.rawValue
    val _xDest = xDest
    val _yDest = yDest
    val _wDest = wDest
    val _hDest = hDest
    val _hdcSrc = hdcSrc.rawValue
    val _xSrc = xSrc
    val _ySrc = ySrc
    val _wSrc = wSrc
    val _hSrc = hSrc
    val _rop = rop
    val res = kni_StretchBlt(_hdcDest, _xDest, _yDest, _wDest, _hDest, _hdcSrc, _xSrc, _ySrc, _wSrc, _hSrc, _rop)
    return res
}

@SymbolName("win32_kni_StretchBlt")
private external fun kni_StretchBlt(hdcDest: NativePtr, xDest: Int, yDest: Int, wDest: Int, hDest: Int, hdcSrc: NativePtr, xSrc: Int, ySrc: Int, wSrc: Int, hSrc: Int, rop: Int): Int

fun SetRectRgn(hrgn: HRGN?, left: Int, top: Int, right: Int, bottom: Int): WINBOOL {
    val _hrgn = hrgn.rawValue
    val _left = left
    val _top = top
    val _right = right
    val _bottom = bottom
    val res = kni_SetRectRgn(_hrgn, _left, _top, _right, _bottom)
    return res
}

@SymbolName("win32_kni_SetRectRgn")
private external fun kni_SetRectRgn(hrgn: NativePtr, left: Int, top: Int, right: Int, bottom: Int): Int

fun StretchDIBits(hdc: HDC?, xDest: Int, yDest: Int, DestWidth: Int, DestHeight: Int, xSrc: Int, ySrc: Int, SrcWidth: Int, SrcHeight: Int, lpBits: COpaquePointer?, lpbmi: CValuesRef<BITMAPINFO>?, iUsage: UINT, rop: DWORD): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _xDest = xDest
        val _yDest = yDest
        val _DestWidth = DestWidth
        val _DestHeight = DestHeight
        val _xSrc = xSrc
        val _ySrc = ySrc
        val _SrcWidth = SrcWidth
        val _SrcHeight = SrcHeight
        val _lpBits = lpBits.rawValue
        val _lpbmi = lpbmi?.getPointer(memScope).rawValue
        val _iUsage = iUsage
        val _rop = rop
        val res = kni_StretchDIBits(_hdc, _xDest, _yDest, _DestWidth, _DestHeight, _xSrc, _ySrc, _SrcWidth, _SrcHeight, _lpBits, _lpbmi, _iUsage, _rop)
        res
    }
}

@SymbolName("win32_kni_StretchDIBits")
private external fun kni_StretchDIBits(hdc: NativePtr, xDest: Int, yDest: Int, DestWidth: Int, DestHeight: Int, xSrc: Int, ySrc: Int, SrcWidth: Int, SrcHeight: Int, lpBits: NativePtr, lpbmi: NativePtr, iUsage: Int, rop: Int): Int

fun SetROP2(hdc: HDC?, rop2: Int): Int {
    val _hdc = hdc.rawValue
    val _rop2 = rop2
    val res = kni_SetROP2(_hdc, _rop2)
    return res
}

@SymbolName("win32_kni_SetROP2")
private external fun kni_SetROP2(hdc: NativePtr, rop2: Int): Int

fun SetStretchBltMode(hdc: HDC?, mode: Int): Int {
    val _hdc = hdc.rawValue
    val _mode = mode
    val res = kni_SetStretchBltMode(_hdc, _mode)
    return res
}

@SymbolName("win32_kni_SetStretchBltMode")
private external fun kni_SetStretchBltMode(hdc: NativePtr, mode: Int): Int

fun SetSystemPaletteUse(hdc: HDC?, use: UINT): UINT {
    val _hdc = hdc.rawValue
    val _use = use
    val res = kni_SetSystemPaletteUse(_hdc, _use)
    return res
}

@SymbolName("win32_kni_SetSystemPaletteUse")
private external fun kni_SetSystemPaletteUse(hdc: NativePtr, use: Int): Int

fun SetTextCharacterExtra(hdc: HDC?, extra: Int): Int {
    val _hdc = hdc.rawValue
    val _extra = extra
    val res = kni_SetTextCharacterExtra(_hdc, _extra)
    return res
}

@SymbolName("win32_kni_SetTextCharacterExtra")
private external fun kni_SetTextCharacterExtra(hdc: NativePtr, extra: Int): Int

fun SetTextColor(hdc: HDC?, color: COLORREF): COLORREF {
    val _hdc = hdc.rawValue
    val _color = color
    val res = kni_SetTextColor(_hdc, _color)
    return res
}

@SymbolName("win32_kni_SetTextColor")
private external fun kni_SetTextColor(hdc: NativePtr, color: Int): Int

fun SetTextAlign(hdc: HDC?, align: UINT): UINT {
    val _hdc = hdc.rawValue
    val _align = align
    val res = kni_SetTextAlign(_hdc, _align)
    return res
}

@SymbolName("win32_kni_SetTextAlign")
private external fun kni_SetTextAlign(hdc: NativePtr, align: Int): Int

fun SetTextJustification(hdc: HDC?, extra: Int, count: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _extra = extra
    val _count = count
    val res = kni_SetTextJustification(_hdc, _extra, _count)
    return res
}

@SymbolName("win32_kni_SetTextJustification")
private external fun kni_SetTextJustification(hdc: NativePtr, extra: Int, count: Int): Int

fun UpdateColors(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_UpdateColors(_hdc)
    return res
}

@SymbolName("win32_kni_UpdateColors")
private external fun kni_UpdateColors(hdc: NativePtr): Int

fun AlphaBlend(hdcDest: HDC?, xoriginDest: Int, yoriginDest: Int, wDest: Int, hDest: Int, hdcSrc: HDC?, xoriginSrc: Int, yoriginSrc: Int, wSrc: Int, hSrc: Int, ftn: CValue<BLENDFUNCTION>): WINBOOL {
    return memScoped {
        val _hdcDest = hdcDest.rawValue
        val _xoriginDest = xoriginDest
        val _yoriginDest = yoriginDest
        val _wDest = wDest
        val _hDest = hDest
        val _hdcSrc = hdcSrc.rawValue
        val _xoriginSrc = xoriginSrc
        val _yoriginSrc = yoriginSrc
        val _wSrc = wSrc
        val _hSrc = hSrc
        val _ftn = ftn.getPointer(memScope).rawValue
        val res = kni_AlphaBlend(_hdcDest, _xoriginDest, _yoriginDest, _wDest, _hDest, _hdcSrc, _xoriginSrc, _yoriginSrc, _wSrc, _hSrc, _ftn)
        res
    }
}

@SymbolName("win32_kni_AlphaBlend")
private external fun kni_AlphaBlend(hdcDest: NativePtr, xoriginDest: Int, yoriginDest: Int, wDest: Int, hDest: Int, hdcSrc: NativePtr, xoriginSrc: Int, yoriginSrc: Int, wSrc: Int, hSrc: Int, ftn: NativePtr): Int

fun GdiAlphaBlend(hdcDest: HDC?, xoriginDest: Int, yoriginDest: Int, wDest: Int, hDest: Int, hdcSrc: HDC?, xoriginSrc: Int, yoriginSrc: Int, wSrc: Int, hSrc: Int, ftn: CValue<BLENDFUNCTION>): WINBOOL {
    return memScoped {
        val _hdcDest = hdcDest.rawValue
        val _xoriginDest = xoriginDest
        val _yoriginDest = yoriginDest
        val _wDest = wDest
        val _hDest = hDest
        val _hdcSrc = hdcSrc.rawValue
        val _xoriginSrc = xoriginSrc
        val _yoriginSrc = yoriginSrc
        val _wSrc = wSrc
        val _hSrc = hSrc
        val _ftn = ftn.getPointer(memScope).rawValue
        val res = kni_GdiAlphaBlend(_hdcDest, _xoriginDest, _yoriginDest, _wDest, _hDest, _hdcSrc, _xoriginSrc, _yoriginSrc, _wSrc, _hSrc, _ftn)
        res
    }
}

@SymbolName("win32_kni_GdiAlphaBlend")
private external fun kni_GdiAlphaBlend(hdcDest: NativePtr, xoriginDest: Int, yoriginDest: Int, wDest: Int, hDest: Int, hdcSrc: NativePtr, xoriginSrc: Int, yoriginSrc: Int, wSrc: Int, hSrc: Int, ftn: NativePtr): Int

fun TransparentBlt(hdcDest: HDC?, xoriginDest: Int, yoriginDest: Int, wDest: Int, hDest: Int, hdcSrc: HDC?, xoriginSrc: Int, yoriginSrc: Int, wSrc: Int, hSrc: Int, crTransparent: UINT): WINBOOL {
    val _hdcDest = hdcDest.rawValue
    val _xoriginDest = xoriginDest
    val _yoriginDest = yoriginDest
    val _wDest = wDest
    val _hDest = hDest
    val _hdcSrc = hdcSrc.rawValue
    val _xoriginSrc = xoriginSrc
    val _yoriginSrc = yoriginSrc
    val _wSrc = wSrc
    val _hSrc = hSrc
    val _crTransparent = crTransparent
    val res = kni_TransparentBlt(_hdcDest, _xoriginDest, _yoriginDest, _wDest, _hDest, _hdcSrc, _xoriginSrc, _yoriginSrc, _wSrc, _hSrc, _crTransparent)
    return res
}

@SymbolName("win32_kni_TransparentBlt")
private external fun kni_TransparentBlt(hdcDest: NativePtr, xoriginDest: Int, yoriginDest: Int, wDest: Int, hDest: Int, hdcSrc: NativePtr, xoriginSrc: Int, yoriginSrc: Int, wSrc: Int, hSrc: Int, crTransparent: Int): Int

fun GdiTransparentBlt(hdcDest: HDC?, xoriginDest: Int, yoriginDest: Int, wDest: Int, hDest: Int, hdcSrc: HDC?, xoriginSrc: Int, yoriginSrc: Int, wSrc: Int, hSrc: Int, crTransparent: UINT): WINBOOL {
    val _hdcDest = hdcDest.rawValue
    val _xoriginDest = xoriginDest
    val _yoriginDest = yoriginDest
    val _wDest = wDest
    val _hDest = hDest
    val _hdcSrc = hdcSrc.rawValue
    val _xoriginSrc = xoriginSrc
    val _yoriginSrc = yoriginSrc
    val _wSrc = wSrc
    val _hSrc = hSrc
    val _crTransparent = crTransparent
    val res = kni_GdiTransparentBlt(_hdcDest, _xoriginDest, _yoriginDest, _wDest, _hDest, _hdcSrc, _xoriginSrc, _yoriginSrc, _wSrc, _hSrc, _crTransparent)
    return res
}

@SymbolName("win32_kni_GdiTransparentBlt")
private external fun kni_GdiTransparentBlt(hdcDest: NativePtr, xoriginDest: Int, yoriginDest: Int, wDest: Int, hDest: Int, hdcSrc: NativePtr, xoriginSrc: Int, yoriginSrc: Int, wSrc: Int, hSrc: Int, crTransparent: Int): Int

fun GradientFill(hdc: HDC?, pVertex: PTRIVERTEX?, nVertex: ULONG, pMesh: PVOID?, nMesh: ULONG, ulMode: ULONG): WINBOOL {
    val _hdc = hdc.rawValue
    val _pVertex = pVertex.rawValue
    val _nVertex = nVertex
    val _pMesh = pMesh.rawValue
    val _nMesh = nMesh
    val _ulMode = ulMode
    val res = kni_GradientFill(_hdc, _pVertex, _nVertex, _pMesh, _nMesh, _ulMode)
    return res
}

@SymbolName("win32_kni_GradientFill")
private external fun kni_GradientFill(hdc: NativePtr, pVertex: NativePtr, nVertex: Int, pMesh: NativePtr, nMesh: Int, ulMode: Int): Int

fun GdiGradientFill(hdc: HDC?, pVertex: PTRIVERTEX?, nVertex: ULONG, pMesh: PVOID?, nMesh: ULONG, ulMode: ULONG): WINBOOL {
    val _hdc = hdc.rawValue
    val _pVertex = pVertex.rawValue
    val _nVertex = nVertex
    val _pMesh = pMesh.rawValue
    val _nMesh = nMesh
    val _ulMode = ulMode
    val res = kni_GdiGradientFill(_hdc, _pVertex, _nVertex, _pMesh, _nMesh, _ulMode)
    return res
}

@SymbolName("win32_kni_GdiGradientFill")
private external fun kni_GdiGradientFill(hdc: NativePtr, pVertex: NativePtr, nVertex: Int, pMesh: NativePtr, nMesh: Int, ulMode: Int): Int

fun PlayMetaFileRecord(hdc: HDC?, lpHandleTable: LPHANDLETABLE?, lpMR: LPMETARECORD?, noObjs: UINT): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpHandleTable = lpHandleTable.rawValue
    val _lpMR = lpMR.rawValue
    val _noObjs = noObjs
    val res = kni_PlayMetaFileRecord(_hdc, _lpHandleTable, _lpMR, _noObjs)
    return res
}

@SymbolName("win32_kni_PlayMetaFileRecord")
private external fun kni_PlayMetaFileRecord(hdc: NativePtr, lpHandleTable: NativePtr, lpMR: NativePtr, noObjs: Int): Int

fun EnumMetaFile(hdc: HDC?, hmf: HMETAFILE?, lpProc: MFENUMPROC?, lParam: LPARAM): WINBOOL {
    val _hdc = hdc.rawValue
    val _hmf = hmf.rawValue
    val _lpProc = lpProc.rawValue
    val _lParam = lParam
    val res = kni_EnumMetaFile(_hdc, _hmf, _lpProc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumMetaFile")
private external fun kni_EnumMetaFile(hdc: NativePtr, hmf: NativePtr, lpProc: NativePtr, lParam: Long): Int

fun CloseEnhMetaFile(hdc: HDC?): HENHMETAFILE? {
    val _hdc = hdc.rawValue
    val res = kni_CloseEnhMetaFile(_hdc)
    return interpretCPointer<HENHMETAFILE__>(res)
}

@SymbolName("win32_kni_CloseEnhMetaFile")
private external fun kni_CloseEnhMetaFile(hdc: NativePtr): NativePtr

fun CopyEnhMetaFileA(hEnh: HENHMETAFILE?, lpFileName: String?): HENHMETAFILE? {
    return memScoped {
        val _hEnh = hEnh.rawValue
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_CopyEnhMetaFileA(_hEnh, _lpFileName)
        interpretCPointer<HENHMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_CopyEnhMetaFileA")
private external fun kni_CopyEnhMetaFileA(hEnh: NativePtr, lpFileName: NativePtr): NativePtr

fun CopyEnhMetaFileW(hEnh: HENHMETAFILE?, lpFileName: String?): HENHMETAFILE? {
    return memScoped {
        val _hEnh = hEnh.rawValue
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CopyEnhMetaFileW(_hEnh, _lpFileName)
        interpretCPointer<HENHMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_CopyEnhMetaFileW")
private external fun kni_CopyEnhMetaFileW(hEnh: NativePtr, lpFileName: NativePtr): NativePtr

fun CreateEnhMetaFileA(hdc: HDC?, lpFilename: String?, lprc: CValuesRef<RECT>?, lpDesc: String?): HDC? {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpFilename = lpFilename?.cstr?.getPointer(memScope).rawValue
        val _lprc = lprc?.getPointer(memScope).rawValue
        val _lpDesc = lpDesc?.cstr?.getPointer(memScope).rawValue
        val res = kni_CreateEnhMetaFileA(_hdc, _lpFilename, _lprc, _lpDesc)
        interpretCPointer<HDC__>(res)
    }
}

@SymbolName("win32_kni_CreateEnhMetaFileA")
private external fun kni_CreateEnhMetaFileA(hdc: NativePtr, lpFilename: NativePtr, lprc: NativePtr, lpDesc: NativePtr): NativePtr

fun CreateEnhMetaFileW(hdc: HDC?, lpFilename: String?, lprc: CValuesRef<RECT>?, lpDesc: String?): HDC? {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpFilename = lpFilename?.wcstr?.getPointer(memScope).rawValue
        val _lprc = lprc?.getPointer(memScope).rawValue
        val _lpDesc = lpDesc?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CreateEnhMetaFileW(_hdc, _lpFilename, _lprc, _lpDesc)
        interpretCPointer<HDC__>(res)
    }
}

@SymbolName("win32_kni_CreateEnhMetaFileW")
private external fun kni_CreateEnhMetaFileW(hdc: NativePtr, lpFilename: NativePtr, lprc: NativePtr, lpDesc: NativePtr): NativePtr

fun DeleteEnhMetaFile(hmf: HENHMETAFILE?): WINBOOL {
    val _hmf = hmf.rawValue
    val res = kni_DeleteEnhMetaFile(_hmf)
    return res
}

@SymbolName("win32_kni_DeleteEnhMetaFile")
private external fun kni_DeleteEnhMetaFile(hmf: NativePtr): Int

fun EnumEnhMetaFile(hdc: HDC?, hmf: HENHMETAFILE?, lpProc: ENHMFENUMPROC?, lpParam: LPVOID?, lpRect: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _hmf = hmf.rawValue
        val _lpProc = lpProc.rawValue
        val _lpParam = lpParam.rawValue
        val _lpRect = lpRect?.getPointer(memScope).rawValue
        val res = kni_EnumEnhMetaFile(_hdc, _hmf, _lpProc, _lpParam, _lpRect)
        res
    }
}

@SymbolName("win32_kni_EnumEnhMetaFile")
private external fun kni_EnumEnhMetaFile(hdc: NativePtr, hmf: NativePtr, lpProc: NativePtr, lpParam: NativePtr, lpRect: NativePtr): Int

fun GetEnhMetaFileA(lpName: String?): HENHMETAFILE? {
    return memScoped {
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val res = kni_GetEnhMetaFileA(_lpName)
        interpretCPointer<HENHMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_GetEnhMetaFileA")
private external fun kni_GetEnhMetaFileA(lpName: NativePtr): NativePtr

fun GetEnhMetaFileW(lpName: String?): HENHMETAFILE? {
    return memScoped {
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_GetEnhMetaFileW(_lpName)
        interpretCPointer<HENHMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_GetEnhMetaFileW")
private external fun kni_GetEnhMetaFileW(lpName: NativePtr): NativePtr

fun GetEnhMetaFileBits(hEMF: HENHMETAFILE?, nSize: UINT, lpData: LPBYTE?): UINT {
    val _hEMF = hEMF.rawValue
    val _nSize = nSize
    val _lpData = lpData.rawValue
    val res = kni_GetEnhMetaFileBits(_hEMF, _nSize, _lpData)
    return res
}

@SymbolName("win32_kni_GetEnhMetaFileBits")
private external fun kni_GetEnhMetaFileBits(hEMF: NativePtr, nSize: Int, lpData: NativePtr): Int

fun GetEnhMetaFileDescriptionA(hemf: HENHMETAFILE?, cchBuffer: UINT, lpDescription: LPSTR?): UINT {
    val _hemf = hemf.rawValue
    val _cchBuffer = cchBuffer
    val _lpDescription = lpDescription.rawValue
    val res = kni_GetEnhMetaFileDescriptionA(_hemf, _cchBuffer, _lpDescription)
    return res
}

@SymbolName("win32_kni_GetEnhMetaFileDescriptionA")
private external fun kni_GetEnhMetaFileDescriptionA(hemf: NativePtr, cchBuffer: Int, lpDescription: NativePtr): Int

fun GetEnhMetaFileDescriptionW(hemf: HENHMETAFILE?, cchBuffer: UINT, lpDescription: LPWSTR?): UINT {
    val _hemf = hemf.rawValue
    val _cchBuffer = cchBuffer
    val _lpDescription = lpDescription.rawValue
    val res = kni_GetEnhMetaFileDescriptionW(_hemf, _cchBuffer, _lpDescription)
    return res
}

@SymbolName("win32_kni_GetEnhMetaFileDescriptionW")
private external fun kni_GetEnhMetaFileDescriptionW(hemf: NativePtr, cchBuffer: Int, lpDescription: NativePtr): Int

fun GetEnhMetaFileHeader(hemf: HENHMETAFILE?, nSize: UINT, lpEnhMetaHeader: LPENHMETAHEADER?): UINT {
    val _hemf = hemf.rawValue
    val _nSize = nSize
    val _lpEnhMetaHeader = lpEnhMetaHeader.rawValue
    val res = kni_GetEnhMetaFileHeader(_hemf, _nSize, _lpEnhMetaHeader)
    return res
}

@SymbolName("win32_kni_GetEnhMetaFileHeader")
private external fun kni_GetEnhMetaFileHeader(hemf: NativePtr, nSize: Int, lpEnhMetaHeader: NativePtr): Int

fun GetEnhMetaFilePaletteEntries(hemf: HENHMETAFILE?, nNumEntries: UINT, lpPaletteEntries: LPPALETTEENTRY?): UINT {
    val _hemf = hemf.rawValue
    val _nNumEntries = nNumEntries
    val _lpPaletteEntries = lpPaletteEntries.rawValue
    val res = kni_GetEnhMetaFilePaletteEntries(_hemf, _nNumEntries, _lpPaletteEntries)
    return res
}

@SymbolName("win32_kni_GetEnhMetaFilePaletteEntries")
private external fun kni_GetEnhMetaFilePaletteEntries(hemf: NativePtr, nNumEntries: Int, lpPaletteEntries: NativePtr): Int

fun GetEnhMetaFilePixelFormat(hemf: HENHMETAFILE?, cbBuffer: UINT, ppfd: CValuesRef<PIXELFORMATDESCRIPTOR>?): UINT {
    return memScoped {
        val _hemf = hemf.rawValue
        val _cbBuffer = cbBuffer
        val _ppfd = ppfd?.getPointer(memScope).rawValue
        val res = kni_GetEnhMetaFilePixelFormat(_hemf, _cbBuffer, _ppfd)
        res
    }
}

@SymbolName("win32_kni_GetEnhMetaFilePixelFormat")
private external fun kni_GetEnhMetaFilePixelFormat(hemf: NativePtr, cbBuffer: Int, ppfd: NativePtr): Int

fun GetWinMetaFileBits(hemf: HENHMETAFILE?, cbData16: UINT, pData16: LPBYTE?, iMapMode: INT, hdcRef: HDC?): UINT {
    val _hemf = hemf.rawValue
    val _cbData16 = cbData16
    val _pData16 = pData16.rawValue
    val _iMapMode = iMapMode
    val _hdcRef = hdcRef.rawValue
    val res = kni_GetWinMetaFileBits(_hemf, _cbData16, _pData16, _iMapMode, _hdcRef)
    return res
}

@SymbolName("win32_kni_GetWinMetaFileBits")
private external fun kni_GetWinMetaFileBits(hemf: NativePtr, cbData16: Int, pData16: NativePtr, iMapMode: Int, hdcRef: NativePtr): Int

fun PlayEnhMetaFile(hdc: HDC?, hmf: HENHMETAFILE?, lprect: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _hmf = hmf.rawValue
        val _lprect = lprect?.getPointer(memScope).rawValue
        val res = kni_PlayEnhMetaFile(_hdc, _hmf, _lprect)
        res
    }
}

@SymbolName("win32_kni_PlayEnhMetaFile")
private external fun kni_PlayEnhMetaFile(hdc: NativePtr, hmf: NativePtr, lprect: NativePtr): Int

fun PlayEnhMetaFileRecord(hdc: HDC?, pht: LPHANDLETABLE?, pmr: CValuesRef<ENHMETARECORD>?, cht: UINT): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _pht = pht.rawValue
        val _pmr = pmr?.getPointer(memScope).rawValue
        val _cht = cht
        val res = kni_PlayEnhMetaFileRecord(_hdc, _pht, _pmr, _cht)
        res
    }
}

@SymbolName("win32_kni_PlayEnhMetaFileRecord")
private external fun kni_PlayEnhMetaFileRecord(hdc: NativePtr, pht: NativePtr, pmr: NativePtr, cht: Int): Int

fun SetEnhMetaFileBits(nSize: UINT, pb: CValuesRef<BYTEVar>?): HENHMETAFILE? {
    return memScoped {
        val _nSize = nSize
        val _pb = pb?.getPointer(memScope).rawValue
        val res = kni_SetEnhMetaFileBits(_nSize, _pb)
        interpretCPointer<HENHMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_SetEnhMetaFileBits")
private external fun kni_SetEnhMetaFileBits(nSize: Int, pb: NativePtr): NativePtr

fun SetWinMetaFileBits(nSize: UINT, lpMeta16Data: CValuesRef<BYTEVar>?, hdcRef: HDC?, lpMFP: CValuesRef<METAFILEPICT>?): HENHMETAFILE? {
    return memScoped {
        val _nSize = nSize
        val _lpMeta16Data = lpMeta16Data?.getPointer(memScope).rawValue
        val _hdcRef = hdcRef.rawValue
        val _lpMFP = lpMFP?.getPointer(memScope).rawValue
        val res = kni_SetWinMetaFileBits(_nSize, _lpMeta16Data, _hdcRef, _lpMFP)
        interpretCPointer<HENHMETAFILE__>(res)
    }
}

@SymbolName("win32_kni_SetWinMetaFileBits")
private external fun kni_SetWinMetaFileBits(nSize: Int, lpMeta16Data: NativePtr, hdcRef: NativePtr, lpMFP: NativePtr): NativePtr

fun GdiComment(hdc: HDC?, nSize: UINT, lpData: CValuesRef<BYTEVar>?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _nSize = nSize
        val _lpData = lpData?.getPointer(memScope).rawValue
        val res = kni_GdiComment(_hdc, _nSize, _lpData)
        res
    }
}

@SymbolName("win32_kni_GdiComment")
private external fun kni_GdiComment(hdc: NativePtr, nSize: Int, lpData: NativePtr): Int

fun GetTextMetricsA(hdc: HDC?, lptm: LPTEXTMETRICA?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lptm = lptm.rawValue
    val res = kni_GetTextMetricsA(_hdc, _lptm)
    return res
}

@SymbolName("win32_kni_GetTextMetricsA")
private external fun kni_GetTextMetricsA(hdc: NativePtr, lptm: NativePtr): Int

fun GetTextMetricsW(hdc: HDC?, lptm: LPTEXTMETRICW?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lptm = lptm.rawValue
    val res = kni_GetTextMetricsW(_hdc, _lptm)
    return res
}

@SymbolName("win32_kni_GetTextMetricsW")
private external fun kni_GetTextMetricsW(hdc: NativePtr, lptm: NativePtr): Int

fun AngleArc(hdc: HDC?, x: Int, y: Int, r: DWORD, StartAngle: FLOAT, SweepAngle: FLOAT): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _r = r
    val _StartAngle = StartAngle
    val _SweepAngle = SweepAngle
    val res = kni_AngleArc(_hdc, _x, _y, _r, _StartAngle, _SweepAngle)
    return res
}

@SymbolName("win32_kni_AngleArc")
private external fun kni_AngleArc(hdc: NativePtr, x: Int, y: Int, r: Int, StartAngle: Float, SweepAngle: Float): Int

fun PolyPolyline(hdc: HDC?, apt: CValuesRef<POINT>?, asz: CValuesRef<DWORDVar>?, csz: DWORD): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _apt = apt?.getPointer(memScope).rawValue
        val _asz = asz?.getPointer(memScope).rawValue
        val _csz = csz
        val res = kni_PolyPolyline(_hdc, _apt, _asz, _csz)
        res
    }
}

@SymbolName("win32_kni_PolyPolyline")
private external fun kni_PolyPolyline(hdc: NativePtr, apt: NativePtr, asz: NativePtr, csz: Int): Int

fun GetWorldTransform(hdc: HDC?, lpxf: LPXFORM?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpxf = lpxf.rawValue
    val res = kni_GetWorldTransform(_hdc, _lpxf)
    return res
}

@SymbolName("win32_kni_GetWorldTransform")
private external fun kni_GetWorldTransform(hdc: NativePtr, lpxf: NativePtr): Int

fun SetWorldTransform(hdc: HDC?, lpxf: CValuesRef<XFORM>?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpxf = lpxf?.getPointer(memScope).rawValue
        val res = kni_SetWorldTransform(_hdc, _lpxf)
        res
    }
}

@SymbolName("win32_kni_SetWorldTransform")
private external fun kni_SetWorldTransform(hdc: NativePtr, lpxf: NativePtr): Int

fun ModifyWorldTransform(hdc: HDC?, lpxf: CValuesRef<XFORM>?, mode: DWORD): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpxf = lpxf?.getPointer(memScope).rawValue
        val _mode = mode
        val res = kni_ModifyWorldTransform(_hdc, _lpxf, _mode)
        res
    }
}

@SymbolName("win32_kni_ModifyWorldTransform")
private external fun kni_ModifyWorldTransform(hdc: NativePtr, lpxf: NativePtr, mode: Int): Int

fun CombineTransform(lpxfOut: LPXFORM?, lpxf1: CValuesRef<XFORM>?, lpxf2: CValuesRef<XFORM>?): WINBOOL {
    return memScoped {
        val _lpxfOut = lpxfOut.rawValue
        val _lpxf1 = lpxf1?.getPointer(memScope).rawValue
        val _lpxf2 = lpxf2?.getPointer(memScope).rawValue
        val res = kni_CombineTransform(_lpxfOut, _lpxf1, _lpxf2)
        res
    }
}

@SymbolName("win32_kni_CombineTransform")
private external fun kni_CombineTransform(lpxfOut: NativePtr, lpxf1: NativePtr, lpxf2: NativePtr): Int

fun CreateDIBSection(hdc: HDC?, lpbmi: CValuesRef<BITMAPINFO>?, usage: UINT, ppvBits: CValuesRef<COpaquePointerVar>?, hSection: HANDLE?, offset: DWORD): HBITMAP? {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpbmi = lpbmi?.getPointer(memScope).rawValue
        val _usage = usage
        val _ppvBits = ppvBits?.getPointer(memScope).rawValue
        val _hSection = hSection.rawValue
        val _offset = offset
        val res = kni_CreateDIBSection(_hdc, _lpbmi, _usage, _ppvBits, _hSection, _offset)
        interpretCPointer<HBITMAP__>(res)
    }
}

@SymbolName("win32_kni_CreateDIBSection")
private external fun kni_CreateDIBSection(hdc: NativePtr, lpbmi: NativePtr, usage: Int, ppvBits: NativePtr, hSection: NativePtr, offset: Int): NativePtr

fun GetDIBColorTable(hdc: HDC?, iStart: UINT, cEntries: UINT, prgbq: CValuesRef<RGBQUAD>?): UINT {
    return memScoped {
        val _hdc = hdc.rawValue
        val _iStart = iStart
        val _cEntries = cEntries
        val _prgbq = prgbq?.getPointer(memScope).rawValue
        val res = kni_GetDIBColorTable(_hdc, _iStart, _cEntries, _prgbq)
        res
    }
}

@SymbolName("win32_kni_GetDIBColorTable")
private external fun kni_GetDIBColorTable(hdc: NativePtr, iStart: Int, cEntries: Int, prgbq: NativePtr): Int

fun SetDIBColorTable(hdc: HDC?, iStart: UINT, cEntries: UINT, prgbq: CValuesRef<RGBQUAD>?): UINT {
    return memScoped {
        val _hdc = hdc.rawValue
        val _iStart = iStart
        val _cEntries = cEntries
        val _prgbq = prgbq?.getPointer(memScope).rawValue
        val res = kni_SetDIBColorTable(_hdc, _iStart, _cEntries, _prgbq)
        res
    }
}

@SymbolName("win32_kni_SetDIBColorTable")
private external fun kni_SetDIBColorTable(hdc: NativePtr, iStart: Int, cEntries: Int, prgbq: NativePtr): Int

fun SetColorAdjustment(hdc: HDC?, lpca: CValuesRef<COLORADJUSTMENT>?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpca = lpca?.getPointer(memScope).rawValue
        val res = kni_SetColorAdjustment(_hdc, _lpca)
        res
    }
}

@SymbolName("win32_kni_SetColorAdjustment")
private external fun kni_SetColorAdjustment(hdc: NativePtr, lpca: NativePtr): Int

fun GetColorAdjustment(hdc: HDC?, lpca: LPCOLORADJUSTMENT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpca = lpca.rawValue
    val res = kni_GetColorAdjustment(_hdc, _lpca)
    return res
}

@SymbolName("win32_kni_GetColorAdjustment")
private external fun kni_GetColorAdjustment(hdc: NativePtr, lpca: NativePtr): Int

fun CreateHalftonePalette(hdc: HDC?): HPALETTE? {
    val _hdc = hdc.rawValue
    val res = kni_CreateHalftonePalette(_hdc)
    return interpretCPointer<HPALETTE__>(res)
}

@SymbolName("win32_kni_CreateHalftonePalette")
private external fun kni_CreateHalftonePalette(hdc: NativePtr): NativePtr

fun StartDocA(hdc: HDC?, lpdi: CValuesRef<DOCINFOA>?): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpdi = lpdi?.getPointer(memScope).rawValue
        val res = kni_StartDocA(_hdc, _lpdi)
        res
    }
}

@SymbolName("win32_kni_StartDocA")
private external fun kni_StartDocA(hdc: NativePtr, lpdi: NativePtr): Int

fun StartDocW(hdc: HDC?, lpdi: CValuesRef<DOCINFOW>?): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpdi = lpdi?.getPointer(memScope).rawValue
        val res = kni_StartDocW(_hdc, _lpdi)
        res
    }
}

@SymbolName("win32_kni_StartDocW")
private external fun kni_StartDocW(hdc: NativePtr, lpdi: NativePtr): Int

fun EndDoc(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_EndDoc(_hdc)
    return res
}

@SymbolName("win32_kni_EndDoc")
private external fun kni_EndDoc(hdc: NativePtr): Int

fun StartPage(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_StartPage(_hdc)
    return res
}

@SymbolName("win32_kni_StartPage")
private external fun kni_StartPage(hdc: NativePtr): Int

fun EndPage(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_EndPage(_hdc)
    return res
}

@SymbolName("win32_kni_EndPage")
private external fun kni_EndPage(hdc: NativePtr): Int

fun AbortDoc(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_AbortDoc(_hdc)
    return res
}

@SymbolName("win32_kni_AbortDoc")
private external fun kni_AbortDoc(hdc: NativePtr): Int

fun SetAbortProc(hdc: HDC?, lpProc: ABORTPROC?): Int {
    val _hdc = hdc.rawValue
    val _lpProc = lpProc.rawValue
    val res = kni_SetAbortProc(_hdc, _lpProc)
    return res
}

@SymbolName("win32_kni_SetAbortProc")
private external fun kni_SetAbortProc(hdc: NativePtr, lpProc: NativePtr): Int

fun AbortPath(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_AbortPath(_hdc)
    return res
}

@SymbolName("win32_kni_AbortPath")
private external fun kni_AbortPath(hdc: NativePtr): Int

fun ArcTo(hdc: HDC?, left: Int, top: Int, right: Int, bottom: Int, xr1: Int, yr1: Int, xr2: Int, yr2: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _left = left
    val _top = top
    val _right = right
    val _bottom = bottom
    val _xr1 = xr1
    val _yr1 = yr1
    val _xr2 = xr2
    val _yr2 = yr2
    val res = kni_ArcTo(_hdc, _left, _top, _right, _bottom, _xr1, _yr1, _xr2, _yr2)
    return res
}

@SymbolName("win32_kni_ArcTo")
private external fun kni_ArcTo(hdc: NativePtr, left: Int, top: Int, right: Int, bottom: Int, xr1: Int, yr1: Int, xr2: Int, yr2: Int): Int

fun BeginPath(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_BeginPath(_hdc)
    return res
}

@SymbolName("win32_kni_BeginPath")
private external fun kni_BeginPath(hdc: NativePtr): Int

fun CloseFigure(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_CloseFigure(_hdc)
    return res
}

@SymbolName("win32_kni_CloseFigure")
private external fun kni_CloseFigure(hdc: NativePtr): Int

fun EndPath(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_EndPath(_hdc)
    return res
}

@SymbolName("win32_kni_EndPath")
private external fun kni_EndPath(hdc: NativePtr): Int

fun FillPath(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_FillPath(_hdc)
    return res
}

@SymbolName("win32_kni_FillPath")
private external fun kni_FillPath(hdc: NativePtr): Int

fun FlattenPath(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_FlattenPath(_hdc)
    return res
}

@SymbolName("win32_kni_FlattenPath")
private external fun kni_FlattenPath(hdc: NativePtr): Int

fun GetPath(hdc: HDC?, apt: LPPOINT?, aj: LPBYTE?, cpt: Int): Int {
    val _hdc = hdc.rawValue
    val _apt = apt.rawValue
    val _aj = aj.rawValue
    val _cpt = cpt
    val res = kni_GetPath(_hdc, _apt, _aj, _cpt)
    return res
}

@SymbolName("win32_kni_GetPath")
private external fun kni_GetPath(hdc: NativePtr, apt: NativePtr, aj: NativePtr, cpt: Int): Int

fun PathToRegion(hdc: HDC?): HRGN? {
    val _hdc = hdc.rawValue
    val res = kni_PathToRegion(_hdc)
    return interpretCPointer<HRGN__>(res)
}

@SymbolName("win32_kni_PathToRegion")
private external fun kni_PathToRegion(hdc: NativePtr): NativePtr

fun PolyDraw(hdc: HDC?, apt: CValuesRef<POINT>?, aj: CValuesRef<BYTEVar>?, cpt: Int): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _apt = apt?.getPointer(memScope).rawValue
        val _aj = aj?.getPointer(memScope).rawValue
        val _cpt = cpt
        val res = kni_PolyDraw(_hdc, _apt, _aj, _cpt)
        res
    }
}

@SymbolName("win32_kni_PolyDraw")
private external fun kni_PolyDraw(hdc: NativePtr, apt: NativePtr, aj: NativePtr, cpt: Int): Int

fun SelectClipPath(hdc: HDC?, mode: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _mode = mode
    val res = kni_SelectClipPath(_hdc, _mode)
    return res
}

@SymbolName("win32_kni_SelectClipPath")
private external fun kni_SelectClipPath(hdc: NativePtr, mode: Int): Int

fun SetArcDirection(hdc: HDC?, dir: Int): Int {
    val _hdc = hdc.rawValue
    val _dir = dir
    val res = kni_SetArcDirection(_hdc, _dir)
    return res
}

@SymbolName("win32_kni_SetArcDirection")
private external fun kni_SetArcDirection(hdc: NativePtr, dir: Int): Int

fun SetMiterLimit(hdc: HDC?, limit: FLOAT, old: PFLOAT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _limit = limit
    val _old = old.rawValue
    val res = kni_SetMiterLimit(_hdc, _limit, _old)
    return res
}

@SymbolName("win32_kni_SetMiterLimit")
private external fun kni_SetMiterLimit(hdc: NativePtr, limit: Float, old: NativePtr): Int

fun StrokeAndFillPath(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_StrokeAndFillPath(_hdc)
    return res
}

@SymbolName("win32_kni_StrokeAndFillPath")
private external fun kni_StrokeAndFillPath(hdc: NativePtr): Int

fun StrokePath(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_StrokePath(_hdc)
    return res
}

@SymbolName("win32_kni_StrokePath")
private external fun kni_StrokePath(hdc: NativePtr): Int

fun WidenPath(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_WidenPath(_hdc)
    return res
}

@SymbolName("win32_kni_WidenPath")
private external fun kni_WidenPath(hdc: NativePtr): Int

fun ExtCreatePen(iPenStyle: DWORD, cWidth: DWORD, plbrush: CValuesRef<LOGBRUSH>?, cStyle: DWORD, pstyle: CValuesRef<DWORDVar>?): HPEN? {
    return memScoped {
        val _iPenStyle = iPenStyle
        val _cWidth = cWidth
        val _plbrush = plbrush?.getPointer(memScope).rawValue
        val _cStyle = cStyle
        val _pstyle = pstyle?.getPointer(memScope).rawValue
        val res = kni_ExtCreatePen(_iPenStyle, _cWidth, _plbrush, _cStyle, _pstyle)
        interpretCPointer<HPEN__>(res)
    }
}

@SymbolName("win32_kni_ExtCreatePen")
private external fun kni_ExtCreatePen(iPenStyle: Int, cWidth: Int, plbrush: NativePtr, cStyle: Int, pstyle: NativePtr): NativePtr

fun GetMiterLimit(hdc: HDC?, plimit: PFLOAT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _plimit = plimit.rawValue
    val res = kni_GetMiterLimit(_hdc, _plimit)
    return res
}

@SymbolName("win32_kni_GetMiterLimit")
private external fun kni_GetMiterLimit(hdc: NativePtr, plimit: NativePtr): Int

fun GetArcDirection(hdc: HDC?): Int {
    val _hdc = hdc.rawValue
    val res = kni_GetArcDirection(_hdc)
    return res
}

@SymbolName("win32_kni_GetArcDirection")
private external fun kni_GetArcDirection(hdc: NativePtr): Int

fun GetObjectA(h: HANDLE?, c: Int, pv: LPVOID?): Int {
    val _h = h.rawValue
    val _c = c
    val _pv = pv.rawValue
    val res = kni_GetObjectA(_h, _c, _pv)
    return res
}

@SymbolName("win32_kni_GetObjectA")
private external fun kni_GetObjectA(h: NativePtr, c: Int, pv: NativePtr): Int

fun GetObjectW(h: HANDLE?, c: Int, pv: LPVOID?): Int {
    val _h = h.rawValue
    val _c = c
    val _pv = pv.rawValue
    val res = kni_GetObjectW(_h, _c, _pv)
    return res
}

@SymbolName("win32_kni_GetObjectW")
private external fun kni_GetObjectW(h: NativePtr, c: Int, pv: NativePtr): Int

fun MoveToEx(hdc: HDC?, x: Int, y: Int, lppt: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _lppt = lppt.rawValue
    val res = kni_MoveToEx(_hdc, _x, _y, _lppt)
    return res
}

@SymbolName("win32_kni_MoveToEx")
private external fun kni_MoveToEx(hdc: NativePtr, x: Int, y: Int, lppt: NativePtr): Int

fun TextOutA(hdc: HDC?, x: Int, y: Int, lpString: String?, c: Int): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _x = x
        val _y = y
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _c = c
        val res = kni_TextOutA(_hdc, _x, _y, _lpString, _c)
        res
    }
}

@SymbolName("win32_kni_TextOutA")
private external fun kni_TextOutA(hdc: NativePtr, x: Int, y: Int, lpString: NativePtr, c: Int): Int

fun TextOutW(hdc: HDC?, x: Int, y: Int, lpString: String?, c: Int): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _x = x
        val _y = y
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _c = c
        val res = kni_TextOutW(_hdc, _x, _y, _lpString, _c)
        res
    }
}

@SymbolName("win32_kni_TextOutW")
private external fun kni_TextOutW(hdc: NativePtr, x: Int, y: Int, lpString: NativePtr, c: Int): Int

fun ExtTextOutA(hdc: HDC?, x: Int, y: Int, options: UINT, lprect: CValuesRef<RECT>?, lpString: String?, c: UINT, lpDx: CValuesRef<INTVar>?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _x = x
        val _y = y
        val _options = options
        val _lprect = lprect?.getPointer(memScope).rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _c = c
        val _lpDx = lpDx?.getPointer(memScope).rawValue
        val res = kni_ExtTextOutA(_hdc, _x, _y, _options, _lprect, _lpString, _c, _lpDx)
        res
    }
}

@SymbolName("win32_kni_ExtTextOutA")
private external fun kni_ExtTextOutA(hdc: NativePtr, x: Int, y: Int, options: Int, lprect: NativePtr, lpString: NativePtr, c: Int, lpDx: NativePtr): Int

fun ExtTextOutW(hdc: HDC?, x: Int, y: Int, options: UINT, lprect: CValuesRef<RECT>?, lpString: String?, c: UINT, lpDx: CValuesRef<INTVar>?): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _x = x
        val _y = y
        val _options = options
        val _lprect = lprect?.getPointer(memScope).rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _c = c
        val _lpDx = lpDx?.getPointer(memScope).rawValue
        val res = kni_ExtTextOutW(_hdc, _x, _y, _options, _lprect, _lpString, _c, _lpDx)
        res
    }
}

@SymbolName("win32_kni_ExtTextOutW")
private external fun kni_ExtTextOutW(hdc: NativePtr, x: Int, y: Int, options: Int, lprect: NativePtr, lpString: NativePtr, c: Int, lpDx: NativePtr): Int

fun PolyTextOutA(hdc: HDC?, ppt: CValuesRef<POLYTEXTA>?, nstrings: Int): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _ppt = ppt?.getPointer(memScope).rawValue
        val _nstrings = nstrings
        val res = kni_PolyTextOutA(_hdc, _ppt, _nstrings)
        res
    }
}

@SymbolName("win32_kni_PolyTextOutA")
private external fun kni_PolyTextOutA(hdc: NativePtr, ppt: NativePtr, nstrings: Int): Int

fun PolyTextOutW(hdc: HDC?, ppt: CValuesRef<POLYTEXTW>?, nstrings: Int): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _ppt = ppt?.getPointer(memScope).rawValue
        val _nstrings = nstrings
        val res = kni_PolyTextOutW(_hdc, _ppt, _nstrings)
        res
    }
}

@SymbolName("win32_kni_PolyTextOutW")
private external fun kni_PolyTextOutW(hdc: NativePtr, ppt: NativePtr, nstrings: Int): Int

fun CreatePolygonRgn(pptl: CValuesRef<POINT>?, cPoint: Int, iMode: Int): HRGN? {
    return memScoped {
        val _pptl = pptl?.getPointer(memScope).rawValue
        val _cPoint = cPoint
        val _iMode = iMode
        val res = kni_CreatePolygonRgn(_pptl, _cPoint, _iMode)
        interpretCPointer<HRGN__>(res)
    }
}

@SymbolName("win32_kni_CreatePolygonRgn")
private external fun kni_CreatePolygonRgn(pptl: NativePtr, cPoint: Int, iMode: Int): NativePtr

fun DPtoLP(hdc: HDC?, lppt: LPPOINT?, c: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _lppt = lppt.rawValue
    val _c = c
    val res = kni_DPtoLP(_hdc, _lppt, _c)
    return res
}

@SymbolName("win32_kni_DPtoLP")
private external fun kni_DPtoLP(hdc: NativePtr, lppt: NativePtr, c: Int): Int

fun LPtoDP(hdc: HDC?, lppt: LPPOINT?, c: Int): WINBOOL {
    val _hdc = hdc.rawValue
    val _lppt = lppt.rawValue
    val _c = c
    val res = kni_LPtoDP(_hdc, _lppt, _c)
    return res
}

@SymbolName("win32_kni_LPtoDP")
private external fun kni_LPtoDP(hdc: NativePtr, lppt: NativePtr, c: Int): Int

fun Polygon(hdc: HDC?, apt: CValuesRef<POINT>?, cpt: Int): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _apt = apt?.getPointer(memScope).rawValue
        val _cpt = cpt
        val res = kni_Polygon(_hdc, _apt, _cpt)
        res
    }
}

@SymbolName("win32_kni_Polygon")
private external fun kni_Polygon(hdc: NativePtr, apt: NativePtr, cpt: Int): Int

fun Polyline(hdc: HDC?, apt: CValuesRef<POINT>?, cpt: Int): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _apt = apt?.getPointer(memScope).rawValue
        val _cpt = cpt
        val res = kni_Polyline(_hdc, _apt, _cpt)
        res
    }
}

@SymbolName("win32_kni_Polyline")
private external fun kni_Polyline(hdc: NativePtr, apt: NativePtr, cpt: Int): Int

fun PolyBezier(hdc: HDC?, apt: CValuesRef<POINT>?, cpt: DWORD): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _apt = apt?.getPointer(memScope).rawValue
        val _cpt = cpt
        val res = kni_PolyBezier(_hdc, _apt, _cpt)
        res
    }
}

@SymbolName("win32_kni_PolyBezier")
private external fun kni_PolyBezier(hdc: NativePtr, apt: NativePtr, cpt: Int): Int

fun PolyBezierTo(hdc: HDC?, apt: CValuesRef<POINT>?, cpt: DWORD): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _apt = apt?.getPointer(memScope).rawValue
        val _cpt = cpt
        val res = kni_PolyBezierTo(_hdc, _apt, _cpt)
        res
    }
}

@SymbolName("win32_kni_PolyBezierTo")
private external fun kni_PolyBezierTo(hdc: NativePtr, apt: NativePtr, cpt: Int): Int

fun PolylineTo(hdc: HDC?, apt: CValuesRef<POINT>?, cpt: DWORD): WINBOOL {
    return memScoped {
        val _hdc = hdc.rawValue
        val _apt = apt?.getPointer(memScope).rawValue
        val _cpt = cpt
        val res = kni_PolylineTo(_hdc, _apt, _cpt)
        res
    }
}

@SymbolName("win32_kni_PolylineTo")
private external fun kni_PolylineTo(hdc: NativePtr, apt: NativePtr, cpt: Int): Int

fun SetViewportExtEx(hdc: HDC?, x: Int, y: Int, lpsz: LPSIZE?): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _lpsz = lpsz.rawValue
    val res = kni_SetViewportExtEx(_hdc, _x, _y, _lpsz)
    return res
}

@SymbolName("win32_kni_SetViewportExtEx")
private external fun kni_SetViewportExtEx(hdc: NativePtr, x: Int, y: Int, lpsz: NativePtr): Int

fun SetViewportOrgEx(hdc: HDC?, x: Int, y: Int, lppt: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _lppt = lppt.rawValue
    val res = kni_SetViewportOrgEx(_hdc, _x, _y, _lppt)
    return res
}

@SymbolName("win32_kni_SetViewportOrgEx")
private external fun kni_SetViewportOrgEx(hdc: NativePtr, x: Int, y: Int, lppt: NativePtr): Int

fun SetWindowExtEx(hdc: HDC?, x: Int, y: Int, lpsz: LPSIZE?): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _lpsz = lpsz.rawValue
    val res = kni_SetWindowExtEx(_hdc, _x, _y, _lpsz)
    return res
}

@SymbolName("win32_kni_SetWindowExtEx")
private external fun kni_SetWindowExtEx(hdc: NativePtr, x: Int, y: Int, lpsz: NativePtr): Int

fun SetWindowOrgEx(hdc: HDC?, x: Int, y: Int, lppt: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _lppt = lppt.rawValue
    val res = kni_SetWindowOrgEx(_hdc, _x, _y, _lppt)
    return res
}

@SymbolName("win32_kni_SetWindowOrgEx")
private external fun kni_SetWindowOrgEx(hdc: NativePtr, x: Int, y: Int, lppt: NativePtr): Int

fun OffsetViewportOrgEx(hdc: HDC?, x: Int, y: Int, lppt: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _lppt = lppt.rawValue
    val res = kni_OffsetViewportOrgEx(_hdc, _x, _y, _lppt)
    return res
}

@SymbolName("win32_kni_OffsetViewportOrgEx")
private external fun kni_OffsetViewportOrgEx(hdc: NativePtr, x: Int, y: Int, lppt: NativePtr): Int

fun OffsetWindowOrgEx(hdc: HDC?, x: Int, y: Int, lppt: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _lppt = lppt.rawValue
    val res = kni_OffsetWindowOrgEx(_hdc, _x, _y, _lppt)
    return res
}

@SymbolName("win32_kni_OffsetWindowOrgEx")
private external fun kni_OffsetWindowOrgEx(hdc: NativePtr, x: Int, y: Int, lppt: NativePtr): Int

fun ScaleViewportExtEx(hdc: HDC?, xn: Int, dx: Int, yn: Int, yd: Int, lpsz: LPSIZE?): WINBOOL {
    val _hdc = hdc.rawValue
    val _xn = xn
    val _dx = dx
    val _yn = yn
    val _yd = yd
    val _lpsz = lpsz.rawValue
    val res = kni_ScaleViewportExtEx(_hdc, _xn, _dx, _yn, _yd, _lpsz)
    return res
}

@SymbolName("win32_kni_ScaleViewportExtEx")
private external fun kni_ScaleViewportExtEx(hdc: NativePtr, xn: Int, dx: Int, yn: Int, yd: Int, lpsz: NativePtr): Int

fun ScaleWindowExtEx(hdc: HDC?, xn: Int, xd: Int, yn: Int, yd: Int, lpsz: LPSIZE?): WINBOOL {
    val _hdc = hdc.rawValue
    val _xn = xn
    val _xd = xd
    val _yn = yn
    val _yd = yd
    val _lpsz = lpsz.rawValue
    val res = kni_ScaleWindowExtEx(_hdc, _xn, _xd, _yn, _yd, _lpsz)
    return res
}

@SymbolName("win32_kni_ScaleWindowExtEx")
private external fun kni_ScaleWindowExtEx(hdc: NativePtr, xn: Int, xd: Int, yn: Int, yd: Int, lpsz: NativePtr): Int

fun SetBitmapDimensionEx(hbm: HBITMAP?, w: Int, h: Int, lpsz: LPSIZE?): WINBOOL {
    val _hbm = hbm.rawValue
    val _w = w
    val _h = h
    val _lpsz = lpsz.rawValue
    val res = kni_SetBitmapDimensionEx(_hbm, _w, _h, _lpsz)
    return res
}

@SymbolName("win32_kni_SetBitmapDimensionEx")
private external fun kni_SetBitmapDimensionEx(hbm: NativePtr, w: Int, h: Int, lpsz: NativePtr): Int

fun SetBrushOrgEx(hdc: HDC?, x: Int, y: Int, lppt: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _lppt = lppt.rawValue
    val res = kni_SetBrushOrgEx(_hdc, _x, _y, _lppt)
    return res
}

@SymbolName("win32_kni_SetBrushOrgEx")
private external fun kni_SetBrushOrgEx(hdc: NativePtr, x: Int, y: Int, lppt: NativePtr): Int

fun GetTextFaceA(hdc: HDC?, c: Int, lpName: LPSTR?): Int {
    val _hdc = hdc.rawValue
    val _c = c
    val _lpName = lpName.rawValue
    val res = kni_GetTextFaceA(_hdc, _c, _lpName)
    return res
}

@SymbolName("win32_kni_GetTextFaceA")
private external fun kni_GetTextFaceA(hdc: NativePtr, c: Int, lpName: NativePtr): Int

fun GetTextFaceW(hdc: HDC?, c: Int, lpName: LPWSTR?): Int {
    val _hdc = hdc.rawValue
    val _c = c
    val _lpName = lpName.rawValue
    val res = kni_GetTextFaceW(_hdc, _c, _lpName)
    return res
}

@SymbolName("win32_kni_GetTextFaceW")
private external fun kni_GetTextFaceW(hdc: NativePtr, c: Int, lpName: NativePtr): Int

fun GetKerningPairsA(hdc: HDC?, nPairs: DWORD, lpKernPair: LPKERNINGPAIR?): DWORD {
    val _hdc = hdc.rawValue
    val _nPairs = nPairs
    val _lpKernPair = lpKernPair.rawValue
    val res = kni_GetKerningPairsA(_hdc, _nPairs, _lpKernPair)
    return res
}

@SymbolName("win32_kni_GetKerningPairsA")
private external fun kni_GetKerningPairsA(hdc: NativePtr, nPairs: Int, lpKernPair: NativePtr): Int

fun GetKerningPairsW(hdc: HDC?, nPairs: DWORD, lpKernPair: LPKERNINGPAIR?): DWORD {
    val _hdc = hdc.rawValue
    val _nPairs = nPairs
    val _lpKernPair = lpKernPair.rawValue
    val res = kni_GetKerningPairsW(_hdc, _nPairs, _lpKernPair)
    return res
}

@SymbolName("win32_kni_GetKerningPairsW")
private external fun kni_GetKerningPairsW(hdc: NativePtr, nPairs: Int, lpKernPair: NativePtr): Int

fun GetDCOrgEx(hdc: HDC?, lppt: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lppt = lppt.rawValue
    val res = kni_GetDCOrgEx(_hdc, _lppt)
    return res
}

@SymbolName("win32_kni_GetDCOrgEx")
private external fun kni_GetDCOrgEx(hdc: NativePtr, lppt: NativePtr): Int

fun FixBrushOrgEx(hdc: HDC?, x: Int, y: Int, ptl: LPPOINT?): WINBOOL {
    val _hdc = hdc.rawValue
    val _x = x
    val _y = y
    val _ptl = ptl.rawValue
    val res = kni_FixBrushOrgEx(_hdc, _x, _y, _ptl)
    return res
}

@SymbolName("win32_kni_FixBrushOrgEx")
private external fun kni_FixBrushOrgEx(hdc: NativePtr, x: Int, y: Int, ptl: NativePtr): Int

fun UnrealizeObject(h: HGDIOBJ?): WINBOOL {
    val _h = h.rawValue
    val res = kni_UnrealizeObject(_h)
    return res
}

@SymbolName("win32_kni_UnrealizeObject")
private external fun kni_UnrealizeObject(h: NativePtr): Int

fun GdiFlush(): WINBOOL {
    val res = kni_GdiFlush()
    return res
}

@SymbolName("win32_kni_GdiFlush")
private external fun kni_GdiFlush(): Int

fun GdiSetBatchLimit(dw: DWORD): DWORD {
    val _dw = dw
    val res = kni_GdiSetBatchLimit(_dw)
    return res
}

@SymbolName("win32_kni_GdiSetBatchLimit")
private external fun kni_GdiSetBatchLimit(dw: Int): Int

fun GdiGetBatchLimit(): DWORD {
    val res = kni_GdiGetBatchLimit()
    return res
}

@SymbolName("win32_kni_GdiGetBatchLimit")
private external fun kni_GdiGetBatchLimit(): Int

fun SetICMMode(hdc: HDC?, mode: Int): Int {
    val _hdc = hdc.rawValue
    val _mode = mode
    val res = kni_SetICMMode(_hdc, _mode)
    return res
}

@SymbolName("win32_kni_SetICMMode")
private external fun kni_SetICMMode(hdc: NativePtr, mode: Int): Int

fun CheckColorsInGamut(hdc: HDC?, lpRGBTriple: LPVOID?, dlpBuffer: LPVOID?, nCount: DWORD): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpRGBTriple = lpRGBTriple.rawValue
    val _dlpBuffer = dlpBuffer.rawValue
    val _nCount = nCount
    val res = kni_CheckColorsInGamut(_hdc, _lpRGBTriple, _dlpBuffer, _nCount)
    return res
}

@SymbolName("win32_kni_CheckColorsInGamut")
private external fun kni_CheckColorsInGamut(hdc: NativePtr, lpRGBTriple: NativePtr, dlpBuffer: NativePtr, nCount: Int): Int

fun GetColorSpace(hdc: HDC?): HCOLORSPACE? {
    val _hdc = hdc.rawValue
    val res = kni_GetColorSpace(_hdc)
    return interpretCPointer<HCOLORSPACE__>(res)
}

@SymbolName("win32_kni_GetColorSpace")
private external fun kni_GetColorSpace(hdc: NativePtr): NativePtr

fun GetLogColorSpaceA(hColorSpace: HCOLORSPACE?, lpBuffer: LPLOGCOLORSPACEA?, nSize: DWORD): WINBOOL {
    val _hColorSpace = hColorSpace.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nSize = nSize
    val res = kni_GetLogColorSpaceA(_hColorSpace, _lpBuffer, _nSize)
    return res
}

@SymbolName("win32_kni_GetLogColorSpaceA")
private external fun kni_GetLogColorSpaceA(hColorSpace: NativePtr, lpBuffer: NativePtr, nSize: Int): Int

fun GetLogColorSpaceW(hColorSpace: HCOLORSPACE?, lpBuffer: LPLOGCOLORSPACEW?, nSize: DWORD): WINBOOL {
    val _hColorSpace = hColorSpace.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nSize = nSize
    val res = kni_GetLogColorSpaceW(_hColorSpace, _lpBuffer, _nSize)
    return res
}

@SymbolName("win32_kni_GetLogColorSpaceW")
private external fun kni_GetLogColorSpaceW(hColorSpace: NativePtr, lpBuffer: NativePtr, nSize: Int): Int

fun CreateColorSpaceA(lplcs: LPLOGCOLORSPACEA?): HCOLORSPACE? {
    val _lplcs = lplcs.rawValue
    val res = kni_CreateColorSpaceA(_lplcs)
    return interpretCPointer<HCOLORSPACE__>(res)
}

@SymbolName("win32_kni_CreateColorSpaceA")
private external fun kni_CreateColorSpaceA(lplcs: NativePtr): NativePtr

fun CreateColorSpaceW(lplcs: LPLOGCOLORSPACEW?): HCOLORSPACE? {
    val _lplcs = lplcs.rawValue
    val res = kni_CreateColorSpaceW(_lplcs)
    return interpretCPointer<HCOLORSPACE__>(res)
}

@SymbolName("win32_kni_CreateColorSpaceW")
private external fun kni_CreateColorSpaceW(lplcs: NativePtr): NativePtr

fun SetColorSpace(hdc: HDC?, hcs: HCOLORSPACE?): HCOLORSPACE? {
    val _hdc = hdc.rawValue
    val _hcs = hcs.rawValue
    val res = kni_SetColorSpace(_hdc, _hcs)
    return interpretCPointer<HCOLORSPACE__>(res)
}

@SymbolName("win32_kni_SetColorSpace")
private external fun kni_SetColorSpace(hdc: NativePtr, hcs: NativePtr): NativePtr

fun DeleteColorSpace(hcs: HCOLORSPACE?): WINBOOL {
    val _hcs = hcs.rawValue
    val res = kni_DeleteColorSpace(_hcs)
    return res
}

@SymbolName("win32_kni_DeleteColorSpace")
private external fun kni_DeleteColorSpace(hcs: NativePtr): Int

fun GetICMProfileA(hdc: HDC?, pBufSize: LPDWORD?, pszFilename: LPSTR?): WINBOOL {
    val _hdc = hdc.rawValue
    val _pBufSize = pBufSize.rawValue
    val _pszFilename = pszFilename.rawValue
    val res = kni_GetICMProfileA(_hdc, _pBufSize, _pszFilename)
    return res
}

@SymbolName("win32_kni_GetICMProfileA")
private external fun kni_GetICMProfileA(hdc: NativePtr, pBufSize: NativePtr, pszFilename: NativePtr): Int

fun GetICMProfileW(hdc: HDC?, pBufSize: LPDWORD?, pszFilename: LPWSTR?): WINBOOL {
    val _hdc = hdc.rawValue
    val _pBufSize = pBufSize.rawValue
    val _pszFilename = pszFilename.rawValue
    val res = kni_GetICMProfileW(_hdc, _pBufSize, _pszFilename)
    return res
}

@SymbolName("win32_kni_GetICMProfileW")
private external fun kni_GetICMProfileW(hdc: NativePtr, pBufSize: NativePtr, pszFilename: NativePtr): Int

fun SetICMProfileA(hdc: HDC?, lpFileName: LPSTR?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpFileName = lpFileName.rawValue
    val res = kni_SetICMProfileA(_hdc, _lpFileName)
    return res
}

@SymbolName("win32_kni_SetICMProfileA")
private external fun kni_SetICMProfileA(hdc: NativePtr, lpFileName: NativePtr): Int

fun SetICMProfileW(hdc: HDC?, lpFileName: LPWSTR?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpFileName = lpFileName.rawValue
    val res = kni_SetICMProfileW(_hdc, _lpFileName)
    return res
}

@SymbolName("win32_kni_SetICMProfileW")
private external fun kni_SetICMProfileW(hdc: NativePtr, lpFileName: NativePtr): Int

fun GetDeviceGammaRamp(hdc: HDC?, lpRamp: LPVOID?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpRamp = lpRamp.rawValue
    val res = kni_GetDeviceGammaRamp(_hdc, _lpRamp)
    return res
}

@SymbolName("win32_kni_GetDeviceGammaRamp")
private external fun kni_GetDeviceGammaRamp(hdc: NativePtr, lpRamp: NativePtr): Int

fun SetDeviceGammaRamp(hdc: HDC?, lpRamp: LPVOID?): WINBOOL {
    val _hdc = hdc.rawValue
    val _lpRamp = lpRamp.rawValue
    val res = kni_SetDeviceGammaRamp(_hdc, _lpRamp)
    return res
}

@SymbolName("win32_kni_SetDeviceGammaRamp")
private external fun kni_SetDeviceGammaRamp(hdc: NativePtr, lpRamp: NativePtr): Int

fun ColorMatchToTarget(hdc: HDC?, hdcTarget: HDC?, action: DWORD): WINBOOL {
    val _hdc = hdc.rawValue
    val _hdcTarget = hdcTarget.rawValue
    val _action = action
    val res = kni_ColorMatchToTarget(_hdc, _hdcTarget, _action)
    return res
}

@SymbolName("win32_kni_ColorMatchToTarget")
private external fun kni_ColorMatchToTarget(hdc: NativePtr, hdcTarget: NativePtr, action: Int): Int

fun EnumICMProfilesA(hdc: HDC?, lpProc: ICMENUMPROCA?, lParam: LPARAM): Int {
    val _hdc = hdc.rawValue
    val _lpProc = lpProc.rawValue
    val _lParam = lParam
    val res = kni_EnumICMProfilesA(_hdc, _lpProc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumICMProfilesA")
private external fun kni_EnumICMProfilesA(hdc: NativePtr, lpProc: NativePtr, lParam: Long): Int

fun EnumICMProfilesW(hdc: HDC?, lpProc: ICMENUMPROCW?, lParam: LPARAM): Int {
    val _hdc = hdc.rawValue
    val _lpProc = lpProc.rawValue
    val _lParam = lParam
    val res = kni_EnumICMProfilesW(_hdc, _lpProc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumICMProfilesW")
private external fun kni_EnumICMProfilesW(hdc: NativePtr, lpProc: NativePtr, lParam: Long): Int

fun UpdateICMRegKeyA(reserved: DWORD, lpszCMID: LPSTR?, lpszFileName: LPSTR?, command: UINT): WINBOOL {
    val _reserved = reserved
    val _lpszCMID = lpszCMID.rawValue
    val _lpszFileName = lpszFileName.rawValue
    val _command = command
    val res = kni_UpdateICMRegKeyA(_reserved, _lpszCMID, _lpszFileName, _command)
    return res
}

@SymbolName("win32_kni_UpdateICMRegKeyA")
private external fun kni_UpdateICMRegKeyA(reserved: Int, lpszCMID: NativePtr, lpszFileName: NativePtr, command: Int): Int

fun UpdateICMRegKeyW(reserved: DWORD, lpszCMID: LPWSTR?, lpszFileName: LPWSTR?, command: UINT): WINBOOL {
    val _reserved = reserved
    val _lpszCMID = lpszCMID.rawValue
    val _lpszFileName = lpszFileName.rawValue
    val _command = command
    val res = kni_UpdateICMRegKeyW(_reserved, _lpszCMID, _lpszFileName, _command)
    return res
}

@SymbolName("win32_kni_UpdateICMRegKeyW")
private external fun kni_UpdateICMRegKeyW(reserved: Int, lpszCMID: NativePtr, lpszFileName: NativePtr, command: Int): Int

fun ColorCorrectPalette(hdc: HDC?, hPal: HPALETTE?, deFirst: DWORD, num: DWORD): WINBOOL {
    val _hdc = hdc.rawValue
    val _hPal = hPal.rawValue
    val _deFirst = deFirst
    val _num = num
    val res = kni_ColorCorrectPalette(_hdc, _hPal, _deFirst, _num)
    return res
}

@SymbolName("win32_kni_ColorCorrectPalette")
private external fun kni_ColorCorrectPalette(hdc: NativePtr, hPal: NativePtr, deFirst: Int, num: Int): Int

fun wglCopyContext(arg0: HGLRC?, arg1: HGLRC?, arg2: UINT): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1.rawValue
    val _arg2 = arg2
    val res = kni_wglCopyContext(_arg0, _arg1, _arg2)
    return res
}

@SymbolName("win32_kni_wglCopyContext")
private external fun kni_wglCopyContext(arg0: NativePtr, arg1: NativePtr, arg2: Int): Int

fun wglCreateContext(arg0: HDC?): HGLRC? {
    val _arg0 = arg0.rawValue
    val res = kni_wglCreateContext(_arg0)
    return interpretCPointer<HGLRC__>(res)
}

@SymbolName("win32_kni_wglCreateContext")
private external fun kni_wglCreateContext(arg0: NativePtr): NativePtr

fun wglCreateLayerContext(arg0: HDC?, arg1: Int): HGLRC? {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val res = kni_wglCreateLayerContext(_arg0, _arg1)
    return interpretCPointer<HGLRC__>(res)
}

@SymbolName("win32_kni_wglCreateLayerContext")
private external fun kni_wglCreateLayerContext(arg0: NativePtr, arg1: Int): NativePtr

fun wglDeleteContext(arg0: HGLRC?): WINBOOL {
    val _arg0 = arg0.rawValue
    val res = kni_wglDeleteContext(_arg0)
    return res
}

@SymbolName("win32_kni_wglDeleteContext")
private external fun kni_wglDeleteContext(arg0: NativePtr): Int

fun wglGetCurrentContext(): HGLRC? {
    val res = kni_wglGetCurrentContext()
    return interpretCPointer<HGLRC__>(res)
}

@SymbolName("win32_kni_wglGetCurrentContext")
private external fun kni_wglGetCurrentContext(): NativePtr

fun wglGetCurrentDC(): HDC? {
    val res = kni_wglGetCurrentDC()
    return interpretCPointer<HDC__>(res)
}

@SymbolName("win32_kni_wglGetCurrentDC")
private external fun kni_wglGetCurrentDC(): NativePtr

fun wglMakeCurrent(arg0: HDC?, arg1: HGLRC?): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1.rawValue
    val res = kni_wglMakeCurrent(_arg0, _arg1)
    return res
}

@SymbolName("win32_kni_wglMakeCurrent")
private external fun kni_wglMakeCurrent(arg0: NativePtr, arg1: NativePtr): Int

fun wglShareLists(arg0: HGLRC?, arg1: HGLRC?): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1.rawValue
    val res = kni_wglShareLists(_arg0, _arg1)
    return res
}

@SymbolName("win32_kni_wglShareLists")
private external fun kni_wglShareLists(arg0: NativePtr, arg1: NativePtr): Int

fun wglUseFontBitmapsA(arg0: HDC?, arg1: DWORD, arg2: DWORD, arg3: DWORD): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val _arg2 = arg2
    val _arg3 = arg3
    val res = kni_wglUseFontBitmapsA(_arg0, _arg1, _arg2, _arg3)
    return res
}

@SymbolName("win32_kni_wglUseFontBitmapsA")
private external fun kni_wglUseFontBitmapsA(arg0: NativePtr, arg1: Int, arg2: Int, arg3: Int): Int

fun wglUseFontBitmapsW(arg0: HDC?, arg1: DWORD, arg2: DWORD, arg3: DWORD): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val _arg2 = arg2
    val _arg3 = arg3
    val res = kni_wglUseFontBitmapsW(_arg0, _arg1, _arg2, _arg3)
    return res
}

@SymbolName("win32_kni_wglUseFontBitmapsW")
private external fun kni_wglUseFontBitmapsW(arg0: NativePtr, arg1: Int, arg2: Int, arg3: Int): Int

fun SwapBuffers(arg0: HDC?): WINBOOL {
    val _arg0 = arg0.rawValue
    val res = kni_SwapBuffers(_arg0)
    return res
}

@SymbolName("win32_kni_SwapBuffers")
private external fun kni_SwapBuffers(arg0: NativePtr): Int

fun wglUseFontOutlinesA(arg0: HDC?, arg1: DWORD, arg2: DWORD, arg3: DWORD, arg4: FLOAT, arg5: FLOAT, arg6: Int, arg7: LPGLYPHMETRICSFLOAT?): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val _arg2 = arg2
    val _arg3 = arg3
    val _arg4 = arg4
    val _arg5 = arg5
    val _arg6 = arg6
    val _arg7 = arg7.rawValue
    val res = kni_wglUseFontOutlinesA(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
    return res
}

@SymbolName("win32_kni_wglUseFontOutlinesA")
private external fun kni_wglUseFontOutlinesA(arg0: NativePtr, arg1: Int, arg2: Int, arg3: Int, arg4: Float, arg5: Float, arg6: Int, arg7: NativePtr): Int

fun wglUseFontOutlinesW(arg0: HDC?, arg1: DWORD, arg2: DWORD, arg3: DWORD, arg4: FLOAT, arg5: FLOAT, arg6: Int, arg7: LPGLYPHMETRICSFLOAT?): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val _arg2 = arg2
    val _arg3 = arg3
    val _arg4 = arg4
    val _arg5 = arg5
    val _arg6 = arg6
    val _arg7 = arg7.rawValue
    val res = kni_wglUseFontOutlinesW(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
    return res
}

@SymbolName("win32_kni_wglUseFontOutlinesW")
private external fun kni_wglUseFontOutlinesW(arg0: NativePtr, arg1: Int, arg2: Int, arg3: Int, arg4: Float, arg5: Float, arg6: Int, arg7: NativePtr): Int

fun wglDescribeLayerPlane(arg0: HDC?, arg1: Int, arg2: Int, arg3: UINT, arg4: LPLAYERPLANEDESCRIPTOR?): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val _arg2 = arg2
    val _arg3 = arg3
    val _arg4 = arg4.rawValue
    val res = kni_wglDescribeLayerPlane(_arg0, _arg1, _arg2, _arg3, _arg4)
    return res
}

@SymbolName("win32_kni_wglDescribeLayerPlane")
private external fun kni_wglDescribeLayerPlane(arg0: NativePtr, arg1: Int, arg2: Int, arg3: Int, arg4: NativePtr): Int

fun wglSetLayerPaletteEntries(arg0: HDC?, arg1: Int, arg2: Int, arg3: Int, arg4: CValuesRef<COLORREFVar>?): Int {
    return memScoped {
        val _arg0 = arg0.rawValue
        val _arg1 = arg1
        val _arg2 = arg2
        val _arg3 = arg3
        val _arg4 = arg4?.getPointer(memScope).rawValue
        val res = kni_wglSetLayerPaletteEntries(_arg0, _arg1, _arg2, _arg3, _arg4)
        res
    }
}

@SymbolName("win32_kni_wglSetLayerPaletteEntries")
private external fun kni_wglSetLayerPaletteEntries(arg0: NativePtr, arg1: Int, arg2: Int, arg3: Int, arg4: NativePtr): Int

fun wglGetLayerPaletteEntries(arg0: HDC?, arg1: Int, arg2: Int, arg3: Int, arg4: CValuesRef<COLORREFVar>?): Int {
    return memScoped {
        val _arg0 = arg0.rawValue
        val _arg1 = arg1
        val _arg2 = arg2
        val _arg3 = arg3
        val _arg4 = arg4?.getPointer(memScope).rawValue
        val res = kni_wglGetLayerPaletteEntries(_arg0, _arg1, _arg2, _arg3, _arg4)
        res
    }
}

@SymbolName("win32_kni_wglGetLayerPaletteEntries")
private external fun kni_wglGetLayerPaletteEntries(arg0: NativePtr, arg1: Int, arg2: Int, arg3: Int, arg4: NativePtr): Int

fun wglRealizeLayerPalette(arg0: HDC?, arg1: Int, arg2: WINBOOL): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val _arg2 = arg2
    val res = kni_wglRealizeLayerPalette(_arg0, _arg1, _arg2)
    return res
}

@SymbolName("win32_kni_wglRealizeLayerPalette")
private external fun kni_wglRealizeLayerPalette(arg0: NativePtr, arg1: Int, arg2: Int): Int

fun wglSwapLayerBuffers(arg0: HDC?, arg1: UINT): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val res = kni_wglSwapLayerBuffers(_arg0, _arg1)
    return res
}

@SymbolName("win32_kni_wglSwapLayerBuffers")
private external fun kni_wglSwapLayerBuffers(arg0: NativePtr, arg1: Int): Int

fun wglSwapMultipleBuffers(arg0: UINT, arg1: CValuesRef<WGLSWAP>?): DWORD {
    return memScoped {
        val _arg0 = arg0
        val _arg1 = arg1?.getPointer(memScope).rawValue
        val res = kni_wglSwapMultipleBuffers(_arg0, _arg1)
        res
    }
}

@SymbolName("win32_kni_wglSwapMultipleBuffers")
private external fun kni_wglSwapMultipleBuffers(arg0: Int, arg1: NativePtr): Int

fun wsprintfA(arg0: LPSTR?, arg1: String?, vararg variadicArguments: Any?): Int = memScoped {
    val resultVar = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
    callWithVarargs(kni_wsprintfA(), resultVar.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(arg0, arg1), variadicArguments, memScope)
    resultVar.value
}

@SymbolName("win32_kni_wsprintfA")
private external fun kni_wsprintfA(): NativePtr

fun wsprintfW(arg0: LPWSTR?, arg1: String?, vararg variadicArguments: Any?): Int = memScoped {
    val resultVar = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
    callWithVarargs(kni_wsprintfW(), resultVar.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(arg0, arg1), variadicArguments, memScope)
    resultVar.value
}

@SymbolName("win32_kni_wsprintfW")
private external fun kni_wsprintfW(): NativePtr

fun LoadKeyboardLayoutA(pwszKLID: String?, Flags: UINT): HKL? {
    return memScoped {
        val _pwszKLID = pwszKLID?.cstr?.getPointer(memScope).rawValue
        val _Flags = Flags
        val res = kni_LoadKeyboardLayoutA(_pwszKLID, _Flags)
        interpretCPointer<HKL__>(res)
    }
}

@SymbolName("win32_kni_LoadKeyboardLayoutA")
private external fun kni_LoadKeyboardLayoutA(pwszKLID: NativePtr, Flags: Int): NativePtr

fun LoadKeyboardLayoutW(pwszKLID: String?, Flags: UINT): HKL? {
    return memScoped {
        val _pwszKLID = pwszKLID?.wcstr?.getPointer(memScope).rawValue
        val _Flags = Flags
        val res = kni_LoadKeyboardLayoutW(_pwszKLID, _Flags)
        interpretCPointer<HKL__>(res)
    }
}

@SymbolName("win32_kni_LoadKeyboardLayoutW")
private external fun kni_LoadKeyboardLayoutW(pwszKLID: NativePtr, Flags: Int): NativePtr

fun ActivateKeyboardLayout(hkl: HKL?, Flags: UINT): HKL? {
    val _hkl = hkl.rawValue
    val _Flags = Flags
    val res = kni_ActivateKeyboardLayout(_hkl, _Flags)
    return interpretCPointer<HKL__>(res)
}

@SymbolName("win32_kni_ActivateKeyboardLayout")
private external fun kni_ActivateKeyboardLayout(hkl: NativePtr, Flags: Int): NativePtr

fun ToUnicodeEx(wVirtKey: UINT, wScanCode: UINT, lpKeyState: CValuesRef<BYTEVar>?, pwszBuff: LPWSTR?, cchBuff: Int, wFlags: UINT, dwhkl: HKL?): Int {
    return memScoped {
        val _wVirtKey = wVirtKey
        val _wScanCode = wScanCode
        val _lpKeyState = lpKeyState?.getPointer(memScope).rawValue
        val _pwszBuff = pwszBuff.rawValue
        val _cchBuff = cchBuff
        val _wFlags = wFlags
        val _dwhkl = dwhkl.rawValue
        val res = kni_ToUnicodeEx(_wVirtKey, _wScanCode, _lpKeyState, _pwszBuff, _cchBuff, _wFlags, _dwhkl)
        res
    }
}

@SymbolName("win32_kni_ToUnicodeEx")
private external fun kni_ToUnicodeEx(wVirtKey: Int, wScanCode: Int, lpKeyState: NativePtr, pwszBuff: NativePtr, cchBuff: Int, wFlags: Int, dwhkl: NativePtr): Int

fun UnloadKeyboardLayout(hkl: HKL?): WINBOOL {
    val _hkl = hkl.rawValue
    val res = kni_UnloadKeyboardLayout(_hkl)
    return res
}

@SymbolName("win32_kni_UnloadKeyboardLayout")
private external fun kni_UnloadKeyboardLayout(hkl: NativePtr): Int

fun GetKeyboardLayoutNameA(pwszKLID: LPSTR?): WINBOOL {
    val _pwszKLID = pwszKLID.rawValue
    val res = kni_GetKeyboardLayoutNameA(_pwszKLID)
    return res
}

@SymbolName("win32_kni_GetKeyboardLayoutNameA")
private external fun kni_GetKeyboardLayoutNameA(pwszKLID: NativePtr): Int

fun GetKeyboardLayoutNameW(pwszKLID: LPWSTR?): WINBOOL {
    val _pwszKLID = pwszKLID.rawValue
    val res = kni_GetKeyboardLayoutNameW(_pwszKLID)
    return res
}

@SymbolName("win32_kni_GetKeyboardLayoutNameW")
private external fun kni_GetKeyboardLayoutNameW(pwszKLID: NativePtr): Int

fun GetKeyboardLayoutList(nBuff: Int, lpList: CValuesRef<HKLVar>?): Int {
    return memScoped {
        val _nBuff = nBuff
        val _lpList = lpList?.getPointer(memScope).rawValue
        val res = kni_GetKeyboardLayoutList(_nBuff, _lpList)
        res
    }
}

@SymbolName("win32_kni_GetKeyboardLayoutList")
private external fun kni_GetKeyboardLayoutList(nBuff: Int, lpList: NativePtr): Int

fun GetKeyboardLayout(idThread: DWORD): HKL? {
    val _idThread = idThread
    val res = kni_GetKeyboardLayout(_idThread)
    return interpretCPointer<HKL__>(res)
}

@SymbolName("win32_kni_GetKeyboardLayout")
private external fun kni_GetKeyboardLayout(idThread: Int): NativePtr

fun GetMouseMovePointsEx(cbSize: UINT, lppt: LPMOUSEMOVEPOINT?, lpptBuf: LPMOUSEMOVEPOINT?, nBufPoints: Int, resolution: DWORD): Int {
    val _cbSize = cbSize
    val _lppt = lppt.rawValue
    val _lpptBuf = lpptBuf.rawValue
    val _nBufPoints = nBufPoints
    val _resolution = resolution
    val res = kni_GetMouseMovePointsEx(_cbSize, _lppt, _lpptBuf, _nBufPoints, _resolution)
    return res
}

@SymbolName("win32_kni_GetMouseMovePointsEx")
private external fun kni_GetMouseMovePointsEx(cbSize: Int, lppt: NativePtr, lpptBuf: NativePtr, nBufPoints: Int, resolution: Int): Int

fun CreateDesktopA(lpszDesktop: String?, lpszDevice: String?, pDevmode: LPDEVMODEA?, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES?): HDESK? {
    return memScoped {
        val _lpszDesktop = lpszDesktop?.cstr?.getPointer(memScope).rawValue
        val _lpszDevice = lpszDevice?.cstr?.getPointer(memScope).rawValue
        val _pDevmode = pDevmode.rawValue
        val _dwFlags = dwFlags
        val _dwDesiredAccess = dwDesiredAccess
        val _lpsa = lpsa.rawValue
        val res = kni_CreateDesktopA(_lpszDesktop, _lpszDevice, _pDevmode, _dwFlags, _dwDesiredAccess, _lpsa)
        interpretCPointer<HDESK__>(res)
    }
}

@SymbolName("win32_kni_CreateDesktopA")
private external fun kni_CreateDesktopA(lpszDesktop: NativePtr, lpszDevice: NativePtr, pDevmode: NativePtr, dwFlags: Int, dwDesiredAccess: Int, lpsa: NativePtr): NativePtr

fun CreateDesktopW(lpszDesktop: String?, lpszDevice: String?, pDevmode: LPDEVMODEW?, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES?): HDESK? {
    return memScoped {
        val _lpszDesktop = lpszDesktop?.wcstr?.getPointer(memScope).rawValue
        val _lpszDevice = lpszDevice?.wcstr?.getPointer(memScope).rawValue
        val _pDevmode = pDevmode.rawValue
        val _dwFlags = dwFlags
        val _dwDesiredAccess = dwDesiredAccess
        val _lpsa = lpsa.rawValue
        val res = kni_CreateDesktopW(_lpszDesktop, _lpszDevice, _pDevmode, _dwFlags, _dwDesiredAccess, _lpsa)
        interpretCPointer<HDESK__>(res)
    }
}

@SymbolName("win32_kni_CreateDesktopW")
private external fun kni_CreateDesktopW(lpszDesktop: NativePtr, lpszDevice: NativePtr, pDevmode: NativePtr, dwFlags: Int, dwDesiredAccess: Int, lpsa: NativePtr): NativePtr

fun CreateDesktopExA(lpszDesktop: String?, lpszDevice: String?, pDevmode: CValuesRef<DEVMODEA>?, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES?, ulHeapSize: ULONG, pvoid: PVOID?): HDESK? {
    return memScoped {
        val _lpszDesktop = lpszDesktop?.cstr?.getPointer(memScope).rawValue
        val _lpszDevice = lpszDevice?.cstr?.getPointer(memScope).rawValue
        val _pDevmode = pDevmode?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _dwDesiredAccess = dwDesiredAccess
        val _lpsa = lpsa.rawValue
        val _ulHeapSize = ulHeapSize
        val _pvoid = pvoid.rawValue
        val res = kni_CreateDesktopExA(_lpszDesktop, _lpszDevice, _pDevmode, _dwFlags, _dwDesiredAccess, _lpsa, _ulHeapSize, _pvoid)
        interpretCPointer<HDESK__>(res)
    }
}

@SymbolName("win32_kni_CreateDesktopExA")
private external fun kni_CreateDesktopExA(lpszDesktop: NativePtr, lpszDevice: NativePtr, pDevmode: NativePtr, dwFlags: Int, dwDesiredAccess: Int, lpsa: NativePtr, ulHeapSize: Int, pvoid: NativePtr): NativePtr

fun CreateDesktopExW(lpszDesktop: String?, lpszDevice: String?, pDevmode: CValuesRef<DEVMODEW>?, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES?, ulHeapSize: ULONG, pvoid: PVOID?): HDESK? {
    return memScoped {
        val _lpszDesktop = lpszDesktop?.wcstr?.getPointer(memScope).rawValue
        val _lpszDevice = lpszDevice?.wcstr?.getPointer(memScope).rawValue
        val _pDevmode = pDevmode?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _dwDesiredAccess = dwDesiredAccess
        val _lpsa = lpsa.rawValue
        val _ulHeapSize = ulHeapSize
        val _pvoid = pvoid.rawValue
        val res = kni_CreateDesktopExW(_lpszDesktop, _lpszDevice, _pDevmode, _dwFlags, _dwDesiredAccess, _lpsa, _ulHeapSize, _pvoid)
        interpretCPointer<HDESK__>(res)
    }
}

@SymbolName("win32_kni_CreateDesktopExW")
private external fun kni_CreateDesktopExW(lpszDesktop: NativePtr, lpszDevice: NativePtr, pDevmode: NativePtr, dwFlags: Int, dwDesiredAccess: Int, lpsa: NativePtr, ulHeapSize: Int, pvoid: NativePtr): NativePtr

fun OpenDesktopA(lpszDesktop: String?, dwFlags: DWORD, fInherit: WINBOOL, dwDesiredAccess: ACCESS_MASK): HDESK? {
    return memScoped {
        val _lpszDesktop = lpszDesktop?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _fInherit = fInherit
        val _dwDesiredAccess = dwDesiredAccess
        val res = kni_OpenDesktopA(_lpszDesktop, _dwFlags, _fInherit, _dwDesiredAccess)
        interpretCPointer<HDESK__>(res)
    }
}

@SymbolName("win32_kni_OpenDesktopA")
private external fun kni_OpenDesktopA(lpszDesktop: NativePtr, dwFlags: Int, fInherit: Int, dwDesiredAccess: Int): NativePtr

fun OpenDesktopW(lpszDesktop: String?, dwFlags: DWORD, fInherit: WINBOOL, dwDesiredAccess: ACCESS_MASK): HDESK? {
    return memScoped {
        val _lpszDesktop = lpszDesktop?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _fInherit = fInherit
        val _dwDesiredAccess = dwDesiredAccess
        val res = kni_OpenDesktopW(_lpszDesktop, _dwFlags, _fInherit, _dwDesiredAccess)
        interpretCPointer<HDESK__>(res)
    }
}

@SymbolName("win32_kni_OpenDesktopW")
private external fun kni_OpenDesktopW(lpszDesktop: NativePtr, dwFlags: Int, fInherit: Int, dwDesiredAccess: Int): NativePtr

fun OpenInputDesktop(dwFlags: DWORD, fInherit: WINBOOL, dwDesiredAccess: ACCESS_MASK): HDESK? {
    val _dwFlags = dwFlags
    val _fInherit = fInherit
    val _dwDesiredAccess = dwDesiredAccess
    val res = kni_OpenInputDesktop(_dwFlags, _fInherit, _dwDesiredAccess)
    return interpretCPointer<HDESK__>(res)
}

@SymbolName("win32_kni_OpenInputDesktop")
private external fun kni_OpenInputDesktop(dwFlags: Int, fInherit: Int, dwDesiredAccess: Int): NativePtr

fun EnumDesktopsA(hwinsta: HWINSTA?, lpEnumFunc: DESKTOPENUMPROCA?, lParam: LPARAM): WINBOOL {
    val _hwinsta = hwinsta.rawValue
    val _lpEnumFunc = lpEnumFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumDesktopsA(_hwinsta, _lpEnumFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumDesktopsA")
private external fun kni_EnumDesktopsA(hwinsta: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumDesktopsW(hwinsta: HWINSTA?, lpEnumFunc: DESKTOPENUMPROCW?, lParam: LPARAM): WINBOOL {
    val _hwinsta = hwinsta.rawValue
    val _lpEnumFunc = lpEnumFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumDesktopsW(_hwinsta, _lpEnumFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumDesktopsW")
private external fun kni_EnumDesktopsW(hwinsta: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumDesktopWindows(hDesktop: HDESK?, lpfn: WNDENUMPROC?, lParam: LPARAM): WINBOOL {
    val _hDesktop = hDesktop.rawValue
    val _lpfn = lpfn.rawValue
    val _lParam = lParam
    val res = kni_EnumDesktopWindows(_hDesktop, _lpfn, _lParam)
    return res
}

@SymbolName("win32_kni_EnumDesktopWindows")
private external fun kni_EnumDesktopWindows(hDesktop: NativePtr, lpfn: NativePtr, lParam: Long): Int

fun SwitchDesktop(hDesktop: HDESK?): WINBOOL {
    val _hDesktop = hDesktop.rawValue
    val res = kni_SwitchDesktop(_hDesktop)
    return res
}

@SymbolName("win32_kni_SwitchDesktop")
private external fun kni_SwitchDesktop(hDesktop: NativePtr): Int

fun SetThreadDesktop(hDesktop: HDESK?): WINBOOL {
    val _hDesktop = hDesktop.rawValue
    val res = kni_SetThreadDesktop(_hDesktop)
    return res
}

@SymbolName("win32_kni_SetThreadDesktop")
private external fun kni_SetThreadDesktop(hDesktop: NativePtr): Int

fun CloseDesktop(hDesktop: HDESK?): WINBOOL {
    val _hDesktop = hDesktop.rawValue
    val res = kni_CloseDesktop(_hDesktop)
    return res
}

@SymbolName("win32_kni_CloseDesktop")
private external fun kni_CloseDesktop(hDesktop: NativePtr): Int

fun GetThreadDesktop(dwThreadId: DWORD): HDESK? {
    val _dwThreadId = dwThreadId
    val res = kni_GetThreadDesktop(_dwThreadId)
    return interpretCPointer<HDESK__>(res)
}

@SymbolName("win32_kni_GetThreadDesktop")
private external fun kni_GetThreadDesktop(dwThreadId: Int): NativePtr

fun CreateWindowStationA(lpwinsta: String?, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES?): HWINSTA? {
    return memScoped {
        val _lpwinsta = lpwinsta?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _dwDesiredAccess = dwDesiredAccess
        val _lpsa = lpsa.rawValue
        val res = kni_CreateWindowStationA(_lpwinsta, _dwFlags, _dwDesiredAccess, _lpsa)
        interpretCPointer<HWINSTA__>(res)
    }
}

@SymbolName("win32_kni_CreateWindowStationA")
private external fun kni_CreateWindowStationA(lpwinsta: NativePtr, dwFlags: Int, dwDesiredAccess: Int, lpsa: NativePtr): NativePtr

fun CreateWindowStationW(lpwinsta: String?, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES?): HWINSTA? {
    return memScoped {
        val _lpwinsta = lpwinsta?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _dwDesiredAccess = dwDesiredAccess
        val _lpsa = lpsa.rawValue
        val res = kni_CreateWindowStationW(_lpwinsta, _dwFlags, _dwDesiredAccess, _lpsa)
        interpretCPointer<HWINSTA__>(res)
    }
}

@SymbolName("win32_kni_CreateWindowStationW")
private external fun kni_CreateWindowStationW(lpwinsta: NativePtr, dwFlags: Int, dwDesiredAccess: Int, lpsa: NativePtr): NativePtr

fun OpenWindowStationA(lpszWinSta: String?, fInherit: WINBOOL, dwDesiredAccess: ACCESS_MASK): HWINSTA? {
    return memScoped {
        val _lpszWinSta = lpszWinSta?.cstr?.getPointer(memScope).rawValue
        val _fInherit = fInherit
        val _dwDesiredAccess = dwDesiredAccess
        val res = kni_OpenWindowStationA(_lpszWinSta, _fInherit, _dwDesiredAccess)
        interpretCPointer<HWINSTA__>(res)
    }
}

@SymbolName("win32_kni_OpenWindowStationA")
private external fun kni_OpenWindowStationA(lpszWinSta: NativePtr, fInherit: Int, dwDesiredAccess: Int): NativePtr

fun OpenWindowStationW(lpszWinSta: String?, fInherit: WINBOOL, dwDesiredAccess: ACCESS_MASK): HWINSTA? {
    return memScoped {
        val _lpszWinSta = lpszWinSta?.wcstr?.getPointer(memScope).rawValue
        val _fInherit = fInherit
        val _dwDesiredAccess = dwDesiredAccess
        val res = kni_OpenWindowStationW(_lpszWinSta, _fInherit, _dwDesiredAccess)
        interpretCPointer<HWINSTA__>(res)
    }
}

@SymbolName("win32_kni_OpenWindowStationW")
private external fun kni_OpenWindowStationW(lpszWinSta: NativePtr, fInherit: Int, dwDesiredAccess: Int): NativePtr

fun EnumWindowStationsA(lpEnumFunc: WINSTAENUMPROCA?, lParam: LPARAM): WINBOOL {
    val _lpEnumFunc = lpEnumFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumWindowStationsA(_lpEnumFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumWindowStationsA")
private external fun kni_EnumWindowStationsA(lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumWindowStationsW(lpEnumFunc: WINSTAENUMPROCW?, lParam: LPARAM): WINBOOL {
    val _lpEnumFunc = lpEnumFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumWindowStationsW(_lpEnumFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumWindowStationsW")
private external fun kni_EnumWindowStationsW(lpEnumFunc: NativePtr, lParam: Long): Int

fun CloseWindowStation(hWinSta: HWINSTA?): WINBOOL {
    val _hWinSta = hWinSta.rawValue
    val res = kni_CloseWindowStation(_hWinSta)
    return res
}

@SymbolName("win32_kni_CloseWindowStation")
private external fun kni_CloseWindowStation(hWinSta: NativePtr): Int

fun SetProcessWindowStation(hWinSta: HWINSTA?): WINBOOL {
    val _hWinSta = hWinSta.rawValue
    val res = kni_SetProcessWindowStation(_hWinSta)
    return res
}

@SymbolName("win32_kni_SetProcessWindowStation")
private external fun kni_SetProcessWindowStation(hWinSta: NativePtr): Int

fun GetProcessWindowStation(): HWINSTA? {
    val res = kni_GetProcessWindowStation()
    return interpretCPointer<HWINSTA__>(res)
}

@SymbolName("win32_kni_GetProcessWindowStation")
private external fun kni_GetProcessWindowStation(): NativePtr

fun SetUserObjectSecurity(hObj: HANDLE?, pSIRequested: PSECURITY_INFORMATION?, pSID: PSECURITY_DESCRIPTOR?): WINBOOL {
    val _hObj = hObj.rawValue
    val _pSIRequested = pSIRequested.rawValue
    val _pSID = pSID.rawValue
    val res = kni_SetUserObjectSecurity(_hObj, _pSIRequested, _pSID)
    return res
}

@SymbolName("win32_kni_SetUserObjectSecurity")
private external fun kni_SetUserObjectSecurity(hObj: NativePtr, pSIRequested: NativePtr, pSID: NativePtr): Int

fun GetUserObjectSecurity(hObj: HANDLE?, pSIRequested: PSECURITY_INFORMATION?, pSID: PSECURITY_DESCRIPTOR?, nLength: DWORD, lpnLengthNeeded: LPDWORD?): WINBOOL {
    val _hObj = hObj.rawValue
    val _pSIRequested = pSIRequested.rawValue
    val _pSID = pSID.rawValue
    val _nLength = nLength
    val _lpnLengthNeeded = lpnLengthNeeded.rawValue
    val res = kni_GetUserObjectSecurity(_hObj, _pSIRequested, _pSID, _nLength, _lpnLengthNeeded)
    return res
}

@SymbolName("win32_kni_GetUserObjectSecurity")
private external fun kni_GetUserObjectSecurity(hObj: NativePtr, pSIRequested: NativePtr, pSID: NativePtr, nLength: Int, lpnLengthNeeded: NativePtr): Int

fun GetUserObjectInformationA(hObj: HANDLE?, nIndex: Int, pvInfo: PVOID?, nLength: DWORD, lpnLengthNeeded: LPDWORD?): WINBOOL {
    val _hObj = hObj.rawValue
    val _nIndex = nIndex
    val _pvInfo = pvInfo.rawValue
    val _nLength = nLength
    val _lpnLengthNeeded = lpnLengthNeeded.rawValue
    val res = kni_GetUserObjectInformationA(_hObj, _nIndex, _pvInfo, _nLength, _lpnLengthNeeded)
    return res
}

@SymbolName("win32_kni_GetUserObjectInformationA")
private external fun kni_GetUserObjectInformationA(hObj: NativePtr, nIndex: Int, pvInfo: NativePtr, nLength: Int, lpnLengthNeeded: NativePtr): Int

fun GetUserObjectInformationW(hObj: HANDLE?, nIndex: Int, pvInfo: PVOID?, nLength: DWORD, lpnLengthNeeded: LPDWORD?): WINBOOL {
    val _hObj = hObj.rawValue
    val _nIndex = nIndex
    val _pvInfo = pvInfo.rawValue
    val _nLength = nLength
    val _lpnLengthNeeded = lpnLengthNeeded.rawValue
    val res = kni_GetUserObjectInformationW(_hObj, _nIndex, _pvInfo, _nLength, _lpnLengthNeeded)
    return res
}

@SymbolName("win32_kni_GetUserObjectInformationW")
private external fun kni_GetUserObjectInformationW(hObj: NativePtr, nIndex: Int, pvInfo: NativePtr, nLength: Int, lpnLengthNeeded: NativePtr): Int

fun SetUserObjectInformationA(hObj: HANDLE?, nIndex: Int, pvInfo: PVOID?, nLength: DWORD): WINBOOL {
    val _hObj = hObj.rawValue
    val _nIndex = nIndex
    val _pvInfo = pvInfo.rawValue
    val _nLength = nLength
    val res = kni_SetUserObjectInformationA(_hObj, _nIndex, _pvInfo, _nLength)
    return res
}

@SymbolName("win32_kni_SetUserObjectInformationA")
private external fun kni_SetUserObjectInformationA(hObj: NativePtr, nIndex: Int, pvInfo: NativePtr, nLength: Int): Int

fun SetUserObjectInformationW(hObj: HANDLE?, nIndex: Int, pvInfo: PVOID?, nLength: DWORD): WINBOOL {
    val _hObj = hObj.rawValue
    val _nIndex = nIndex
    val _pvInfo = pvInfo.rawValue
    val _nLength = nLength
    val res = kni_SetUserObjectInformationW(_hObj, _nIndex, _pvInfo, _nLength)
    return res
}

@SymbolName("win32_kni_SetUserObjectInformationW")
private external fun kni_SetUserObjectInformationW(hObj: NativePtr, nIndex: Int, pvInfo: NativePtr, nLength: Int): Int

fun IsHungAppWindow(hwnd: HWND?): WINBOOL {
    val _hwnd = hwnd.rawValue
    val res = kni_IsHungAppWindow(_hwnd)
    return res
}

@SymbolName("win32_kni_IsHungAppWindow")
private external fun kni_IsHungAppWindow(hwnd: NativePtr): Int

fun DisableProcessWindowsGhosting(): Unit {
    val res = kni_DisableProcessWindowsGhosting()
    return res
}

@SymbolName("win32_kni_DisableProcessWindowsGhosting")
private external fun kni_DisableProcessWindowsGhosting(): Unit

fun RegisterWindowMessageA(lpString: String?): UINT {
    return memScoped {
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_RegisterWindowMessageA(_lpString)
        res
    }
}

@SymbolName("win32_kni_RegisterWindowMessageA")
private external fun kni_RegisterWindowMessageA(lpString: NativePtr): Int

fun RegisterWindowMessageW(lpString: String?): UINT {
    return memScoped {
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_RegisterWindowMessageW(_lpString)
        res
    }
}

@SymbolName("win32_kni_RegisterWindowMessageW")
private external fun kni_RegisterWindowMessageW(lpString: NativePtr): Int

fun TrackMouseEvent(lpEventTrack: LPTRACKMOUSEEVENT?): WINBOOL {
    val _lpEventTrack = lpEventTrack.rawValue
    val res = kni_TrackMouseEvent(_lpEventTrack)
    return res
}

@SymbolName("win32_kni_TrackMouseEvent")
private external fun kni_TrackMouseEvent(lpEventTrack: NativePtr): Int

fun DrawEdge(hdc: HDC?, qrc: LPRECT?, edge: UINT, grfFlags: UINT): WINBOOL {
    val _hdc = hdc.rawValue
    val _qrc = qrc.rawValue
    val _edge = edge
    val _grfFlags = grfFlags
    val res = kni_DrawEdge(_hdc, _qrc, _edge, _grfFlags)
    return res
}

@SymbolName("win32_kni_DrawEdge")
private external fun kni_DrawEdge(hdc: NativePtr, qrc: NativePtr, edge: Int, grfFlags: Int): Int

fun DrawFrameControl(arg0: HDC?, arg1: LPRECT?, arg2: UINT, arg3: UINT): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1.rawValue
    val _arg2 = arg2
    val _arg3 = arg3
    val res = kni_DrawFrameControl(_arg0, _arg1, _arg2, _arg3)
    return res
}

@SymbolName("win32_kni_DrawFrameControl")
private external fun kni_DrawFrameControl(arg0: NativePtr, arg1: NativePtr, arg2: Int, arg3: Int): Int

fun DrawCaption(hwnd: HWND?, hdc: HDC?, lprect: CValuesRef<RECT>?, flags: UINT): WINBOOL {
    return memScoped {
        val _hwnd = hwnd.rawValue
        val _hdc = hdc.rawValue
        val _lprect = lprect?.getPointer(memScope).rawValue
        val _flags = flags
        val res = kni_DrawCaption(_hwnd, _hdc, _lprect, _flags)
        res
    }
}

@SymbolName("win32_kni_DrawCaption")
private external fun kni_DrawCaption(hwnd: NativePtr, hdc: NativePtr, lprect: NativePtr, flags: Int): Int

fun DrawAnimatedRects(hwnd: HWND?, idAni: Int, lprcFrom: CValuesRef<RECT>?, lprcTo: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _hwnd = hwnd.rawValue
        val _idAni = idAni
        val _lprcFrom = lprcFrom?.getPointer(memScope).rawValue
        val _lprcTo = lprcTo?.getPointer(memScope).rawValue
        val res = kni_DrawAnimatedRects(_hwnd, _idAni, _lprcFrom, _lprcTo)
        res
    }
}

@SymbolName("win32_kni_DrawAnimatedRects")
private external fun kni_DrawAnimatedRects(hwnd: NativePtr, idAni: Int, lprcFrom: NativePtr, lprcTo: NativePtr): Int

fun GetMessageA(lpMsg: LPMSG?, hWnd: HWND?, wMsgFilterMin: UINT, wMsgFilterMax: UINT): WINBOOL {
    val _lpMsg = lpMsg.rawValue
    val _hWnd = hWnd.rawValue
    val _wMsgFilterMin = wMsgFilterMin
    val _wMsgFilterMax = wMsgFilterMax
    val res = kni_GetMessageA(_lpMsg, _hWnd, _wMsgFilterMin, _wMsgFilterMax)
    return res
}

@SymbolName("win32_kni_GetMessageA")
private external fun kni_GetMessageA(lpMsg: NativePtr, hWnd: NativePtr, wMsgFilterMin: Int, wMsgFilterMax: Int): Int

fun GetMessageW(lpMsg: LPMSG?, hWnd: HWND?, wMsgFilterMin: UINT, wMsgFilterMax: UINT): WINBOOL {
    val _lpMsg = lpMsg.rawValue
    val _hWnd = hWnd.rawValue
    val _wMsgFilterMin = wMsgFilterMin
    val _wMsgFilterMax = wMsgFilterMax
    val res = kni_GetMessageW(_lpMsg, _hWnd, _wMsgFilterMin, _wMsgFilterMax)
    return res
}

@SymbolName("win32_kni_GetMessageW")
private external fun kni_GetMessageW(lpMsg: NativePtr, hWnd: NativePtr, wMsgFilterMin: Int, wMsgFilterMax: Int): Int

fun TranslateMessage(lpMsg: CValuesRef<MSG>?): WINBOOL {
    return memScoped {
        val _lpMsg = lpMsg?.getPointer(memScope).rawValue
        val res = kni_TranslateMessage(_lpMsg)
        res
    }
}

@SymbolName("win32_kni_TranslateMessage")
private external fun kni_TranslateMessage(lpMsg: NativePtr): Int

fun DispatchMessageA(lpMsg: CValuesRef<MSG>?): LRESULT {
    return memScoped {
        val _lpMsg = lpMsg?.getPointer(memScope).rawValue
        val res = kni_DispatchMessageA(_lpMsg)
        res
    }
}

@SymbolName("win32_kni_DispatchMessageA")
private external fun kni_DispatchMessageA(lpMsg: NativePtr): Long

fun DispatchMessageW(lpMsg: CValuesRef<MSG>?): LRESULT {
    return memScoped {
        val _lpMsg = lpMsg?.getPointer(memScope).rawValue
        val res = kni_DispatchMessageW(_lpMsg)
        res
    }
}

@SymbolName("win32_kni_DispatchMessageW")
private external fun kni_DispatchMessageW(lpMsg: NativePtr): Long

fun SetMessageQueue(cMessagesMax: Int): WINBOOL {
    val _cMessagesMax = cMessagesMax
    val res = kni_SetMessageQueue(_cMessagesMax)
    return res
}

@SymbolName("win32_kni_SetMessageQueue")
private external fun kni_SetMessageQueue(cMessagesMax: Int): Int

fun PeekMessageA(lpMsg: LPMSG?, hWnd: HWND?, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT): WINBOOL {
    val _lpMsg = lpMsg.rawValue
    val _hWnd = hWnd.rawValue
    val _wMsgFilterMin = wMsgFilterMin
    val _wMsgFilterMax = wMsgFilterMax
    val _wRemoveMsg = wRemoveMsg
    val res = kni_PeekMessageA(_lpMsg, _hWnd, _wMsgFilterMin, _wMsgFilterMax, _wRemoveMsg)
    return res
}

@SymbolName("win32_kni_PeekMessageA")
private external fun kni_PeekMessageA(lpMsg: NativePtr, hWnd: NativePtr, wMsgFilterMin: Int, wMsgFilterMax: Int, wRemoveMsg: Int): Int

fun PeekMessageW(lpMsg: LPMSG?, hWnd: HWND?, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT): WINBOOL {
    val _lpMsg = lpMsg.rawValue
    val _hWnd = hWnd.rawValue
    val _wMsgFilterMin = wMsgFilterMin
    val _wMsgFilterMax = wMsgFilterMax
    val _wRemoveMsg = wRemoveMsg
    val res = kni_PeekMessageW(_lpMsg, _hWnd, _wMsgFilterMin, _wMsgFilterMax, _wRemoveMsg)
    return res
}

@SymbolName("win32_kni_PeekMessageW")
private external fun kni_PeekMessageW(lpMsg: NativePtr, hWnd: NativePtr, wMsgFilterMin: Int, wMsgFilterMax: Int, wRemoveMsg: Int): Int

fun RegisterHotKey(hWnd: HWND?, id: Int, fsModifiers: UINT, vk: UINT): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _id = id
    val _fsModifiers = fsModifiers
    val _vk = vk
    val res = kni_RegisterHotKey(_hWnd, _id, _fsModifiers, _vk)
    return res
}

@SymbolName("win32_kni_RegisterHotKey")
private external fun kni_RegisterHotKey(hWnd: NativePtr, id: Int, fsModifiers: Int, vk: Int): Int

fun UnregisterHotKey(hWnd: HWND?, id: Int): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _id = id
    val res = kni_UnregisterHotKey(_hWnd, _id)
    return res
}

@SymbolName("win32_kni_UnregisterHotKey")
private external fun kni_UnregisterHotKey(hWnd: NativePtr, id: Int): Int

fun ExitWindowsEx(uFlags: UINT, dwReason: DWORD): WINBOOL {
    val _uFlags = uFlags
    val _dwReason = dwReason
    val res = kni_ExitWindowsEx(_uFlags, _dwReason)
    return res
}

@SymbolName("win32_kni_ExitWindowsEx")
private external fun kni_ExitWindowsEx(uFlags: Int, dwReason: Int): Int

fun SwapMouseButton(fSwap: WINBOOL): WINBOOL {
    val _fSwap = fSwap
    val res = kni_SwapMouseButton(_fSwap)
    return res
}

@SymbolName("win32_kni_SwapMouseButton")
private external fun kni_SwapMouseButton(fSwap: Int): Int

fun GetMessagePos(): DWORD {
    val res = kni_GetMessagePos()
    return res
}

@SymbolName("win32_kni_GetMessagePos")
private external fun kni_GetMessagePos(): Int

fun GetMessageTime(): LONG {
    val res = kni_GetMessageTime()
    return res
}

@SymbolName("win32_kni_GetMessageTime")
private external fun kni_GetMessageTime(): Int

fun GetMessageExtraInfo(): LPARAM {
    val res = kni_GetMessageExtraInfo()
    return res
}

@SymbolName("win32_kni_GetMessageExtraInfo")
private external fun kni_GetMessageExtraInfo(): Long

fun IsWow64Message(): WINBOOL {
    val res = kni_IsWow64Message()
    return res
}

@SymbolName("win32_kni_IsWow64Message")
private external fun kni_IsWow64Message(): Int

fun SetMessageExtraInfo(lParam: LPARAM): LPARAM {
    val _lParam = lParam
    val res = kni_SetMessageExtraInfo(_lParam)
    return res
}

@SymbolName("win32_kni_SetMessageExtraInfo")
private external fun kni_SetMessageExtraInfo(lParam: Long): Long

fun SendMessageA(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_SendMessageA(_hWnd, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_SendMessageA")
private external fun kni_SendMessageA(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long): Long

fun SendMessageW(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_SendMessageW(_hWnd, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_SendMessageW")
private external fun kni_SendMessageW(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long): Long

fun SendMessageTimeoutA(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM, fuFlags: UINT, uTimeout: UINT, lpdwResult: PDWORD_PTR?): LRESULT {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val _fuFlags = fuFlags
    val _uTimeout = uTimeout
    val _lpdwResult = lpdwResult.rawValue
    val res = kni_SendMessageTimeoutA(_hWnd, _Msg, _wParam, _lParam, _fuFlags, _uTimeout, _lpdwResult)
    return res
}

@SymbolName("win32_kni_SendMessageTimeoutA")
private external fun kni_SendMessageTimeoutA(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long, fuFlags: Int, uTimeout: Int, lpdwResult: NativePtr): Long

fun SendMessageTimeoutW(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM, fuFlags: UINT, uTimeout: UINT, lpdwResult: PDWORD_PTR?): LRESULT {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val _fuFlags = fuFlags
    val _uTimeout = uTimeout
    val _lpdwResult = lpdwResult.rawValue
    val res = kni_SendMessageTimeoutW(_hWnd, _Msg, _wParam, _lParam, _fuFlags, _uTimeout, _lpdwResult)
    return res
}

@SymbolName("win32_kni_SendMessageTimeoutW")
private external fun kni_SendMessageTimeoutW(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long, fuFlags: Int, uTimeout: Int, lpdwResult: NativePtr): Long

fun SendNotifyMessageA(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_SendNotifyMessageA(_hWnd, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_SendNotifyMessageA")
private external fun kni_SendNotifyMessageA(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long): Int

fun SendNotifyMessageW(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_SendNotifyMessageW(_hWnd, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_SendNotifyMessageW")
private external fun kni_SendNotifyMessageW(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long): Int

fun SendMessageCallbackA(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM, lpResultCallBack: SENDASYNCPROC?, dwData: ULONG_PTR): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val _lpResultCallBack = lpResultCallBack.rawValue
    val _dwData = dwData
    val res = kni_SendMessageCallbackA(_hWnd, _Msg, _wParam, _lParam, _lpResultCallBack, _dwData)
    return res
}

@SymbolName("win32_kni_SendMessageCallbackA")
private external fun kni_SendMessageCallbackA(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long, lpResultCallBack: NativePtr, dwData: Long): Int

fun SendMessageCallbackW(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM, lpResultCallBack: SENDASYNCPROC?, dwData: ULONG_PTR): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val _lpResultCallBack = lpResultCallBack.rawValue
    val _dwData = dwData
    val res = kni_SendMessageCallbackW(_hWnd, _Msg, _wParam, _lParam, _lpResultCallBack, _dwData)
    return res
}

@SymbolName("win32_kni_SendMessageCallbackW")
private external fun kni_SendMessageCallbackW(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long, lpResultCallBack: NativePtr, dwData: Long): Int

fun BroadcastSystemMessageExA(flags: DWORD, lpInfo: LPDWORD?, Msg: UINT, wParam: WPARAM, lParam: LPARAM, pbsmInfo: PBSMINFO?): Int {
    val _flags = flags
    val _lpInfo = lpInfo.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val _pbsmInfo = pbsmInfo.rawValue
    val res = kni_BroadcastSystemMessageExA(_flags, _lpInfo, _Msg, _wParam, _lParam, _pbsmInfo)
    return res
}

@SymbolName("win32_kni_BroadcastSystemMessageExA")
private external fun kni_BroadcastSystemMessageExA(flags: Int, lpInfo: NativePtr, Msg: Int, wParam: Long, lParam: Long, pbsmInfo: NativePtr): Int

fun BroadcastSystemMessageExW(flags: DWORD, lpInfo: LPDWORD?, Msg: UINT, wParam: WPARAM, lParam: LPARAM, pbsmInfo: PBSMINFO?): Int {
    val _flags = flags
    val _lpInfo = lpInfo.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val _pbsmInfo = pbsmInfo.rawValue
    val res = kni_BroadcastSystemMessageExW(_flags, _lpInfo, _Msg, _wParam, _lParam, _pbsmInfo)
    return res
}

@SymbolName("win32_kni_BroadcastSystemMessageExW")
private external fun kni_BroadcastSystemMessageExW(flags: Int, lpInfo: NativePtr, Msg: Int, wParam: Long, lParam: Long, pbsmInfo: NativePtr): Int

fun BroadcastSystemMessageA(flags: DWORD, lpInfo: LPDWORD?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): Int {
    val _flags = flags
    val _lpInfo = lpInfo.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_BroadcastSystemMessageA(_flags, _lpInfo, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_BroadcastSystemMessageA")
private external fun kni_BroadcastSystemMessageA(flags: Int, lpInfo: NativePtr, Msg: Int, wParam: Long, lParam: Long): Int

fun BroadcastSystemMessageW(flags: DWORD, lpInfo: LPDWORD?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): Int {
    val _flags = flags
    val _lpInfo = lpInfo.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_BroadcastSystemMessageW(_flags, _lpInfo, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_BroadcastSystemMessageW")
private external fun kni_BroadcastSystemMessageW(flags: Int, lpInfo: NativePtr, Msg: Int, wParam: Long, lParam: Long): Int

fun RegisterPowerSettingNotification(hRecipient: HANDLE?, PowerSettingGuid: LPCGUID?, Flags: DWORD): HPOWERNOTIFY? {
    val _hRecipient = hRecipient.rawValue
    val _PowerSettingGuid = PowerSettingGuid.rawValue
    val _Flags = Flags
    val res = kni_RegisterPowerSettingNotification(_hRecipient, _PowerSettingGuid, _Flags)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_RegisterPowerSettingNotification")
private external fun kni_RegisterPowerSettingNotification(hRecipient: NativePtr, PowerSettingGuid: NativePtr, Flags: Int): NativePtr

fun UnregisterPowerSettingNotification(Handle: HPOWERNOTIFY?): WINBOOL {
    val _Handle = Handle.rawValue
    val res = kni_UnregisterPowerSettingNotification(_Handle)
    return res
}

@SymbolName("win32_kni_UnregisterPowerSettingNotification")
private external fun kni_UnregisterPowerSettingNotification(Handle: NativePtr): Int

fun RegisterSuspendResumeNotification(hRecipient: HANDLE?, Flags: DWORD): HPOWERNOTIFY? {
    val _hRecipient = hRecipient.rawValue
    val _Flags = Flags
    val res = kni_RegisterSuspendResumeNotification(_hRecipient, _Flags)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_RegisterSuspendResumeNotification")
private external fun kni_RegisterSuspendResumeNotification(hRecipient: NativePtr, Flags: Int): NativePtr

fun UnregisterSuspendResumeNotification(Handle: HPOWERNOTIFY?): WINBOOL {
    val _Handle = Handle.rawValue
    val res = kni_UnregisterSuspendResumeNotification(_Handle)
    return res
}

@SymbolName("win32_kni_UnregisterSuspendResumeNotification")
private external fun kni_UnregisterSuspendResumeNotification(Handle: NativePtr): Int

fun PostMessageA(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_PostMessageA(_hWnd, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_PostMessageA")
private external fun kni_PostMessageA(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long): Int

fun PostMessageW(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_PostMessageW(_hWnd, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_PostMessageW")
private external fun kni_PostMessageW(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long): Int

fun PostThreadMessageA(idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM): WINBOOL {
    val _idThread = idThread
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_PostThreadMessageA(_idThread, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_PostThreadMessageA")
private external fun kni_PostThreadMessageA(idThread: Int, Msg: Int, wParam: Long, lParam: Long): Int

fun PostThreadMessageW(idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM): WINBOOL {
    val _idThread = idThread
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_PostThreadMessageW(_idThread, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_PostThreadMessageW")
private external fun kni_PostThreadMessageW(idThread: Int, Msg: Int, wParam: Long, lParam: Long): Int

fun AttachThreadInput(idAttach: DWORD, idAttachTo: DWORD, fAttach: WINBOOL): WINBOOL {
    val _idAttach = idAttach
    val _idAttachTo = idAttachTo
    val _fAttach = fAttach
    val res = kni_AttachThreadInput(_idAttach, _idAttachTo, _fAttach)
    return res
}

@SymbolName("win32_kni_AttachThreadInput")
private external fun kni_AttachThreadInput(idAttach: Int, idAttachTo: Int, fAttach: Int): Int

fun ReplyMessage(lResult: LRESULT): WINBOOL {
    val _lResult = lResult
    val res = kni_ReplyMessage(_lResult)
    return res
}

@SymbolName("win32_kni_ReplyMessage")
private external fun kni_ReplyMessage(lResult: Long): Int

fun WaitMessage(): WINBOOL {
    val res = kni_WaitMessage()
    return res
}

@SymbolName("win32_kni_WaitMessage")
private external fun kni_WaitMessage(): Int

fun WaitForInputIdle(hProcess: HANDLE?, dwMilliseconds: DWORD): DWORD {
    val _hProcess = hProcess.rawValue
    val _dwMilliseconds = dwMilliseconds
    val res = kni_WaitForInputIdle(_hProcess, _dwMilliseconds)
    return res
}

@SymbolName("win32_kni_WaitForInputIdle")
private external fun kni_WaitForInputIdle(hProcess: NativePtr, dwMilliseconds: Int): Int

fun DefWindowProcA(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_DefWindowProcA(_hWnd, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_DefWindowProcA")
private external fun kni_DefWindowProcA(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long): Long

fun DefWindowProcW(hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_DefWindowProcW(_hWnd, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_DefWindowProcW")
private external fun kni_DefWindowProcW(hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long): Long

fun PostQuitMessage(nExitCode: Int): Unit {
    val _nExitCode = nExitCode
    val res = kni_PostQuitMessage(_nExitCode)
    return res
}

@SymbolName("win32_kni_PostQuitMessage")
private external fun kni_PostQuitMessage(nExitCode: Int): Unit

fun InSendMessage(): WINBOOL {
    val res = kni_InSendMessage()
    return res
}

@SymbolName("win32_kni_InSendMessage")
private external fun kni_InSendMessage(): Int

fun InSendMessageEx(lpReserved: LPVOID?): DWORD {
    val _lpReserved = lpReserved.rawValue
    val res = kni_InSendMessageEx(_lpReserved)
    return res
}

@SymbolName("win32_kni_InSendMessageEx")
private external fun kni_InSendMessageEx(lpReserved: NativePtr): Int

fun GetDoubleClickTime(): UINT {
    val res = kni_GetDoubleClickTime()
    return res
}

@SymbolName("win32_kni_GetDoubleClickTime")
private external fun kni_GetDoubleClickTime(): Int

fun SetDoubleClickTime(arg0: UINT): WINBOOL {
    val _arg0 = arg0
    val res = kni_SetDoubleClickTime(_arg0)
    return res
}

@SymbolName("win32_kni_SetDoubleClickTime")
private external fun kni_SetDoubleClickTime(arg0: Int): Int

fun RegisterClassA(lpWndClass: CValuesRef<WNDCLASSA>?): ATOM {
    return memScoped {
        val _lpWndClass = lpWndClass?.getPointer(memScope).rawValue
        val res = kni_RegisterClassA(_lpWndClass)
        res
    }
}

@SymbolName("win32_kni_RegisterClassA")
private external fun kni_RegisterClassA(lpWndClass: NativePtr): Short

fun RegisterClassW(lpWndClass: CValuesRef<WNDCLASSW>?): ATOM {
    return memScoped {
        val _lpWndClass = lpWndClass?.getPointer(memScope).rawValue
        val res = kni_RegisterClassW(_lpWndClass)
        res
    }
}

@SymbolName("win32_kni_RegisterClassW")
private external fun kni_RegisterClassW(lpWndClass: NativePtr): Short

fun UnregisterClassA(lpClassName: String?, hInstance: HINSTANCE?): WINBOOL {
    return memScoped {
        val _lpClassName = lpClassName?.cstr?.getPointer(memScope).rawValue
        val _hInstance = hInstance.rawValue
        val res = kni_UnregisterClassA(_lpClassName, _hInstance)
        res
    }
}

@SymbolName("win32_kni_UnregisterClassA")
private external fun kni_UnregisterClassA(lpClassName: NativePtr, hInstance: NativePtr): Int

fun UnregisterClassW(lpClassName: String?, hInstance: HINSTANCE?): WINBOOL {
    return memScoped {
        val _lpClassName = lpClassName?.wcstr?.getPointer(memScope).rawValue
        val _hInstance = hInstance.rawValue
        val res = kni_UnregisterClassW(_lpClassName, _hInstance)
        res
    }
}

@SymbolName("win32_kni_UnregisterClassW")
private external fun kni_UnregisterClassW(lpClassName: NativePtr, hInstance: NativePtr): Int

fun GetClassInfoA(hInstance: HINSTANCE?, lpClassName: String?, lpWndClass: LPWNDCLASSA?): WINBOOL {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpClassName = lpClassName?.cstr?.getPointer(memScope).rawValue
        val _lpWndClass = lpWndClass.rawValue
        val res = kni_GetClassInfoA(_hInstance, _lpClassName, _lpWndClass)
        res
    }
}

@SymbolName("win32_kni_GetClassInfoA")
private external fun kni_GetClassInfoA(hInstance: NativePtr, lpClassName: NativePtr, lpWndClass: NativePtr): Int

fun GetClassInfoW(hInstance: HINSTANCE?, lpClassName: String?, lpWndClass: LPWNDCLASSW?): WINBOOL {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpClassName = lpClassName?.wcstr?.getPointer(memScope).rawValue
        val _lpWndClass = lpWndClass.rawValue
        val res = kni_GetClassInfoW(_hInstance, _lpClassName, _lpWndClass)
        res
    }
}

@SymbolName("win32_kni_GetClassInfoW")
private external fun kni_GetClassInfoW(hInstance: NativePtr, lpClassName: NativePtr, lpWndClass: NativePtr): Int

fun RegisterClassExA(arg0: CValuesRef<WNDCLASSEXA>?): ATOM {
    return memScoped {
        val _arg0 = arg0?.getPointer(memScope).rawValue
        val res = kni_RegisterClassExA(_arg0)
        res
    }
}

@SymbolName("win32_kni_RegisterClassExA")
private external fun kni_RegisterClassExA(arg0: NativePtr): Short

fun RegisterClassExW(arg0: CValuesRef<WNDCLASSEXW>?): ATOM {
    return memScoped {
        val _arg0 = arg0?.getPointer(memScope).rawValue
        val res = kni_RegisterClassExW(_arg0)
        res
    }
}

@SymbolName("win32_kni_RegisterClassExW")
private external fun kni_RegisterClassExW(arg0: NativePtr): Short

fun GetClassInfoExA(hInstance: HINSTANCE?, lpszClass: String?, lpwcx: LPWNDCLASSEXA?): WINBOOL {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpszClass = lpszClass?.cstr?.getPointer(memScope).rawValue
        val _lpwcx = lpwcx.rawValue
        val res = kni_GetClassInfoExA(_hInstance, _lpszClass, _lpwcx)
        res
    }
}

@SymbolName("win32_kni_GetClassInfoExA")
private external fun kni_GetClassInfoExA(hInstance: NativePtr, lpszClass: NativePtr, lpwcx: NativePtr): Int

fun GetClassInfoExW(hInstance: HINSTANCE?, lpszClass: String?, lpwcx: LPWNDCLASSEXW?): WINBOOL {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpszClass = lpszClass?.wcstr?.getPointer(memScope).rawValue
        val _lpwcx = lpwcx.rawValue
        val res = kni_GetClassInfoExW(_hInstance, _lpszClass, _lpwcx)
        res
    }
}

@SymbolName("win32_kni_GetClassInfoExW")
private external fun kni_GetClassInfoExW(hInstance: NativePtr, lpszClass: NativePtr, lpwcx: NativePtr): Int

fun CallWindowProcA(lpPrevWndFunc: WNDPROC?, hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _lpPrevWndFunc = lpPrevWndFunc.rawValue
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_CallWindowProcA(_lpPrevWndFunc, _hWnd, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_CallWindowProcA")
private external fun kni_CallWindowProcA(lpPrevWndFunc: NativePtr, hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long): Long

fun CallWindowProcW(lpPrevWndFunc: WNDPROC?, hWnd: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _lpPrevWndFunc = lpPrevWndFunc.rawValue
    val _hWnd = hWnd.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_CallWindowProcW(_lpPrevWndFunc, _hWnd, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_CallWindowProcW")
private external fun kni_CallWindowProcW(lpPrevWndFunc: NativePtr, hWnd: NativePtr, Msg: Int, wParam: Long, lParam: Long): Long

fun RegisterDeviceNotificationA(hRecipient: HANDLE?, NotificationFilter: LPVOID?, Flags: DWORD): HDEVNOTIFY? {
    val _hRecipient = hRecipient.rawValue
    val _NotificationFilter = NotificationFilter.rawValue
    val _Flags = Flags
    val res = kni_RegisterDeviceNotificationA(_hRecipient, _NotificationFilter, _Flags)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_RegisterDeviceNotificationA")
private external fun kni_RegisterDeviceNotificationA(hRecipient: NativePtr, NotificationFilter: NativePtr, Flags: Int): NativePtr

fun RegisterDeviceNotificationW(hRecipient: HANDLE?, NotificationFilter: LPVOID?, Flags: DWORD): HDEVNOTIFY? {
    val _hRecipient = hRecipient.rawValue
    val _NotificationFilter = NotificationFilter.rawValue
    val _Flags = Flags
    val res = kni_RegisterDeviceNotificationW(_hRecipient, _NotificationFilter, _Flags)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_RegisterDeviceNotificationW")
private external fun kni_RegisterDeviceNotificationW(hRecipient: NativePtr, NotificationFilter: NativePtr, Flags: Int): NativePtr

fun UnregisterDeviceNotification(Handle: HDEVNOTIFY?): WINBOOL {
    val _Handle = Handle.rawValue
    val res = kni_UnregisterDeviceNotification(_Handle)
    return res
}

@SymbolName("win32_kni_UnregisterDeviceNotification")
private external fun kni_UnregisterDeviceNotification(Handle: NativePtr): Int

fun CreateWindowExA(dwExStyle: DWORD, lpClassName: String?, lpWindowName: String?, dwStyle: DWORD, X: Int, Y: Int, nWidth: Int, nHeight: Int, hWndParent: HWND?, hMenu: HMENU?, hInstance: HINSTANCE?, lpParam: LPVOID?): HWND? {
    return memScoped {
        val _dwExStyle = dwExStyle
        val _lpClassName = lpClassName?.cstr?.getPointer(memScope).rawValue
        val _lpWindowName = lpWindowName?.cstr?.getPointer(memScope).rawValue
        val _dwStyle = dwStyle
        val _X = X
        val _Y = Y
        val _nWidth = nWidth
        val _nHeight = nHeight
        val _hWndParent = hWndParent.rawValue
        val _hMenu = hMenu.rawValue
        val _hInstance = hInstance.rawValue
        val _lpParam = lpParam.rawValue
        val res = kni_CreateWindowExA(_dwExStyle, _lpClassName, _lpWindowName, _dwStyle, _X, _Y, _nWidth, _nHeight, _hWndParent, _hMenu, _hInstance, _lpParam)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_CreateWindowExA")
private external fun kni_CreateWindowExA(dwExStyle: Int, lpClassName: NativePtr, lpWindowName: NativePtr, dwStyle: Int, X: Int, Y: Int, nWidth: Int, nHeight: Int, hWndParent: NativePtr, hMenu: NativePtr, hInstance: NativePtr, lpParam: NativePtr): NativePtr

fun CreateWindowExW(dwExStyle: DWORD, lpClassName: String?, lpWindowName: String?, dwStyle: DWORD, X: Int, Y: Int, nWidth: Int, nHeight: Int, hWndParent: HWND?, hMenu: HMENU?, hInstance: HINSTANCE?, lpParam: LPVOID?): HWND? {
    return memScoped {
        val _dwExStyle = dwExStyle
        val _lpClassName = lpClassName?.wcstr?.getPointer(memScope).rawValue
        val _lpWindowName = lpWindowName?.wcstr?.getPointer(memScope).rawValue
        val _dwStyle = dwStyle
        val _X = X
        val _Y = Y
        val _nWidth = nWidth
        val _nHeight = nHeight
        val _hWndParent = hWndParent.rawValue
        val _hMenu = hMenu.rawValue
        val _hInstance = hInstance.rawValue
        val _lpParam = lpParam.rawValue
        val res = kni_CreateWindowExW(_dwExStyle, _lpClassName, _lpWindowName, _dwStyle, _X, _Y, _nWidth, _nHeight, _hWndParent, _hMenu, _hInstance, _lpParam)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_CreateWindowExW")
private external fun kni_CreateWindowExW(dwExStyle: Int, lpClassName: NativePtr, lpWindowName: NativePtr, dwStyle: Int, X: Int, Y: Int, nWidth: Int, nHeight: Int, hWndParent: NativePtr, hMenu: NativePtr, hInstance: NativePtr, lpParam: NativePtr): NativePtr

fun IsWindow(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_IsWindow(_hWnd)
    return res
}

@SymbolName("win32_kni_IsWindow")
private external fun kni_IsWindow(hWnd: NativePtr): Int

fun IsMenu(hMenu: HMENU?): WINBOOL {
    val _hMenu = hMenu.rawValue
    val res = kni_IsMenu(_hMenu)
    return res
}

@SymbolName("win32_kni_IsMenu")
private external fun kni_IsMenu(hMenu: NativePtr): Int

fun IsChild(hWndParent: HWND?, hWnd: HWND?): WINBOOL {
    val _hWndParent = hWndParent.rawValue
    val _hWnd = hWnd.rawValue
    val res = kni_IsChild(_hWndParent, _hWnd)
    return res
}

@SymbolName("win32_kni_IsChild")
private external fun kni_IsChild(hWndParent: NativePtr, hWnd: NativePtr): Int

fun DestroyWindow(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_DestroyWindow(_hWnd)
    return res
}

@SymbolName("win32_kni_DestroyWindow")
private external fun kni_DestroyWindow(hWnd: NativePtr): Int

fun ShowWindow(hWnd: HWND?, nCmdShow: Int): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _nCmdShow = nCmdShow
    val res = kni_ShowWindow(_hWnd, _nCmdShow)
    return res
}

@SymbolName("win32_kni_ShowWindow")
private external fun kni_ShowWindow(hWnd: NativePtr, nCmdShow: Int): Int

fun AnimateWindow(hWnd: HWND?, dwTime: DWORD, dwFlags: DWORD): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _dwTime = dwTime
    val _dwFlags = dwFlags
    val res = kni_AnimateWindow(_hWnd, _dwTime, _dwFlags)
    return res
}

@SymbolName("win32_kni_AnimateWindow")
private external fun kni_AnimateWindow(hWnd: NativePtr, dwTime: Int, dwFlags: Int): Int

fun UpdateLayeredWindow(hWnd: HWND?, hdcDst: HDC?, pptDst: CValuesRef<POINT>?, psize: CValuesRef<SIZE>?, hdcSrc: HDC?, pptSrc: CValuesRef<POINT>?, crKey: COLORREF, pblend: CValuesRef<BLENDFUNCTION>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _hdcDst = hdcDst.rawValue
        val _pptDst = pptDst?.getPointer(memScope).rawValue
        val _psize = psize?.getPointer(memScope).rawValue
        val _hdcSrc = hdcSrc.rawValue
        val _pptSrc = pptSrc?.getPointer(memScope).rawValue
        val _crKey = crKey
        val _pblend = pblend?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_UpdateLayeredWindow(_hWnd, _hdcDst, _pptDst, _psize, _hdcSrc, _pptSrc, _crKey, _pblend, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_UpdateLayeredWindow")
private external fun kni_UpdateLayeredWindow(hWnd: NativePtr, hdcDst: NativePtr, pptDst: NativePtr, psize: NativePtr, hdcSrc: NativePtr, pptSrc: NativePtr, crKey: Int, pblend: NativePtr, dwFlags: Int): Int

fun UpdateLayeredWindowIndirect(hWnd: HWND?, pULWInfo: CValuesRef<UPDATELAYEREDWINDOWINFO>?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _pULWInfo = pULWInfo?.getPointer(memScope).rawValue
        val res = kni_UpdateLayeredWindowIndirect(_hWnd, _pULWInfo)
        res
    }
}

@SymbolName("win32_kni_UpdateLayeredWindowIndirect")
private external fun kni_UpdateLayeredWindowIndirect(hWnd: NativePtr, pULWInfo: NativePtr): Int

fun GetLayeredWindowAttributes(hwnd: HWND?, pcrKey: CValuesRef<COLORREFVar>?, pbAlpha: CValuesRef<BYTEVar>?, pdwFlags: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hwnd = hwnd.rawValue
        val _pcrKey = pcrKey?.getPointer(memScope).rawValue
        val _pbAlpha = pbAlpha?.getPointer(memScope).rawValue
        val _pdwFlags = pdwFlags?.getPointer(memScope).rawValue
        val res = kni_GetLayeredWindowAttributes(_hwnd, _pcrKey, _pbAlpha, _pdwFlags)
        res
    }
}

@SymbolName("win32_kni_GetLayeredWindowAttributes")
private external fun kni_GetLayeredWindowAttributes(hwnd: NativePtr, pcrKey: NativePtr, pbAlpha: NativePtr, pdwFlags: NativePtr): Int

fun PrintWindow(hwnd: HWND?, hdcBlt: HDC?, nFlags: UINT): WINBOOL {
    val _hwnd = hwnd.rawValue
    val _hdcBlt = hdcBlt.rawValue
    val _nFlags = nFlags
    val res = kni_PrintWindow(_hwnd, _hdcBlt, _nFlags)
    return res
}

@SymbolName("win32_kni_PrintWindow")
private external fun kni_PrintWindow(hwnd: NativePtr, hdcBlt: NativePtr, nFlags: Int): Int

fun SetLayeredWindowAttributes(hwnd: HWND?, crKey: COLORREF, bAlpha: BYTE, dwFlags: DWORD): WINBOOL {
    val _hwnd = hwnd.rawValue
    val _crKey = crKey
    val _bAlpha = bAlpha
    val _dwFlags = dwFlags
    val res = kni_SetLayeredWindowAttributes(_hwnd, _crKey, _bAlpha, _dwFlags)
    return res
}

@SymbolName("win32_kni_SetLayeredWindowAttributes")
private external fun kni_SetLayeredWindowAttributes(hwnd: NativePtr, crKey: Int, bAlpha: Byte, dwFlags: Int): Int

fun ShowWindowAsync(hWnd: HWND?, nCmdShow: Int): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _nCmdShow = nCmdShow
    val res = kni_ShowWindowAsync(_hWnd, _nCmdShow)
    return res
}

@SymbolName("win32_kni_ShowWindowAsync")
private external fun kni_ShowWindowAsync(hWnd: NativePtr, nCmdShow: Int): Int

fun FlashWindow(hWnd: HWND?, bInvert: WINBOOL): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _bInvert = bInvert
    val res = kni_FlashWindow(_hWnd, _bInvert)
    return res
}

@SymbolName("win32_kni_FlashWindow")
private external fun kni_FlashWindow(hWnd: NativePtr, bInvert: Int): Int

fun FlashWindowEx(pfwi: PFLASHWINFO?): WINBOOL {
    val _pfwi = pfwi.rawValue
    val res = kni_FlashWindowEx(_pfwi)
    return res
}

@SymbolName("win32_kni_FlashWindowEx")
private external fun kni_FlashWindowEx(pfwi: NativePtr): Int

fun ShowOwnedPopups(hWnd: HWND?, fShow: WINBOOL): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _fShow = fShow
    val res = kni_ShowOwnedPopups(_hWnd, _fShow)
    return res
}

@SymbolName("win32_kni_ShowOwnedPopups")
private external fun kni_ShowOwnedPopups(hWnd: NativePtr, fShow: Int): Int

fun OpenIcon(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_OpenIcon(_hWnd)
    return res
}

@SymbolName("win32_kni_OpenIcon")
private external fun kni_OpenIcon(hWnd: NativePtr): Int

fun CloseWindow(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_CloseWindow(_hWnd)
    return res
}

@SymbolName("win32_kni_CloseWindow")
private external fun kni_CloseWindow(hWnd: NativePtr): Int

fun MoveWindow(hWnd: HWND?, X: Int, Y: Int, nWidth: Int, nHeight: Int, bRepaint: WINBOOL): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _X = X
    val _Y = Y
    val _nWidth = nWidth
    val _nHeight = nHeight
    val _bRepaint = bRepaint
    val res = kni_MoveWindow(_hWnd, _X, _Y, _nWidth, _nHeight, _bRepaint)
    return res
}

@SymbolName("win32_kni_MoveWindow")
private external fun kni_MoveWindow(hWnd: NativePtr, X: Int, Y: Int, nWidth: Int, nHeight: Int, bRepaint: Int): Int

fun SetWindowPos(hWnd: HWND?, hWndInsertAfter: HWND?, X: Int, Y: Int, cx: Int, cy: Int, uFlags: UINT): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _hWndInsertAfter = hWndInsertAfter.rawValue
    val _X = X
    val _Y = Y
    val _cx = cx
    val _cy = cy
    val _uFlags = uFlags
    val res = kni_SetWindowPos(_hWnd, _hWndInsertAfter, _X, _Y, _cx, _cy, _uFlags)
    return res
}

@SymbolName("win32_kni_SetWindowPos")
private external fun kni_SetWindowPos(hWnd: NativePtr, hWndInsertAfter: NativePtr, X: Int, Y: Int, cx: Int, cy: Int, uFlags: Int): Int

fun GetWindowPlacement(hWnd: HWND?, lpwndpl: CValuesRef<WINDOWPLACEMENT>?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpwndpl = lpwndpl?.getPointer(memScope).rawValue
        val res = kni_GetWindowPlacement(_hWnd, _lpwndpl)
        res
    }
}

@SymbolName("win32_kni_GetWindowPlacement")
private external fun kni_GetWindowPlacement(hWnd: NativePtr, lpwndpl: NativePtr): Int

fun SetWindowPlacement(hWnd: HWND?, lpwndpl: CValuesRef<WINDOWPLACEMENT>?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpwndpl = lpwndpl?.getPointer(memScope).rawValue
        val res = kni_SetWindowPlacement(_hWnd, _lpwndpl)
        res
    }
}

@SymbolName("win32_kni_SetWindowPlacement")
private external fun kni_SetWindowPlacement(hWnd: NativePtr, lpwndpl: NativePtr): Int

fun BeginDeferWindowPos(nNumWindows: Int): HDWP? {
    val _nNumWindows = nNumWindows
    val res = kni_BeginDeferWindowPos(_nNumWindows)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_BeginDeferWindowPos")
private external fun kni_BeginDeferWindowPos(nNumWindows: Int): NativePtr

fun DeferWindowPos(hWinPosInfo: HDWP?, hWnd: HWND?, hWndInsertAfter: HWND?, x: Int, y: Int, cx: Int, cy: Int, uFlags: UINT): HDWP? {
    val _hWinPosInfo = hWinPosInfo.rawValue
    val _hWnd = hWnd.rawValue
    val _hWndInsertAfter = hWndInsertAfter.rawValue
    val _x = x
    val _y = y
    val _cx = cx
    val _cy = cy
    val _uFlags = uFlags
    val res = kni_DeferWindowPos(_hWinPosInfo, _hWnd, _hWndInsertAfter, _x, _y, _cx, _cy, _uFlags)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_DeferWindowPos")
private external fun kni_DeferWindowPos(hWinPosInfo: NativePtr, hWnd: NativePtr, hWndInsertAfter: NativePtr, x: Int, y: Int, cx: Int, cy: Int, uFlags: Int): NativePtr

fun EndDeferWindowPos(hWinPosInfo: HDWP?): WINBOOL {
    val _hWinPosInfo = hWinPosInfo.rawValue
    val res = kni_EndDeferWindowPos(_hWinPosInfo)
    return res
}

@SymbolName("win32_kni_EndDeferWindowPos")
private external fun kni_EndDeferWindowPos(hWinPosInfo: NativePtr): Int

fun IsWindowVisible(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_IsWindowVisible(_hWnd)
    return res
}

@SymbolName("win32_kni_IsWindowVisible")
private external fun kni_IsWindowVisible(hWnd: NativePtr): Int

fun IsIconic(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_IsIconic(_hWnd)
    return res
}

@SymbolName("win32_kni_IsIconic")
private external fun kni_IsIconic(hWnd: NativePtr): Int

fun AnyPopup(): WINBOOL {
    val res = kni_AnyPopup()
    return res
}

@SymbolName("win32_kni_AnyPopup")
private external fun kni_AnyPopup(): Int

fun BringWindowToTop(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_BringWindowToTop(_hWnd)
    return res
}

@SymbolName("win32_kni_BringWindowToTop")
private external fun kni_BringWindowToTop(hWnd: NativePtr): Int

fun IsZoomed(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_IsZoomed(_hWnd)
    return res
}

@SymbolName("win32_kni_IsZoomed")
private external fun kni_IsZoomed(hWnd: NativePtr): Int

fun CreateDialogParamA(hInstance: HINSTANCE?, lpTemplateName: String?, hWndParent: HWND?, lpDialogFunc: DLGPROC?, dwInitParam: LPARAM): HWND? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpTemplateName = lpTemplateName?.cstr?.getPointer(memScope).rawValue
        val _hWndParent = hWndParent.rawValue
        val _lpDialogFunc = lpDialogFunc.rawValue
        val _dwInitParam = dwInitParam
        val res = kni_CreateDialogParamA(_hInstance, _lpTemplateName, _hWndParent, _lpDialogFunc, _dwInitParam)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_CreateDialogParamA")
private external fun kni_CreateDialogParamA(hInstance: NativePtr, lpTemplateName: NativePtr, hWndParent: NativePtr, lpDialogFunc: NativePtr, dwInitParam: Long): NativePtr

fun CreateDialogParamW(hInstance: HINSTANCE?, lpTemplateName: String?, hWndParent: HWND?, lpDialogFunc: DLGPROC?, dwInitParam: LPARAM): HWND? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpTemplateName = lpTemplateName?.wcstr?.getPointer(memScope).rawValue
        val _hWndParent = hWndParent.rawValue
        val _lpDialogFunc = lpDialogFunc.rawValue
        val _dwInitParam = dwInitParam
        val res = kni_CreateDialogParamW(_hInstance, _lpTemplateName, _hWndParent, _lpDialogFunc, _dwInitParam)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_CreateDialogParamW")
private external fun kni_CreateDialogParamW(hInstance: NativePtr, lpTemplateName: NativePtr, hWndParent: NativePtr, lpDialogFunc: NativePtr, dwInitParam: Long): NativePtr

fun CreateDialogIndirectParamA(hInstance: HINSTANCE?, lpTemplate: LPCDLGTEMPLATEA?, hWndParent: HWND?, lpDialogFunc: DLGPROC?, dwInitParam: LPARAM): HWND? {
    val _hInstance = hInstance.rawValue
    val _lpTemplate = lpTemplate.rawValue
    val _hWndParent = hWndParent.rawValue
    val _lpDialogFunc = lpDialogFunc.rawValue
    val _dwInitParam = dwInitParam
    val res = kni_CreateDialogIndirectParamA(_hInstance, _lpTemplate, _hWndParent, _lpDialogFunc, _dwInitParam)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_CreateDialogIndirectParamA")
private external fun kni_CreateDialogIndirectParamA(hInstance: NativePtr, lpTemplate: NativePtr, hWndParent: NativePtr, lpDialogFunc: NativePtr, dwInitParam: Long): NativePtr

fun CreateDialogIndirectParamW(hInstance: HINSTANCE?, lpTemplate: LPCDLGTEMPLATEW?, hWndParent: HWND?, lpDialogFunc: DLGPROC?, dwInitParam: LPARAM): HWND? {
    val _hInstance = hInstance.rawValue
    val _lpTemplate = lpTemplate.rawValue
    val _hWndParent = hWndParent.rawValue
    val _lpDialogFunc = lpDialogFunc.rawValue
    val _dwInitParam = dwInitParam
    val res = kni_CreateDialogIndirectParamW(_hInstance, _lpTemplate, _hWndParent, _lpDialogFunc, _dwInitParam)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_CreateDialogIndirectParamW")
private external fun kni_CreateDialogIndirectParamW(hInstance: NativePtr, lpTemplate: NativePtr, hWndParent: NativePtr, lpDialogFunc: NativePtr, dwInitParam: Long): NativePtr

fun DialogBoxParamA(hInstance: HINSTANCE?, lpTemplateName: String?, hWndParent: HWND?, lpDialogFunc: DLGPROC?, dwInitParam: LPARAM): INT_PTR {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpTemplateName = lpTemplateName?.cstr?.getPointer(memScope).rawValue
        val _hWndParent = hWndParent.rawValue
        val _lpDialogFunc = lpDialogFunc.rawValue
        val _dwInitParam = dwInitParam
        val res = kni_DialogBoxParamA(_hInstance, _lpTemplateName, _hWndParent, _lpDialogFunc, _dwInitParam)
        res
    }
}

@SymbolName("win32_kni_DialogBoxParamA")
private external fun kni_DialogBoxParamA(hInstance: NativePtr, lpTemplateName: NativePtr, hWndParent: NativePtr, lpDialogFunc: NativePtr, dwInitParam: Long): Long

fun DialogBoxParamW(hInstance: HINSTANCE?, lpTemplateName: String?, hWndParent: HWND?, lpDialogFunc: DLGPROC?, dwInitParam: LPARAM): INT_PTR {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpTemplateName = lpTemplateName?.wcstr?.getPointer(memScope).rawValue
        val _hWndParent = hWndParent.rawValue
        val _lpDialogFunc = lpDialogFunc.rawValue
        val _dwInitParam = dwInitParam
        val res = kni_DialogBoxParamW(_hInstance, _lpTemplateName, _hWndParent, _lpDialogFunc, _dwInitParam)
        res
    }
}

@SymbolName("win32_kni_DialogBoxParamW")
private external fun kni_DialogBoxParamW(hInstance: NativePtr, lpTemplateName: NativePtr, hWndParent: NativePtr, lpDialogFunc: NativePtr, dwInitParam: Long): Long

fun DialogBoxIndirectParamA(hInstance: HINSTANCE?, hDialogTemplate: LPCDLGTEMPLATEA?, hWndParent: HWND?, lpDialogFunc: DLGPROC?, dwInitParam: LPARAM): INT_PTR {
    val _hInstance = hInstance.rawValue
    val _hDialogTemplate = hDialogTemplate.rawValue
    val _hWndParent = hWndParent.rawValue
    val _lpDialogFunc = lpDialogFunc.rawValue
    val _dwInitParam = dwInitParam
    val res = kni_DialogBoxIndirectParamA(_hInstance, _hDialogTemplate, _hWndParent, _lpDialogFunc, _dwInitParam)
    return res
}

@SymbolName("win32_kni_DialogBoxIndirectParamA")
private external fun kni_DialogBoxIndirectParamA(hInstance: NativePtr, hDialogTemplate: NativePtr, hWndParent: NativePtr, lpDialogFunc: NativePtr, dwInitParam: Long): Long

fun DialogBoxIndirectParamW(hInstance: HINSTANCE?, hDialogTemplate: LPCDLGTEMPLATEW?, hWndParent: HWND?, lpDialogFunc: DLGPROC?, dwInitParam: LPARAM): INT_PTR {
    val _hInstance = hInstance.rawValue
    val _hDialogTemplate = hDialogTemplate.rawValue
    val _hWndParent = hWndParent.rawValue
    val _lpDialogFunc = lpDialogFunc.rawValue
    val _dwInitParam = dwInitParam
    val res = kni_DialogBoxIndirectParamW(_hInstance, _hDialogTemplate, _hWndParent, _lpDialogFunc, _dwInitParam)
    return res
}

@SymbolName("win32_kni_DialogBoxIndirectParamW")
private external fun kni_DialogBoxIndirectParamW(hInstance: NativePtr, hDialogTemplate: NativePtr, hWndParent: NativePtr, lpDialogFunc: NativePtr, dwInitParam: Long): Long

fun EndDialog(hDlg: HWND?, nResult: INT_PTR): WINBOOL {
    val _hDlg = hDlg.rawValue
    val _nResult = nResult
    val res = kni_EndDialog(_hDlg, _nResult)
    return res
}

@SymbolName("win32_kni_EndDialog")
private external fun kni_EndDialog(hDlg: NativePtr, nResult: Long): Int

fun GetDlgItem(hDlg: HWND?, nIDDlgItem: Int): HWND? {
    val _hDlg = hDlg.rawValue
    val _nIDDlgItem = nIDDlgItem
    val res = kni_GetDlgItem(_hDlg, _nIDDlgItem)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetDlgItem")
private external fun kni_GetDlgItem(hDlg: NativePtr, nIDDlgItem: Int): NativePtr

fun SetDlgItemInt(hDlg: HWND?, nIDDlgItem: Int, uValue: UINT, bSigned: WINBOOL): WINBOOL {
    val _hDlg = hDlg.rawValue
    val _nIDDlgItem = nIDDlgItem
    val _uValue = uValue
    val _bSigned = bSigned
    val res = kni_SetDlgItemInt(_hDlg, _nIDDlgItem, _uValue, _bSigned)
    return res
}

@SymbolName("win32_kni_SetDlgItemInt")
private external fun kni_SetDlgItemInt(hDlg: NativePtr, nIDDlgItem: Int, uValue: Int, bSigned: Int): Int

fun GetDlgItemInt(hDlg: HWND?, nIDDlgItem: Int, lpTranslated: CValuesRef<WINBOOLVar>?, bSigned: WINBOOL): UINT {
    return memScoped {
        val _hDlg = hDlg.rawValue
        val _nIDDlgItem = nIDDlgItem
        val _lpTranslated = lpTranslated?.getPointer(memScope).rawValue
        val _bSigned = bSigned
        val res = kni_GetDlgItemInt(_hDlg, _nIDDlgItem, _lpTranslated, _bSigned)
        res
    }
}

@SymbolName("win32_kni_GetDlgItemInt")
private external fun kni_GetDlgItemInt(hDlg: NativePtr, nIDDlgItem: Int, lpTranslated: NativePtr, bSigned: Int): Int

fun SetDlgItemTextA(hDlg: HWND?, nIDDlgItem: Int, lpString: String?): WINBOOL {
    return memScoped {
        val _hDlg = hDlg.rawValue
        val _nIDDlgItem = nIDDlgItem
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetDlgItemTextA(_hDlg, _nIDDlgItem, _lpString)
        res
    }
}

@SymbolName("win32_kni_SetDlgItemTextA")
private external fun kni_SetDlgItemTextA(hDlg: NativePtr, nIDDlgItem: Int, lpString: NativePtr): Int

fun SetDlgItemTextW(hDlg: HWND?, nIDDlgItem: Int, lpString: String?): WINBOOL {
    return memScoped {
        val _hDlg = hDlg.rawValue
        val _nIDDlgItem = nIDDlgItem
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetDlgItemTextW(_hDlg, _nIDDlgItem, _lpString)
        res
    }
}

@SymbolName("win32_kni_SetDlgItemTextW")
private external fun kni_SetDlgItemTextW(hDlg: NativePtr, nIDDlgItem: Int, lpString: NativePtr): Int

fun GetDlgItemTextA(hDlg: HWND?, nIDDlgItem: Int, lpString: LPSTR?, cchMax: Int): UINT {
    val _hDlg = hDlg.rawValue
    val _nIDDlgItem = nIDDlgItem
    val _lpString = lpString.rawValue
    val _cchMax = cchMax
    val res = kni_GetDlgItemTextA(_hDlg, _nIDDlgItem, _lpString, _cchMax)
    return res
}

@SymbolName("win32_kni_GetDlgItemTextA")
private external fun kni_GetDlgItemTextA(hDlg: NativePtr, nIDDlgItem: Int, lpString: NativePtr, cchMax: Int): Int

fun GetDlgItemTextW(hDlg: HWND?, nIDDlgItem: Int, lpString: LPWSTR?, cchMax: Int): UINT {
    val _hDlg = hDlg.rawValue
    val _nIDDlgItem = nIDDlgItem
    val _lpString = lpString.rawValue
    val _cchMax = cchMax
    val res = kni_GetDlgItemTextW(_hDlg, _nIDDlgItem, _lpString, _cchMax)
    return res
}

@SymbolName("win32_kni_GetDlgItemTextW")
private external fun kni_GetDlgItemTextW(hDlg: NativePtr, nIDDlgItem: Int, lpString: NativePtr, cchMax: Int): Int

fun CheckDlgButton(hDlg: HWND?, nIDButton: Int, uCheck: UINT): WINBOOL {
    val _hDlg = hDlg.rawValue
    val _nIDButton = nIDButton
    val _uCheck = uCheck
    val res = kni_CheckDlgButton(_hDlg, _nIDButton, _uCheck)
    return res
}

@SymbolName("win32_kni_CheckDlgButton")
private external fun kni_CheckDlgButton(hDlg: NativePtr, nIDButton: Int, uCheck: Int): Int

fun CheckRadioButton(hDlg: HWND?, nIDFirstButton: Int, nIDLastButton: Int, nIDCheckButton: Int): WINBOOL {
    val _hDlg = hDlg.rawValue
    val _nIDFirstButton = nIDFirstButton
    val _nIDLastButton = nIDLastButton
    val _nIDCheckButton = nIDCheckButton
    val res = kni_CheckRadioButton(_hDlg, _nIDFirstButton, _nIDLastButton, _nIDCheckButton)
    return res
}

@SymbolName("win32_kni_CheckRadioButton")
private external fun kni_CheckRadioButton(hDlg: NativePtr, nIDFirstButton: Int, nIDLastButton: Int, nIDCheckButton: Int): Int

fun IsDlgButtonChecked(hDlg: HWND?, nIDButton: Int): UINT {
    val _hDlg = hDlg.rawValue
    val _nIDButton = nIDButton
    val res = kni_IsDlgButtonChecked(_hDlg, _nIDButton)
    return res
}

@SymbolName("win32_kni_IsDlgButtonChecked")
private external fun kni_IsDlgButtonChecked(hDlg: NativePtr, nIDButton: Int): Int

fun SendDlgItemMessageA(hDlg: HWND?, nIDDlgItem: Int, Msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hDlg = hDlg.rawValue
    val _nIDDlgItem = nIDDlgItem
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_SendDlgItemMessageA(_hDlg, _nIDDlgItem, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_SendDlgItemMessageA")
private external fun kni_SendDlgItemMessageA(hDlg: NativePtr, nIDDlgItem: Int, Msg: Int, wParam: Long, lParam: Long): Long

fun SendDlgItemMessageW(hDlg: HWND?, nIDDlgItem: Int, Msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hDlg = hDlg.rawValue
    val _nIDDlgItem = nIDDlgItem
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_SendDlgItemMessageW(_hDlg, _nIDDlgItem, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_SendDlgItemMessageW")
private external fun kni_SendDlgItemMessageW(hDlg: NativePtr, nIDDlgItem: Int, Msg: Int, wParam: Long, lParam: Long): Long

fun GetNextDlgGroupItem(hDlg: HWND?, hCtl: HWND?, bPrevious: WINBOOL): HWND? {
    val _hDlg = hDlg.rawValue
    val _hCtl = hCtl.rawValue
    val _bPrevious = bPrevious
    val res = kni_GetNextDlgGroupItem(_hDlg, _hCtl, _bPrevious)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetNextDlgGroupItem")
private external fun kni_GetNextDlgGroupItem(hDlg: NativePtr, hCtl: NativePtr, bPrevious: Int): NativePtr

fun GetNextDlgTabItem(hDlg: HWND?, hCtl: HWND?, bPrevious: WINBOOL): HWND? {
    val _hDlg = hDlg.rawValue
    val _hCtl = hCtl.rawValue
    val _bPrevious = bPrevious
    val res = kni_GetNextDlgTabItem(_hDlg, _hCtl, _bPrevious)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetNextDlgTabItem")
private external fun kni_GetNextDlgTabItem(hDlg: NativePtr, hCtl: NativePtr, bPrevious: Int): NativePtr

fun GetDlgCtrlID(hWnd: HWND?): Int {
    val _hWnd = hWnd.rawValue
    val res = kni_GetDlgCtrlID(_hWnd)
    return res
}

@SymbolName("win32_kni_GetDlgCtrlID")
private external fun kni_GetDlgCtrlID(hWnd: NativePtr): Int

fun GetDialogBaseUnits(): Int {
    val res = kni_GetDialogBaseUnits()
    return res
}

@SymbolName("win32_kni_GetDialogBaseUnits")
private external fun kni_GetDialogBaseUnits(): Int

fun DefDlgProcA(hDlg: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hDlg = hDlg.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_DefDlgProcA(_hDlg, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_DefDlgProcA")
private external fun kni_DefDlgProcA(hDlg: NativePtr, Msg: Int, wParam: Long, lParam: Long): Long

fun DefDlgProcW(hDlg: HWND?, Msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hDlg = hDlg.rawValue
    val _Msg = Msg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_DefDlgProcW(_hDlg, _Msg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_DefDlgProcW")
private external fun kni_DefDlgProcW(hDlg: NativePtr, Msg: Int, wParam: Long, lParam: Long): Long

fun CallMsgFilterA(lpMsg: LPMSG?, nCode: Int): WINBOOL {
    val _lpMsg = lpMsg.rawValue
    val _nCode = nCode
    val res = kni_CallMsgFilterA(_lpMsg, _nCode)
    return res
}

@SymbolName("win32_kni_CallMsgFilterA")
private external fun kni_CallMsgFilterA(lpMsg: NativePtr, nCode: Int): Int

fun CallMsgFilterW(lpMsg: LPMSG?, nCode: Int): WINBOOL {
    val _lpMsg = lpMsg.rawValue
    val _nCode = nCode
    val res = kni_CallMsgFilterW(_lpMsg, _nCode)
    return res
}

@SymbolName("win32_kni_CallMsgFilterW")
private external fun kni_CallMsgFilterW(lpMsg: NativePtr, nCode: Int): Int

fun OpenClipboard(hWndNewOwner: HWND?): WINBOOL {
    val _hWndNewOwner = hWndNewOwner.rawValue
    val res = kni_OpenClipboard(_hWndNewOwner)
    return res
}

@SymbolName("win32_kni_OpenClipboard")
private external fun kni_OpenClipboard(hWndNewOwner: NativePtr): Int

fun CloseClipboard(): WINBOOL {
    val res = kni_CloseClipboard()
    return res
}

@SymbolName("win32_kni_CloseClipboard")
private external fun kni_CloseClipboard(): Int

fun GetClipboardSequenceNumber(): DWORD {
    val res = kni_GetClipboardSequenceNumber()
    return res
}

@SymbolName("win32_kni_GetClipboardSequenceNumber")
private external fun kni_GetClipboardSequenceNumber(): Int

fun GetClipboardOwner(): HWND? {
    val res = kni_GetClipboardOwner()
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetClipboardOwner")
private external fun kni_GetClipboardOwner(): NativePtr

fun SetClipboardViewer(hWndNewViewer: HWND?): HWND? {
    val _hWndNewViewer = hWndNewViewer.rawValue
    val res = kni_SetClipboardViewer(_hWndNewViewer)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_SetClipboardViewer")
private external fun kni_SetClipboardViewer(hWndNewViewer: NativePtr): NativePtr

fun GetClipboardViewer(): HWND? {
    val res = kni_GetClipboardViewer()
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetClipboardViewer")
private external fun kni_GetClipboardViewer(): NativePtr

fun ChangeClipboardChain(hWndRemove: HWND?, hWndNewNext: HWND?): WINBOOL {
    val _hWndRemove = hWndRemove.rawValue
    val _hWndNewNext = hWndNewNext.rawValue
    val res = kni_ChangeClipboardChain(_hWndRemove, _hWndNewNext)
    return res
}

@SymbolName("win32_kni_ChangeClipboardChain")
private external fun kni_ChangeClipboardChain(hWndRemove: NativePtr, hWndNewNext: NativePtr): Int

fun SetClipboardData(uFormat: UINT, hMem: HANDLE?): HANDLE? {
    val _uFormat = uFormat
    val _hMem = hMem.rawValue
    val res = kni_SetClipboardData(_uFormat, _hMem)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_SetClipboardData")
private external fun kni_SetClipboardData(uFormat: Int, hMem: NativePtr): NativePtr

fun GetClipboardData(uFormat: UINT): HANDLE? {
    val _uFormat = uFormat
    val res = kni_GetClipboardData(_uFormat)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_GetClipboardData")
private external fun kni_GetClipboardData(uFormat: Int): NativePtr

fun RegisterClipboardFormatA(lpszFormat: String?): UINT {
    return memScoped {
        val _lpszFormat = lpszFormat?.cstr?.getPointer(memScope).rawValue
        val res = kni_RegisterClipboardFormatA(_lpszFormat)
        res
    }
}

@SymbolName("win32_kni_RegisterClipboardFormatA")
private external fun kni_RegisterClipboardFormatA(lpszFormat: NativePtr): Int

fun RegisterClipboardFormatW(lpszFormat: String?): UINT {
    return memScoped {
        val _lpszFormat = lpszFormat?.wcstr?.getPointer(memScope).rawValue
        val res = kni_RegisterClipboardFormatW(_lpszFormat)
        res
    }
}

@SymbolName("win32_kni_RegisterClipboardFormatW")
private external fun kni_RegisterClipboardFormatW(lpszFormat: NativePtr): Int

fun CountClipboardFormats(): Int {
    val res = kni_CountClipboardFormats()
    return res
}

@SymbolName("win32_kni_CountClipboardFormats")
private external fun kni_CountClipboardFormats(): Int

fun EnumClipboardFormats(format: UINT): UINT {
    val _format = format
    val res = kni_EnumClipboardFormats(_format)
    return res
}

@SymbolName("win32_kni_EnumClipboardFormats")
private external fun kni_EnumClipboardFormats(format: Int): Int

fun GetClipboardFormatNameA(format: UINT, lpszFormatName: LPSTR?, cchMaxCount: Int): Int {
    val _format = format
    val _lpszFormatName = lpszFormatName.rawValue
    val _cchMaxCount = cchMaxCount
    val res = kni_GetClipboardFormatNameA(_format, _lpszFormatName, _cchMaxCount)
    return res
}

@SymbolName("win32_kni_GetClipboardFormatNameA")
private external fun kni_GetClipboardFormatNameA(format: Int, lpszFormatName: NativePtr, cchMaxCount: Int): Int

fun GetClipboardFormatNameW(format: UINT, lpszFormatName: LPWSTR?, cchMaxCount: Int): Int {
    val _format = format
    val _lpszFormatName = lpszFormatName.rawValue
    val _cchMaxCount = cchMaxCount
    val res = kni_GetClipboardFormatNameW(_format, _lpszFormatName, _cchMaxCount)
    return res
}

@SymbolName("win32_kni_GetClipboardFormatNameW")
private external fun kni_GetClipboardFormatNameW(format: Int, lpszFormatName: NativePtr, cchMaxCount: Int): Int

fun EmptyClipboard(): WINBOOL {
    val res = kni_EmptyClipboard()
    return res
}

@SymbolName("win32_kni_EmptyClipboard")
private external fun kni_EmptyClipboard(): Int

fun IsClipboardFormatAvailable(format: UINT): WINBOOL {
    val _format = format
    val res = kni_IsClipboardFormatAvailable(_format)
    return res
}

@SymbolName("win32_kni_IsClipboardFormatAvailable")
private external fun kni_IsClipboardFormatAvailable(format: Int): Int

fun GetPriorityClipboardFormat(paFormatPriorityList: CValuesRef<UINTVar>?, cFormats: Int): Int {
    return memScoped {
        val _paFormatPriorityList = paFormatPriorityList?.getPointer(memScope).rawValue
        val _cFormats = cFormats
        val res = kni_GetPriorityClipboardFormat(_paFormatPriorityList, _cFormats)
        res
    }
}

@SymbolName("win32_kni_GetPriorityClipboardFormat")
private external fun kni_GetPriorityClipboardFormat(paFormatPriorityList: NativePtr, cFormats: Int): Int

fun GetOpenClipboardWindow(): HWND? {
    val res = kni_GetOpenClipboardWindow()
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetOpenClipboardWindow")
private external fun kni_GetOpenClipboardWindow(): NativePtr

fun CharToOemA(lpszSrc: String?, lpszDst: LPSTR?): WINBOOL {
    return memScoped {
        val _lpszSrc = lpszSrc?.cstr?.getPointer(memScope).rawValue
        val _lpszDst = lpszDst.rawValue
        val res = kni_CharToOemA(_lpszSrc, _lpszDst)
        res
    }
}

@SymbolName("win32_kni_CharToOemA")
private external fun kni_CharToOemA(lpszSrc: NativePtr, lpszDst: NativePtr): Int

fun CharToOemW(lpszSrc: String?, lpszDst: LPSTR?): WINBOOL {
    return memScoped {
        val _lpszSrc = lpszSrc?.wcstr?.getPointer(memScope).rawValue
        val _lpszDst = lpszDst.rawValue
        val res = kni_CharToOemW(_lpszSrc, _lpszDst)
        res
    }
}

@SymbolName("win32_kni_CharToOemW")
private external fun kni_CharToOemW(lpszSrc: NativePtr, lpszDst: NativePtr): Int

fun OemToCharA(lpszSrc: String?, lpszDst: LPSTR?): WINBOOL {
    return memScoped {
        val _lpszSrc = lpszSrc?.cstr?.getPointer(memScope).rawValue
        val _lpszDst = lpszDst.rawValue
        val res = kni_OemToCharA(_lpszSrc, _lpszDst)
        res
    }
}

@SymbolName("win32_kni_OemToCharA")
private external fun kni_OemToCharA(lpszSrc: NativePtr, lpszDst: NativePtr): Int

fun OemToCharW(lpszSrc: String?, lpszDst: LPWSTR?): WINBOOL {
    return memScoped {
        val _lpszSrc = lpszSrc?.cstr?.getPointer(memScope).rawValue
        val _lpszDst = lpszDst.rawValue
        val res = kni_OemToCharW(_lpszSrc, _lpszDst)
        res
    }
}

@SymbolName("win32_kni_OemToCharW")
private external fun kni_OemToCharW(lpszSrc: NativePtr, lpszDst: NativePtr): Int

fun CharToOemBuffA(lpszSrc: String?, lpszDst: LPSTR?, cchDstLength: DWORD): WINBOOL {
    return memScoped {
        val _lpszSrc = lpszSrc?.cstr?.getPointer(memScope).rawValue
        val _lpszDst = lpszDst.rawValue
        val _cchDstLength = cchDstLength
        val res = kni_CharToOemBuffA(_lpszSrc, _lpszDst, _cchDstLength)
        res
    }
}

@SymbolName("win32_kni_CharToOemBuffA")
private external fun kni_CharToOemBuffA(lpszSrc: NativePtr, lpszDst: NativePtr, cchDstLength: Int): Int

fun CharToOemBuffW(lpszSrc: String?, lpszDst: LPSTR?, cchDstLength: DWORD): WINBOOL {
    return memScoped {
        val _lpszSrc = lpszSrc?.wcstr?.getPointer(memScope).rawValue
        val _lpszDst = lpszDst.rawValue
        val _cchDstLength = cchDstLength
        val res = kni_CharToOemBuffW(_lpszSrc, _lpszDst, _cchDstLength)
        res
    }
}

@SymbolName("win32_kni_CharToOemBuffW")
private external fun kni_CharToOemBuffW(lpszSrc: NativePtr, lpszDst: NativePtr, cchDstLength: Int): Int

fun OemToCharBuffA(lpszSrc: String?, lpszDst: LPSTR?, cchDstLength: DWORD): WINBOOL {
    return memScoped {
        val _lpszSrc = lpszSrc?.cstr?.getPointer(memScope).rawValue
        val _lpszDst = lpszDst.rawValue
        val _cchDstLength = cchDstLength
        val res = kni_OemToCharBuffA(_lpszSrc, _lpszDst, _cchDstLength)
        res
    }
}

@SymbolName("win32_kni_OemToCharBuffA")
private external fun kni_OemToCharBuffA(lpszSrc: NativePtr, lpszDst: NativePtr, cchDstLength: Int): Int

fun OemToCharBuffW(lpszSrc: String?, lpszDst: LPWSTR?, cchDstLength: DWORD): WINBOOL {
    return memScoped {
        val _lpszSrc = lpszSrc?.cstr?.getPointer(memScope).rawValue
        val _lpszDst = lpszDst.rawValue
        val _cchDstLength = cchDstLength
        val res = kni_OemToCharBuffW(_lpszSrc, _lpszDst, _cchDstLength)
        res
    }
}

@SymbolName("win32_kni_OemToCharBuffW")
private external fun kni_OemToCharBuffW(lpszSrc: NativePtr, lpszDst: NativePtr, cchDstLength: Int): Int

fun CharUpperA(lpsz: LPSTR?): LPSTR? {
    val _lpsz = lpsz.rawValue
    val res = kni_CharUpperA(_lpsz)
    return interpretCPointer<CHARVar>(res)
}

@SymbolName("win32_kni_CharUpperA")
private external fun kni_CharUpperA(lpsz: NativePtr): NativePtr

fun CharUpperW(lpsz: LPWSTR?): LPWSTR? {
    val _lpsz = lpsz.rawValue
    val res = kni_CharUpperW(_lpsz)
    return interpretCPointer<WCHARVar>(res)
}

@SymbolName("win32_kni_CharUpperW")
private external fun kni_CharUpperW(lpsz: NativePtr): NativePtr

fun CharUpperBuffA(lpsz: LPSTR?, cchLength: DWORD): DWORD {
    val _lpsz = lpsz.rawValue
    val _cchLength = cchLength
    val res = kni_CharUpperBuffA(_lpsz, _cchLength)
    return res
}

@SymbolName("win32_kni_CharUpperBuffA")
private external fun kni_CharUpperBuffA(lpsz: NativePtr, cchLength: Int): Int

fun CharUpperBuffW(lpsz: LPWSTR?, cchLength: DWORD): DWORD {
    val _lpsz = lpsz.rawValue
    val _cchLength = cchLength
    val res = kni_CharUpperBuffW(_lpsz, _cchLength)
    return res
}

@SymbolName("win32_kni_CharUpperBuffW")
private external fun kni_CharUpperBuffW(lpsz: NativePtr, cchLength: Int): Int

fun CharLowerA(lpsz: LPSTR?): LPSTR? {
    val _lpsz = lpsz.rawValue
    val res = kni_CharLowerA(_lpsz)
    return interpretCPointer<CHARVar>(res)
}

@SymbolName("win32_kni_CharLowerA")
private external fun kni_CharLowerA(lpsz: NativePtr): NativePtr

fun CharLowerW(lpsz: LPWSTR?): LPWSTR? {
    val _lpsz = lpsz.rawValue
    val res = kni_CharLowerW(_lpsz)
    return interpretCPointer<WCHARVar>(res)
}

@SymbolName("win32_kni_CharLowerW")
private external fun kni_CharLowerW(lpsz: NativePtr): NativePtr

fun CharLowerBuffA(lpsz: LPSTR?, cchLength: DWORD): DWORD {
    val _lpsz = lpsz.rawValue
    val _cchLength = cchLength
    val res = kni_CharLowerBuffA(_lpsz, _cchLength)
    return res
}

@SymbolName("win32_kni_CharLowerBuffA")
private external fun kni_CharLowerBuffA(lpsz: NativePtr, cchLength: Int): Int

fun CharLowerBuffW(lpsz: LPWSTR?, cchLength: DWORD): DWORD {
    val _lpsz = lpsz.rawValue
    val _cchLength = cchLength
    val res = kni_CharLowerBuffW(_lpsz, _cchLength)
    return res
}

@SymbolName("win32_kni_CharLowerBuffW")
private external fun kni_CharLowerBuffW(lpsz: NativePtr, cchLength: Int): Int

fun CharNextA(lpsz: String?): LPSTR? {
    return memScoped {
        val _lpsz = lpsz?.cstr?.getPointer(memScope).rawValue
        val res = kni_CharNextA(_lpsz)
        interpretCPointer<CHARVar>(res)
    }
}

@SymbolName("win32_kni_CharNextA")
private external fun kni_CharNextA(lpsz: NativePtr): NativePtr

fun CharNextW(lpsz: String?): LPWSTR? {
    return memScoped {
        val _lpsz = lpsz?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CharNextW(_lpsz)
        interpretCPointer<WCHARVar>(res)
    }
}

@SymbolName("win32_kni_CharNextW")
private external fun kni_CharNextW(lpsz: NativePtr): NativePtr

fun CharPrevA(lpszStart: String?, lpszCurrent: String?): LPSTR? {
    return memScoped {
        val _lpszStart = lpszStart?.cstr?.getPointer(memScope).rawValue
        val _lpszCurrent = lpszCurrent?.cstr?.getPointer(memScope).rawValue
        val res = kni_CharPrevA(_lpszStart, _lpszCurrent)
        interpretCPointer<CHARVar>(res)
    }
}

@SymbolName("win32_kni_CharPrevA")
private external fun kni_CharPrevA(lpszStart: NativePtr, lpszCurrent: NativePtr): NativePtr

fun CharPrevW(lpszStart: String?, lpszCurrent: String?): LPWSTR? {
    return memScoped {
        val _lpszStart = lpszStart?.wcstr?.getPointer(memScope).rawValue
        val _lpszCurrent = lpszCurrent?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CharPrevW(_lpszStart, _lpszCurrent)
        interpretCPointer<WCHARVar>(res)
    }
}

@SymbolName("win32_kni_CharPrevW")
private external fun kni_CharPrevW(lpszStart: NativePtr, lpszCurrent: NativePtr): NativePtr

fun CharNextExA(CodePage: WORD, lpCurrentChar: String?, dwFlags: DWORD): LPSTR? {
    return memScoped {
        val _CodePage = CodePage
        val _lpCurrentChar = lpCurrentChar?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CharNextExA(_CodePage, _lpCurrentChar, _dwFlags)
        interpretCPointer<CHARVar>(res)
    }
}

@SymbolName("win32_kni_CharNextExA")
private external fun kni_CharNextExA(CodePage: Short, lpCurrentChar: NativePtr, dwFlags: Int): NativePtr

fun CharPrevExA(CodePage: WORD, lpStart: String?, lpCurrentChar: String?, dwFlags: DWORD): LPSTR? {
    return memScoped {
        val _CodePage = CodePage
        val _lpStart = lpStart?.cstr?.getPointer(memScope).rawValue
        val _lpCurrentChar = lpCurrentChar?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CharPrevExA(_CodePage, _lpStart, _lpCurrentChar, _dwFlags)
        interpretCPointer<CHARVar>(res)
    }
}

@SymbolName("win32_kni_CharPrevExA")
private external fun kni_CharPrevExA(CodePage: Short, lpStart: NativePtr, lpCurrentChar: NativePtr, dwFlags: Int): NativePtr

fun IsCharAlphaA(ch: CHAR): WINBOOL {
    val _ch = ch
    val res = kni_IsCharAlphaA(_ch)
    return res
}

@SymbolName("win32_kni_IsCharAlphaA")
private external fun kni_IsCharAlphaA(ch: Byte): Int

fun IsCharAlphaW(ch: WCHAR): WINBOOL {
    val _ch = ch
    val res = kni_IsCharAlphaW(_ch)
    return res
}

@SymbolName("win32_kni_IsCharAlphaW")
private external fun kni_IsCharAlphaW(ch: Short): Int

fun IsCharAlphaNumericA(ch: CHAR): WINBOOL {
    val _ch = ch
    val res = kni_IsCharAlphaNumericA(_ch)
    return res
}

@SymbolName("win32_kni_IsCharAlphaNumericA")
private external fun kni_IsCharAlphaNumericA(ch: Byte): Int

fun IsCharAlphaNumericW(ch: WCHAR): WINBOOL {
    val _ch = ch
    val res = kni_IsCharAlphaNumericW(_ch)
    return res
}

@SymbolName("win32_kni_IsCharAlphaNumericW")
private external fun kni_IsCharAlphaNumericW(ch: Short): Int

fun IsCharUpperA(ch: CHAR): WINBOOL {
    val _ch = ch
    val res = kni_IsCharUpperA(_ch)
    return res
}

@SymbolName("win32_kni_IsCharUpperA")
private external fun kni_IsCharUpperA(ch: Byte): Int

fun IsCharUpperW(ch: WCHAR): WINBOOL {
    val _ch = ch
    val res = kni_IsCharUpperW(_ch)
    return res
}

@SymbolName("win32_kni_IsCharUpperW")
private external fun kni_IsCharUpperW(ch: Short): Int

fun IsCharLowerA(ch: CHAR): WINBOOL {
    val _ch = ch
    val res = kni_IsCharLowerA(_ch)
    return res
}

@SymbolName("win32_kni_IsCharLowerA")
private external fun kni_IsCharLowerA(ch: Byte): Int

fun IsCharLowerW(ch: WCHAR): WINBOOL {
    val _ch = ch
    val res = kni_IsCharLowerW(_ch)
    return res
}

@SymbolName("win32_kni_IsCharLowerW")
private external fun kni_IsCharLowerW(ch: Short): Int

fun SetFocus(hWnd: HWND?): HWND? {
    val _hWnd = hWnd.rawValue
    val res = kni_SetFocus(_hWnd)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_SetFocus")
private external fun kni_SetFocus(hWnd: NativePtr): NativePtr

fun GetActiveWindow(): HWND? {
    val res = kni_GetActiveWindow()
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetActiveWindow")
private external fun kni_GetActiveWindow(): NativePtr

fun GetFocus(): HWND? {
    val res = kni_GetFocus()
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetFocus")
private external fun kni_GetFocus(): NativePtr

fun GetKBCodePage(): UINT {
    val res = kni_GetKBCodePage()
    return res
}

@SymbolName("win32_kni_GetKBCodePage")
private external fun kni_GetKBCodePage(): Int

fun GetKeyState(nVirtKey: Int): SHORT {
    val _nVirtKey = nVirtKey
    val res = kni_GetKeyState(_nVirtKey)
    return res
}

@SymbolName("win32_kni_GetKeyState")
private external fun kni_GetKeyState(nVirtKey: Int): Short

fun GetAsyncKeyState(vKey: Int): SHORT {
    val _vKey = vKey
    val res = kni_GetAsyncKeyState(_vKey)
    return res
}

@SymbolName("win32_kni_GetAsyncKeyState")
private external fun kni_GetAsyncKeyState(vKey: Int): Short

fun GetKeyboardState(lpKeyState: PBYTE?): WINBOOL {
    val _lpKeyState = lpKeyState.rawValue
    val res = kni_GetKeyboardState(_lpKeyState)
    return res
}

@SymbolName("win32_kni_GetKeyboardState")
private external fun kni_GetKeyboardState(lpKeyState: NativePtr): Int

fun SetKeyboardState(lpKeyState: LPBYTE?): WINBOOL {
    val _lpKeyState = lpKeyState.rawValue
    val res = kni_SetKeyboardState(_lpKeyState)
    return res
}

@SymbolName("win32_kni_SetKeyboardState")
private external fun kni_SetKeyboardState(lpKeyState: NativePtr): Int

fun GetKeyNameTextA(lParam: LONG, lpString: LPSTR?, cchSize: Int): Int {
    val _lParam = lParam
    val _lpString = lpString.rawValue
    val _cchSize = cchSize
    val res = kni_GetKeyNameTextA(_lParam, _lpString, _cchSize)
    return res
}

@SymbolName("win32_kni_GetKeyNameTextA")
private external fun kni_GetKeyNameTextA(lParam: Int, lpString: NativePtr, cchSize: Int): Int

fun GetKeyNameTextW(lParam: LONG, lpString: LPWSTR?, cchSize: Int): Int {
    val _lParam = lParam
    val _lpString = lpString.rawValue
    val _cchSize = cchSize
    val res = kni_GetKeyNameTextW(_lParam, _lpString, _cchSize)
    return res
}

@SymbolName("win32_kni_GetKeyNameTextW")
private external fun kni_GetKeyNameTextW(lParam: Int, lpString: NativePtr, cchSize: Int): Int

fun GetKeyboardType(nTypeFlag: Int): Int {
    val _nTypeFlag = nTypeFlag
    val res = kni_GetKeyboardType(_nTypeFlag)
    return res
}

@SymbolName("win32_kni_GetKeyboardType")
private external fun kni_GetKeyboardType(nTypeFlag: Int): Int

fun ToAscii(uVirtKey: UINT, uScanCode: UINT, lpKeyState: CValuesRef<BYTEVar>?, lpChar: LPWORD?, uFlags: UINT): Int {
    return memScoped {
        val _uVirtKey = uVirtKey
        val _uScanCode = uScanCode
        val _lpKeyState = lpKeyState?.getPointer(memScope).rawValue
        val _lpChar = lpChar.rawValue
        val _uFlags = uFlags
        val res = kni_ToAscii(_uVirtKey, _uScanCode, _lpKeyState, _lpChar, _uFlags)
        res
    }
}

@SymbolName("win32_kni_ToAscii")
private external fun kni_ToAscii(uVirtKey: Int, uScanCode: Int, lpKeyState: NativePtr, lpChar: NativePtr, uFlags: Int): Int

fun ToAsciiEx(uVirtKey: UINT, uScanCode: UINT, lpKeyState: CValuesRef<BYTEVar>?, lpChar: LPWORD?, uFlags: UINT, dwhkl: HKL?): Int {
    return memScoped {
        val _uVirtKey = uVirtKey
        val _uScanCode = uScanCode
        val _lpKeyState = lpKeyState?.getPointer(memScope).rawValue
        val _lpChar = lpChar.rawValue
        val _uFlags = uFlags
        val _dwhkl = dwhkl.rawValue
        val res = kni_ToAsciiEx(_uVirtKey, _uScanCode, _lpKeyState, _lpChar, _uFlags, _dwhkl)
        res
    }
}

@SymbolName("win32_kni_ToAsciiEx")
private external fun kni_ToAsciiEx(uVirtKey: Int, uScanCode: Int, lpKeyState: NativePtr, lpChar: NativePtr, uFlags: Int, dwhkl: NativePtr): Int

fun ToUnicode(wVirtKey: UINT, wScanCode: UINT, lpKeyState: CValuesRef<BYTEVar>?, pwszBuff: LPWSTR?, cchBuff: Int, wFlags: UINT): Int {
    return memScoped {
        val _wVirtKey = wVirtKey
        val _wScanCode = wScanCode
        val _lpKeyState = lpKeyState?.getPointer(memScope).rawValue
        val _pwszBuff = pwszBuff.rawValue
        val _cchBuff = cchBuff
        val _wFlags = wFlags
        val res = kni_ToUnicode(_wVirtKey, _wScanCode, _lpKeyState, _pwszBuff, _cchBuff, _wFlags)
        res
    }
}

@SymbolName("win32_kni_ToUnicode")
private external fun kni_ToUnicode(wVirtKey: Int, wScanCode: Int, lpKeyState: NativePtr, pwszBuff: NativePtr, cchBuff: Int, wFlags: Int): Int

fun OemKeyScan(wOemChar: WORD): DWORD {
    val _wOemChar = wOemChar
    val res = kni_OemKeyScan(_wOemChar)
    return res
}

@SymbolName("win32_kni_OemKeyScan")
private external fun kni_OemKeyScan(wOemChar: Short): Int

fun VkKeyScanA(ch: CHAR): SHORT {
    val _ch = ch
    val res = kni_VkKeyScanA(_ch)
    return res
}

@SymbolName("win32_kni_VkKeyScanA")
private external fun kni_VkKeyScanA(ch: Byte): Short

fun VkKeyScanW(ch: WCHAR): SHORT {
    val _ch = ch
    val res = kni_VkKeyScanW(_ch)
    return res
}

@SymbolName("win32_kni_VkKeyScanW")
private external fun kni_VkKeyScanW(ch: Short): Short

fun VkKeyScanExA(ch: CHAR, dwhkl: HKL?): SHORT {
    val _ch = ch
    val _dwhkl = dwhkl.rawValue
    val res = kni_VkKeyScanExA(_ch, _dwhkl)
    return res
}

@SymbolName("win32_kni_VkKeyScanExA")
private external fun kni_VkKeyScanExA(ch: Byte, dwhkl: NativePtr): Short

fun VkKeyScanExW(ch: WCHAR, dwhkl: HKL?): SHORT {
    val _ch = ch
    val _dwhkl = dwhkl.rawValue
    val res = kni_VkKeyScanExW(_ch, _dwhkl)
    return res
}

@SymbolName("win32_kni_VkKeyScanExW")
private external fun kni_VkKeyScanExW(ch: Short, dwhkl: NativePtr): Short

fun keybd_event(bVk: BYTE, bScan: BYTE, dwFlags: DWORD, dwExtraInfo: ULONG_PTR): Unit {
    val _bVk = bVk
    val _bScan = bScan
    val _dwFlags = dwFlags
    val _dwExtraInfo = dwExtraInfo
    val res = kni_keybd_event(_bVk, _bScan, _dwFlags, _dwExtraInfo)
    return res
}

@SymbolName("win32_kni_keybd_event")
private external fun kni_keybd_event(bVk: Byte, bScan: Byte, dwFlags: Int, dwExtraInfo: Long): Unit

fun mouse_event(dwFlags: DWORD, dx: DWORD, dy: DWORD, dwData: DWORD, dwExtraInfo: ULONG_PTR): Unit {
    val _dwFlags = dwFlags
    val _dx = dx
    val _dy = dy
    val _dwData = dwData
    val _dwExtraInfo = dwExtraInfo
    val res = kni_mouse_event(_dwFlags, _dx, _dy, _dwData, _dwExtraInfo)
    return res
}

@SymbolName("win32_kni_mouse_event")
private external fun kni_mouse_event(dwFlags: Int, dx: Int, dy: Int, dwData: Int, dwExtraInfo: Long): Unit

fun SendInput(cInputs: UINT, pInputs: LPINPUT?, cbSize: Int): UINT {
    val _cInputs = cInputs
    val _pInputs = pInputs.rawValue
    val _cbSize = cbSize
    val res = kni_SendInput(_cInputs, _pInputs, _cbSize)
    return res
}

@SymbolName("win32_kni_SendInput")
private external fun kni_SendInput(cInputs: Int, pInputs: NativePtr, cbSize: Int): Int

fun GetLastInputInfo(plii: PLASTINPUTINFO?): WINBOOL {
    val _plii = plii.rawValue
    val res = kni_GetLastInputInfo(_plii)
    return res
}

@SymbolName("win32_kni_GetLastInputInfo")
private external fun kni_GetLastInputInfo(plii: NativePtr): Int

fun MapVirtualKeyA(uCode: UINT, uMapType: UINT): UINT {
    val _uCode = uCode
    val _uMapType = uMapType
    val res = kni_MapVirtualKeyA(_uCode, _uMapType)
    return res
}

@SymbolName("win32_kni_MapVirtualKeyA")
private external fun kni_MapVirtualKeyA(uCode: Int, uMapType: Int): Int

fun MapVirtualKeyW(uCode: UINT, uMapType: UINT): UINT {
    val _uCode = uCode
    val _uMapType = uMapType
    val res = kni_MapVirtualKeyW(_uCode, _uMapType)
    return res
}

@SymbolName("win32_kni_MapVirtualKeyW")
private external fun kni_MapVirtualKeyW(uCode: Int, uMapType: Int): Int

fun MapVirtualKeyExA(uCode: UINT, uMapType: UINT, dwhkl: HKL?): UINT {
    val _uCode = uCode
    val _uMapType = uMapType
    val _dwhkl = dwhkl.rawValue
    val res = kni_MapVirtualKeyExA(_uCode, _uMapType, _dwhkl)
    return res
}

@SymbolName("win32_kni_MapVirtualKeyExA")
private external fun kni_MapVirtualKeyExA(uCode: Int, uMapType: Int, dwhkl: NativePtr): Int

fun MapVirtualKeyExW(uCode: UINT, uMapType: UINT, dwhkl: HKL?): UINT {
    val _uCode = uCode
    val _uMapType = uMapType
    val _dwhkl = dwhkl.rawValue
    val res = kni_MapVirtualKeyExW(_uCode, _uMapType, _dwhkl)
    return res
}

@SymbolName("win32_kni_MapVirtualKeyExW")
private external fun kni_MapVirtualKeyExW(uCode: Int, uMapType: Int, dwhkl: NativePtr): Int

fun GetInputState(): WINBOOL {
    val res = kni_GetInputState()
    return res
}

@SymbolName("win32_kni_GetInputState")
private external fun kni_GetInputState(): Int

fun GetQueueStatus(flags: UINT): DWORD {
    val _flags = flags
    val res = kni_GetQueueStatus(_flags)
    return res
}

@SymbolName("win32_kni_GetQueueStatus")
private external fun kni_GetQueueStatus(flags: Int): Int

fun GetCapture(): HWND? {
    val res = kni_GetCapture()
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetCapture")
private external fun kni_GetCapture(): NativePtr

fun SetCapture(hWnd: HWND?): HWND? {
    val _hWnd = hWnd.rawValue
    val res = kni_SetCapture(_hWnd)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_SetCapture")
private external fun kni_SetCapture(hWnd: NativePtr): NativePtr

fun ReleaseCapture(): WINBOOL {
    val res = kni_ReleaseCapture()
    return res
}

@SymbolName("win32_kni_ReleaseCapture")
private external fun kni_ReleaseCapture(): Int

fun MsgWaitForMultipleObjects(nCount: DWORD, pHandles: CValuesRef<HANDLEVar>?, fWaitAll: WINBOOL, dwMilliseconds: DWORD, dwWakeMask: DWORD): DWORD {
    return memScoped {
        val _nCount = nCount
        val _pHandles = pHandles?.getPointer(memScope).rawValue
        val _fWaitAll = fWaitAll
        val _dwMilliseconds = dwMilliseconds
        val _dwWakeMask = dwWakeMask
        val res = kni_MsgWaitForMultipleObjects(_nCount, _pHandles, _fWaitAll, _dwMilliseconds, _dwWakeMask)
        res
    }
}

@SymbolName("win32_kni_MsgWaitForMultipleObjects")
private external fun kni_MsgWaitForMultipleObjects(nCount: Int, pHandles: NativePtr, fWaitAll: Int, dwMilliseconds: Int, dwWakeMask: Int): Int

fun MsgWaitForMultipleObjectsEx(nCount: DWORD, pHandles: CValuesRef<HANDLEVar>?, dwMilliseconds: DWORD, dwWakeMask: DWORD, dwFlags: DWORD): DWORD {
    return memScoped {
        val _nCount = nCount
        val _pHandles = pHandles?.getPointer(memScope).rawValue
        val _dwMilliseconds = dwMilliseconds
        val _dwWakeMask = dwWakeMask
        val _dwFlags = dwFlags
        val res = kni_MsgWaitForMultipleObjectsEx(_nCount, _pHandles, _dwMilliseconds, _dwWakeMask, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_MsgWaitForMultipleObjectsEx")
private external fun kni_MsgWaitForMultipleObjectsEx(nCount: Int, pHandles: NativePtr, dwMilliseconds: Int, dwWakeMask: Int, dwFlags: Int): Int

fun SetTimer(hWnd: HWND?, nIDEvent: UINT_PTR, uElapse: UINT, lpTimerFunc: TIMERPROC?): UINT_PTR {
    val _hWnd = hWnd.rawValue
    val _nIDEvent = nIDEvent
    val _uElapse = uElapse
    val _lpTimerFunc = lpTimerFunc.rawValue
    val res = kni_SetTimer(_hWnd, _nIDEvent, _uElapse, _lpTimerFunc)
    return res
}

@SymbolName("win32_kni_SetTimer")
private external fun kni_SetTimer(hWnd: NativePtr, nIDEvent: Long, uElapse: Int, lpTimerFunc: NativePtr): Long

fun KillTimer(hWnd: HWND?, uIDEvent: UINT_PTR): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _uIDEvent = uIDEvent
    val res = kni_KillTimer(_hWnd, _uIDEvent)
    return res
}

@SymbolName("win32_kni_KillTimer")
private external fun kni_KillTimer(hWnd: NativePtr, uIDEvent: Long): Int

fun IsWindowUnicode(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_IsWindowUnicode(_hWnd)
    return res
}

@SymbolName("win32_kni_IsWindowUnicode")
private external fun kni_IsWindowUnicode(hWnd: NativePtr): Int

fun EnableWindow(hWnd: HWND?, bEnable: WINBOOL): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _bEnable = bEnable
    val res = kni_EnableWindow(_hWnd, _bEnable)
    return res
}

@SymbolName("win32_kni_EnableWindow")
private external fun kni_EnableWindow(hWnd: NativePtr, bEnable: Int): Int

fun IsWindowEnabled(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_IsWindowEnabled(_hWnd)
    return res
}

@SymbolName("win32_kni_IsWindowEnabled")
private external fun kni_IsWindowEnabled(hWnd: NativePtr): Int

fun LoadAcceleratorsA(hInstance: HINSTANCE?, lpTableName: String?): HACCEL? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpTableName = lpTableName?.cstr?.getPointer(memScope).rawValue
        val res = kni_LoadAcceleratorsA(_hInstance, _lpTableName)
        interpretCPointer<HACCEL__>(res)
    }
}

@SymbolName("win32_kni_LoadAcceleratorsA")
private external fun kni_LoadAcceleratorsA(hInstance: NativePtr, lpTableName: NativePtr): NativePtr

fun LoadAcceleratorsW(hInstance: HINSTANCE?, lpTableName: String?): HACCEL? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpTableName = lpTableName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_LoadAcceleratorsW(_hInstance, _lpTableName)
        interpretCPointer<HACCEL__>(res)
    }
}

@SymbolName("win32_kni_LoadAcceleratorsW")
private external fun kni_LoadAcceleratorsW(hInstance: NativePtr, lpTableName: NativePtr): NativePtr

fun CreateAcceleratorTableA(paccel: LPACCEL?, cAccel: Int): HACCEL? {
    val _paccel = paccel.rawValue
    val _cAccel = cAccel
    val res = kni_CreateAcceleratorTableA(_paccel, _cAccel)
    return interpretCPointer<HACCEL__>(res)
}

@SymbolName("win32_kni_CreateAcceleratorTableA")
private external fun kni_CreateAcceleratorTableA(paccel: NativePtr, cAccel: Int): NativePtr

fun CreateAcceleratorTableW(paccel: LPACCEL?, cAccel: Int): HACCEL? {
    val _paccel = paccel.rawValue
    val _cAccel = cAccel
    val res = kni_CreateAcceleratorTableW(_paccel, _cAccel)
    return interpretCPointer<HACCEL__>(res)
}

@SymbolName("win32_kni_CreateAcceleratorTableW")
private external fun kni_CreateAcceleratorTableW(paccel: NativePtr, cAccel: Int): NativePtr

fun DestroyAcceleratorTable(hAccel: HACCEL?): WINBOOL {
    val _hAccel = hAccel.rawValue
    val res = kni_DestroyAcceleratorTable(_hAccel)
    return res
}

@SymbolName("win32_kni_DestroyAcceleratorTable")
private external fun kni_DestroyAcceleratorTable(hAccel: NativePtr): Int

fun CopyAcceleratorTableA(hAccelSrc: HACCEL?, lpAccelDst: LPACCEL?, cAccelEntries: Int): Int {
    val _hAccelSrc = hAccelSrc.rawValue
    val _lpAccelDst = lpAccelDst.rawValue
    val _cAccelEntries = cAccelEntries
    val res = kni_CopyAcceleratorTableA(_hAccelSrc, _lpAccelDst, _cAccelEntries)
    return res
}

@SymbolName("win32_kni_CopyAcceleratorTableA")
private external fun kni_CopyAcceleratorTableA(hAccelSrc: NativePtr, lpAccelDst: NativePtr, cAccelEntries: Int): Int

fun CopyAcceleratorTableW(hAccelSrc: HACCEL?, lpAccelDst: LPACCEL?, cAccelEntries: Int): Int {
    val _hAccelSrc = hAccelSrc.rawValue
    val _lpAccelDst = lpAccelDst.rawValue
    val _cAccelEntries = cAccelEntries
    val res = kni_CopyAcceleratorTableW(_hAccelSrc, _lpAccelDst, _cAccelEntries)
    return res
}

@SymbolName("win32_kni_CopyAcceleratorTableW")
private external fun kni_CopyAcceleratorTableW(hAccelSrc: NativePtr, lpAccelDst: NativePtr, cAccelEntries: Int): Int

fun TranslateAcceleratorA(hWnd: HWND?, hAccTable: HACCEL?, lpMsg: LPMSG?): Int {
    val _hWnd = hWnd.rawValue
    val _hAccTable = hAccTable.rawValue
    val _lpMsg = lpMsg.rawValue
    val res = kni_TranslateAcceleratorA(_hWnd, _hAccTable, _lpMsg)
    return res
}

@SymbolName("win32_kni_TranslateAcceleratorA")
private external fun kni_TranslateAcceleratorA(hWnd: NativePtr, hAccTable: NativePtr, lpMsg: NativePtr): Int

fun TranslateAcceleratorW(hWnd: HWND?, hAccTable: HACCEL?, lpMsg: LPMSG?): Int {
    val _hWnd = hWnd.rawValue
    val _hAccTable = hAccTable.rawValue
    val _lpMsg = lpMsg.rawValue
    val res = kni_TranslateAcceleratorW(_hWnd, _hAccTable, _lpMsg)
    return res
}

@SymbolName("win32_kni_TranslateAcceleratorW")
private external fun kni_TranslateAcceleratorW(hWnd: NativePtr, hAccTable: NativePtr, lpMsg: NativePtr): Int

fun GetSystemMetrics(nIndex: Int): Int {
    val _nIndex = nIndex
    val res = kni_GetSystemMetrics(_nIndex)
    return res
}

@SymbolName("win32_kni_GetSystemMetrics")
private external fun kni_GetSystemMetrics(nIndex: Int): Int

fun LoadMenuA(hInstance: HINSTANCE?, lpMenuName: String?): HMENU? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpMenuName = lpMenuName?.cstr?.getPointer(memScope).rawValue
        val res = kni_LoadMenuA(_hInstance, _lpMenuName)
        interpretCPointer<HMENU__>(res)
    }
}

@SymbolName("win32_kni_LoadMenuA")
private external fun kni_LoadMenuA(hInstance: NativePtr, lpMenuName: NativePtr): NativePtr

fun LoadMenuW(hInstance: HINSTANCE?, lpMenuName: String?): HMENU? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpMenuName = lpMenuName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_LoadMenuW(_hInstance, _lpMenuName)
        interpretCPointer<HMENU__>(res)
    }
}

@SymbolName("win32_kni_LoadMenuW")
private external fun kni_LoadMenuW(hInstance: NativePtr, lpMenuName: NativePtr): NativePtr

fun LoadMenuIndirectA(lpMenuTemplate: COpaquePointer?): HMENU? {
    val _lpMenuTemplate = lpMenuTemplate.rawValue
    val res = kni_LoadMenuIndirectA(_lpMenuTemplate)
    return interpretCPointer<HMENU__>(res)
}

@SymbolName("win32_kni_LoadMenuIndirectA")
private external fun kni_LoadMenuIndirectA(lpMenuTemplate: NativePtr): NativePtr

fun LoadMenuIndirectW(lpMenuTemplate: COpaquePointer?): HMENU? {
    val _lpMenuTemplate = lpMenuTemplate.rawValue
    val res = kni_LoadMenuIndirectW(_lpMenuTemplate)
    return interpretCPointer<HMENU__>(res)
}

@SymbolName("win32_kni_LoadMenuIndirectW")
private external fun kni_LoadMenuIndirectW(lpMenuTemplate: NativePtr): NativePtr

fun GetMenu(hWnd: HWND?): HMENU? {
    val _hWnd = hWnd.rawValue
    val res = kni_GetMenu(_hWnd)
    return interpretCPointer<HMENU__>(res)
}

@SymbolName("win32_kni_GetMenu")
private external fun kni_GetMenu(hWnd: NativePtr): NativePtr

fun SetMenu(hWnd: HWND?, hMenu: HMENU?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _hMenu = hMenu.rawValue
    val res = kni_SetMenu(_hWnd, _hMenu)
    return res
}

@SymbolName("win32_kni_SetMenu")
private external fun kni_SetMenu(hWnd: NativePtr, hMenu: NativePtr): Int

fun ChangeMenuA(hMenu: HMENU?, cmd: UINT, lpszNewItem: String?, cmdInsert: UINT, flags: UINT): WINBOOL {
    return memScoped {
        val _hMenu = hMenu.rawValue
        val _cmd = cmd
        val _lpszNewItem = lpszNewItem?.cstr?.getPointer(memScope).rawValue
        val _cmdInsert = cmdInsert
        val _flags = flags
        val res = kni_ChangeMenuA(_hMenu, _cmd, _lpszNewItem, _cmdInsert, _flags)
        res
    }
}

@SymbolName("win32_kni_ChangeMenuA")
private external fun kni_ChangeMenuA(hMenu: NativePtr, cmd: Int, lpszNewItem: NativePtr, cmdInsert: Int, flags: Int): Int

fun ChangeMenuW(hMenu: HMENU?, cmd: UINT, lpszNewItem: String?, cmdInsert: UINT, flags: UINT): WINBOOL {
    return memScoped {
        val _hMenu = hMenu.rawValue
        val _cmd = cmd
        val _lpszNewItem = lpszNewItem?.wcstr?.getPointer(memScope).rawValue
        val _cmdInsert = cmdInsert
        val _flags = flags
        val res = kni_ChangeMenuW(_hMenu, _cmd, _lpszNewItem, _cmdInsert, _flags)
        res
    }
}

@SymbolName("win32_kni_ChangeMenuW")
private external fun kni_ChangeMenuW(hMenu: NativePtr, cmd: Int, lpszNewItem: NativePtr, cmdInsert: Int, flags: Int): Int

fun HiliteMenuItem(hWnd: HWND?, hMenu: HMENU?, uIDHiliteItem: UINT, uHilite: UINT): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _hMenu = hMenu.rawValue
    val _uIDHiliteItem = uIDHiliteItem
    val _uHilite = uHilite
    val res = kni_HiliteMenuItem(_hWnd, _hMenu, _uIDHiliteItem, _uHilite)
    return res
}

@SymbolName("win32_kni_HiliteMenuItem")
private external fun kni_HiliteMenuItem(hWnd: NativePtr, hMenu: NativePtr, uIDHiliteItem: Int, uHilite: Int): Int

fun GetMenuStringA(hMenu: HMENU?, uIDItem: UINT, lpString: LPSTR?, cchMax: Int, flags: UINT): Int {
    val _hMenu = hMenu.rawValue
    val _uIDItem = uIDItem
    val _lpString = lpString.rawValue
    val _cchMax = cchMax
    val _flags = flags
    val res = kni_GetMenuStringA(_hMenu, _uIDItem, _lpString, _cchMax, _flags)
    return res
}

@SymbolName("win32_kni_GetMenuStringA")
private external fun kni_GetMenuStringA(hMenu: NativePtr, uIDItem: Int, lpString: NativePtr, cchMax: Int, flags: Int): Int

fun GetMenuStringW(hMenu: HMENU?, uIDItem: UINT, lpString: LPWSTR?, cchMax: Int, flags: UINT): Int {
    val _hMenu = hMenu.rawValue
    val _uIDItem = uIDItem
    val _lpString = lpString.rawValue
    val _cchMax = cchMax
    val _flags = flags
    val res = kni_GetMenuStringW(_hMenu, _uIDItem, _lpString, _cchMax, _flags)
    return res
}

@SymbolName("win32_kni_GetMenuStringW")
private external fun kni_GetMenuStringW(hMenu: NativePtr, uIDItem: Int, lpString: NativePtr, cchMax: Int, flags: Int): Int

fun GetMenuState(hMenu: HMENU?, uId: UINT, uFlags: UINT): UINT {
    val _hMenu = hMenu.rawValue
    val _uId = uId
    val _uFlags = uFlags
    val res = kni_GetMenuState(_hMenu, _uId, _uFlags)
    return res
}

@SymbolName("win32_kni_GetMenuState")
private external fun kni_GetMenuState(hMenu: NativePtr, uId: Int, uFlags: Int): Int

fun DrawMenuBar(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_DrawMenuBar(_hWnd)
    return res
}

@SymbolName("win32_kni_DrawMenuBar")
private external fun kni_DrawMenuBar(hWnd: NativePtr): Int

fun GetSystemMenu(hWnd: HWND?, bRevert: WINBOOL): HMENU? {
    val _hWnd = hWnd.rawValue
    val _bRevert = bRevert
    val res = kni_GetSystemMenu(_hWnd, _bRevert)
    return interpretCPointer<HMENU__>(res)
}

@SymbolName("win32_kni_GetSystemMenu")
private external fun kni_GetSystemMenu(hWnd: NativePtr, bRevert: Int): NativePtr

fun CreateMenu(): HMENU? {
    val res = kni_CreateMenu()
    return interpretCPointer<HMENU__>(res)
}

@SymbolName("win32_kni_CreateMenu")
private external fun kni_CreateMenu(): NativePtr

fun CreatePopupMenu(): HMENU? {
    val res = kni_CreatePopupMenu()
    return interpretCPointer<HMENU__>(res)
}

@SymbolName("win32_kni_CreatePopupMenu")
private external fun kni_CreatePopupMenu(): NativePtr

fun DestroyMenu(hMenu: HMENU?): WINBOOL {
    val _hMenu = hMenu.rawValue
    val res = kni_DestroyMenu(_hMenu)
    return res
}

@SymbolName("win32_kni_DestroyMenu")
private external fun kni_DestroyMenu(hMenu: NativePtr): Int

fun CheckMenuItem(hMenu: HMENU?, uIDCheckItem: UINT, uCheck: UINT): DWORD {
    val _hMenu = hMenu.rawValue
    val _uIDCheckItem = uIDCheckItem
    val _uCheck = uCheck
    val res = kni_CheckMenuItem(_hMenu, _uIDCheckItem, _uCheck)
    return res
}

@SymbolName("win32_kni_CheckMenuItem")
private external fun kni_CheckMenuItem(hMenu: NativePtr, uIDCheckItem: Int, uCheck: Int): Int

fun EnableMenuItem(hMenu: HMENU?, uIDEnableItem: UINT, uEnable: UINT): WINBOOL {
    val _hMenu = hMenu.rawValue
    val _uIDEnableItem = uIDEnableItem
    val _uEnable = uEnable
    val res = kni_EnableMenuItem(_hMenu, _uIDEnableItem, _uEnable)
    return res
}

@SymbolName("win32_kni_EnableMenuItem")
private external fun kni_EnableMenuItem(hMenu: NativePtr, uIDEnableItem: Int, uEnable: Int): Int

fun GetSubMenu(hMenu: HMENU?, nPos: Int): HMENU? {
    val _hMenu = hMenu.rawValue
    val _nPos = nPos
    val res = kni_GetSubMenu(_hMenu, _nPos)
    return interpretCPointer<HMENU__>(res)
}

@SymbolName("win32_kni_GetSubMenu")
private external fun kni_GetSubMenu(hMenu: NativePtr, nPos: Int): NativePtr

fun GetMenuItemID(hMenu: HMENU?, nPos: Int): UINT {
    val _hMenu = hMenu.rawValue
    val _nPos = nPos
    val res = kni_GetMenuItemID(_hMenu, _nPos)
    return res
}

@SymbolName("win32_kni_GetMenuItemID")
private external fun kni_GetMenuItemID(hMenu: NativePtr, nPos: Int): Int

fun GetMenuItemCount(hMenu: HMENU?): Int {
    val _hMenu = hMenu.rawValue
    val res = kni_GetMenuItemCount(_hMenu)
    return res
}

@SymbolName("win32_kni_GetMenuItemCount")
private external fun kni_GetMenuItemCount(hMenu: NativePtr): Int

fun InsertMenuA(hMenu: HMENU?, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: String?): WINBOOL {
    return memScoped {
        val _hMenu = hMenu.rawValue
        val _uPosition = uPosition
        val _uFlags = uFlags
        val _uIDNewItem = uIDNewItem
        val _lpNewItem = lpNewItem?.cstr?.getPointer(memScope).rawValue
        val res = kni_InsertMenuA(_hMenu, _uPosition, _uFlags, _uIDNewItem, _lpNewItem)
        res
    }
}

@SymbolName("win32_kni_InsertMenuA")
private external fun kni_InsertMenuA(hMenu: NativePtr, uPosition: Int, uFlags: Int, uIDNewItem: Long, lpNewItem: NativePtr): Int

fun InsertMenuW(hMenu: HMENU?, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: String?): WINBOOL {
    return memScoped {
        val _hMenu = hMenu.rawValue
        val _uPosition = uPosition
        val _uFlags = uFlags
        val _uIDNewItem = uIDNewItem
        val _lpNewItem = lpNewItem?.wcstr?.getPointer(memScope).rawValue
        val res = kni_InsertMenuW(_hMenu, _uPosition, _uFlags, _uIDNewItem, _lpNewItem)
        res
    }
}

@SymbolName("win32_kni_InsertMenuW")
private external fun kni_InsertMenuW(hMenu: NativePtr, uPosition: Int, uFlags: Int, uIDNewItem: Long, lpNewItem: NativePtr): Int

fun AppendMenuA(hMenu: HMENU?, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: String?): WINBOOL {
    return memScoped {
        val _hMenu = hMenu.rawValue
        val _uFlags = uFlags
        val _uIDNewItem = uIDNewItem
        val _lpNewItem = lpNewItem?.cstr?.getPointer(memScope).rawValue
        val res = kni_AppendMenuA(_hMenu, _uFlags, _uIDNewItem, _lpNewItem)
        res
    }
}

@SymbolName("win32_kni_AppendMenuA")
private external fun kni_AppendMenuA(hMenu: NativePtr, uFlags: Int, uIDNewItem: Long, lpNewItem: NativePtr): Int

fun AppendMenuW(hMenu: HMENU?, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: String?): WINBOOL {
    return memScoped {
        val _hMenu = hMenu.rawValue
        val _uFlags = uFlags
        val _uIDNewItem = uIDNewItem
        val _lpNewItem = lpNewItem?.wcstr?.getPointer(memScope).rawValue
        val res = kni_AppendMenuW(_hMenu, _uFlags, _uIDNewItem, _lpNewItem)
        res
    }
}

@SymbolName("win32_kni_AppendMenuW")
private external fun kni_AppendMenuW(hMenu: NativePtr, uFlags: Int, uIDNewItem: Long, lpNewItem: NativePtr): Int

fun ModifyMenuA(hMnu: HMENU?, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: String?): WINBOOL {
    return memScoped {
        val _hMnu = hMnu.rawValue
        val _uPosition = uPosition
        val _uFlags = uFlags
        val _uIDNewItem = uIDNewItem
        val _lpNewItem = lpNewItem?.cstr?.getPointer(memScope).rawValue
        val res = kni_ModifyMenuA(_hMnu, _uPosition, _uFlags, _uIDNewItem, _lpNewItem)
        res
    }
}

@SymbolName("win32_kni_ModifyMenuA")
private external fun kni_ModifyMenuA(hMnu: NativePtr, uPosition: Int, uFlags: Int, uIDNewItem: Long, lpNewItem: NativePtr): Int

fun ModifyMenuW(hMnu: HMENU?, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: String?): WINBOOL {
    return memScoped {
        val _hMnu = hMnu.rawValue
        val _uPosition = uPosition
        val _uFlags = uFlags
        val _uIDNewItem = uIDNewItem
        val _lpNewItem = lpNewItem?.wcstr?.getPointer(memScope).rawValue
        val res = kni_ModifyMenuW(_hMnu, _uPosition, _uFlags, _uIDNewItem, _lpNewItem)
        res
    }
}

@SymbolName("win32_kni_ModifyMenuW")
private external fun kni_ModifyMenuW(hMnu: NativePtr, uPosition: Int, uFlags: Int, uIDNewItem: Long, lpNewItem: NativePtr): Int

fun RemoveMenu(hMenu: HMENU?, uPosition: UINT, uFlags: UINT): WINBOOL {
    val _hMenu = hMenu.rawValue
    val _uPosition = uPosition
    val _uFlags = uFlags
    val res = kni_RemoveMenu(_hMenu, _uPosition, _uFlags)
    return res
}

@SymbolName("win32_kni_RemoveMenu")
private external fun kni_RemoveMenu(hMenu: NativePtr, uPosition: Int, uFlags: Int): Int

fun DeleteMenu(hMenu: HMENU?, uPosition: UINT, uFlags: UINT): WINBOOL {
    val _hMenu = hMenu.rawValue
    val _uPosition = uPosition
    val _uFlags = uFlags
    val res = kni_DeleteMenu(_hMenu, _uPosition, _uFlags)
    return res
}

@SymbolName("win32_kni_DeleteMenu")
private external fun kni_DeleteMenu(hMenu: NativePtr, uPosition: Int, uFlags: Int): Int

fun SetMenuItemBitmaps(hMenu: HMENU?, uPosition: UINT, uFlags: UINT, hBitmapUnchecked: HBITMAP?, hBitmapChecked: HBITMAP?): WINBOOL {
    val _hMenu = hMenu.rawValue
    val _uPosition = uPosition
    val _uFlags = uFlags
    val _hBitmapUnchecked = hBitmapUnchecked.rawValue
    val _hBitmapChecked = hBitmapChecked.rawValue
    val res = kni_SetMenuItemBitmaps(_hMenu, _uPosition, _uFlags, _hBitmapUnchecked, _hBitmapChecked)
    return res
}

@SymbolName("win32_kni_SetMenuItemBitmaps")
private external fun kni_SetMenuItemBitmaps(hMenu: NativePtr, uPosition: Int, uFlags: Int, hBitmapUnchecked: NativePtr, hBitmapChecked: NativePtr): Int

fun GetMenuCheckMarkDimensions(): LONG {
    val res = kni_GetMenuCheckMarkDimensions()
    return res
}

@SymbolName("win32_kni_GetMenuCheckMarkDimensions")
private external fun kni_GetMenuCheckMarkDimensions(): Int

fun TrackPopupMenu(hMenu: HMENU?, uFlags: UINT, x: Int, y: Int, nReserved: Int, hWnd: HWND?, prcRect: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _hMenu = hMenu.rawValue
        val _uFlags = uFlags
        val _x = x
        val _y = y
        val _nReserved = nReserved
        val _hWnd = hWnd.rawValue
        val _prcRect = prcRect?.getPointer(memScope).rawValue
        val res = kni_TrackPopupMenu(_hMenu, _uFlags, _x, _y, _nReserved, _hWnd, _prcRect)
        res
    }
}

@SymbolName("win32_kni_TrackPopupMenu")
private external fun kni_TrackPopupMenu(hMenu: NativePtr, uFlags: Int, x: Int, y: Int, nReserved: Int, hWnd: NativePtr, prcRect: NativePtr): Int

fun TrackPopupMenuEx(arg0: HMENU?, arg1: UINT, arg2: Int, arg3: Int, arg4: HWND?, arg5: LPTPMPARAMS?): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val _arg2 = arg2
    val _arg3 = arg3
    val _arg4 = arg4.rawValue
    val _arg5 = arg5.rawValue
    val res = kni_TrackPopupMenuEx(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
    return res
}

@SymbolName("win32_kni_TrackPopupMenuEx")
private external fun kni_TrackPopupMenuEx(arg0: NativePtr, arg1: Int, arg2: Int, arg3: Int, arg4: NativePtr, arg5: NativePtr): Int

fun GetMenuInfo(arg0: HMENU?, arg1: LPMENUINFO?): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1.rawValue
    val res = kni_GetMenuInfo(_arg0, _arg1)
    return res
}

@SymbolName("win32_kni_GetMenuInfo")
private external fun kni_GetMenuInfo(arg0: NativePtr, arg1: NativePtr): Int

fun SetMenuInfo(arg0: HMENU?, arg1: LPCMENUINFO?): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1.rawValue
    val res = kni_SetMenuInfo(_arg0, _arg1)
    return res
}

@SymbolName("win32_kni_SetMenuInfo")
private external fun kni_SetMenuInfo(arg0: NativePtr, arg1: NativePtr): Int

fun EndMenu(): WINBOOL {
    val res = kni_EndMenu()
    return res
}

@SymbolName("win32_kni_EndMenu")
private external fun kni_EndMenu(): Int

fun InsertMenuItemA(hmenu: HMENU?, item: UINT, fByPosition: WINBOOL, lpmi: LPCMENUITEMINFOA?): WINBOOL {
    val _hmenu = hmenu.rawValue
    val _item = item
    val _fByPosition = fByPosition
    val _lpmi = lpmi.rawValue
    val res = kni_InsertMenuItemA(_hmenu, _item, _fByPosition, _lpmi)
    return res
}

@SymbolName("win32_kni_InsertMenuItemA")
private external fun kni_InsertMenuItemA(hmenu: NativePtr, item: Int, fByPosition: Int, lpmi: NativePtr): Int

fun InsertMenuItemW(hmenu: HMENU?, item: UINT, fByPosition: WINBOOL, lpmi: LPCMENUITEMINFOW?): WINBOOL {
    val _hmenu = hmenu.rawValue
    val _item = item
    val _fByPosition = fByPosition
    val _lpmi = lpmi.rawValue
    val res = kni_InsertMenuItemW(_hmenu, _item, _fByPosition, _lpmi)
    return res
}

@SymbolName("win32_kni_InsertMenuItemW")
private external fun kni_InsertMenuItemW(hmenu: NativePtr, item: Int, fByPosition: Int, lpmi: NativePtr): Int

fun GetMenuItemInfoA(hmenu: HMENU?, item: UINT, fByPosition: WINBOOL, lpmii: LPMENUITEMINFOA?): WINBOOL {
    val _hmenu = hmenu.rawValue
    val _item = item
    val _fByPosition = fByPosition
    val _lpmii = lpmii.rawValue
    val res = kni_GetMenuItemInfoA(_hmenu, _item, _fByPosition, _lpmii)
    return res
}

@SymbolName("win32_kni_GetMenuItemInfoA")
private external fun kni_GetMenuItemInfoA(hmenu: NativePtr, item: Int, fByPosition: Int, lpmii: NativePtr): Int

fun GetMenuItemInfoW(hmenu: HMENU?, item: UINT, fByPosition: WINBOOL, lpmii: LPMENUITEMINFOW?): WINBOOL {
    val _hmenu = hmenu.rawValue
    val _item = item
    val _fByPosition = fByPosition
    val _lpmii = lpmii.rawValue
    val res = kni_GetMenuItemInfoW(_hmenu, _item, _fByPosition, _lpmii)
    return res
}

@SymbolName("win32_kni_GetMenuItemInfoW")
private external fun kni_GetMenuItemInfoW(hmenu: NativePtr, item: Int, fByPosition: Int, lpmii: NativePtr): Int

fun SetMenuItemInfoA(hmenu: HMENU?, item: UINT, fByPositon: WINBOOL, lpmii: LPCMENUITEMINFOA?): WINBOOL {
    val _hmenu = hmenu.rawValue
    val _item = item
    val _fByPositon = fByPositon
    val _lpmii = lpmii.rawValue
    val res = kni_SetMenuItemInfoA(_hmenu, _item, _fByPositon, _lpmii)
    return res
}

@SymbolName("win32_kni_SetMenuItemInfoA")
private external fun kni_SetMenuItemInfoA(hmenu: NativePtr, item: Int, fByPositon: Int, lpmii: NativePtr): Int

fun SetMenuItemInfoW(hmenu: HMENU?, item: UINT, fByPositon: WINBOOL, lpmii: LPCMENUITEMINFOW?): WINBOOL {
    val _hmenu = hmenu.rawValue
    val _item = item
    val _fByPositon = fByPositon
    val _lpmii = lpmii.rawValue
    val res = kni_SetMenuItemInfoW(_hmenu, _item, _fByPositon, _lpmii)
    return res
}

@SymbolName("win32_kni_SetMenuItemInfoW")
private external fun kni_SetMenuItemInfoW(hmenu: NativePtr, item: Int, fByPositon: Int, lpmii: NativePtr): Int

fun GetMenuDefaultItem(hMenu: HMENU?, fByPos: UINT, gmdiFlags: UINT): UINT {
    val _hMenu = hMenu.rawValue
    val _fByPos = fByPos
    val _gmdiFlags = gmdiFlags
    val res = kni_GetMenuDefaultItem(_hMenu, _fByPos, _gmdiFlags)
    return res
}

@SymbolName("win32_kni_GetMenuDefaultItem")
private external fun kni_GetMenuDefaultItem(hMenu: NativePtr, fByPos: Int, gmdiFlags: Int): Int

fun SetMenuDefaultItem(hMenu: HMENU?, uItem: UINT, fByPos: UINT): WINBOOL {
    val _hMenu = hMenu.rawValue
    val _uItem = uItem
    val _fByPos = fByPos
    val res = kni_SetMenuDefaultItem(_hMenu, _uItem, _fByPos)
    return res
}

@SymbolName("win32_kni_SetMenuDefaultItem")
private external fun kni_SetMenuDefaultItem(hMenu: NativePtr, uItem: Int, fByPos: Int): Int

fun GetMenuItemRect(hWnd: HWND?, hMenu: HMENU?, uItem: UINT, lprcItem: LPRECT?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _hMenu = hMenu.rawValue
    val _uItem = uItem
    val _lprcItem = lprcItem.rawValue
    val res = kni_GetMenuItemRect(_hWnd, _hMenu, _uItem, _lprcItem)
    return res
}

@SymbolName("win32_kni_GetMenuItemRect")
private external fun kni_GetMenuItemRect(hWnd: NativePtr, hMenu: NativePtr, uItem: Int, lprcItem: NativePtr): Int

fun MenuItemFromPoint(hWnd: HWND?, hMenu: HMENU?, ptScreen: CValue<POINT>): Int {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _hMenu = hMenu.rawValue
        val _ptScreen = ptScreen.getPointer(memScope).rawValue
        val res = kni_MenuItemFromPoint(_hWnd, _hMenu, _ptScreen)
        res
    }
}

@SymbolName("win32_kni_MenuItemFromPoint")
private external fun kni_MenuItemFromPoint(hWnd: NativePtr, hMenu: NativePtr, ptScreen: NativePtr): Int

fun DragObject(hwndParent: HWND?, hwndFrom: HWND?, fmt: UINT, data: ULONG_PTR, hcur: HCURSOR?): DWORD {
    val _hwndParent = hwndParent.rawValue
    val _hwndFrom = hwndFrom.rawValue
    val _fmt = fmt
    val _data = data
    val _hcur = hcur.rawValue
    val res = kni_DragObject(_hwndParent, _hwndFrom, _fmt, _data, _hcur)
    return res
}

@SymbolName("win32_kni_DragObject")
private external fun kni_DragObject(hwndParent: NativePtr, hwndFrom: NativePtr, fmt: Int, data: Long, hcur: NativePtr): Int

fun DragDetect(hwnd: HWND?, pt: CValue<POINT>): WINBOOL {
    return memScoped {
        val _hwnd = hwnd.rawValue
        val _pt = pt.getPointer(memScope).rawValue
        val res = kni_DragDetect(_hwnd, _pt)
        res
    }
}

@SymbolName("win32_kni_DragDetect")
private external fun kni_DragDetect(hwnd: NativePtr, pt: NativePtr): Int

fun DrawIcon(hDC: HDC?, X: Int, Y: Int, hIcon: HICON?): WINBOOL {
    val _hDC = hDC.rawValue
    val _X = X
    val _Y = Y
    val _hIcon = hIcon.rawValue
    val res = kni_DrawIcon(_hDC, _X, _Y, _hIcon)
    return res
}

@SymbolName("win32_kni_DrawIcon")
private external fun kni_DrawIcon(hDC: NativePtr, X: Int, Y: Int, hIcon: NativePtr): Int

fun DrawTextA(hdc: HDC?, lpchText: String?, cchText: Int, lprc: LPRECT?, format: UINT): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpchText = lpchText?.cstr?.getPointer(memScope).rawValue
        val _cchText = cchText
        val _lprc = lprc.rawValue
        val _format = format
        val res = kni_DrawTextA(_hdc, _lpchText, _cchText, _lprc, _format)
        res
    }
}

@SymbolName("win32_kni_DrawTextA")
private external fun kni_DrawTextA(hdc: NativePtr, lpchText: NativePtr, cchText: Int, lprc: NativePtr, format: Int): Int

fun DrawTextW(hdc: HDC?, lpchText: String?, cchText: Int, lprc: LPRECT?, format: UINT): Int {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpchText = lpchText?.wcstr?.getPointer(memScope).rawValue
        val _cchText = cchText
        val _lprc = lprc.rawValue
        val _format = format
        val res = kni_DrawTextW(_hdc, _lpchText, _cchText, _lprc, _format)
        res
    }
}

@SymbolName("win32_kni_DrawTextW")
private external fun kni_DrawTextW(hdc: NativePtr, lpchText: NativePtr, cchText: Int, lprc: NativePtr, format: Int): Int

fun DrawTextExA(hdc: HDC?, lpchText: LPSTR?, cchText: Int, lprc: LPRECT?, format: UINT, lpdtp: LPDRAWTEXTPARAMS?): Int {
    val _hdc = hdc.rawValue
    val _lpchText = lpchText.rawValue
    val _cchText = cchText
    val _lprc = lprc.rawValue
    val _format = format
    val _lpdtp = lpdtp.rawValue
    val res = kni_DrawTextExA(_hdc, _lpchText, _cchText, _lprc, _format, _lpdtp)
    return res
}

@SymbolName("win32_kni_DrawTextExA")
private external fun kni_DrawTextExA(hdc: NativePtr, lpchText: NativePtr, cchText: Int, lprc: NativePtr, format: Int, lpdtp: NativePtr): Int

fun DrawTextExW(hdc: HDC?, lpchText: LPWSTR?, cchText: Int, lprc: LPRECT?, format: UINT, lpdtp: LPDRAWTEXTPARAMS?): Int {
    val _hdc = hdc.rawValue
    val _lpchText = lpchText.rawValue
    val _cchText = cchText
    val _lprc = lprc.rawValue
    val _format = format
    val _lpdtp = lpdtp.rawValue
    val res = kni_DrawTextExW(_hdc, _lpchText, _cchText, _lprc, _format, _lpdtp)
    return res
}

@SymbolName("win32_kni_DrawTextExW")
private external fun kni_DrawTextExW(hdc: NativePtr, lpchText: NativePtr, cchText: Int, lprc: NativePtr, format: Int, lpdtp: NativePtr): Int

fun GrayStringA(hDC: HDC?, hBrush: HBRUSH?, lpOutputFunc: GRAYSTRINGPROC?, lpData: LPARAM, nCount: Int, X: Int, Y: Int, nWidth: Int, nHeight: Int): WINBOOL {
    val _hDC = hDC.rawValue
    val _hBrush = hBrush.rawValue
    val _lpOutputFunc = lpOutputFunc.rawValue
    val _lpData = lpData
    val _nCount = nCount
    val _X = X
    val _Y = Y
    val _nWidth = nWidth
    val _nHeight = nHeight
    val res = kni_GrayStringA(_hDC, _hBrush, _lpOutputFunc, _lpData, _nCount, _X, _Y, _nWidth, _nHeight)
    return res
}

@SymbolName("win32_kni_GrayStringA")
private external fun kni_GrayStringA(hDC: NativePtr, hBrush: NativePtr, lpOutputFunc: NativePtr, lpData: Long, nCount: Int, X: Int, Y: Int, nWidth: Int, nHeight: Int): Int

fun GrayStringW(hDC: HDC?, hBrush: HBRUSH?, lpOutputFunc: GRAYSTRINGPROC?, lpData: LPARAM, nCount: Int, X: Int, Y: Int, nWidth: Int, nHeight: Int): WINBOOL {
    val _hDC = hDC.rawValue
    val _hBrush = hBrush.rawValue
    val _lpOutputFunc = lpOutputFunc.rawValue
    val _lpData = lpData
    val _nCount = nCount
    val _X = X
    val _Y = Y
    val _nWidth = nWidth
    val _nHeight = nHeight
    val res = kni_GrayStringW(_hDC, _hBrush, _lpOutputFunc, _lpData, _nCount, _X, _Y, _nWidth, _nHeight)
    return res
}

@SymbolName("win32_kni_GrayStringW")
private external fun kni_GrayStringW(hDC: NativePtr, hBrush: NativePtr, lpOutputFunc: NativePtr, lpData: Long, nCount: Int, X: Int, Y: Int, nWidth: Int, nHeight: Int): Int

fun DrawStateA(hdc: HDC?, hbrFore: HBRUSH?, qfnCallBack: DRAWSTATEPROC?, lData: LPARAM, wData: WPARAM, x: Int, y: Int, cx: Int, cy: Int, uFlags: UINT): WINBOOL {
    val _hdc = hdc.rawValue
    val _hbrFore = hbrFore.rawValue
    val _qfnCallBack = qfnCallBack.rawValue
    val _lData = lData
    val _wData = wData
    val _x = x
    val _y = y
    val _cx = cx
    val _cy = cy
    val _uFlags = uFlags
    val res = kni_DrawStateA(_hdc, _hbrFore, _qfnCallBack, _lData, _wData, _x, _y, _cx, _cy, _uFlags)
    return res
}

@SymbolName("win32_kni_DrawStateA")
private external fun kni_DrawStateA(hdc: NativePtr, hbrFore: NativePtr, qfnCallBack: NativePtr, lData: Long, wData: Long, x: Int, y: Int, cx: Int, cy: Int, uFlags: Int): Int

fun DrawStateW(hdc: HDC?, hbrFore: HBRUSH?, qfnCallBack: DRAWSTATEPROC?, lData: LPARAM, wData: WPARAM, x: Int, y: Int, cx: Int, cy: Int, uFlags: UINT): WINBOOL {
    val _hdc = hdc.rawValue
    val _hbrFore = hbrFore.rawValue
    val _qfnCallBack = qfnCallBack.rawValue
    val _lData = lData
    val _wData = wData
    val _x = x
    val _y = y
    val _cx = cx
    val _cy = cy
    val _uFlags = uFlags
    val res = kni_DrawStateW(_hdc, _hbrFore, _qfnCallBack, _lData, _wData, _x, _y, _cx, _cy, _uFlags)
    return res
}

@SymbolName("win32_kni_DrawStateW")
private external fun kni_DrawStateW(hdc: NativePtr, hbrFore: NativePtr, qfnCallBack: NativePtr, lData: Long, wData: Long, x: Int, y: Int, cx: Int, cy: Int, uFlags: Int): Int

fun TabbedTextOutA(hdc: HDC?, x: Int, y: Int, lpString: String?, chCount: Int, nTabPositions: Int, lpnTabStopPositions: CValuesRef<INTVar>?, nTabOrigin: Int): LONG {
    return memScoped {
        val _hdc = hdc.rawValue
        val _x = x
        val _y = y
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _chCount = chCount
        val _nTabPositions = nTabPositions
        val _lpnTabStopPositions = lpnTabStopPositions?.getPointer(memScope).rawValue
        val _nTabOrigin = nTabOrigin
        val res = kni_TabbedTextOutA(_hdc, _x, _y, _lpString, _chCount, _nTabPositions, _lpnTabStopPositions, _nTabOrigin)
        res
    }
}

@SymbolName("win32_kni_TabbedTextOutA")
private external fun kni_TabbedTextOutA(hdc: NativePtr, x: Int, y: Int, lpString: NativePtr, chCount: Int, nTabPositions: Int, lpnTabStopPositions: NativePtr, nTabOrigin: Int): Int

fun TabbedTextOutW(hdc: HDC?, x: Int, y: Int, lpString: String?, chCount: Int, nTabPositions: Int, lpnTabStopPositions: CValuesRef<INTVar>?, nTabOrigin: Int): LONG {
    return memScoped {
        val _hdc = hdc.rawValue
        val _x = x
        val _y = y
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _chCount = chCount
        val _nTabPositions = nTabPositions
        val _lpnTabStopPositions = lpnTabStopPositions?.getPointer(memScope).rawValue
        val _nTabOrigin = nTabOrigin
        val res = kni_TabbedTextOutW(_hdc, _x, _y, _lpString, _chCount, _nTabPositions, _lpnTabStopPositions, _nTabOrigin)
        res
    }
}

@SymbolName("win32_kni_TabbedTextOutW")
private external fun kni_TabbedTextOutW(hdc: NativePtr, x: Int, y: Int, lpString: NativePtr, chCount: Int, nTabPositions: Int, lpnTabStopPositions: NativePtr, nTabOrigin: Int): Int

fun GetTabbedTextExtentA(hdc: HDC?, lpString: String?, chCount: Int, nTabPositions: Int, lpnTabStopPositions: CValuesRef<INTVar>?): DWORD {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _chCount = chCount
        val _nTabPositions = nTabPositions
        val _lpnTabStopPositions = lpnTabStopPositions?.getPointer(memScope).rawValue
        val res = kni_GetTabbedTextExtentA(_hdc, _lpString, _chCount, _nTabPositions, _lpnTabStopPositions)
        res
    }
}

@SymbolName("win32_kni_GetTabbedTextExtentA")
private external fun kni_GetTabbedTextExtentA(hdc: NativePtr, lpString: NativePtr, chCount: Int, nTabPositions: Int, lpnTabStopPositions: NativePtr): Int

fun GetTabbedTextExtentW(hdc: HDC?, lpString: String?, chCount: Int, nTabPositions: Int, lpnTabStopPositions: CValuesRef<INTVar>?): DWORD {
    return memScoped {
        val _hdc = hdc.rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _chCount = chCount
        val _nTabPositions = nTabPositions
        val _lpnTabStopPositions = lpnTabStopPositions?.getPointer(memScope).rawValue
        val res = kni_GetTabbedTextExtentW(_hdc, _lpString, _chCount, _nTabPositions, _lpnTabStopPositions)
        res
    }
}

@SymbolName("win32_kni_GetTabbedTextExtentW")
private external fun kni_GetTabbedTextExtentW(hdc: NativePtr, lpString: NativePtr, chCount: Int, nTabPositions: Int, lpnTabStopPositions: NativePtr): Int

fun UpdateWindow(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_UpdateWindow(_hWnd)
    return res
}

@SymbolName("win32_kni_UpdateWindow")
private external fun kni_UpdateWindow(hWnd: NativePtr): Int

fun SetActiveWindow(hWnd: HWND?): HWND? {
    val _hWnd = hWnd.rawValue
    val res = kni_SetActiveWindow(_hWnd)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_SetActiveWindow")
private external fun kni_SetActiveWindow(hWnd: NativePtr): NativePtr

fun GetForegroundWindow(): HWND? {
    val res = kni_GetForegroundWindow()
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetForegroundWindow")
private external fun kni_GetForegroundWindow(): NativePtr

fun PaintDesktop(hdc: HDC?): WINBOOL {
    val _hdc = hdc.rawValue
    val res = kni_PaintDesktop(_hdc)
    return res
}

@SymbolName("win32_kni_PaintDesktop")
private external fun kni_PaintDesktop(hdc: NativePtr): Int

fun SwitchToThisWindow(hwnd: HWND?, fUnknown: WINBOOL): Unit {
    val _hwnd = hwnd.rawValue
    val _fUnknown = fUnknown
    val res = kni_SwitchToThisWindow(_hwnd, _fUnknown)
    return res
}

@SymbolName("win32_kni_SwitchToThisWindow")
private external fun kni_SwitchToThisWindow(hwnd: NativePtr, fUnknown: Int): Unit

fun SetForegroundWindow(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_SetForegroundWindow(_hWnd)
    return res
}

@SymbolName("win32_kni_SetForegroundWindow")
private external fun kni_SetForegroundWindow(hWnd: NativePtr): Int

fun AllowSetForegroundWindow(dwProcessId: DWORD): WINBOOL {
    val _dwProcessId = dwProcessId
    val res = kni_AllowSetForegroundWindow(_dwProcessId)
    return res
}

@SymbolName("win32_kni_AllowSetForegroundWindow")
private external fun kni_AllowSetForegroundWindow(dwProcessId: Int): Int

fun LockSetForegroundWindow(uLockCode: UINT): WINBOOL {
    val _uLockCode = uLockCode
    val res = kni_LockSetForegroundWindow(_uLockCode)
    return res
}

@SymbolName("win32_kni_LockSetForegroundWindow")
private external fun kni_LockSetForegroundWindow(uLockCode: Int): Int

fun WindowFromDC(hDC: HDC?): HWND? {
    val _hDC = hDC.rawValue
    val res = kni_WindowFromDC(_hDC)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_WindowFromDC")
private external fun kni_WindowFromDC(hDC: NativePtr): NativePtr

fun GetDC(hWnd: HWND?): HDC? {
    val _hWnd = hWnd.rawValue
    val res = kni_GetDC(_hWnd)
    return interpretCPointer<HDC__>(res)
}

@SymbolName("win32_kni_GetDC")
private external fun kni_GetDC(hWnd: NativePtr): NativePtr

fun GetDCEx(hWnd: HWND?, hrgnClip: HRGN?, flags: DWORD): HDC? {
    val _hWnd = hWnd.rawValue
    val _hrgnClip = hrgnClip.rawValue
    val _flags = flags
    val res = kni_GetDCEx(_hWnd, _hrgnClip, _flags)
    return interpretCPointer<HDC__>(res)
}

@SymbolName("win32_kni_GetDCEx")
private external fun kni_GetDCEx(hWnd: NativePtr, hrgnClip: NativePtr, flags: Int): NativePtr

fun GetWindowDC(hWnd: HWND?): HDC? {
    val _hWnd = hWnd.rawValue
    val res = kni_GetWindowDC(_hWnd)
    return interpretCPointer<HDC__>(res)
}

@SymbolName("win32_kni_GetWindowDC")
private external fun kni_GetWindowDC(hWnd: NativePtr): NativePtr

fun ReleaseDC(hWnd: HWND?, hDC: HDC?): Int {
    val _hWnd = hWnd.rawValue
    val _hDC = hDC.rawValue
    val res = kni_ReleaseDC(_hWnd, _hDC)
    return res
}

@SymbolName("win32_kni_ReleaseDC")
private external fun kni_ReleaseDC(hWnd: NativePtr, hDC: NativePtr): Int

fun BeginPaint(hWnd: HWND?, lpPaint: LPPAINTSTRUCT?): HDC? {
    val _hWnd = hWnd.rawValue
    val _lpPaint = lpPaint.rawValue
    val res = kni_BeginPaint(_hWnd, _lpPaint)
    return interpretCPointer<HDC__>(res)
}

@SymbolName("win32_kni_BeginPaint")
private external fun kni_BeginPaint(hWnd: NativePtr, lpPaint: NativePtr): NativePtr

fun EndPaint(hWnd: HWND?, lpPaint: CValuesRef<PAINTSTRUCT>?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpPaint = lpPaint?.getPointer(memScope).rawValue
        val res = kni_EndPaint(_hWnd, _lpPaint)
        res
    }
}

@SymbolName("win32_kni_EndPaint")
private external fun kni_EndPaint(hWnd: NativePtr, lpPaint: NativePtr): Int

fun GetUpdateRect(hWnd: HWND?, lpRect: LPRECT?, bErase: WINBOOL): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _lpRect = lpRect.rawValue
    val _bErase = bErase
    val res = kni_GetUpdateRect(_hWnd, _lpRect, _bErase)
    return res
}

@SymbolName("win32_kni_GetUpdateRect")
private external fun kni_GetUpdateRect(hWnd: NativePtr, lpRect: NativePtr, bErase: Int): Int

fun GetUpdateRgn(hWnd: HWND?, hRgn: HRGN?, bErase: WINBOOL): Int {
    val _hWnd = hWnd.rawValue
    val _hRgn = hRgn.rawValue
    val _bErase = bErase
    val res = kni_GetUpdateRgn(_hWnd, _hRgn, _bErase)
    return res
}

@SymbolName("win32_kni_GetUpdateRgn")
private external fun kni_GetUpdateRgn(hWnd: NativePtr, hRgn: NativePtr, bErase: Int): Int

fun SetWindowRgn(hWnd: HWND?, hRgn: HRGN?, bRedraw: WINBOOL): Int {
    val _hWnd = hWnd.rawValue
    val _hRgn = hRgn.rawValue
    val _bRedraw = bRedraw
    val res = kni_SetWindowRgn(_hWnd, _hRgn, _bRedraw)
    return res
}

@SymbolName("win32_kni_SetWindowRgn")
private external fun kni_SetWindowRgn(hWnd: NativePtr, hRgn: NativePtr, bRedraw: Int): Int

fun GetWindowRgn(hWnd: HWND?, hRgn: HRGN?): Int {
    val _hWnd = hWnd.rawValue
    val _hRgn = hRgn.rawValue
    val res = kni_GetWindowRgn(_hWnd, _hRgn)
    return res
}

@SymbolName("win32_kni_GetWindowRgn")
private external fun kni_GetWindowRgn(hWnd: NativePtr, hRgn: NativePtr): Int

fun GetWindowRgnBox(hWnd: HWND?, lprc: LPRECT?): Int {
    val _hWnd = hWnd.rawValue
    val _lprc = lprc.rawValue
    val res = kni_GetWindowRgnBox(_hWnd, _lprc)
    return res
}

@SymbolName("win32_kni_GetWindowRgnBox")
private external fun kni_GetWindowRgnBox(hWnd: NativePtr, lprc: NativePtr): Int

fun ExcludeUpdateRgn(hDC: HDC?, hWnd: HWND?): Int {
    val _hDC = hDC.rawValue
    val _hWnd = hWnd.rawValue
    val res = kni_ExcludeUpdateRgn(_hDC, _hWnd)
    return res
}

@SymbolName("win32_kni_ExcludeUpdateRgn")
private external fun kni_ExcludeUpdateRgn(hDC: NativePtr, hWnd: NativePtr): Int

fun InvalidateRect(hWnd: HWND?, lpRect: CValuesRef<RECT>?, bErase: WINBOOL): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpRect = lpRect?.getPointer(memScope).rawValue
        val _bErase = bErase
        val res = kni_InvalidateRect(_hWnd, _lpRect, _bErase)
        res
    }
}

@SymbolName("win32_kni_InvalidateRect")
private external fun kni_InvalidateRect(hWnd: NativePtr, lpRect: NativePtr, bErase: Int): Int

fun ValidateRect(hWnd: HWND?, lpRect: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpRect = lpRect?.getPointer(memScope).rawValue
        val res = kni_ValidateRect(_hWnd, _lpRect)
        res
    }
}

@SymbolName("win32_kni_ValidateRect")
private external fun kni_ValidateRect(hWnd: NativePtr, lpRect: NativePtr): Int

fun InvalidateRgn(hWnd: HWND?, hRgn: HRGN?, bErase: WINBOOL): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _hRgn = hRgn.rawValue
    val _bErase = bErase
    val res = kni_InvalidateRgn(_hWnd, _hRgn, _bErase)
    return res
}

@SymbolName("win32_kni_InvalidateRgn")
private external fun kni_InvalidateRgn(hWnd: NativePtr, hRgn: NativePtr, bErase: Int): Int

fun ValidateRgn(hWnd: HWND?, hRgn: HRGN?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _hRgn = hRgn.rawValue
    val res = kni_ValidateRgn(_hWnd, _hRgn)
    return res
}

@SymbolName("win32_kni_ValidateRgn")
private external fun kni_ValidateRgn(hWnd: NativePtr, hRgn: NativePtr): Int

fun RedrawWindow(hWnd: HWND?, lprcUpdate: CValuesRef<RECT>?, hrgnUpdate: HRGN?, flags: UINT): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lprcUpdate = lprcUpdate?.getPointer(memScope).rawValue
        val _hrgnUpdate = hrgnUpdate.rawValue
        val _flags = flags
        val res = kni_RedrawWindow(_hWnd, _lprcUpdate, _hrgnUpdate, _flags)
        res
    }
}

@SymbolName("win32_kni_RedrawWindow")
private external fun kni_RedrawWindow(hWnd: NativePtr, lprcUpdate: NativePtr, hrgnUpdate: NativePtr, flags: Int): Int

fun LockWindowUpdate(hWndLock: HWND?): WINBOOL {
    val _hWndLock = hWndLock.rawValue
    val res = kni_LockWindowUpdate(_hWndLock)
    return res
}

@SymbolName("win32_kni_LockWindowUpdate")
private external fun kni_LockWindowUpdate(hWndLock: NativePtr): Int

fun ScrollWindow(hWnd: HWND?, XAmount: Int, YAmount: Int, lpRect: CValuesRef<RECT>?, lpClipRect: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _XAmount = XAmount
        val _YAmount = YAmount
        val _lpRect = lpRect?.getPointer(memScope).rawValue
        val _lpClipRect = lpClipRect?.getPointer(memScope).rawValue
        val res = kni_ScrollWindow(_hWnd, _XAmount, _YAmount, _lpRect, _lpClipRect)
        res
    }
}

@SymbolName("win32_kni_ScrollWindow")
private external fun kni_ScrollWindow(hWnd: NativePtr, XAmount: Int, YAmount: Int, lpRect: NativePtr, lpClipRect: NativePtr): Int

fun ScrollDC(hDC: HDC?, dx: Int, dy: Int, lprcScroll: CValuesRef<RECT>?, lprcClip: CValuesRef<RECT>?, hrgnUpdate: HRGN?, lprcUpdate: LPRECT?): WINBOOL {
    return memScoped {
        val _hDC = hDC.rawValue
        val _dx = dx
        val _dy = dy
        val _lprcScroll = lprcScroll?.getPointer(memScope).rawValue
        val _lprcClip = lprcClip?.getPointer(memScope).rawValue
        val _hrgnUpdate = hrgnUpdate.rawValue
        val _lprcUpdate = lprcUpdate.rawValue
        val res = kni_ScrollDC(_hDC, _dx, _dy, _lprcScroll, _lprcClip, _hrgnUpdate, _lprcUpdate)
        res
    }
}

@SymbolName("win32_kni_ScrollDC")
private external fun kni_ScrollDC(hDC: NativePtr, dx: Int, dy: Int, lprcScroll: NativePtr, lprcClip: NativePtr, hrgnUpdate: NativePtr, lprcUpdate: NativePtr): Int

fun ScrollWindowEx(hWnd: HWND?, dx: Int, dy: Int, prcScroll: CValuesRef<RECT>?, prcClip: CValuesRef<RECT>?, hrgnUpdate: HRGN?, prcUpdate: LPRECT?, flags: UINT): Int {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _dx = dx
        val _dy = dy
        val _prcScroll = prcScroll?.getPointer(memScope).rawValue
        val _prcClip = prcClip?.getPointer(memScope).rawValue
        val _hrgnUpdate = hrgnUpdate.rawValue
        val _prcUpdate = prcUpdate.rawValue
        val _flags = flags
        val res = kni_ScrollWindowEx(_hWnd, _dx, _dy, _prcScroll, _prcClip, _hrgnUpdate, _prcUpdate, _flags)
        res
    }
}

@SymbolName("win32_kni_ScrollWindowEx")
private external fun kni_ScrollWindowEx(hWnd: NativePtr, dx: Int, dy: Int, prcScroll: NativePtr, prcClip: NativePtr, hrgnUpdate: NativePtr, prcUpdate: NativePtr, flags: Int): Int

fun SetScrollPos(hWnd: HWND?, nBar: Int, nPos: Int, bRedraw: WINBOOL): Int {
    val _hWnd = hWnd.rawValue
    val _nBar = nBar
    val _nPos = nPos
    val _bRedraw = bRedraw
    val res = kni_SetScrollPos(_hWnd, _nBar, _nPos, _bRedraw)
    return res
}

@SymbolName("win32_kni_SetScrollPos")
private external fun kni_SetScrollPos(hWnd: NativePtr, nBar: Int, nPos: Int, bRedraw: Int): Int

fun GetScrollPos(hWnd: HWND?, nBar: Int): Int {
    val _hWnd = hWnd.rawValue
    val _nBar = nBar
    val res = kni_GetScrollPos(_hWnd, _nBar)
    return res
}

@SymbolName("win32_kni_GetScrollPos")
private external fun kni_GetScrollPos(hWnd: NativePtr, nBar: Int): Int

fun SetScrollRange(hWnd: HWND?, nBar: Int, nMinPos: Int, nMaxPos: Int, bRedraw: WINBOOL): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _nBar = nBar
    val _nMinPos = nMinPos
    val _nMaxPos = nMaxPos
    val _bRedraw = bRedraw
    val res = kni_SetScrollRange(_hWnd, _nBar, _nMinPos, _nMaxPos, _bRedraw)
    return res
}

@SymbolName("win32_kni_SetScrollRange")
private external fun kni_SetScrollRange(hWnd: NativePtr, nBar: Int, nMinPos: Int, nMaxPos: Int, bRedraw: Int): Int

fun GetScrollRange(hWnd: HWND?, nBar: Int, lpMinPos: LPINT?, lpMaxPos: LPINT?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _nBar = nBar
    val _lpMinPos = lpMinPos.rawValue
    val _lpMaxPos = lpMaxPos.rawValue
    val res = kni_GetScrollRange(_hWnd, _nBar, _lpMinPos, _lpMaxPos)
    return res
}

@SymbolName("win32_kni_GetScrollRange")
private external fun kni_GetScrollRange(hWnd: NativePtr, nBar: Int, lpMinPos: NativePtr, lpMaxPos: NativePtr): Int

fun ShowScrollBar(hWnd: HWND?, wBar: Int, bShow: WINBOOL): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _wBar = wBar
    val _bShow = bShow
    val res = kni_ShowScrollBar(_hWnd, _wBar, _bShow)
    return res
}

@SymbolName("win32_kni_ShowScrollBar")
private external fun kni_ShowScrollBar(hWnd: NativePtr, wBar: Int, bShow: Int): Int

fun EnableScrollBar(hWnd: HWND?, wSBflags: UINT, wArrows: UINT): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _wSBflags = wSBflags
    val _wArrows = wArrows
    val res = kni_EnableScrollBar(_hWnd, _wSBflags, _wArrows)
    return res
}

@SymbolName("win32_kni_EnableScrollBar")
private external fun kni_EnableScrollBar(hWnd: NativePtr, wSBflags: Int, wArrows: Int): Int

fun SetPropA(hWnd: HWND?, lpString: String?, hData: HANDLE?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val _hData = hData.rawValue
        val res = kni_SetPropA(_hWnd, _lpString, _hData)
        res
    }
}

@SymbolName("win32_kni_SetPropA")
private external fun kni_SetPropA(hWnd: NativePtr, lpString: NativePtr, hData: NativePtr): Int

fun SetPropW(hWnd: HWND?, lpString: String?, hData: HANDLE?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _hData = hData.rawValue
        val res = kni_SetPropW(_hWnd, _lpString, _hData)
        res
    }
}

@SymbolName("win32_kni_SetPropW")
private external fun kni_SetPropW(hWnd: NativePtr, lpString: NativePtr, hData: NativePtr): Int

fun GetPropA(hWnd: HWND?, lpString: String?): HANDLE? {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_GetPropA(_hWnd, _lpString)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_GetPropA")
private external fun kni_GetPropA(hWnd: NativePtr, lpString: NativePtr): NativePtr

fun GetPropW(hWnd: HWND?, lpString: String?): HANDLE? {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_GetPropW(_hWnd, _lpString)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_GetPropW")
private external fun kni_GetPropW(hWnd: NativePtr, lpString: NativePtr): NativePtr

fun RemovePropA(hWnd: HWND?, lpString: String?): HANDLE? {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_RemovePropA(_hWnd, _lpString)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_RemovePropA")
private external fun kni_RemovePropA(hWnd: NativePtr, lpString: NativePtr): NativePtr

fun RemovePropW(hWnd: HWND?, lpString: String?): HANDLE? {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_RemovePropW(_hWnd, _lpString)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_RemovePropW")
private external fun kni_RemovePropW(hWnd: NativePtr, lpString: NativePtr): NativePtr

fun EnumPropsExA(hWnd: HWND?, lpEnumFunc: PROPENUMPROCEXA?, lParam: LPARAM): Int {
    val _hWnd = hWnd.rawValue
    val _lpEnumFunc = lpEnumFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumPropsExA(_hWnd, _lpEnumFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumPropsExA")
private external fun kni_EnumPropsExA(hWnd: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumPropsExW(hWnd: HWND?, lpEnumFunc: PROPENUMPROCEXW?, lParam: LPARAM): Int {
    val _hWnd = hWnd.rawValue
    val _lpEnumFunc = lpEnumFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumPropsExW(_hWnd, _lpEnumFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumPropsExW")
private external fun kni_EnumPropsExW(hWnd: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumPropsA(hWnd: HWND?, lpEnumFunc: PROPENUMPROCA?): Int {
    val _hWnd = hWnd.rawValue
    val _lpEnumFunc = lpEnumFunc.rawValue
    val res = kni_EnumPropsA(_hWnd, _lpEnumFunc)
    return res
}

@SymbolName("win32_kni_EnumPropsA")
private external fun kni_EnumPropsA(hWnd: NativePtr, lpEnumFunc: NativePtr): Int

fun EnumPropsW(hWnd: HWND?, lpEnumFunc: PROPENUMPROCW?): Int {
    val _hWnd = hWnd.rawValue
    val _lpEnumFunc = lpEnumFunc.rawValue
    val res = kni_EnumPropsW(_hWnd, _lpEnumFunc)
    return res
}

@SymbolName("win32_kni_EnumPropsW")
private external fun kni_EnumPropsW(hWnd: NativePtr, lpEnumFunc: NativePtr): Int

fun SetWindowTextA(hWnd: HWND?, lpString: String?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpString = lpString?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetWindowTextA(_hWnd, _lpString)
        res
    }
}

@SymbolName("win32_kni_SetWindowTextA")
private external fun kni_SetWindowTextA(hWnd: NativePtr, lpString: NativePtr): Int

fun SetWindowTextW(hWnd: HWND?, lpString: String?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetWindowTextW(_hWnd, _lpString)
        res
    }
}

@SymbolName("win32_kni_SetWindowTextW")
private external fun kni_SetWindowTextW(hWnd: NativePtr, lpString: NativePtr): Int

fun GetWindowTextA(hWnd: HWND?, lpString: LPSTR?, nMaxCount: Int): Int {
    val _hWnd = hWnd.rawValue
    val _lpString = lpString.rawValue
    val _nMaxCount = nMaxCount
    val res = kni_GetWindowTextA(_hWnd, _lpString, _nMaxCount)
    return res
}

@SymbolName("win32_kni_GetWindowTextA")
private external fun kni_GetWindowTextA(hWnd: NativePtr, lpString: NativePtr, nMaxCount: Int): Int

fun GetWindowTextW(hWnd: HWND?, lpString: LPWSTR?, nMaxCount: Int): Int {
    val _hWnd = hWnd.rawValue
    val _lpString = lpString.rawValue
    val _nMaxCount = nMaxCount
    val res = kni_GetWindowTextW(_hWnd, _lpString, _nMaxCount)
    return res
}

@SymbolName("win32_kni_GetWindowTextW")
private external fun kni_GetWindowTextW(hWnd: NativePtr, lpString: NativePtr, nMaxCount: Int): Int

fun GetWindowTextLengthA(hWnd: HWND?): Int {
    val _hWnd = hWnd.rawValue
    val res = kni_GetWindowTextLengthA(_hWnd)
    return res
}

@SymbolName("win32_kni_GetWindowTextLengthA")
private external fun kni_GetWindowTextLengthA(hWnd: NativePtr): Int

fun GetWindowTextLengthW(hWnd: HWND?): Int {
    val _hWnd = hWnd.rawValue
    val res = kni_GetWindowTextLengthW(_hWnd)
    return res
}

@SymbolName("win32_kni_GetWindowTextLengthW")
private external fun kni_GetWindowTextLengthW(hWnd: NativePtr): Int

fun GetClientRect(hWnd: HWND?, lpRect: LPRECT?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _lpRect = lpRect.rawValue
    val res = kni_GetClientRect(_hWnd, _lpRect)
    return res
}

@SymbolName("win32_kni_GetClientRect")
private external fun kni_GetClientRect(hWnd: NativePtr, lpRect: NativePtr): Int

fun GetWindowRect(hWnd: HWND?, lpRect: LPRECT?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _lpRect = lpRect.rawValue
    val res = kni_GetWindowRect(_hWnd, _lpRect)
    return res
}

@SymbolName("win32_kni_GetWindowRect")
private external fun kni_GetWindowRect(hWnd: NativePtr, lpRect: NativePtr): Int

fun AdjustWindowRect(lpRect: LPRECT?, dwStyle: DWORD, bMenu: WINBOOL): WINBOOL {
    val _lpRect = lpRect.rawValue
    val _dwStyle = dwStyle
    val _bMenu = bMenu
    val res = kni_AdjustWindowRect(_lpRect, _dwStyle, _bMenu)
    return res
}

@SymbolName("win32_kni_AdjustWindowRect")
private external fun kni_AdjustWindowRect(lpRect: NativePtr, dwStyle: Int, bMenu: Int): Int

fun AdjustWindowRectEx(lpRect: LPRECT?, dwStyle: DWORD, bMenu: WINBOOL, dwExStyle: DWORD): WINBOOL {
    val _lpRect = lpRect.rawValue
    val _dwStyle = dwStyle
    val _bMenu = bMenu
    val _dwExStyle = dwExStyle
    val res = kni_AdjustWindowRectEx(_lpRect, _dwStyle, _bMenu, _dwExStyle)
    return res
}

@SymbolName("win32_kni_AdjustWindowRectEx")
private external fun kni_AdjustWindowRectEx(lpRect: NativePtr, dwStyle: Int, bMenu: Int, dwExStyle: Int): Int

fun SetWindowContextHelpId(arg0: HWND?, arg1: DWORD): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val res = kni_SetWindowContextHelpId(_arg0, _arg1)
    return res
}

@SymbolName("win32_kni_SetWindowContextHelpId")
private external fun kni_SetWindowContextHelpId(arg0: NativePtr, arg1: Int): Int

fun GetWindowContextHelpId(arg0: HWND?): DWORD {
    val _arg0 = arg0.rawValue
    val res = kni_GetWindowContextHelpId(_arg0)
    return res
}

@SymbolName("win32_kni_GetWindowContextHelpId")
private external fun kni_GetWindowContextHelpId(arg0: NativePtr): Int

fun SetMenuContextHelpId(arg0: HMENU?, arg1: DWORD): WINBOOL {
    val _arg0 = arg0.rawValue
    val _arg1 = arg1
    val res = kni_SetMenuContextHelpId(_arg0, _arg1)
    return res
}

@SymbolName("win32_kni_SetMenuContextHelpId")
private external fun kni_SetMenuContextHelpId(arg0: NativePtr, arg1: Int): Int

fun GetMenuContextHelpId(arg0: HMENU?): DWORD {
    val _arg0 = arg0.rawValue
    val res = kni_GetMenuContextHelpId(_arg0)
    return res
}

@SymbolName("win32_kni_GetMenuContextHelpId")
private external fun kni_GetMenuContextHelpId(arg0: NativePtr): Int

fun MessageBoxA(hWnd: HWND?, lpText: String?, lpCaption: String?, uType: UINT): Int {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpText = lpText?.cstr?.getPointer(memScope).rawValue
        val _lpCaption = lpCaption?.cstr?.getPointer(memScope).rawValue
        val _uType = uType
        val res = kni_MessageBoxA(_hWnd, _lpText, _lpCaption, _uType)
        res
    }
}

@SymbolName("win32_kni_MessageBoxA")
private external fun kni_MessageBoxA(hWnd: NativePtr, lpText: NativePtr, lpCaption: NativePtr, uType: Int): Int

fun MessageBoxW(hWnd: HWND?, lpText: String?, lpCaption: String?, uType: UINT): Int {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpText = lpText?.wcstr?.getPointer(memScope).rawValue
        val _lpCaption = lpCaption?.wcstr?.getPointer(memScope).rawValue
        val _uType = uType
        val res = kni_MessageBoxW(_hWnd, _lpText, _lpCaption, _uType)
        res
    }
}

@SymbolName("win32_kni_MessageBoxW")
private external fun kni_MessageBoxW(hWnd: NativePtr, lpText: NativePtr, lpCaption: NativePtr, uType: Int): Int

fun MessageBoxExA(hWnd: HWND?, lpText: String?, lpCaption: String?, uType: UINT, wLanguageId: WORD): Int {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpText = lpText?.cstr?.getPointer(memScope).rawValue
        val _lpCaption = lpCaption?.cstr?.getPointer(memScope).rawValue
        val _uType = uType
        val _wLanguageId = wLanguageId
        val res = kni_MessageBoxExA(_hWnd, _lpText, _lpCaption, _uType, _wLanguageId)
        res
    }
}

@SymbolName("win32_kni_MessageBoxExA")
private external fun kni_MessageBoxExA(hWnd: NativePtr, lpText: NativePtr, lpCaption: NativePtr, uType: Int, wLanguageId: Short): Int

fun MessageBoxExW(hWnd: HWND?, lpText: String?, lpCaption: String?, uType: UINT, wLanguageId: WORD): Int {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _lpText = lpText?.wcstr?.getPointer(memScope).rawValue
        val _lpCaption = lpCaption?.wcstr?.getPointer(memScope).rawValue
        val _uType = uType
        val _wLanguageId = wLanguageId
        val res = kni_MessageBoxExW(_hWnd, _lpText, _lpCaption, _uType, _wLanguageId)
        res
    }
}

@SymbolName("win32_kni_MessageBoxExW")
private external fun kni_MessageBoxExW(hWnd: NativePtr, lpText: NativePtr, lpCaption: NativePtr, uType: Int, wLanguageId: Short): Int

fun MessageBoxIndirectA(lpmbp: CValuesRef<MSGBOXPARAMSA>?): Int {
    return memScoped {
        val _lpmbp = lpmbp?.getPointer(memScope).rawValue
        val res = kni_MessageBoxIndirectA(_lpmbp)
        res
    }
}

@SymbolName("win32_kni_MessageBoxIndirectA")
private external fun kni_MessageBoxIndirectA(lpmbp: NativePtr): Int

fun MessageBoxIndirectW(lpmbp: CValuesRef<MSGBOXPARAMSW>?): Int {
    return memScoped {
        val _lpmbp = lpmbp?.getPointer(memScope).rawValue
        val res = kni_MessageBoxIndirectW(_lpmbp)
        res
    }
}

@SymbolName("win32_kni_MessageBoxIndirectW")
private external fun kni_MessageBoxIndirectW(lpmbp: NativePtr): Int

fun MessageBeep(uType: UINT): WINBOOL {
    val _uType = uType
    val res = kni_MessageBeep(_uType)
    return res
}

@SymbolName("win32_kni_MessageBeep")
private external fun kni_MessageBeep(uType: Int): Int

fun ShowCursor(bShow: WINBOOL): Int {
    val _bShow = bShow
    val res = kni_ShowCursor(_bShow)
    return res
}

@SymbolName("win32_kni_ShowCursor")
private external fun kni_ShowCursor(bShow: Int): Int

fun SetCursorPos(X: Int, Y: Int): WINBOOL {
    val _X = X
    val _Y = Y
    val res = kni_SetCursorPos(_X, _Y)
    return res
}

@SymbolName("win32_kni_SetCursorPos")
private external fun kni_SetCursorPos(X: Int, Y: Int): Int

fun SetCursor(hCursor: HCURSOR?): HCURSOR? {
    val _hCursor = hCursor.rawValue
    val res = kni_SetCursor(_hCursor)
    return interpretCPointer<HICON__>(res)
}

@SymbolName("win32_kni_SetCursor")
private external fun kni_SetCursor(hCursor: NativePtr): NativePtr

fun GetCursorPos(lpPoint: LPPOINT?): WINBOOL {
    val _lpPoint = lpPoint.rawValue
    val res = kni_GetCursorPos(_lpPoint)
    return res
}

@SymbolName("win32_kni_GetCursorPos")
private external fun kni_GetCursorPos(lpPoint: NativePtr): Int

fun ClipCursor(lpRect: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _lpRect = lpRect?.getPointer(memScope).rawValue
        val res = kni_ClipCursor(_lpRect)
        res
    }
}

@SymbolName("win32_kni_ClipCursor")
private external fun kni_ClipCursor(lpRect: NativePtr): Int

fun GetClipCursor(lpRect: LPRECT?): WINBOOL {
    val _lpRect = lpRect.rawValue
    val res = kni_GetClipCursor(_lpRect)
    return res
}

@SymbolName("win32_kni_GetClipCursor")
private external fun kni_GetClipCursor(lpRect: NativePtr): Int

fun GetCursor(): HCURSOR? {
    val res = kni_GetCursor()
    return interpretCPointer<HICON__>(res)
}

@SymbolName("win32_kni_GetCursor")
private external fun kni_GetCursor(): NativePtr

fun CreateCaret(hWnd: HWND?, hBitmap: HBITMAP?, nWidth: Int, nHeight: Int): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _hBitmap = hBitmap.rawValue
    val _nWidth = nWidth
    val _nHeight = nHeight
    val res = kni_CreateCaret(_hWnd, _hBitmap, _nWidth, _nHeight)
    return res
}

@SymbolName("win32_kni_CreateCaret")
private external fun kni_CreateCaret(hWnd: NativePtr, hBitmap: NativePtr, nWidth: Int, nHeight: Int): Int

fun GetCaretBlinkTime(): UINT {
    val res = kni_GetCaretBlinkTime()
    return res
}

@SymbolName("win32_kni_GetCaretBlinkTime")
private external fun kni_GetCaretBlinkTime(): Int

fun SetCaretBlinkTime(uMSeconds: UINT): WINBOOL {
    val _uMSeconds = uMSeconds
    val res = kni_SetCaretBlinkTime(_uMSeconds)
    return res
}

@SymbolName("win32_kni_SetCaretBlinkTime")
private external fun kni_SetCaretBlinkTime(uMSeconds: Int): Int

fun DestroyCaret(): WINBOOL {
    val res = kni_DestroyCaret()
    return res
}

@SymbolName("win32_kni_DestroyCaret")
private external fun kni_DestroyCaret(): Int

fun HideCaret(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_HideCaret(_hWnd)
    return res
}

@SymbolName("win32_kni_HideCaret")
private external fun kni_HideCaret(hWnd: NativePtr): Int

fun ShowCaret(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_ShowCaret(_hWnd)
    return res
}

@SymbolName("win32_kni_ShowCaret")
private external fun kni_ShowCaret(hWnd: NativePtr): Int

fun SetCaretPos(X: Int, Y: Int): WINBOOL {
    val _X = X
    val _Y = Y
    val res = kni_SetCaretPos(_X, _Y)
    return res
}

@SymbolName("win32_kni_SetCaretPos")
private external fun kni_SetCaretPos(X: Int, Y: Int): Int

fun GetCaretPos(lpPoint: LPPOINT?): WINBOOL {
    val _lpPoint = lpPoint.rawValue
    val res = kni_GetCaretPos(_lpPoint)
    return res
}

@SymbolName("win32_kni_GetCaretPos")
private external fun kni_GetCaretPos(lpPoint: NativePtr): Int

fun ClientToScreen(hWnd: HWND?, lpPoint: LPPOINT?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _lpPoint = lpPoint.rawValue
    val res = kni_ClientToScreen(_hWnd, _lpPoint)
    return res
}

@SymbolName("win32_kni_ClientToScreen")
private external fun kni_ClientToScreen(hWnd: NativePtr, lpPoint: NativePtr): Int

fun ScreenToClient(hWnd: HWND?, lpPoint: LPPOINT?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _lpPoint = lpPoint.rawValue
    val res = kni_ScreenToClient(_hWnd, _lpPoint)
    return res
}

@SymbolName("win32_kni_ScreenToClient")
private external fun kni_ScreenToClient(hWnd: NativePtr, lpPoint: NativePtr): Int

fun MapWindowPoints(hWndFrom: HWND?, hWndTo: HWND?, lpPoints: LPPOINT?, cPoints: UINT): Int {
    val _hWndFrom = hWndFrom.rawValue
    val _hWndTo = hWndTo.rawValue
    val _lpPoints = lpPoints.rawValue
    val _cPoints = cPoints
    val res = kni_MapWindowPoints(_hWndFrom, _hWndTo, _lpPoints, _cPoints)
    return res
}

@SymbolName("win32_kni_MapWindowPoints")
private external fun kni_MapWindowPoints(hWndFrom: NativePtr, hWndTo: NativePtr, lpPoints: NativePtr, cPoints: Int): Int

fun WindowFromPoint(Point: CValue<POINT>): HWND? {
    return memScoped {
        val _Point = Point.getPointer(memScope).rawValue
        val res = kni_WindowFromPoint(_Point)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_WindowFromPoint")
private external fun kni_WindowFromPoint(Point: NativePtr): NativePtr

fun ChildWindowFromPoint(hWndParent: HWND?, Point: CValue<POINT>): HWND? {
    return memScoped {
        val _hWndParent = hWndParent.rawValue
        val _Point = Point.getPointer(memScope).rawValue
        val res = kni_ChildWindowFromPoint(_hWndParent, _Point)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_ChildWindowFromPoint")
private external fun kni_ChildWindowFromPoint(hWndParent: NativePtr, Point: NativePtr): NativePtr

fun ChildWindowFromPointEx(hwnd: HWND?, pt: CValue<POINT>, flags: UINT): HWND? {
    return memScoped {
        val _hwnd = hwnd.rawValue
        val _pt = pt.getPointer(memScope).rawValue
        val _flags = flags
        val res = kni_ChildWindowFromPointEx(_hwnd, _pt, _flags)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_ChildWindowFromPointEx")
private external fun kni_ChildWindowFromPointEx(hwnd: NativePtr, pt: NativePtr, flags: Int): NativePtr

fun GetSysColor(nIndex: Int): DWORD {
    val _nIndex = nIndex
    val res = kni_GetSysColor(_nIndex)
    return res
}

@SymbolName("win32_kni_GetSysColor")
private external fun kni_GetSysColor(nIndex: Int): Int

fun GetSysColorBrush(nIndex: Int): HBRUSH? {
    val _nIndex = nIndex
    val res = kni_GetSysColorBrush(_nIndex)
    return interpretCPointer<HBRUSH__>(res)
}

@SymbolName("win32_kni_GetSysColorBrush")
private external fun kni_GetSysColorBrush(nIndex: Int): NativePtr

fun SetSysColors(cElements: Int, lpaElements: CValuesRef<INTVar>?, lpaRgbValues: CValuesRef<COLORREFVar>?): WINBOOL {
    return memScoped {
        val _cElements = cElements
        val _lpaElements = lpaElements?.getPointer(memScope).rawValue
        val _lpaRgbValues = lpaRgbValues?.getPointer(memScope).rawValue
        val res = kni_SetSysColors(_cElements, _lpaElements, _lpaRgbValues)
        res
    }
}

@SymbolName("win32_kni_SetSysColors")
private external fun kni_SetSysColors(cElements: Int, lpaElements: NativePtr, lpaRgbValues: NativePtr): Int

fun DrawFocusRect(hDC: HDC?, lprc: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _hDC = hDC.rawValue
        val _lprc = lprc?.getPointer(memScope).rawValue
        val res = kni_DrawFocusRect(_hDC, _lprc)
        res
    }
}

@SymbolName("win32_kni_DrawFocusRect")
private external fun kni_DrawFocusRect(hDC: NativePtr, lprc: NativePtr): Int

fun FillRect(hDC: HDC?, lprc: CValuesRef<RECT>?, hbr: HBRUSH?): Int {
    return memScoped {
        val _hDC = hDC.rawValue
        val _lprc = lprc?.getPointer(memScope).rawValue
        val _hbr = hbr.rawValue
        val res = kni_FillRect(_hDC, _lprc, _hbr)
        res
    }
}

@SymbolName("win32_kni_FillRect")
private external fun kni_FillRect(hDC: NativePtr, lprc: NativePtr, hbr: NativePtr): Int

fun FrameRect(hDC: HDC?, lprc: CValuesRef<RECT>?, hbr: HBRUSH?): Int {
    return memScoped {
        val _hDC = hDC.rawValue
        val _lprc = lprc?.getPointer(memScope).rawValue
        val _hbr = hbr.rawValue
        val res = kni_FrameRect(_hDC, _lprc, _hbr)
        res
    }
}

@SymbolName("win32_kni_FrameRect")
private external fun kni_FrameRect(hDC: NativePtr, lprc: NativePtr, hbr: NativePtr): Int

fun InvertRect(hDC: HDC?, lprc: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _hDC = hDC.rawValue
        val _lprc = lprc?.getPointer(memScope).rawValue
        val res = kni_InvertRect(_hDC, _lprc)
        res
    }
}

@SymbolName("win32_kni_InvertRect")
private external fun kni_InvertRect(hDC: NativePtr, lprc: NativePtr): Int

fun SetRect(lprc: LPRECT?, xLeft: Int, yTop: Int, xRight: Int, yBottom: Int): WINBOOL {
    val _lprc = lprc.rawValue
    val _xLeft = xLeft
    val _yTop = yTop
    val _xRight = xRight
    val _yBottom = yBottom
    val res = kni_SetRect(_lprc, _xLeft, _yTop, _xRight, _yBottom)
    return res
}

@SymbolName("win32_kni_SetRect")
private external fun kni_SetRect(lprc: NativePtr, xLeft: Int, yTop: Int, xRight: Int, yBottom: Int): Int

fun SetRectEmpty(lprc: LPRECT?): WINBOOL {
    val _lprc = lprc.rawValue
    val res = kni_SetRectEmpty(_lprc)
    return res
}

@SymbolName("win32_kni_SetRectEmpty")
private external fun kni_SetRectEmpty(lprc: NativePtr): Int

fun CopyRect(lprcDst: LPRECT?, lprcSrc: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _lprcDst = lprcDst.rawValue
        val _lprcSrc = lprcSrc?.getPointer(memScope).rawValue
        val res = kni_CopyRect(_lprcDst, _lprcSrc)
        res
    }
}

@SymbolName("win32_kni_CopyRect")
private external fun kni_CopyRect(lprcDst: NativePtr, lprcSrc: NativePtr): Int

fun InflateRect(lprc: LPRECT?, dx: Int, dy: Int): WINBOOL {
    val _lprc = lprc.rawValue
    val _dx = dx
    val _dy = dy
    val res = kni_InflateRect(_lprc, _dx, _dy)
    return res
}

@SymbolName("win32_kni_InflateRect")
private external fun kni_InflateRect(lprc: NativePtr, dx: Int, dy: Int): Int

fun IntersectRect(lprcDst: LPRECT?, lprcSrc1: CValuesRef<RECT>?, lprcSrc2: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _lprcDst = lprcDst.rawValue
        val _lprcSrc1 = lprcSrc1?.getPointer(memScope).rawValue
        val _lprcSrc2 = lprcSrc2?.getPointer(memScope).rawValue
        val res = kni_IntersectRect(_lprcDst, _lprcSrc1, _lprcSrc2)
        res
    }
}

@SymbolName("win32_kni_IntersectRect")
private external fun kni_IntersectRect(lprcDst: NativePtr, lprcSrc1: NativePtr, lprcSrc2: NativePtr): Int

fun UnionRect(lprcDst: LPRECT?, lprcSrc1: CValuesRef<RECT>?, lprcSrc2: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _lprcDst = lprcDst.rawValue
        val _lprcSrc1 = lprcSrc1?.getPointer(memScope).rawValue
        val _lprcSrc2 = lprcSrc2?.getPointer(memScope).rawValue
        val res = kni_UnionRect(_lprcDst, _lprcSrc1, _lprcSrc2)
        res
    }
}

@SymbolName("win32_kni_UnionRect")
private external fun kni_UnionRect(lprcDst: NativePtr, lprcSrc1: NativePtr, lprcSrc2: NativePtr): Int

fun SubtractRect(lprcDst: LPRECT?, lprcSrc1: CValuesRef<RECT>?, lprcSrc2: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _lprcDst = lprcDst.rawValue
        val _lprcSrc1 = lprcSrc1?.getPointer(memScope).rawValue
        val _lprcSrc2 = lprcSrc2?.getPointer(memScope).rawValue
        val res = kni_SubtractRect(_lprcDst, _lprcSrc1, _lprcSrc2)
        res
    }
}

@SymbolName("win32_kni_SubtractRect")
private external fun kni_SubtractRect(lprcDst: NativePtr, lprcSrc1: NativePtr, lprcSrc2: NativePtr): Int

fun OffsetRect(lprc: LPRECT?, dx: Int, dy: Int): WINBOOL {
    val _lprc = lprc.rawValue
    val _dx = dx
    val _dy = dy
    val res = kni_OffsetRect(_lprc, _dx, _dy)
    return res
}

@SymbolName("win32_kni_OffsetRect")
private external fun kni_OffsetRect(lprc: NativePtr, dx: Int, dy: Int): Int

fun IsRectEmpty(lprc: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _lprc = lprc?.getPointer(memScope).rawValue
        val res = kni_IsRectEmpty(_lprc)
        res
    }
}

@SymbolName("win32_kni_IsRectEmpty")
private external fun kni_IsRectEmpty(lprc: NativePtr): Int

fun EqualRect(lprc1: CValuesRef<RECT>?, lprc2: CValuesRef<RECT>?): WINBOOL {
    return memScoped {
        val _lprc1 = lprc1?.getPointer(memScope).rawValue
        val _lprc2 = lprc2?.getPointer(memScope).rawValue
        val res = kni_EqualRect(_lprc1, _lprc2)
        res
    }
}

@SymbolName("win32_kni_EqualRect")
private external fun kni_EqualRect(lprc1: NativePtr, lprc2: NativePtr): Int

fun PtInRect(lprc: CValuesRef<RECT>?, pt: CValue<POINT>): WINBOOL {
    return memScoped {
        val _lprc = lprc?.getPointer(memScope).rawValue
        val _pt = pt.getPointer(memScope).rawValue
        val res = kni_PtInRect(_lprc, _pt)
        res
    }
}

@SymbolName("win32_kni_PtInRect")
private external fun kni_PtInRect(lprc: NativePtr, pt: NativePtr): Int

fun GetWindowWord(hWnd: HWND?, nIndex: Int): WORD {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val res = kni_GetWindowWord(_hWnd, _nIndex)
    return res
}

@SymbolName("win32_kni_GetWindowWord")
private external fun kni_GetWindowWord(hWnd: NativePtr, nIndex: Int): Short

fun SetWindowWord(hWnd: HWND?, nIndex: Int, wNewWord: WORD): WORD {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val _wNewWord = wNewWord
    val res = kni_SetWindowWord(_hWnd, _nIndex, _wNewWord)
    return res
}

@SymbolName("win32_kni_SetWindowWord")
private external fun kni_SetWindowWord(hWnd: NativePtr, nIndex: Int, wNewWord: Short): Short

fun GetWindowLongA(hWnd: HWND?, nIndex: Int): LONG {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val res = kni_GetWindowLongA(_hWnd, _nIndex)
    return res
}

@SymbolName("win32_kni_GetWindowLongA")
private external fun kni_GetWindowLongA(hWnd: NativePtr, nIndex: Int): Int

fun GetWindowLongW(hWnd: HWND?, nIndex: Int): LONG {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val res = kni_GetWindowLongW(_hWnd, _nIndex)
    return res
}

@SymbolName("win32_kni_GetWindowLongW")
private external fun kni_GetWindowLongW(hWnd: NativePtr, nIndex: Int): Int

fun SetWindowLongA(hWnd: HWND?, nIndex: Int, dwNewLong: LONG): LONG {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val _dwNewLong = dwNewLong
    val res = kni_SetWindowLongA(_hWnd, _nIndex, _dwNewLong)
    return res
}

@SymbolName("win32_kni_SetWindowLongA")
private external fun kni_SetWindowLongA(hWnd: NativePtr, nIndex: Int, dwNewLong: Int): Int

fun SetWindowLongW(hWnd: HWND?, nIndex: Int, dwNewLong: LONG): LONG {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val _dwNewLong = dwNewLong
    val res = kni_SetWindowLongW(_hWnd, _nIndex, _dwNewLong)
    return res
}

@SymbolName("win32_kni_SetWindowLongW")
private external fun kni_SetWindowLongW(hWnd: NativePtr, nIndex: Int, dwNewLong: Int): Int

fun GetWindowLongPtrA(hWnd: HWND?, nIndex: Int): LONG_PTR {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val res = kni_GetWindowLongPtrA(_hWnd, _nIndex)
    return res
}

@SymbolName("win32_kni_GetWindowLongPtrA")
private external fun kni_GetWindowLongPtrA(hWnd: NativePtr, nIndex: Int): Long

fun GetWindowLongPtrW(hWnd: HWND?, nIndex: Int): LONG_PTR {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val res = kni_GetWindowLongPtrW(_hWnd, _nIndex)
    return res
}

@SymbolName("win32_kni_GetWindowLongPtrW")
private external fun kni_GetWindowLongPtrW(hWnd: NativePtr, nIndex: Int): Long

fun SetWindowLongPtrA(hWnd: HWND?, nIndex: Int, dwNewLong: LONG_PTR): LONG_PTR {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val _dwNewLong = dwNewLong
    val res = kni_SetWindowLongPtrA(_hWnd, _nIndex, _dwNewLong)
    return res
}

@SymbolName("win32_kni_SetWindowLongPtrA")
private external fun kni_SetWindowLongPtrA(hWnd: NativePtr, nIndex: Int, dwNewLong: Long): Long

fun SetWindowLongPtrW(hWnd: HWND?, nIndex: Int, dwNewLong: LONG_PTR): LONG_PTR {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val _dwNewLong = dwNewLong
    val res = kni_SetWindowLongPtrW(_hWnd, _nIndex, _dwNewLong)
    return res
}

@SymbolName("win32_kni_SetWindowLongPtrW")
private external fun kni_SetWindowLongPtrW(hWnd: NativePtr, nIndex: Int, dwNewLong: Long): Long

fun GetClassWord(hWnd: HWND?, nIndex: Int): WORD {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val res = kni_GetClassWord(_hWnd, _nIndex)
    return res
}

@SymbolName("win32_kni_GetClassWord")
private external fun kni_GetClassWord(hWnd: NativePtr, nIndex: Int): Short

fun SetClassWord(hWnd: HWND?, nIndex: Int, wNewWord: WORD): WORD {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val _wNewWord = wNewWord
    val res = kni_SetClassWord(_hWnd, _nIndex, _wNewWord)
    return res
}

@SymbolName("win32_kni_SetClassWord")
private external fun kni_SetClassWord(hWnd: NativePtr, nIndex: Int, wNewWord: Short): Short

fun GetClassLongA(hWnd: HWND?, nIndex: Int): DWORD {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val res = kni_GetClassLongA(_hWnd, _nIndex)
    return res
}

@SymbolName("win32_kni_GetClassLongA")
private external fun kni_GetClassLongA(hWnd: NativePtr, nIndex: Int): Int

fun GetClassLongW(hWnd: HWND?, nIndex: Int): DWORD {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val res = kni_GetClassLongW(_hWnd, _nIndex)
    return res
}

@SymbolName("win32_kni_GetClassLongW")
private external fun kni_GetClassLongW(hWnd: NativePtr, nIndex: Int): Int

fun SetClassLongA(hWnd: HWND?, nIndex: Int, dwNewLong: LONG): DWORD {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val _dwNewLong = dwNewLong
    val res = kni_SetClassLongA(_hWnd, _nIndex, _dwNewLong)
    return res
}

@SymbolName("win32_kni_SetClassLongA")
private external fun kni_SetClassLongA(hWnd: NativePtr, nIndex: Int, dwNewLong: Int): Int

fun SetClassLongW(hWnd: HWND?, nIndex: Int, dwNewLong: LONG): DWORD {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val _dwNewLong = dwNewLong
    val res = kni_SetClassLongW(_hWnd, _nIndex, _dwNewLong)
    return res
}

@SymbolName("win32_kni_SetClassLongW")
private external fun kni_SetClassLongW(hWnd: NativePtr, nIndex: Int, dwNewLong: Int): Int

fun GetClassLongPtrA(hWnd: HWND?, nIndex: Int): ULONG_PTR {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val res = kni_GetClassLongPtrA(_hWnd, _nIndex)
    return res
}

@SymbolName("win32_kni_GetClassLongPtrA")
private external fun kni_GetClassLongPtrA(hWnd: NativePtr, nIndex: Int): Long

fun GetClassLongPtrW(hWnd: HWND?, nIndex: Int): ULONG_PTR {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val res = kni_GetClassLongPtrW(_hWnd, _nIndex)
    return res
}

@SymbolName("win32_kni_GetClassLongPtrW")
private external fun kni_GetClassLongPtrW(hWnd: NativePtr, nIndex: Int): Long

fun SetClassLongPtrA(hWnd: HWND?, nIndex: Int, dwNewLong: LONG_PTR): ULONG_PTR {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val _dwNewLong = dwNewLong
    val res = kni_SetClassLongPtrA(_hWnd, _nIndex, _dwNewLong)
    return res
}

@SymbolName("win32_kni_SetClassLongPtrA")
private external fun kni_SetClassLongPtrA(hWnd: NativePtr, nIndex: Int, dwNewLong: Long): Long

fun SetClassLongPtrW(hWnd: HWND?, nIndex: Int, dwNewLong: LONG_PTR): ULONG_PTR {
    val _hWnd = hWnd.rawValue
    val _nIndex = nIndex
    val _dwNewLong = dwNewLong
    val res = kni_SetClassLongPtrW(_hWnd, _nIndex, _dwNewLong)
    return res
}

@SymbolName("win32_kni_SetClassLongPtrW")
private external fun kni_SetClassLongPtrW(hWnd: NativePtr, nIndex: Int, dwNewLong: Long): Long

fun GetProcessDefaultLayout(pdwDefaultLayout: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pdwDefaultLayout = pdwDefaultLayout?.getPointer(memScope).rawValue
        val res = kni_GetProcessDefaultLayout(_pdwDefaultLayout)
        res
    }
}

@SymbolName("win32_kni_GetProcessDefaultLayout")
private external fun kni_GetProcessDefaultLayout(pdwDefaultLayout: NativePtr): Int

fun SetProcessDefaultLayout(dwDefaultLayout: DWORD): WINBOOL {
    val _dwDefaultLayout = dwDefaultLayout
    val res = kni_SetProcessDefaultLayout(_dwDefaultLayout)
    return res
}

@SymbolName("win32_kni_SetProcessDefaultLayout")
private external fun kni_SetProcessDefaultLayout(dwDefaultLayout: Int): Int

fun GetDesktopWindow(): HWND? {
    val res = kni_GetDesktopWindow()
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetDesktopWindow")
private external fun kni_GetDesktopWindow(): NativePtr

fun GetParent(hWnd: HWND?): HWND? {
    val _hWnd = hWnd.rawValue
    val res = kni_GetParent(_hWnd)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetParent")
private external fun kni_GetParent(hWnd: NativePtr): NativePtr

fun SetParent(hWndChild: HWND?, hWndNewParent: HWND?): HWND? {
    val _hWndChild = hWndChild.rawValue
    val _hWndNewParent = hWndNewParent.rawValue
    val res = kni_SetParent(_hWndChild, _hWndNewParent)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_SetParent")
private external fun kni_SetParent(hWndChild: NativePtr, hWndNewParent: NativePtr): NativePtr

fun EnumChildWindows(hWndParent: HWND?, lpEnumFunc: WNDENUMPROC?, lParam: LPARAM): WINBOOL {
    val _hWndParent = hWndParent.rawValue
    val _lpEnumFunc = lpEnumFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumChildWindows(_hWndParent, _lpEnumFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumChildWindows")
private external fun kni_EnumChildWindows(hWndParent: NativePtr, lpEnumFunc: NativePtr, lParam: Long): Int

fun FindWindowA(lpClassName: String?, lpWindowName: String?): HWND? {
    return memScoped {
        val _lpClassName = lpClassName?.cstr?.getPointer(memScope).rawValue
        val _lpWindowName = lpWindowName?.cstr?.getPointer(memScope).rawValue
        val res = kni_FindWindowA(_lpClassName, _lpWindowName)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_FindWindowA")
private external fun kni_FindWindowA(lpClassName: NativePtr, lpWindowName: NativePtr): NativePtr

fun FindWindowW(lpClassName: String?, lpWindowName: String?): HWND? {
    return memScoped {
        val _lpClassName = lpClassName?.wcstr?.getPointer(memScope).rawValue
        val _lpWindowName = lpWindowName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_FindWindowW(_lpClassName, _lpWindowName)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_FindWindowW")
private external fun kni_FindWindowW(lpClassName: NativePtr, lpWindowName: NativePtr): NativePtr

fun FindWindowExA(hWndParent: HWND?, hWndChildAfter: HWND?, lpszClass: String?, lpszWindow: String?): HWND? {
    return memScoped {
        val _hWndParent = hWndParent.rawValue
        val _hWndChildAfter = hWndChildAfter.rawValue
        val _lpszClass = lpszClass?.cstr?.getPointer(memScope).rawValue
        val _lpszWindow = lpszWindow?.cstr?.getPointer(memScope).rawValue
        val res = kni_FindWindowExA(_hWndParent, _hWndChildAfter, _lpszClass, _lpszWindow)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_FindWindowExA")
private external fun kni_FindWindowExA(hWndParent: NativePtr, hWndChildAfter: NativePtr, lpszClass: NativePtr, lpszWindow: NativePtr): NativePtr

fun FindWindowExW(hWndParent: HWND?, hWndChildAfter: HWND?, lpszClass: String?, lpszWindow: String?): HWND? {
    return memScoped {
        val _hWndParent = hWndParent.rawValue
        val _hWndChildAfter = hWndChildAfter.rawValue
        val _lpszClass = lpszClass?.wcstr?.getPointer(memScope).rawValue
        val _lpszWindow = lpszWindow?.wcstr?.getPointer(memScope).rawValue
        val res = kni_FindWindowExW(_hWndParent, _hWndChildAfter, _lpszClass, _lpszWindow)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_FindWindowExW")
private external fun kni_FindWindowExW(hWndParent: NativePtr, hWndChildAfter: NativePtr, lpszClass: NativePtr, lpszWindow: NativePtr): NativePtr

fun GetShellWindow(): HWND? {
    val res = kni_GetShellWindow()
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetShellWindow")
private external fun kni_GetShellWindow(): NativePtr

fun RegisterShellHookWindow(hwnd: HWND?): WINBOOL {
    val _hwnd = hwnd.rawValue
    val res = kni_RegisterShellHookWindow(_hwnd)
    return res
}

@SymbolName("win32_kni_RegisterShellHookWindow")
private external fun kni_RegisterShellHookWindow(hwnd: NativePtr): Int

fun DeregisterShellHookWindow(hwnd: HWND?): WINBOOL {
    val _hwnd = hwnd.rawValue
    val res = kni_DeregisterShellHookWindow(_hwnd)
    return res
}

@SymbolName("win32_kni_DeregisterShellHookWindow")
private external fun kni_DeregisterShellHookWindow(hwnd: NativePtr): Int

fun EnumWindows(lpEnumFunc: WNDENUMPROC?, lParam: LPARAM): WINBOOL {
    val _lpEnumFunc = lpEnumFunc.rawValue
    val _lParam = lParam
    val res = kni_EnumWindows(_lpEnumFunc, _lParam)
    return res
}

@SymbolName("win32_kni_EnumWindows")
private external fun kni_EnumWindows(lpEnumFunc: NativePtr, lParam: Long): Int

fun EnumThreadWindows(dwThreadId: DWORD, lpfn: WNDENUMPROC?, lParam: LPARAM): WINBOOL {
    val _dwThreadId = dwThreadId
    val _lpfn = lpfn.rawValue
    val _lParam = lParam
    val res = kni_EnumThreadWindows(_dwThreadId, _lpfn, _lParam)
    return res
}

@SymbolName("win32_kni_EnumThreadWindows")
private external fun kni_EnumThreadWindows(dwThreadId: Int, lpfn: NativePtr, lParam: Long): Int

fun GetClassNameA(hWnd: HWND?, lpClassName: LPSTR?, nMaxCount: Int): Int {
    val _hWnd = hWnd.rawValue
    val _lpClassName = lpClassName.rawValue
    val _nMaxCount = nMaxCount
    val res = kni_GetClassNameA(_hWnd, _lpClassName, _nMaxCount)
    return res
}

@SymbolName("win32_kni_GetClassNameA")
private external fun kni_GetClassNameA(hWnd: NativePtr, lpClassName: NativePtr, nMaxCount: Int): Int

fun GetClassNameW(hWnd: HWND?, lpClassName: LPWSTR?, nMaxCount: Int): Int {
    val _hWnd = hWnd.rawValue
    val _lpClassName = lpClassName.rawValue
    val _nMaxCount = nMaxCount
    val res = kni_GetClassNameW(_hWnd, _lpClassName, _nMaxCount)
    return res
}

@SymbolName("win32_kni_GetClassNameW")
private external fun kni_GetClassNameW(hWnd: NativePtr, lpClassName: NativePtr, nMaxCount: Int): Int

fun GetTopWindow(hWnd: HWND?): HWND? {
    val _hWnd = hWnd.rawValue
    val res = kni_GetTopWindow(_hWnd)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetTopWindow")
private external fun kni_GetTopWindow(hWnd: NativePtr): NativePtr

fun GetWindowThreadProcessId(hWnd: HWND?, lpdwProcessId: LPDWORD?): DWORD {
    val _hWnd = hWnd.rawValue
    val _lpdwProcessId = lpdwProcessId.rawValue
    val res = kni_GetWindowThreadProcessId(_hWnd, _lpdwProcessId)
    return res
}

@SymbolName("win32_kni_GetWindowThreadProcessId")
private external fun kni_GetWindowThreadProcessId(hWnd: NativePtr, lpdwProcessId: NativePtr): Int

fun IsGUIThread(bConvert: WINBOOL): WINBOOL {
    val _bConvert = bConvert
    val res = kni_IsGUIThread(_bConvert)
    return res
}

@SymbolName("win32_kni_IsGUIThread")
private external fun kni_IsGUIThread(bConvert: Int): Int

fun GetLastActivePopup(hWnd: HWND?): HWND? {
    val _hWnd = hWnd.rawValue
    val res = kni_GetLastActivePopup(_hWnd)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetLastActivePopup")
private external fun kni_GetLastActivePopup(hWnd: NativePtr): NativePtr

fun GetWindow(hWnd: HWND?, uCmd: UINT): HWND? {
    val _hWnd = hWnd.rawValue
    val _uCmd = uCmd
    val res = kni_GetWindow(_hWnd, _uCmd)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetWindow")
private external fun kni_GetWindow(hWnd: NativePtr, uCmd: Int): NativePtr

fun SetWindowsHookA(nFilterType: Int, pfnFilterProc: HOOKPROC?): HHOOK? {
    val _nFilterType = nFilterType
    val _pfnFilterProc = pfnFilterProc.rawValue
    val res = kni_SetWindowsHookA(_nFilterType, _pfnFilterProc)
    return interpretCPointer<HHOOK__>(res)
}

@SymbolName("win32_kni_SetWindowsHookA")
private external fun kni_SetWindowsHookA(nFilterType: Int, pfnFilterProc: NativePtr): NativePtr

fun SetWindowsHookW(nFilterType: Int, pfnFilterProc: HOOKPROC?): HHOOK? {
    val _nFilterType = nFilterType
    val _pfnFilterProc = pfnFilterProc.rawValue
    val res = kni_SetWindowsHookW(_nFilterType, _pfnFilterProc)
    return interpretCPointer<HHOOK__>(res)
}

@SymbolName("win32_kni_SetWindowsHookW")
private external fun kni_SetWindowsHookW(nFilterType: Int, pfnFilterProc: NativePtr): NativePtr

fun UnhookWindowsHook(nCode: Int, pfnFilterProc: HOOKPROC?): WINBOOL {
    val _nCode = nCode
    val _pfnFilterProc = pfnFilterProc.rawValue
    val res = kni_UnhookWindowsHook(_nCode, _pfnFilterProc)
    return res
}

@SymbolName("win32_kni_UnhookWindowsHook")
private external fun kni_UnhookWindowsHook(nCode: Int, pfnFilterProc: NativePtr): Int

fun SetWindowsHookExA(idHook: Int, lpfn: HOOKPROC?, hmod: HINSTANCE?, dwThreadId: DWORD): HHOOK? {
    val _idHook = idHook
    val _lpfn = lpfn.rawValue
    val _hmod = hmod.rawValue
    val _dwThreadId = dwThreadId
    val res = kni_SetWindowsHookExA(_idHook, _lpfn, _hmod, _dwThreadId)
    return interpretCPointer<HHOOK__>(res)
}

@SymbolName("win32_kni_SetWindowsHookExA")
private external fun kni_SetWindowsHookExA(idHook: Int, lpfn: NativePtr, hmod: NativePtr, dwThreadId: Int): NativePtr

fun SetWindowsHookExW(idHook: Int, lpfn: HOOKPROC?, hmod: HINSTANCE?, dwThreadId: DWORD): HHOOK? {
    val _idHook = idHook
    val _lpfn = lpfn.rawValue
    val _hmod = hmod.rawValue
    val _dwThreadId = dwThreadId
    val res = kni_SetWindowsHookExW(_idHook, _lpfn, _hmod, _dwThreadId)
    return interpretCPointer<HHOOK__>(res)
}

@SymbolName("win32_kni_SetWindowsHookExW")
private external fun kni_SetWindowsHookExW(idHook: Int, lpfn: NativePtr, hmod: NativePtr, dwThreadId: Int): NativePtr

fun UnhookWindowsHookEx(hhk: HHOOK?): WINBOOL {
    val _hhk = hhk.rawValue
    val res = kni_UnhookWindowsHookEx(_hhk)
    return res
}

@SymbolName("win32_kni_UnhookWindowsHookEx")
private external fun kni_UnhookWindowsHookEx(hhk: NativePtr): Int

fun CallNextHookEx(hhk: HHOOK?, nCode: Int, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hhk = hhk.rawValue
    val _nCode = nCode
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_CallNextHookEx(_hhk, _nCode, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_CallNextHookEx")
private external fun kni_CallNextHookEx(hhk: NativePtr, nCode: Int, wParam: Long, lParam: Long): Long

fun CheckMenuRadioItem(hmenu: HMENU?, first: UINT, last: UINT, check: UINT, flags: UINT): WINBOOL {
    val _hmenu = hmenu.rawValue
    val _first = first
    val _last = last
    val _check = check
    val _flags = flags
    val res = kni_CheckMenuRadioItem(_hmenu, _first, _last, _check, _flags)
    return res
}

@SymbolName("win32_kni_CheckMenuRadioItem")
private external fun kni_CheckMenuRadioItem(hmenu: NativePtr, first: Int, last: Int, check: Int, flags: Int): Int

fun LoadBitmapA(hInstance: HINSTANCE?, lpBitmapName: String?): HBITMAP? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpBitmapName = lpBitmapName?.cstr?.getPointer(memScope).rawValue
        val res = kni_LoadBitmapA(_hInstance, _lpBitmapName)
        interpretCPointer<HBITMAP__>(res)
    }
}

@SymbolName("win32_kni_LoadBitmapA")
private external fun kni_LoadBitmapA(hInstance: NativePtr, lpBitmapName: NativePtr): NativePtr

fun LoadBitmapW(hInstance: HINSTANCE?, lpBitmapName: String?): HBITMAP? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpBitmapName = lpBitmapName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_LoadBitmapW(_hInstance, _lpBitmapName)
        interpretCPointer<HBITMAP__>(res)
    }
}

@SymbolName("win32_kni_LoadBitmapW")
private external fun kni_LoadBitmapW(hInstance: NativePtr, lpBitmapName: NativePtr): NativePtr

fun LoadCursorA(hInstance: HINSTANCE?, lpCursorName: String?): HCURSOR? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpCursorName = lpCursorName?.cstr?.getPointer(memScope).rawValue
        val res = kni_LoadCursorA(_hInstance, _lpCursorName)
        interpretCPointer<HICON__>(res)
    }
}

@SymbolName("win32_kni_LoadCursorA")
private external fun kni_LoadCursorA(hInstance: NativePtr, lpCursorName: NativePtr): NativePtr

fun LoadCursorW(hInstance: HINSTANCE?, lpCursorName: String?): HCURSOR? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpCursorName = lpCursorName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_LoadCursorW(_hInstance, _lpCursorName)
        interpretCPointer<HICON__>(res)
    }
}

@SymbolName("win32_kni_LoadCursorW")
private external fun kni_LoadCursorW(hInstance: NativePtr, lpCursorName: NativePtr): NativePtr

fun LoadCursorFromFileA(lpFileName: String?): HCURSOR? {
    return memScoped {
        val _lpFileName = lpFileName?.cstr?.getPointer(memScope).rawValue
        val res = kni_LoadCursorFromFileA(_lpFileName)
        interpretCPointer<HICON__>(res)
    }
}

@SymbolName("win32_kni_LoadCursorFromFileA")
private external fun kni_LoadCursorFromFileA(lpFileName: NativePtr): NativePtr

fun LoadCursorFromFileW(lpFileName: String?): HCURSOR? {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_LoadCursorFromFileW(_lpFileName)
        interpretCPointer<HICON__>(res)
    }
}

@SymbolName("win32_kni_LoadCursorFromFileW")
private external fun kni_LoadCursorFromFileW(lpFileName: NativePtr): NativePtr

fun CreateCursor(hInst: HINSTANCE?, xHotSpot: Int, yHotSpot: Int, nWidth: Int, nHeight: Int, pvANDPlane: COpaquePointer?, pvXORPlane: COpaquePointer?): HCURSOR? {
    val _hInst = hInst.rawValue
    val _xHotSpot = xHotSpot
    val _yHotSpot = yHotSpot
    val _nWidth = nWidth
    val _nHeight = nHeight
    val _pvANDPlane = pvANDPlane.rawValue
    val _pvXORPlane = pvXORPlane.rawValue
    val res = kni_CreateCursor(_hInst, _xHotSpot, _yHotSpot, _nWidth, _nHeight, _pvANDPlane, _pvXORPlane)
    return interpretCPointer<HICON__>(res)
}

@SymbolName("win32_kni_CreateCursor")
private external fun kni_CreateCursor(hInst: NativePtr, xHotSpot: Int, yHotSpot: Int, nWidth: Int, nHeight: Int, pvANDPlane: NativePtr, pvXORPlane: NativePtr): NativePtr

fun DestroyCursor(hCursor: HCURSOR?): WINBOOL {
    val _hCursor = hCursor.rawValue
    val res = kni_DestroyCursor(_hCursor)
    return res
}

@SymbolName("win32_kni_DestroyCursor")
private external fun kni_DestroyCursor(hCursor: NativePtr): Int

fun SetSystemCursor(hcur: HCURSOR?, id: DWORD): WINBOOL {
    val _hcur = hcur.rawValue
    val _id = id
    val res = kni_SetSystemCursor(_hcur, _id)
    return res
}

@SymbolName("win32_kni_SetSystemCursor")
private external fun kni_SetSystemCursor(hcur: NativePtr, id: Int): Int

fun LoadIconA(hInstance: HINSTANCE?, lpIconName: String?): HICON? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpIconName = lpIconName?.cstr?.getPointer(memScope).rawValue
        val res = kni_LoadIconA(_hInstance, _lpIconName)
        interpretCPointer<HICON__>(res)
    }
}

@SymbolName("win32_kni_LoadIconA")
private external fun kni_LoadIconA(hInstance: NativePtr, lpIconName: NativePtr): NativePtr

fun LoadIconW(hInstance: HINSTANCE?, lpIconName: String?): HICON? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _lpIconName = lpIconName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_LoadIconW(_hInstance, _lpIconName)
        interpretCPointer<HICON__>(res)
    }
}

@SymbolName("win32_kni_LoadIconW")
private external fun kni_LoadIconW(hInstance: NativePtr, lpIconName: NativePtr): NativePtr

fun PrivateExtractIconsA(szFileName: String?, nIconIndex: Int, cxIcon: Int, cyIcon: Int, phicon: CValuesRef<HICONVar>?, piconid: CValuesRef<UINTVar>?, nIcons: UINT, flags: UINT): UINT {
    return memScoped {
        val _szFileName = szFileName?.cstr?.getPointer(memScope).rawValue
        val _nIconIndex = nIconIndex
        val _cxIcon = cxIcon
        val _cyIcon = cyIcon
        val _phicon = phicon?.getPointer(memScope).rawValue
        val _piconid = piconid?.getPointer(memScope).rawValue
        val _nIcons = nIcons
        val _flags = flags
        val res = kni_PrivateExtractIconsA(_szFileName, _nIconIndex, _cxIcon, _cyIcon, _phicon, _piconid, _nIcons, _flags)
        res
    }
}

@SymbolName("win32_kni_PrivateExtractIconsA")
private external fun kni_PrivateExtractIconsA(szFileName: NativePtr, nIconIndex: Int, cxIcon: Int, cyIcon: Int, phicon: NativePtr, piconid: NativePtr, nIcons: Int, flags: Int): Int

fun PrivateExtractIconsW(szFileName: String?, nIconIndex: Int, cxIcon: Int, cyIcon: Int, phicon: CValuesRef<HICONVar>?, piconid: CValuesRef<UINTVar>?, nIcons: UINT, flags: UINT): UINT {
    return memScoped {
        val _szFileName = szFileName?.wcstr?.getPointer(memScope).rawValue
        val _nIconIndex = nIconIndex
        val _cxIcon = cxIcon
        val _cyIcon = cyIcon
        val _phicon = phicon?.getPointer(memScope).rawValue
        val _piconid = piconid?.getPointer(memScope).rawValue
        val _nIcons = nIcons
        val _flags = flags
        val res = kni_PrivateExtractIconsW(_szFileName, _nIconIndex, _cxIcon, _cyIcon, _phicon, _piconid, _nIcons, _flags)
        res
    }
}

@SymbolName("win32_kni_PrivateExtractIconsW")
private external fun kni_PrivateExtractIconsW(szFileName: NativePtr, nIconIndex: Int, cxIcon: Int, cyIcon: Int, phicon: NativePtr, piconid: NativePtr, nIcons: Int, flags: Int): Int

fun CreateIcon(hInstance: HINSTANCE?, nWidth: Int, nHeight: Int, cPlanes: BYTE, cBitsPixel: BYTE, lpbANDbits: CValuesRef<BYTEVar>?, lpbXORbits: CValuesRef<BYTEVar>?): HICON? {
    return memScoped {
        val _hInstance = hInstance.rawValue
        val _nWidth = nWidth
        val _nHeight = nHeight
        val _cPlanes = cPlanes
        val _cBitsPixel = cBitsPixel
        val _lpbANDbits = lpbANDbits?.getPointer(memScope).rawValue
        val _lpbXORbits = lpbXORbits?.getPointer(memScope).rawValue
        val res = kni_CreateIcon(_hInstance, _nWidth, _nHeight, _cPlanes, _cBitsPixel, _lpbANDbits, _lpbXORbits)
        interpretCPointer<HICON__>(res)
    }
}

@SymbolName("win32_kni_CreateIcon")
private external fun kni_CreateIcon(hInstance: NativePtr, nWidth: Int, nHeight: Int, cPlanes: Byte, cBitsPixel: Byte, lpbANDbits: NativePtr, lpbXORbits: NativePtr): NativePtr

fun DestroyIcon(hIcon: HICON?): WINBOOL {
    val _hIcon = hIcon.rawValue
    val res = kni_DestroyIcon(_hIcon)
    return res
}

@SymbolName("win32_kni_DestroyIcon")
private external fun kni_DestroyIcon(hIcon: NativePtr): Int

fun LookupIconIdFromDirectory(presbits: PBYTE?, fIcon: WINBOOL): Int {
    val _presbits = presbits.rawValue
    val _fIcon = fIcon
    val res = kni_LookupIconIdFromDirectory(_presbits, _fIcon)
    return res
}

@SymbolName("win32_kni_LookupIconIdFromDirectory")
private external fun kni_LookupIconIdFromDirectory(presbits: NativePtr, fIcon: Int): Int

fun LookupIconIdFromDirectoryEx(presbits: PBYTE?, fIcon: WINBOOL, cxDesired: Int, cyDesired: Int, Flags: UINT): Int {
    val _presbits = presbits.rawValue
    val _fIcon = fIcon
    val _cxDesired = cxDesired
    val _cyDesired = cyDesired
    val _Flags = Flags
    val res = kni_LookupIconIdFromDirectoryEx(_presbits, _fIcon, _cxDesired, _cyDesired, _Flags)
    return res
}

@SymbolName("win32_kni_LookupIconIdFromDirectoryEx")
private external fun kni_LookupIconIdFromDirectoryEx(presbits: NativePtr, fIcon: Int, cxDesired: Int, cyDesired: Int, Flags: Int): Int

fun CreateIconFromResource(presbits: PBYTE?, dwResSize: DWORD, fIcon: WINBOOL, dwVer: DWORD): HICON? {
    val _presbits = presbits.rawValue
    val _dwResSize = dwResSize
    val _fIcon = fIcon
    val _dwVer = dwVer
    val res = kni_CreateIconFromResource(_presbits, _dwResSize, _fIcon, _dwVer)
    return interpretCPointer<HICON__>(res)
}

@SymbolName("win32_kni_CreateIconFromResource")
private external fun kni_CreateIconFromResource(presbits: NativePtr, dwResSize: Int, fIcon: Int, dwVer: Int): NativePtr

fun CreateIconFromResourceEx(presbits: PBYTE?, dwResSize: DWORD, fIcon: WINBOOL, dwVer: DWORD, cxDesired: Int, cyDesired: Int, Flags: UINT): HICON? {
    val _presbits = presbits.rawValue
    val _dwResSize = dwResSize
    val _fIcon = fIcon
    val _dwVer = dwVer
    val _cxDesired = cxDesired
    val _cyDesired = cyDesired
    val _Flags = Flags
    val res = kni_CreateIconFromResourceEx(_presbits, _dwResSize, _fIcon, _dwVer, _cxDesired, _cyDesired, _Flags)
    return interpretCPointer<HICON__>(res)
}

@SymbolName("win32_kni_CreateIconFromResourceEx")
private external fun kni_CreateIconFromResourceEx(presbits: NativePtr, dwResSize: Int, fIcon: Int, dwVer: Int, cxDesired: Int, cyDesired: Int, Flags: Int): NativePtr

fun LoadImageA(hInst: HINSTANCE?, name: String?, type: UINT, cx: Int, cy: Int, fuLoad: UINT): HANDLE? {
    return memScoped {
        val _hInst = hInst.rawValue
        val _name = name?.cstr?.getPointer(memScope).rawValue
        val _type = type
        val _cx = cx
        val _cy = cy
        val _fuLoad = fuLoad
        val res = kni_LoadImageA(_hInst, _name, _type, _cx, _cy, _fuLoad)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_LoadImageA")
private external fun kni_LoadImageA(hInst: NativePtr, name: NativePtr, type: Int, cx: Int, cy: Int, fuLoad: Int): NativePtr

fun LoadImageW(hInst: HINSTANCE?, name: String?, type: UINT, cx: Int, cy: Int, fuLoad: UINT): HANDLE? {
    return memScoped {
        val _hInst = hInst.rawValue
        val _name = name?.wcstr?.getPointer(memScope).rawValue
        val _type = type
        val _cx = cx
        val _cy = cy
        val _fuLoad = fuLoad
        val res = kni_LoadImageW(_hInst, _name, _type, _cx, _cy, _fuLoad)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_LoadImageW")
private external fun kni_LoadImageW(hInst: NativePtr, name: NativePtr, type: Int, cx: Int, cy: Int, fuLoad: Int): NativePtr

fun CopyImage(h: HANDLE?, type: UINT, cx: Int, cy: Int, flags: UINT): HANDLE? {
    val _h = h.rawValue
    val _type = type
    val _cx = cx
    val _cy = cy
    val _flags = flags
    val res = kni_CopyImage(_h, _type, _cx, _cy, _flags)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CopyImage")
private external fun kni_CopyImage(h: NativePtr, type: Int, cx: Int, cy: Int, flags: Int): NativePtr

fun DrawIconEx(hdc: HDC?, xLeft: Int, yTop: Int, hIcon: HICON?, cxWidth: Int, cyWidth: Int, istepIfAniCur: UINT, hbrFlickerFreeDraw: HBRUSH?, diFlags: UINT): WINBOOL {
    val _hdc = hdc.rawValue
    val _xLeft = xLeft
    val _yTop = yTop
    val _hIcon = hIcon.rawValue
    val _cxWidth = cxWidth
    val _cyWidth = cyWidth
    val _istepIfAniCur = istepIfAniCur
    val _hbrFlickerFreeDraw = hbrFlickerFreeDraw.rawValue
    val _diFlags = diFlags
    val res = kni_DrawIconEx(_hdc, _xLeft, _yTop, _hIcon, _cxWidth, _cyWidth, _istepIfAniCur, _hbrFlickerFreeDraw, _diFlags)
    return res
}

@SymbolName("win32_kni_DrawIconEx")
private external fun kni_DrawIconEx(hdc: NativePtr, xLeft: Int, yTop: Int, hIcon: NativePtr, cxWidth: Int, cyWidth: Int, istepIfAniCur: Int, hbrFlickerFreeDraw: NativePtr, diFlags: Int): Int

fun CreateIconIndirect(piconinfo: PICONINFO?): HICON? {
    val _piconinfo = piconinfo.rawValue
    val res = kni_CreateIconIndirect(_piconinfo)
    return interpretCPointer<HICON__>(res)
}

@SymbolName("win32_kni_CreateIconIndirect")
private external fun kni_CreateIconIndirect(piconinfo: NativePtr): NativePtr

fun CopyIcon(hIcon: HICON?): HICON? {
    val _hIcon = hIcon.rawValue
    val res = kni_CopyIcon(_hIcon)
    return interpretCPointer<HICON__>(res)
}

@SymbolName("win32_kni_CopyIcon")
private external fun kni_CopyIcon(hIcon: NativePtr): NativePtr

fun GetIconInfo(hIcon: HICON?, piconinfo: PICONINFO?): WINBOOL {
    val _hIcon = hIcon.rawValue
    val _piconinfo = piconinfo.rawValue
    val res = kni_GetIconInfo(_hIcon, _piconinfo)
    return res
}

@SymbolName("win32_kni_GetIconInfo")
private external fun kni_GetIconInfo(hIcon: NativePtr, piconinfo: NativePtr): Int

fun IsDialogMessageA(hDlg: HWND?, lpMsg: LPMSG?): WINBOOL {
    val _hDlg = hDlg.rawValue
    val _lpMsg = lpMsg.rawValue
    val res = kni_IsDialogMessageA(_hDlg, _lpMsg)
    return res
}

@SymbolName("win32_kni_IsDialogMessageA")
private external fun kni_IsDialogMessageA(hDlg: NativePtr, lpMsg: NativePtr): Int

fun IsDialogMessageW(hDlg: HWND?, lpMsg: LPMSG?): WINBOOL {
    val _hDlg = hDlg.rawValue
    val _lpMsg = lpMsg.rawValue
    val res = kni_IsDialogMessageW(_hDlg, _lpMsg)
    return res
}

@SymbolName("win32_kni_IsDialogMessageW")
private external fun kni_IsDialogMessageW(hDlg: NativePtr, lpMsg: NativePtr): Int

fun MapDialogRect(hDlg: HWND?, lpRect: LPRECT?): WINBOOL {
    val _hDlg = hDlg.rawValue
    val _lpRect = lpRect.rawValue
    val res = kni_MapDialogRect(_hDlg, _lpRect)
    return res
}

@SymbolName("win32_kni_MapDialogRect")
private external fun kni_MapDialogRect(hDlg: NativePtr, lpRect: NativePtr): Int

fun DlgDirListA(hDlg: HWND?, lpPathSpec: LPSTR?, nIDListBox: Int, nIDStaticPath: Int, uFileType: UINT): Int {
    val _hDlg = hDlg.rawValue
    val _lpPathSpec = lpPathSpec.rawValue
    val _nIDListBox = nIDListBox
    val _nIDStaticPath = nIDStaticPath
    val _uFileType = uFileType
    val res = kni_DlgDirListA(_hDlg, _lpPathSpec, _nIDListBox, _nIDStaticPath, _uFileType)
    return res
}

@SymbolName("win32_kni_DlgDirListA")
private external fun kni_DlgDirListA(hDlg: NativePtr, lpPathSpec: NativePtr, nIDListBox: Int, nIDStaticPath: Int, uFileType: Int): Int

fun DlgDirListW(hDlg: HWND?, lpPathSpec: LPWSTR?, nIDListBox: Int, nIDStaticPath: Int, uFileType: UINT): Int {
    val _hDlg = hDlg.rawValue
    val _lpPathSpec = lpPathSpec.rawValue
    val _nIDListBox = nIDListBox
    val _nIDStaticPath = nIDStaticPath
    val _uFileType = uFileType
    val res = kni_DlgDirListW(_hDlg, _lpPathSpec, _nIDListBox, _nIDStaticPath, _uFileType)
    return res
}

@SymbolName("win32_kni_DlgDirListW")
private external fun kni_DlgDirListW(hDlg: NativePtr, lpPathSpec: NativePtr, nIDListBox: Int, nIDStaticPath: Int, uFileType: Int): Int

fun DlgDirSelectExA(hwndDlg: HWND?, lpString: LPSTR?, chCount: Int, idListBox: Int): WINBOOL {
    val _hwndDlg = hwndDlg.rawValue
    val _lpString = lpString.rawValue
    val _chCount = chCount
    val _idListBox = idListBox
    val res = kni_DlgDirSelectExA(_hwndDlg, _lpString, _chCount, _idListBox)
    return res
}

@SymbolName("win32_kni_DlgDirSelectExA")
private external fun kni_DlgDirSelectExA(hwndDlg: NativePtr, lpString: NativePtr, chCount: Int, idListBox: Int): Int

fun DlgDirSelectExW(hwndDlg: HWND?, lpString: LPWSTR?, chCount: Int, idListBox: Int): WINBOOL {
    val _hwndDlg = hwndDlg.rawValue
    val _lpString = lpString.rawValue
    val _chCount = chCount
    val _idListBox = idListBox
    val res = kni_DlgDirSelectExW(_hwndDlg, _lpString, _chCount, _idListBox)
    return res
}

@SymbolName("win32_kni_DlgDirSelectExW")
private external fun kni_DlgDirSelectExW(hwndDlg: NativePtr, lpString: NativePtr, chCount: Int, idListBox: Int): Int

fun DlgDirListComboBoxA(hDlg: HWND?, lpPathSpec: LPSTR?, nIDComboBox: Int, nIDStaticPath: Int, uFiletype: UINT): Int {
    val _hDlg = hDlg.rawValue
    val _lpPathSpec = lpPathSpec.rawValue
    val _nIDComboBox = nIDComboBox
    val _nIDStaticPath = nIDStaticPath
    val _uFiletype = uFiletype
    val res = kni_DlgDirListComboBoxA(_hDlg, _lpPathSpec, _nIDComboBox, _nIDStaticPath, _uFiletype)
    return res
}

@SymbolName("win32_kni_DlgDirListComboBoxA")
private external fun kni_DlgDirListComboBoxA(hDlg: NativePtr, lpPathSpec: NativePtr, nIDComboBox: Int, nIDStaticPath: Int, uFiletype: Int): Int

fun DlgDirListComboBoxW(hDlg: HWND?, lpPathSpec: LPWSTR?, nIDComboBox: Int, nIDStaticPath: Int, uFiletype: UINT): Int {
    val _hDlg = hDlg.rawValue
    val _lpPathSpec = lpPathSpec.rawValue
    val _nIDComboBox = nIDComboBox
    val _nIDStaticPath = nIDStaticPath
    val _uFiletype = uFiletype
    val res = kni_DlgDirListComboBoxW(_hDlg, _lpPathSpec, _nIDComboBox, _nIDStaticPath, _uFiletype)
    return res
}

@SymbolName("win32_kni_DlgDirListComboBoxW")
private external fun kni_DlgDirListComboBoxW(hDlg: NativePtr, lpPathSpec: NativePtr, nIDComboBox: Int, nIDStaticPath: Int, uFiletype: Int): Int

fun DlgDirSelectComboBoxExA(hwndDlg: HWND?, lpString: LPSTR?, cchOut: Int, idComboBox: Int): WINBOOL {
    val _hwndDlg = hwndDlg.rawValue
    val _lpString = lpString.rawValue
    val _cchOut = cchOut
    val _idComboBox = idComboBox
    val res = kni_DlgDirSelectComboBoxExA(_hwndDlg, _lpString, _cchOut, _idComboBox)
    return res
}

@SymbolName("win32_kni_DlgDirSelectComboBoxExA")
private external fun kni_DlgDirSelectComboBoxExA(hwndDlg: NativePtr, lpString: NativePtr, cchOut: Int, idComboBox: Int): Int

fun DlgDirSelectComboBoxExW(hwndDlg: HWND?, lpString: LPWSTR?, cchOut: Int, idComboBox: Int): WINBOOL {
    val _hwndDlg = hwndDlg.rawValue
    val _lpString = lpString.rawValue
    val _cchOut = cchOut
    val _idComboBox = idComboBox
    val res = kni_DlgDirSelectComboBoxExW(_hwndDlg, _lpString, _cchOut, _idComboBox)
    return res
}

@SymbolName("win32_kni_DlgDirSelectComboBoxExW")
private external fun kni_DlgDirSelectComboBoxExW(hwndDlg: NativePtr, lpString: NativePtr, cchOut: Int, idComboBox: Int): Int

fun SetScrollInfo(hwnd: HWND?, nBar: Int, lpsi: LPCSCROLLINFO?, redraw: WINBOOL): Int {
    val _hwnd = hwnd.rawValue
    val _nBar = nBar
    val _lpsi = lpsi.rawValue
    val _redraw = redraw
    val res = kni_SetScrollInfo(_hwnd, _nBar, _lpsi, _redraw)
    return res
}

@SymbolName("win32_kni_SetScrollInfo")
private external fun kni_SetScrollInfo(hwnd: NativePtr, nBar: Int, lpsi: NativePtr, redraw: Int): Int

fun GetScrollInfo(hwnd: HWND?, nBar: Int, lpsi: LPSCROLLINFO?): WINBOOL {
    val _hwnd = hwnd.rawValue
    val _nBar = nBar
    val _lpsi = lpsi.rawValue
    val res = kni_GetScrollInfo(_hwnd, _nBar, _lpsi)
    return res
}

@SymbolName("win32_kni_GetScrollInfo")
private external fun kni_GetScrollInfo(hwnd: NativePtr, nBar: Int, lpsi: NativePtr): Int

fun DefFrameProcA(hWnd: HWND?, hWndMDIClient: HWND?, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hWnd = hWnd.rawValue
    val _hWndMDIClient = hWndMDIClient.rawValue
    val _uMsg = uMsg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_DefFrameProcA(_hWnd, _hWndMDIClient, _uMsg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_DefFrameProcA")
private external fun kni_DefFrameProcA(hWnd: NativePtr, hWndMDIClient: NativePtr, uMsg: Int, wParam: Long, lParam: Long): Long

fun DefFrameProcW(hWnd: HWND?, hWndMDIClient: HWND?, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hWnd = hWnd.rawValue
    val _hWndMDIClient = hWndMDIClient.rawValue
    val _uMsg = uMsg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_DefFrameProcW(_hWnd, _hWndMDIClient, _uMsg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_DefFrameProcW")
private external fun kni_DefFrameProcW(hWnd: NativePtr, hWndMDIClient: NativePtr, uMsg: Int, wParam: Long, lParam: Long): Long

fun DefMDIChildProcA(hWnd: HWND?, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hWnd = hWnd.rawValue
    val _uMsg = uMsg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_DefMDIChildProcA(_hWnd, _uMsg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_DefMDIChildProcA")
private external fun kni_DefMDIChildProcA(hWnd: NativePtr, uMsg: Int, wParam: Long, lParam: Long): Long

fun DefMDIChildProcW(hWnd: HWND?, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    val _hWnd = hWnd.rawValue
    val _uMsg = uMsg
    val _wParam = wParam
    val _lParam = lParam
    val res = kni_DefMDIChildProcW(_hWnd, _uMsg, _wParam, _lParam)
    return res
}

@SymbolName("win32_kni_DefMDIChildProcW")
private external fun kni_DefMDIChildProcW(hWnd: NativePtr, uMsg: Int, wParam: Long, lParam: Long): Long

fun TranslateMDISysAccel(hWndClient: HWND?, lpMsg: LPMSG?): WINBOOL {
    val _hWndClient = hWndClient.rawValue
    val _lpMsg = lpMsg.rawValue
    val res = kni_TranslateMDISysAccel(_hWndClient, _lpMsg)
    return res
}

@SymbolName("win32_kni_TranslateMDISysAccel")
private external fun kni_TranslateMDISysAccel(hWndClient: NativePtr, lpMsg: NativePtr): Int

fun ArrangeIconicWindows(hWnd: HWND?): UINT {
    val _hWnd = hWnd.rawValue
    val res = kni_ArrangeIconicWindows(_hWnd)
    return res
}

@SymbolName("win32_kni_ArrangeIconicWindows")
private external fun kni_ArrangeIconicWindows(hWnd: NativePtr): Int

fun CreateMDIWindowA(lpClassName: String?, lpWindowName: String?, dwStyle: DWORD, X: Int, Y: Int, nWidth: Int, nHeight: Int, hWndParent: HWND?, hInstance: HINSTANCE?, lParam: LPARAM): HWND? {
    return memScoped {
        val _lpClassName = lpClassName?.cstr?.getPointer(memScope).rawValue
        val _lpWindowName = lpWindowName?.cstr?.getPointer(memScope).rawValue
        val _dwStyle = dwStyle
        val _X = X
        val _Y = Y
        val _nWidth = nWidth
        val _nHeight = nHeight
        val _hWndParent = hWndParent.rawValue
        val _hInstance = hInstance.rawValue
        val _lParam = lParam
        val res = kni_CreateMDIWindowA(_lpClassName, _lpWindowName, _dwStyle, _X, _Y, _nWidth, _nHeight, _hWndParent, _hInstance, _lParam)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_CreateMDIWindowA")
private external fun kni_CreateMDIWindowA(lpClassName: NativePtr, lpWindowName: NativePtr, dwStyle: Int, X: Int, Y: Int, nWidth: Int, nHeight: Int, hWndParent: NativePtr, hInstance: NativePtr, lParam: Long): NativePtr

fun CreateMDIWindowW(lpClassName: String?, lpWindowName: String?, dwStyle: DWORD, X: Int, Y: Int, nWidth: Int, nHeight: Int, hWndParent: HWND?, hInstance: HINSTANCE?, lParam: LPARAM): HWND? {
    return memScoped {
        val _lpClassName = lpClassName?.wcstr?.getPointer(memScope).rawValue
        val _lpWindowName = lpWindowName?.wcstr?.getPointer(memScope).rawValue
        val _dwStyle = dwStyle
        val _X = X
        val _Y = Y
        val _nWidth = nWidth
        val _nHeight = nHeight
        val _hWndParent = hWndParent.rawValue
        val _hInstance = hInstance.rawValue
        val _lParam = lParam
        val res = kni_CreateMDIWindowW(_lpClassName, _lpWindowName, _dwStyle, _X, _Y, _nWidth, _nHeight, _hWndParent, _hInstance, _lParam)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_CreateMDIWindowW")
private external fun kni_CreateMDIWindowW(lpClassName: NativePtr, lpWindowName: NativePtr, dwStyle: Int, X: Int, Y: Int, nWidth: Int, nHeight: Int, hWndParent: NativePtr, hInstance: NativePtr, lParam: Long): NativePtr

fun TileWindows(hwndParent: HWND?, wHow: UINT, lpRect: CValuesRef<RECT>?, cKids: UINT, lpKids: CValuesRef<HWNDVar>?): WORD {
    return memScoped {
        val _hwndParent = hwndParent.rawValue
        val _wHow = wHow
        val _lpRect = lpRect?.getPointer(memScope).rawValue
        val _cKids = cKids
        val _lpKids = lpKids?.getPointer(memScope).rawValue
        val res = kni_TileWindows(_hwndParent, _wHow, _lpRect, _cKids, _lpKids)
        res
    }
}

@SymbolName("win32_kni_TileWindows")
private external fun kni_TileWindows(hwndParent: NativePtr, wHow: Int, lpRect: NativePtr, cKids: Int, lpKids: NativePtr): Short

fun CascadeWindows(hwndParent: HWND?, wHow: UINT, lpRect: CValuesRef<RECT>?, cKids: UINT, lpKids: CValuesRef<HWNDVar>?): WORD {
    return memScoped {
        val _hwndParent = hwndParent.rawValue
        val _wHow = wHow
        val _lpRect = lpRect?.getPointer(memScope).rawValue
        val _cKids = cKids
        val _lpKids = lpKids?.getPointer(memScope).rawValue
        val res = kni_CascadeWindows(_hwndParent, _wHow, _lpRect, _cKids, _lpKids)
        res
    }
}

@SymbolName("win32_kni_CascadeWindows")
private external fun kni_CascadeWindows(hwndParent: NativePtr, wHow: Int, lpRect: NativePtr, cKids: Int, lpKids: NativePtr): Short

fun WinHelpA(hWndMain: HWND?, lpszHelp: String?, uCommand: UINT, dwData: ULONG_PTR): WINBOOL {
    return memScoped {
        val _hWndMain = hWndMain.rawValue
        val _lpszHelp = lpszHelp?.cstr?.getPointer(memScope).rawValue
        val _uCommand = uCommand
        val _dwData = dwData
        val res = kni_WinHelpA(_hWndMain, _lpszHelp, _uCommand, _dwData)
        res
    }
}

@SymbolName("win32_kni_WinHelpA")
private external fun kni_WinHelpA(hWndMain: NativePtr, lpszHelp: NativePtr, uCommand: Int, dwData: Long): Int

fun WinHelpW(hWndMain: HWND?, lpszHelp: String?, uCommand: UINT, dwData: ULONG_PTR): WINBOOL {
    return memScoped {
        val _hWndMain = hWndMain.rawValue
        val _lpszHelp = lpszHelp?.wcstr?.getPointer(memScope).rawValue
        val _uCommand = uCommand
        val _dwData = dwData
        val res = kni_WinHelpW(_hWndMain, _lpszHelp, _uCommand, _dwData)
        res
    }
}

@SymbolName("win32_kni_WinHelpW")
private external fun kni_WinHelpW(hWndMain: NativePtr, lpszHelp: NativePtr, uCommand: Int, dwData: Long): Int

fun GetGuiResources(hProcess: HANDLE?, uiFlags: DWORD): DWORD {
    val _hProcess = hProcess.rawValue
    val _uiFlags = uiFlags
    val res = kni_GetGuiResources(_hProcess, _uiFlags)
    return res
}

@SymbolName("win32_kni_GetGuiResources")
private external fun kni_GetGuiResources(hProcess: NativePtr, uiFlags: Int): Int

fun ChangeDisplaySettingsA(lpDevMode: LPDEVMODEA?, dwFlags: DWORD): LONG {
    val _lpDevMode = lpDevMode.rawValue
    val _dwFlags = dwFlags
    val res = kni_ChangeDisplaySettingsA(_lpDevMode, _dwFlags)
    return res
}

@SymbolName("win32_kni_ChangeDisplaySettingsA")
private external fun kni_ChangeDisplaySettingsA(lpDevMode: NativePtr, dwFlags: Int): Int

fun ChangeDisplaySettingsW(lpDevMode: LPDEVMODEW?, dwFlags: DWORD): LONG {
    val _lpDevMode = lpDevMode.rawValue
    val _dwFlags = dwFlags
    val res = kni_ChangeDisplaySettingsW(_lpDevMode, _dwFlags)
    return res
}

@SymbolName("win32_kni_ChangeDisplaySettingsW")
private external fun kni_ChangeDisplaySettingsW(lpDevMode: NativePtr, dwFlags: Int): Int

fun ChangeDisplaySettingsExA(lpszDeviceName: String?, lpDevMode: LPDEVMODEA?, hwnd: HWND?, dwflags: DWORD, lParam: LPVOID?): LONG {
    return memScoped {
        val _lpszDeviceName = lpszDeviceName?.cstr?.getPointer(memScope).rawValue
        val _lpDevMode = lpDevMode.rawValue
        val _hwnd = hwnd.rawValue
        val _dwflags = dwflags
        val _lParam = lParam.rawValue
        val res = kni_ChangeDisplaySettingsExA(_lpszDeviceName, _lpDevMode, _hwnd, _dwflags, _lParam)
        res
    }
}

@SymbolName("win32_kni_ChangeDisplaySettingsExA")
private external fun kni_ChangeDisplaySettingsExA(lpszDeviceName: NativePtr, lpDevMode: NativePtr, hwnd: NativePtr, dwflags: Int, lParam: NativePtr): Int

fun ChangeDisplaySettingsExW(lpszDeviceName: String?, lpDevMode: LPDEVMODEW?, hwnd: HWND?, dwflags: DWORD, lParam: LPVOID?): LONG {
    return memScoped {
        val _lpszDeviceName = lpszDeviceName?.wcstr?.getPointer(memScope).rawValue
        val _lpDevMode = lpDevMode.rawValue
        val _hwnd = hwnd.rawValue
        val _dwflags = dwflags
        val _lParam = lParam.rawValue
        val res = kni_ChangeDisplaySettingsExW(_lpszDeviceName, _lpDevMode, _hwnd, _dwflags, _lParam)
        res
    }
}

@SymbolName("win32_kni_ChangeDisplaySettingsExW")
private external fun kni_ChangeDisplaySettingsExW(lpszDeviceName: NativePtr, lpDevMode: NativePtr, hwnd: NativePtr, dwflags: Int, lParam: NativePtr): Int

fun EnumDisplaySettingsA(lpszDeviceName: String?, iModeNum: DWORD, lpDevMode: LPDEVMODEA?): WINBOOL {
    return memScoped {
        val _lpszDeviceName = lpszDeviceName?.cstr?.getPointer(memScope).rawValue
        val _iModeNum = iModeNum
        val _lpDevMode = lpDevMode.rawValue
        val res = kni_EnumDisplaySettingsA(_lpszDeviceName, _iModeNum, _lpDevMode)
        res
    }
}

@SymbolName("win32_kni_EnumDisplaySettingsA")
private external fun kni_EnumDisplaySettingsA(lpszDeviceName: NativePtr, iModeNum: Int, lpDevMode: NativePtr): Int

fun EnumDisplaySettingsW(lpszDeviceName: String?, iModeNum: DWORD, lpDevMode: LPDEVMODEW?): WINBOOL {
    return memScoped {
        val _lpszDeviceName = lpszDeviceName?.wcstr?.getPointer(memScope).rawValue
        val _iModeNum = iModeNum
        val _lpDevMode = lpDevMode.rawValue
        val res = kni_EnumDisplaySettingsW(_lpszDeviceName, _iModeNum, _lpDevMode)
        res
    }
}

@SymbolName("win32_kni_EnumDisplaySettingsW")
private external fun kni_EnumDisplaySettingsW(lpszDeviceName: NativePtr, iModeNum: Int, lpDevMode: NativePtr): Int

fun EnumDisplaySettingsExA(lpszDeviceName: String?, iModeNum: DWORD, lpDevMode: LPDEVMODEA?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpszDeviceName = lpszDeviceName?.cstr?.getPointer(memScope).rawValue
        val _iModeNum = iModeNum
        val _lpDevMode = lpDevMode.rawValue
        val _dwFlags = dwFlags
        val res = kni_EnumDisplaySettingsExA(_lpszDeviceName, _iModeNum, _lpDevMode, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_EnumDisplaySettingsExA")
private external fun kni_EnumDisplaySettingsExA(lpszDeviceName: NativePtr, iModeNum: Int, lpDevMode: NativePtr, dwFlags: Int): Int

fun EnumDisplaySettingsExW(lpszDeviceName: String?, iModeNum: DWORD, lpDevMode: LPDEVMODEW?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpszDeviceName = lpszDeviceName?.wcstr?.getPointer(memScope).rawValue
        val _iModeNum = iModeNum
        val _lpDevMode = lpDevMode.rawValue
        val _dwFlags = dwFlags
        val res = kni_EnumDisplaySettingsExW(_lpszDeviceName, _iModeNum, _lpDevMode, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_EnumDisplaySettingsExW")
private external fun kni_EnumDisplaySettingsExW(lpszDeviceName: NativePtr, iModeNum: Int, lpDevMode: NativePtr, dwFlags: Int): Int

fun EnumDisplayDevicesA(lpDevice: String?, iDevNum: DWORD, lpDisplayDevice: PDISPLAY_DEVICEA?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpDevice = lpDevice?.cstr?.getPointer(memScope).rawValue
        val _iDevNum = iDevNum
        val _lpDisplayDevice = lpDisplayDevice.rawValue
        val _dwFlags = dwFlags
        val res = kni_EnumDisplayDevicesA(_lpDevice, _iDevNum, _lpDisplayDevice, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_EnumDisplayDevicesA")
private external fun kni_EnumDisplayDevicesA(lpDevice: NativePtr, iDevNum: Int, lpDisplayDevice: NativePtr, dwFlags: Int): Int

fun EnumDisplayDevicesW(lpDevice: String?, iDevNum: DWORD, lpDisplayDevice: PDISPLAY_DEVICEW?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _lpDevice = lpDevice?.wcstr?.getPointer(memScope).rawValue
        val _iDevNum = iDevNum
        val _lpDisplayDevice = lpDisplayDevice.rawValue
        val _dwFlags = dwFlags
        val res = kni_EnumDisplayDevicesW(_lpDevice, _iDevNum, _lpDisplayDevice, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_EnumDisplayDevicesW")
private external fun kni_EnumDisplayDevicesW(lpDevice: NativePtr, iDevNum: Int, lpDisplayDevice: NativePtr, dwFlags: Int): Int

fun SystemParametersInfoA(uiAction: UINT, uiParam: UINT, pvParam: PVOID?, fWinIni: UINT): WINBOOL {
    val _uiAction = uiAction
    val _uiParam = uiParam
    val _pvParam = pvParam.rawValue
    val _fWinIni = fWinIni
    val res = kni_SystemParametersInfoA(_uiAction, _uiParam, _pvParam, _fWinIni)
    return res
}

@SymbolName("win32_kni_SystemParametersInfoA")
private external fun kni_SystemParametersInfoA(uiAction: Int, uiParam: Int, pvParam: NativePtr, fWinIni: Int): Int

fun SystemParametersInfoW(uiAction: UINT, uiParam: UINT, pvParam: PVOID?, fWinIni: UINT): WINBOOL {
    val _uiAction = uiAction
    val _uiParam = uiParam
    val _pvParam = pvParam.rawValue
    val _fWinIni = fWinIni
    val res = kni_SystemParametersInfoW(_uiAction, _uiParam, _pvParam, _fWinIni)
    return res
}

@SymbolName("win32_kni_SystemParametersInfoW")
private external fun kni_SystemParametersInfoW(uiAction: Int, uiParam: Int, pvParam: NativePtr, fWinIni: Int): Int

fun SetDebugErrorLevel(dwLevel: DWORD): Unit {
    val _dwLevel = dwLevel
    val res = kni_SetDebugErrorLevel(_dwLevel)
    return res
}

@SymbolName("win32_kni_SetDebugErrorLevel")
private external fun kni_SetDebugErrorLevel(dwLevel: Int): Unit

fun SetLastErrorEx(dwErrCode: DWORD, dwType: DWORD): Unit {
    val _dwErrCode = dwErrCode
    val _dwType = dwType
    val res = kni_SetLastErrorEx(_dwErrCode, _dwType)
    return res
}

@SymbolName("win32_kni_SetLastErrorEx")
private external fun kni_SetLastErrorEx(dwErrCode: Int, dwType: Int): Unit

fun InternalGetWindowText(hWnd: HWND?, pString: LPWSTR?, cchMaxCount: Int): Int {
    val _hWnd = hWnd.rawValue
    val _pString = pString.rawValue
    val _cchMaxCount = cchMaxCount
    val res = kni_InternalGetWindowText(_hWnd, _pString, _cchMaxCount)
    return res
}

@SymbolName("win32_kni_InternalGetWindowText")
private external fun kni_InternalGetWindowText(hWnd: NativePtr, pString: NativePtr, cchMaxCount: Int): Int

fun CancelShutdown(): WINBOOL {
    val res = kni_CancelShutdown()
    return res
}

@SymbolName("win32_kni_CancelShutdown")
private external fun kni_CancelShutdown(): Int

fun MonitorFromPoint(pt: CValue<POINT>, dwFlags: DWORD): HMONITOR? {
    return memScoped {
        val _pt = pt.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_MonitorFromPoint(_pt, _dwFlags)
        interpretCPointer<HMONITOR__>(res)
    }
}

@SymbolName("win32_kni_MonitorFromPoint")
private external fun kni_MonitorFromPoint(pt: NativePtr, dwFlags: Int): NativePtr

fun MonitorFromRect(lprc: LPCRECT?, dwFlags: DWORD): HMONITOR? {
    val _lprc = lprc.rawValue
    val _dwFlags = dwFlags
    val res = kni_MonitorFromRect(_lprc, _dwFlags)
    return interpretCPointer<HMONITOR__>(res)
}

@SymbolName("win32_kni_MonitorFromRect")
private external fun kni_MonitorFromRect(lprc: NativePtr, dwFlags: Int): NativePtr

fun MonitorFromWindow(hwnd: HWND?, dwFlags: DWORD): HMONITOR? {
    val _hwnd = hwnd.rawValue
    val _dwFlags = dwFlags
    val res = kni_MonitorFromWindow(_hwnd, _dwFlags)
    return interpretCPointer<HMONITOR__>(res)
}

@SymbolName("win32_kni_MonitorFromWindow")
private external fun kni_MonitorFromWindow(hwnd: NativePtr, dwFlags: Int): NativePtr

fun GetMonitorInfoA(hMonitor: HMONITOR?, lpmi: LPMONITORINFO?): WINBOOL {
    val _hMonitor = hMonitor.rawValue
    val _lpmi = lpmi.rawValue
    val res = kni_GetMonitorInfoA(_hMonitor, _lpmi)
    return res
}

@SymbolName("win32_kni_GetMonitorInfoA")
private external fun kni_GetMonitorInfoA(hMonitor: NativePtr, lpmi: NativePtr): Int

fun GetMonitorInfoW(hMonitor: HMONITOR?, lpmi: LPMONITORINFO?): WINBOOL {
    val _hMonitor = hMonitor.rawValue
    val _lpmi = lpmi.rawValue
    val res = kni_GetMonitorInfoW(_hMonitor, _lpmi)
    return res
}

@SymbolName("win32_kni_GetMonitorInfoW")
private external fun kni_GetMonitorInfoW(hMonitor: NativePtr, lpmi: NativePtr): Int

fun EnumDisplayMonitors(hdc: HDC?, lprcClip: LPCRECT?, lpfnEnum: MONITORENUMPROC?, dwData: LPARAM): WINBOOL {
    val _hdc = hdc.rawValue
    val _lprcClip = lprcClip.rawValue
    val _lpfnEnum = lpfnEnum.rawValue
    val _dwData = dwData
    val res = kni_EnumDisplayMonitors(_hdc, _lprcClip, _lpfnEnum, _dwData)
    return res
}

@SymbolName("win32_kni_EnumDisplayMonitors")
private external fun kni_EnumDisplayMonitors(hdc: NativePtr, lprcClip: NativePtr, lpfnEnum: NativePtr, dwData: Long): Int

fun NotifyWinEvent(event: DWORD, hwnd: HWND?, idObject: LONG, idChild: LONG): Unit {
    val _event = event
    val _hwnd = hwnd.rawValue
    val _idObject = idObject
    val _idChild = idChild
    val res = kni_NotifyWinEvent(_event, _hwnd, _idObject, _idChild)
    return res
}

@SymbolName("win32_kni_NotifyWinEvent")
private external fun kni_NotifyWinEvent(event: Int, hwnd: NativePtr, idObject: Int, idChild: Int): Unit

fun SetWinEventHook(eventMin: DWORD, eventMax: DWORD, hmodWinEventProc: HMODULE?, pfnWinEventProc: WINEVENTPROC?, idProcess: DWORD, idThread: DWORD, dwFlags: DWORD): HWINEVENTHOOK? {
    val _eventMin = eventMin
    val _eventMax = eventMax
    val _hmodWinEventProc = hmodWinEventProc.rawValue
    val _pfnWinEventProc = pfnWinEventProc.rawValue
    val _idProcess = idProcess
    val _idThread = idThread
    val _dwFlags = dwFlags
    val res = kni_SetWinEventHook(_eventMin, _eventMax, _hmodWinEventProc, _pfnWinEventProc, _idProcess, _idThread, _dwFlags)
    return interpretCPointer<HWINEVENTHOOK__>(res)
}

@SymbolName("win32_kni_SetWinEventHook")
private external fun kni_SetWinEventHook(eventMin: Int, eventMax: Int, hmodWinEventProc: NativePtr, pfnWinEventProc: NativePtr, idProcess: Int, idThread: Int, dwFlags: Int): NativePtr

fun IsWinEventHookInstalled(event: DWORD): WINBOOL {
    val _event = event
    val res = kni_IsWinEventHookInstalled(_event)
    return res
}

@SymbolName("win32_kni_IsWinEventHookInstalled")
private external fun kni_IsWinEventHookInstalled(event: Int): Int

fun UnhookWinEvent(hWinEventHook: HWINEVENTHOOK?): WINBOOL {
    val _hWinEventHook = hWinEventHook.rawValue
    val res = kni_UnhookWinEvent(_hWinEventHook)
    return res
}

@SymbolName("win32_kni_UnhookWinEvent")
private external fun kni_UnhookWinEvent(hWinEventHook: NativePtr): Int

fun GetGUIThreadInfo(idThread: DWORD, pgui: PGUITHREADINFO?): WINBOOL {
    val _idThread = idThread
    val _pgui = pgui.rawValue
    val res = kni_GetGUIThreadInfo(_idThread, _pgui)
    return res
}

@SymbolName("win32_kni_GetGUIThreadInfo")
private external fun kni_GetGUIThreadInfo(idThread: Int, pgui: NativePtr): Int

fun BlockInput(fBlockIt: WINBOOL): WINBOOL {
    val _fBlockIt = fBlockIt
    val res = kni_BlockInput(_fBlockIt)
    return res
}

@SymbolName("win32_kni_BlockInput")
private external fun kni_BlockInput(fBlockIt: Int): Int

fun GetWindowModuleFileNameA(hwnd: HWND?, pszFileName: LPSTR?, cchFileNameMax: UINT): UINT {
    val _hwnd = hwnd.rawValue
    val _pszFileName = pszFileName.rawValue
    val _cchFileNameMax = cchFileNameMax
    val res = kni_GetWindowModuleFileNameA(_hwnd, _pszFileName, _cchFileNameMax)
    return res
}

@SymbolName("win32_kni_GetWindowModuleFileNameA")
private external fun kni_GetWindowModuleFileNameA(hwnd: NativePtr, pszFileName: NativePtr, cchFileNameMax: Int): Int

fun GetWindowModuleFileNameW(hwnd: HWND?, pszFileName: LPWSTR?, cchFileNameMax: UINT): UINT {
    val _hwnd = hwnd.rawValue
    val _pszFileName = pszFileName.rawValue
    val _cchFileNameMax = cchFileNameMax
    val res = kni_GetWindowModuleFileNameW(_hwnd, _pszFileName, _cchFileNameMax)
    return res
}

@SymbolName("win32_kni_GetWindowModuleFileNameW")
private external fun kni_GetWindowModuleFileNameW(hwnd: NativePtr, pszFileName: NativePtr, cchFileNameMax: Int): Int

fun GetCursorInfo(pci: PCURSORINFO?): WINBOOL {
    val _pci = pci.rawValue
    val res = kni_GetCursorInfo(_pci)
    return res
}

@SymbolName("win32_kni_GetCursorInfo")
private external fun kni_GetCursorInfo(pci: NativePtr): Int

fun GetWindowInfo(hwnd: HWND?, pwi: PWINDOWINFO?): WINBOOL {
    val _hwnd = hwnd.rawValue
    val _pwi = pwi.rawValue
    val res = kni_GetWindowInfo(_hwnd, _pwi)
    return res
}

@SymbolName("win32_kni_GetWindowInfo")
private external fun kni_GetWindowInfo(hwnd: NativePtr, pwi: NativePtr): Int

fun GetTitleBarInfo(hwnd: HWND?, pti: PTITLEBARINFO?): WINBOOL {
    val _hwnd = hwnd.rawValue
    val _pti = pti.rawValue
    val res = kni_GetTitleBarInfo(_hwnd, _pti)
    return res
}

@SymbolName("win32_kni_GetTitleBarInfo")
private external fun kni_GetTitleBarInfo(hwnd: NativePtr, pti: NativePtr): Int

fun GetMenuBarInfo(hwnd: HWND?, idObject: LONG, idItem: LONG, pmbi: PMENUBARINFO?): WINBOOL {
    val _hwnd = hwnd.rawValue
    val _idObject = idObject
    val _idItem = idItem
    val _pmbi = pmbi.rawValue
    val res = kni_GetMenuBarInfo(_hwnd, _idObject, _idItem, _pmbi)
    return res
}

@SymbolName("win32_kni_GetMenuBarInfo")
private external fun kni_GetMenuBarInfo(hwnd: NativePtr, idObject: Int, idItem: Int, pmbi: NativePtr): Int

fun GetScrollBarInfo(hwnd: HWND?, idObject: LONG, psbi: PSCROLLBARINFO?): WINBOOL {
    val _hwnd = hwnd.rawValue
    val _idObject = idObject
    val _psbi = psbi.rawValue
    val res = kni_GetScrollBarInfo(_hwnd, _idObject, _psbi)
    return res
}

@SymbolName("win32_kni_GetScrollBarInfo")
private external fun kni_GetScrollBarInfo(hwnd: NativePtr, idObject: Int, psbi: NativePtr): Int

fun GetComboBoxInfo(hwndCombo: HWND?, pcbi: PCOMBOBOXINFO?): WINBOOL {
    val _hwndCombo = hwndCombo.rawValue
    val _pcbi = pcbi.rawValue
    val res = kni_GetComboBoxInfo(_hwndCombo, _pcbi)
    return res
}

@SymbolName("win32_kni_GetComboBoxInfo")
private external fun kni_GetComboBoxInfo(hwndCombo: NativePtr, pcbi: NativePtr): Int

fun GetAncestor(hwnd: HWND?, gaFlags: UINT): HWND? {
    val _hwnd = hwnd.rawValue
    val _gaFlags = gaFlags
    val res = kni_GetAncestor(_hwnd, _gaFlags)
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetAncestor")
private external fun kni_GetAncestor(hwnd: NativePtr, gaFlags: Int): NativePtr

fun RealChildWindowFromPoint(hwndParent: HWND?, ptParentClientCoords: CValue<POINT>): HWND? {
    return memScoped {
        val _hwndParent = hwndParent.rawValue
        val _ptParentClientCoords = ptParentClientCoords.getPointer(memScope).rawValue
        val res = kni_RealChildWindowFromPoint(_hwndParent, _ptParentClientCoords)
        interpretCPointer<HWND__>(res)
    }
}

@SymbolName("win32_kni_RealChildWindowFromPoint")
private external fun kni_RealChildWindowFromPoint(hwndParent: NativePtr, ptParentClientCoords: NativePtr): NativePtr

fun RealGetWindowClassA(hwnd: HWND?, ptszClassName: LPSTR?, cchClassNameMax: UINT): UINT {
    val _hwnd = hwnd.rawValue
    val _ptszClassName = ptszClassName.rawValue
    val _cchClassNameMax = cchClassNameMax
    val res = kni_RealGetWindowClassA(_hwnd, _ptszClassName, _cchClassNameMax)
    return res
}

@SymbolName("win32_kni_RealGetWindowClassA")
private external fun kni_RealGetWindowClassA(hwnd: NativePtr, ptszClassName: NativePtr, cchClassNameMax: Int): Int

fun RealGetWindowClassW(hwnd: HWND?, ptszClassName: LPWSTR?, cchClassNameMax: UINT): UINT {
    val _hwnd = hwnd.rawValue
    val _ptszClassName = ptszClassName.rawValue
    val _cchClassNameMax = cchClassNameMax
    val res = kni_RealGetWindowClassW(_hwnd, _ptszClassName, _cchClassNameMax)
    return res
}

@SymbolName("win32_kni_RealGetWindowClassW")
private external fun kni_RealGetWindowClassW(hwnd: NativePtr, ptszClassName: NativePtr, cchClassNameMax: Int): Int

fun GetAltTabInfoA(hwnd: HWND?, iItem: Int, pati: PALTTABINFO?, pszItemText: LPSTR?, cchItemText: UINT): WINBOOL {
    val _hwnd = hwnd.rawValue
    val _iItem = iItem
    val _pati = pati.rawValue
    val _pszItemText = pszItemText.rawValue
    val _cchItemText = cchItemText
    val res = kni_GetAltTabInfoA(_hwnd, _iItem, _pati, _pszItemText, _cchItemText)
    return res
}

@SymbolName("win32_kni_GetAltTabInfoA")
private external fun kni_GetAltTabInfoA(hwnd: NativePtr, iItem: Int, pati: NativePtr, pszItemText: NativePtr, cchItemText: Int): Int

fun GetAltTabInfoW(hwnd: HWND?, iItem: Int, pati: PALTTABINFO?, pszItemText: LPWSTR?, cchItemText: UINT): WINBOOL {
    val _hwnd = hwnd.rawValue
    val _iItem = iItem
    val _pati = pati.rawValue
    val _pszItemText = pszItemText.rawValue
    val _cchItemText = cchItemText
    val res = kni_GetAltTabInfoW(_hwnd, _iItem, _pati, _pszItemText, _cchItemText)
    return res
}

@SymbolName("win32_kni_GetAltTabInfoW")
private external fun kni_GetAltTabInfoW(hwnd: NativePtr, iItem: Int, pati: NativePtr, pszItemText: NativePtr, cchItemText: Int): Int

fun GetListBoxInfo(hwnd: HWND?): DWORD {
    val _hwnd = hwnd.rawValue
    val res = kni_GetListBoxInfo(_hwnd)
    return res
}

@SymbolName("win32_kni_GetListBoxInfo")
private external fun kni_GetListBoxInfo(hwnd: NativePtr): Int

fun LockWorkStation(): WINBOOL {
    val res = kni_LockWorkStation()
    return res
}

@SymbolName("win32_kni_LockWorkStation")
private external fun kni_LockWorkStation(): Int

fun UserHandleGrantAccess(hUserHandle: HANDLE?, hJob: HANDLE?, bGrant: WINBOOL): WINBOOL {
    val _hUserHandle = hUserHandle.rawValue
    val _hJob = hJob.rawValue
    val _bGrant = bGrant
    val res = kni_UserHandleGrantAccess(_hUserHandle, _hJob, _bGrant)
    return res
}

@SymbolName("win32_kni_UserHandleGrantAccess")
private external fun kni_UserHandleGrantAccess(hUserHandle: NativePtr, hJob: NativePtr, bGrant: Int): Int

fun GetRawInputData(hRawInput: HRAWINPUT?, uiCommand: UINT, pData: LPVOID?, pcbSize: PUINT?, cbSizeHeader: UINT): UINT {
    val _hRawInput = hRawInput.rawValue
    val _uiCommand = uiCommand
    val _pData = pData.rawValue
    val _pcbSize = pcbSize.rawValue
    val _cbSizeHeader = cbSizeHeader
    val res = kni_GetRawInputData(_hRawInput, _uiCommand, _pData, _pcbSize, _cbSizeHeader)
    return res
}

@SymbolName("win32_kni_GetRawInputData")
private external fun kni_GetRawInputData(hRawInput: NativePtr, uiCommand: Int, pData: NativePtr, pcbSize: NativePtr, cbSizeHeader: Int): Int

fun GetRawInputDeviceInfoA(hDevice: HANDLE?, uiCommand: UINT, pData: LPVOID?, pcbSize: PUINT?): UINT {
    val _hDevice = hDevice.rawValue
    val _uiCommand = uiCommand
    val _pData = pData.rawValue
    val _pcbSize = pcbSize.rawValue
    val res = kni_GetRawInputDeviceInfoA(_hDevice, _uiCommand, _pData, _pcbSize)
    return res
}

@SymbolName("win32_kni_GetRawInputDeviceInfoA")
private external fun kni_GetRawInputDeviceInfoA(hDevice: NativePtr, uiCommand: Int, pData: NativePtr, pcbSize: NativePtr): Int

fun GetRawInputDeviceInfoW(hDevice: HANDLE?, uiCommand: UINT, pData: LPVOID?, pcbSize: PUINT?): UINT {
    val _hDevice = hDevice.rawValue
    val _uiCommand = uiCommand
    val _pData = pData.rawValue
    val _pcbSize = pcbSize.rawValue
    val res = kni_GetRawInputDeviceInfoW(_hDevice, _uiCommand, _pData, _pcbSize)
    return res
}

@SymbolName("win32_kni_GetRawInputDeviceInfoW")
private external fun kni_GetRawInputDeviceInfoW(hDevice: NativePtr, uiCommand: Int, pData: NativePtr, pcbSize: NativePtr): Int

fun GetRawInputBuffer(pData: PRAWINPUT?, pcbSize: PUINT?, cbSizeHeader: UINT): UINT {
    val _pData = pData.rawValue
    val _pcbSize = pcbSize.rawValue
    val _cbSizeHeader = cbSizeHeader
    val res = kni_GetRawInputBuffer(_pData, _pcbSize, _cbSizeHeader)
    return res
}

@SymbolName("win32_kni_GetRawInputBuffer")
private external fun kni_GetRawInputBuffer(pData: NativePtr, pcbSize: NativePtr, cbSizeHeader: Int): Int

fun RegisterRawInputDevices(pRawInputDevices: PCRAWINPUTDEVICE?, uiNumDevices: UINT, cbSize: UINT): WINBOOL {
    val _pRawInputDevices = pRawInputDevices.rawValue
    val _uiNumDevices = uiNumDevices
    val _cbSize = cbSize
    val res = kni_RegisterRawInputDevices(_pRawInputDevices, _uiNumDevices, _cbSize)
    return res
}

@SymbolName("win32_kni_RegisterRawInputDevices")
private external fun kni_RegisterRawInputDevices(pRawInputDevices: NativePtr, uiNumDevices: Int, cbSize: Int): Int

fun GetRegisteredRawInputDevices(pRawInputDevices: PRAWINPUTDEVICE?, puiNumDevices: PUINT?, cbSize: UINT): UINT {
    val _pRawInputDevices = pRawInputDevices.rawValue
    val _puiNumDevices = puiNumDevices.rawValue
    val _cbSize = cbSize
    val res = kni_GetRegisteredRawInputDevices(_pRawInputDevices, _puiNumDevices, _cbSize)
    return res
}

@SymbolName("win32_kni_GetRegisteredRawInputDevices")
private external fun kni_GetRegisteredRawInputDevices(pRawInputDevices: NativePtr, puiNumDevices: NativePtr, cbSize: Int): Int

fun GetRawInputDeviceList(pRawInputDeviceList: PRAWINPUTDEVICELIST?, puiNumDevices: PUINT?, cbSize: UINT): UINT {
    val _pRawInputDeviceList = pRawInputDeviceList.rawValue
    val _puiNumDevices = puiNumDevices.rawValue
    val _cbSize = cbSize
    val res = kni_GetRawInputDeviceList(_pRawInputDeviceList, _puiNumDevices, _cbSize)
    return res
}

@SymbolName("win32_kni_GetRawInputDeviceList")
private external fun kni_GetRawInputDeviceList(pRawInputDeviceList: NativePtr, puiNumDevices: NativePtr, cbSize: Int): Int

fun DefRawInputProc(paRawInput: CValuesRef<PRAWINPUTVar>?, nInput: INT, cbSizeHeader: UINT): LRESULT {
    return memScoped {
        val _paRawInput = paRawInput?.getPointer(memScope).rawValue
        val _nInput = nInput
        val _cbSizeHeader = cbSizeHeader
        val res = kni_DefRawInputProc(_paRawInput, _nInput, _cbSizeHeader)
        res
    }
}

@SymbolName("win32_kni_DefRawInputProc")
private external fun kni_DefRawInputProc(paRawInput: NativePtr, nInput: Int, cbSizeHeader: Int): Long

fun ShutdownBlockReasonCreate(hWnd: HWND?, pwszReason: String?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _pwszReason = pwszReason?.wcstr?.getPointer(memScope).rawValue
        val res = kni_ShutdownBlockReasonCreate(_hWnd, _pwszReason)
        res
    }
}

@SymbolName("win32_kni_ShutdownBlockReasonCreate")
private external fun kni_ShutdownBlockReasonCreate(hWnd: NativePtr, pwszReason: NativePtr): Int

fun ShutdownBlockReasonQuery(hWnd: HWND?, pwszBuff: LPWSTR?, pcchBuff: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _pwszBuff = pwszBuff.rawValue
        val _pcchBuff = pcchBuff?.getPointer(memScope).rawValue
        val res = kni_ShutdownBlockReasonQuery(_hWnd, _pwszBuff, _pcchBuff)
        res
    }
}

@SymbolName("win32_kni_ShutdownBlockReasonQuery")
private external fun kni_ShutdownBlockReasonQuery(hWnd: NativePtr, pwszBuff: NativePtr, pcchBuff: NativePtr): Int

fun ShutdownBlockReasonDestroy(hWnd: HWND?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val res = kni_ShutdownBlockReasonDestroy(_hWnd)
    return res
}

@SymbolName("win32_kni_ShutdownBlockReasonDestroy")
private external fun kni_ShutdownBlockReasonDestroy(hWnd: NativePtr): Int

fun IsValidCodePage(CodePage: UINT): WINBOOL {
    val _CodePage = CodePage
    val res = kni_IsValidCodePage(_CodePage)
    return res
}

@SymbolName("win32_kni_IsValidCodePage")
private external fun kni_IsValidCodePage(CodePage: Int): Int

fun GetACP(): UINT {
    val res = kni_GetACP()
    return res
}

@SymbolName("win32_kni_GetACP")
private external fun kni_GetACP(): Int

fun IsDBCSLeadByteEx(CodePage: UINT, TestChar: BYTE): WINBOOL {
    val _CodePage = CodePage
    val _TestChar = TestChar
    val res = kni_IsDBCSLeadByteEx(_CodePage, _TestChar)
    return res
}

@SymbolName("win32_kni_IsDBCSLeadByteEx")
private external fun kni_IsDBCSLeadByteEx(CodePage: Int, TestChar: Byte): Int

fun GetOEMCP(): UINT {
    val res = kni_GetOEMCP()
    return res
}

@SymbolName("win32_kni_GetOEMCP")
private external fun kni_GetOEMCP(): Int

fun CompareStringA(Locale: LCID, dwCmpFlags: DWORD, lpString1: String?, cchCount1: Int, lpString2: String?, cchCount2: Int): Int {
    return memScoped {
        val _Locale = Locale
        val _dwCmpFlags = dwCmpFlags
        val _lpString1 = lpString1?.cstr?.getPointer(memScope).rawValue
        val _cchCount1 = cchCount1
        val _lpString2 = lpString2?.cstr?.getPointer(memScope).rawValue
        val _cchCount2 = cchCount2
        val res = kni_CompareStringA(_Locale, _dwCmpFlags, _lpString1, _cchCount1, _lpString2, _cchCount2)
        res
    }
}

@SymbolName("win32_kni_CompareStringA")
private external fun kni_CompareStringA(Locale: Int, dwCmpFlags: Int, lpString1: NativePtr, cchCount1: Int, lpString2: NativePtr, cchCount2: Int): Int

fun LCMapStringW(Locale: LCID, dwMapFlags: DWORD, lpSrcStr: String?, cchSrc: Int, lpDestStr: LPWSTR?, cchDest: Int): Int {
    return memScoped {
        val _Locale = Locale
        val _dwMapFlags = dwMapFlags
        val _lpSrcStr = lpSrcStr?.wcstr?.getPointer(memScope).rawValue
        val _cchSrc = cchSrc
        val _lpDestStr = lpDestStr.rawValue
        val _cchDest = cchDest
        val res = kni_LCMapStringW(_Locale, _dwMapFlags, _lpSrcStr, _cchSrc, _lpDestStr, _cchDest)
        res
    }
}

@SymbolName("win32_kni_LCMapStringW")
private external fun kni_LCMapStringW(Locale: Int, dwMapFlags: Int, lpSrcStr: NativePtr, cchSrc: Int, lpDestStr: NativePtr, cchDest: Int): Int

fun LCMapStringA(Locale: LCID, dwMapFlags: DWORD, lpSrcStr: String?, cchSrc: Int, lpDestStr: LPSTR?, cchDest: Int): Int {
    return memScoped {
        val _Locale = Locale
        val _dwMapFlags = dwMapFlags
        val _lpSrcStr = lpSrcStr?.cstr?.getPointer(memScope).rawValue
        val _cchSrc = cchSrc
        val _lpDestStr = lpDestStr.rawValue
        val _cchDest = cchDest
        val res = kni_LCMapStringA(_Locale, _dwMapFlags, _lpSrcStr, _cchSrc, _lpDestStr, _cchDest)
        res
    }
}

@SymbolName("win32_kni_LCMapStringA")
private external fun kni_LCMapStringA(Locale: Int, dwMapFlags: Int, lpSrcStr: NativePtr, cchSrc: Int, lpDestStr: NativePtr, cchDest: Int): Int

fun GetLocaleInfoW(Locale: LCID, LCType: LCTYPE, lpLCData: LPWSTR?, cchData: Int): Int {
    val _Locale = Locale
    val _LCType = LCType
    val _lpLCData = lpLCData.rawValue
    val _cchData = cchData
    val res = kni_GetLocaleInfoW(_Locale, _LCType, _lpLCData, _cchData)
    return res
}

@SymbolName("win32_kni_GetLocaleInfoW")
private external fun kni_GetLocaleInfoW(Locale: Int, LCType: Int, lpLCData: NativePtr, cchData: Int): Int

fun GetLocaleInfoA(Locale: LCID, LCType: LCTYPE, lpLCData: LPSTR?, cchData: Int): Int {
    val _Locale = Locale
    val _LCType = LCType
    val _lpLCData = lpLCData.rawValue
    val _cchData = cchData
    val res = kni_GetLocaleInfoA(_Locale, _LCType, _lpLCData, _cchData)
    return res
}

@SymbolName("win32_kni_GetLocaleInfoA")
private external fun kni_GetLocaleInfoA(Locale: Int, LCType: Int, lpLCData: NativePtr, cchData: Int): Int

fun IsDBCSLeadByte(TestChar: BYTE): WINBOOL {
    val _TestChar = TestChar
    val res = kni_IsDBCSLeadByte(_TestChar)
    return res
}

@SymbolName("win32_kni_IsDBCSLeadByte")
private external fun kni_IsDBCSLeadByte(TestChar: Byte): Int

fun GetNumberFormatA(Locale: LCID, dwFlags: DWORD, lpValue: String?, lpFormat: CValuesRef<NUMBERFMTA>?, lpNumberStr: LPSTR?, cchNumber: Int): Int {
    return memScoped {
        val _Locale = Locale
        val _dwFlags = dwFlags
        val _lpValue = lpValue?.cstr?.getPointer(memScope).rawValue
        val _lpFormat = lpFormat?.getPointer(memScope).rawValue
        val _lpNumberStr = lpNumberStr.rawValue
        val _cchNumber = cchNumber
        val res = kni_GetNumberFormatA(_Locale, _dwFlags, _lpValue, _lpFormat, _lpNumberStr, _cchNumber)
        res
    }
}

@SymbolName("win32_kni_GetNumberFormatA")
private external fun kni_GetNumberFormatA(Locale: Int, dwFlags: Int, lpValue: NativePtr, lpFormat: NativePtr, lpNumberStr: NativePtr, cchNumber: Int): Int

fun GetNumberFormatW(Locale: LCID, dwFlags: DWORD, lpValue: String?, lpFormat: CValuesRef<NUMBERFMTW>?, lpNumberStr: LPWSTR?, cchNumber: Int): Int {
    return memScoped {
        val _Locale = Locale
        val _dwFlags = dwFlags
        val _lpValue = lpValue?.wcstr?.getPointer(memScope).rawValue
        val _lpFormat = lpFormat?.getPointer(memScope).rawValue
        val _lpNumberStr = lpNumberStr.rawValue
        val _cchNumber = cchNumber
        val res = kni_GetNumberFormatW(_Locale, _dwFlags, _lpValue, _lpFormat, _lpNumberStr, _cchNumber)
        res
    }
}

@SymbolName("win32_kni_GetNumberFormatW")
private external fun kni_GetNumberFormatW(Locale: Int, dwFlags: Int, lpValue: NativePtr, lpFormat: NativePtr, lpNumberStr: NativePtr, cchNumber: Int): Int

fun GetCurrencyFormatA(Locale: LCID, dwFlags: DWORD, lpValue: String?, lpFormat: CValuesRef<CURRENCYFMTA>?, lpCurrencyStr: LPSTR?, cchCurrency: Int): Int {
    return memScoped {
        val _Locale = Locale
        val _dwFlags = dwFlags
        val _lpValue = lpValue?.cstr?.getPointer(memScope).rawValue
        val _lpFormat = lpFormat?.getPointer(memScope).rawValue
        val _lpCurrencyStr = lpCurrencyStr.rawValue
        val _cchCurrency = cchCurrency
        val res = kni_GetCurrencyFormatA(_Locale, _dwFlags, _lpValue, _lpFormat, _lpCurrencyStr, _cchCurrency)
        res
    }
}

@SymbolName("win32_kni_GetCurrencyFormatA")
private external fun kni_GetCurrencyFormatA(Locale: Int, dwFlags: Int, lpValue: NativePtr, lpFormat: NativePtr, lpCurrencyStr: NativePtr, cchCurrency: Int): Int

fun GetCurrencyFormatW(Locale: LCID, dwFlags: DWORD, lpValue: String?, lpFormat: CValuesRef<CURRENCYFMTW>?, lpCurrencyStr: LPWSTR?, cchCurrency: Int): Int {
    return memScoped {
        val _Locale = Locale
        val _dwFlags = dwFlags
        val _lpValue = lpValue?.wcstr?.getPointer(memScope).rawValue
        val _lpFormat = lpFormat?.getPointer(memScope).rawValue
        val _lpCurrencyStr = lpCurrencyStr.rawValue
        val _cchCurrency = cchCurrency
        val res = kni_GetCurrencyFormatW(_Locale, _dwFlags, _lpValue, _lpFormat, _lpCurrencyStr, _cchCurrency)
        res
    }
}

@SymbolName("win32_kni_GetCurrencyFormatW")
private external fun kni_GetCurrencyFormatW(Locale: Int, dwFlags: Int, lpValue: NativePtr, lpFormat: NativePtr, lpCurrencyStr: NativePtr, cchCurrency: Int): Int

fun EnumCalendarInfoA(lpCalInfoEnumProc: CALINFO_ENUMPROCA?, Locale: LCID, Calendar: CALID, CalType: CALTYPE): WINBOOL {
    val _lpCalInfoEnumProc = lpCalInfoEnumProc.rawValue
    val _Locale = Locale
    val _Calendar = Calendar
    val _CalType = CalType
    val res = kni_EnumCalendarInfoA(_lpCalInfoEnumProc, _Locale, _Calendar, _CalType)
    return res
}

@SymbolName("win32_kni_EnumCalendarInfoA")
private external fun kni_EnumCalendarInfoA(lpCalInfoEnumProc: NativePtr, Locale: Int, Calendar: Int, CalType: Int): Int

fun EnumCalendarInfoW(lpCalInfoEnumProc: CALINFO_ENUMPROCW?, Locale: LCID, Calendar: CALID, CalType: CALTYPE): WINBOOL {
    val _lpCalInfoEnumProc = lpCalInfoEnumProc.rawValue
    val _Locale = Locale
    val _Calendar = Calendar
    val _CalType = CalType
    val res = kni_EnumCalendarInfoW(_lpCalInfoEnumProc, _Locale, _Calendar, _CalType)
    return res
}

@SymbolName("win32_kni_EnumCalendarInfoW")
private external fun kni_EnumCalendarInfoW(lpCalInfoEnumProc: NativePtr, Locale: Int, Calendar: Int, CalType: Int): Int

fun EnumCalendarInfoExA(lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXA?, Locale: LCID, Calendar: CALID, CalType: CALTYPE): WINBOOL {
    val _lpCalInfoEnumProcEx = lpCalInfoEnumProcEx.rawValue
    val _Locale = Locale
    val _Calendar = Calendar
    val _CalType = CalType
    val res = kni_EnumCalendarInfoExA(_lpCalInfoEnumProcEx, _Locale, _Calendar, _CalType)
    return res
}

@SymbolName("win32_kni_EnumCalendarInfoExA")
private external fun kni_EnumCalendarInfoExA(lpCalInfoEnumProcEx: NativePtr, Locale: Int, Calendar: Int, CalType: Int): Int

fun EnumCalendarInfoExW(lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXW?, Locale: LCID, Calendar: CALID, CalType: CALTYPE): WINBOOL {
    val _lpCalInfoEnumProcEx = lpCalInfoEnumProcEx.rawValue
    val _Locale = Locale
    val _Calendar = Calendar
    val _CalType = CalType
    val res = kni_EnumCalendarInfoExW(_lpCalInfoEnumProcEx, _Locale, _Calendar, _CalType)
    return res
}

@SymbolName("win32_kni_EnumCalendarInfoExW")
private external fun kni_EnumCalendarInfoExW(lpCalInfoEnumProcEx: NativePtr, Locale: Int, Calendar: Int, CalType: Int): Int

fun EnumTimeFormatsA(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCA?, Locale: LCID, dwFlags: DWORD): WINBOOL {
    val _lpTimeFmtEnumProc = lpTimeFmtEnumProc.rawValue
    val _Locale = Locale
    val _dwFlags = dwFlags
    val res = kni_EnumTimeFormatsA(_lpTimeFmtEnumProc, _Locale, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumTimeFormatsA")
private external fun kni_EnumTimeFormatsA(lpTimeFmtEnumProc: NativePtr, Locale: Int, dwFlags: Int): Int

fun EnumTimeFormatsW(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCW?, Locale: LCID, dwFlags: DWORD): WINBOOL {
    val _lpTimeFmtEnumProc = lpTimeFmtEnumProc.rawValue
    val _Locale = Locale
    val _dwFlags = dwFlags
    val res = kni_EnumTimeFormatsW(_lpTimeFmtEnumProc, _Locale, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumTimeFormatsW")
private external fun kni_EnumTimeFormatsW(lpTimeFmtEnumProc: NativePtr, Locale: Int, dwFlags: Int): Int

fun EnumDateFormatsA(lpDateFmtEnumProc: DATEFMT_ENUMPROCA?, Locale: LCID, dwFlags: DWORD): WINBOOL {
    val _lpDateFmtEnumProc = lpDateFmtEnumProc.rawValue
    val _Locale = Locale
    val _dwFlags = dwFlags
    val res = kni_EnumDateFormatsA(_lpDateFmtEnumProc, _Locale, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumDateFormatsA")
private external fun kni_EnumDateFormatsA(lpDateFmtEnumProc: NativePtr, Locale: Int, dwFlags: Int): Int

fun EnumDateFormatsW(lpDateFmtEnumProc: DATEFMT_ENUMPROCW?, Locale: LCID, dwFlags: DWORD): WINBOOL {
    val _lpDateFmtEnumProc = lpDateFmtEnumProc.rawValue
    val _Locale = Locale
    val _dwFlags = dwFlags
    val res = kni_EnumDateFormatsW(_lpDateFmtEnumProc, _Locale, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumDateFormatsW")
private external fun kni_EnumDateFormatsW(lpDateFmtEnumProc: NativePtr, Locale: Int, dwFlags: Int): Int

fun EnumDateFormatsExA(lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXA?, Locale: LCID, dwFlags: DWORD): WINBOOL {
    val _lpDateFmtEnumProcEx = lpDateFmtEnumProcEx.rawValue
    val _Locale = Locale
    val _dwFlags = dwFlags
    val res = kni_EnumDateFormatsExA(_lpDateFmtEnumProcEx, _Locale, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumDateFormatsExA")
private external fun kni_EnumDateFormatsExA(lpDateFmtEnumProcEx: NativePtr, Locale: Int, dwFlags: Int): Int

fun EnumDateFormatsExW(lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXW?, Locale: LCID, dwFlags: DWORD): WINBOOL {
    val _lpDateFmtEnumProcEx = lpDateFmtEnumProcEx.rawValue
    val _Locale = Locale
    val _dwFlags = dwFlags
    val res = kni_EnumDateFormatsExW(_lpDateFmtEnumProcEx, _Locale, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumDateFormatsExW")
private external fun kni_EnumDateFormatsExW(lpDateFmtEnumProcEx: NativePtr, Locale: Int, dwFlags: Int): Int

fun IsValidLanguageGroup(LanguageGroup: LGRPID, dwFlags: DWORD): WINBOOL {
    val _LanguageGroup = LanguageGroup
    val _dwFlags = dwFlags
    val res = kni_IsValidLanguageGroup(_LanguageGroup, _dwFlags)
    return res
}

@SymbolName("win32_kni_IsValidLanguageGroup")
private external fun kni_IsValidLanguageGroup(LanguageGroup: Int, dwFlags: Int): Int

fun GetNLSVersion(Function: NLS_FUNCTION, Locale: LCID, lpVersionInformation: LPNLSVERSIONINFO?): WINBOOL {
    val _Function = Function
    val _Locale = Locale
    val _lpVersionInformation = lpVersionInformation.rawValue
    val res = kni_GetNLSVersion(_Function, _Locale, _lpVersionInformation)
    return res
}

@SymbolName("win32_kni_GetNLSVersion")
private external fun kni_GetNLSVersion(Function: Int, Locale: Int, lpVersionInformation: NativePtr): Int

fun IsNLSDefinedString(Function: NLS_FUNCTION, dwFlags: DWORD, lpVersionInformation: LPNLSVERSIONINFO?, lpString: String?, cchStr: INT): WINBOOL {
    return memScoped {
        val _Function = Function
        val _dwFlags = dwFlags
        val _lpVersionInformation = lpVersionInformation.rawValue
        val _lpString = lpString?.wcstr?.getPointer(memScope).rawValue
        val _cchStr = cchStr
        val res = kni_IsNLSDefinedString(_Function, _dwFlags, _lpVersionInformation, _lpString, _cchStr)
        res
    }
}

@SymbolName("win32_kni_IsNLSDefinedString")
private external fun kni_IsNLSDefinedString(Function: Int, dwFlags: Int, lpVersionInformation: NativePtr, lpString: NativePtr, cchStr: Int): Int

fun IsValidLocale(Locale: LCID, dwFlags: DWORD): WINBOOL {
    val _Locale = Locale
    val _dwFlags = dwFlags
    val res = kni_IsValidLocale(_Locale, _dwFlags)
    return res
}

@SymbolName("win32_kni_IsValidLocale")
private external fun kni_IsValidLocale(Locale: Int, dwFlags: Int): Int

fun SetLocaleInfoA(Locale: LCID, LCType: LCTYPE, lpLCData: String?): WINBOOL {
    return memScoped {
        val _Locale = Locale
        val _LCType = LCType
        val _lpLCData = lpLCData?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetLocaleInfoA(_Locale, _LCType, _lpLCData)
        res
    }
}

@SymbolName("win32_kni_SetLocaleInfoA")
private external fun kni_SetLocaleInfoA(Locale: Int, LCType: Int, lpLCData: NativePtr): Int

fun SetLocaleInfoW(Locale: LCID, LCType: LCTYPE, lpLCData: String?): WINBOOL {
    return memScoped {
        val _Locale = Locale
        val _LCType = LCType
        val _lpLCData = lpLCData?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetLocaleInfoW(_Locale, _LCType, _lpLCData)
        res
    }
}

@SymbolName("win32_kni_SetLocaleInfoW")
private external fun kni_SetLocaleInfoW(Locale: Int, LCType: Int, lpLCData: NativePtr): Int

fun GetCalendarInfoA(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPSTR?, cchData: Int, lpValue: LPDWORD?): Int {
    val _Locale = Locale
    val _Calendar = Calendar
    val _CalType = CalType
    val _lpCalData = lpCalData.rawValue
    val _cchData = cchData
    val _lpValue = lpValue.rawValue
    val res = kni_GetCalendarInfoA(_Locale, _Calendar, _CalType, _lpCalData, _cchData, _lpValue)
    return res
}

@SymbolName("win32_kni_GetCalendarInfoA")
private external fun kni_GetCalendarInfoA(Locale: Int, Calendar: Int, CalType: Int, lpCalData: NativePtr, cchData: Int, lpValue: NativePtr): Int

fun GetCalendarInfoW(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPWSTR?, cchData: Int, lpValue: LPDWORD?): Int {
    val _Locale = Locale
    val _Calendar = Calendar
    val _CalType = CalType
    val _lpCalData = lpCalData.rawValue
    val _cchData = cchData
    val _lpValue = lpValue.rawValue
    val res = kni_GetCalendarInfoW(_Locale, _Calendar, _CalType, _lpCalData, _cchData, _lpValue)
    return res
}

@SymbolName("win32_kni_GetCalendarInfoW")
private external fun kni_GetCalendarInfoW(Locale: Int, Calendar: Int, CalType: Int, lpCalData: NativePtr, cchData: Int, lpValue: NativePtr): Int

fun SetCalendarInfoA(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: String?): WINBOOL {
    return memScoped {
        val _Locale = Locale
        val _Calendar = Calendar
        val _CalType = CalType
        val _lpCalData = lpCalData?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetCalendarInfoA(_Locale, _Calendar, _CalType, _lpCalData)
        res
    }
}

@SymbolName("win32_kni_SetCalendarInfoA")
private external fun kni_SetCalendarInfoA(Locale: Int, Calendar: Int, CalType: Int, lpCalData: NativePtr): Int

fun SetCalendarInfoW(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: String?): WINBOOL {
    return memScoped {
        val _Locale = Locale
        val _Calendar = Calendar
        val _CalType = CalType
        val _lpCalData = lpCalData?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetCalendarInfoW(_Locale, _Calendar, _CalType, _lpCalData)
        res
    }
}

@SymbolName("win32_kni_SetCalendarInfoW")
private external fun kni_SetCalendarInfoW(Locale: Int, Calendar: Int, CalType: Int, lpCalData: NativePtr): Int

fun GetGeoInfoA(Location: GEOID, GeoType: GEOTYPE, lpGeoData: LPSTR?, cchData: Int, LangId: LANGID): Int {
    val _Location = Location
    val _GeoType = GeoType
    val _lpGeoData = lpGeoData.rawValue
    val _cchData = cchData
    val _LangId = LangId
    val res = kni_GetGeoInfoA(_Location, _GeoType, _lpGeoData, _cchData, _LangId)
    return res
}

@SymbolName("win32_kni_GetGeoInfoA")
private external fun kni_GetGeoInfoA(Location: Int, GeoType: Int, lpGeoData: NativePtr, cchData: Int, LangId: Short): Int

fun GetGeoInfoW(Location: GEOID, GeoType: GEOTYPE, lpGeoData: LPWSTR?, cchData: Int, LangId: LANGID): Int {
    val _Location = Location
    val _GeoType = GeoType
    val _lpGeoData = lpGeoData.rawValue
    val _cchData = cchData
    val _LangId = LangId
    val res = kni_GetGeoInfoW(_Location, _GeoType, _lpGeoData, _cchData, _LangId)
    return res
}

@SymbolName("win32_kni_GetGeoInfoW")
private external fun kni_GetGeoInfoW(Location: Int, GeoType: Int, lpGeoData: NativePtr, cchData: Int, LangId: Short): Int

fun EnumSystemGeoID(GeoClass: GEOCLASS, ParentGeoId: GEOID, lpGeoEnumProc: GEO_ENUMPROC?): WINBOOL {
    val _GeoClass = GeoClass
    val _ParentGeoId = ParentGeoId
    val _lpGeoEnumProc = lpGeoEnumProc.rawValue
    val res = kni_EnumSystemGeoID(_GeoClass, _ParentGeoId, _lpGeoEnumProc)
    return res
}

@SymbolName("win32_kni_EnumSystemGeoID")
private external fun kni_EnumSystemGeoID(GeoClass: Int, ParentGeoId: Int, lpGeoEnumProc: NativePtr): Int

fun GetUserGeoID(GeoClass: GEOCLASS): GEOID {
    val _GeoClass = GeoClass
    val res = kni_GetUserGeoID(_GeoClass)
    return res
}

@SymbolName("win32_kni_GetUserGeoID")
private external fun kni_GetUserGeoID(GeoClass: Int): Int

fun GetCPInfo(CodePage: UINT, lpCPInfo: LPCPINFO?): WINBOOL {
    val _CodePage = CodePage
    val _lpCPInfo = lpCPInfo.rawValue
    val res = kni_GetCPInfo(_CodePage, _lpCPInfo)
    return res
}

@SymbolName("win32_kni_GetCPInfo")
private external fun kni_GetCPInfo(CodePage: Int, lpCPInfo: NativePtr): Int

fun GetCPInfoExA(CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXA?): WINBOOL {
    val _CodePage = CodePage
    val _dwFlags = dwFlags
    val _lpCPInfoEx = lpCPInfoEx.rawValue
    val res = kni_GetCPInfoExA(_CodePage, _dwFlags, _lpCPInfoEx)
    return res
}

@SymbolName("win32_kni_GetCPInfoExA")
private external fun kni_GetCPInfoExA(CodePage: Int, dwFlags: Int, lpCPInfoEx: NativePtr): Int

fun GetCPInfoExW(CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXW?): WINBOOL {
    val _CodePage = CodePage
    val _dwFlags = dwFlags
    val _lpCPInfoEx = lpCPInfoEx.rawValue
    val res = kni_GetCPInfoExW(_CodePage, _dwFlags, _lpCPInfoEx)
    return res
}

@SymbolName("win32_kni_GetCPInfoExW")
private external fun kni_GetCPInfoExW(CodePage: Int, dwFlags: Int, lpCPInfoEx: NativePtr): Int

fun SetUserGeoID(GeoId: GEOID): WINBOOL {
    val _GeoId = GeoId
    val res = kni_SetUserGeoID(_GeoId)
    return res
}

@SymbolName("win32_kni_SetUserGeoID")
private external fun kni_SetUserGeoID(GeoId: Int): Int

fun ConvertDefaultLocale(Locale: LCID): LCID {
    val _Locale = Locale
    val res = kni_ConvertDefaultLocale(_Locale)
    return res
}

@SymbolName("win32_kni_ConvertDefaultLocale")
private external fun kni_ConvertDefaultLocale(Locale: Int): Int

fun GetThreadLocale(): LCID {
    val res = kni_GetThreadLocale()
    return res
}

@SymbolName("win32_kni_GetThreadLocale")
private external fun kni_GetThreadLocale(): Int

fun SetThreadLocale(Locale: LCID): WINBOOL {
    val _Locale = Locale
    val res = kni_SetThreadLocale(_Locale)
    return res
}

@SymbolName("win32_kni_SetThreadLocale")
private external fun kni_SetThreadLocale(Locale: Int): Int

fun GetSystemDefaultUILanguage(): LANGID {
    val res = kni_GetSystemDefaultUILanguage()
    return res
}

@SymbolName("win32_kni_GetSystemDefaultUILanguage")
private external fun kni_GetSystemDefaultUILanguage(): Short

fun GetUserDefaultUILanguage(): LANGID {
    val res = kni_GetUserDefaultUILanguage()
    return res
}

@SymbolName("win32_kni_GetUserDefaultUILanguage")
private external fun kni_GetUserDefaultUILanguage(): Short

fun GetSystemDefaultLangID(): LANGID {
    val res = kni_GetSystemDefaultLangID()
    return res
}

@SymbolName("win32_kni_GetSystemDefaultLangID")
private external fun kni_GetSystemDefaultLangID(): Short

fun GetUserDefaultLangID(): LANGID {
    val res = kni_GetUserDefaultLangID()
    return res
}

@SymbolName("win32_kni_GetUserDefaultLangID")
private external fun kni_GetUserDefaultLangID(): Short

fun GetSystemDefaultLCID(): LCID {
    val res = kni_GetSystemDefaultLCID()
    return res
}

@SymbolName("win32_kni_GetSystemDefaultLCID")
private external fun kni_GetSystemDefaultLCID(): Int

fun GetUserDefaultLCID(): LCID {
    val res = kni_GetUserDefaultLCID()
    return res
}

@SymbolName("win32_kni_GetUserDefaultLCID")
private external fun kni_GetUserDefaultLCID(): Int

fun SetThreadUILanguage(LangId: LANGID): LANGID {
    val _LangId = LangId
    val res = kni_SetThreadUILanguage(_LangId)
    return res
}

@SymbolName("win32_kni_SetThreadUILanguage")
private external fun kni_SetThreadUILanguage(LangId: Short): Short

fun GetStringTypeExA(Locale: LCID, dwInfoType: DWORD, lpSrcStr: String?, cchSrc: Int, lpCharType: LPWORD?): WINBOOL {
    return memScoped {
        val _Locale = Locale
        val _dwInfoType = dwInfoType
        val _lpSrcStr = lpSrcStr?.cstr?.getPointer(memScope).rawValue
        val _cchSrc = cchSrc
        val _lpCharType = lpCharType.rawValue
        val res = kni_GetStringTypeExA(_Locale, _dwInfoType, _lpSrcStr, _cchSrc, _lpCharType)
        res
    }
}

@SymbolName("win32_kni_GetStringTypeExA")
private external fun kni_GetStringTypeExA(Locale: Int, dwInfoType: Int, lpSrcStr: NativePtr, cchSrc: Int, lpCharType: NativePtr): Int

fun GetStringTypeA(Locale: LCID, dwInfoType: DWORD, lpSrcStr: String?, cchSrc: Int, lpCharType: LPWORD?): WINBOOL {
    return memScoped {
        val _Locale = Locale
        val _dwInfoType = dwInfoType
        val _lpSrcStr = lpSrcStr?.cstr?.getPointer(memScope).rawValue
        val _cchSrc = cchSrc
        val _lpCharType = lpCharType.rawValue
        val res = kni_GetStringTypeA(_Locale, _dwInfoType, _lpSrcStr, _cchSrc, _lpCharType)
        res
    }
}

@SymbolName("win32_kni_GetStringTypeA")
private external fun kni_GetStringTypeA(Locale: Int, dwInfoType: Int, lpSrcStr: NativePtr, cchSrc: Int, lpCharType: NativePtr): Int

fun FoldStringA(dwMapFlags: DWORD, lpSrcStr: String?, cchSrc: Int, lpDestStr: LPSTR?, cchDest: Int): Int {
    return memScoped {
        val _dwMapFlags = dwMapFlags
        val _lpSrcStr = lpSrcStr?.cstr?.getPointer(memScope).rawValue
        val _cchSrc = cchSrc
        val _lpDestStr = lpDestStr.rawValue
        val _cchDest = cchDest
        val res = kni_FoldStringA(_dwMapFlags, _lpSrcStr, _cchSrc, _lpDestStr, _cchDest)
        res
    }
}

@SymbolName("win32_kni_FoldStringA")
private external fun kni_FoldStringA(dwMapFlags: Int, lpSrcStr: NativePtr, cchSrc: Int, lpDestStr: NativePtr, cchDest: Int): Int

fun EnumSystemLocalesA(lpLocaleEnumProc: LOCALE_ENUMPROCA?, dwFlags: DWORD): WINBOOL {
    val _lpLocaleEnumProc = lpLocaleEnumProc.rawValue
    val _dwFlags = dwFlags
    val res = kni_EnumSystemLocalesA(_lpLocaleEnumProc, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumSystemLocalesA")
private external fun kni_EnumSystemLocalesA(lpLocaleEnumProc: NativePtr, dwFlags: Int): Int

fun EnumSystemLocalesW(lpLocaleEnumProc: LOCALE_ENUMPROCW?, dwFlags: DWORD): WINBOOL {
    val _lpLocaleEnumProc = lpLocaleEnumProc.rawValue
    val _dwFlags = dwFlags
    val res = kni_EnumSystemLocalesW(_lpLocaleEnumProc, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumSystemLocalesW")
private external fun kni_EnumSystemLocalesW(lpLocaleEnumProc: NativePtr, dwFlags: Int): Int

fun EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCA?, dwFlags: DWORD, lParam: LONG_PTR): WINBOOL {
    val _lpLanguageGroupEnumProc = lpLanguageGroupEnumProc.rawValue
    val _dwFlags = dwFlags
    val _lParam = lParam
    val res = kni_EnumSystemLanguageGroupsA(_lpLanguageGroupEnumProc, _dwFlags, _lParam)
    return res
}

@SymbolName("win32_kni_EnumSystemLanguageGroupsA")
private external fun kni_EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc: NativePtr, dwFlags: Int, lParam: Long): Int

fun EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCW?, dwFlags: DWORD, lParam: LONG_PTR): WINBOOL {
    val _lpLanguageGroupEnumProc = lpLanguageGroupEnumProc.rawValue
    val _dwFlags = dwFlags
    val _lParam = lParam
    val res = kni_EnumSystemLanguageGroupsW(_lpLanguageGroupEnumProc, _dwFlags, _lParam)
    return res
}

@SymbolName("win32_kni_EnumSystemLanguageGroupsW")
private external fun kni_EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc: NativePtr, dwFlags: Int, lParam: Long): Int

fun EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCA?, LanguageGroup: LGRPID, dwFlags: DWORD, lParam: LONG_PTR): WINBOOL {
    val _lpLangGroupLocaleEnumProc = lpLangGroupLocaleEnumProc.rawValue
    val _LanguageGroup = LanguageGroup
    val _dwFlags = dwFlags
    val _lParam = lParam
    val res = kni_EnumLanguageGroupLocalesA(_lpLangGroupLocaleEnumProc, _LanguageGroup, _dwFlags, _lParam)
    return res
}

@SymbolName("win32_kni_EnumLanguageGroupLocalesA")
private external fun kni_EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc: NativePtr, LanguageGroup: Int, dwFlags: Int, lParam: Long): Int

fun EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCW?, LanguageGroup: LGRPID, dwFlags: DWORD, lParam: LONG_PTR): WINBOOL {
    val _lpLangGroupLocaleEnumProc = lpLangGroupLocaleEnumProc.rawValue
    val _LanguageGroup = LanguageGroup
    val _dwFlags = dwFlags
    val _lParam = lParam
    val res = kni_EnumLanguageGroupLocalesW(_lpLangGroupLocaleEnumProc, _LanguageGroup, _dwFlags, _lParam)
    return res
}

@SymbolName("win32_kni_EnumLanguageGroupLocalesW")
private external fun kni_EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc: NativePtr, LanguageGroup: Int, dwFlags: Int, lParam: Long): Int

fun EnumUILanguagesA(lpUILanguageEnumProc: UILANGUAGE_ENUMPROCA?, dwFlags: DWORD, lParam: LONG_PTR): WINBOOL {
    val _lpUILanguageEnumProc = lpUILanguageEnumProc.rawValue
    val _dwFlags = dwFlags
    val _lParam = lParam
    val res = kni_EnumUILanguagesA(_lpUILanguageEnumProc, _dwFlags, _lParam)
    return res
}

@SymbolName("win32_kni_EnumUILanguagesA")
private external fun kni_EnumUILanguagesA(lpUILanguageEnumProc: NativePtr, dwFlags: Int, lParam: Long): Int

fun EnumUILanguagesW(lpUILanguageEnumProc: UILANGUAGE_ENUMPROCW?, dwFlags: DWORD, lParam: LONG_PTR): WINBOOL {
    val _lpUILanguageEnumProc = lpUILanguageEnumProc.rawValue
    val _dwFlags = dwFlags
    val _lParam = lParam
    val res = kni_EnumUILanguagesW(_lpUILanguageEnumProc, _dwFlags, _lParam)
    return res
}

@SymbolName("win32_kni_EnumUILanguagesW")
private external fun kni_EnumUILanguagesW(lpUILanguageEnumProc: NativePtr, dwFlags: Int, lParam: Long): Int

fun EnumSystemCodePagesA(lpCodePageEnumProc: CODEPAGE_ENUMPROCA?, dwFlags: DWORD): WINBOOL {
    val _lpCodePageEnumProc = lpCodePageEnumProc.rawValue
    val _dwFlags = dwFlags
    val res = kni_EnumSystemCodePagesA(_lpCodePageEnumProc, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumSystemCodePagesA")
private external fun kni_EnumSystemCodePagesA(lpCodePageEnumProc: NativePtr, dwFlags: Int): Int

fun EnumSystemCodePagesW(lpCodePageEnumProc: CODEPAGE_ENUMPROCW?, dwFlags: DWORD): WINBOOL {
    val _lpCodePageEnumProc = lpCodePageEnumProc.rawValue
    val _dwFlags = dwFlags
    val res = kni_EnumSystemCodePagesW(_lpCodePageEnumProc, _dwFlags)
    return res
}

@SymbolName("win32_kni_EnumSystemCodePagesW")
private external fun kni_EnumSystemCodePagesW(lpCodePageEnumProc: NativePtr, dwFlags: Int): Int

fun PeekConsoleInputA(hConsoleInput: HANDLE?, lpBuffer: PINPUT_RECORD?, nLength: DWORD, lpNumberOfEventsRead: LPDWORD?): WINBOOL {
    val _hConsoleInput = hConsoleInput.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nLength = nLength
    val _lpNumberOfEventsRead = lpNumberOfEventsRead.rawValue
    val res = kni_PeekConsoleInputA(_hConsoleInput, _lpBuffer, _nLength, _lpNumberOfEventsRead)
    return res
}

@SymbolName("win32_kni_PeekConsoleInputA")
private external fun kni_PeekConsoleInputA(hConsoleInput: NativePtr, lpBuffer: NativePtr, nLength: Int, lpNumberOfEventsRead: NativePtr): Int

fun PeekConsoleInputW(hConsoleInput: HANDLE?, lpBuffer: PINPUT_RECORD?, nLength: DWORD, lpNumberOfEventsRead: LPDWORD?): WINBOOL {
    val _hConsoleInput = hConsoleInput.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nLength = nLength
    val _lpNumberOfEventsRead = lpNumberOfEventsRead.rawValue
    val res = kni_PeekConsoleInputW(_hConsoleInput, _lpBuffer, _nLength, _lpNumberOfEventsRead)
    return res
}

@SymbolName("win32_kni_PeekConsoleInputW")
private external fun kni_PeekConsoleInputW(hConsoleInput: NativePtr, lpBuffer: NativePtr, nLength: Int, lpNumberOfEventsRead: NativePtr): Int

fun ReadConsoleInputA(hConsoleInput: HANDLE?, lpBuffer: PINPUT_RECORD?, nLength: DWORD, lpNumberOfEventsRead: LPDWORD?): WINBOOL {
    val _hConsoleInput = hConsoleInput.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nLength = nLength
    val _lpNumberOfEventsRead = lpNumberOfEventsRead.rawValue
    val res = kni_ReadConsoleInputA(_hConsoleInput, _lpBuffer, _nLength, _lpNumberOfEventsRead)
    return res
}

@SymbolName("win32_kni_ReadConsoleInputA")
private external fun kni_ReadConsoleInputA(hConsoleInput: NativePtr, lpBuffer: NativePtr, nLength: Int, lpNumberOfEventsRead: NativePtr): Int

fun ReadConsoleInputW(hConsoleInput: HANDLE?, lpBuffer: PINPUT_RECORD?, nLength: DWORD, lpNumberOfEventsRead: LPDWORD?): WINBOOL {
    val _hConsoleInput = hConsoleInput.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nLength = nLength
    val _lpNumberOfEventsRead = lpNumberOfEventsRead.rawValue
    val res = kni_ReadConsoleInputW(_hConsoleInput, _lpBuffer, _nLength, _lpNumberOfEventsRead)
    return res
}

@SymbolName("win32_kni_ReadConsoleInputW")
private external fun kni_ReadConsoleInputW(hConsoleInput: NativePtr, lpBuffer: NativePtr, nLength: Int, lpNumberOfEventsRead: NativePtr): Int

fun WriteConsoleInputA(hConsoleInput: HANDLE?, lpBuffer: CValuesRef<INPUT_RECORD>?, nLength: DWORD, lpNumberOfEventsWritten: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleInput = hConsoleInput.rawValue
        val _lpBuffer = lpBuffer?.getPointer(memScope).rawValue
        val _nLength = nLength
        val _lpNumberOfEventsWritten = lpNumberOfEventsWritten.rawValue
        val res = kni_WriteConsoleInputA(_hConsoleInput, _lpBuffer, _nLength, _lpNumberOfEventsWritten)
        res
    }
}

@SymbolName("win32_kni_WriteConsoleInputA")
private external fun kni_WriteConsoleInputA(hConsoleInput: NativePtr, lpBuffer: NativePtr, nLength: Int, lpNumberOfEventsWritten: NativePtr): Int

fun WriteConsoleInputW(hConsoleInput: HANDLE?, lpBuffer: CValuesRef<INPUT_RECORD>?, nLength: DWORD, lpNumberOfEventsWritten: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleInput = hConsoleInput.rawValue
        val _lpBuffer = lpBuffer?.getPointer(memScope).rawValue
        val _nLength = nLength
        val _lpNumberOfEventsWritten = lpNumberOfEventsWritten.rawValue
        val res = kni_WriteConsoleInputW(_hConsoleInput, _lpBuffer, _nLength, _lpNumberOfEventsWritten)
        res
    }
}

@SymbolName("win32_kni_WriteConsoleInputW")
private external fun kni_WriteConsoleInputW(hConsoleInput: NativePtr, lpBuffer: NativePtr, nLength: Int, lpNumberOfEventsWritten: NativePtr): Int

fun ReadConsoleOutputA(hConsoleOutput: HANDLE?, lpBuffer: PCHAR_INFO?, dwBufferSize: CValue<COORD>, dwBufferCoord: CValue<COORD>, lpReadRegion: PSMALL_RECT?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpBuffer = lpBuffer.rawValue
        val _dwBufferSize = dwBufferSize.getPointer(memScope).rawValue
        val _dwBufferCoord = dwBufferCoord.getPointer(memScope).rawValue
        val _lpReadRegion = lpReadRegion.rawValue
        val res = kni_ReadConsoleOutputA(_hConsoleOutput, _lpBuffer, _dwBufferSize, _dwBufferCoord, _lpReadRegion)
        res
    }
}

@SymbolName("win32_kni_ReadConsoleOutputA")
private external fun kni_ReadConsoleOutputA(hConsoleOutput: NativePtr, lpBuffer: NativePtr, dwBufferSize: NativePtr, dwBufferCoord: NativePtr, lpReadRegion: NativePtr): Int

fun ReadConsoleOutputW(hConsoleOutput: HANDLE?, lpBuffer: PCHAR_INFO?, dwBufferSize: CValue<COORD>, dwBufferCoord: CValue<COORD>, lpReadRegion: PSMALL_RECT?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpBuffer = lpBuffer.rawValue
        val _dwBufferSize = dwBufferSize.getPointer(memScope).rawValue
        val _dwBufferCoord = dwBufferCoord.getPointer(memScope).rawValue
        val _lpReadRegion = lpReadRegion.rawValue
        val res = kni_ReadConsoleOutputW(_hConsoleOutput, _lpBuffer, _dwBufferSize, _dwBufferCoord, _lpReadRegion)
        res
    }
}

@SymbolName("win32_kni_ReadConsoleOutputW")
private external fun kni_ReadConsoleOutputW(hConsoleOutput: NativePtr, lpBuffer: NativePtr, dwBufferSize: NativePtr, dwBufferCoord: NativePtr, lpReadRegion: NativePtr): Int

fun WriteConsoleOutputA(hConsoleOutput: HANDLE?, lpBuffer: CValuesRef<CHAR_INFO>?, dwBufferSize: CValue<COORD>, dwBufferCoord: CValue<COORD>, lpWriteRegion: PSMALL_RECT?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpBuffer = lpBuffer?.getPointer(memScope).rawValue
        val _dwBufferSize = dwBufferSize.getPointer(memScope).rawValue
        val _dwBufferCoord = dwBufferCoord.getPointer(memScope).rawValue
        val _lpWriteRegion = lpWriteRegion.rawValue
        val res = kni_WriteConsoleOutputA(_hConsoleOutput, _lpBuffer, _dwBufferSize, _dwBufferCoord, _lpWriteRegion)
        res
    }
}

@SymbolName("win32_kni_WriteConsoleOutputA")
private external fun kni_WriteConsoleOutputA(hConsoleOutput: NativePtr, lpBuffer: NativePtr, dwBufferSize: NativePtr, dwBufferCoord: NativePtr, lpWriteRegion: NativePtr): Int

fun WriteConsoleOutputW(hConsoleOutput: HANDLE?, lpBuffer: CValuesRef<CHAR_INFO>?, dwBufferSize: CValue<COORD>, dwBufferCoord: CValue<COORD>, lpWriteRegion: PSMALL_RECT?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpBuffer = lpBuffer?.getPointer(memScope).rawValue
        val _dwBufferSize = dwBufferSize.getPointer(memScope).rawValue
        val _dwBufferCoord = dwBufferCoord.getPointer(memScope).rawValue
        val _lpWriteRegion = lpWriteRegion.rawValue
        val res = kni_WriteConsoleOutputW(_hConsoleOutput, _lpBuffer, _dwBufferSize, _dwBufferCoord, _lpWriteRegion)
        res
    }
}

@SymbolName("win32_kni_WriteConsoleOutputW")
private external fun kni_WriteConsoleOutputW(hConsoleOutput: NativePtr, lpBuffer: NativePtr, dwBufferSize: NativePtr, dwBufferCoord: NativePtr, lpWriteRegion: NativePtr): Int

fun ReadConsoleOutputCharacterA(hConsoleOutput: HANDLE?, lpCharacter: LPSTR?, nLength: DWORD, dwReadCoord: CValue<COORD>, lpNumberOfCharsRead: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpCharacter = lpCharacter.rawValue
        val _nLength = nLength
        val _dwReadCoord = dwReadCoord.getPointer(memScope).rawValue
        val _lpNumberOfCharsRead = lpNumberOfCharsRead.rawValue
        val res = kni_ReadConsoleOutputCharacterA(_hConsoleOutput, _lpCharacter, _nLength, _dwReadCoord, _lpNumberOfCharsRead)
        res
    }
}

@SymbolName("win32_kni_ReadConsoleOutputCharacterA")
private external fun kni_ReadConsoleOutputCharacterA(hConsoleOutput: NativePtr, lpCharacter: NativePtr, nLength: Int, dwReadCoord: NativePtr, lpNumberOfCharsRead: NativePtr): Int

fun ReadConsoleOutputCharacterW(hConsoleOutput: HANDLE?, lpCharacter: LPWSTR?, nLength: DWORD, dwReadCoord: CValue<COORD>, lpNumberOfCharsRead: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpCharacter = lpCharacter.rawValue
        val _nLength = nLength
        val _dwReadCoord = dwReadCoord.getPointer(memScope).rawValue
        val _lpNumberOfCharsRead = lpNumberOfCharsRead.rawValue
        val res = kni_ReadConsoleOutputCharacterW(_hConsoleOutput, _lpCharacter, _nLength, _dwReadCoord, _lpNumberOfCharsRead)
        res
    }
}

@SymbolName("win32_kni_ReadConsoleOutputCharacterW")
private external fun kni_ReadConsoleOutputCharacterW(hConsoleOutput: NativePtr, lpCharacter: NativePtr, nLength: Int, dwReadCoord: NativePtr, lpNumberOfCharsRead: NativePtr): Int

fun ReadConsoleOutputAttribute(hConsoleOutput: HANDLE?, lpAttribute: LPWORD?, nLength: DWORD, dwReadCoord: CValue<COORD>, lpNumberOfAttrsRead: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpAttribute = lpAttribute.rawValue
        val _nLength = nLength
        val _dwReadCoord = dwReadCoord.getPointer(memScope).rawValue
        val _lpNumberOfAttrsRead = lpNumberOfAttrsRead.rawValue
        val res = kni_ReadConsoleOutputAttribute(_hConsoleOutput, _lpAttribute, _nLength, _dwReadCoord, _lpNumberOfAttrsRead)
        res
    }
}

@SymbolName("win32_kni_ReadConsoleOutputAttribute")
private external fun kni_ReadConsoleOutputAttribute(hConsoleOutput: NativePtr, lpAttribute: NativePtr, nLength: Int, dwReadCoord: NativePtr, lpNumberOfAttrsRead: NativePtr): Int

fun WriteConsoleOutputCharacterA(hConsoleOutput: HANDLE?, lpCharacter: String?, nLength: DWORD, dwWriteCoord: CValue<COORD>, lpNumberOfCharsWritten: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpCharacter = lpCharacter?.cstr?.getPointer(memScope).rawValue
        val _nLength = nLength
        val _dwWriteCoord = dwWriteCoord.getPointer(memScope).rawValue
        val _lpNumberOfCharsWritten = lpNumberOfCharsWritten.rawValue
        val res = kni_WriteConsoleOutputCharacterA(_hConsoleOutput, _lpCharacter, _nLength, _dwWriteCoord, _lpNumberOfCharsWritten)
        res
    }
}

@SymbolName("win32_kni_WriteConsoleOutputCharacterA")
private external fun kni_WriteConsoleOutputCharacterA(hConsoleOutput: NativePtr, lpCharacter: NativePtr, nLength: Int, dwWriteCoord: NativePtr, lpNumberOfCharsWritten: NativePtr): Int

fun WriteConsoleOutputCharacterW(hConsoleOutput: HANDLE?, lpCharacter: String?, nLength: DWORD, dwWriteCoord: CValue<COORD>, lpNumberOfCharsWritten: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpCharacter = lpCharacter?.wcstr?.getPointer(memScope).rawValue
        val _nLength = nLength
        val _dwWriteCoord = dwWriteCoord.getPointer(memScope).rawValue
        val _lpNumberOfCharsWritten = lpNumberOfCharsWritten.rawValue
        val res = kni_WriteConsoleOutputCharacterW(_hConsoleOutput, _lpCharacter, _nLength, _dwWriteCoord, _lpNumberOfCharsWritten)
        res
    }
}

@SymbolName("win32_kni_WriteConsoleOutputCharacterW")
private external fun kni_WriteConsoleOutputCharacterW(hConsoleOutput: NativePtr, lpCharacter: NativePtr, nLength: Int, dwWriteCoord: NativePtr, lpNumberOfCharsWritten: NativePtr): Int

fun WriteConsoleOutputAttribute(hConsoleOutput: HANDLE?, lpAttribute: CValuesRef<WORDVar>?, nLength: DWORD, dwWriteCoord: CValue<COORD>, lpNumberOfAttrsWritten: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpAttribute = lpAttribute?.getPointer(memScope).rawValue
        val _nLength = nLength
        val _dwWriteCoord = dwWriteCoord.getPointer(memScope).rawValue
        val _lpNumberOfAttrsWritten = lpNumberOfAttrsWritten.rawValue
        val res = kni_WriteConsoleOutputAttribute(_hConsoleOutput, _lpAttribute, _nLength, _dwWriteCoord, _lpNumberOfAttrsWritten)
        res
    }
}

@SymbolName("win32_kni_WriteConsoleOutputAttribute")
private external fun kni_WriteConsoleOutputAttribute(hConsoleOutput: NativePtr, lpAttribute: NativePtr, nLength: Int, dwWriteCoord: NativePtr, lpNumberOfAttrsWritten: NativePtr): Int

fun FillConsoleOutputCharacterA(hConsoleOutput: HANDLE?, cCharacter: CHAR, nLength: DWORD, dwWriteCoord: CValue<COORD>, lpNumberOfCharsWritten: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _cCharacter = cCharacter
        val _nLength = nLength
        val _dwWriteCoord = dwWriteCoord.getPointer(memScope).rawValue
        val _lpNumberOfCharsWritten = lpNumberOfCharsWritten.rawValue
        val res = kni_FillConsoleOutputCharacterA(_hConsoleOutput, _cCharacter, _nLength, _dwWriteCoord, _lpNumberOfCharsWritten)
        res
    }
}

@SymbolName("win32_kni_FillConsoleOutputCharacterA")
private external fun kni_FillConsoleOutputCharacterA(hConsoleOutput: NativePtr, cCharacter: Byte, nLength: Int, dwWriteCoord: NativePtr, lpNumberOfCharsWritten: NativePtr): Int

fun FillConsoleOutputCharacterW(hConsoleOutput: HANDLE?, cCharacter: WCHAR, nLength: DWORD, dwWriteCoord: CValue<COORD>, lpNumberOfCharsWritten: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _cCharacter = cCharacter
        val _nLength = nLength
        val _dwWriteCoord = dwWriteCoord.getPointer(memScope).rawValue
        val _lpNumberOfCharsWritten = lpNumberOfCharsWritten.rawValue
        val res = kni_FillConsoleOutputCharacterW(_hConsoleOutput, _cCharacter, _nLength, _dwWriteCoord, _lpNumberOfCharsWritten)
        res
    }
}

@SymbolName("win32_kni_FillConsoleOutputCharacterW")
private external fun kni_FillConsoleOutputCharacterW(hConsoleOutput: NativePtr, cCharacter: Short, nLength: Int, dwWriteCoord: NativePtr, lpNumberOfCharsWritten: NativePtr): Int

fun FillConsoleOutputAttribute(hConsoleOutput: HANDLE?, wAttribute: WORD, nLength: DWORD, dwWriteCoord: CValue<COORD>, lpNumberOfAttrsWritten: LPDWORD?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _wAttribute = wAttribute
        val _nLength = nLength
        val _dwWriteCoord = dwWriteCoord.getPointer(memScope).rawValue
        val _lpNumberOfAttrsWritten = lpNumberOfAttrsWritten.rawValue
        val res = kni_FillConsoleOutputAttribute(_hConsoleOutput, _wAttribute, _nLength, _dwWriteCoord, _lpNumberOfAttrsWritten)
        res
    }
}

@SymbolName("win32_kni_FillConsoleOutputAttribute")
private external fun kni_FillConsoleOutputAttribute(hConsoleOutput: NativePtr, wAttribute: Short, nLength: Int, dwWriteCoord: NativePtr, lpNumberOfAttrsWritten: NativePtr): Int

fun GetConsoleMode(hConsoleHandle: HANDLE?, lpMode: LPDWORD?): WINBOOL {
    val _hConsoleHandle = hConsoleHandle.rawValue
    val _lpMode = lpMode.rawValue
    val res = kni_GetConsoleMode(_hConsoleHandle, _lpMode)
    return res
}

@SymbolName("win32_kni_GetConsoleMode")
private external fun kni_GetConsoleMode(hConsoleHandle: NativePtr, lpMode: NativePtr): Int

fun GetNumberOfConsoleInputEvents(hConsoleInput: HANDLE?, lpNumberOfEvents: LPDWORD?): WINBOOL {
    val _hConsoleInput = hConsoleInput.rawValue
    val _lpNumberOfEvents = lpNumberOfEvents.rawValue
    val res = kni_GetNumberOfConsoleInputEvents(_hConsoleInput, _lpNumberOfEvents)
    return res
}

@SymbolName("win32_kni_GetNumberOfConsoleInputEvents")
private external fun kni_GetNumberOfConsoleInputEvents(hConsoleInput: NativePtr, lpNumberOfEvents: NativePtr): Int

fun GetConsoleScreenBufferInfo(hConsoleOutput: HANDLE?, lpConsoleScreenBufferInfo: PCONSOLE_SCREEN_BUFFER_INFO?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _lpConsoleScreenBufferInfo = lpConsoleScreenBufferInfo.rawValue
    val res = kni_GetConsoleScreenBufferInfo(_hConsoleOutput, _lpConsoleScreenBufferInfo)
    return res
}

@SymbolName("win32_kni_GetConsoleScreenBufferInfo")
private external fun kni_GetConsoleScreenBufferInfo(hConsoleOutput: NativePtr, lpConsoleScreenBufferInfo: NativePtr): Int

fun GetLargestConsoleWindowSize(hConsoleOutput: HANDLE?): CValue<COORD> {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val res = kni_GetLargestConsoleWindowSize(_hConsoleOutput, alloc<COORD>().rawPtr)
        interpretPointed<COORD>(res).readValue()
    }
}

@SymbolName("win32_kni_GetLargestConsoleWindowSize")
private external fun kni_GetLargestConsoleWindowSize(hConsoleOutput: NativePtr, retValPlacement: NativePtr): NativePtr

fun GetConsoleCursorInfo(hConsoleOutput: HANDLE?, lpConsoleCursorInfo: PCONSOLE_CURSOR_INFO?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _lpConsoleCursorInfo = lpConsoleCursorInfo.rawValue
    val res = kni_GetConsoleCursorInfo(_hConsoleOutput, _lpConsoleCursorInfo)
    return res
}

@SymbolName("win32_kni_GetConsoleCursorInfo")
private external fun kni_GetConsoleCursorInfo(hConsoleOutput: NativePtr, lpConsoleCursorInfo: NativePtr): Int

fun GetCurrentConsoleFont(hConsoleOutput: HANDLE?, bMaximumWindow: WINBOOL, lpConsoleCurrentFont: PCONSOLE_FONT_INFO?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _bMaximumWindow = bMaximumWindow
    val _lpConsoleCurrentFont = lpConsoleCurrentFont.rawValue
    val res = kni_GetCurrentConsoleFont(_hConsoleOutput, _bMaximumWindow, _lpConsoleCurrentFont)
    return res
}

@SymbolName("win32_kni_GetCurrentConsoleFont")
private external fun kni_GetCurrentConsoleFont(hConsoleOutput: NativePtr, bMaximumWindow: Int, lpConsoleCurrentFont: NativePtr): Int

fun GetConsoleFontSize(hConsoleOutput: HANDLE?, nFont: DWORD): CValue<COORD> {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _nFont = nFont
        val res = kni_GetConsoleFontSize(_hConsoleOutput, _nFont, alloc<COORD>().rawPtr)
        interpretPointed<COORD>(res).readValue()
    }
}

@SymbolName("win32_kni_GetConsoleFontSize")
private external fun kni_GetConsoleFontSize(hConsoleOutput: NativePtr, nFont: Int, retValPlacement: NativePtr): NativePtr

fun GetConsoleSelectionInfo(lpConsoleSelectionInfo: PCONSOLE_SELECTION_INFO?): WINBOOL {
    val _lpConsoleSelectionInfo = lpConsoleSelectionInfo.rawValue
    val res = kni_GetConsoleSelectionInfo(_lpConsoleSelectionInfo)
    return res
}

@SymbolName("win32_kni_GetConsoleSelectionInfo")
private external fun kni_GetConsoleSelectionInfo(lpConsoleSelectionInfo: NativePtr): Int

fun GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons: LPDWORD?): WINBOOL {
    val _lpNumberOfMouseButtons = lpNumberOfMouseButtons.rawValue
    val res = kni_GetNumberOfConsoleMouseButtons(_lpNumberOfMouseButtons)
    return res
}

@SymbolName("win32_kni_GetNumberOfConsoleMouseButtons")
private external fun kni_GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons: NativePtr): Int

fun SetConsoleMode(hConsoleHandle: HANDLE?, dwMode: DWORD): WINBOOL {
    val _hConsoleHandle = hConsoleHandle.rawValue
    val _dwMode = dwMode
    val res = kni_SetConsoleMode(_hConsoleHandle, _dwMode)
    return res
}

@SymbolName("win32_kni_SetConsoleMode")
private external fun kni_SetConsoleMode(hConsoleHandle: NativePtr, dwMode: Int): Int

fun SetConsoleActiveScreenBuffer(hConsoleOutput: HANDLE?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val res = kni_SetConsoleActiveScreenBuffer(_hConsoleOutput)
    return res
}

@SymbolName("win32_kni_SetConsoleActiveScreenBuffer")
private external fun kni_SetConsoleActiveScreenBuffer(hConsoleOutput: NativePtr): Int

fun FlushConsoleInputBuffer(hConsoleInput: HANDLE?): WINBOOL {
    val _hConsoleInput = hConsoleInput.rawValue
    val res = kni_FlushConsoleInputBuffer(_hConsoleInput)
    return res
}

@SymbolName("win32_kni_FlushConsoleInputBuffer")
private external fun kni_FlushConsoleInputBuffer(hConsoleInput: NativePtr): Int

fun SetConsoleScreenBufferSize(hConsoleOutput: HANDLE?, dwSize: CValue<COORD>): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _dwSize = dwSize.getPointer(memScope).rawValue
        val res = kni_SetConsoleScreenBufferSize(_hConsoleOutput, _dwSize)
        res
    }
}

@SymbolName("win32_kni_SetConsoleScreenBufferSize")
private external fun kni_SetConsoleScreenBufferSize(hConsoleOutput: NativePtr, dwSize: NativePtr): Int

fun SetConsoleCursorPosition(hConsoleOutput: HANDLE?, dwCursorPosition: CValue<COORD>): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _dwCursorPosition = dwCursorPosition.getPointer(memScope).rawValue
        val res = kni_SetConsoleCursorPosition(_hConsoleOutput, _dwCursorPosition)
        res
    }
}

@SymbolName("win32_kni_SetConsoleCursorPosition")
private external fun kni_SetConsoleCursorPosition(hConsoleOutput: NativePtr, dwCursorPosition: NativePtr): Int

fun SetConsoleCursorInfo(hConsoleOutput: HANDLE?, lpConsoleCursorInfo: CValuesRef<CONSOLE_CURSOR_INFO>?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpConsoleCursorInfo = lpConsoleCursorInfo?.getPointer(memScope).rawValue
        val res = kni_SetConsoleCursorInfo(_hConsoleOutput, _lpConsoleCursorInfo)
        res
    }
}

@SymbolName("win32_kni_SetConsoleCursorInfo")
private external fun kni_SetConsoleCursorInfo(hConsoleOutput: NativePtr, lpConsoleCursorInfo: NativePtr): Int

fun ScrollConsoleScreenBufferA(hConsoleOutput: HANDLE?, lpScrollRectangle: CValuesRef<SMALL_RECT>?, lpClipRectangle: CValuesRef<SMALL_RECT>?, dwDestinationOrigin: CValue<COORD>, lpFill: CValuesRef<CHAR_INFO>?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpScrollRectangle = lpScrollRectangle?.getPointer(memScope).rawValue
        val _lpClipRectangle = lpClipRectangle?.getPointer(memScope).rawValue
        val _dwDestinationOrigin = dwDestinationOrigin.getPointer(memScope).rawValue
        val _lpFill = lpFill?.getPointer(memScope).rawValue
        val res = kni_ScrollConsoleScreenBufferA(_hConsoleOutput, _lpScrollRectangle, _lpClipRectangle, _dwDestinationOrigin, _lpFill)
        res
    }
}

@SymbolName("win32_kni_ScrollConsoleScreenBufferA")
private external fun kni_ScrollConsoleScreenBufferA(hConsoleOutput: NativePtr, lpScrollRectangle: NativePtr, lpClipRectangle: NativePtr, dwDestinationOrigin: NativePtr, lpFill: NativePtr): Int

fun ScrollConsoleScreenBufferW(hConsoleOutput: HANDLE?, lpScrollRectangle: CValuesRef<SMALL_RECT>?, lpClipRectangle: CValuesRef<SMALL_RECT>?, dwDestinationOrigin: CValue<COORD>, lpFill: CValuesRef<CHAR_INFO>?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _lpScrollRectangle = lpScrollRectangle?.getPointer(memScope).rawValue
        val _lpClipRectangle = lpClipRectangle?.getPointer(memScope).rawValue
        val _dwDestinationOrigin = dwDestinationOrigin.getPointer(memScope).rawValue
        val _lpFill = lpFill?.getPointer(memScope).rawValue
        val res = kni_ScrollConsoleScreenBufferW(_hConsoleOutput, _lpScrollRectangle, _lpClipRectangle, _dwDestinationOrigin, _lpFill)
        res
    }
}

@SymbolName("win32_kni_ScrollConsoleScreenBufferW")
private external fun kni_ScrollConsoleScreenBufferW(hConsoleOutput: NativePtr, lpScrollRectangle: NativePtr, lpClipRectangle: NativePtr, dwDestinationOrigin: NativePtr, lpFill: NativePtr): Int

fun SetConsoleWindowInfo(hConsoleOutput: HANDLE?, bAbsolute: WINBOOL, lpConsoleWindow: CValuesRef<SMALL_RECT>?): WINBOOL {
    return memScoped {
        val _hConsoleOutput = hConsoleOutput.rawValue
        val _bAbsolute = bAbsolute
        val _lpConsoleWindow = lpConsoleWindow?.getPointer(memScope).rawValue
        val res = kni_SetConsoleWindowInfo(_hConsoleOutput, _bAbsolute, _lpConsoleWindow)
        res
    }
}

@SymbolName("win32_kni_SetConsoleWindowInfo")
private external fun kni_SetConsoleWindowInfo(hConsoleOutput: NativePtr, bAbsolute: Int, lpConsoleWindow: NativePtr): Int

fun SetConsoleTextAttribute(hConsoleOutput: HANDLE?, wAttributes: WORD): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _wAttributes = wAttributes
    val res = kni_SetConsoleTextAttribute(_hConsoleOutput, _wAttributes)
    return res
}

@SymbolName("win32_kni_SetConsoleTextAttribute")
private external fun kni_SetConsoleTextAttribute(hConsoleOutput: NativePtr, wAttributes: Short): Int

fun SetConsoleCtrlHandler(HandlerRoutine: PHANDLER_ROUTINE?, Add: WINBOOL): WINBOOL {
    val _HandlerRoutine = HandlerRoutine.rawValue
    val _Add = Add
    val res = kni_SetConsoleCtrlHandler(_HandlerRoutine, _Add)
    return res
}

@SymbolName("win32_kni_SetConsoleCtrlHandler")
private external fun kni_SetConsoleCtrlHandler(HandlerRoutine: NativePtr, Add: Int): Int

fun GenerateConsoleCtrlEvent(dwCtrlEvent: DWORD, dwProcessGroupId: DWORD): WINBOOL {
    val _dwCtrlEvent = dwCtrlEvent
    val _dwProcessGroupId = dwProcessGroupId
    val res = kni_GenerateConsoleCtrlEvent(_dwCtrlEvent, _dwProcessGroupId)
    return res
}

@SymbolName("win32_kni_GenerateConsoleCtrlEvent")
private external fun kni_GenerateConsoleCtrlEvent(dwCtrlEvent: Int, dwProcessGroupId: Int): Int

fun AllocConsole(): WINBOOL {
    val res = kni_AllocConsole()
    return res
}

@SymbolName("win32_kni_AllocConsole")
private external fun kni_AllocConsole(): Int

fun FreeConsole(): WINBOOL {
    val res = kni_FreeConsole()
    return res
}

@SymbolName("win32_kni_FreeConsole")
private external fun kni_FreeConsole(): Int

fun AttachConsole(dwProcessId: DWORD): WINBOOL {
    val _dwProcessId = dwProcessId
    val res = kni_AttachConsole(_dwProcessId)
    return res
}

@SymbolName("win32_kni_AttachConsole")
private external fun kni_AttachConsole(dwProcessId: Int): Int

fun GetConsoleTitleA(lpConsoleTitle: LPSTR?, nSize: DWORD): DWORD {
    val _lpConsoleTitle = lpConsoleTitle.rawValue
    val _nSize = nSize
    val res = kni_GetConsoleTitleA(_lpConsoleTitle, _nSize)
    return res
}

@SymbolName("win32_kni_GetConsoleTitleA")
private external fun kni_GetConsoleTitleA(lpConsoleTitle: NativePtr, nSize: Int): Int

fun GetConsoleTitleW(lpConsoleTitle: LPWSTR?, nSize: DWORD): DWORD {
    val _lpConsoleTitle = lpConsoleTitle.rawValue
    val _nSize = nSize
    val res = kni_GetConsoleTitleW(_lpConsoleTitle, _nSize)
    return res
}

@SymbolName("win32_kni_GetConsoleTitleW")
private external fun kni_GetConsoleTitleW(lpConsoleTitle: NativePtr, nSize: Int): Int

fun SetConsoleTitleA(lpConsoleTitle: String?): WINBOOL {
    return memScoped {
        val _lpConsoleTitle = lpConsoleTitle?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetConsoleTitleA(_lpConsoleTitle)
        res
    }
}

@SymbolName("win32_kni_SetConsoleTitleA")
private external fun kni_SetConsoleTitleA(lpConsoleTitle: NativePtr): Int

fun SetConsoleTitleW(lpConsoleTitle: String?): WINBOOL {
    return memScoped {
        val _lpConsoleTitle = lpConsoleTitle?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetConsoleTitleW(_lpConsoleTitle)
        res
    }
}

@SymbolName("win32_kni_SetConsoleTitleW")
private external fun kni_SetConsoleTitleW(lpConsoleTitle: NativePtr): Int

fun ReadConsoleA(hConsoleInput: HANDLE?, lpBuffer: LPVOID?, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD?, lpReserved: LPVOID?): WINBOOL {
    val _hConsoleInput = hConsoleInput.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nNumberOfCharsToRead = nNumberOfCharsToRead
    val _lpNumberOfCharsRead = lpNumberOfCharsRead.rawValue
    val _lpReserved = lpReserved.rawValue
    val res = kni_ReadConsoleA(_hConsoleInput, _lpBuffer, _nNumberOfCharsToRead, _lpNumberOfCharsRead, _lpReserved)
    return res
}

@SymbolName("win32_kni_ReadConsoleA")
private external fun kni_ReadConsoleA(hConsoleInput: NativePtr, lpBuffer: NativePtr, nNumberOfCharsToRead: Int, lpNumberOfCharsRead: NativePtr, lpReserved: NativePtr): Int

fun ReadConsoleW(hConsoleInput: HANDLE?, lpBuffer: LPVOID?, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD?, lpReserved: LPVOID?): WINBOOL {
    val _hConsoleInput = hConsoleInput.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nNumberOfCharsToRead = nNumberOfCharsToRead
    val _lpNumberOfCharsRead = lpNumberOfCharsRead.rawValue
    val _lpReserved = lpReserved.rawValue
    val res = kni_ReadConsoleW(_hConsoleInput, _lpBuffer, _nNumberOfCharsToRead, _lpNumberOfCharsRead, _lpReserved)
    return res
}

@SymbolName("win32_kni_ReadConsoleW")
private external fun kni_ReadConsoleW(hConsoleInput: NativePtr, lpBuffer: NativePtr, nNumberOfCharsToRead: Int, lpNumberOfCharsRead: NativePtr, lpReserved: NativePtr): Int

fun WriteConsoleA(hConsoleOutput: HANDLE?, lpBuffer: COpaquePointer?, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: LPDWORD?, lpReserved: LPVOID?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nNumberOfCharsToWrite = nNumberOfCharsToWrite
    val _lpNumberOfCharsWritten = lpNumberOfCharsWritten.rawValue
    val _lpReserved = lpReserved.rawValue
    val res = kni_WriteConsoleA(_hConsoleOutput, _lpBuffer, _nNumberOfCharsToWrite, _lpNumberOfCharsWritten, _lpReserved)
    return res
}

@SymbolName("win32_kni_WriteConsoleA")
private external fun kni_WriteConsoleA(hConsoleOutput: NativePtr, lpBuffer: NativePtr, nNumberOfCharsToWrite: Int, lpNumberOfCharsWritten: NativePtr, lpReserved: NativePtr): Int

fun WriteConsoleW(hConsoleOutput: HANDLE?, lpBuffer: COpaquePointer?, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: LPDWORD?, lpReserved: LPVOID?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _nNumberOfCharsToWrite = nNumberOfCharsToWrite
    val _lpNumberOfCharsWritten = lpNumberOfCharsWritten.rawValue
    val _lpReserved = lpReserved.rawValue
    val res = kni_WriteConsoleW(_hConsoleOutput, _lpBuffer, _nNumberOfCharsToWrite, _lpNumberOfCharsWritten, _lpReserved)
    return res
}

@SymbolName("win32_kni_WriteConsoleW")
private external fun kni_WriteConsoleW(hConsoleOutput: NativePtr, lpBuffer: NativePtr, nNumberOfCharsToWrite: Int, lpNumberOfCharsWritten: NativePtr, lpReserved: NativePtr): Int

fun CreateConsoleScreenBuffer(dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: CValuesRef<SECURITY_ATTRIBUTES>?, dwFlags: DWORD, lpScreenBufferData: LPVOID?): HANDLE? {
    return memScoped {
        val _dwDesiredAccess = dwDesiredAccess
        val _dwShareMode = dwShareMode
        val _lpSecurityAttributes = lpSecurityAttributes?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _lpScreenBufferData = lpScreenBufferData.rawValue
        val res = kni_CreateConsoleScreenBuffer(_dwDesiredAccess, _dwShareMode, _lpSecurityAttributes, _dwFlags, _lpScreenBufferData)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CreateConsoleScreenBuffer")
private external fun kni_CreateConsoleScreenBuffer(dwDesiredAccess: Int, dwShareMode: Int, lpSecurityAttributes: NativePtr, dwFlags: Int, lpScreenBufferData: NativePtr): NativePtr

fun GetConsoleCP(): UINT {
    val res = kni_GetConsoleCP()
    return res
}

@SymbolName("win32_kni_GetConsoleCP")
private external fun kni_GetConsoleCP(): Int

fun SetConsoleCP(wCodePageID: UINT): WINBOOL {
    val _wCodePageID = wCodePageID
    val res = kni_SetConsoleCP(_wCodePageID)
    return res
}

@SymbolName("win32_kni_SetConsoleCP")
private external fun kni_SetConsoleCP(wCodePageID: Int): Int

fun GetConsoleOutputCP(): UINT {
    val res = kni_GetConsoleOutputCP()
    return res
}

@SymbolName("win32_kni_GetConsoleOutputCP")
private external fun kni_GetConsoleOutputCP(): Int

fun SetConsoleOutputCP(wCodePageID: UINT): WINBOOL {
    val _wCodePageID = wCodePageID
    val res = kni_SetConsoleOutputCP(_wCodePageID)
    return res
}

@SymbolName("win32_kni_SetConsoleOutputCP")
private external fun kni_SetConsoleOutputCP(wCodePageID: Int): Int

fun GetConsoleDisplayMode(lpModeFlags: LPDWORD?): WINBOOL {
    val _lpModeFlags = lpModeFlags.rawValue
    val res = kni_GetConsoleDisplayMode(_lpModeFlags)
    return res
}

@SymbolName("win32_kni_GetConsoleDisplayMode")
private external fun kni_GetConsoleDisplayMode(lpModeFlags: NativePtr): Int

fun SetConsoleDisplayMode(hConsoleOutput: HANDLE?, dwFlags: DWORD, lpNewScreenBufferDimensions: PCOORD?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _dwFlags = dwFlags
    val _lpNewScreenBufferDimensions = lpNewScreenBufferDimensions.rawValue
    val res = kni_SetConsoleDisplayMode(_hConsoleOutput, _dwFlags, _lpNewScreenBufferDimensions)
    return res
}

@SymbolName("win32_kni_SetConsoleDisplayMode")
private external fun kni_SetConsoleDisplayMode(hConsoleOutput: NativePtr, dwFlags: Int, lpNewScreenBufferDimensions: NativePtr): Int

fun GetConsoleWindow(): HWND? {
    val res = kni_GetConsoleWindow()
    return interpretCPointer<HWND__>(res)
}

@SymbolName("win32_kni_GetConsoleWindow")
private external fun kni_GetConsoleWindow(): NativePtr

fun GetConsoleProcessList(lpdwProcessList: LPDWORD?, dwProcessCount: DWORD): DWORD {
    val _lpdwProcessList = lpdwProcessList.rawValue
    val _dwProcessCount = dwProcessCount
    val res = kni_GetConsoleProcessList(_lpdwProcessList, _dwProcessCount)
    return res
}

@SymbolName("win32_kni_GetConsoleProcessList")
private external fun kni_GetConsoleProcessList(lpdwProcessList: NativePtr, dwProcessCount: Int): Int

fun AddConsoleAliasA(Source: LPSTR?, Target: LPSTR?, ExeName: LPSTR?): WINBOOL {
    val _Source = Source.rawValue
    val _Target = Target.rawValue
    val _ExeName = ExeName.rawValue
    val res = kni_AddConsoleAliasA(_Source, _Target, _ExeName)
    return res
}

@SymbolName("win32_kni_AddConsoleAliasA")
private external fun kni_AddConsoleAliasA(Source: NativePtr, Target: NativePtr, ExeName: NativePtr): Int

fun AddConsoleAliasW(Source: LPWSTR?, Target: LPWSTR?, ExeName: LPWSTR?): WINBOOL {
    val _Source = Source.rawValue
    val _Target = Target.rawValue
    val _ExeName = ExeName.rawValue
    val res = kni_AddConsoleAliasW(_Source, _Target, _ExeName)
    return res
}

@SymbolName("win32_kni_AddConsoleAliasW")
private external fun kni_AddConsoleAliasW(Source: NativePtr, Target: NativePtr, ExeName: NativePtr): Int

fun GetConsoleAliasA(Source: LPSTR?, TargetBuffer: LPSTR?, TargetBufferLength: DWORD, ExeName: LPSTR?): DWORD {
    val _Source = Source.rawValue
    val _TargetBuffer = TargetBuffer.rawValue
    val _TargetBufferLength = TargetBufferLength
    val _ExeName = ExeName.rawValue
    val res = kni_GetConsoleAliasA(_Source, _TargetBuffer, _TargetBufferLength, _ExeName)
    return res
}

@SymbolName("win32_kni_GetConsoleAliasA")
private external fun kni_GetConsoleAliasA(Source: NativePtr, TargetBuffer: NativePtr, TargetBufferLength: Int, ExeName: NativePtr): Int

fun GetConsoleAliasW(Source: LPWSTR?, TargetBuffer: LPWSTR?, TargetBufferLength: DWORD, ExeName: LPWSTR?): DWORD {
    val _Source = Source.rawValue
    val _TargetBuffer = TargetBuffer.rawValue
    val _TargetBufferLength = TargetBufferLength
    val _ExeName = ExeName.rawValue
    val res = kni_GetConsoleAliasW(_Source, _TargetBuffer, _TargetBufferLength, _ExeName)
    return res
}

@SymbolName("win32_kni_GetConsoleAliasW")
private external fun kni_GetConsoleAliasW(Source: NativePtr, TargetBuffer: NativePtr, TargetBufferLength: Int, ExeName: NativePtr): Int

fun GetConsoleAliasesLengthA(ExeName: LPSTR?): DWORD {
    val _ExeName = ExeName.rawValue
    val res = kni_GetConsoleAliasesLengthA(_ExeName)
    return res
}

@SymbolName("win32_kni_GetConsoleAliasesLengthA")
private external fun kni_GetConsoleAliasesLengthA(ExeName: NativePtr): Int

fun GetConsoleAliasesLengthW(ExeName: LPWSTR?): DWORD {
    val _ExeName = ExeName.rawValue
    val res = kni_GetConsoleAliasesLengthW(_ExeName)
    return res
}

@SymbolName("win32_kni_GetConsoleAliasesLengthW")
private external fun kni_GetConsoleAliasesLengthW(ExeName: NativePtr): Int

fun GetConsoleAliasExesLengthA(): DWORD {
    val res = kni_GetConsoleAliasExesLengthA()
    return res
}

@SymbolName("win32_kni_GetConsoleAliasExesLengthA")
private external fun kni_GetConsoleAliasExesLengthA(): Int

fun GetConsoleAliasExesLengthW(): DWORD {
    val res = kni_GetConsoleAliasExesLengthW()
    return res
}

@SymbolName("win32_kni_GetConsoleAliasExesLengthW")
private external fun kni_GetConsoleAliasExesLengthW(): Int

fun GetConsoleAliasesA(AliasBuffer: LPSTR?, AliasBufferLength: DWORD, ExeName: LPSTR?): DWORD {
    val _AliasBuffer = AliasBuffer.rawValue
    val _AliasBufferLength = AliasBufferLength
    val _ExeName = ExeName.rawValue
    val res = kni_GetConsoleAliasesA(_AliasBuffer, _AliasBufferLength, _ExeName)
    return res
}

@SymbolName("win32_kni_GetConsoleAliasesA")
private external fun kni_GetConsoleAliasesA(AliasBuffer: NativePtr, AliasBufferLength: Int, ExeName: NativePtr): Int

fun GetConsoleAliasesW(AliasBuffer: LPWSTR?, AliasBufferLength: DWORD, ExeName: LPWSTR?): DWORD {
    val _AliasBuffer = AliasBuffer.rawValue
    val _AliasBufferLength = AliasBufferLength
    val _ExeName = ExeName.rawValue
    val res = kni_GetConsoleAliasesW(_AliasBuffer, _AliasBufferLength, _ExeName)
    return res
}

@SymbolName("win32_kni_GetConsoleAliasesW")
private external fun kni_GetConsoleAliasesW(AliasBuffer: NativePtr, AliasBufferLength: Int, ExeName: NativePtr): Int

fun GetConsoleAliasExesA(ExeNameBuffer: LPSTR?, ExeNameBufferLength: DWORD): DWORD {
    val _ExeNameBuffer = ExeNameBuffer.rawValue
    val _ExeNameBufferLength = ExeNameBufferLength
    val res = kni_GetConsoleAliasExesA(_ExeNameBuffer, _ExeNameBufferLength)
    return res
}

@SymbolName("win32_kni_GetConsoleAliasExesA")
private external fun kni_GetConsoleAliasExesA(ExeNameBuffer: NativePtr, ExeNameBufferLength: Int): Int

fun GetConsoleAliasExesW(ExeNameBuffer: LPWSTR?, ExeNameBufferLength: DWORD): DWORD {
    val _ExeNameBuffer = ExeNameBuffer.rawValue
    val _ExeNameBufferLength = ExeNameBufferLength
    val res = kni_GetConsoleAliasExesW(_ExeNameBuffer, _ExeNameBufferLength)
    return res
}

@SymbolName("win32_kni_GetConsoleAliasExesW")
private external fun kni_GetConsoleAliasExesW(ExeNameBuffer: NativePtr, ExeNameBufferLength: Int): Int

fun GetConsoleHistoryInfo(lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO?): WINBOOL {
    val _lpConsoleHistoryInfo = lpConsoleHistoryInfo.rawValue
    val res = kni_GetConsoleHistoryInfo(_lpConsoleHistoryInfo)
    return res
}

@SymbolName("win32_kni_GetConsoleHistoryInfo")
private external fun kni_GetConsoleHistoryInfo(lpConsoleHistoryInfo: NativePtr): Int

fun GetConsoleScreenBufferInfoEx(hConsoleOutput: HANDLE?, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _lpConsoleScreenBufferInfoEx = lpConsoleScreenBufferInfoEx.rawValue
    val res = kni_GetConsoleScreenBufferInfoEx(_hConsoleOutput, _lpConsoleScreenBufferInfoEx)
    return res
}

@SymbolName("win32_kni_GetConsoleScreenBufferInfoEx")
private external fun kni_GetConsoleScreenBufferInfoEx(hConsoleOutput: NativePtr, lpConsoleScreenBufferInfoEx: NativePtr): Int

fun GetCurrentConsoleFontEx(hConsoleOutput: HANDLE?, bMaximumWindow: WINBOOL, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _bMaximumWindow = bMaximumWindow
    val _lpConsoleCurrentFontEx = lpConsoleCurrentFontEx.rawValue
    val res = kni_GetCurrentConsoleFontEx(_hConsoleOutput, _bMaximumWindow, _lpConsoleCurrentFontEx)
    return res
}

@SymbolName("win32_kni_GetCurrentConsoleFontEx")
private external fun kni_GetCurrentConsoleFontEx(hConsoleOutput: NativePtr, bMaximumWindow: Int, lpConsoleCurrentFontEx: NativePtr): Int

fun SetConsoleHistoryInfo(lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO?): WINBOOL {
    val _lpConsoleHistoryInfo = lpConsoleHistoryInfo.rawValue
    val res = kni_SetConsoleHistoryInfo(_lpConsoleHistoryInfo)
    return res
}

@SymbolName("win32_kni_SetConsoleHistoryInfo")
private external fun kni_SetConsoleHistoryInfo(lpConsoleHistoryInfo: NativePtr): Int

fun SetConsoleScreenBufferInfoEx(hConsoleOutput: HANDLE?, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _lpConsoleScreenBufferInfoEx = lpConsoleScreenBufferInfoEx.rawValue
    val res = kni_SetConsoleScreenBufferInfoEx(_hConsoleOutput, _lpConsoleScreenBufferInfoEx)
    return res
}

@SymbolName("win32_kni_SetConsoleScreenBufferInfoEx")
private external fun kni_SetConsoleScreenBufferInfoEx(hConsoleOutput: NativePtr, lpConsoleScreenBufferInfoEx: NativePtr): Int

fun SetCurrentConsoleFontEx(hConsoleOutput: HANDLE?, bMaximumWindow: WINBOOL, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX?): WINBOOL {
    val _hConsoleOutput = hConsoleOutput.rawValue
    val _bMaximumWindow = bMaximumWindow
    val _lpConsoleCurrentFontEx = lpConsoleCurrentFontEx.rawValue
    val res = kni_SetCurrentConsoleFontEx(_hConsoleOutput, _bMaximumWindow, _lpConsoleCurrentFontEx)
    return res
}

@SymbolName("win32_kni_SetCurrentConsoleFontEx")
private external fun kni_SetCurrentConsoleFontEx(hConsoleOutput: NativePtr, bMaximumWindow: Int, lpConsoleCurrentFontEx: NativePtr): Int

fun VerFindFileA(uFlags: DWORD, szFileName: LPSTR?, szWinDir: LPSTR?, szAppDir: LPSTR?, szCurDir: LPSTR?, lpuCurDirLen: PUINT?, szDestDir: LPSTR?, lpuDestDirLen: PUINT?): DWORD {
    val _uFlags = uFlags
    val _szFileName = szFileName.rawValue
    val _szWinDir = szWinDir.rawValue
    val _szAppDir = szAppDir.rawValue
    val _szCurDir = szCurDir.rawValue
    val _lpuCurDirLen = lpuCurDirLen.rawValue
    val _szDestDir = szDestDir.rawValue
    val _lpuDestDirLen = lpuDestDirLen.rawValue
    val res = kni_VerFindFileA(_uFlags, _szFileName, _szWinDir, _szAppDir, _szCurDir, _lpuCurDirLen, _szDestDir, _lpuDestDirLen)
    return res
}

@SymbolName("win32_kni_VerFindFileA")
private external fun kni_VerFindFileA(uFlags: Int, szFileName: NativePtr, szWinDir: NativePtr, szAppDir: NativePtr, szCurDir: NativePtr, lpuCurDirLen: NativePtr, szDestDir: NativePtr, lpuDestDirLen: NativePtr): Int

fun VerFindFileW(uFlags: DWORD, szFileName: LPWSTR?, szWinDir: LPWSTR?, szAppDir: LPWSTR?, szCurDir: LPWSTR?, lpuCurDirLen: PUINT?, szDestDir: LPWSTR?, lpuDestDirLen: PUINT?): DWORD {
    val _uFlags = uFlags
    val _szFileName = szFileName.rawValue
    val _szWinDir = szWinDir.rawValue
    val _szAppDir = szAppDir.rawValue
    val _szCurDir = szCurDir.rawValue
    val _lpuCurDirLen = lpuCurDirLen.rawValue
    val _szDestDir = szDestDir.rawValue
    val _lpuDestDirLen = lpuDestDirLen.rawValue
    val res = kni_VerFindFileW(_uFlags, _szFileName, _szWinDir, _szAppDir, _szCurDir, _lpuCurDirLen, _szDestDir, _lpuDestDirLen)
    return res
}

@SymbolName("win32_kni_VerFindFileW")
private external fun kni_VerFindFileW(uFlags: Int, szFileName: NativePtr, szWinDir: NativePtr, szAppDir: NativePtr, szCurDir: NativePtr, lpuCurDirLen: NativePtr, szDestDir: NativePtr, lpuDestDirLen: NativePtr): Int

fun VerInstallFileA(uFlags: DWORD, szSrcFileName: LPSTR?, szDestFileName: LPSTR?, szSrcDir: LPSTR?, szDestDir: LPSTR?, szCurDir: LPSTR?, szTmpFile: LPSTR?, lpuTmpFileLen: PUINT?): DWORD {
    val _uFlags = uFlags
    val _szSrcFileName = szSrcFileName.rawValue
    val _szDestFileName = szDestFileName.rawValue
    val _szSrcDir = szSrcDir.rawValue
    val _szDestDir = szDestDir.rawValue
    val _szCurDir = szCurDir.rawValue
    val _szTmpFile = szTmpFile.rawValue
    val _lpuTmpFileLen = lpuTmpFileLen.rawValue
    val res = kni_VerInstallFileA(_uFlags, _szSrcFileName, _szDestFileName, _szSrcDir, _szDestDir, _szCurDir, _szTmpFile, _lpuTmpFileLen)
    return res
}

@SymbolName("win32_kni_VerInstallFileA")
private external fun kni_VerInstallFileA(uFlags: Int, szSrcFileName: NativePtr, szDestFileName: NativePtr, szSrcDir: NativePtr, szDestDir: NativePtr, szCurDir: NativePtr, szTmpFile: NativePtr, lpuTmpFileLen: NativePtr): Int

fun VerInstallFileW(uFlags: DWORD, szSrcFileName: LPWSTR?, szDestFileName: LPWSTR?, szSrcDir: LPWSTR?, szDestDir: LPWSTR?, szCurDir: LPWSTR?, szTmpFile: LPWSTR?, lpuTmpFileLen: PUINT?): DWORD {
    val _uFlags = uFlags
    val _szSrcFileName = szSrcFileName.rawValue
    val _szDestFileName = szDestFileName.rawValue
    val _szSrcDir = szSrcDir.rawValue
    val _szDestDir = szDestDir.rawValue
    val _szCurDir = szCurDir.rawValue
    val _szTmpFile = szTmpFile.rawValue
    val _lpuTmpFileLen = lpuTmpFileLen.rawValue
    val res = kni_VerInstallFileW(_uFlags, _szSrcFileName, _szDestFileName, _szSrcDir, _szDestDir, _szCurDir, _szTmpFile, _lpuTmpFileLen)
    return res
}

@SymbolName("win32_kni_VerInstallFileW")
private external fun kni_VerInstallFileW(uFlags: Int, szSrcFileName: NativePtr, szDestFileName: NativePtr, szSrcDir: NativePtr, szDestDir: NativePtr, szCurDir: NativePtr, szTmpFile: NativePtr, lpuTmpFileLen: NativePtr): Int

fun GetFileVersionInfoSizeA(lptstrFilename: String?, lpdwHandle: LPDWORD?): DWORD {
    return memScoped {
        val _lptstrFilename = lptstrFilename?.cstr?.getPointer(memScope).rawValue
        val _lpdwHandle = lpdwHandle.rawValue
        val res = kni_GetFileVersionInfoSizeA(_lptstrFilename, _lpdwHandle)
        res
    }
}

@SymbolName("win32_kni_GetFileVersionInfoSizeA")
private external fun kni_GetFileVersionInfoSizeA(lptstrFilename: NativePtr, lpdwHandle: NativePtr): Int

fun GetFileVersionInfoSizeW(lptstrFilename: String?, lpdwHandle: LPDWORD?): DWORD {
    return memScoped {
        val _lptstrFilename = lptstrFilename?.wcstr?.getPointer(memScope).rawValue
        val _lpdwHandle = lpdwHandle.rawValue
        val res = kni_GetFileVersionInfoSizeW(_lptstrFilename, _lpdwHandle)
        res
    }
}

@SymbolName("win32_kni_GetFileVersionInfoSizeW")
private external fun kni_GetFileVersionInfoSizeW(lptstrFilename: NativePtr, lpdwHandle: NativePtr): Int

fun GetFileVersionInfoA(lptstrFilename: String?, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID?): WINBOOL {
    return memScoped {
        val _lptstrFilename = lptstrFilename?.cstr?.getPointer(memScope).rawValue
        val _dwHandle = dwHandle
        val _dwLen = dwLen
        val _lpData = lpData.rawValue
        val res = kni_GetFileVersionInfoA(_lptstrFilename, _dwHandle, _dwLen, _lpData)
        res
    }
}

@SymbolName("win32_kni_GetFileVersionInfoA")
private external fun kni_GetFileVersionInfoA(lptstrFilename: NativePtr, dwHandle: Int, dwLen: Int, lpData: NativePtr): Int

fun GetFileVersionInfoW(lptstrFilename: String?, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID?): WINBOOL {
    return memScoped {
        val _lptstrFilename = lptstrFilename?.wcstr?.getPointer(memScope).rawValue
        val _dwHandle = dwHandle
        val _dwLen = dwLen
        val _lpData = lpData.rawValue
        val res = kni_GetFileVersionInfoW(_lptstrFilename, _dwHandle, _dwLen, _lpData)
        res
    }
}

@SymbolName("win32_kni_GetFileVersionInfoW")
private external fun kni_GetFileVersionInfoW(lptstrFilename: NativePtr, dwHandle: Int, dwLen: Int, lpData: NativePtr): Int

fun VerLanguageNameA(wLang: DWORD, szLang: LPSTR?, nSize: DWORD): DWORD {
    val _wLang = wLang
    val _szLang = szLang.rawValue
    val _nSize = nSize
    val res = kni_VerLanguageNameA(_wLang, _szLang, _nSize)
    return res
}

@SymbolName("win32_kni_VerLanguageNameA")
private external fun kni_VerLanguageNameA(wLang: Int, szLang: NativePtr, nSize: Int): Int

fun VerLanguageNameW(wLang: DWORD, szLang: LPWSTR?, nSize: DWORD): DWORD {
    val _wLang = wLang
    val _szLang = szLang.rawValue
    val _nSize = nSize
    val res = kni_VerLanguageNameW(_wLang, _szLang, _nSize)
    return res
}

@SymbolName("win32_kni_VerLanguageNameW")
private external fun kni_VerLanguageNameW(wLang: Int, szLang: NativePtr, nSize: Int): Int

fun VerQueryValueA(pBlock: LPCVOID?, lpSubBlock: String?, lplpBuffer: CValuesRef<LPVOIDVar>?, puLen: PUINT?): WINBOOL {
    return memScoped {
        val _pBlock = pBlock.rawValue
        val _lpSubBlock = lpSubBlock?.cstr?.getPointer(memScope).rawValue
        val _lplpBuffer = lplpBuffer?.getPointer(memScope).rawValue
        val _puLen = puLen.rawValue
        val res = kni_VerQueryValueA(_pBlock, _lpSubBlock, _lplpBuffer, _puLen)
        res
    }
}

@SymbolName("win32_kni_VerQueryValueA")
private external fun kni_VerQueryValueA(pBlock: NativePtr, lpSubBlock: NativePtr, lplpBuffer: NativePtr, puLen: NativePtr): Int

fun VerQueryValueW(pBlock: LPCVOID?, lpSubBlock: String?, lplpBuffer: CValuesRef<LPVOIDVar>?, puLen: PUINT?): WINBOOL {
    return memScoped {
        val _pBlock = pBlock.rawValue
        val _lpSubBlock = lpSubBlock?.wcstr?.getPointer(memScope).rawValue
        val _lplpBuffer = lplpBuffer?.getPointer(memScope).rawValue
        val _puLen = puLen.rawValue
        val res = kni_VerQueryValueW(_pBlock, _lpSubBlock, _lplpBuffer, _puLen)
        res
    }
}

@SymbolName("win32_kni_VerQueryValueW")
private external fun kni_VerQueryValueW(pBlock: NativePtr, lpSubBlock: NativePtr, lplpBuffer: NativePtr, puLen: NativePtr): Int

fun RegCloseKey(hKey: HKEY?): LONG {
    val _hKey = hKey.rawValue
    val res = kni_RegCloseKey(_hKey)
    return res
}

@SymbolName("win32_kni_RegCloseKey")
private external fun kni_RegCloseKey(hKey: NativePtr): Int

fun RegOverridePredefKey(hKey: HKEY?, hNewHKey: HKEY?): LONG {
    val _hKey = hKey.rawValue
    val _hNewHKey = hNewHKey.rawValue
    val res = kni_RegOverridePredefKey(_hKey, _hNewHKey)
    return res
}

@SymbolName("win32_kni_RegOverridePredefKey")
private external fun kni_RegOverridePredefKey(hKey: NativePtr, hNewHKey: NativePtr): Int

fun RegOpenUserClassesRoot(hToken: HANDLE?, dwOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY?): LONG {
    val _hToken = hToken.rawValue
    val _dwOptions = dwOptions
    val _samDesired = samDesired
    val _phkResult = phkResult.rawValue
    val res = kni_RegOpenUserClassesRoot(_hToken, _dwOptions, _samDesired, _phkResult)
    return res
}

@SymbolName("win32_kni_RegOpenUserClassesRoot")
private external fun kni_RegOpenUserClassesRoot(hToken: NativePtr, dwOptions: Int, samDesired: Int, phkResult: NativePtr): Int

fun RegOpenCurrentUser(samDesired: REGSAM, phkResult: PHKEY?): LONG {
    val _samDesired = samDesired
    val _phkResult = phkResult.rawValue
    val res = kni_RegOpenCurrentUser(_samDesired, _phkResult)
    return res
}

@SymbolName("win32_kni_RegOpenCurrentUser")
private external fun kni_RegOpenCurrentUser(samDesired: Int, phkResult: NativePtr): Int

fun RegDisablePredefinedCache(): LONG {
    val res = kni_RegDisablePredefinedCache()
    return res
}

@SymbolName("win32_kni_RegDisablePredefinedCache")
private external fun kni_RegDisablePredefinedCache(): Int

fun RegConnectRegistryA(lpMachineName: String?, hKey: HKEY?, phkResult: PHKEY?): LONG {
    return memScoped {
        val _lpMachineName = lpMachineName?.cstr?.getPointer(memScope).rawValue
        val _hKey = hKey.rawValue
        val _phkResult = phkResult.rawValue
        val res = kni_RegConnectRegistryA(_lpMachineName, _hKey, _phkResult)
        res
    }
}

@SymbolName("win32_kni_RegConnectRegistryA")
private external fun kni_RegConnectRegistryA(lpMachineName: NativePtr, hKey: NativePtr, phkResult: NativePtr): Int

fun RegConnectRegistryW(lpMachineName: String?, hKey: HKEY?, phkResult: PHKEY?): LONG {
    return memScoped {
        val _lpMachineName = lpMachineName?.wcstr?.getPointer(memScope).rawValue
        val _hKey = hKey.rawValue
        val _phkResult = phkResult.rawValue
        val res = kni_RegConnectRegistryW(_lpMachineName, _hKey, _phkResult)
        res
    }
}

@SymbolName("win32_kni_RegConnectRegistryW")
private external fun kni_RegConnectRegistryW(lpMachineName: NativePtr, hKey: NativePtr, phkResult: NativePtr): Int

fun RegConnectRegistryExA(lpMachineName: String?, hKey: HKEY?, Flags: ULONG, phkResult: PHKEY?): LONG {
    return memScoped {
        val _lpMachineName = lpMachineName?.cstr?.getPointer(memScope).rawValue
        val _hKey = hKey.rawValue
        val _Flags = Flags
        val _phkResult = phkResult.rawValue
        val res = kni_RegConnectRegistryExA(_lpMachineName, _hKey, _Flags, _phkResult)
        res
    }
}

@SymbolName("win32_kni_RegConnectRegistryExA")
private external fun kni_RegConnectRegistryExA(lpMachineName: NativePtr, hKey: NativePtr, Flags: Int, phkResult: NativePtr): Int

fun RegConnectRegistryExW(lpMachineName: String?, hKey: HKEY?, Flags: ULONG, phkResult: PHKEY?): LONG {
    return memScoped {
        val _lpMachineName = lpMachineName?.wcstr?.getPointer(memScope).rawValue
        val _hKey = hKey.rawValue
        val _Flags = Flags
        val _phkResult = phkResult.rawValue
        val res = kni_RegConnectRegistryExW(_lpMachineName, _hKey, _Flags, _phkResult)
        res
    }
}

@SymbolName("win32_kni_RegConnectRegistryExW")
private external fun kni_RegConnectRegistryExW(lpMachineName: NativePtr, hKey: NativePtr, Flags: Int, phkResult: NativePtr): Int

fun RegCreateKeyA(hKey: HKEY?, lpSubKey: String?, phkResult: PHKEY?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val _phkResult = phkResult.rawValue
        val res = kni_RegCreateKeyA(_hKey, _lpSubKey, _phkResult)
        res
    }
}

@SymbolName("win32_kni_RegCreateKeyA")
private external fun kni_RegCreateKeyA(hKey: NativePtr, lpSubKey: NativePtr, phkResult: NativePtr): Int

fun RegCreateKeyW(hKey: HKEY?, lpSubKey: String?, phkResult: PHKEY?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val _phkResult = phkResult.rawValue
        val res = kni_RegCreateKeyW(_hKey, _lpSubKey, _phkResult)
        res
    }
}

@SymbolName("win32_kni_RegCreateKeyW")
private external fun kni_RegCreateKeyW(hKey: NativePtr, lpSubKey: NativePtr, phkResult: NativePtr): Int

fun RegCreateKeyExA(hKey: HKEY?, lpSubKey: String?, Reserved: DWORD, lpClass: LPSTR?, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?, phkResult: PHKEY?, lpdwDisposition: LPDWORD?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val _Reserved = Reserved
        val _lpClass = lpClass.rawValue
        val _dwOptions = dwOptions
        val _samDesired = samDesired
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val _phkResult = phkResult.rawValue
        val _lpdwDisposition = lpdwDisposition.rawValue
        val res = kni_RegCreateKeyExA(_hKey, _lpSubKey, _Reserved, _lpClass, _dwOptions, _samDesired, _lpSecurityAttributes, _phkResult, _lpdwDisposition)
        res
    }
}

@SymbolName("win32_kni_RegCreateKeyExA")
private external fun kni_RegCreateKeyExA(hKey: NativePtr, lpSubKey: NativePtr, Reserved: Int, lpClass: NativePtr, dwOptions: Int, samDesired: Int, lpSecurityAttributes: NativePtr, phkResult: NativePtr, lpdwDisposition: NativePtr): Int

fun RegCreateKeyExW(hKey: HKEY?, lpSubKey: String?, Reserved: DWORD, lpClass: LPWSTR?, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?, phkResult: PHKEY?, lpdwDisposition: LPDWORD?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val _Reserved = Reserved
        val _lpClass = lpClass.rawValue
        val _dwOptions = dwOptions
        val _samDesired = samDesired
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val _phkResult = phkResult.rawValue
        val _lpdwDisposition = lpdwDisposition.rawValue
        val res = kni_RegCreateKeyExW(_hKey, _lpSubKey, _Reserved, _lpClass, _dwOptions, _samDesired, _lpSecurityAttributes, _phkResult, _lpdwDisposition)
        res
    }
}

@SymbolName("win32_kni_RegCreateKeyExW")
private external fun kni_RegCreateKeyExW(hKey: NativePtr, lpSubKey: NativePtr, Reserved: Int, lpClass: NativePtr, dwOptions: Int, samDesired: Int, lpSecurityAttributes: NativePtr, phkResult: NativePtr, lpdwDisposition: NativePtr): Int

fun RegDeleteKeyA(hKey: HKEY?, lpSubKey: String?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val res = kni_RegDeleteKeyA(_hKey, _lpSubKey)
        res
    }
}

@SymbolName("win32_kni_RegDeleteKeyA")
private external fun kni_RegDeleteKeyA(hKey: NativePtr, lpSubKey: NativePtr): Int

fun RegDeleteKeyW(hKey: HKEY?, lpSubKey: String?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val res = kni_RegDeleteKeyW(_hKey, _lpSubKey)
        res
    }
}

@SymbolName("win32_kni_RegDeleteKeyW")
private external fun kni_RegDeleteKeyW(hKey: NativePtr, lpSubKey: NativePtr): Int

fun RegDeleteKeyExA(hKey: HKEY?, lpSubKey: String?, samDesired: REGSAM, Reserved: DWORD): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val _samDesired = samDesired
        val _Reserved = Reserved
        val res = kni_RegDeleteKeyExA(_hKey, _lpSubKey, _samDesired, _Reserved)
        res
    }
}

@SymbolName("win32_kni_RegDeleteKeyExA")
private external fun kni_RegDeleteKeyExA(hKey: NativePtr, lpSubKey: NativePtr, samDesired: Int, Reserved: Int): Int

fun RegDeleteKeyExW(hKey: HKEY?, lpSubKey: String?, samDesired: REGSAM, Reserved: DWORD): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val _samDesired = samDesired
        val _Reserved = Reserved
        val res = kni_RegDeleteKeyExW(_hKey, _lpSubKey, _samDesired, _Reserved)
        res
    }
}

@SymbolName("win32_kni_RegDeleteKeyExW")
private external fun kni_RegDeleteKeyExW(hKey: NativePtr, lpSubKey: NativePtr, samDesired: Int, Reserved: Int): Int

fun RegDisableReflectionKey(hBase: HKEY?): LONG {
    val _hBase = hBase.rawValue
    val res = kni_RegDisableReflectionKey(_hBase)
    return res
}

@SymbolName("win32_kni_RegDisableReflectionKey")
private external fun kni_RegDisableReflectionKey(hBase: NativePtr): Int

fun RegEnableReflectionKey(hBase: HKEY?): LONG {
    val _hBase = hBase.rawValue
    val res = kni_RegEnableReflectionKey(_hBase)
    return res
}

@SymbolName("win32_kni_RegEnableReflectionKey")
private external fun kni_RegEnableReflectionKey(hBase: NativePtr): Int

fun RegQueryReflectionKey(hBase: HKEY?, bIsReflectionDisabled: CValuesRef<WINBOOLVar>?): LONG {
    return memScoped {
        val _hBase = hBase.rawValue
        val _bIsReflectionDisabled = bIsReflectionDisabled?.getPointer(memScope).rawValue
        val res = kni_RegQueryReflectionKey(_hBase, _bIsReflectionDisabled)
        res
    }
}

@SymbolName("win32_kni_RegQueryReflectionKey")
private external fun kni_RegQueryReflectionKey(hBase: NativePtr, bIsReflectionDisabled: NativePtr): Int

fun RegDeleteValueA(hKey: HKEY?, lpValueName: String?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpValueName = lpValueName?.cstr?.getPointer(memScope).rawValue
        val res = kni_RegDeleteValueA(_hKey, _lpValueName)
        res
    }
}

@SymbolName("win32_kni_RegDeleteValueA")
private external fun kni_RegDeleteValueA(hKey: NativePtr, lpValueName: NativePtr): Int

fun RegDeleteValueW(hKey: HKEY?, lpValueName: String?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpValueName = lpValueName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_RegDeleteValueW(_hKey, _lpValueName)
        res
    }
}

@SymbolName("win32_kni_RegDeleteValueW")
private external fun kni_RegDeleteValueW(hKey: NativePtr, lpValueName: NativePtr): Int

fun RegEnumKeyA(hKey: HKEY?, dwIndex: DWORD, lpName: LPSTR?, cchName: DWORD): LONG {
    val _hKey = hKey.rawValue
    val _dwIndex = dwIndex
    val _lpName = lpName.rawValue
    val _cchName = cchName
    val res = kni_RegEnumKeyA(_hKey, _dwIndex, _lpName, _cchName)
    return res
}

@SymbolName("win32_kni_RegEnumKeyA")
private external fun kni_RegEnumKeyA(hKey: NativePtr, dwIndex: Int, lpName: NativePtr, cchName: Int): Int

fun RegEnumKeyW(hKey: HKEY?, dwIndex: DWORD, lpName: LPWSTR?, cchName: DWORD): LONG {
    val _hKey = hKey.rawValue
    val _dwIndex = dwIndex
    val _lpName = lpName.rawValue
    val _cchName = cchName
    val res = kni_RegEnumKeyW(_hKey, _dwIndex, _lpName, _cchName)
    return res
}

@SymbolName("win32_kni_RegEnumKeyW")
private external fun kni_RegEnumKeyW(hKey: NativePtr, dwIndex: Int, lpName: NativePtr, cchName: Int): Int

fun RegEnumKeyExA(hKey: HKEY?, dwIndex: DWORD, lpName: LPSTR?, lpcchName: LPDWORD?, lpReserved: LPDWORD?, lpClass: LPSTR?, lpcchClass: LPDWORD?, lpftLastWriteTime: PFILETIME?): LONG {
    val _hKey = hKey.rawValue
    val _dwIndex = dwIndex
    val _lpName = lpName.rawValue
    val _lpcchName = lpcchName.rawValue
    val _lpReserved = lpReserved.rawValue
    val _lpClass = lpClass.rawValue
    val _lpcchClass = lpcchClass.rawValue
    val _lpftLastWriteTime = lpftLastWriteTime.rawValue
    val res = kni_RegEnumKeyExA(_hKey, _dwIndex, _lpName, _lpcchName, _lpReserved, _lpClass, _lpcchClass, _lpftLastWriteTime)
    return res
}

@SymbolName("win32_kni_RegEnumKeyExA")
private external fun kni_RegEnumKeyExA(hKey: NativePtr, dwIndex: Int, lpName: NativePtr, lpcchName: NativePtr, lpReserved: NativePtr, lpClass: NativePtr, lpcchClass: NativePtr, lpftLastWriteTime: NativePtr): Int

fun RegEnumKeyExW(hKey: HKEY?, dwIndex: DWORD, lpName: LPWSTR?, lpcchName: LPDWORD?, lpReserved: LPDWORD?, lpClass: LPWSTR?, lpcchClass: LPDWORD?, lpftLastWriteTime: PFILETIME?): LONG {
    val _hKey = hKey.rawValue
    val _dwIndex = dwIndex
    val _lpName = lpName.rawValue
    val _lpcchName = lpcchName.rawValue
    val _lpReserved = lpReserved.rawValue
    val _lpClass = lpClass.rawValue
    val _lpcchClass = lpcchClass.rawValue
    val _lpftLastWriteTime = lpftLastWriteTime.rawValue
    val res = kni_RegEnumKeyExW(_hKey, _dwIndex, _lpName, _lpcchName, _lpReserved, _lpClass, _lpcchClass, _lpftLastWriteTime)
    return res
}

@SymbolName("win32_kni_RegEnumKeyExW")
private external fun kni_RegEnumKeyExW(hKey: NativePtr, dwIndex: Int, lpName: NativePtr, lpcchName: NativePtr, lpReserved: NativePtr, lpClass: NativePtr, lpcchClass: NativePtr, lpftLastWriteTime: NativePtr): Int

fun RegEnumValueA(hKey: HKEY?, dwIndex: DWORD, lpValueName: LPSTR?, lpcchValueName: LPDWORD?, lpReserved: LPDWORD?, lpType: LPDWORD?, lpData: LPBYTE?, lpcbData: LPDWORD?): LONG {
    val _hKey = hKey.rawValue
    val _dwIndex = dwIndex
    val _lpValueName = lpValueName.rawValue
    val _lpcchValueName = lpcchValueName.rawValue
    val _lpReserved = lpReserved.rawValue
    val _lpType = lpType.rawValue
    val _lpData = lpData.rawValue
    val _lpcbData = lpcbData.rawValue
    val res = kni_RegEnumValueA(_hKey, _dwIndex, _lpValueName, _lpcchValueName, _lpReserved, _lpType, _lpData, _lpcbData)
    return res
}

@SymbolName("win32_kni_RegEnumValueA")
private external fun kni_RegEnumValueA(hKey: NativePtr, dwIndex: Int, lpValueName: NativePtr, lpcchValueName: NativePtr, lpReserved: NativePtr, lpType: NativePtr, lpData: NativePtr, lpcbData: NativePtr): Int

fun RegEnumValueW(hKey: HKEY?, dwIndex: DWORD, lpValueName: LPWSTR?, lpcchValueName: LPDWORD?, lpReserved: LPDWORD?, lpType: LPDWORD?, lpData: LPBYTE?, lpcbData: LPDWORD?): LONG {
    val _hKey = hKey.rawValue
    val _dwIndex = dwIndex
    val _lpValueName = lpValueName.rawValue
    val _lpcchValueName = lpcchValueName.rawValue
    val _lpReserved = lpReserved.rawValue
    val _lpType = lpType.rawValue
    val _lpData = lpData.rawValue
    val _lpcbData = lpcbData.rawValue
    val res = kni_RegEnumValueW(_hKey, _dwIndex, _lpValueName, _lpcchValueName, _lpReserved, _lpType, _lpData, _lpcbData)
    return res
}

@SymbolName("win32_kni_RegEnumValueW")
private external fun kni_RegEnumValueW(hKey: NativePtr, dwIndex: Int, lpValueName: NativePtr, lpcchValueName: NativePtr, lpReserved: NativePtr, lpType: NativePtr, lpData: NativePtr, lpcbData: NativePtr): Int

fun RegFlushKey(hKey: HKEY?): LONG {
    val _hKey = hKey.rawValue
    val res = kni_RegFlushKey(_hKey)
    return res
}

@SymbolName("win32_kni_RegFlushKey")
private external fun kni_RegFlushKey(hKey: NativePtr): Int

fun RegGetKeySecurity(hKey: HKEY?, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR?, lpcbSecurityDescriptor: LPDWORD?): LONG {
    val _hKey = hKey.rawValue
    val _SecurityInformation = SecurityInformation
    val _pSecurityDescriptor = pSecurityDescriptor.rawValue
    val _lpcbSecurityDescriptor = lpcbSecurityDescriptor.rawValue
    val res = kni_RegGetKeySecurity(_hKey, _SecurityInformation, _pSecurityDescriptor, _lpcbSecurityDescriptor)
    return res
}

@SymbolName("win32_kni_RegGetKeySecurity")
private external fun kni_RegGetKeySecurity(hKey: NativePtr, SecurityInformation: Int, pSecurityDescriptor: NativePtr, lpcbSecurityDescriptor: NativePtr): Int

fun RegLoadKeyA(hKey: HKEY?, lpSubKey: String?, lpFile: String?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val _lpFile = lpFile?.cstr?.getPointer(memScope).rawValue
        val res = kni_RegLoadKeyA(_hKey, _lpSubKey, _lpFile)
        res
    }
}

@SymbolName("win32_kni_RegLoadKeyA")
private external fun kni_RegLoadKeyA(hKey: NativePtr, lpSubKey: NativePtr, lpFile: NativePtr): Int

fun RegLoadKeyW(hKey: HKEY?, lpSubKey: String?, lpFile: String?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val _lpFile = lpFile?.wcstr?.getPointer(memScope).rawValue
        val res = kni_RegLoadKeyW(_hKey, _lpSubKey, _lpFile)
        res
    }
}

@SymbolName("win32_kni_RegLoadKeyW")
private external fun kni_RegLoadKeyW(hKey: NativePtr, lpSubKey: NativePtr, lpFile: NativePtr): Int

fun RegNotifyChangeKeyValue(hKey: HKEY?, bWatchSubtree: WINBOOL, dwNotifyFilter: DWORD, hEvent: HANDLE?, fAsynchronous: WINBOOL): LONG {
    val _hKey = hKey.rawValue
    val _bWatchSubtree = bWatchSubtree
    val _dwNotifyFilter = dwNotifyFilter
    val _hEvent = hEvent.rawValue
    val _fAsynchronous = fAsynchronous
    val res = kni_RegNotifyChangeKeyValue(_hKey, _bWatchSubtree, _dwNotifyFilter, _hEvent, _fAsynchronous)
    return res
}

@SymbolName("win32_kni_RegNotifyChangeKeyValue")
private external fun kni_RegNotifyChangeKeyValue(hKey: NativePtr, bWatchSubtree: Int, dwNotifyFilter: Int, hEvent: NativePtr, fAsynchronous: Int): Int

fun RegOpenKeyA(hKey: HKEY?, lpSubKey: String?, phkResult: PHKEY?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val _phkResult = phkResult.rawValue
        val res = kni_RegOpenKeyA(_hKey, _lpSubKey, _phkResult)
        res
    }
}

@SymbolName("win32_kni_RegOpenKeyA")
private external fun kni_RegOpenKeyA(hKey: NativePtr, lpSubKey: NativePtr, phkResult: NativePtr): Int

fun RegOpenKeyW(hKey: HKEY?, lpSubKey: String?, phkResult: PHKEY?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val _phkResult = phkResult.rawValue
        val res = kni_RegOpenKeyW(_hKey, _lpSubKey, _phkResult)
        res
    }
}

@SymbolName("win32_kni_RegOpenKeyW")
private external fun kni_RegOpenKeyW(hKey: NativePtr, lpSubKey: NativePtr, phkResult: NativePtr): Int

fun RegOpenKeyExA(hKey: HKEY?, lpSubKey: String?, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val _ulOptions = ulOptions
        val _samDesired = samDesired
        val _phkResult = phkResult.rawValue
        val res = kni_RegOpenKeyExA(_hKey, _lpSubKey, _ulOptions, _samDesired, _phkResult)
        res
    }
}

@SymbolName("win32_kni_RegOpenKeyExA")
private external fun kni_RegOpenKeyExA(hKey: NativePtr, lpSubKey: NativePtr, ulOptions: Int, samDesired: Int, phkResult: NativePtr): Int

fun RegOpenKeyExW(hKey: HKEY?, lpSubKey: String?, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val _ulOptions = ulOptions
        val _samDesired = samDesired
        val _phkResult = phkResult.rawValue
        val res = kni_RegOpenKeyExW(_hKey, _lpSubKey, _ulOptions, _samDesired, _phkResult)
        res
    }
}

@SymbolName("win32_kni_RegOpenKeyExW")
private external fun kni_RegOpenKeyExW(hKey: NativePtr, lpSubKey: NativePtr, ulOptions: Int, samDesired: Int, phkResult: NativePtr): Int

fun RegQueryInfoKeyA(hKey: HKEY?, lpClass: LPSTR?, lpcchClass: LPDWORD?, lpReserved: LPDWORD?, lpcSubKeys: LPDWORD?, lpcbMaxSubKeyLen: LPDWORD?, lpcbMaxClassLen: LPDWORD?, lpcValues: LPDWORD?, lpcbMaxValueNameLen: LPDWORD?, lpcbMaxValueLen: LPDWORD?, lpcbSecurityDescriptor: LPDWORD?, lpftLastWriteTime: PFILETIME?): LONG {
    val _hKey = hKey.rawValue
    val _lpClass = lpClass.rawValue
    val _lpcchClass = lpcchClass.rawValue
    val _lpReserved = lpReserved.rawValue
    val _lpcSubKeys = lpcSubKeys.rawValue
    val _lpcbMaxSubKeyLen = lpcbMaxSubKeyLen.rawValue
    val _lpcbMaxClassLen = lpcbMaxClassLen.rawValue
    val _lpcValues = lpcValues.rawValue
    val _lpcbMaxValueNameLen = lpcbMaxValueNameLen.rawValue
    val _lpcbMaxValueLen = lpcbMaxValueLen.rawValue
    val _lpcbSecurityDescriptor = lpcbSecurityDescriptor.rawValue
    val _lpftLastWriteTime = lpftLastWriteTime.rawValue
    val res = kni_RegQueryInfoKeyA(_hKey, _lpClass, _lpcchClass, _lpReserved, _lpcSubKeys, _lpcbMaxSubKeyLen, _lpcbMaxClassLen, _lpcValues, _lpcbMaxValueNameLen, _lpcbMaxValueLen, _lpcbSecurityDescriptor, _lpftLastWriteTime)
    return res
}

@SymbolName("win32_kni_RegQueryInfoKeyA")
private external fun kni_RegQueryInfoKeyA(hKey: NativePtr, lpClass: NativePtr, lpcchClass: NativePtr, lpReserved: NativePtr, lpcSubKeys: NativePtr, lpcbMaxSubKeyLen: NativePtr, lpcbMaxClassLen: NativePtr, lpcValues: NativePtr, lpcbMaxValueNameLen: NativePtr, lpcbMaxValueLen: NativePtr, lpcbSecurityDescriptor: NativePtr, lpftLastWriteTime: NativePtr): Int

fun RegQueryInfoKeyW(hKey: HKEY?, lpClass: LPWSTR?, lpcchClass: LPDWORD?, lpReserved: LPDWORD?, lpcSubKeys: LPDWORD?, lpcbMaxSubKeyLen: LPDWORD?, lpcbMaxClassLen: LPDWORD?, lpcValues: LPDWORD?, lpcbMaxValueNameLen: LPDWORD?, lpcbMaxValueLen: LPDWORD?, lpcbSecurityDescriptor: LPDWORD?, lpftLastWriteTime: PFILETIME?): LONG {
    val _hKey = hKey.rawValue
    val _lpClass = lpClass.rawValue
    val _lpcchClass = lpcchClass.rawValue
    val _lpReserved = lpReserved.rawValue
    val _lpcSubKeys = lpcSubKeys.rawValue
    val _lpcbMaxSubKeyLen = lpcbMaxSubKeyLen.rawValue
    val _lpcbMaxClassLen = lpcbMaxClassLen.rawValue
    val _lpcValues = lpcValues.rawValue
    val _lpcbMaxValueNameLen = lpcbMaxValueNameLen.rawValue
    val _lpcbMaxValueLen = lpcbMaxValueLen.rawValue
    val _lpcbSecurityDescriptor = lpcbSecurityDescriptor.rawValue
    val _lpftLastWriteTime = lpftLastWriteTime.rawValue
    val res = kni_RegQueryInfoKeyW(_hKey, _lpClass, _lpcchClass, _lpReserved, _lpcSubKeys, _lpcbMaxSubKeyLen, _lpcbMaxClassLen, _lpcValues, _lpcbMaxValueNameLen, _lpcbMaxValueLen, _lpcbSecurityDescriptor, _lpftLastWriteTime)
    return res
}

@SymbolName("win32_kni_RegQueryInfoKeyW")
private external fun kni_RegQueryInfoKeyW(hKey: NativePtr, lpClass: NativePtr, lpcchClass: NativePtr, lpReserved: NativePtr, lpcSubKeys: NativePtr, lpcbMaxSubKeyLen: NativePtr, lpcbMaxClassLen: NativePtr, lpcValues: NativePtr, lpcbMaxValueNameLen: NativePtr, lpcbMaxValueLen: NativePtr, lpcbSecurityDescriptor: NativePtr, lpftLastWriteTime: NativePtr): Int

fun RegQueryValueA(hKey: HKEY?, lpSubKey: String?, lpData: LPSTR?, lpcbData: PLONG?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val _lpData = lpData.rawValue
        val _lpcbData = lpcbData.rawValue
        val res = kni_RegQueryValueA(_hKey, _lpSubKey, _lpData, _lpcbData)
        res
    }
}

@SymbolName("win32_kni_RegQueryValueA")
private external fun kni_RegQueryValueA(hKey: NativePtr, lpSubKey: NativePtr, lpData: NativePtr, lpcbData: NativePtr): Int

fun RegQueryValueW(hKey: HKEY?, lpSubKey: String?, lpData: LPWSTR?, lpcbData: PLONG?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val _lpData = lpData.rawValue
        val _lpcbData = lpcbData.rawValue
        val res = kni_RegQueryValueW(_hKey, _lpSubKey, _lpData, _lpcbData)
        res
    }
}

@SymbolName("win32_kni_RegQueryValueW")
private external fun kni_RegQueryValueW(hKey: NativePtr, lpSubKey: NativePtr, lpData: NativePtr, lpcbData: NativePtr): Int

fun RegQueryMultipleValuesA(hKey: HKEY?, val_list: PVALENTA?, num_vals: DWORD, lpValueBuf: LPSTR?, ldwTotsize: LPDWORD?): LONG {
    val _hKey = hKey.rawValue
    val _val_list = val_list.rawValue
    val _num_vals = num_vals
    val _lpValueBuf = lpValueBuf.rawValue
    val _ldwTotsize = ldwTotsize.rawValue
    val res = kni_RegQueryMultipleValuesA(_hKey, _val_list, _num_vals, _lpValueBuf, _ldwTotsize)
    return res
}

@SymbolName("win32_kni_RegQueryMultipleValuesA")
private external fun kni_RegQueryMultipleValuesA(hKey: NativePtr, val_list: NativePtr, num_vals: Int, lpValueBuf: NativePtr, ldwTotsize: NativePtr): Int

fun RegQueryMultipleValuesW(hKey: HKEY?, val_list: PVALENTW?, num_vals: DWORD, lpValueBuf: LPWSTR?, ldwTotsize: LPDWORD?): LONG {
    val _hKey = hKey.rawValue
    val _val_list = val_list.rawValue
    val _num_vals = num_vals
    val _lpValueBuf = lpValueBuf.rawValue
    val _ldwTotsize = ldwTotsize.rawValue
    val res = kni_RegQueryMultipleValuesW(_hKey, _val_list, _num_vals, _lpValueBuf, _ldwTotsize)
    return res
}

@SymbolName("win32_kni_RegQueryMultipleValuesW")
private external fun kni_RegQueryMultipleValuesW(hKey: NativePtr, val_list: NativePtr, num_vals: Int, lpValueBuf: NativePtr, ldwTotsize: NativePtr): Int

fun RegQueryValueExA(hKey: HKEY?, lpValueName: String?, lpReserved: LPDWORD?, lpType: LPDWORD?, lpData: LPBYTE?, lpcbData: LPDWORD?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpValueName = lpValueName?.cstr?.getPointer(memScope).rawValue
        val _lpReserved = lpReserved.rawValue
        val _lpType = lpType.rawValue
        val _lpData = lpData.rawValue
        val _lpcbData = lpcbData.rawValue
        val res = kni_RegQueryValueExA(_hKey, _lpValueName, _lpReserved, _lpType, _lpData, _lpcbData)
        res
    }
}

@SymbolName("win32_kni_RegQueryValueExA")
private external fun kni_RegQueryValueExA(hKey: NativePtr, lpValueName: NativePtr, lpReserved: NativePtr, lpType: NativePtr, lpData: NativePtr, lpcbData: NativePtr): Int

fun RegQueryValueExW(hKey: HKEY?, lpValueName: String?, lpReserved: LPDWORD?, lpType: LPDWORD?, lpData: LPBYTE?, lpcbData: LPDWORD?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpValueName = lpValueName?.wcstr?.getPointer(memScope).rawValue
        val _lpReserved = lpReserved.rawValue
        val _lpType = lpType.rawValue
        val _lpData = lpData.rawValue
        val _lpcbData = lpcbData.rawValue
        val res = kni_RegQueryValueExW(_hKey, _lpValueName, _lpReserved, _lpType, _lpData, _lpcbData)
        res
    }
}

@SymbolName("win32_kni_RegQueryValueExW")
private external fun kni_RegQueryValueExW(hKey: NativePtr, lpValueName: NativePtr, lpReserved: NativePtr, lpType: NativePtr, lpData: NativePtr, lpcbData: NativePtr): Int

fun RegReplaceKeyA(hKey: HKEY?, lpSubKey: String?, lpNewFile: String?, lpOldFile: String?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val _lpNewFile = lpNewFile?.cstr?.getPointer(memScope).rawValue
        val _lpOldFile = lpOldFile?.cstr?.getPointer(memScope).rawValue
        val res = kni_RegReplaceKeyA(_hKey, _lpSubKey, _lpNewFile, _lpOldFile)
        res
    }
}

@SymbolName("win32_kni_RegReplaceKeyA")
private external fun kni_RegReplaceKeyA(hKey: NativePtr, lpSubKey: NativePtr, lpNewFile: NativePtr, lpOldFile: NativePtr): Int

fun RegReplaceKeyW(hKey: HKEY?, lpSubKey: String?, lpNewFile: String?, lpOldFile: String?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val _lpNewFile = lpNewFile?.wcstr?.getPointer(memScope).rawValue
        val _lpOldFile = lpOldFile?.wcstr?.getPointer(memScope).rawValue
        val res = kni_RegReplaceKeyW(_hKey, _lpSubKey, _lpNewFile, _lpOldFile)
        res
    }
}

@SymbolName("win32_kni_RegReplaceKeyW")
private external fun kni_RegReplaceKeyW(hKey: NativePtr, lpSubKey: NativePtr, lpNewFile: NativePtr, lpOldFile: NativePtr): Int

fun RegRestoreKeyA(hKey: HKEY?, lpFile: String?, dwFlags: DWORD): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpFile = lpFile?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_RegRestoreKeyA(_hKey, _lpFile, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_RegRestoreKeyA")
private external fun kni_RegRestoreKeyA(hKey: NativePtr, lpFile: NativePtr, dwFlags: Int): Int

fun RegRestoreKeyW(hKey: HKEY?, lpFile: String?, dwFlags: DWORD): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpFile = lpFile?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_RegRestoreKeyW(_hKey, _lpFile, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_RegRestoreKeyW")
private external fun kni_RegRestoreKeyW(hKey: NativePtr, lpFile: NativePtr, dwFlags: Int): Int

fun RegSaveKeyA(hKey: HKEY?, lpFile: String?, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpFile = lpFile?.cstr?.getPointer(memScope).rawValue
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val res = kni_RegSaveKeyA(_hKey, _lpFile, _lpSecurityAttributes)
        res
    }
}

@SymbolName("win32_kni_RegSaveKeyA")
private external fun kni_RegSaveKeyA(hKey: NativePtr, lpFile: NativePtr, lpSecurityAttributes: NativePtr): Int

fun RegSaveKeyW(hKey: HKEY?, lpFile: String?, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpFile = lpFile?.wcstr?.getPointer(memScope).rawValue
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val res = kni_RegSaveKeyW(_hKey, _lpFile, _lpSecurityAttributes)
        res
    }
}

@SymbolName("win32_kni_RegSaveKeyW")
private external fun kni_RegSaveKeyW(hKey: NativePtr, lpFile: NativePtr, lpSecurityAttributes: NativePtr): Int

fun RegSetKeySecurity(hKey: HKEY?, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR?): LONG {
    val _hKey = hKey.rawValue
    val _SecurityInformation = SecurityInformation
    val _pSecurityDescriptor = pSecurityDescriptor.rawValue
    val res = kni_RegSetKeySecurity(_hKey, _SecurityInformation, _pSecurityDescriptor)
    return res
}

@SymbolName("win32_kni_RegSetKeySecurity")
private external fun kni_RegSetKeySecurity(hKey: NativePtr, SecurityInformation: Int, pSecurityDescriptor: NativePtr): Int

fun RegSetValueA(hKey: HKEY?, lpSubKey: String?, dwType: DWORD, lpData: String?, cbData: DWORD): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val _dwType = dwType
        val _lpData = lpData?.cstr?.getPointer(memScope).rawValue
        val _cbData = cbData
        val res = kni_RegSetValueA(_hKey, _lpSubKey, _dwType, _lpData, _cbData)
        res
    }
}

@SymbolName("win32_kni_RegSetValueA")
private external fun kni_RegSetValueA(hKey: NativePtr, lpSubKey: NativePtr, dwType: Int, lpData: NativePtr, cbData: Int): Int

fun RegSetValueW(hKey: HKEY?, lpSubKey: String?, dwType: DWORD, lpData: String?, cbData: DWORD): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val _dwType = dwType
        val _lpData = lpData?.wcstr?.getPointer(memScope).rawValue
        val _cbData = cbData
        val res = kni_RegSetValueW(_hKey, _lpSubKey, _dwType, _lpData, _cbData)
        res
    }
}

@SymbolName("win32_kni_RegSetValueW")
private external fun kni_RegSetValueW(hKey: NativePtr, lpSubKey: NativePtr, dwType: Int, lpData: NativePtr, cbData: Int): Int

fun RegSetValueExA(hKey: HKEY?, lpValueName: String?, Reserved: DWORD, dwType: DWORD, lpData: CValuesRef<BYTEVar>?, cbData: DWORD): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpValueName = lpValueName?.cstr?.getPointer(memScope).rawValue
        val _Reserved = Reserved
        val _dwType = dwType
        val _lpData = lpData?.getPointer(memScope).rawValue
        val _cbData = cbData
        val res = kni_RegSetValueExA(_hKey, _lpValueName, _Reserved, _dwType, _lpData, _cbData)
        res
    }
}

@SymbolName("win32_kni_RegSetValueExA")
private external fun kni_RegSetValueExA(hKey: NativePtr, lpValueName: NativePtr, Reserved: Int, dwType: Int, lpData: NativePtr, cbData: Int): Int

fun RegSetValueExW(hKey: HKEY?, lpValueName: String?, Reserved: DWORD, dwType: DWORD, lpData: CValuesRef<BYTEVar>?, cbData: DWORD): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpValueName = lpValueName?.wcstr?.getPointer(memScope).rawValue
        val _Reserved = Reserved
        val _dwType = dwType
        val _lpData = lpData?.getPointer(memScope).rawValue
        val _cbData = cbData
        val res = kni_RegSetValueExW(_hKey, _lpValueName, _Reserved, _dwType, _lpData, _cbData)
        res
    }
}

@SymbolName("win32_kni_RegSetValueExW")
private external fun kni_RegSetValueExW(hKey: NativePtr, lpValueName: NativePtr, Reserved: Int, dwType: Int, lpData: NativePtr, cbData: Int): Int

fun RegUnLoadKeyA(hKey: HKEY?, lpSubKey: String?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val res = kni_RegUnLoadKeyA(_hKey, _lpSubKey)
        res
    }
}

@SymbolName("win32_kni_RegUnLoadKeyA")
private external fun kni_RegUnLoadKeyA(hKey: NativePtr, lpSubKey: NativePtr): Int

fun RegUnLoadKeyW(hKey: HKEY?, lpSubKey: String?): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val res = kni_RegUnLoadKeyW(_hKey, _lpSubKey)
        res
    }
}

@SymbolName("win32_kni_RegUnLoadKeyW")
private external fun kni_RegUnLoadKeyW(hKey: NativePtr, lpSubKey: NativePtr): Int

fun RegGetValueA(hkey: HKEY?, lpSubKey: String?, lpValue: String?, dwFlags: DWORD, pdwType: LPDWORD?, pvData: PVOID?, pcbData: LPDWORD?): LONG {
    return memScoped {
        val _hkey = hkey.rawValue
        val _lpSubKey = lpSubKey?.cstr?.getPointer(memScope).rawValue
        val _lpValue = lpValue?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pdwType = pdwType.rawValue
        val _pvData = pvData.rawValue
        val _pcbData = pcbData.rawValue
        val res = kni_RegGetValueA(_hkey, _lpSubKey, _lpValue, _dwFlags, _pdwType, _pvData, _pcbData)
        res
    }
}

@SymbolName("win32_kni_RegGetValueA")
private external fun kni_RegGetValueA(hkey: NativePtr, lpSubKey: NativePtr, lpValue: NativePtr, dwFlags: Int, pdwType: NativePtr, pvData: NativePtr, pcbData: NativePtr): Int

fun RegGetValueW(hkey: HKEY?, lpSubKey: String?, lpValue: String?, dwFlags: DWORD, pdwType: LPDWORD?, pvData: PVOID?, pcbData: LPDWORD?): LONG {
    return memScoped {
        val _hkey = hkey.rawValue
        val _lpSubKey = lpSubKey?.wcstr?.getPointer(memScope).rawValue
        val _lpValue = lpValue?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pdwType = pdwType.rawValue
        val _pvData = pvData.rawValue
        val _pcbData = pcbData.rawValue
        val res = kni_RegGetValueW(_hkey, _lpSubKey, _lpValue, _dwFlags, _pdwType, _pvData, _pcbData)
        res
    }
}

@SymbolName("win32_kni_RegGetValueW")
private external fun kni_RegGetValueW(hkey: NativePtr, lpSubKey: NativePtr, lpValue: NativePtr, dwFlags: Int, pdwType: NativePtr, pvData: NativePtr, pcbData: NativePtr): Int

fun InitiateSystemShutdownA(lpMachineName: LPSTR?, lpMessage: LPSTR?, dwTimeout: DWORD, bForceAppsClosed: WINBOOL, bRebootAfterShutdown: WINBOOL): WINBOOL {
    val _lpMachineName = lpMachineName.rawValue
    val _lpMessage = lpMessage.rawValue
    val _dwTimeout = dwTimeout
    val _bForceAppsClosed = bForceAppsClosed
    val _bRebootAfterShutdown = bRebootAfterShutdown
    val res = kni_InitiateSystemShutdownA(_lpMachineName, _lpMessage, _dwTimeout, _bForceAppsClosed, _bRebootAfterShutdown)
    return res
}

@SymbolName("win32_kni_InitiateSystemShutdownA")
private external fun kni_InitiateSystemShutdownA(lpMachineName: NativePtr, lpMessage: NativePtr, dwTimeout: Int, bForceAppsClosed: Int, bRebootAfterShutdown: Int): Int

fun InitiateSystemShutdownW(lpMachineName: LPWSTR?, lpMessage: LPWSTR?, dwTimeout: DWORD, bForceAppsClosed: WINBOOL, bRebootAfterShutdown: WINBOOL): WINBOOL {
    val _lpMachineName = lpMachineName.rawValue
    val _lpMessage = lpMessage.rawValue
    val _dwTimeout = dwTimeout
    val _bForceAppsClosed = bForceAppsClosed
    val _bRebootAfterShutdown = bRebootAfterShutdown
    val res = kni_InitiateSystemShutdownW(_lpMachineName, _lpMessage, _dwTimeout, _bForceAppsClosed, _bRebootAfterShutdown)
    return res
}

@SymbolName("win32_kni_InitiateSystemShutdownW")
private external fun kni_InitiateSystemShutdownW(lpMachineName: NativePtr, lpMessage: NativePtr, dwTimeout: Int, bForceAppsClosed: Int, bRebootAfterShutdown: Int): Int

fun AbortSystemShutdownA(lpMachineName: LPSTR?): WINBOOL {
    val _lpMachineName = lpMachineName.rawValue
    val res = kni_AbortSystemShutdownA(_lpMachineName)
    return res
}

@SymbolName("win32_kni_AbortSystemShutdownA")
private external fun kni_AbortSystemShutdownA(lpMachineName: NativePtr): Int

fun AbortSystemShutdownW(lpMachineName: LPWSTR?): WINBOOL {
    val _lpMachineName = lpMachineName.rawValue
    val res = kni_AbortSystemShutdownW(_lpMachineName)
    return res
}

@SymbolName("win32_kni_AbortSystemShutdownW")
private external fun kni_AbortSystemShutdownW(lpMachineName: NativePtr): Int

fun InitiateSystemShutdownExA(lpMachineName: LPSTR?, lpMessage: LPSTR?, dwTimeout: DWORD, bForceAppsClosed: WINBOOL, bRebootAfterShutdown: WINBOOL, dwReason: DWORD): WINBOOL {
    val _lpMachineName = lpMachineName.rawValue
    val _lpMessage = lpMessage.rawValue
    val _dwTimeout = dwTimeout
    val _bForceAppsClosed = bForceAppsClosed
    val _bRebootAfterShutdown = bRebootAfterShutdown
    val _dwReason = dwReason
    val res = kni_InitiateSystemShutdownExA(_lpMachineName, _lpMessage, _dwTimeout, _bForceAppsClosed, _bRebootAfterShutdown, _dwReason)
    return res
}

@SymbolName("win32_kni_InitiateSystemShutdownExA")
private external fun kni_InitiateSystemShutdownExA(lpMachineName: NativePtr, lpMessage: NativePtr, dwTimeout: Int, bForceAppsClosed: Int, bRebootAfterShutdown: Int, dwReason: Int): Int

fun InitiateSystemShutdownExW(lpMachineName: LPWSTR?, lpMessage: LPWSTR?, dwTimeout: DWORD, bForceAppsClosed: WINBOOL, bRebootAfterShutdown: WINBOOL, dwReason: DWORD): WINBOOL {
    val _lpMachineName = lpMachineName.rawValue
    val _lpMessage = lpMessage.rawValue
    val _dwTimeout = dwTimeout
    val _bForceAppsClosed = bForceAppsClosed
    val _bRebootAfterShutdown = bRebootAfterShutdown
    val _dwReason = dwReason
    val res = kni_InitiateSystemShutdownExW(_lpMachineName, _lpMessage, _dwTimeout, _bForceAppsClosed, _bRebootAfterShutdown, _dwReason)
    return res
}

@SymbolName("win32_kni_InitiateSystemShutdownExW")
private external fun kni_InitiateSystemShutdownExW(lpMachineName: NativePtr, lpMessage: NativePtr, dwTimeout: Int, bForceAppsClosed: Int, bRebootAfterShutdown: Int, dwReason: Int): Int

fun RegSaveKeyExA(hKey: HKEY?, lpFile: String?, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?, Flags: DWORD): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpFile = lpFile?.cstr?.getPointer(memScope).rawValue
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val _Flags = Flags
        val res = kni_RegSaveKeyExA(_hKey, _lpFile, _lpSecurityAttributes, _Flags)
        res
    }
}

@SymbolName("win32_kni_RegSaveKeyExA")
private external fun kni_RegSaveKeyExA(hKey: NativePtr, lpFile: NativePtr, lpSecurityAttributes: NativePtr, Flags: Int): Int

fun RegSaveKeyExW(hKey: HKEY?, lpFile: String?, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?, Flags: DWORD): LONG {
    return memScoped {
        val _hKey = hKey.rawValue
        val _lpFile = lpFile?.wcstr?.getPointer(memScope).rawValue
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val _Flags = Flags
        val res = kni_RegSaveKeyExW(_hKey, _lpFile, _lpSecurityAttributes, _Flags)
        res
    }
}

@SymbolName("win32_kni_RegSaveKeyExW")
private external fun kni_RegSaveKeyExW(hKey: NativePtr, lpFile: NativePtr, lpSecurityAttributes: NativePtr, Flags: Int): Int

fun Wow64Win32ApiEntry(dwFuncNumber: DWORD, dwFlag: DWORD, dwRes: DWORD): LONG {
    val _dwFuncNumber = dwFuncNumber
    val _dwFlag = dwFlag
    val _dwRes = dwRes
    val res = kni_Wow64Win32ApiEntry(_dwFuncNumber, _dwFlag, _dwRes)
    return res
}

@SymbolName("win32_kni_Wow64Win32ApiEntry")
private external fun kni_Wow64Win32ApiEntry(dwFuncNumber: Int, dwFlag: Int, dwRes: Int): Int

fun WNetAddConnectionA(lpRemoteName: String?, lpPassword: String?, lpLocalName: String?): DWORD {
    return memScoped {
        val _lpRemoteName = lpRemoteName?.cstr?.getPointer(memScope).rawValue
        val _lpPassword = lpPassword?.cstr?.getPointer(memScope).rawValue
        val _lpLocalName = lpLocalName?.cstr?.getPointer(memScope).rawValue
        val res = kni_WNetAddConnectionA(_lpRemoteName, _lpPassword, _lpLocalName)
        res
    }
}

@SymbolName("win32_kni_WNetAddConnectionA")
private external fun kni_WNetAddConnectionA(lpRemoteName: NativePtr, lpPassword: NativePtr, lpLocalName: NativePtr): Int

fun WNetAddConnectionW(lpRemoteName: String?, lpPassword: String?, lpLocalName: String?): DWORD {
    return memScoped {
        val _lpRemoteName = lpRemoteName?.wcstr?.getPointer(memScope).rawValue
        val _lpPassword = lpPassword?.wcstr?.getPointer(memScope).rawValue
        val _lpLocalName = lpLocalName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_WNetAddConnectionW(_lpRemoteName, _lpPassword, _lpLocalName)
        res
    }
}

@SymbolName("win32_kni_WNetAddConnectionW")
private external fun kni_WNetAddConnectionW(lpRemoteName: NativePtr, lpPassword: NativePtr, lpLocalName: NativePtr): Int

fun WNetAddConnection2A(lpNetResource: LPNETRESOURCEA?, lpPassword: String?, lpUserName: String?, dwFlags: DWORD): DWORD {
    return memScoped {
        val _lpNetResource = lpNetResource.rawValue
        val _lpPassword = lpPassword?.cstr?.getPointer(memScope).rawValue
        val _lpUserName = lpUserName?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_WNetAddConnection2A(_lpNetResource, _lpPassword, _lpUserName, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_WNetAddConnection2A")
private external fun kni_WNetAddConnection2A(lpNetResource: NativePtr, lpPassword: NativePtr, lpUserName: NativePtr, dwFlags: Int): Int

fun WNetAddConnection2W(lpNetResource: LPNETRESOURCEW?, lpPassword: String?, lpUserName: String?, dwFlags: DWORD): DWORD {
    return memScoped {
        val _lpNetResource = lpNetResource.rawValue
        val _lpPassword = lpPassword?.wcstr?.getPointer(memScope).rawValue
        val _lpUserName = lpUserName?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_WNetAddConnection2W(_lpNetResource, _lpPassword, _lpUserName, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_WNetAddConnection2W")
private external fun kni_WNetAddConnection2W(lpNetResource: NativePtr, lpPassword: NativePtr, lpUserName: NativePtr, dwFlags: Int): Int

fun WNetAddConnection3A(hwndOwner: HWND?, lpNetResource: LPNETRESOURCEA?, lpPassword: String?, lpUserName: String?, dwFlags: DWORD): DWORD {
    return memScoped {
        val _hwndOwner = hwndOwner.rawValue
        val _lpNetResource = lpNetResource.rawValue
        val _lpPassword = lpPassword?.cstr?.getPointer(memScope).rawValue
        val _lpUserName = lpUserName?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_WNetAddConnection3A(_hwndOwner, _lpNetResource, _lpPassword, _lpUserName, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_WNetAddConnection3A")
private external fun kni_WNetAddConnection3A(hwndOwner: NativePtr, lpNetResource: NativePtr, lpPassword: NativePtr, lpUserName: NativePtr, dwFlags: Int): Int

fun WNetAddConnection3W(hwndOwner: HWND?, lpNetResource: LPNETRESOURCEW?, lpPassword: String?, lpUserName: String?, dwFlags: DWORD): DWORD {
    return memScoped {
        val _hwndOwner = hwndOwner.rawValue
        val _lpNetResource = lpNetResource.rawValue
        val _lpPassword = lpPassword?.wcstr?.getPointer(memScope).rawValue
        val _lpUserName = lpUserName?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_WNetAddConnection3W(_hwndOwner, _lpNetResource, _lpPassword, _lpUserName, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_WNetAddConnection3W")
private external fun kni_WNetAddConnection3W(hwndOwner: NativePtr, lpNetResource: NativePtr, lpPassword: NativePtr, lpUserName: NativePtr, dwFlags: Int): Int

fun WNetCancelConnectionA(lpName: String?, fForce: WINBOOL): DWORD {
    return memScoped {
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _fForce = fForce
        val res = kni_WNetCancelConnectionA(_lpName, _fForce)
        res
    }
}

@SymbolName("win32_kni_WNetCancelConnectionA")
private external fun kni_WNetCancelConnectionA(lpName: NativePtr, fForce: Int): Int

fun WNetCancelConnectionW(lpName: String?, fForce: WINBOOL): DWORD {
    return memScoped {
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _fForce = fForce
        val res = kni_WNetCancelConnectionW(_lpName, _fForce)
        res
    }
}

@SymbolName("win32_kni_WNetCancelConnectionW")
private external fun kni_WNetCancelConnectionW(lpName: NativePtr, fForce: Int): Int

fun WNetCancelConnection2A(lpName: String?, dwFlags: DWORD, fForce: WINBOOL): DWORD {
    return memScoped {
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _fForce = fForce
        val res = kni_WNetCancelConnection2A(_lpName, _dwFlags, _fForce)
        res
    }
}

@SymbolName("win32_kni_WNetCancelConnection2A")
private external fun kni_WNetCancelConnection2A(lpName: NativePtr, dwFlags: Int, fForce: Int): Int

fun WNetCancelConnection2W(lpName: String?, dwFlags: DWORD, fForce: WINBOOL): DWORD {
    return memScoped {
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _fForce = fForce
        val res = kni_WNetCancelConnection2W(_lpName, _dwFlags, _fForce)
        res
    }
}

@SymbolName("win32_kni_WNetCancelConnection2W")
private external fun kni_WNetCancelConnection2W(lpName: NativePtr, dwFlags: Int, fForce: Int): Int

fun WNetGetConnectionA(lpLocalName: String?, lpRemoteName: LPSTR?, lpnLength: LPDWORD?): DWORD {
    return memScoped {
        val _lpLocalName = lpLocalName?.cstr?.getPointer(memScope).rawValue
        val _lpRemoteName = lpRemoteName.rawValue
        val _lpnLength = lpnLength.rawValue
        val res = kni_WNetGetConnectionA(_lpLocalName, _lpRemoteName, _lpnLength)
        res
    }
}

@SymbolName("win32_kni_WNetGetConnectionA")
private external fun kni_WNetGetConnectionA(lpLocalName: NativePtr, lpRemoteName: NativePtr, lpnLength: NativePtr): Int

fun WNetGetConnectionW(lpLocalName: String?, lpRemoteName: LPWSTR?, lpnLength: LPDWORD?): DWORD {
    return memScoped {
        val _lpLocalName = lpLocalName?.wcstr?.getPointer(memScope).rawValue
        val _lpRemoteName = lpRemoteName.rawValue
        val _lpnLength = lpnLength.rawValue
        val res = kni_WNetGetConnectionW(_lpLocalName, _lpRemoteName, _lpnLength)
        res
    }
}

@SymbolName("win32_kni_WNetGetConnectionW")
private external fun kni_WNetGetConnectionW(lpLocalName: NativePtr, lpRemoteName: NativePtr, lpnLength: NativePtr): Int

fun WNetRestoreConnectionA(hwndParent: HWND?, lpDevice: String?): DWORD {
    return memScoped {
        val _hwndParent = hwndParent.rawValue
        val _lpDevice = lpDevice?.cstr?.getPointer(memScope).rawValue
        val res = kni_WNetRestoreConnectionA(_hwndParent, _lpDevice)
        res
    }
}

@SymbolName("win32_kni_WNetRestoreConnectionA")
private external fun kni_WNetRestoreConnectionA(hwndParent: NativePtr, lpDevice: NativePtr): Int

fun WNetUseConnectionA(hwndOwner: HWND?, lpNetResource: LPNETRESOURCEA?, lpPassword: String?, lpUserID: String?, dwFlags: DWORD, lpAccessName: LPSTR?, lpBufferSize: LPDWORD?, lpResult: LPDWORD?): DWORD {
    return memScoped {
        val _hwndOwner = hwndOwner.rawValue
        val _lpNetResource = lpNetResource.rawValue
        val _lpPassword = lpPassword?.cstr?.getPointer(memScope).rawValue
        val _lpUserID = lpUserID?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _lpAccessName = lpAccessName.rawValue
        val _lpBufferSize = lpBufferSize.rawValue
        val _lpResult = lpResult.rawValue
        val res = kni_WNetUseConnectionA(_hwndOwner, _lpNetResource, _lpPassword, _lpUserID, _dwFlags, _lpAccessName, _lpBufferSize, _lpResult)
        res
    }
}

@SymbolName("win32_kni_WNetUseConnectionA")
private external fun kni_WNetUseConnectionA(hwndOwner: NativePtr, lpNetResource: NativePtr, lpPassword: NativePtr, lpUserID: NativePtr, dwFlags: Int, lpAccessName: NativePtr, lpBufferSize: NativePtr, lpResult: NativePtr): Int

fun WNetUseConnectionW(hwndOwner: HWND?, lpNetResource: LPNETRESOURCEW?, lpPassword: String?, lpUserID: String?, dwFlags: DWORD, lpAccessName: LPWSTR?, lpBufferSize: LPDWORD?, lpResult: LPDWORD?): DWORD {
    return memScoped {
        val _hwndOwner = hwndOwner.rawValue
        val _lpNetResource = lpNetResource.rawValue
        val _lpPassword = lpPassword?.wcstr?.getPointer(memScope).rawValue
        val _lpUserID = lpUserID?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _lpAccessName = lpAccessName.rawValue
        val _lpBufferSize = lpBufferSize.rawValue
        val _lpResult = lpResult.rawValue
        val res = kni_WNetUseConnectionW(_hwndOwner, _lpNetResource, _lpPassword, _lpUserID, _dwFlags, _lpAccessName, _lpBufferSize, _lpResult)
        res
    }
}

@SymbolName("win32_kni_WNetUseConnectionW")
private external fun kni_WNetUseConnectionW(hwndOwner: NativePtr, lpNetResource: NativePtr, lpPassword: NativePtr, lpUserID: NativePtr, dwFlags: Int, lpAccessName: NativePtr, lpBufferSize: NativePtr, lpResult: NativePtr): Int

fun WNetConnectionDialog(hwnd: HWND?, dwType: DWORD): DWORD {
    val _hwnd = hwnd.rawValue
    val _dwType = dwType
    val res = kni_WNetConnectionDialog(_hwnd, _dwType)
    return res
}

@SymbolName("win32_kni_WNetConnectionDialog")
private external fun kni_WNetConnectionDialog(hwnd: NativePtr, dwType: Int): Int

fun WNetDisconnectDialog(hwnd: HWND?, dwType: DWORD): DWORD {
    val _hwnd = hwnd.rawValue
    val _dwType = dwType
    val res = kni_WNetDisconnectDialog(_hwnd, _dwType)
    return res
}

@SymbolName("win32_kni_WNetDisconnectDialog")
private external fun kni_WNetDisconnectDialog(hwnd: NativePtr, dwType: Int): Int

fun WNetRestoreConnectionW(hwndParent: HWND?, lpDevice: String?): DWORD {
    return memScoped {
        val _hwndParent = hwndParent.rawValue
        val _lpDevice = lpDevice?.wcstr?.getPointer(memScope).rawValue
        val res = kni_WNetRestoreConnectionW(_hwndParent, _lpDevice)
        res
    }
}

@SymbolName("win32_kni_WNetRestoreConnectionW")
private external fun kni_WNetRestoreConnectionW(hwndParent: NativePtr, lpDevice: NativePtr): Int

fun WNetConnectionDialog1A(lpConnDlgStruct: LPCONNECTDLGSTRUCTA?): DWORD {
    val _lpConnDlgStruct = lpConnDlgStruct.rawValue
    val res = kni_WNetConnectionDialog1A(_lpConnDlgStruct)
    return res
}

@SymbolName("win32_kni_WNetConnectionDialog1A")
private external fun kni_WNetConnectionDialog1A(lpConnDlgStruct: NativePtr): Int

fun WNetConnectionDialog1W(lpConnDlgStruct: LPCONNECTDLGSTRUCTW?): DWORD {
    val _lpConnDlgStruct = lpConnDlgStruct.rawValue
    val res = kni_WNetConnectionDialog1W(_lpConnDlgStruct)
    return res
}

@SymbolName("win32_kni_WNetConnectionDialog1W")
private external fun kni_WNetConnectionDialog1W(lpConnDlgStruct: NativePtr): Int

fun WNetDisconnectDialog1A(lpConnDlgStruct: LPDISCDLGSTRUCTA?): DWORD {
    val _lpConnDlgStruct = lpConnDlgStruct.rawValue
    val res = kni_WNetDisconnectDialog1A(_lpConnDlgStruct)
    return res
}

@SymbolName("win32_kni_WNetDisconnectDialog1A")
private external fun kni_WNetDisconnectDialog1A(lpConnDlgStruct: NativePtr): Int

fun WNetDisconnectDialog1W(lpConnDlgStruct: LPDISCDLGSTRUCTW?): DWORD {
    val _lpConnDlgStruct = lpConnDlgStruct.rawValue
    val res = kni_WNetDisconnectDialog1W(_lpConnDlgStruct)
    return res
}

@SymbolName("win32_kni_WNetDisconnectDialog1W")
private external fun kni_WNetDisconnectDialog1W(lpConnDlgStruct: NativePtr): Int

fun WNetOpenEnumA(dwScope: DWORD, dwType: DWORD, dwUsage: DWORD, lpNetResource: LPNETRESOURCEA?, lphEnum: LPHANDLE?): DWORD {
    val _dwScope = dwScope
    val _dwType = dwType
    val _dwUsage = dwUsage
    val _lpNetResource = lpNetResource.rawValue
    val _lphEnum = lphEnum.rawValue
    val res = kni_WNetOpenEnumA(_dwScope, _dwType, _dwUsage, _lpNetResource, _lphEnum)
    return res
}

@SymbolName("win32_kni_WNetOpenEnumA")
private external fun kni_WNetOpenEnumA(dwScope: Int, dwType: Int, dwUsage: Int, lpNetResource: NativePtr, lphEnum: NativePtr): Int

fun WNetOpenEnumW(dwScope: DWORD, dwType: DWORD, dwUsage: DWORD, lpNetResource: LPNETRESOURCEW?, lphEnum: LPHANDLE?): DWORD {
    val _dwScope = dwScope
    val _dwType = dwType
    val _dwUsage = dwUsage
    val _lpNetResource = lpNetResource.rawValue
    val _lphEnum = lphEnum.rawValue
    val res = kni_WNetOpenEnumW(_dwScope, _dwType, _dwUsage, _lpNetResource, _lphEnum)
    return res
}

@SymbolName("win32_kni_WNetOpenEnumW")
private external fun kni_WNetOpenEnumW(dwScope: Int, dwType: Int, dwUsage: Int, lpNetResource: NativePtr, lphEnum: NativePtr): Int

fun WNetEnumResourceA(hEnum: HANDLE?, lpcCount: LPDWORD?, lpBuffer: LPVOID?, lpBufferSize: LPDWORD?): DWORD {
    val _hEnum = hEnum.rawValue
    val _lpcCount = lpcCount.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _lpBufferSize = lpBufferSize.rawValue
    val res = kni_WNetEnumResourceA(_hEnum, _lpcCount, _lpBuffer, _lpBufferSize)
    return res
}

@SymbolName("win32_kni_WNetEnumResourceA")
private external fun kni_WNetEnumResourceA(hEnum: NativePtr, lpcCount: NativePtr, lpBuffer: NativePtr, lpBufferSize: NativePtr): Int

fun WNetEnumResourceW(hEnum: HANDLE?, lpcCount: LPDWORD?, lpBuffer: LPVOID?, lpBufferSize: LPDWORD?): DWORD {
    val _hEnum = hEnum.rawValue
    val _lpcCount = lpcCount.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _lpBufferSize = lpBufferSize.rawValue
    val res = kni_WNetEnumResourceW(_hEnum, _lpcCount, _lpBuffer, _lpBufferSize)
    return res
}

@SymbolName("win32_kni_WNetEnumResourceW")
private external fun kni_WNetEnumResourceW(hEnum: NativePtr, lpcCount: NativePtr, lpBuffer: NativePtr, lpBufferSize: NativePtr): Int

fun WNetCloseEnum(hEnum: HANDLE?): DWORD {
    val _hEnum = hEnum.rawValue
    val res = kni_WNetCloseEnum(_hEnum)
    return res
}

@SymbolName("win32_kni_WNetCloseEnum")
private external fun kni_WNetCloseEnum(hEnum: NativePtr): Int

fun WNetGetResourceParentA(lpNetResource: LPNETRESOURCEA?, lpBuffer: LPVOID?, lpcbBuffer: LPDWORD?): DWORD {
    val _lpNetResource = lpNetResource.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _lpcbBuffer = lpcbBuffer.rawValue
    val res = kni_WNetGetResourceParentA(_lpNetResource, _lpBuffer, _lpcbBuffer)
    return res
}

@SymbolName("win32_kni_WNetGetResourceParentA")
private external fun kni_WNetGetResourceParentA(lpNetResource: NativePtr, lpBuffer: NativePtr, lpcbBuffer: NativePtr): Int

fun WNetGetResourceParentW(lpNetResource: LPNETRESOURCEW?, lpBuffer: LPVOID?, lpcbBuffer: LPDWORD?): DWORD {
    val _lpNetResource = lpNetResource.rawValue
    val _lpBuffer = lpBuffer.rawValue
    val _lpcbBuffer = lpcbBuffer.rawValue
    val res = kni_WNetGetResourceParentW(_lpNetResource, _lpBuffer, _lpcbBuffer)
    return res
}

@SymbolName("win32_kni_WNetGetResourceParentW")
private external fun kni_WNetGetResourceParentW(lpNetResource: NativePtr, lpBuffer: NativePtr, lpcbBuffer: NativePtr): Int

fun WNetGetResourceInformationA(lpNetResource: LPNETRESOURCEA?, lpBuffer: LPVOID?, lpcbBuffer: LPDWORD?, lplpSystem: CValuesRef<LPSTRVar>?): DWORD {
    return memScoped {
        val _lpNetResource = lpNetResource.rawValue
        val _lpBuffer = lpBuffer.rawValue
        val _lpcbBuffer = lpcbBuffer.rawValue
        val _lplpSystem = lplpSystem?.getPointer(memScope).rawValue
        val res = kni_WNetGetResourceInformationA(_lpNetResource, _lpBuffer, _lpcbBuffer, _lplpSystem)
        res
    }
}

@SymbolName("win32_kni_WNetGetResourceInformationA")
private external fun kni_WNetGetResourceInformationA(lpNetResource: NativePtr, lpBuffer: NativePtr, lpcbBuffer: NativePtr, lplpSystem: NativePtr): Int

fun WNetGetResourceInformationW(lpNetResource: LPNETRESOURCEW?, lpBuffer: LPVOID?, lpcbBuffer: LPDWORD?, lplpSystem: CValuesRef<LPWSTRVar>?): DWORD {
    return memScoped {
        val _lpNetResource = lpNetResource.rawValue
        val _lpBuffer = lpBuffer.rawValue
        val _lpcbBuffer = lpcbBuffer.rawValue
        val _lplpSystem = lplpSystem?.getPointer(memScope).rawValue
        val res = kni_WNetGetResourceInformationW(_lpNetResource, _lpBuffer, _lpcbBuffer, _lplpSystem)
        res
    }
}

@SymbolName("win32_kni_WNetGetResourceInformationW")
private external fun kni_WNetGetResourceInformationW(lpNetResource: NativePtr, lpBuffer: NativePtr, lpcbBuffer: NativePtr, lplpSystem: NativePtr): Int

fun WNetGetUniversalNameA(lpLocalPath: String?, dwInfoLevel: DWORD, lpBuffer: LPVOID?, lpBufferSize: LPDWORD?): DWORD {
    return memScoped {
        val _lpLocalPath = lpLocalPath?.cstr?.getPointer(memScope).rawValue
        val _dwInfoLevel = dwInfoLevel
        val _lpBuffer = lpBuffer.rawValue
        val _lpBufferSize = lpBufferSize.rawValue
        val res = kni_WNetGetUniversalNameA(_lpLocalPath, _dwInfoLevel, _lpBuffer, _lpBufferSize)
        res
    }
}

@SymbolName("win32_kni_WNetGetUniversalNameA")
private external fun kni_WNetGetUniversalNameA(lpLocalPath: NativePtr, dwInfoLevel: Int, lpBuffer: NativePtr, lpBufferSize: NativePtr): Int

fun WNetGetUniversalNameW(lpLocalPath: String?, dwInfoLevel: DWORD, lpBuffer: LPVOID?, lpBufferSize: LPDWORD?): DWORD {
    return memScoped {
        val _lpLocalPath = lpLocalPath?.wcstr?.getPointer(memScope).rawValue
        val _dwInfoLevel = dwInfoLevel
        val _lpBuffer = lpBuffer.rawValue
        val _lpBufferSize = lpBufferSize.rawValue
        val res = kni_WNetGetUniversalNameW(_lpLocalPath, _dwInfoLevel, _lpBuffer, _lpBufferSize)
        res
    }
}

@SymbolName("win32_kni_WNetGetUniversalNameW")
private external fun kni_WNetGetUniversalNameW(lpLocalPath: NativePtr, dwInfoLevel: Int, lpBuffer: NativePtr, lpBufferSize: NativePtr): Int

fun WNetGetUserA(lpName: String?, lpUserName: LPSTR?, lpnLength: LPDWORD?): DWORD {
    return memScoped {
        val _lpName = lpName?.cstr?.getPointer(memScope).rawValue
        val _lpUserName = lpUserName.rawValue
        val _lpnLength = lpnLength.rawValue
        val res = kni_WNetGetUserA(_lpName, _lpUserName, _lpnLength)
        res
    }
}

@SymbolName("win32_kni_WNetGetUserA")
private external fun kni_WNetGetUserA(lpName: NativePtr, lpUserName: NativePtr, lpnLength: NativePtr): Int

fun WNetGetUserW(lpName: String?, lpUserName: LPWSTR?, lpnLength: LPDWORD?): DWORD {
    return memScoped {
        val _lpName = lpName?.wcstr?.getPointer(memScope).rawValue
        val _lpUserName = lpUserName.rawValue
        val _lpnLength = lpnLength.rawValue
        val res = kni_WNetGetUserW(_lpName, _lpUserName, _lpnLength)
        res
    }
}

@SymbolName("win32_kni_WNetGetUserW")
private external fun kni_WNetGetUserW(lpName: NativePtr, lpUserName: NativePtr, lpnLength: NativePtr): Int

fun WNetGetProviderNameA(dwNetType: DWORD, lpProviderName: LPSTR?, lpBufferSize: LPDWORD?): DWORD {
    val _dwNetType = dwNetType
    val _lpProviderName = lpProviderName.rawValue
    val _lpBufferSize = lpBufferSize.rawValue
    val res = kni_WNetGetProviderNameA(_dwNetType, _lpProviderName, _lpBufferSize)
    return res
}

@SymbolName("win32_kni_WNetGetProviderNameA")
private external fun kni_WNetGetProviderNameA(dwNetType: Int, lpProviderName: NativePtr, lpBufferSize: NativePtr): Int

fun WNetGetProviderNameW(dwNetType: DWORD, lpProviderName: LPWSTR?, lpBufferSize: LPDWORD?): DWORD {
    val _dwNetType = dwNetType
    val _lpProviderName = lpProviderName.rawValue
    val _lpBufferSize = lpBufferSize.rawValue
    val res = kni_WNetGetProviderNameW(_dwNetType, _lpProviderName, _lpBufferSize)
    return res
}

@SymbolName("win32_kni_WNetGetProviderNameW")
private external fun kni_WNetGetProviderNameW(dwNetType: Int, lpProviderName: NativePtr, lpBufferSize: NativePtr): Int

fun WNetGetNetworkInformationA(lpProvider: String?, lpNetInfoStruct: LPNETINFOSTRUCT?): DWORD {
    return memScoped {
        val _lpProvider = lpProvider?.cstr?.getPointer(memScope).rawValue
        val _lpNetInfoStruct = lpNetInfoStruct.rawValue
        val res = kni_WNetGetNetworkInformationA(_lpProvider, _lpNetInfoStruct)
        res
    }
}

@SymbolName("win32_kni_WNetGetNetworkInformationA")
private external fun kni_WNetGetNetworkInformationA(lpProvider: NativePtr, lpNetInfoStruct: NativePtr): Int

fun WNetGetNetworkInformationW(lpProvider: String?, lpNetInfoStruct: LPNETINFOSTRUCT?): DWORD {
    return memScoped {
        val _lpProvider = lpProvider?.wcstr?.getPointer(memScope).rawValue
        val _lpNetInfoStruct = lpNetInfoStruct.rawValue
        val res = kni_WNetGetNetworkInformationW(_lpProvider, _lpNetInfoStruct)
        res
    }
}

@SymbolName("win32_kni_WNetGetNetworkInformationW")
private external fun kni_WNetGetNetworkInformationW(lpProvider: NativePtr, lpNetInfoStruct: NativePtr): Int

fun WNetGetLastErrorA(lpError: LPDWORD?, lpErrorBuf: LPSTR?, nErrorBufSize: DWORD, lpNameBuf: LPSTR?, nNameBufSize: DWORD): DWORD {
    val _lpError = lpError.rawValue
    val _lpErrorBuf = lpErrorBuf.rawValue
    val _nErrorBufSize = nErrorBufSize
    val _lpNameBuf = lpNameBuf.rawValue
    val _nNameBufSize = nNameBufSize
    val res = kni_WNetGetLastErrorA(_lpError, _lpErrorBuf, _nErrorBufSize, _lpNameBuf, _nNameBufSize)
    return res
}

@SymbolName("win32_kni_WNetGetLastErrorA")
private external fun kni_WNetGetLastErrorA(lpError: NativePtr, lpErrorBuf: NativePtr, nErrorBufSize: Int, lpNameBuf: NativePtr, nNameBufSize: Int): Int

fun WNetGetLastErrorW(lpError: LPDWORD?, lpErrorBuf: LPWSTR?, nErrorBufSize: DWORD, lpNameBuf: LPWSTR?, nNameBufSize: DWORD): DWORD {
    val _lpError = lpError.rawValue
    val _lpErrorBuf = lpErrorBuf.rawValue
    val _nErrorBufSize = nErrorBufSize
    val _lpNameBuf = lpNameBuf.rawValue
    val _nNameBufSize = nNameBufSize
    val res = kni_WNetGetLastErrorW(_lpError, _lpErrorBuf, _nErrorBufSize, _lpNameBuf, _nNameBufSize)
    return res
}

@SymbolName("win32_kni_WNetGetLastErrorW")
private external fun kni_WNetGetLastErrorW(lpError: NativePtr, lpErrorBuf: NativePtr, nErrorBufSize: Int, lpNameBuf: NativePtr, nNameBufSize: Int): Int

fun MultinetGetConnectionPerformanceA(lpNetResource: LPNETRESOURCEA?, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT?): DWORD {
    val _lpNetResource = lpNetResource.rawValue
    val _lpNetConnectInfoStruct = lpNetConnectInfoStruct.rawValue
    val res = kni_MultinetGetConnectionPerformanceA(_lpNetResource, _lpNetConnectInfoStruct)
    return res
}

@SymbolName("win32_kni_MultinetGetConnectionPerformanceA")
private external fun kni_MultinetGetConnectionPerformanceA(lpNetResource: NativePtr, lpNetConnectInfoStruct: NativePtr): Int

fun MultinetGetConnectionPerformanceW(lpNetResource: LPNETRESOURCEW?, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT?): DWORD {
    val _lpNetResource = lpNetResource.rawValue
    val _lpNetConnectInfoStruct = lpNetConnectInfoStruct.rawValue
    val res = kni_MultinetGetConnectionPerformanceW(_lpNetResource, _lpNetConnectInfoStruct)
    return res
}

@SymbolName("win32_kni_MultinetGetConnectionPerformanceW")
private external fun kni_MultinetGetConnectionPerformanceW(lpNetResource: NativePtr, lpNetConnectInfoStruct: NativePtr): Int

fun accept(s: SOCKET, addr: CValuesRef<sockaddr>?, addrlen: CValuesRef<IntVar>?): SOCKET {
    return memScoped {
        val _s = s
        val _addr = addr?.getPointer(memScope).rawValue
        val _addrlen = addrlen?.getPointer(memScope).rawValue
        val res = kni_accept(_s, _addr, _addrlen)
        res
    }
}

@SymbolName("win32_kni_accept")
private external fun kni_accept(s: Long, addr: NativePtr, addrlen: NativePtr): Long

fun bind(s: SOCKET, name: CValuesRef<sockaddr>?, namelen: Int): Int {
    return memScoped {
        val _s = s
        val _name = name?.getPointer(memScope).rawValue
        val _namelen = namelen
        val res = kni_bind(_s, _name, _namelen)
        res
    }
}

@SymbolName("win32_kni_bind")
private external fun kni_bind(s: Long, name: NativePtr, namelen: Int): Int

fun closesocket(s: SOCKET): Int {
    val _s = s
    val res = kni_closesocket(_s)
    return res
}

@SymbolName("win32_kni_closesocket")
private external fun kni_closesocket(s: Long): Int

fun connect(s: SOCKET, name: CValuesRef<sockaddr>?, namelen: Int): Int {
    return memScoped {
        val _s = s
        val _name = name?.getPointer(memScope).rawValue
        val _namelen = namelen
        val res = kni_connect(_s, _name, _namelen)
        res
    }
}

@SymbolName("win32_kni_connect")
private external fun kni_connect(s: Long, name: NativePtr, namelen: Int): Int

fun ioctlsocket(s: SOCKET, cmd: Int, argp: CValuesRef<u_longVar>?): Int {
    return memScoped {
        val _s = s
        val _cmd = cmd
        val _argp = argp?.getPointer(memScope).rawValue
        val res = kni_ioctlsocket(_s, _cmd, _argp)
        res
    }
}

@SymbolName("win32_kni_ioctlsocket")
private external fun kni_ioctlsocket(s: Long, cmd: Int, argp: NativePtr): Int

fun getpeername(s: SOCKET, name: CValuesRef<sockaddr>?, namelen: CValuesRef<IntVar>?): Int {
    return memScoped {
        val _s = s
        val _name = name?.getPointer(memScope).rawValue
        val _namelen = namelen?.getPointer(memScope).rawValue
        val res = kni_getpeername(_s, _name, _namelen)
        res
    }
}

@SymbolName("win32_kni_getpeername")
private external fun kni_getpeername(s: Long, name: NativePtr, namelen: NativePtr): Int

fun getsockname(s: SOCKET, name: CValuesRef<sockaddr>?, namelen: CValuesRef<IntVar>?): Int {
    return memScoped {
        val _s = s
        val _name = name?.getPointer(memScope).rawValue
        val _namelen = namelen?.getPointer(memScope).rawValue
        val res = kni_getsockname(_s, _name, _namelen)
        res
    }
}

@SymbolName("win32_kni_getsockname")
private external fun kni_getsockname(s: Long, name: NativePtr, namelen: NativePtr): Int

fun getsockopt(s: SOCKET, level: Int, optname: Int, optval: CValuesRef<ByteVar>?, optlen: CValuesRef<IntVar>?): Int {
    return memScoped {
        val _s = s
        val _level = level
        val _optname = optname
        val _optval = optval?.getPointer(memScope).rawValue
        val _optlen = optlen?.getPointer(memScope).rawValue
        val res = kni_getsockopt(_s, _level, _optname, _optval, _optlen)
        res
    }
}

@SymbolName("win32_kni_getsockopt")
private external fun kni_getsockopt(s: Long, level: Int, optname: Int, optval: NativePtr, optlen: NativePtr): Int

fun htonl(hostlong: u_long): u_long {
    val _hostlong = hostlong
    val res = kni_htonl(_hostlong)
    return res
}

@SymbolName("win32_kni_htonl")
private external fun kni_htonl(hostlong: Int): Int

fun htons(hostshort: u_short): u_short {
    val _hostshort = hostshort
    val res = kni_htons(_hostshort)
    return res
}

@SymbolName("win32_kni_htons")
private external fun kni_htons(hostshort: Short): Short

fun inet_addr(cp: String?): Int {
    return memScoped {
        val _cp = cp?.cstr?.getPointer(memScope).rawValue
        val res = kni_inet_addr(_cp)
        res
    }
}

@SymbolName("win32_kni_inet_addr")
private external fun kni_inet_addr(cp: NativePtr): Int

fun inet_ntoa(`in`: CValue<in_addr>): CPointer<ByteVar>? {
    return memScoped {
        val _in = `in`.getPointer(memScope).rawValue
        val res = kni_inet_ntoa(_in)
        interpretCPointer<ByteVar>(res)
    }
}

@SymbolName("win32_kni_inet_ntoa")
private external fun kni_inet_ntoa(`in`: NativePtr): NativePtr

fun listen(s: SOCKET, backlog: Int): Int {
    val _s = s
    val _backlog = backlog
    val res = kni_listen(_s, _backlog)
    return res
}

@SymbolName("win32_kni_listen")
private external fun kni_listen(s: Long, backlog: Int): Int

fun ntohl(netlong: u_long): u_long {
    val _netlong = netlong
    val res = kni_ntohl(_netlong)
    return res
}

@SymbolName("win32_kni_ntohl")
private external fun kni_ntohl(netlong: Int): Int

fun ntohs(netshort: u_short): u_short {
    val _netshort = netshort
    val res = kni_ntohs(_netshort)
    return res
}

@SymbolName("win32_kni_ntohs")
private external fun kni_ntohs(netshort: Short): Short

fun recv(s: SOCKET, buf: CValuesRef<ByteVar>?, len: Int, flags: Int): Int {
    return memScoped {
        val _s = s
        val _buf = buf?.getPointer(memScope).rawValue
        val _len = len
        val _flags = flags
        val res = kni_recv(_s, _buf, _len, _flags)
        res
    }
}

@SymbolName("win32_kni_recv")
private external fun kni_recv(s: Long, buf: NativePtr, len: Int, flags: Int): Int

fun recvfrom(s: SOCKET, buf: CValuesRef<ByteVar>?, len: Int, flags: Int, from: CValuesRef<sockaddr>?, fromlen: CValuesRef<IntVar>?): Int {
    return memScoped {
        val _s = s
        val _buf = buf?.getPointer(memScope).rawValue
        val _len = len
        val _flags = flags
        val _from = from?.getPointer(memScope).rawValue
        val _fromlen = fromlen?.getPointer(memScope).rawValue
        val res = kni_recvfrom(_s, _buf, _len, _flags, _from, _fromlen)
        res
    }
}

@SymbolName("win32_kni_recvfrom")
private external fun kni_recvfrom(s: Long, buf: NativePtr, len: Int, flags: Int, from: NativePtr, fromlen: NativePtr): Int

fun select(nfds: Int, readfds: CValuesRef<fd_set>?, writefds: CValuesRef<fd_set>?, exceptfds: CValuesRef<fd_set>?, timeout: PTIMEVAL?): Int {
    return memScoped {
        val _nfds = nfds
        val _readfds = readfds?.getPointer(memScope).rawValue
        val _writefds = writefds?.getPointer(memScope).rawValue
        val _exceptfds = exceptfds?.getPointer(memScope).rawValue
        val _timeout = timeout.rawValue
        val res = kni_select(_nfds, _readfds, _writefds, _exceptfds, _timeout)
        res
    }
}

@SymbolName("win32_kni_select")
private external fun kni_select(nfds: Int, readfds: NativePtr, writefds: NativePtr, exceptfds: NativePtr, timeout: NativePtr): Int

fun send(s: SOCKET, buf: String?, len: Int, flags: Int): Int {
    return memScoped {
        val _s = s
        val _buf = buf?.cstr?.getPointer(memScope).rawValue
        val _len = len
        val _flags = flags
        val res = kni_send(_s, _buf, _len, _flags)
        res
    }
}

@SymbolName("win32_kni_send")
private external fun kni_send(s: Long, buf: NativePtr, len: Int, flags: Int): Int

fun sendto(s: SOCKET, buf: String?, len: Int, flags: Int, to: CValuesRef<sockaddr>?, tolen: Int): Int {
    return memScoped {
        val _s = s
        val _buf = buf?.cstr?.getPointer(memScope).rawValue
        val _len = len
        val _flags = flags
        val _to = to?.getPointer(memScope).rawValue
        val _tolen = tolen
        val res = kni_sendto(_s, _buf, _len, _flags, _to, _tolen)
        res
    }
}

@SymbolName("win32_kni_sendto")
private external fun kni_sendto(s: Long, buf: NativePtr, len: Int, flags: Int, to: NativePtr, tolen: Int): Int

fun setsockopt(s: SOCKET, level: Int, optname: Int, optval: String?, optlen: Int): Int {
    return memScoped {
        val _s = s
        val _level = level
        val _optname = optname
        val _optval = optval?.cstr?.getPointer(memScope).rawValue
        val _optlen = optlen
        val res = kni_setsockopt(_s, _level, _optname, _optval, _optlen)
        res
    }
}

@SymbolName("win32_kni_setsockopt")
private external fun kni_setsockopt(s: Long, level: Int, optname: Int, optval: NativePtr, optlen: Int): Int

fun shutdown(s: SOCKET, how: Int): Int {
    val _s = s
    val _how = how
    val res = kni_shutdown(_s, _how)
    return res
}

@SymbolName("win32_kni_shutdown")
private external fun kni_shutdown(s: Long, how: Int): Int

fun socket(af: Int, type: Int, protocol: Int): SOCKET {
    val _af = af
    val _type = type
    val _protocol = protocol
    val res = kni_socket(_af, _type, _protocol)
    return res
}

@SymbolName("win32_kni_socket")
private external fun kni_socket(af: Int, type: Int, protocol: Int): Long

fun gethostbyaddr(addr: String?, len: Int, type: Int): CPointer<hostent>? {
    return memScoped {
        val _addr = addr?.cstr?.getPointer(memScope).rawValue
        val _len = len
        val _type = type
        val res = kni_gethostbyaddr(_addr, _len, _type)
        interpretCPointer<hostent>(res)
    }
}

@SymbolName("win32_kni_gethostbyaddr")
private external fun kni_gethostbyaddr(addr: NativePtr, len: Int, type: Int): NativePtr

fun gethostbyname(name: String?): CPointer<hostent>? {
    return memScoped {
        val _name = name?.cstr?.getPointer(memScope).rawValue
        val res = kni_gethostbyname(_name)
        interpretCPointer<hostent>(res)
    }
}

@SymbolName("win32_kni_gethostbyname")
private external fun kni_gethostbyname(name: NativePtr): NativePtr

fun gethostname(name: CValuesRef<ByteVar>?, namelen: Int): Int {
    return memScoped {
        val _name = name?.getPointer(memScope).rawValue
        val _namelen = namelen
        val res = kni_gethostname(_name, _namelen)
        res
    }
}

@SymbolName("win32_kni_gethostname")
private external fun kni_gethostname(name: NativePtr, namelen: Int): Int

fun getservbyport(port: Int, proto: String?): CPointer<servent>? {
    return memScoped {
        val _port = port
        val _proto = proto?.cstr?.getPointer(memScope).rawValue
        val res = kni_getservbyport(_port, _proto)
        interpretCPointer<servent>(res)
    }
}

@SymbolName("win32_kni_getservbyport")
private external fun kni_getservbyport(port: Int, proto: NativePtr): NativePtr

fun getservbyname(name: String?, proto: String?): CPointer<servent>? {
    return memScoped {
        val _name = name?.cstr?.getPointer(memScope).rawValue
        val _proto = proto?.cstr?.getPointer(memScope).rawValue
        val res = kni_getservbyname(_name, _proto)
        interpretCPointer<servent>(res)
    }
}

@SymbolName("win32_kni_getservbyname")
private external fun kni_getservbyname(name: NativePtr, proto: NativePtr): NativePtr

fun getprotobynumber(number: Int): CPointer<protoent>? {
    val _number = number
    val res = kni_getprotobynumber(_number)
    return interpretCPointer<protoent>(res)
}

@SymbolName("win32_kni_getprotobynumber")
private external fun kni_getprotobynumber(number: Int): NativePtr

fun getprotobyname(name: String?): CPointer<protoent>? {
    return memScoped {
        val _name = name?.cstr?.getPointer(memScope).rawValue
        val res = kni_getprotobyname(_name)
        interpretCPointer<protoent>(res)
    }
}

@SymbolName("win32_kni_getprotobyname")
private external fun kni_getprotobyname(name: NativePtr): NativePtr

fun WSAStartup(wVersionRequested: WORD, lpWSAData: LPWSADATA?): Int {
    val _wVersionRequested = wVersionRequested
    val _lpWSAData = lpWSAData.rawValue
    val res = kni_WSAStartup(_wVersionRequested, _lpWSAData)
    return res
}

@SymbolName("win32_kni_WSAStartup")
private external fun kni_WSAStartup(wVersionRequested: Short, lpWSAData: NativePtr): Int

fun WSACleanup(): Int {
    val res = kni_WSACleanup()
    return res
}

@SymbolName("win32_kni_WSACleanup")
private external fun kni_WSACleanup(): Int

fun WSASetLastError(iError: Int): Unit {
    val _iError = iError
    val res = kni_WSASetLastError(_iError)
    return res
}

@SymbolName("win32_kni_WSASetLastError")
private external fun kni_WSASetLastError(iError: Int): Unit

fun WSAGetLastError(): Int {
    val res = kni_WSAGetLastError()
    return res
}

@SymbolName("win32_kni_WSAGetLastError")
private external fun kni_WSAGetLastError(): Int

fun WSAIsBlocking(): WINBOOL {
    val res = kni_WSAIsBlocking()
    return res
}

@SymbolName("win32_kni_WSAIsBlocking")
private external fun kni_WSAIsBlocking(): Int

fun WSAUnhookBlockingHook(): Int {
    val res = kni_WSAUnhookBlockingHook()
    return res
}

@SymbolName("win32_kni_WSAUnhookBlockingHook")
private external fun kni_WSAUnhookBlockingHook(): Int

fun WSACancelBlockingCall(): Int {
    val res = kni_WSACancelBlockingCall()
    return res
}

@SymbolName("win32_kni_WSACancelBlockingCall")
private external fun kni_WSACancelBlockingCall(): Int

fun WSAAsyncGetServByName(hWnd: HWND?, wMsg: u_int, name: String?, proto: String?, buf: CValuesRef<ByteVar>?, buflen: Int): HANDLE? {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _wMsg = wMsg
        val _name = name?.cstr?.getPointer(memScope).rawValue
        val _proto = proto?.cstr?.getPointer(memScope).rawValue
        val _buf = buf?.getPointer(memScope).rawValue
        val _buflen = buflen
        val res = kni_WSAAsyncGetServByName(_hWnd, _wMsg, _name, _proto, _buf, _buflen)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_WSAAsyncGetServByName")
private external fun kni_WSAAsyncGetServByName(hWnd: NativePtr, wMsg: Int, name: NativePtr, proto: NativePtr, buf: NativePtr, buflen: Int): NativePtr

fun WSAAsyncGetServByPort(hWnd: HWND?, wMsg: u_int, port: Int, proto: String?, buf: CValuesRef<ByteVar>?, buflen: Int): HANDLE? {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _wMsg = wMsg
        val _port = port
        val _proto = proto?.cstr?.getPointer(memScope).rawValue
        val _buf = buf?.getPointer(memScope).rawValue
        val _buflen = buflen
        val res = kni_WSAAsyncGetServByPort(_hWnd, _wMsg, _port, _proto, _buf, _buflen)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_WSAAsyncGetServByPort")
private external fun kni_WSAAsyncGetServByPort(hWnd: NativePtr, wMsg: Int, port: Int, proto: NativePtr, buf: NativePtr, buflen: Int): NativePtr

fun WSAAsyncGetProtoByName(hWnd: HWND?, wMsg: u_int, name: String?, buf: CValuesRef<ByteVar>?, buflen: Int): HANDLE? {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _wMsg = wMsg
        val _name = name?.cstr?.getPointer(memScope).rawValue
        val _buf = buf?.getPointer(memScope).rawValue
        val _buflen = buflen
        val res = kni_WSAAsyncGetProtoByName(_hWnd, _wMsg, _name, _buf, _buflen)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_WSAAsyncGetProtoByName")
private external fun kni_WSAAsyncGetProtoByName(hWnd: NativePtr, wMsg: Int, name: NativePtr, buf: NativePtr, buflen: Int): NativePtr

fun WSAAsyncGetProtoByNumber(hWnd: HWND?, wMsg: u_int, number: Int, buf: CValuesRef<ByteVar>?, buflen: Int): HANDLE? {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _wMsg = wMsg
        val _number = number
        val _buf = buf?.getPointer(memScope).rawValue
        val _buflen = buflen
        val res = kni_WSAAsyncGetProtoByNumber(_hWnd, _wMsg, _number, _buf, _buflen)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_WSAAsyncGetProtoByNumber")
private external fun kni_WSAAsyncGetProtoByNumber(hWnd: NativePtr, wMsg: Int, number: Int, buf: NativePtr, buflen: Int): NativePtr

fun WSAAsyncGetHostByName(hWnd: HWND?, wMsg: u_int, name: String?, buf: CValuesRef<ByteVar>?, buflen: Int): HANDLE? {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _wMsg = wMsg
        val _name = name?.cstr?.getPointer(memScope).rawValue
        val _buf = buf?.getPointer(memScope).rawValue
        val _buflen = buflen
        val res = kni_WSAAsyncGetHostByName(_hWnd, _wMsg, _name, _buf, _buflen)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_WSAAsyncGetHostByName")
private external fun kni_WSAAsyncGetHostByName(hWnd: NativePtr, wMsg: Int, name: NativePtr, buf: NativePtr, buflen: Int): NativePtr

fun WSAAsyncGetHostByAddr(hWnd: HWND?, wMsg: u_int, addr: String?, len: Int, type: Int, buf: CValuesRef<ByteVar>?, buflen: Int): HANDLE? {
    return memScoped {
        val _hWnd = hWnd.rawValue
        val _wMsg = wMsg
        val _addr = addr?.cstr?.getPointer(memScope).rawValue
        val _len = len
        val _type = type
        val _buf = buf?.getPointer(memScope).rawValue
        val _buflen = buflen
        val res = kni_WSAAsyncGetHostByAddr(_hWnd, _wMsg, _addr, _len, _type, _buf, _buflen)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_WSAAsyncGetHostByAddr")
private external fun kni_WSAAsyncGetHostByAddr(hWnd: NativePtr, wMsg: Int, addr: NativePtr, len: Int, type: Int, buf: NativePtr, buflen: Int): NativePtr

fun WSACancelAsyncRequest(hAsyncTaskHandle: HANDLE?): Int {
    val _hAsyncTaskHandle = hAsyncTaskHandle.rawValue
    val res = kni_WSACancelAsyncRequest(_hAsyncTaskHandle)
    return res
}

@SymbolName("win32_kni_WSACancelAsyncRequest")
private external fun kni_WSACancelAsyncRequest(hAsyncTaskHandle: NativePtr): Int

fun WSAAsyncSelect(s: SOCKET, hWnd: HWND?, wMsg: u_int, lEvent: Int): Int {
    val _s = s
    val _hWnd = hWnd.rawValue
    val _wMsg = wMsg
    val _lEvent = lEvent
    val res = kni_WSAAsyncSelect(_s, _hWnd, _wMsg, _lEvent)
    return res
}

@SymbolName("win32_kni_WSAAsyncSelect")
private external fun kni_WSAAsyncSelect(s: Long, hWnd: NativePtr, wMsg: Int, lEvent: Int): Int

fun WSARecvEx(s: SOCKET, buf: CValuesRef<ByteVar>?, len: Int, flags: CValuesRef<IntVar>?): Int {
    return memScoped {
        val _s = s
        val _buf = buf?.getPointer(memScope).rawValue
        val _len = len
        val _flags = flags?.getPointer(memScope).rawValue
        val res = kni_WSARecvEx(_s, _buf, _len, _flags)
        res
    }
}

@SymbolName("win32_kni_WSARecvEx")
private external fun kni_WSARecvEx(s: Long, buf: NativePtr, len: Int, flags: NativePtr): Int

fun TransmitFile(hSocket: SOCKET, hFile: HANDLE?, nNumberOfBytesToWrite: DWORD, nNumberOfBytesPerSend: DWORD, lpOverlapped: LPOVERLAPPED?, lpTransmitBuffers: LPTRANSMIT_FILE_BUFFERS?, dwReserved: DWORD): WINBOOL {
    val _hSocket = hSocket
    val _hFile = hFile.rawValue
    val _nNumberOfBytesToWrite = nNumberOfBytesToWrite
    val _nNumberOfBytesPerSend = nNumberOfBytesPerSend
    val _lpOverlapped = lpOverlapped.rawValue
    val _lpTransmitBuffers = lpTransmitBuffers.rawValue
    val _dwReserved = dwReserved
    val res = kni_TransmitFile(_hSocket, _hFile, _nNumberOfBytesToWrite, _nNumberOfBytesPerSend, _lpOverlapped, _lpTransmitBuffers, _dwReserved)
    return res
}

@SymbolName("win32_kni_TransmitFile")
private external fun kni_TransmitFile(hSocket: Long, hFile: NativePtr, nNumberOfBytesToWrite: Int, nNumberOfBytesPerSend: Int, lpOverlapped: NativePtr, lpTransmitBuffers: NativePtr, dwReserved: Int): Int

fun AcceptEx(sListenSocket: SOCKET, sAcceptSocket: SOCKET, lpOutputBuffer: PVOID?, dwReceiveDataLength: DWORD, dwLocalAddressLength: DWORD, dwRemoteAddressLength: DWORD, lpdwBytesReceived: LPDWORD?, lpOverlapped: LPOVERLAPPED?): WINBOOL {
    val _sListenSocket = sListenSocket
    val _sAcceptSocket = sAcceptSocket
    val _lpOutputBuffer = lpOutputBuffer.rawValue
    val _dwReceiveDataLength = dwReceiveDataLength
    val _dwLocalAddressLength = dwLocalAddressLength
    val _dwRemoteAddressLength = dwRemoteAddressLength
    val _lpdwBytesReceived = lpdwBytesReceived.rawValue
    val _lpOverlapped = lpOverlapped.rawValue
    val res = kni_AcceptEx(_sListenSocket, _sAcceptSocket, _lpOutputBuffer, _dwReceiveDataLength, _dwLocalAddressLength, _dwRemoteAddressLength, _lpdwBytesReceived, _lpOverlapped)
    return res
}

@SymbolName("win32_kni_AcceptEx")
private external fun kni_AcceptEx(sListenSocket: Long, sAcceptSocket: Long, lpOutputBuffer: NativePtr, dwReceiveDataLength: Int, dwLocalAddressLength: Int, dwRemoteAddressLength: Int, lpdwBytesReceived: NativePtr, lpOverlapped: NativePtr): Int

fun GetAcceptExSockaddrs(lpOutputBuffer: PVOID?, dwReceiveDataLength: DWORD, dwLocalAddressLength: DWORD, dwRemoteAddressLength: DWORD, LocalSockaddr: CValuesRef<CPointerVar<sockaddr>>?, LocalSockaddrLength: LPINT?, RemoteSockaddr: CValuesRef<CPointerVar<sockaddr>>?, RemoteSockaddrLength: LPINT?): Unit {
    return memScoped {
        val _lpOutputBuffer = lpOutputBuffer.rawValue
        val _dwReceiveDataLength = dwReceiveDataLength
        val _dwLocalAddressLength = dwLocalAddressLength
        val _dwRemoteAddressLength = dwRemoteAddressLength
        val _LocalSockaddr = LocalSockaddr?.getPointer(memScope).rawValue
        val _LocalSockaddrLength = LocalSockaddrLength.rawValue
        val _RemoteSockaddr = RemoteSockaddr?.getPointer(memScope).rawValue
        val _RemoteSockaddrLength = RemoteSockaddrLength.rawValue
        val res = kni_GetAcceptExSockaddrs(_lpOutputBuffer, _dwReceiveDataLength, _dwLocalAddressLength, _dwRemoteAddressLength, _LocalSockaddr, _LocalSockaddrLength, _RemoteSockaddr, _RemoteSockaddrLength)
        res
    }
}

@SymbolName("win32_kni_GetAcceptExSockaddrs")
private external fun kni_GetAcceptExSockaddrs(lpOutputBuffer: NativePtr, dwReceiveDataLength: Int, dwLocalAddressLength: Int, dwRemoteAddressLength: Int, LocalSockaddr: NativePtr, LocalSockaddrLength: NativePtr, RemoteSockaddr: NativePtr, RemoteSockaddrLength: NativePtr): Unit

fun CryptAcquireContextA(phProv: CValuesRef<HCRYPTPROVVar>?, szContainer: String?, szProvider: String?, dwProvType: DWORD, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _phProv = phProv?.getPointer(memScope).rawValue
        val _szContainer = szContainer?.cstr?.getPointer(memScope).rawValue
        val _szProvider = szProvider?.cstr?.getPointer(memScope).rawValue
        val _dwProvType = dwProvType
        val _dwFlags = dwFlags
        val res = kni_CryptAcquireContextA(_phProv, _szContainer, _szProvider, _dwProvType, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptAcquireContextA")
private external fun kni_CryptAcquireContextA(phProv: NativePtr, szContainer: NativePtr, szProvider: NativePtr, dwProvType: Int, dwFlags: Int): Int

fun CryptAcquireContextW(phProv: CValuesRef<HCRYPTPROVVar>?, szContainer: String?, szProvider: String?, dwProvType: DWORD, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _phProv = phProv?.getPointer(memScope).rawValue
        val _szContainer = szContainer?.wcstr?.getPointer(memScope).rawValue
        val _szProvider = szProvider?.wcstr?.getPointer(memScope).rawValue
        val _dwProvType = dwProvType
        val _dwFlags = dwFlags
        val res = kni_CryptAcquireContextW(_phProv, _szContainer, _szProvider, _dwProvType, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptAcquireContextW")
private external fun kni_CryptAcquireContextW(phProv: NativePtr, szContainer: NativePtr, szProvider: NativePtr, dwProvType: Int, dwFlags: Int): Int

fun CryptReleaseContext(hProv: HCRYPTPROV, dwFlags: DWORD): WINBOOL {
    val _hProv = hProv
    val _dwFlags = dwFlags
    val res = kni_CryptReleaseContext(_hProv, _dwFlags)
    return res
}

@SymbolName("win32_kni_CryptReleaseContext")
private external fun kni_CryptReleaseContext(hProv: Long, dwFlags: Int): Int

fun CryptGenRandom(hProv: HCRYPTPROV, dwLen: DWORD, pbBuffer: CValuesRef<BYTEVar>?): WINBOOL {
    return memScoped {
        val _hProv = hProv
        val _dwLen = dwLen
        val _pbBuffer = pbBuffer?.getPointer(memScope).rawValue
        val res = kni_CryptGenRandom(_hProv, _dwLen, _pbBuffer)
        res
    }
}

@SymbolName("win32_kni_CryptGenRandom")
private external fun kni_CryptGenRandom(hProv: Long, dwLen: Int, pbBuffer: NativePtr): Int

fun CryptGenKey(hProv: HCRYPTPROV, Algid: ALG_ID, dwFlags: DWORD, phKey: CValuesRef<HCRYPTKEYVar>?): WINBOOL {
    return memScoped {
        val _hProv = hProv
        val _Algid = Algid
        val _dwFlags = dwFlags
        val _phKey = phKey?.getPointer(memScope).rawValue
        val res = kni_CryptGenKey(_hProv, _Algid, _dwFlags, _phKey)
        res
    }
}

@SymbolName("win32_kni_CryptGenKey")
private external fun kni_CryptGenKey(hProv: Long, Algid: Int, dwFlags: Int, phKey: NativePtr): Int

fun CryptDeriveKey(hProv: HCRYPTPROV, Algid: ALG_ID, hBaseData: HCRYPTHASH, dwFlags: DWORD, phKey: CValuesRef<HCRYPTKEYVar>?): WINBOOL {
    return memScoped {
        val _hProv = hProv
        val _Algid = Algid
        val _hBaseData = hBaseData
        val _dwFlags = dwFlags
        val _phKey = phKey?.getPointer(memScope).rawValue
        val res = kni_CryptDeriveKey(_hProv, _Algid, _hBaseData, _dwFlags, _phKey)
        res
    }
}

@SymbolName("win32_kni_CryptDeriveKey")
private external fun kni_CryptDeriveKey(hProv: Long, Algid: Int, hBaseData: Long, dwFlags: Int, phKey: NativePtr): Int

fun CryptDestroyKey(hKey: HCRYPTKEY): WINBOOL {
    val _hKey = hKey
    val res = kni_CryptDestroyKey(_hKey)
    return res
}

@SymbolName("win32_kni_CryptDestroyKey")
private external fun kni_CryptDestroyKey(hKey: Long): Int

fun CryptSetKeyParam(hKey: HCRYPTKEY, dwParam: DWORD, pbData: CValuesRef<BYTEVar>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hKey = hKey
        val _dwParam = dwParam
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptSetKeyParam(_hKey, _dwParam, _pbData, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptSetKeyParam")
private external fun kni_CryptSetKeyParam(hKey: Long, dwParam: Int, pbData: NativePtr, dwFlags: Int): Int

fun CryptGetKeyParam(hKey: HCRYPTKEY, dwParam: DWORD, pbData: CValuesRef<BYTEVar>?, pdwDataLen: CValuesRef<DWORDVar>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hKey = hKey
        val _dwParam = dwParam
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _pdwDataLen = pdwDataLen?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptGetKeyParam(_hKey, _dwParam, _pbData, _pdwDataLen, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptGetKeyParam")
private external fun kni_CryptGetKeyParam(hKey: Long, dwParam: Int, pbData: NativePtr, pdwDataLen: NativePtr, dwFlags: Int): Int

fun CryptSetHashParam(hHash: HCRYPTHASH, dwParam: DWORD, pbData: CValuesRef<BYTEVar>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hHash = hHash
        val _dwParam = dwParam
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptSetHashParam(_hHash, _dwParam, _pbData, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptSetHashParam")
private external fun kni_CryptSetHashParam(hHash: Long, dwParam: Int, pbData: NativePtr, dwFlags: Int): Int

fun CryptGetHashParam(hHash: HCRYPTHASH, dwParam: DWORD, pbData: CValuesRef<BYTEVar>?, pdwDataLen: CValuesRef<DWORDVar>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hHash = hHash
        val _dwParam = dwParam
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _pdwDataLen = pdwDataLen?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptGetHashParam(_hHash, _dwParam, _pbData, _pdwDataLen, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptGetHashParam")
private external fun kni_CryptGetHashParam(hHash: Long, dwParam: Int, pbData: NativePtr, pdwDataLen: NativePtr, dwFlags: Int): Int

fun CryptSetProvParam(hProv: HCRYPTPROV, dwParam: DWORD, pbData: CValuesRef<BYTEVar>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hProv = hProv
        val _dwParam = dwParam
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptSetProvParam(_hProv, _dwParam, _pbData, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptSetProvParam")
private external fun kni_CryptSetProvParam(hProv: Long, dwParam: Int, pbData: NativePtr, dwFlags: Int): Int

fun CryptGetProvParam(hProv: HCRYPTPROV, dwParam: DWORD, pbData: CValuesRef<BYTEVar>?, pdwDataLen: CValuesRef<DWORDVar>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hProv = hProv
        val _dwParam = dwParam
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _pdwDataLen = pdwDataLen?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptGetProvParam(_hProv, _dwParam, _pbData, _pdwDataLen, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptGetProvParam")
private external fun kni_CryptGetProvParam(hProv: Long, dwParam: Int, pbData: NativePtr, pdwDataLen: NativePtr, dwFlags: Int): Int

fun CryptGetUserKey(hProv: HCRYPTPROV, dwKeySpec: DWORD, phUserKey: CValuesRef<HCRYPTKEYVar>?): WINBOOL {
    return memScoped {
        val _hProv = hProv
        val _dwKeySpec = dwKeySpec
        val _phUserKey = phUserKey?.getPointer(memScope).rawValue
        val res = kni_CryptGetUserKey(_hProv, _dwKeySpec, _phUserKey)
        res
    }
}

@SymbolName("win32_kni_CryptGetUserKey")
private external fun kni_CryptGetUserKey(hProv: Long, dwKeySpec: Int, phUserKey: NativePtr): Int

fun CryptExportKey(hKey: HCRYPTKEY, hExpKey: HCRYPTKEY, dwBlobType: DWORD, dwFlags: DWORD, pbData: CValuesRef<BYTEVar>?, pdwDataLen: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hKey = hKey
        val _hExpKey = hExpKey
        val _dwBlobType = dwBlobType
        val _dwFlags = dwFlags
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _pdwDataLen = pdwDataLen?.getPointer(memScope).rawValue
        val res = kni_CryptExportKey(_hKey, _hExpKey, _dwBlobType, _dwFlags, _pbData, _pdwDataLen)
        res
    }
}

@SymbolName("win32_kni_CryptExportKey")
private external fun kni_CryptExportKey(hKey: Long, hExpKey: Long, dwBlobType: Int, dwFlags: Int, pbData: NativePtr, pdwDataLen: NativePtr): Int

fun CryptImportKey(hProv: HCRYPTPROV, pbData: CValuesRef<BYTEVar>?, dwDataLen: DWORD, hPubKey: HCRYPTKEY, dwFlags: DWORD, phKey: CValuesRef<HCRYPTKEYVar>?): WINBOOL {
    return memScoped {
        val _hProv = hProv
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _dwDataLen = dwDataLen
        val _hPubKey = hPubKey
        val _dwFlags = dwFlags
        val _phKey = phKey?.getPointer(memScope).rawValue
        val res = kni_CryptImportKey(_hProv, _pbData, _dwDataLen, _hPubKey, _dwFlags, _phKey)
        res
    }
}

@SymbolName("win32_kni_CryptImportKey")
private external fun kni_CryptImportKey(hProv: Long, pbData: NativePtr, dwDataLen: Int, hPubKey: Long, dwFlags: Int, phKey: NativePtr): Int

fun CryptEncrypt(hKey: HCRYPTKEY, hHash: HCRYPTHASH, Final: WINBOOL, dwFlags: DWORD, pbData: CValuesRef<BYTEVar>?, pdwDataLen: CValuesRef<DWORDVar>?, dwBufLen: DWORD): WINBOOL {
    return memScoped {
        val _hKey = hKey
        val _hHash = hHash
        val _Final = Final
        val _dwFlags = dwFlags
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _pdwDataLen = pdwDataLen?.getPointer(memScope).rawValue
        val _dwBufLen = dwBufLen
        val res = kni_CryptEncrypt(_hKey, _hHash, _Final, _dwFlags, _pbData, _pdwDataLen, _dwBufLen)
        res
    }
}

@SymbolName("win32_kni_CryptEncrypt")
private external fun kni_CryptEncrypt(hKey: Long, hHash: Long, Final: Int, dwFlags: Int, pbData: NativePtr, pdwDataLen: NativePtr, dwBufLen: Int): Int

fun CryptDecrypt(hKey: HCRYPTKEY, hHash: HCRYPTHASH, Final: WINBOOL, dwFlags: DWORD, pbData: CValuesRef<BYTEVar>?, pdwDataLen: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hKey = hKey
        val _hHash = hHash
        val _Final = Final
        val _dwFlags = dwFlags
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _pdwDataLen = pdwDataLen?.getPointer(memScope).rawValue
        val res = kni_CryptDecrypt(_hKey, _hHash, _Final, _dwFlags, _pbData, _pdwDataLen)
        res
    }
}

@SymbolName("win32_kni_CryptDecrypt")
private external fun kni_CryptDecrypt(hKey: Long, hHash: Long, Final: Int, dwFlags: Int, pbData: NativePtr, pdwDataLen: NativePtr): Int

fun CryptCreateHash(hProv: HCRYPTPROV, Algid: ALG_ID, hKey: HCRYPTKEY, dwFlags: DWORD, phHash: CValuesRef<HCRYPTHASHVar>?): WINBOOL {
    return memScoped {
        val _hProv = hProv
        val _Algid = Algid
        val _hKey = hKey
        val _dwFlags = dwFlags
        val _phHash = phHash?.getPointer(memScope).rawValue
        val res = kni_CryptCreateHash(_hProv, _Algid, _hKey, _dwFlags, _phHash)
        res
    }
}

@SymbolName("win32_kni_CryptCreateHash")
private external fun kni_CryptCreateHash(hProv: Long, Algid: Int, hKey: Long, dwFlags: Int, phHash: NativePtr): Int

fun CryptHashData(hHash: HCRYPTHASH, pbData: CValuesRef<BYTEVar>?, dwDataLen: DWORD, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hHash = hHash
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _dwDataLen = dwDataLen
        val _dwFlags = dwFlags
        val res = kni_CryptHashData(_hHash, _pbData, _dwDataLen, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptHashData")
private external fun kni_CryptHashData(hHash: Long, pbData: NativePtr, dwDataLen: Int, dwFlags: Int): Int

fun CryptHashSessionKey(hHash: HCRYPTHASH, hKey: HCRYPTKEY, dwFlags: DWORD): WINBOOL {
    val _hHash = hHash
    val _hKey = hKey
    val _dwFlags = dwFlags
    val res = kni_CryptHashSessionKey(_hHash, _hKey, _dwFlags)
    return res
}

@SymbolName("win32_kni_CryptHashSessionKey")
private external fun kni_CryptHashSessionKey(hHash: Long, hKey: Long, dwFlags: Int): Int

fun CryptDestroyHash(hHash: HCRYPTHASH): WINBOOL {
    val _hHash = hHash
    val res = kni_CryptDestroyHash(_hHash)
    return res
}

@SymbolName("win32_kni_CryptDestroyHash")
private external fun kni_CryptDestroyHash(hHash: Long): Int

fun CryptSignHashA(hHash: HCRYPTHASH, dwKeySpec: DWORD, szDescription: String?, dwFlags: DWORD, pbSignature: CValuesRef<BYTEVar>?, pdwSigLen: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hHash = hHash
        val _dwKeySpec = dwKeySpec
        val _szDescription = szDescription?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pbSignature = pbSignature?.getPointer(memScope).rawValue
        val _pdwSigLen = pdwSigLen?.getPointer(memScope).rawValue
        val res = kni_CryptSignHashA(_hHash, _dwKeySpec, _szDescription, _dwFlags, _pbSignature, _pdwSigLen)
        res
    }
}

@SymbolName("win32_kni_CryptSignHashA")
private external fun kni_CryptSignHashA(hHash: Long, dwKeySpec: Int, szDescription: NativePtr, dwFlags: Int, pbSignature: NativePtr, pdwSigLen: NativePtr): Int

fun CryptSignHashW(hHash: HCRYPTHASH, dwKeySpec: DWORD, szDescription: String?, dwFlags: DWORD, pbSignature: CValuesRef<BYTEVar>?, pdwSigLen: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hHash = hHash
        val _dwKeySpec = dwKeySpec
        val _szDescription = szDescription?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pbSignature = pbSignature?.getPointer(memScope).rawValue
        val _pdwSigLen = pdwSigLen?.getPointer(memScope).rawValue
        val res = kni_CryptSignHashW(_hHash, _dwKeySpec, _szDescription, _dwFlags, _pbSignature, _pdwSigLen)
        res
    }
}

@SymbolName("win32_kni_CryptSignHashW")
private external fun kni_CryptSignHashW(hHash: Long, dwKeySpec: Int, szDescription: NativePtr, dwFlags: Int, pbSignature: NativePtr, pdwSigLen: NativePtr): Int

fun CryptVerifySignatureA(hHash: HCRYPTHASH, pbSignature: CValuesRef<BYTEVar>?, dwSigLen: DWORD, hPubKey: HCRYPTKEY, szDescription: String?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hHash = hHash
        val _pbSignature = pbSignature?.getPointer(memScope).rawValue
        val _dwSigLen = dwSigLen
        val _hPubKey = hPubKey
        val _szDescription = szDescription?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptVerifySignatureA(_hHash, _pbSignature, _dwSigLen, _hPubKey, _szDescription, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptVerifySignatureA")
private external fun kni_CryptVerifySignatureA(hHash: Long, pbSignature: NativePtr, dwSigLen: Int, hPubKey: Long, szDescription: NativePtr, dwFlags: Int): Int

fun CryptVerifySignatureW(hHash: HCRYPTHASH, pbSignature: CValuesRef<BYTEVar>?, dwSigLen: DWORD, hPubKey: HCRYPTKEY, szDescription: String?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hHash = hHash
        val _pbSignature = pbSignature?.getPointer(memScope).rawValue
        val _dwSigLen = dwSigLen
        val _hPubKey = hPubKey
        val _szDescription = szDescription?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptVerifySignatureW(_hHash, _pbSignature, _dwSigLen, _hPubKey, _szDescription, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptVerifySignatureW")
private external fun kni_CryptVerifySignatureW(hHash: Long, pbSignature: NativePtr, dwSigLen: Int, hPubKey: Long, szDescription: NativePtr, dwFlags: Int): Int

fun CryptSetProviderA(pszProvName: String?, dwProvType: DWORD): WINBOOL {
    return memScoped {
        val _pszProvName = pszProvName?.cstr?.getPointer(memScope).rawValue
        val _dwProvType = dwProvType
        val res = kni_CryptSetProviderA(_pszProvName, _dwProvType)
        res
    }
}

@SymbolName("win32_kni_CryptSetProviderA")
private external fun kni_CryptSetProviderA(pszProvName: NativePtr, dwProvType: Int): Int

fun CryptSetProviderW(pszProvName: String?, dwProvType: DWORD): WINBOOL {
    return memScoped {
        val _pszProvName = pszProvName?.wcstr?.getPointer(memScope).rawValue
        val _dwProvType = dwProvType
        val res = kni_CryptSetProviderW(_pszProvName, _dwProvType)
        res
    }
}

@SymbolName("win32_kni_CryptSetProviderW")
private external fun kni_CryptSetProviderW(pszProvName: NativePtr, dwProvType: Int): Int

fun CryptSetProviderExA(pszProvName: String?, dwProvType: DWORD, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _pszProvName = pszProvName?.cstr?.getPointer(memScope).rawValue
        val _dwProvType = dwProvType
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptSetProviderExA(_pszProvName, _dwProvType, _pdwReserved, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptSetProviderExA")
private external fun kni_CryptSetProviderExA(pszProvName: NativePtr, dwProvType: Int, pdwReserved: NativePtr, dwFlags: Int): Int

fun CryptSetProviderExW(pszProvName: String?, dwProvType: DWORD, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _pszProvName = pszProvName?.wcstr?.getPointer(memScope).rawValue
        val _dwProvType = dwProvType
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptSetProviderExW(_pszProvName, _dwProvType, _pdwReserved, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptSetProviderExW")
private external fun kni_CryptSetProviderExW(pszProvName: NativePtr, dwProvType: Int, pdwReserved: NativePtr, dwFlags: Int): Int

fun CryptGetDefaultProviderA(dwProvType: DWORD, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD, pszProvName: LPSTR?, pcbProvName: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwProvType = dwProvType
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pszProvName = pszProvName.rawValue
        val _pcbProvName = pcbProvName?.getPointer(memScope).rawValue
        val res = kni_CryptGetDefaultProviderA(_dwProvType, _pdwReserved, _dwFlags, _pszProvName, _pcbProvName)
        res
    }
}

@SymbolName("win32_kni_CryptGetDefaultProviderA")
private external fun kni_CryptGetDefaultProviderA(dwProvType: Int, pdwReserved: NativePtr, dwFlags: Int, pszProvName: NativePtr, pcbProvName: NativePtr): Int

fun CryptGetDefaultProviderW(dwProvType: DWORD, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD, pszProvName: LPWSTR?, pcbProvName: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwProvType = dwProvType
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pszProvName = pszProvName.rawValue
        val _pcbProvName = pcbProvName?.getPointer(memScope).rawValue
        val res = kni_CryptGetDefaultProviderW(_dwProvType, _pdwReserved, _dwFlags, _pszProvName, _pcbProvName)
        res
    }
}

@SymbolName("win32_kni_CryptGetDefaultProviderW")
private external fun kni_CryptGetDefaultProviderW(dwProvType: Int, pdwReserved: NativePtr, dwFlags: Int, pszProvName: NativePtr, pcbProvName: NativePtr): Int

fun CryptEnumProviderTypesA(dwIndex: DWORD, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD, pdwProvType: CValuesRef<DWORDVar>?, szTypeName: LPSTR?, pcbTypeName: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwIndex = dwIndex
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pdwProvType = pdwProvType?.getPointer(memScope).rawValue
        val _szTypeName = szTypeName.rawValue
        val _pcbTypeName = pcbTypeName?.getPointer(memScope).rawValue
        val res = kni_CryptEnumProviderTypesA(_dwIndex, _pdwReserved, _dwFlags, _pdwProvType, _szTypeName, _pcbTypeName)
        res
    }
}

@SymbolName("win32_kni_CryptEnumProviderTypesA")
private external fun kni_CryptEnumProviderTypesA(dwIndex: Int, pdwReserved: NativePtr, dwFlags: Int, pdwProvType: NativePtr, szTypeName: NativePtr, pcbTypeName: NativePtr): Int

fun CryptEnumProviderTypesW(dwIndex: DWORD, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD, pdwProvType: CValuesRef<DWORDVar>?, szTypeName: LPWSTR?, pcbTypeName: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwIndex = dwIndex
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pdwProvType = pdwProvType?.getPointer(memScope).rawValue
        val _szTypeName = szTypeName.rawValue
        val _pcbTypeName = pcbTypeName?.getPointer(memScope).rawValue
        val res = kni_CryptEnumProviderTypesW(_dwIndex, _pdwReserved, _dwFlags, _pdwProvType, _szTypeName, _pcbTypeName)
        res
    }
}

@SymbolName("win32_kni_CryptEnumProviderTypesW")
private external fun kni_CryptEnumProviderTypesW(dwIndex: Int, pdwReserved: NativePtr, dwFlags: Int, pdwProvType: NativePtr, szTypeName: NativePtr, pcbTypeName: NativePtr): Int

fun CryptEnumProvidersA(dwIndex: DWORD, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD, pdwProvType: CValuesRef<DWORDVar>?, szProvName: LPSTR?, pcbProvName: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwIndex = dwIndex
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pdwProvType = pdwProvType?.getPointer(memScope).rawValue
        val _szProvName = szProvName.rawValue
        val _pcbProvName = pcbProvName?.getPointer(memScope).rawValue
        val res = kni_CryptEnumProvidersA(_dwIndex, _pdwReserved, _dwFlags, _pdwProvType, _szProvName, _pcbProvName)
        res
    }
}

@SymbolName("win32_kni_CryptEnumProvidersA")
private external fun kni_CryptEnumProvidersA(dwIndex: Int, pdwReserved: NativePtr, dwFlags: Int, pdwProvType: NativePtr, szProvName: NativePtr, pcbProvName: NativePtr): Int

fun CryptEnumProvidersW(dwIndex: DWORD, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD, pdwProvType: CValuesRef<DWORDVar>?, szProvName: LPWSTR?, pcbProvName: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwIndex = dwIndex
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pdwProvType = pdwProvType?.getPointer(memScope).rawValue
        val _szProvName = szProvName.rawValue
        val _pcbProvName = pcbProvName?.getPointer(memScope).rawValue
        val res = kni_CryptEnumProvidersW(_dwIndex, _pdwReserved, _dwFlags, _pdwProvType, _szProvName, _pcbProvName)
        res
    }
}

@SymbolName("win32_kni_CryptEnumProvidersW")
private external fun kni_CryptEnumProvidersW(dwIndex: Int, pdwReserved: NativePtr, dwFlags: Int, pdwProvType: NativePtr, szProvName: NativePtr, pcbProvName: NativePtr): Int

fun CryptContextAddRef(hProv: HCRYPTPROV, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hProv = hProv
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptContextAddRef(_hProv, _pdwReserved, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptContextAddRef")
private external fun kni_CryptContextAddRef(hProv: Long, pdwReserved: NativePtr, dwFlags: Int): Int

fun CryptDuplicateKey(hKey: HCRYPTKEY, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD, phKey: CValuesRef<HCRYPTKEYVar>?): WINBOOL {
    return memScoped {
        val _hKey = hKey
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _phKey = phKey?.getPointer(memScope).rawValue
        val res = kni_CryptDuplicateKey(_hKey, _pdwReserved, _dwFlags, _phKey)
        res
    }
}

@SymbolName("win32_kni_CryptDuplicateKey")
private external fun kni_CryptDuplicateKey(hKey: Long, pdwReserved: NativePtr, dwFlags: Int, phKey: NativePtr): Int

fun CryptDuplicateHash(hHash: HCRYPTHASH, pdwReserved: CValuesRef<DWORDVar>?, dwFlags: DWORD, phHash: CValuesRef<HCRYPTHASHVar>?): WINBOOL {
    return memScoped {
        val _hHash = hHash
        val _pdwReserved = pdwReserved?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _phHash = phHash?.getPointer(memScope).rawValue
        val res = kni_CryptDuplicateHash(_hHash, _pdwReserved, _dwFlags, _phHash)
        res
    }
}

@SymbolName("win32_kni_CryptDuplicateHash")
private external fun kni_CryptDuplicateHash(hHash: Long, pdwReserved: NativePtr, dwFlags: Int, phHash: NativePtr): Int

fun GetEncSChannel(pData: CValuesRef<CPointerVar<BYTEVar>>?, dwDecSize: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pData = pData?.getPointer(memScope).rawValue
        val _dwDecSize = dwDecSize?.getPointer(memScope).rawValue
        val res = kni_GetEncSChannel(_pData, _dwDecSize)
        res
    }
}

@SymbolName("win32_kni_GetEncSChannel")
private external fun kni_GetEncSChannel(pData: NativePtr, dwDecSize: NativePtr): Int

fun CryptFormatObject(dwCertEncodingType: DWORD, dwFormatType: DWORD, dwFormatStrType: DWORD, pFormatStruct: COpaquePointer?, lpszStructType: String?, pbEncoded: CValuesRef<BYTEVar>?, cbEncoded: DWORD, pbFormat: COpaquePointer?, pcbFormat: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _dwFormatType = dwFormatType
        val _dwFormatStrType = dwFormatStrType
        val _pFormatStruct = pFormatStruct.rawValue
        val _lpszStructType = lpszStructType?.cstr?.getPointer(memScope).rawValue
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _cbEncoded = cbEncoded
        val _pbFormat = pbFormat.rawValue
        val _pcbFormat = pcbFormat?.getPointer(memScope).rawValue
        val res = kni_CryptFormatObject(_dwCertEncodingType, _dwFormatType, _dwFormatStrType, _pFormatStruct, _lpszStructType, _pbEncoded, _cbEncoded, _pbFormat, _pcbFormat)
        res
    }
}

@SymbolName("win32_kni_CryptFormatObject")
private external fun kni_CryptFormatObject(dwCertEncodingType: Int, dwFormatType: Int, dwFormatStrType: Int, pFormatStruct: NativePtr, lpszStructType: NativePtr, pbEncoded: NativePtr, cbEncoded: Int, pbFormat: NativePtr, pcbFormat: NativePtr): Int

fun CryptEncodeObjectEx(dwCertEncodingType: DWORD, lpszStructType: String?, pvStructInfo: COpaquePointer?, dwFlags: DWORD, pEncodePara: PCRYPT_ENCODE_PARA?, pvEncoded: COpaquePointer?, pcbEncoded: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _lpszStructType = lpszStructType?.cstr?.getPointer(memScope).rawValue
        val _pvStructInfo = pvStructInfo.rawValue
        val _dwFlags = dwFlags
        val _pEncodePara = pEncodePara.rawValue
        val _pvEncoded = pvEncoded.rawValue
        val _pcbEncoded = pcbEncoded?.getPointer(memScope).rawValue
        val res = kni_CryptEncodeObjectEx(_dwCertEncodingType, _lpszStructType, _pvStructInfo, _dwFlags, _pEncodePara, _pvEncoded, _pcbEncoded)
        res
    }
}

@SymbolName("win32_kni_CryptEncodeObjectEx")
private external fun kni_CryptEncodeObjectEx(dwCertEncodingType: Int, lpszStructType: NativePtr, pvStructInfo: NativePtr, dwFlags: Int, pEncodePara: NativePtr, pvEncoded: NativePtr, pcbEncoded: NativePtr): Int

fun CryptEncodeObject(dwCertEncodingType: DWORD, lpszStructType: String?, pvStructInfo: COpaquePointer?, pbEncoded: CValuesRef<BYTEVar>?, pcbEncoded: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _lpszStructType = lpszStructType?.cstr?.getPointer(memScope).rawValue
        val _pvStructInfo = pvStructInfo.rawValue
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _pcbEncoded = pcbEncoded?.getPointer(memScope).rawValue
        val res = kni_CryptEncodeObject(_dwCertEncodingType, _lpszStructType, _pvStructInfo, _pbEncoded, _pcbEncoded)
        res
    }
}

@SymbolName("win32_kni_CryptEncodeObject")
private external fun kni_CryptEncodeObject(dwCertEncodingType: Int, lpszStructType: NativePtr, pvStructInfo: NativePtr, pbEncoded: NativePtr, pcbEncoded: NativePtr): Int

fun CryptDecodeObjectEx(dwCertEncodingType: DWORD, lpszStructType: String?, pbEncoded: CValuesRef<BYTEVar>?, cbEncoded: DWORD, dwFlags: DWORD, pDecodePara: PCRYPT_DECODE_PARA?, pvStructInfo: COpaquePointer?, pcbStructInfo: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _lpszStructType = lpszStructType?.cstr?.getPointer(memScope).rawValue
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _cbEncoded = cbEncoded
        val _dwFlags = dwFlags
        val _pDecodePara = pDecodePara.rawValue
        val _pvStructInfo = pvStructInfo.rawValue
        val _pcbStructInfo = pcbStructInfo?.getPointer(memScope).rawValue
        val res = kni_CryptDecodeObjectEx(_dwCertEncodingType, _lpszStructType, _pbEncoded, _cbEncoded, _dwFlags, _pDecodePara, _pvStructInfo, _pcbStructInfo)
        res
    }
}

@SymbolName("win32_kni_CryptDecodeObjectEx")
private external fun kni_CryptDecodeObjectEx(dwCertEncodingType: Int, lpszStructType: NativePtr, pbEncoded: NativePtr, cbEncoded: Int, dwFlags: Int, pDecodePara: NativePtr, pvStructInfo: NativePtr, pcbStructInfo: NativePtr): Int

fun CryptDecodeObject(dwCertEncodingType: DWORD, lpszStructType: String?, pbEncoded: CValuesRef<BYTEVar>?, cbEncoded: DWORD, dwFlags: DWORD, pvStructInfo: COpaquePointer?, pcbStructInfo: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _lpszStructType = lpszStructType?.cstr?.getPointer(memScope).rawValue
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _cbEncoded = cbEncoded
        val _dwFlags = dwFlags
        val _pvStructInfo = pvStructInfo.rawValue
        val _pcbStructInfo = pcbStructInfo?.getPointer(memScope).rawValue
        val res = kni_CryptDecodeObject(_dwCertEncodingType, _lpszStructType, _pbEncoded, _cbEncoded, _dwFlags, _pvStructInfo, _pcbStructInfo)
        res
    }
}

@SymbolName("win32_kni_CryptDecodeObject")
private external fun kni_CryptDecodeObject(dwCertEncodingType: Int, lpszStructType: NativePtr, pbEncoded: NativePtr, cbEncoded: Int, dwFlags: Int, pvStructInfo: NativePtr, pcbStructInfo: NativePtr): Int

fun CryptInstallOIDFunctionAddress(hModule: HMODULE?, dwEncodingType: DWORD, pszFuncName: String?, cFuncEntry: DWORD, rgFuncEntry: CValuesRef<CRYPT_OID_FUNC_ENTRY>?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hModule = hModule.rawValue
        val _dwEncodingType = dwEncodingType
        val _pszFuncName = pszFuncName?.cstr?.getPointer(memScope).rawValue
        val _cFuncEntry = cFuncEntry
        val _rgFuncEntry = rgFuncEntry?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptInstallOIDFunctionAddress(_hModule, _dwEncodingType, _pszFuncName, _cFuncEntry, _rgFuncEntry, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptInstallOIDFunctionAddress")
private external fun kni_CryptInstallOIDFunctionAddress(hModule: NativePtr, dwEncodingType: Int, pszFuncName: NativePtr, cFuncEntry: Int, rgFuncEntry: NativePtr, dwFlags: Int): Int

fun CryptInitOIDFunctionSet(pszFuncName: String?, dwFlags: DWORD): HCRYPTOIDFUNCSET? {
    return memScoped {
        val _pszFuncName = pszFuncName?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_CryptInitOIDFunctionSet(_pszFuncName, _dwFlags)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CryptInitOIDFunctionSet")
private external fun kni_CryptInitOIDFunctionSet(pszFuncName: NativePtr, dwFlags: Int): NativePtr

fun CryptGetOIDFunctionAddress(hFuncSet: HCRYPTOIDFUNCSET?, dwEncodingType: DWORD, pszOID: String?, dwFlags: DWORD, ppvFuncAddr: CValuesRef<COpaquePointerVar>?, phFuncAddr: CValuesRef<HCRYPTOIDFUNCADDRVar>?): WINBOOL {
    return memScoped {
        val _hFuncSet = hFuncSet.rawValue
        val _dwEncodingType = dwEncodingType
        val _pszOID = pszOID?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _ppvFuncAddr = ppvFuncAddr?.getPointer(memScope).rawValue
        val _phFuncAddr = phFuncAddr?.getPointer(memScope).rawValue
        val res = kni_CryptGetOIDFunctionAddress(_hFuncSet, _dwEncodingType, _pszOID, _dwFlags, _ppvFuncAddr, _phFuncAddr)
        res
    }
}

@SymbolName("win32_kni_CryptGetOIDFunctionAddress")
private external fun kni_CryptGetOIDFunctionAddress(hFuncSet: NativePtr, dwEncodingType: Int, pszOID: NativePtr, dwFlags: Int, ppvFuncAddr: NativePtr, phFuncAddr: NativePtr): Int

fun CryptGetDefaultOIDDllList(hFuncSet: HCRYPTOIDFUNCSET?, dwEncodingType: DWORD, pwszDllList: CValuesRef<WCHARVar>?, pcchDllList: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hFuncSet = hFuncSet.rawValue
        val _dwEncodingType = dwEncodingType
        val _pwszDllList = pwszDllList?.getPointer(memScope).rawValue
        val _pcchDllList = pcchDllList?.getPointer(memScope).rawValue
        val res = kni_CryptGetDefaultOIDDllList(_hFuncSet, _dwEncodingType, _pwszDllList, _pcchDllList)
        res
    }
}

@SymbolName("win32_kni_CryptGetDefaultOIDDllList")
private external fun kni_CryptGetDefaultOIDDllList(hFuncSet: NativePtr, dwEncodingType: Int, pwszDllList: NativePtr, pcchDllList: NativePtr): Int

fun CryptGetDefaultOIDFunctionAddress(hFuncSet: HCRYPTOIDFUNCSET?, dwEncodingType: DWORD, pwszDll: String?, dwFlags: DWORD, ppvFuncAddr: CValuesRef<COpaquePointerVar>?, phFuncAddr: CValuesRef<HCRYPTOIDFUNCADDRVar>?): WINBOOL {
    return memScoped {
        val _hFuncSet = hFuncSet.rawValue
        val _dwEncodingType = dwEncodingType
        val _pwszDll = pwszDll?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _ppvFuncAddr = ppvFuncAddr?.getPointer(memScope).rawValue
        val _phFuncAddr = phFuncAddr?.getPointer(memScope).rawValue
        val res = kni_CryptGetDefaultOIDFunctionAddress(_hFuncSet, _dwEncodingType, _pwszDll, _dwFlags, _ppvFuncAddr, _phFuncAddr)
        res
    }
}

@SymbolName("win32_kni_CryptGetDefaultOIDFunctionAddress")
private external fun kni_CryptGetDefaultOIDFunctionAddress(hFuncSet: NativePtr, dwEncodingType: Int, pwszDll: NativePtr, dwFlags: Int, ppvFuncAddr: NativePtr, phFuncAddr: NativePtr): Int

fun CryptFreeOIDFunctionAddress(hFuncAddr: HCRYPTOIDFUNCADDR?, dwFlags: DWORD): WINBOOL {
    val _hFuncAddr = hFuncAddr.rawValue
    val _dwFlags = dwFlags
    val res = kni_CryptFreeOIDFunctionAddress(_hFuncAddr, _dwFlags)
    return res
}

@SymbolName("win32_kni_CryptFreeOIDFunctionAddress")
private external fun kni_CryptFreeOIDFunctionAddress(hFuncAddr: NativePtr, dwFlags: Int): Int

fun CryptRegisterOIDFunction(dwEncodingType: DWORD, pszFuncName: String?, pszOID: String?, pwszDll: String?, pszOverrideFuncName: String?): WINBOOL {
    return memScoped {
        val _dwEncodingType = dwEncodingType
        val _pszFuncName = pszFuncName?.cstr?.getPointer(memScope).rawValue
        val _pszOID = pszOID?.cstr?.getPointer(memScope).rawValue
        val _pwszDll = pwszDll?.wcstr?.getPointer(memScope).rawValue
        val _pszOverrideFuncName = pszOverrideFuncName?.cstr?.getPointer(memScope).rawValue
        val res = kni_CryptRegisterOIDFunction(_dwEncodingType, _pszFuncName, _pszOID, _pwszDll, _pszOverrideFuncName)
        res
    }
}

@SymbolName("win32_kni_CryptRegisterOIDFunction")
private external fun kni_CryptRegisterOIDFunction(dwEncodingType: Int, pszFuncName: NativePtr, pszOID: NativePtr, pwszDll: NativePtr, pszOverrideFuncName: NativePtr): Int

fun CryptUnregisterOIDFunction(dwEncodingType: DWORD, pszFuncName: String?, pszOID: String?): WINBOOL {
    return memScoped {
        val _dwEncodingType = dwEncodingType
        val _pszFuncName = pszFuncName?.cstr?.getPointer(memScope).rawValue
        val _pszOID = pszOID?.cstr?.getPointer(memScope).rawValue
        val res = kni_CryptUnregisterOIDFunction(_dwEncodingType, _pszFuncName, _pszOID)
        res
    }
}

@SymbolName("win32_kni_CryptUnregisterOIDFunction")
private external fun kni_CryptUnregisterOIDFunction(dwEncodingType: Int, pszFuncName: NativePtr, pszOID: NativePtr): Int

fun CryptRegisterDefaultOIDFunction(dwEncodingType: DWORD, pszFuncName: String?, dwIndex: DWORD, pwszDll: String?): WINBOOL {
    return memScoped {
        val _dwEncodingType = dwEncodingType
        val _pszFuncName = pszFuncName?.cstr?.getPointer(memScope).rawValue
        val _dwIndex = dwIndex
        val _pwszDll = pwszDll?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CryptRegisterDefaultOIDFunction(_dwEncodingType, _pszFuncName, _dwIndex, _pwszDll)
        res
    }
}

@SymbolName("win32_kni_CryptRegisterDefaultOIDFunction")
private external fun kni_CryptRegisterDefaultOIDFunction(dwEncodingType: Int, pszFuncName: NativePtr, dwIndex: Int, pwszDll: NativePtr): Int

fun CryptUnregisterDefaultOIDFunction(dwEncodingType: DWORD, pszFuncName: String?, pwszDll: String?): WINBOOL {
    return memScoped {
        val _dwEncodingType = dwEncodingType
        val _pszFuncName = pszFuncName?.cstr?.getPointer(memScope).rawValue
        val _pwszDll = pwszDll?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CryptUnregisterDefaultOIDFunction(_dwEncodingType, _pszFuncName, _pwszDll)
        res
    }
}

@SymbolName("win32_kni_CryptUnregisterDefaultOIDFunction")
private external fun kni_CryptUnregisterDefaultOIDFunction(dwEncodingType: Int, pszFuncName: NativePtr, pwszDll: NativePtr): Int

fun CryptSetOIDFunctionValue(dwEncodingType: DWORD, pszFuncName: String?, pszOID: String?, pwszValueName: String?, dwValueType: DWORD, pbValueData: CValuesRef<BYTEVar>?, cbValueData: DWORD): WINBOOL {
    return memScoped {
        val _dwEncodingType = dwEncodingType
        val _pszFuncName = pszFuncName?.cstr?.getPointer(memScope).rawValue
        val _pszOID = pszOID?.cstr?.getPointer(memScope).rawValue
        val _pwszValueName = pwszValueName?.wcstr?.getPointer(memScope).rawValue
        val _dwValueType = dwValueType
        val _pbValueData = pbValueData?.getPointer(memScope).rawValue
        val _cbValueData = cbValueData
        val res = kni_CryptSetOIDFunctionValue(_dwEncodingType, _pszFuncName, _pszOID, _pwszValueName, _dwValueType, _pbValueData, _cbValueData)
        res
    }
}

@SymbolName("win32_kni_CryptSetOIDFunctionValue")
private external fun kni_CryptSetOIDFunctionValue(dwEncodingType: Int, pszFuncName: NativePtr, pszOID: NativePtr, pwszValueName: NativePtr, dwValueType: Int, pbValueData: NativePtr, cbValueData: Int): Int

fun CryptGetOIDFunctionValue(dwEncodingType: DWORD, pszFuncName: String?, pszOID: String?, pwszValueName: String?, pdwValueType: CValuesRef<DWORDVar>?, pbValueData: CValuesRef<BYTEVar>?, pcbValueData: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwEncodingType = dwEncodingType
        val _pszFuncName = pszFuncName?.cstr?.getPointer(memScope).rawValue
        val _pszOID = pszOID?.cstr?.getPointer(memScope).rawValue
        val _pwszValueName = pwszValueName?.wcstr?.getPointer(memScope).rawValue
        val _pdwValueType = pdwValueType?.getPointer(memScope).rawValue
        val _pbValueData = pbValueData?.getPointer(memScope).rawValue
        val _pcbValueData = pcbValueData?.getPointer(memScope).rawValue
        val res = kni_CryptGetOIDFunctionValue(_dwEncodingType, _pszFuncName, _pszOID, _pwszValueName, _pdwValueType, _pbValueData, _pcbValueData)
        res
    }
}

@SymbolName("win32_kni_CryptGetOIDFunctionValue")
private external fun kni_CryptGetOIDFunctionValue(dwEncodingType: Int, pszFuncName: NativePtr, pszOID: NativePtr, pwszValueName: NativePtr, pdwValueType: NativePtr, pbValueData: NativePtr, pcbValueData: NativePtr): Int

fun CryptEnumOIDFunction(dwEncodingType: DWORD, pszFuncName: String?, pszOID: String?, dwFlags: DWORD, pvArg: COpaquePointer?, pfnEnumOIDFunc: PFN_CRYPT_ENUM_OID_FUNC?): WINBOOL {
    return memScoped {
        val _dwEncodingType = dwEncodingType
        val _pszFuncName = pszFuncName?.cstr?.getPointer(memScope).rawValue
        val _pszOID = pszOID?.cstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pvArg = pvArg.rawValue
        val _pfnEnumOIDFunc = pfnEnumOIDFunc.rawValue
        val res = kni_CryptEnumOIDFunction(_dwEncodingType, _pszFuncName, _pszOID, _dwFlags, _pvArg, _pfnEnumOIDFunc)
        res
    }
}

@SymbolName("win32_kni_CryptEnumOIDFunction")
private external fun kni_CryptEnumOIDFunction(dwEncodingType: Int, pszFuncName: NativePtr, pszOID: NativePtr, dwFlags: Int, pvArg: NativePtr, pfnEnumOIDFunc: NativePtr): Int

fun CryptFindOIDInfo(dwKeyType: DWORD, pvKey: COpaquePointer?, dwGroupId: DWORD): PCCRYPT_OID_INFO? {
    val _dwKeyType = dwKeyType
    val _pvKey = pvKey.rawValue
    val _dwGroupId = dwGroupId
    val res = kni_CryptFindOIDInfo(_dwKeyType, _pvKey, _dwGroupId)
    return interpretCPointer<CRYPT_OID_INFO>(res)
}

@SymbolName("win32_kni_CryptFindOIDInfo")
private external fun kni_CryptFindOIDInfo(dwKeyType: Int, pvKey: NativePtr, dwGroupId: Int): NativePtr

fun CryptRegisterOIDInfo(pInfo: PCCRYPT_OID_INFO?, dwFlags: DWORD): WINBOOL {
    val _pInfo = pInfo.rawValue
    val _dwFlags = dwFlags
    val res = kni_CryptRegisterOIDInfo(_pInfo, _dwFlags)
    return res
}

@SymbolName("win32_kni_CryptRegisterOIDInfo")
private external fun kni_CryptRegisterOIDInfo(pInfo: NativePtr, dwFlags: Int): Int

fun CryptUnregisterOIDInfo(pInfo: PCCRYPT_OID_INFO?): WINBOOL {
    val _pInfo = pInfo.rawValue
    val res = kni_CryptUnregisterOIDInfo(_pInfo)
    return res
}

@SymbolName("win32_kni_CryptUnregisterOIDInfo")
private external fun kni_CryptUnregisterOIDInfo(pInfo: NativePtr): Int

fun CryptEnumOIDInfo(dwGroupId: DWORD, dwFlags: DWORD, pvArg: COpaquePointer?, pfnEnumOIDInfo: PFN_CRYPT_ENUM_OID_INFO?): WINBOOL {
    val _dwGroupId = dwGroupId
    val _dwFlags = dwFlags
    val _pvArg = pvArg.rawValue
    val _pfnEnumOIDInfo = pfnEnumOIDInfo.rawValue
    val res = kni_CryptEnumOIDInfo(_dwGroupId, _dwFlags, _pvArg, _pfnEnumOIDInfo)
    return res
}

@SymbolName("win32_kni_CryptEnumOIDInfo")
private external fun kni_CryptEnumOIDInfo(dwGroupId: Int, dwFlags: Int, pvArg: NativePtr, pfnEnumOIDInfo: NativePtr): Int

fun CryptFindLocalizedName(pwszCryptName: String?): LPCWSTR? {
    return memScoped {
        val _pwszCryptName = pwszCryptName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CryptFindLocalizedName(_pwszCryptName)
        interpretCPointer<WCHARVar>(res)
    }
}

@SymbolName("win32_kni_CryptFindLocalizedName")
private external fun kni_CryptFindLocalizedName(pwszCryptName: NativePtr): NativePtr

fun CryptMsgOpenToEncode(dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, pvMsgEncodeInfo: COpaquePointer?, pszInnerContentObjID: LPSTR?, pStreamInfo: PCMSG_STREAM_INFO?): HCRYPTMSG? {
    val _dwMsgEncodingType = dwMsgEncodingType
    val _dwFlags = dwFlags
    val _dwMsgType = dwMsgType
    val _pvMsgEncodeInfo = pvMsgEncodeInfo.rawValue
    val _pszInnerContentObjID = pszInnerContentObjID.rawValue
    val _pStreamInfo = pStreamInfo.rawValue
    val res = kni_CryptMsgOpenToEncode(_dwMsgEncodingType, _dwFlags, _dwMsgType, _pvMsgEncodeInfo, _pszInnerContentObjID, _pStreamInfo)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CryptMsgOpenToEncode")
private external fun kni_CryptMsgOpenToEncode(dwMsgEncodingType: Int, dwFlags: Int, dwMsgType: Int, pvMsgEncodeInfo: NativePtr, pszInnerContentObjID: NativePtr, pStreamInfo: NativePtr): NativePtr

fun CryptMsgCalculateEncodedLength(dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, pvMsgEncodeInfo: COpaquePointer?, pszInnerContentObjID: LPSTR?, cbData: DWORD): DWORD {
    val _dwMsgEncodingType = dwMsgEncodingType
    val _dwFlags = dwFlags
    val _dwMsgType = dwMsgType
    val _pvMsgEncodeInfo = pvMsgEncodeInfo.rawValue
    val _pszInnerContentObjID = pszInnerContentObjID.rawValue
    val _cbData = cbData
    val res = kni_CryptMsgCalculateEncodedLength(_dwMsgEncodingType, _dwFlags, _dwMsgType, _pvMsgEncodeInfo, _pszInnerContentObjID, _cbData)
    return res
}

@SymbolName("win32_kni_CryptMsgCalculateEncodedLength")
private external fun kni_CryptMsgCalculateEncodedLength(dwMsgEncodingType: Int, dwFlags: Int, dwMsgType: Int, pvMsgEncodeInfo: NativePtr, pszInnerContentObjID: NativePtr, cbData: Int): Int

fun CryptMsgOpenToDecode(dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, pRecipientInfo: PCERT_INFO?, pStreamInfo: PCMSG_STREAM_INFO?): HCRYPTMSG? {
    val _dwMsgEncodingType = dwMsgEncodingType
    val _dwFlags = dwFlags
    val _dwMsgType = dwMsgType
    val _hCryptProv = hCryptProv
    val _pRecipientInfo = pRecipientInfo.rawValue
    val _pStreamInfo = pStreamInfo.rawValue
    val res = kni_CryptMsgOpenToDecode(_dwMsgEncodingType, _dwFlags, _dwMsgType, _hCryptProv, _pRecipientInfo, _pStreamInfo)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CryptMsgOpenToDecode")
private external fun kni_CryptMsgOpenToDecode(dwMsgEncodingType: Int, dwFlags: Int, dwMsgType: Int, hCryptProv: Long, pRecipientInfo: NativePtr, pStreamInfo: NativePtr): NativePtr

fun CryptMsgDuplicate(hCryptMsg: HCRYPTMSG?): HCRYPTMSG? {
    val _hCryptMsg = hCryptMsg.rawValue
    val res = kni_CryptMsgDuplicate(_hCryptMsg)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CryptMsgDuplicate")
private external fun kni_CryptMsgDuplicate(hCryptMsg: NativePtr): NativePtr

fun CryptMsgClose(hCryptMsg: HCRYPTMSG?): WINBOOL {
    val _hCryptMsg = hCryptMsg.rawValue
    val res = kni_CryptMsgClose(_hCryptMsg)
    return res
}

@SymbolName("win32_kni_CryptMsgClose")
private external fun kni_CryptMsgClose(hCryptMsg: NativePtr): Int

fun CryptMsgUpdate(hCryptMsg: HCRYPTMSG?, pbData: CValuesRef<BYTEVar>?, cbData: DWORD, fFinal: WINBOOL): WINBOOL {
    return memScoped {
        val _hCryptMsg = hCryptMsg.rawValue
        val _pbData = pbData?.getPointer(memScope).rawValue
        val _cbData = cbData
        val _fFinal = fFinal
        val res = kni_CryptMsgUpdate(_hCryptMsg, _pbData, _cbData, _fFinal)
        res
    }
}

@SymbolName("win32_kni_CryptMsgUpdate")
private external fun kni_CryptMsgUpdate(hCryptMsg: NativePtr, pbData: NativePtr, cbData: Int, fFinal: Int): Int

fun CryptMsgGetParam(hCryptMsg: HCRYPTMSG?, dwParamType: DWORD, dwIndex: DWORD, pvData: COpaquePointer?, pcbData: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCryptMsg = hCryptMsg.rawValue
        val _dwParamType = dwParamType
        val _dwIndex = dwIndex
        val _pvData = pvData.rawValue
        val _pcbData = pcbData?.getPointer(memScope).rawValue
        val res = kni_CryptMsgGetParam(_hCryptMsg, _dwParamType, _dwIndex, _pvData, _pcbData)
        res
    }
}

@SymbolName("win32_kni_CryptMsgGetParam")
private external fun kni_CryptMsgGetParam(hCryptMsg: NativePtr, dwParamType: Int, dwIndex: Int, pvData: NativePtr, pcbData: NativePtr): Int

fun CryptMsgControl(hCryptMsg: HCRYPTMSG?, dwFlags: DWORD, dwCtrlType: DWORD, pvCtrlPara: COpaquePointer?): WINBOOL {
    val _hCryptMsg = hCryptMsg.rawValue
    val _dwFlags = dwFlags
    val _dwCtrlType = dwCtrlType
    val _pvCtrlPara = pvCtrlPara.rawValue
    val res = kni_CryptMsgControl(_hCryptMsg, _dwFlags, _dwCtrlType, _pvCtrlPara)
    return res
}

@SymbolName("win32_kni_CryptMsgControl")
private external fun kni_CryptMsgControl(hCryptMsg: NativePtr, dwFlags: Int, dwCtrlType: Int, pvCtrlPara: NativePtr): Int

fun CryptMsgVerifyCountersignatureEncoded(hCryptProv: HCRYPTPROV_LEGACY, dwEncodingType: DWORD, pbSignerInfo: PBYTE?, cbSignerInfo: DWORD, pbSignerInfoCountersignature: PBYTE?, cbSignerInfoCountersignature: DWORD, pciCountersigner: PCERT_INFO?): WINBOOL {
    val _hCryptProv = hCryptProv
    val _dwEncodingType = dwEncodingType
    val _pbSignerInfo = pbSignerInfo.rawValue
    val _cbSignerInfo = cbSignerInfo
    val _pbSignerInfoCountersignature = pbSignerInfoCountersignature.rawValue
    val _cbSignerInfoCountersignature = cbSignerInfoCountersignature
    val _pciCountersigner = pciCountersigner.rawValue
    val res = kni_CryptMsgVerifyCountersignatureEncoded(_hCryptProv, _dwEncodingType, _pbSignerInfo, _cbSignerInfo, _pbSignerInfoCountersignature, _cbSignerInfoCountersignature, _pciCountersigner)
    return res
}

@SymbolName("win32_kni_CryptMsgVerifyCountersignatureEncoded")
private external fun kni_CryptMsgVerifyCountersignatureEncoded(hCryptProv: Long, dwEncodingType: Int, pbSignerInfo: NativePtr, cbSignerInfo: Int, pbSignerInfoCountersignature: NativePtr, cbSignerInfoCountersignature: Int, pciCountersigner: NativePtr): Int

fun CryptMsgVerifyCountersignatureEncodedEx(hCryptProv: HCRYPTPROV_LEGACY, dwEncodingType: DWORD, pbSignerInfo: PBYTE?, cbSignerInfo: DWORD, pbSignerInfoCountersignature: PBYTE?, cbSignerInfoCountersignature: DWORD, dwSignerType: DWORD, pvSigner: COpaquePointer?, dwFlags: DWORD, pvExtra: COpaquePointer?): WINBOOL {
    val _hCryptProv = hCryptProv
    val _dwEncodingType = dwEncodingType
    val _pbSignerInfo = pbSignerInfo.rawValue
    val _cbSignerInfo = cbSignerInfo
    val _pbSignerInfoCountersignature = pbSignerInfoCountersignature.rawValue
    val _cbSignerInfoCountersignature = cbSignerInfoCountersignature
    val _dwSignerType = dwSignerType
    val _pvSigner = pvSigner.rawValue
    val _dwFlags = dwFlags
    val _pvExtra = pvExtra.rawValue
    val res = kni_CryptMsgVerifyCountersignatureEncodedEx(_hCryptProv, _dwEncodingType, _pbSignerInfo, _cbSignerInfo, _pbSignerInfoCountersignature, _cbSignerInfoCountersignature, _dwSignerType, _pvSigner, _dwFlags, _pvExtra)
    return res
}

@SymbolName("win32_kni_CryptMsgVerifyCountersignatureEncodedEx")
private external fun kni_CryptMsgVerifyCountersignatureEncodedEx(hCryptProv: Long, dwEncodingType: Int, pbSignerInfo: NativePtr, cbSignerInfo: Int, pbSignerInfoCountersignature: NativePtr, cbSignerInfoCountersignature: Int, dwSignerType: Int, pvSigner: NativePtr, dwFlags: Int, pvExtra: NativePtr): Int

fun CryptMsgCountersign(hCryptMsg: HCRYPTMSG?, dwIndex: DWORD, cCountersigners: DWORD, rgCountersigners: PCMSG_SIGNER_ENCODE_INFO?): WINBOOL {
    val _hCryptMsg = hCryptMsg.rawValue
    val _dwIndex = dwIndex
    val _cCountersigners = cCountersigners
    val _rgCountersigners = rgCountersigners.rawValue
    val res = kni_CryptMsgCountersign(_hCryptMsg, _dwIndex, _cCountersigners, _rgCountersigners)
    return res
}

@SymbolName("win32_kni_CryptMsgCountersign")
private external fun kni_CryptMsgCountersign(hCryptMsg: NativePtr, dwIndex: Int, cCountersigners: Int, rgCountersigners: NativePtr): Int

fun CryptMsgCountersignEncoded(dwEncodingType: DWORD, pbSignerInfo: PBYTE?, cbSignerInfo: DWORD, cCountersigners: DWORD, rgCountersigners: PCMSG_SIGNER_ENCODE_INFO?, pbCountersignature: PBYTE?, pcbCountersignature: PDWORD?): WINBOOL {
    val _dwEncodingType = dwEncodingType
    val _pbSignerInfo = pbSignerInfo.rawValue
    val _cbSignerInfo = cbSignerInfo
    val _cCountersigners = cCountersigners
    val _rgCountersigners = rgCountersigners.rawValue
    val _pbCountersignature = pbCountersignature.rawValue
    val _pcbCountersignature = pcbCountersignature.rawValue
    val res = kni_CryptMsgCountersignEncoded(_dwEncodingType, _pbSignerInfo, _cbSignerInfo, _cCountersigners, _rgCountersigners, _pbCountersignature, _pcbCountersignature)
    return res
}

@SymbolName("win32_kni_CryptMsgCountersignEncoded")
private external fun kni_CryptMsgCountersignEncoded(dwEncodingType: Int, pbSignerInfo: NativePtr, cbSignerInfo: Int, cCountersigners: Int, rgCountersigners: NativePtr, pbCountersignature: NativePtr, pcbCountersignature: NativePtr): Int

fun CertOpenStore(lpszStoreProvider: String?, dwEncodingType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, dwFlags: DWORD, pvPara: COpaquePointer?): HCERTSTORE? {
    return memScoped {
        val _lpszStoreProvider = lpszStoreProvider?.cstr?.getPointer(memScope).rawValue
        val _dwEncodingType = dwEncodingType
        val _hCryptProv = hCryptProv
        val _dwFlags = dwFlags
        val _pvPara = pvPara.rawValue
        val res = kni_CertOpenStore(_lpszStoreProvider, _dwEncodingType, _hCryptProv, _dwFlags, _pvPara)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CertOpenStore")
private external fun kni_CertOpenStore(lpszStoreProvider: NativePtr, dwEncodingType: Int, hCryptProv: Long, dwFlags: Int, pvPara: NativePtr): NativePtr

fun CertDuplicateStore(hCertStore: HCERTSTORE?): HCERTSTORE? {
    val _hCertStore = hCertStore.rawValue
    val res = kni_CertDuplicateStore(_hCertStore)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CertDuplicateStore")
private external fun kni_CertDuplicateStore(hCertStore: NativePtr): NativePtr

fun CertSaveStore(hCertStore: HCERTSTORE?, dwEncodingType: DWORD, dwSaveAs: DWORD, dwSaveTo: DWORD, pvSaveToPara: COpaquePointer?, dwFlags: DWORD): WINBOOL {
    val _hCertStore = hCertStore.rawValue
    val _dwEncodingType = dwEncodingType
    val _dwSaveAs = dwSaveAs
    val _dwSaveTo = dwSaveTo
    val _pvSaveToPara = pvSaveToPara.rawValue
    val _dwFlags = dwFlags
    val res = kni_CertSaveStore(_hCertStore, _dwEncodingType, _dwSaveAs, _dwSaveTo, _pvSaveToPara, _dwFlags)
    return res
}

@SymbolName("win32_kni_CertSaveStore")
private external fun kni_CertSaveStore(hCertStore: NativePtr, dwEncodingType: Int, dwSaveAs: Int, dwSaveTo: Int, pvSaveToPara: NativePtr, dwFlags: Int): Int

fun CertCloseStore(hCertStore: HCERTSTORE?, dwFlags: DWORD): WINBOOL {
    val _hCertStore = hCertStore.rawValue
    val _dwFlags = dwFlags
    val res = kni_CertCloseStore(_hCertStore, _dwFlags)
    return res
}

@SymbolName("win32_kni_CertCloseStore")
private external fun kni_CertCloseStore(hCertStore: NativePtr, dwFlags: Int): Int

fun CertGetSubjectCertificateFromStore(hCertStore: HCERTSTORE?, dwCertEncodingType: DWORD, pCertId: PCERT_INFO?): PCCERT_CONTEXT? {
    val _hCertStore = hCertStore.rawValue
    val _dwCertEncodingType = dwCertEncodingType
    val _pCertId = pCertId.rawValue
    val res = kni_CertGetSubjectCertificateFromStore(_hCertStore, _dwCertEncodingType, _pCertId)
    return interpretCPointer<CERT_CONTEXT>(res)
}

@SymbolName("win32_kni_CertGetSubjectCertificateFromStore")
private external fun kni_CertGetSubjectCertificateFromStore(hCertStore: NativePtr, dwCertEncodingType: Int, pCertId: NativePtr): NativePtr

fun CertEnumCertificatesInStore(hCertStore: HCERTSTORE?, pPrevCertContext: PCCERT_CONTEXT?): PCCERT_CONTEXT? {
    val _hCertStore = hCertStore.rawValue
    val _pPrevCertContext = pPrevCertContext.rawValue
    val res = kni_CertEnumCertificatesInStore(_hCertStore, _pPrevCertContext)
    return interpretCPointer<CERT_CONTEXT>(res)
}

@SymbolName("win32_kni_CertEnumCertificatesInStore")
private external fun kni_CertEnumCertificatesInStore(hCertStore: NativePtr, pPrevCertContext: NativePtr): NativePtr

fun CertFindCertificateInStore(hCertStore: HCERTSTORE?, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: COpaquePointer?, pPrevCertContext: PCCERT_CONTEXT?): PCCERT_CONTEXT? {
    val _hCertStore = hCertStore.rawValue
    val _dwCertEncodingType = dwCertEncodingType
    val _dwFindFlags = dwFindFlags
    val _dwFindType = dwFindType
    val _pvFindPara = pvFindPara.rawValue
    val _pPrevCertContext = pPrevCertContext.rawValue
    val res = kni_CertFindCertificateInStore(_hCertStore, _dwCertEncodingType, _dwFindFlags, _dwFindType, _pvFindPara, _pPrevCertContext)
    return interpretCPointer<CERT_CONTEXT>(res)
}

@SymbolName("win32_kni_CertFindCertificateInStore")
private external fun kni_CertFindCertificateInStore(hCertStore: NativePtr, dwCertEncodingType: Int, dwFindFlags: Int, dwFindType: Int, pvFindPara: NativePtr, pPrevCertContext: NativePtr): NativePtr

fun CertGetIssuerCertificateFromStore(hCertStore: HCERTSTORE?, pSubjectContext: PCCERT_CONTEXT?, pPrevIssuerContext: PCCERT_CONTEXT?, pdwFlags: CValuesRef<DWORDVar>?): PCCERT_CONTEXT? {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _pSubjectContext = pSubjectContext.rawValue
        val _pPrevIssuerContext = pPrevIssuerContext.rawValue
        val _pdwFlags = pdwFlags?.getPointer(memScope).rawValue
        val res = kni_CertGetIssuerCertificateFromStore(_hCertStore, _pSubjectContext, _pPrevIssuerContext, _pdwFlags)
        interpretCPointer<CERT_CONTEXT>(res)
    }
}

@SymbolName("win32_kni_CertGetIssuerCertificateFromStore")
private external fun kni_CertGetIssuerCertificateFromStore(hCertStore: NativePtr, pSubjectContext: NativePtr, pPrevIssuerContext: NativePtr, pdwFlags: NativePtr): NativePtr

fun CertVerifySubjectCertificateContext(pSubject: PCCERT_CONTEXT?, pIssuer: PCCERT_CONTEXT?, pdwFlags: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pSubject = pSubject.rawValue
        val _pIssuer = pIssuer.rawValue
        val _pdwFlags = pdwFlags?.getPointer(memScope).rawValue
        val res = kni_CertVerifySubjectCertificateContext(_pSubject, _pIssuer, _pdwFlags)
        res
    }
}

@SymbolName("win32_kni_CertVerifySubjectCertificateContext")
private external fun kni_CertVerifySubjectCertificateContext(pSubject: NativePtr, pIssuer: NativePtr, pdwFlags: NativePtr): Int

fun CertDuplicateCertificateContext(pCertContext: PCCERT_CONTEXT?): PCCERT_CONTEXT? {
    val _pCertContext = pCertContext.rawValue
    val res = kni_CertDuplicateCertificateContext(_pCertContext)
    return interpretCPointer<CERT_CONTEXT>(res)
}

@SymbolName("win32_kni_CertDuplicateCertificateContext")
private external fun kni_CertDuplicateCertificateContext(pCertContext: NativePtr): NativePtr

fun CertCreateCertificateContext(dwCertEncodingType: DWORD, pbCertEncoded: CValuesRef<BYTEVar>?, cbCertEncoded: DWORD): PCCERT_CONTEXT? {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _pbCertEncoded = pbCertEncoded?.getPointer(memScope).rawValue
        val _cbCertEncoded = cbCertEncoded
        val res = kni_CertCreateCertificateContext(_dwCertEncodingType, _pbCertEncoded, _cbCertEncoded)
        interpretCPointer<CERT_CONTEXT>(res)
    }
}

@SymbolName("win32_kni_CertCreateCertificateContext")
private external fun kni_CertCreateCertificateContext(dwCertEncodingType: Int, pbCertEncoded: NativePtr, cbCertEncoded: Int): NativePtr

fun CertFreeCertificateContext(pCertContext: PCCERT_CONTEXT?): WINBOOL {
    val _pCertContext = pCertContext.rawValue
    val res = kni_CertFreeCertificateContext(_pCertContext)
    return res
}

@SymbolName("win32_kni_CertFreeCertificateContext")
private external fun kni_CertFreeCertificateContext(pCertContext: NativePtr): Int

fun CertSetCertificateContextProperty(pCertContext: PCCERT_CONTEXT?, dwPropId: DWORD, dwFlags: DWORD, pvData: COpaquePointer?): WINBOOL {
    val _pCertContext = pCertContext.rawValue
    val _dwPropId = dwPropId
    val _dwFlags = dwFlags
    val _pvData = pvData.rawValue
    val res = kni_CertSetCertificateContextProperty(_pCertContext, _dwPropId, _dwFlags, _pvData)
    return res
}

@SymbolName("win32_kni_CertSetCertificateContextProperty")
private external fun kni_CertSetCertificateContextProperty(pCertContext: NativePtr, dwPropId: Int, dwFlags: Int, pvData: NativePtr): Int

fun CertEnumCRLsInStore(hCertStore: HCERTSTORE?, pPrevCrlContext: PCCRL_CONTEXT?): PCCRL_CONTEXT? {
    val _hCertStore = hCertStore.rawValue
    val _pPrevCrlContext = pPrevCrlContext.rawValue
    val res = kni_CertEnumCRLsInStore(_hCertStore, _pPrevCrlContext)
    return interpretCPointer<CRL_CONTEXT>(res)
}

@SymbolName("win32_kni_CertEnumCRLsInStore")
private external fun kni_CertEnumCRLsInStore(hCertStore: NativePtr, pPrevCrlContext: NativePtr): NativePtr

fun CertDeleteCRLFromStore(pCrlContext: PCCRL_CONTEXT?): WINBOOL {
    val _pCrlContext = pCrlContext.rawValue
    val res = kni_CertDeleteCRLFromStore(_pCrlContext)
    return res
}

@SymbolName("win32_kni_CertDeleteCRLFromStore")
private external fun kni_CertDeleteCRLFromStore(pCrlContext: NativePtr): Int

fun CertDuplicateCRLContext(pCrlContext: PCCRL_CONTEXT?): PCCRL_CONTEXT? {
    val _pCrlContext = pCrlContext.rawValue
    val res = kni_CertDuplicateCRLContext(_pCrlContext)
    return interpretCPointer<CRL_CONTEXT>(res)
}

@SymbolName("win32_kni_CertDuplicateCRLContext")
private external fun kni_CertDuplicateCRLContext(pCrlContext: NativePtr): NativePtr

fun CertFindCRLInStore(hCertStore: HCERTSTORE?, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: COpaquePointer?, pPrevCrlContext: PCCRL_CONTEXT?): PCCRL_CONTEXT? {
    val _hCertStore = hCertStore.rawValue
    val _dwCertEncodingType = dwCertEncodingType
    val _dwFindFlags = dwFindFlags
    val _dwFindType = dwFindType
    val _pvFindPara = pvFindPara.rawValue
    val _pPrevCrlContext = pPrevCrlContext.rawValue
    val res = kni_CertFindCRLInStore(_hCertStore, _dwCertEncodingType, _dwFindFlags, _dwFindType, _pvFindPara, _pPrevCrlContext)
    return interpretCPointer<CRL_CONTEXT>(res)
}

@SymbolName("win32_kni_CertFindCRLInStore")
private external fun kni_CertFindCRLInStore(hCertStore: NativePtr, dwCertEncodingType: Int, dwFindFlags: Int, dwFindType: Int, pvFindPara: NativePtr, pPrevCrlContext: NativePtr): NativePtr

fun CertFreeCRLContext(pCrlContext: PCCRL_CONTEXT?): WINBOOL {
    val _pCrlContext = pCrlContext.rawValue
    val res = kni_CertFreeCRLContext(_pCrlContext)
    return res
}

@SymbolName("win32_kni_CertFreeCRLContext")
private external fun kni_CertFreeCRLContext(pCrlContext: NativePtr): Int

fun CertGetCertificateContextProperty(pCertContext: PCCERT_CONTEXT?, dwPropId: DWORD, pvData: COpaquePointer?, pcbData: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pCertContext = pCertContext.rawValue
        val _dwPropId = dwPropId
        val _pvData = pvData.rawValue
        val _pcbData = pcbData?.getPointer(memScope).rawValue
        val res = kni_CertGetCertificateContextProperty(_pCertContext, _dwPropId, _pvData, _pcbData)
        res
    }
}

@SymbolName("win32_kni_CertGetCertificateContextProperty")
private external fun kni_CertGetCertificateContextProperty(pCertContext: NativePtr, dwPropId: Int, pvData: NativePtr, pcbData: NativePtr): Int

fun CertEnumCertificateContextProperties(pCertContext: PCCERT_CONTEXT?, dwPropId: DWORD): DWORD {
    val _pCertContext = pCertContext.rawValue
    val _dwPropId = dwPropId
    val res = kni_CertEnumCertificateContextProperties(_pCertContext, _dwPropId)
    return res
}

@SymbolName("win32_kni_CertEnumCertificateContextProperties")
private external fun kni_CertEnumCertificateContextProperties(pCertContext: NativePtr, dwPropId: Int): Int

fun CertDeleteCertificateFromStore(pCertContext: PCCERT_CONTEXT?): WINBOOL {
    val _pCertContext = pCertContext.rawValue
    val res = kni_CertDeleteCertificateFromStore(_pCertContext)
    return res
}

@SymbolName("win32_kni_CertDeleteCertificateFromStore")
private external fun kni_CertDeleteCertificateFromStore(pCertContext: NativePtr): Int

fun CertCreateCTLEntryFromCertificateContextProperties(pCertContext: PCCERT_CONTEXT?, cOptAttr: DWORD, rgOptAttr: PCRYPT_ATTRIBUTE?, dwFlags: DWORD, pvReserved: COpaquePointer?, pCtlEntry: PCTL_ENTRY?, pcbCtlEntry: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pCertContext = pCertContext.rawValue
        val _cOptAttr = cOptAttr
        val _rgOptAttr = rgOptAttr.rawValue
        val _dwFlags = dwFlags
        val _pvReserved = pvReserved.rawValue
        val _pCtlEntry = pCtlEntry.rawValue
        val _pcbCtlEntry = pcbCtlEntry?.getPointer(memScope).rawValue
        val res = kni_CertCreateCTLEntryFromCertificateContextProperties(_pCertContext, _cOptAttr, _rgOptAttr, _dwFlags, _pvReserved, _pCtlEntry, _pcbCtlEntry)
        res
    }
}

@SymbolName("win32_kni_CertCreateCTLEntryFromCertificateContextProperties")
private external fun kni_CertCreateCTLEntryFromCertificateContextProperties(pCertContext: NativePtr, cOptAttr: Int, rgOptAttr: NativePtr, dwFlags: Int, pvReserved: NativePtr, pCtlEntry: NativePtr, pcbCtlEntry: NativePtr): Int

fun CertSetCertificateContextPropertiesFromCTLEntry(pCertContext: PCCERT_CONTEXT?, pCtlEntry: PCTL_ENTRY?, dwFlags: DWORD): WINBOOL {
    val _pCertContext = pCertContext.rawValue
    val _pCtlEntry = pCtlEntry.rawValue
    val _dwFlags = dwFlags
    val res = kni_CertSetCertificateContextPropertiesFromCTLEntry(_pCertContext, _pCtlEntry, _dwFlags)
    return res
}

@SymbolName("win32_kni_CertSetCertificateContextPropertiesFromCTLEntry")
private external fun kni_CertSetCertificateContextPropertiesFromCTLEntry(pCertContext: NativePtr, pCtlEntry: NativePtr, dwFlags: Int): Int

fun CertGetCRLFromStore(hCertStore: HCERTSTORE?, pIssuerContext: PCCERT_CONTEXT?, pPrevCrlContext: PCCRL_CONTEXT?, pdwFlags: CValuesRef<DWORDVar>?): PCCRL_CONTEXT? {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _pIssuerContext = pIssuerContext.rawValue
        val _pPrevCrlContext = pPrevCrlContext.rawValue
        val _pdwFlags = pdwFlags?.getPointer(memScope).rawValue
        val res = kni_CertGetCRLFromStore(_hCertStore, _pIssuerContext, _pPrevCrlContext, _pdwFlags)
        interpretCPointer<CRL_CONTEXT>(res)
    }
}

@SymbolName("win32_kni_CertGetCRLFromStore")
private external fun kni_CertGetCRLFromStore(hCertStore: NativePtr, pIssuerContext: NativePtr, pPrevCrlContext: NativePtr, pdwFlags: NativePtr): NativePtr

fun CertCreateCRLContext(dwCertEncodingType: DWORD, pbCrlEncoded: CValuesRef<BYTEVar>?, cbCrlEncoded: DWORD): PCCRL_CONTEXT? {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _pbCrlEncoded = pbCrlEncoded?.getPointer(memScope).rawValue
        val _cbCrlEncoded = cbCrlEncoded
        val res = kni_CertCreateCRLContext(_dwCertEncodingType, _pbCrlEncoded, _cbCrlEncoded)
        interpretCPointer<CRL_CONTEXT>(res)
    }
}

@SymbolName("win32_kni_CertCreateCRLContext")
private external fun kni_CertCreateCRLContext(dwCertEncodingType: Int, pbCrlEncoded: NativePtr, cbCrlEncoded: Int): NativePtr

fun CertSetCRLContextProperty(pCrlContext: PCCRL_CONTEXT?, dwPropId: DWORD, dwFlags: DWORD, pvData: COpaquePointer?): WINBOOL {
    val _pCrlContext = pCrlContext.rawValue
    val _dwPropId = dwPropId
    val _dwFlags = dwFlags
    val _pvData = pvData.rawValue
    val res = kni_CertSetCRLContextProperty(_pCrlContext, _dwPropId, _dwFlags, _pvData)
    return res
}

@SymbolName("win32_kni_CertSetCRLContextProperty")
private external fun kni_CertSetCRLContextProperty(pCrlContext: NativePtr, dwPropId: Int, dwFlags: Int, pvData: NativePtr): Int

fun CertGetCRLContextProperty(pCrlContext: PCCRL_CONTEXT?, dwPropId: DWORD, pvData: COpaquePointer?, pcbData: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pCrlContext = pCrlContext.rawValue
        val _dwPropId = dwPropId
        val _pvData = pvData.rawValue
        val _pcbData = pcbData?.getPointer(memScope).rawValue
        val res = kni_CertGetCRLContextProperty(_pCrlContext, _dwPropId, _pvData, _pcbData)
        res
    }
}

@SymbolName("win32_kni_CertGetCRLContextProperty")
private external fun kni_CertGetCRLContextProperty(pCrlContext: NativePtr, dwPropId: Int, pvData: NativePtr, pcbData: NativePtr): Int

fun CertEnumCRLContextProperties(pCrlContext: PCCRL_CONTEXT?, dwPropId: DWORD): DWORD {
    val _pCrlContext = pCrlContext.rawValue
    val _dwPropId = dwPropId
    val res = kni_CertEnumCRLContextProperties(_pCrlContext, _dwPropId)
    return res
}

@SymbolName("win32_kni_CertEnumCRLContextProperties")
private external fun kni_CertEnumCRLContextProperties(pCrlContext: NativePtr, dwPropId: Int): Int

fun CertFindCertificateInCRL(pCert: PCCERT_CONTEXT?, pCrlContext: PCCRL_CONTEXT?, dwFlags: DWORD, pvReserved: COpaquePointer?, ppCrlEntry: CValuesRef<PCRL_ENTRYVar>?): WINBOOL {
    return memScoped {
        val _pCert = pCert.rawValue
        val _pCrlContext = pCrlContext.rawValue
        val _dwFlags = dwFlags
        val _pvReserved = pvReserved.rawValue
        val _ppCrlEntry = ppCrlEntry?.getPointer(memScope).rawValue
        val res = kni_CertFindCertificateInCRL(_pCert, _pCrlContext, _dwFlags, _pvReserved, _ppCrlEntry)
        res
    }
}

@SymbolName("win32_kni_CertFindCertificateInCRL")
private external fun kni_CertFindCertificateInCRL(pCert: NativePtr, pCrlContext: NativePtr, dwFlags: Int, pvReserved: NativePtr, ppCrlEntry: NativePtr): Int

fun CertIsValidCRLForCertificate(pCert: PCCERT_CONTEXT?, pCrl: PCCRL_CONTEXT?, dwFlags: DWORD, pvReserved: COpaquePointer?): WINBOOL {
    val _pCert = pCert.rawValue
    val _pCrl = pCrl.rawValue
    val _dwFlags = dwFlags
    val _pvReserved = pvReserved.rawValue
    val res = kni_CertIsValidCRLForCertificate(_pCert, _pCrl, _dwFlags, _pvReserved)
    return res
}

@SymbolName("win32_kni_CertIsValidCRLForCertificate")
private external fun kni_CertIsValidCRLForCertificate(pCert: NativePtr, pCrl: NativePtr, dwFlags: Int, pvReserved: NativePtr): Int

fun CertAddEncodedCertificateToStore(hCertStore: HCERTSTORE?, dwCertEncodingType: DWORD, pbCertEncoded: CValuesRef<BYTEVar>?, cbCertEncoded: DWORD, dwAddDisposition: DWORD, ppCertContext: CValuesRef<PCCERT_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _dwCertEncodingType = dwCertEncodingType
        val _pbCertEncoded = pbCertEncoded?.getPointer(memScope).rawValue
        val _cbCertEncoded = cbCertEncoded
        val _dwAddDisposition = dwAddDisposition
        val _ppCertContext = ppCertContext?.getPointer(memScope).rawValue
        val res = kni_CertAddEncodedCertificateToStore(_hCertStore, _dwCertEncodingType, _pbCertEncoded, _cbCertEncoded, _dwAddDisposition, _ppCertContext)
        res
    }
}

@SymbolName("win32_kni_CertAddEncodedCertificateToStore")
private external fun kni_CertAddEncodedCertificateToStore(hCertStore: NativePtr, dwCertEncodingType: Int, pbCertEncoded: NativePtr, cbCertEncoded: Int, dwAddDisposition: Int, ppCertContext: NativePtr): Int

fun CertAddCertificateContextToStore(hCertStore: HCERTSTORE?, pCertContext: PCCERT_CONTEXT?, dwAddDisposition: DWORD, ppStoreContext: CValuesRef<PCCERT_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _pCertContext = pCertContext.rawValue
        val _dwAddDisposition = dwAddDisposition
        val _ppStoreContext = ppStoreContext?.getPointer(memScope).rawValue
        val res = kni_CertAddCertificateContextToStore(_hCertStore, _pCertContext, _dwAddDisposition, _ppStoreContext)
        res
    }
}

@SymbolName("win32_kni_CertAddCertificateContextToStore")
private external fun kni_CertAddCertificateContextToStore(hCertStore: NativePtr, pCertContext: NativePtr, dwAddDisposition: Int, ppStoreContext: NativePtr): Int

fun CertAddSerializedElementToStore(hCertStore: HCERTSTORE?, pbElement: CValuesRef<BYTEVar>?, cbElement: DWORD, dwAddDisposition: DWORD, dwFlags: DWORD, dwContextTypeFlags: DWORD, pdwContextType: CValuesRef<DWORDVar>?, ppvContext: CValuesRef<COpaquePointerVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _pbElement = pbElement?.getPointer(memScope).rawValue
        val _cbElement = cbElement
        val _dwAddDisposition = dwAddDisposition
        val _dwFlags = dwFlags
        val _dwContextTypeFlags = dwContextTypeFlags
        val _pdwContextType = pdwContextType?.getPointer(memScope).rawValue
        val _ppvContext = ppvContext?.getPointer(memScope).rawValue
        val res = kni_CertAddSerializedElementToStore(_hCertStore, _pbElement, _cbElement, _dwAddDisposition, _dwFlags, _dwContextTypeFlags, _pdwContextType, _ppvContext)
        res
    }
}

@SymbolName("win32_kni_CertAddSerializedElementToStore")
private external fun kni_CertAddSerializedElementToStore(hCertStore: NativePtr, pbElement: NativePtr, cbElement: Int, dwAddDisposition: Int, dwFlags: Int, dwContextTypeFlags: Int, pdwContextType: NativePtr, ppvContext: NativePtr): Int

fun CertAddEncodedCRLToStore(hCertStore: HCERTSTORE?, dwCertEncodingType: DWORD, pbCrlEncoded: CValuesRef<BYTEVar>?, cbCrlEncoded: DWORD, dwAddDisposition: DWORD, ppCrlContext: CValuesRef<PCCRL_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _dwCertEncodingType = dwCertEncodingType
        val _pbCrlEncoded = pbCrlEncoded?.getPointer(memScope).rawValue
        val _cbCrlEncoded = cbCrlEncoded
        val _dwAddDisposition = dwAddDisposition
        val _ppCrlContext = ppCrlContext?.getPointer(memScope).rawValue
        val res = kni_CertAddEncodedCRLToStore(_hCertStore, _dwCertEncodingType, _pbCrlEncoded, _cbCrlEncoded, _dwAddDisposition, _ppCrlContext)
        res
    }
}

@SymbolName("win32_kni_CertAddEncodedCRLToStore")
private external fun kni_CertAddEncodedCRLToStore(hCertStore: NativePtr, dwCertEncodingType: Int, pbCrlEncoded: NativePtr, cbCrlEncoded: Int, dwAddDisposition: Int, ppCrlContext: NativePtr): Int

fun CertAddCRLContextToStore(hCertStore: HCERTSTORE?, pCrlContext: PCCRL_CONTEXT?, dwAddDisposition: DWORD, ppStoreContext: CValuesRef<PCCRL_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _pCrlContext = pCrlContext.rawValue
        val _dwAddDisposition = dwAddDisposition
        val _ppStoreContext = ppStoreContext?.getPointer(memScope).rawValue
        val res = kni_CertAddCRLContextToStore(_hCertStore, _pCrlContext, _dwAddDisposition, _ppStoreContext)
        res
    }
}

@SymbolName("win32_kni_CertAddCRLContextToStore")
private external fun kni_CertAddCRLContextToStore(hCertStore: NativePtr, pCrlContext: NativePtr, dwAddDisposition: Int, ppStoreContext: NativePtr): Int

fun CertSerializeCertificateStoreElement(pCertContext: PCCERT_CONTEXT?, dwFlags: DWORD, pbElement: CValuesRef<BYTEVar>?, pcbElement: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pCertContext = pCertContext.rawValue
        val _dwFlags = dwFlags
        val _pbElement = pbElement?.getPointer(memScope).rawValue
        val _pcbElement = pcbElement?.getPointer(memScope).rawValue
        val res = kni_CertSerializeCertificateStoreElement(_pCertContext, _dwFlags, _pbElement, _pcbElement)
        res
    }
}

@SymbolName("win32_kni_CertSerializeCertificateStoreElement")
private external fun kni_CertSerializeCertificateStoreElement(pCertContext: NativePtr, dwFlags: Int, pbElement: NativePtr, pcbElement: NativePtr): Int

fun CertSerializeCRLStoreElement(pCrlContext: PCCRL_CONTEXT?, dwFlags: DWORD, pbElement: CValuesRef<BYTEVar>?, pcbElement: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pCrlContext = pCrlContext.rawValue
        val _dwFlags = dwFlags
        val _pbElement = pbElement?.getPointer(memScope).rawValue
        val _pcbElement = pcbElement?.getPointer(memScope).rawValue
        val res = kni_CertSerializeCRLStoreElement(_pCrlContext, _dwFlags, _pbElement, _pcbElement)
        res
    }
}

@SymbolName("win32_kni_CertSerializeCRLStoreElement")
private external fun kni_CertSerializeCRLStoreElement(pCrlContext: NativePtr, dwFlags: Int, pbElement: NativePtr, pcbElement: NativePtr): Int

fun CertDuplicateCTLContext(pCtlContext: PCCTL_CONTEXT?): PCCTL_CONTEXT? {
    val _pCtlContext = pCtlContext.rawValue
    val res = kni_CertDuplicateCTLContext(_pCtlContext)
    return interpretCPointer<CTL_CONTEXT>(res)
}

@SymbolName("win32_kni_CertDuplicateCTLContext")
private external fun kni_CertDuplicateCTLContext(pCtlContext: NativePtr): NativePtr

fun CertCreateCTLContext(dwMsgAndCertEncodingType: DWORD, pbCtlEncoded: CValuesRef<BYTEVar>?, cbCtlEncoded: DWORD): PCCTL_CONTEXT? {
    return memScoped {
        val _dwMsgAndCertEncodingType = dwMsgAndCertEncodingType
        val _pbCtlEncoded = pbCtlEncoded?.getPointer(memScope).rawValue
        val _cbCtlEncoded = cbCtlEncoded
        val res = kni_CertCreateCTLContext(_dwMsgAndCertEncodingType, _pbCtlEncoded, _cbCtlEncoded)
        interpretCPointer<CTL_CONTEXT>(res)
    }
}

@SymbolName("win32_kni_CertCreateCTLContext")
private external fun kni_CertCreateCTLContext(dwMsgAndCertEncodingType: Int, pbCtlEncoded: NativePtr, cbCtlEncoded: Int): NativePtr

fun CertFreeCTLContext(pCtlContext: PCCTL_CONTEXT?): WINBOOL {
    val _pCtlContext = pCtlContext.rawValue
    val res = kni_CertFreeCTLContext(_pCtlContext)
    return res
}

@SymbolName("win32_kni_CertFreeCTLContext")
private external fun kni_CertFreeCTLContext(pCtlContext: NativePtr): Int

fun CertSetCTLContextProperty(pCtlContext: PCCTL_CONTEXT?, dwPropId: DWORD, dwFlags: DWORD, pvData: COpaquePointer?): WINBOOL {
    val _pCtlContext = pCtlContext.rawValue
    val _dwPropId = dwPropId
    val _dwFlags = dwFlags
    val _pvData = pvData.rawValue
    val res = kni_CertSetCTLContextProperty(_pCtlContext, _dwPropId, _dwFlags, _pvData)
    return res
}

@SymbolName("win32_kni_CertSetCTLContextProperty")
private external fun kni_CertSetCTLContextProperty(pCtlContext: NativePtr, dwPropId: Int, dwFlags: Int, pvData: NativePtr): Int

fun CertGetCTLContextProperty(pCtlContext: PCCTL_CONTEXT?, dwPropId: DWORD, pvData: COpaquePointer?, pcbData: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pCtlContext = pCtlContext.rawValue
        val _dwPropId = dwPropId
        val _pvData = pvData.rawValue
        val _pcbData = pcbData?.getPointer(memScope).rawValue
        val res = kni_CertGetCTLContextProperty(_pCtlContext, _dwPropId, _pvData, _pcbData)
        res
    }
}

@SymbolName("win32_kni_CertGetCTLContextProperty")
private external fun kni_CertGetCTLContextProperty(pCtlContext: NativePtr, dwPropId: Int, pvData: NativePtr, pcbData: NativePtr): Int

fun CertEnumCTLContextProperties(pCtlContext: PCCTL_CONTEXT?, dwPropId: DWORD): DWORD {
    val _pCtlContext = pCtlContext.rawValue
    val _dwPropId = dwPropId
    val res = kni_CertEnumCTLContextProperties(_pCtlContext, _dwPropId)
    return res
}

@SymbolName("win32_kni_CertEnumCTLContextProperties")
private external fun kni_CertEnumCTLContextProperties(pCtlContext: NativePtr, dwPropId: Int): Int

fun CertEnumCTLsInStore(hCertStore: HCERTSTORE?, pPrevCtlContext: PCCTL_CONTEXT?): PCCTL_CONTEXT? {
    val _hCertStore = hCertStore.rawValue
    val _pPrevCtlContext = pPrevCtlContext.rawValue
    val res = kni_CertEnumCTLsInStore(_hCertStore, _pPrevCtlContext)
    return interpretCPointer<CTL_CONTEXT>(res)
}

@SymbolName("win32_kni_CertEnumCTLsInStore")
private external fun kni_CertEnumCTLsInStore(hCertStore: NativePtr, pPrevCtlContext: NativePtr): NativePtr

fun CertFindSubjectInCTL(dwEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: COpaquePointer?, pCtlContext: PCCTL_CONTEXT?, dwFlags: DWORD): PCTL_ENTRY? {
    val _dwEncodingType = dwEncodingType
    val _dwSubjectType = dwSubjectType
    val _pvSubject = pvSubject.rawValue
    val _pCtlContext = pCtlContext.rawValue
    val _dwFlags = dwFlags
    val res = kni_CertFindSubjectInCTL(_dwEncodingType, _dwSubjectType, _pvSubject, _pCtlContext, _dwFlags)
    return interpretCPointer<_CTL_ENTRY>(res)
}

@SymbolName("win32_kni_CertFindSubjectInCTL")
private external fun kni_CertFindSubjectInCTL(dwEncodingType: Int, dwSubjectType: Int, pvSubject: NativePtr, pCtlContext: NativePtr, dwFlags: Int): NativePtr

fun CertFindCTLInStore(hCertStore: HCERTSTORE?, dwMsgAndCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: COpaquePointer?, pPrevCtlContext: PCCTL_CONTEXT?): PCCTL_CONTEXT? {
    val _hCertStore = hCertStore.rawValue
    val _dwMsgAndCertEncodingType = dwMsgAndCertEncodingType
    val _dwFindFlags = dwFindFlags
    val _dwFindType = dwFindType
    val _pvFindPara = pvFindPara.rawValue
    val _pPrevCtlContext = pPrevCtlContext.rawValue
    val res = kni_CertFindCTLInStore(_hCertStore, _dwMsgAndCertEncodingType, _dwFindFlags, _dwFindType, _pvFindPara, _pPrevCtlContext)
    return interpretCPointer<CTL_CONTEXT>(res)
}

@SymbolName("win32_kni_CertFindCTLInStore")
private external fun kni_CertFindCTLInStore(hCertStore: NativePtr, dwMsgAndCertEncodingType: Int, dwFindFlags: Int, dwFindType: Int, pvFindPara: NativePtr, pPrevCtlContext: NativePtr): NativePtr

fun CertAddEncodedCTLToStore(hCertStore: HCERTSTORE?, dwMsgAndCertEncodingType: DWORD, pbCtlEncoded: CValuesRef<BYTEVar>?, cbCtlEncoded: DWORD, dwAddDisposition: DWORD, ppCtlContext: CValuesRef<PCCTL_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _dwMsgAndCertEncodingType = dwMsgAndCertEncodingType
        val _pbCtlEncoded = pbCtlEncoded?.getPointer(memScope).rawValue
        val _cbCtlEncoded = cbCtlEncoded
        val _dwAddDisposition = dwAddDisposition
        val _ppCtlContext = ppCtlContext?.getPointer(memScope).rawValue
        val res = kni_CertAddEncodedCTLToStore(_hCertStore, _dwMsgAndCertEncodingType, _pbCtlEncoded, _cbCtlEncoded, _dwAddDisposition, _ppCtlContext)
        res
    }
}

@SymbolName("win32_kni_CertAddEncodedCTLToStore")
private external fun kni_CertAddEncodedCTLToStore(hCertStore: NativePtr, dwMsgAndCertEncodingType: Int, pbCtlEncoded: NativePtr, cbCtlEncoded: Int, dwAddDisposition: Int, ppCtlContext: NativePtr): Int

fun CertAddCTLContextToStore(hCertStore: HCERTSTORE?, pCtlContext: PCCTL_CONTEXT?, dwAddDisposition: DWORD, ppStoreContext: CValuesRef<PCCTL_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _pCtlContext = pCtlContext.rawValue
        val _dwAddDisposition = dwAddDisposition
        val _ppStoreContext = ppStoreContext?.getPointer(memScope).rawValue
        val res = kni_CertAddCTLContextToStore(_hCertStore, _pCtlContext, _dwAddDisposition, _ppStoreContext)
        res
    }
}

@SymbolName("win32_kni_CertAddCTLContextToStore")
private external fun kni_CertAddCTLContextToStore(hCertStore: NativePtr, pCtlContext: NativePtr, dwAddDisposition: Int, ppStoreContext: NativePtr): Int

fun CertSerializeCTLStoreElement(pCtlContext: PCCTL_CONTEXT?, dwFlags: DWORD, pbElement: CValuesRef<BYTEVar>?, pcbElement: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pCtlContext = pCtlContext.rawValue
        val _dwFlags = dwFlags
        val _pbElement = pbElement?.getPointer(memScope).rawValue
        val _pcbElement = pcbElement?.getPointer(memScope).rawValue
        val res = kni_CertSerializeCTLStoreElement(_pCtlContext, _dwFlags, _pbElement, _pcbElement)
        res
    }
}

@SymbolName("win32_kni_CertSerializeCTLStoreElement")
private external fun kni_CertSerializeCTLStoreElement(pCtlContext: NativePtr, dwFlags: Int, pbElement: NativePtr, pcbElement: NativePtr): Int

fun CertDeleteCTLFromStore(pCtlContext: PCCTL_CONTEXT?): WINBOOL {
    val _pCtlContext = pCtlContext.rawValue
    val res = kni_CertDeleteCTLFromStore(_pCtlContext)
    return res
}

@SymbolName("win32_kni_CertDeleteCTLFromStore")
private external fun kni_CertDeleteCTLFromStore(pCtlContext: NativePtr): Int

fun CertAddCertificateLinkToStore(hCertStore: HCERTSTORE?, pCertContext: PCCERT_CONTEXT?, dwAddDisposition: DWORD, ppStoreContext: CValuesRef<PCCERT_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _pCertContext = pCertContext.rawValue
        val _dwAddDisposition = dwAddDisposition
        val _ppStoreContext = ppStoreContext?.getPointer(memScope).rawValue
        val res = kni_CertAddCertificateLinkToStore(_hCertStore, _pCertContext, _dwAddDisposition, _ppStoreContext)
        res
    }
}

@SymbolName("win32_kni_CertAddCertificateLinkToStore")
private external fun kni_CertAddCertificateLinkToStore(hCertStore: NativePtr, pCertContext: NativePtr, dwAddDisposition: Int, ppStoreContext: NativePtr): Int

fun CertAddCRLLinkToStore(hCertStore: HCERTSTORE?, pCrlContext: PCCRL_CONTEXT?, dwAddDisposition: DWORD, ppStoreContext: CValuesRef<PCCRL_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _pCrlContext = pCrlContext.rawValue
        val _dwAddDisposition = dwAddDisposition
        val _ppStoreContext = ppStoreContext?.getPointer(memScope).rawValue
        val res = kni_CertAddCRLLinkToStore(_hCertStore, _pCrlContext, _dwAddDisposition, _ppStoreContext)
        res
    }
}

@SymbolName("win32_kni_CertAddCRLLinkToStore")
private external fun kni_CertAddCRLLinkToStore(hCertStore: NativePtr, pCrlContext: NativePtr, dwAddDisposition: Int, ppStoreContext: NativePtr): Int

fun CertAddCTLLinkToStore(hCertStore: HCERTSTORE?, pCtlContext: PCCTL_CONTEXT?, dwAddDisposition: DWORD, ppStoreContext: CValuesRef<PCCTL_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _pCtlContext = pCtlContext.rawValue
        val _dwAddDisposition = dwAddDisposition
        val _ppStoreContext = ppStoreContext?.getPointer(memScope).rawValue
        val res = kni_CertAddCTLLinkToStore(_hCertStore, _pCtlContext, _dwAddDisposition, _ppStoreContext)
        res
    }
}

@SymbolName("win32_kni_CertAddCTLLinkToStore")
private external fun kni_CertAddCTLLinkToStore(hCertStore: NativePtr, pCtlContext: NativePtr, dwAddDisposition: Int, ppStoreContext: NativePtr): Int

fun CertAddStoreToCollection(hCollectionStore: HCERTSTORE?, hSiblingStore: HCERTSTORE?, dwUpdateFlags: DWORD, dwPriority: DWORD): WINBOOL {
    val _hCollectionStore = hCollectionStore.rawValue
    val _hSiblingStore = hSiblingStore.rawValue
    val _dwUpdateFlags = dwUpdateFlags
    val _dwPriority = dwPriority
    val res = kni_CertAddStoreToCollection(_hCollectionStore, _hSiblingStore, _dwUpdateFlags, _dwPriority)
    return res
}

@SymbolName("win32_kni_CertAddStoreToCollection")
private external fun kni_CertAddStoreToCollection(hCollectionStore: NativePtr, hSiblingStore: NativePtr, dwUpdateFlags: Int, dwPriority: Int): Int

fun CertRemoveStoreFromCollection(hCollectionStore: HCERTSTORE?, hSiblingStore: HCERTSTORE?): Unit {
    val _hCollectionStore = hCollectionStore.rawValue
    val _hSiblingStore = hSiblingStore.rawValue
    val res = kni_CertRemoveStoreFromCollection(_hCollectionStore, _hSiblingStore)
    return res
}

@SymbolName("win32_kni_CertRemoveStoreFromCollection")
private external fun kni_CertRemoveStoreFromCollection(hCollectionStore: NativePtr, hSiblingStore: NativePtr): Unit

fun CertControlStore(hCertStore: HCERTSTORE?, dwFlags: DWORD, dwCtrlType: DWORD, pvCtrlPara: COpaquePointer?): WINBOOL {
    val _hCertStore = hCertStore.rawValue
    val _dwFlags = dwFlags
    val _dwCtrlType = dwCtrlType
    val _pvCtrlPara = pvCtrlPara.rawValue
    val res = kni_CertControlStore(_hCertStore, _dwFlags, _dwCtrlType, _pvCtrlPara)
    return res
}

@SymbolName("win32_kni_CertControlStore")
private external fun kni_CertControlStore(hCertStore: NativePtr, dwFlags: Int, dwCtrlType: Int, pvCtrlPara: NativePtr): Int

fun CertSetStoreProperty(hCertStore: HCERTSTORE?, dwPropId: DWORD, dwFlags: DWORD, pvData: COpaquePointer?): WINBOOL {
    val _hCertStore = hCertStore.rawValue
    val _dwPropId = dwPropId
    val _dwFlags = dwFlags
    val _pvData = pvData.rawValue
    val res = kni_CertSetStoreProperty(_hCertStore, _dwPropId, _dwFlags, _pvData)
    return res
}

@SymbolName("win32_kni_CertSetStoreProperty")
private external fun kni_CertSetStoreProperty(hCertStore: NativePtr, dwPropId: Int, dwFlags: Int, pvData: NativePtr): Int

fun CertGetStoreProperty(hCertStore: HCERTSTORE?, dwPropId: DWORD, pvData: COpaquePointer?, pcbData: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCertStore = hCertStore.rawValue
        val _dwPropId = dwPropId
        val _pvData = pvData.rawValue
        val _pcbData = pcbData?.getPointer(memScope).rawValue
        val res = kni_CertGetStoreProperty(_hCertStore, _dwPropId, _pvData, _pcbData)
        res
    }
}

@SymbolName("win32_kni_CertGetStoreProperty")
private external fun kni_CertGetStoreProperty(hCertStore: NativePtr, dwPropId: Int, pvData: NativePtr, pcbData: NativePtr): Int

fun CertCreateContext(dwContextType: DWORD, dwEncodingType: DWORD, pbEncoded: CValuesRef<BYTEVar>?, cbEncoded: DWORD, dwFlags: DWORD, pCreatePara: PCERT_CREATE_CONTEXT_PARA?): COpaquePointer? {
    return memScoped {
        val _dwContextType = dwContextType
        val _dwEncodingType = dwEncodingType
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _cbEncoded = cbEncoded
        val _dwFlags = dwFlags
        val _pCreatePara = pCreatePara.rawValue
        val res = kni_CertCreateContext(_dwContextType, _dwEncodingType, _pbEncoded, _cbEncoded, _dwFlags, _pCreatePara)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CertCreateContext")
private external fun kni_CertCreateContext(dwContextType: Int, dwEncodingType: Int, pbEncoded: NativePtr, cbEncoded: Int, dwFlags: Int, pCreatePara: NativePtr): NativePtr

fun CertRegisterSystemStore(pvSystemStore: COpaquePointer?, dwFlags: DWORD, pStoreInfo: PCERT_SYSTEM_STORE_INFO?, pvReserved: COpaquePointer?): WINBOOL {
    val _pvSystemStore = pvSystemStore.rawValue
    val _dwFlags = dwFlags
    val _pStoreInfo = pStoreInfo.rawValue
    val _pvReserved = pvReserved.rawValue
    val res = kni_CertRegisterSystemStore(_pvSystemStore, _dwFlags, _pStoreInfo, _pvReserved)
    return res
}

@SymbolName("win32_kni_CertRegisterSystemStore")
private external fun kni_CertRegisterSystemStore(pvSystemStore: NativePtr, dwFlags: Int, pStoreInfo: NativePtr, pvReserved: NativePtr): Int

fun CertRegisterPhysicalStore(pvSystemStore: COpaquePointer?, dwFlags: DWORD, pwszStoreName: String?, pStoreInfo: PCERT_PHYSICAL_STORE_INFO?, pvReserved: COpaquePointer?): WINBOOL {
    return memScoped {
        val _pvSystemStore = pvSystemStore.rawValue
        val _dwFlags = dwFlags
        val _pwszStoreName = pwszStoreName?.wcstr?.getPointer(memScope).rawValue
        val _pStoreInfo = pStoreInfo.rawValue
        val _pvReserved = pvReserved.rawValue
        val res = kni_CertRegisterPhysicalStore(_pvSystemStore, _dwFlags, _pwszStoreName, _pStoreInfo, _pvReserved)
        res
    }
}

@SymbolName("win32_kni_CertRegisterPhysicalStore")
private external fun kni_CertRegisterPhysicalStore(pvSystemStore: NativePtr, dwFlags: Int, pwszStoreName: NativePtr, pStoreInfo: NativePtr, pvReserved: NativePtr): Int

fun CertUnregisterSystemStore(pvSystemStore: COpaquePointer?, dwFlags: DWORD): WINBOOL {
    val _pvSystemStore = pvSystemStore.rawValue
    val _dwFlags = dwFlags
    val res = kni_CertUnregisterSystemStore(_pvSystemStore, _dwFlags)
    return res
}

@SymbolName("win32_kni_CertUnregisterSystemStore")
private external fun kni_CertUnregisterSystemStore(pvSystemStore: NativePtr, dwFlags: Int): Int

fun CertUnregisterPhysicalStore(pvSystemStore: COpaquePointer?, dwFlags: DWORD, pwszStoreName: String?): WINBOOL {
    return memScoped {
        val _pvSystemStore = pvSystemStore.rawValue
        val _dwFlags = dwFlags
        val _pwszStoreName = pwszStoreName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CertUnregisterPhysicalStore(_pvSystemStore, _dwFlags, _pwszStoreName)
        res
    }
}

@SymbolName("win32_kni_CertUnregisterPhysicalStore")
private external fun kni_CertUnregisterPhysicalStore(pvSystemStore: NativePtr, dwFlags: Int, pwszStoreName: NativePtr): Int

fun CertEnumSystemStoreLocation(dwFlags: DWORD, pvArg: COpaquePointer?, pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE_LOCATION?): WINBOOL {
    val _dwFlags = dwFlags
    val _pvArg = pvArg.rawValue
    val _pfnEnum = pfnEnum.rawValue
    val res = kni_CertEnumSystemStoreLocation(_dwFlags, _pvArg, _pfnEnum)
    return res
}

@SymbolName("win32_kni_CertEnumSystemStoreLocation")
private external fun kni_CertEnumSystemStoreLocation(dwFlags: Int, pvArg: NativePtr, pfnEnum: NativePtr): Int

fun CertEnumSystemStore(dwFlags: DWORD, pvSystemStoreLocationPara: COpaquePointer?, pvArg: COpaquePointer?, pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE?): WINBOOL {
    val _dwFlags = dwFlags
    val _pvSystemStoreLocationPara = pvSystemStoreLocationPara.rawValue
    val _pvArg = pvArg.rawValue
    val _pfnEnum = pfnEnum.rawValue
    val res = kni_CertEnumSystemStore(_dwFlags, _pvSystemStoreLocationPara, _pvArg, _pfnEnum)
    return res
}

@SymbolName("win32_kni_CertEnumSystemStore")
private external fun kni_CertEnumSystemStore(dwFlags: Int, pvSystemStoreLocationPara: NativePtr, pvArg: NativePtr, pfnEnum: NativePtr): Int

fun CertEnumPhysicalStore(pvSystemStore: COpaquePointer?, dwFlags: DWORD, pvArg: COpaquePointer?, pfnEnum: PFN_CERT_ENUM_PHYSICAL_STORE?): WINBOOL {
    val _pvSystemStore = pvSystemStore.rawValue
    val _dwFlags = dwFlags
    val _pvArg = pvArg.rawValue
    val _pfnEnum = pfnEnum.rawValue
    val res = kni_CertEnumPhysicalStore(_pvSystemStore, _dwFlags, _pvArg, _pfnEnum)
    return res
}

@SymbolName("win32_kni_CertEnumPhysicalStore")
private external fun kni_CertEnumPhysicalStore(pvSystemStore: NativePtr, dwFlags: Int, pvArg: NativePtr, pfnEnum: NativePtr): Int

fun CertGetEnhancedKeyUsage(pCertContext: PCCERT_CONTEXT?, dwFlags: DWORD, pUsage: PCERT_ENHKEY_USAGE?, pcbUsage: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pCertContext = pCertContext.rawValue
        val _dwFlags = dwFlags
        val _pUsage = pUsage.rawValue
        val _pcbUsage = pcbUsage?.getPointer(memScope).rawValue
        val res = kni_CertGetEnhancedKeyUsage(_pCertContext, _dwFlags, _pUsage, _pcbUsage)
        res
    }
}

@SymbolName("win32_kni_CertGetEnhancedKeyUsage")
private external fun kni_CertGetEnhancedKeyUsage(pCertContext: NativePtr, dwFlags: Int, pUsage: NativePtr, pcbUsage: NativePtr): Int

fun CertSetEnhancedKeyUsage(pCertContext: PCCERT_CONTEXT?, pUsage: PCERT_ENHKEY_USAGE?): WINBOOL {
    val _pCertContext = pCertContext.rawValue
    val _pUsage = pUsage.rawValue
    val res = kni_CertSetEnhancedKeyUsage(_pCertContext, _pUsage)
    return res
}

@SymbolName("win32_kni_CertSetEnhancedKeyUsage")
private external fun kni_CertSetEnhancedKeyUsage(pCertContext: NativePtr, pUsage: NativePtr): Int

fun CertAddEnhancedKeyUsageIdentifier(pCertContext: PCCERT_CONTEXT?, pszUsageIdentifier: String?): WINBOOL {
    return memScoped {
        val _pCertContext = pCertContext.rawValue
        val _pszUsageIdentifier = pszUsageIdentifier?.cstr?.getPointer(memScope).rawValue
        val res = kni_CertAddEnhancedKeyUsageIdentifier(_pCertContext, _pszUsageIdentifier)
        res
    }
}

@SymbolName("win32_kni_CertAddEnhancedKeyUsageIdentifier")
private external fun kni_CertAddEnhancedKeyUsageIdentifier(pCertContext: NativePtr, pszUsageIdentifier: NativePtr): Int

fun CertRemoveEnhancedKeyUsageIdentifier(pCertContext: PCCERT_CONTEXT?, pszUsageIdentifier: String?): WINBOOL {
    return memScoped {
        val _pCertContext = pCertContext.rawValue
        val _pszUsageIdentifier = pszUsageIdentifier?.cstr?.getPointer(memScope).rawValue
        val res = kni_CertRemoveEnhancedKeyUsageIdentifier(_pCertContext, _pszUsageIdentifier)
        res
    }
}

@SymbolName("win32_kni_CertRemoveEnhancedKeyUsageIdentifier")
private external fun kni_CertRemoveEnhancedKeyUsageIdentifier(pCertContext: NativePtr, pszUsageIdentifier: NativePtr): Int

fun CertGetValidUsages(cCerts: DWORD, rghCerts: CValuesRef<PCCERT_CONTEXTVar>?, cNumOIDs: CValuesRef<IntVar>?, rghOIDs: CValuesRef<LPSTRVar>?, pcbOIDs: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _cCerts = cCerts
        val _rghCerts = rghCerts?.getPointer(memScope).rawValue
        val _cNumOIDs = cNumOIDs?.getPointer(memScope).rawValue
        val _rghOIDs = rghOIDs?.getPointer(memScope).rawValue
        val _pcbOIDs = pcbOIDs?.getPointer(memScope).rawValue
        val res = kni_CertGetValidUsages(_cCerts, _rghCerts, _cNumOIDs, _rghOIDs, _pcbOIDs)
        res
    }
}

@SymbolName("win32_kni_CertGetValidUsages")
private external fun kni_CertGetValidUsages(cCerts: Int, rghCerts: NativePtr, cNumOIDs: NativePtr, rghOIDs: NativePtr, pcbOIDs: NativePtr): Int

fun CryptMsgGetAndVerifySigner(hCryptMsg: HCRYPTMSG?, cSignerStore: DWORD, rghSignerStore: CValuesRef<HCERTSTOREVar>?, dwFlags: DWORD, ppSigner: CValuesRef<PCCERT_CONTEXTVar>?, pdwSignerIndex: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCryptMsg = hCryptMsg.rawValue
        val _cSignerStore = cSignerStore
        val _rghSignerStore = rghSignerStore?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _ppSigner = ppSigner?.getPointer(memScope).rawValue
        val _pdwSignerIndex = pdwSignerIndex?.getPointer(memScope).rawValue
        val res = kni_CryptMsgGetAndVerifySigner(_hCryptMsg, _cSignerStore, _rghSignerStore, _dwFlags, _ppSigner, _pdwSignerIndex)
        res
    }
}

@SymbolName("win32_kni_CryptMsgGetAndVerifySigner")
private external fun kni_CryptMsgGetAndVerifySigner(hCryptMsg: NativePtr, cSignerStore: Int, rghSignerStore: NativePtr, dwFlags: Int, ppSigner: NativePtr, pdwSignerIndex: NativePtr): Int

fun CryptMsgSignCTL(dwMsgEncodingType: DWORD, pbCtlContent: CValuesRef<BYTEVar>?, cbCtlContent: DWORD, pSignInfo: PCMSG_SIGNED_ENCODE_INFO?, dwFlags: DWORD, pbEncoded: CValuesRef<BYTEVar>?, pcbEncoded: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwMsgEncodingType = dwMsgEncodingType
        val _pbCtlContent = pbCtlContent?.getPointer(memScope).rawValue
        val _cbCtlContent = cbCtlContent
        val _pSignInfo = pSignInfo.rawValue
        val _dwFlags = dwFlags
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _pcbEncoded = pcbEncoded?.getPointer(memScope).rawValue
        val res = kni_CryptMsgSignCTL(_dwMsgEncodingType, _pbCtlContent, _cbCtlContent, _pSignInfo, _dwFlags, _pbEncoded, _pcbEncoded)
        res
    }
}

@SymbolName("win32_kni_CryptMsgSignCTL")
private external fun kni_CryptMsgSignCTL(dwMsgEncodingType: Int, pbCtlContent: NativePtr, cbCtlContent: Int, pSignInfo: NativePtr, dwFlags: Int, pbEncoded: NativePtr, pcbEncoded: NativePtr): Int

fun CryptMsgEncodeAndSignCTL(dwMsgEncodingType: DWORD, pCtlInfo: PCTL_INFO?, pSignInfo: PCMSG_SIGNED_ENCODE_INFO?, dwFlags: DWORD, pbEncoded: CValuesRef<BYTEVar>?, pcbEncoded: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwMsgEncodingType = dwMsgEncodingType
        val _pCtlInfo = pCtlInfo.rawValue
        val _pSignInfo = pSignInfo.rawValue
        val _dwFlags = dwFlags
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _pcbEncoded = pcbEncoded?.getPointer(memScope).rawValue
        val res = kni_CryptMsgEncodeAndSignCTL(_dwMsgEncodingType, _pCtlInfo, _pSignInfo, _dwFlags, _pbEncoded, _pcbEncoded)
        res
    }
}

@SymbolName("win32_kni_CryptMsgEncodeAndSignCTL")
private external fun kni_CryptMsgEncodeAndSignCTL(dwMsgEncodingType: Int, pCtlInfo: NativePtr, pSignInfo: NativePtr, dwFlags: Int, pbEncoded: NativePtr, pcbEncoded: NativePtr): Int

fun CertFindSubjectInSortedCTL(pSubjectIdentifier: PCRYPT_DATA_BLOB?, pCtlContext: PCCTL_CONTEXT?, dwFlags: DWORD, pvReserved: COpaquePointer?, pEncodedAttributes: PCRYPT_DER_BLOB?): WINBOOL {
    val _pSubjectIdentifier = pSubjectIdentifier.rawValue
    val _pCtlContext = pCtlContext.rawValue
    val _dwFlags = dwFlags
    val _pvReserved = pvReserved.rawValue
    val _pEncodedAttributes = pEncodedAttributes.rawValue
    val res = kni_CertFindSubjectInSortedCTL(_pSubjectIdentifier, _pCtlContext, _dwFlags, _pvReserved, _pEncodedAttributes)
    return res
}

@SymbolName("win32_kni_CertFindSubjectInSortedCTL")
private external fun kni_CertFindSubjectInSortedCTL(pSubjectIdentifier: NativePtr, pCtlContext: NativePtr, dwFlags: Int, pvReserved: NativePtr, pEncodedAttributes: NativePtr): Int

fun CertEnumSubjectInSortedCTL(pCtlContext: PCCTL_CONTEXT?, ppvNextSubject: CValuesRef<COpaquePointerVar>?, pSubjectIdentifier: PCRYPT_DER_BLOB?, pEncodedAttributes: PCRYPT_DER_BLOB?): WINBOOL {
    return memScoped {
        val _pCtlContext = pCtlContext.rawValue
        val _ppvNextSubject = ppvNextSubject?.getPointer(memScope).rawValue
        val _pSubjectIdentifier = pSubjectIdentifier.rawValue
        val _pEncodedAttributes = pEncodedAttributes.rawValue
        val res = kni_CertEnumSubjectInSortedCTL(_pCtlContext, _ppvNextSubject, _pSubjectIdentifier, _pEncodedAttributes)
        res
    }
}

@SymbolName("win32_kni_CertEnumSubjectInSortedCTL")
private external fun kni_CertEnumSubjectInSortedCTL(pCtlContext: NativePtr, ppvNextSubject: NativePtr, pSubjectIdentifier: NativePtr, pEncodedAttributes: NativePtr): Int

fun CertVerifyCTLUsage(dwEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: COpaquePointer?, pSubjectUsage: PCTL_USAGE?, dwFlags: DWORD, pVerifyUsagePara: PCTL_VERIFY_USAGE_PARA?, pVerifyUsageStatus: PCTL_VERIFY_USAGE_STATUS?): WINBOOL {
    val _dwEncodingType = dwEncodingType
    val _dwSubjectType = dwSubjectType
    val _pvSubject = pvSubject.rawValue
    val _pSubjectUsage = pSubjectUsage.rawValue
    val _dwFlags = dwFlags
    val _pVerifyUsagePara = pVerifyUsagePara.rawValue
    val _pVerifyUsageStatus = pVerifyUsageStatus.rawValue
    val res = kni_CertVerifyCTLUsage(_dwEncodingType, _dwSubjectType, _pvSubject, _pSubjectUsage, _dwFlags, _pVerifyUsagePara, _pVerifyUsageStatus)
    return res
}

@SymbolName("win32_kni_CertVerifyCTLUsage")
private external fun kni_CertVerifyCTLUsage(dwEncodingType: Int, dwSubjectType: Int, pvSubject: NativePtr, pSubjectUsage: NativePtr, dwFlags: Int, pVerifyUsagePara: NativePtr, pVerifyUsageStatus: NativePtr): Int

fun CertVerifyRevocation(dwEncodingType: DWORD, dwRevType: DWORD, cContext: DWORD, rgpvContext: CValuesRef<PVOIDVar>?, dwFlags: DWORD, pRevPara: PCERT_REVOCATION_PARA?, pRevStatus: PCERT_REVOCATION_STATUS?): WINBOOL {
    return memScoped {
        val _dwEncodingType = dwEncodingType
        val _dwRevType = dwRevType
        val _cContext = cContext
        val _rgpvContext = rgpvContext?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pRevPara = pRevPara.rawValue
        val _pRevStatus = pRevStatus.rawValue
        val res = kni_CertVerifyRevocation(_dwEncodingType, _dwRevType, _cContext, _rgpvContext, _dwFlags, _pRevPara, _pRevStatus)
        res
    }
}

@SymbolName("win32_kni_CertVerifyRevocation")
private external fun kni_CertVerifyRevocation(dwEncodingType: Int, dwRevType: Int, cContext: Int, rgpvContext: NativePtr, dwFlags: Int, pRevPara: NativePtr, pRevStatus: NativePtr): Int

fun CertCompareIntegerBlob(pInt1: PCRYPT_INTEGER_BLOB?, pInt2: PCRYPT_INTEGER_BLOB?): WINBOOL {
    val _pInt1 = pInt1.rawValue
    val _pInt2 = pInt2.rawValue
    val res = kni_CertCompareIntegerBlob(_pInt1, _pInt2)
    return res
}

@SymbolName("win32_kni_CertCompareIntegerBlob")
private external fun kni_CertCompareIntegerBlob(pInt1: NativePtr, pInt2: NativePtr): Int

fun CertCompareCertificate(dwCertEncodingType: DWORD, pCertId1: PCERT_INFO?, pCertId2: PCERT_INFO?): WINBOOL {
    val _dwCertEncodingType = dwCertEncodingType
    val _pCertId1 = pCertId1.rawValue
    val _pCertId2 = pCertId2.rawValue
    val res = kni_CertCompareCertificate(_dwCertEncodingType, _pCertId1, _pCertId2)
    return res
}

@SymbolName("win32_kni_CertCompareCertificate")
private external fun kni_CertCompareCertificate(dwCertEncodingType: Int, pCertId1: NativePtr, pCertId2: NativePtr): Int

fun CertCompareCertificateName(dwCertEncodingType: DWORD, pCertName1: PCERT_NAME_BLOB?, pCertName2: PCERT_NAME_BLOB?): WINBOOL {
    val _dwCertEncodingType = dwCertEncodingType
    val _pCertName1 = pCertName1.rawValue
    val _pCertName2 = pCertName2.rawValue
    val res = kni_CertCompareCertificateName(_dwCertEncodingType, _pCertName1, _pCertName2)
    return res
}

@SymbolName("win32_kni_CertCompareCertificateName")
private external fun kni_CertCompareCertificateName(dwCertEncodingType: Int, pCertName1: NativePtr, pCertName2: NativePtr): Int

fun CertIsRDNAttrsInCertificateName(dwCertEncodingType: DWORD, dwFlags: DWORD, pCertName: PCERT_NAME_BLOB?, pRDN: PCERT_RDN?): WINBOOL {
    val _dwCertEncodingType = dwCertEncodingType
    val _dwFlags = dwFlags
    val _pCertName = pCertName.rawValue
    val _pRDN = pRDN.rawValue
    val res = kni_CertIsRDNAttrsInCertificateName(_dwCertEncodingType, _dwFlags, _pCertName, _pRDN)
    return res
}

@SymbolName("win32_kni_CertIsRDNAttrsInCertificateName")
private external fun kni_CertIsRDNAttrsInCertificateName(dwCertEncodingType: Int, dwFlags: Int, pCertName: NativePtr, pRDN: NativePtr): Int

fun CertComparePublicKeyInfo(dwCertEncodingType: DWORD, pPublicKey1: PCERT_PUBLIC_KEY_INFO?, pPublicKey2: PCERT_PUBLIC_KEY_INFO?): WINBOOL {
    val _dwCertEncodingType = dwCertEncodingType
    val _pPublicKey1 = pPublicKey1.rawValue
    val _pPublicKey2 = pPublicKey2.rawValue
    val res = kni_CertComparePublicKeyInfo(_dwCertEncodingType, _pPublicKey1, _pPublicKey2)
    return res
}

@SymbolName("win32_kni_CertComparePublicKeyInfo")
private external fun kni_CertComparePublicKeyInfo(dwCertEncodingType: Int, pPublicKey1: NativePtr, pPublicKey2: NativePtr): Int

fun CertGetPublicKeyLength(dwCertEncodingType: DWORD, pPublicKey: PCERT_PUBLIC_KEY_INFO?): DWORD {
    val _dwCertEncodingType = dwCertEncodingType
    val _pPublicKey = pPublicKey.rawValue
    val res = kni_CertGetPublicKeyLength(_dwCertEncodingType, _pPublicKey)
    return res
}

@SymbolName("win32_kni_CertGetPublicKeyLength")
private external fun kni_CertGetPublicKeyLength(dwCertEncodingType: Int, pPublicKey: NativePtr): Int

fun CryptVerifyCertificateSignature(hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, pbEncoded: CValuesRef<BYTEVar>?, cbEncoded: DWORD, pPublicKey: PCERT_PUBLIC_KEY_INFO?): WINBOOL {
    return memScoped {
        val _hCryptProv = hCryptProv
        val _dwCertEncodingType = dwCertEncodingType
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _cbEncoded = cbEncoded
        val _pPublicKey = pPublicKey.rawValue
        val res = kni_CryptVerifyCertificateSignature(_hCryptProv, _dwCertEncodingType, _pbEncoded, _cbEncoded, _pPublicKey)
        res
    }
}

@SymbolName("win32_kni_CryptVerifyCertificateSignature")
private external fun kni_CryptVerifyCertificateSignature(hCryptProv: Long, dwCertEncodingType: Int, pbEncoded: NativePtr, cbEncoded: Int, pPublicKey: NativePtr): Int

fun CryptVerifyCertificateSignatureEx(hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: COpaquePointer?, dwIssuerType: DWORD, pvIssuer: COpaquePointer?, dwFlags: DWORD, pvExtra: COpaquePointer?): WINBOOL {
    val _hCryptProv = hCryptProv
    val _dwCertEncodingType = dwCertEncodingType
    val _dwSubjectType = dwSubjectType
    val _pvSubject = pvSubject.rawValue
    val _dwIssuerType = dwIssuerType
    val _pvIssuer = pvIssuer.rawValue
    val _dwFlags = dwFlags
    val _pvExtra = pvExtra.rawValue
    val res = kni_CryptVerifyCertificateSignatureEx(_hCryptProv, _dwCertEncodingType, _dwSubjectType, _pvSubject, _dwIssuerType, _pvIssuer, _dwFlags, _pvExtra)
    return res
}

@SymbolName("win32_kni_CryptVerifyCertificateSignatureEx")
private external fun kni_CryptVerifyCertificateSignatureEx(hCryptProv: Long, dwCertEncodingType: Int, dwSubjectType: Int, pvSubject: NativePtr, dwIssuerType: Int, pvIssuer: NativePtr, dwFlags: Int, pvExtra: NativePtr): Int

fun CertIsStrongHashToSign(pStrongSignPara: PCCERT_STRONG_SIGN_PARA?, pwszCNGHashAlgid: String?, pSigningCert: PCCERT_CONTEXT?): WINBOOL {
    return memScoped {
        val _pStrongSignPara = pStrongSignPara.rawValue
        val _pwszCNGHashAlgid = pwszCNGHashAlgid?.wcstr?.getPointer(memScope).rawValue
        val _pSigningCert = pSigningCert.rawValue
        val res = kni_CertIsStrongHashToSign(_pStrongSignPara, _pwszCNGHashAlgid, _pSigningCert)
        res
    }
}

@SymbolName("win32_kni_CertIsStrongHashToSign")
private external fun kni_CertIsStrongHashToSign(pStrongSignPara: NativePtr, pwszCNGHashAlgid: NativePtr, pSigningCert: NativePtr): Int

fun CryptHashToBeSigned(hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, pbEncoded: CValuesRef<BYTEVar>?, cbEncoded: DWORD, pbComputedHash: CValuesRef<BYTEVar>?, pcbComputedHash: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCryptProv = hCryptProv
        val _dwCertEncodingType = dwCertEncodingType
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _cbEncoded = cbEncoded
        val _pbComputedHash = pbComputedHash?.getPointer(memScope).rawValue
        val _pcbComputedHash = pcbComputedHash?.getPointer(memScope).rawValue
        val res = kni_CryptHashToBeSigned(_hCryptProv, _dwCertEncodingType, _pbEncoded, _cbEncoded, _pbComputedHash, _pcbComputedHash)
        res
    }
}

@SymbolName("win32_kni_CryptHashToBeSigned")
private external fun kni_CryptHashToBeSigned(hCryptProv: Long, dwCertEncodingType: Int, pbEncoded: NativePtr, cbEncoded: Int, pbComputedHash: NativePtr, pcbComputedHash: NativePtr): Int

fun CryptHashCertificate(hCryptProv: HCRYPTPROV_LEGACY, Algid: ALG_ID, dwFlags: DWORD, pbEncoded: CValuesRef<BYTEVar>?, cbEncoded: DWORD, pbComputedHash: CValuesRef<BYTEVar>?, pcbComputedHash: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCryptProv = hCryptProv
        val _Algid = Algid
        val _dwFlags = dwFlags
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _cbEncoded = cbEncoded
        val _pbComputedHash = pbComputedHash?.getPointer(memScope).rawValue
        val _pcbComputedHash = pcbComputedHash?.getPointer(memScope).rawValue
        val res = kni_CryptHashCertificate(_hCryptProv, _Algid, _dwFlags, _pbEncoded, _cbEncoded, _pbComputedHash, _pcbComputedHash)
        res
    }
}

@SymbolName("win32_kni_CryptHashCertificate")
private external fun kni_CryptHashCertificate(hCryptProv: Long, Algid: Int, dwFlags: Int, pbEncoded: NativePtr, cbEncoded: Int, pbComputedHash: NativePtr, pcbComputedHash: NativePtr): Int

fun CryptSignCertificate(hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pbEncodedToBeSigned: CValuesRef<BYTEVar>?, cbEncodedToBeSigned: DWORD, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER?, pvHashAuxInfo: COpaquePointer?, pbSignature: CValuesRef<BYTEVar>?, pcbSignature: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCryptProvOrNCryptKey = hCryptProvOrNCryptKey
        val _dwKeySpec = dwKeySpec
        val _dwCertEncodingType = dwCertEncodingType
        val _pbEncodedToBeSigned = pbEncodedToBeSigned?.getPointer(memScope).rawValue
        val _cbEncodedToBeSigned = cbEncodedToBeSigned
        val _pSignatureAlgorithm = pSignatureAlgorithm.rawValue
        val _pvHashAuxInfo = pvHashAuxInfo.rawValue
        val _pbSignature = pbSignature?.getPointer(memScope).rawValue
        val _pcbSignature = pcbSignature?.getPointer(memScope).rawValue
        val res = kni_CryptSignCertificate(_hCryptProvOrNCryptKey, _dwKeySpec, _dwCertEncodingType, _pbEncodedToBeSigned, _cbEncodedToBeSigned, _pSignatureAlgorithm, _pvHashAuxInfo, _pbSignature, _pcbSignature)
        res
    }
}

@SymbolName("win32_kni_CryptSignCertificate")
private external fun kni_CryptSignCertificate(hCryptProvOrNCryptKey: Long, dwKeySpec: Int, dwCertEncodingType: Int, pbEncodedToBeSigned: NativePtr, cbEncodedToBeSigned: Int, pSignatureAlgorithm: NativePtr, pvHashAuxInfo: NativePtr, pbSignature: NativePtr, pcbSignature: NativePtr): Int

fun CryptSignAndEncodeCertificate(hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, lpszStructType: String?, pvStructInfo: COpaquePointer?, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER?, pvHashAuxInfo: COpaquePointer?, pbEncoded: CValuesRef<BYTEVar>?, pcbEncoded: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCryptProvOrNCryptKey = hCryptProvOrNCryptKey
        val _dwKeySpec = dwKeySpec
        val _dwCertEncodingType = dwCertEncodingType
        val _lpszStructType = lpszStructType?.cstr?.getPointer(memScope).rawValue
        val _pvStructInfo = pvStructInfo.rawValue
        val _pSignatureAlgorithm = pSignatureAlgorithm.rawValue
        val _pvHashAuxInfo = pvHashAuxInfo.rawValue
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _pcbEncoded = pcbEncoded?.getPointer(memScope).rawValue
        val res = kni_CryptSignAndEncodeCertificate(_hCryptProvOrNCryptKey, _dwKeySpec, _dwCertEncodingType, _lpszStructType, _pvStructInfo, _pSignatureAlgorithm, _pvHashAuxInfo, _pbEncoded, _pcbEncoded)
        res
    }
}

@SymbolName("win32_kni_CryptSignAndEncodeCertificate")
private external fun kni_CryptSignAndEncodeCertificate(hCryptProvOrNCryptKey: Long, dwKeySpec: Int, dwCertEncodingType: Int, lpszStructType: NativePtr, pvStructInfo: NativePtr, pSignatureAlgorithm: NativePtr, pvHashAuxInfo: NativePtr, pbEncoded: NativePtr, pcbEncoded: NativePtr): Int

fun CertVerifyTimeValidity(pTimeToVerify: LPFILETIME?, pCertInfo: PCERT_INFO?): LONG {
    val _pTimeToVerify = pTimeToVerify.rawValue
    val _pCertInfo = pCertInfo.rawValue
    val res = kni_CertVerifyTimeValidity(_pTimeToVerify, _pCertInfo)
    return res
}

@SymbolName("win32_kni_CertVerifyTimeValidity")
private external fun kni_CertVerifyTimeValidity(pTimeToVerify: NativePtr, pCertInfo: NativePtr): Int

fun CertVerifyCRLTimeValidity(pTimeToVerify: LPFILETIME?, pCrlInfo: PCRL_INFO?): LONG {
    val _pTimeToVerify = pTimeToVerify.rawValue
    val _pCrlInfo = pCrlInfo.rawValue
    val res = kni_CertVerifyCRLTimeValidity(_pTimeToVerify, _pCrlInfo)
    return res
}

@SymbolName("win32_kni_CertVerifyCRLTimeValidity")
private external fun kni_CertVerifyCRLTimeValidity(pTimeToVerify: NativePtr, pCrlInfo: NativePtr): Int

fun CertVerifyValidityNesting(pSubjectInfo: PCERT_INFO?, pIssuerInfo: PCERT_INFO?): WINBOOL {
    val _pSubjectInfo = pSubjectInfo.rawValue
    val _pIssuerInfo = pIssuerInfo.rawValue
    val res = kni_CertVerifyValidityNesting(_pSubjectInfo, _pIssuerInfo)
    return res
}

@SymbolName("win32_kni_CertVerifyValidityNesting")
private external fun kni_CertVerifyValidityNesting(pSubjectInfo: NativePtr, pIssuerInfo: NativePtr): Int

fun CertVerifyCRLRevocation(dwCertEncodingType: DWORD, pCertId: PCERT_INFO?, cCrlInfo: DWORD, rgpCrlInfo: CValuesRef<PCRL_INFOVar>?): WINBOOL {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _pCertId = pCertId.rawValue
        val _cCrlInfo = cCrlInfo
        val _rgpCrlInfo = rgpCrlInfo?.getPointer(memScope).rawValue
        val res = kni_CertVerifyCRLRevocation(_dwCertEncodingType, _pCertId, _cCrlInfo, _rgpCrlInfo)
        res
    }
}

@SymbolName("win32_kni_CertVerifyCRLRevocation")
private external fun kni_CertVerifyCRLRevocation(dwCertEncodingType: Int, pCertId: NativePtr, cCrlInfo: Int, rgpCrlInfo: NativePtr): Int

fun CertAlgIdToOID(dwAlgId: DWORD): LPCSTR? {
    val _dwAlgId = dwAlgId
    val res = kni_CertAlgIdToOID(_dwAlgId)
    return interpretCPointer<CHARVar>(res)
}

@SymbolName("win32_kni_CertAlgIdToOID")
private external fun kni_CertAlgIdToOID(dwAlgId: Int): NativePtr

fun CertOIDToAlgId(pszObjId: String?): DWORD {
    return memScoped {
        val _pszObjId = pszObjId?.cstr?.getPointer(memScope).rawValue
        val res = kni_CertOIDToAlgId(_pszObjId)
        res
    }
}

@SymbolName("win32_kni_CertOIDToAlgId")
private external fun kni_CertOIDToAlgId(pszObjId: NativePtr): Int

fun CertFindExtension(pszObjId: String?, cExtensions: DWORD, rgExtensions: CValuesRef<CERT_EXTENSION>?): PCERT_EXTENSION? {
    return memScoped {
        val _pszObjId = pszObjId?.cstr?.getPointer(memScope).rawValue
        val _cExtensions = cExtensions
        val _rgExtensions = rgExtensions?.getPointer(memScope).rawValue
        val res = kni_CertFindExtension(_pszObjId, _cExtensions, _rgExtensions)
        interpretCPointer<_CERT_EXTENSION>(res)
    }
}

@SymbolName("win32_kni_CertFindExtension")
private external fun kni_CertFindExtension(pszObjId: NativePtr, cExtensions: Int, rgExtensions: NativePtr): NativePtr

fun CertFindAttribute(pszObjId: String?, cAttr: DWORD, rgAttr: CValuesRef<CRYPT_ATTRIBUTE>?): PCRYPT_ATTRIBUTE? {
    return memScoped {
        val _pszObjId = pszObjId?.cstr?.getPointer(memScope).rawValue
        val _cAttr = cAttr
        val _rgAttr = rgAttr?.getPointer(memScope).rawValue
        val res = kni_CertFindAttribute(_pszObjId, _cAttr, _rgAttr)
        interpretCPointer<_CRYPT_ATTRIBUTE>(res)
    }
}

@SymbolName("win32_kni_CertFindAttribute")
private external fun kni_CertFindAttribute(pszObjId: NativePtr, cAttr: Int, rgAttr: NativePtr): NativePtr

fun CertFindRDNAttr(pszObjId: String?, pName: PCERT_NAME_INFO?): PCERT_RDN_ATTR? {
    return memScoped {
        val _pszObjId = pszObjId?.cstr?.getPointer(memScope).rawValue
        val _pName = pName.rawValue
        val res = kni_CertFindRDNAttr(_pszObjId, _pName)
        interpretCPointer<_CERT_RDN_ATTR>(res)
    }
}

@SymbolName("win32_kni_CertFindRDNAttr")
private external fun kni_CertFindRDNAttr(pszObjId: NativePtr, pName: NativePtr): NativePtr

fun CertGetIntendedKeyUsage(dwCertEncodingType: DWORD, pCertInfo: PCERT_INFO?, pbKeyUsage: CValuesRef<BYTEVar>?, cbKeyUsage: DWORD): WINBOOL {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _pCertInfo = pCertInfo.rawValue
        val _pbKeyUsage = pbKeyUsage?.getPointer(memScope).rawValue
        val _cbKeyUsage = cbKeyUsage
        val res = kni_CertGetIntendedKeyUsage(_dwCertEncodingType, _pCertInfo, _pbKeyUsage, _cbKeyUsage)
        res
    }
}

@SymbolName("win32_kni_CertGetIntendedKeyUsage")
private external fun kni_CertGetIntendedKeyUsage(dwCertEncodingType: Int, pCertInfo: NativePtr, pbKeyUsage: NativePtr, cbKeyUsage: Int): Int

fun CryptInstallDefaultContext(hCryptProv: HCRYPTPROV, dwDefaultType: DWORD, pvDefaultPara: COpaquePointer?, dwFlags: DWORD, pvReserved: COpaquePointer?, phDefaultContext: CValuesRef<HCRYPTDEFAULTCONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hCryptProv = hCryptProv
        val _dwDefaultType = dwDefaultType
        val _pvDefaultPara = pvDefaultPara.rawValue
        val _dwFlags = dwFlags
        val _pvReserved = pvReserved.rawValue
        val _phDefaultContext = phDefaultContext?.getPointer(memScope).rawValue
        val res = kni_CryptInstallDefaultContext(_hCryptProv, _dwDefaultType, _pvDefaultPara, _dwFlags, _pvReserved, _phDefaultContext)
        res
    }
}

@SymbolName("win32_kni_CryptInstallDefaultContext")
private external fun kni_CryptInstallDefaultContext(hCryptProv: Long, dwDefaultType: Int, pvDefaultPara: NativePtr, dwFlags: Int, pvReserved: NativePtr, phDefaultContext: NativePtr): Int

fun CryptUninstallDefaultContext(hDefaultContext: HCRYPTDEFAULTCONTEXT?, dwFlags: DWORD, pvReserved: COpaquePointer?): WINBOOL {
    val _hDefaultContext = hDefaultContext.rawValue
    val _dwFlags = dwFlags
    val _pvReserved = pvReserved.rawValue
    val res = kni_CryptUninstallDefaultContext(_hDefaultContext, _dwFlags, _pvReserved)
    return res
}

@SymbolName("win32_kni_CryptUninstallDefaultContext")
private external fun kni_CryptUninstallDefaultContext(hDefaultContext: NativePtr, dwFlags: Int, pvReserved: NativePtr): Int

fun CryptExportPublicKeyInfo(hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO?, pcbInfo: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCryptProvOrNCryptKey = hCryptProvOrNCryptKey
        val _dwKeySpec = dwKeySpec
        val _dwCertEncodingType = dwCertEncodingType
        val _pInfo = pInfo.rawValue
        val _pcbInfo = pcbInfo?.getPointer(memScope).rawValue
        val res = kni_CryptExportPublicKeyInfo(_hCryptProvOrNCryptKey, _dwKeySpec, _dwCertEncodingType, _pInfo, _pcbInfo)
        res
    }
}

@SymbolName("win32_kni_CryptExportPublicKeyInfo")
private external fun kni_CryptExportPublicKeyInfo(hCryptProvOrNCryptKey: Long, dwKeySpec: Int, dwCertEncodingType: Int, pInfo: NativePtr, pcbInfo: NativePtr): Int

fun CryptExportPublicKeyInfoEx(hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pszPublicKeyObjId: LPSTR?, dwFlags: DWORD, pvAuxInfo: COpaquePointer?, pInfo: PCERT_PUBLIC_KEY_INFO?, pcbInfo: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCryptProvOrNCryptKey = hCryptProvOrNCryptKey
        val _dwKeySpec = dwKeySpec
        val _dwCertEncodingType = dwCertEncodingType
        val _pszPublicKeyObjId = pszPublicKeyObjId.rawValue
        val _dwFlags = dwFlags
        val _pvAuxInfo = pvAuxInfo.rawValue
        val _pInfo = pInfo.rawValue
        val _pcbInfo = pcbInfo?.getPointer(memScope).rawValue
        val res = kni_CryptExportPublicKeyInfoEx(_hCryptProvOrNCryptKey, _dwKeySpec, _dwCertEncodingType, _pszPublicKeyObjId, _dwFlags, _pvAuxInfo, _pInfo, _pcbInfo)
        res
    }
}

@SymbolName("win32_kni_CryptExportPublicKeyInfoEx")
private external fun kni_CryptExportPublicKeyInfoEx(hCryptProvOrNCryptKey: Long, dwKeySpec: Int, dwCertEncodingType: Int, pszPublicKeyObjId: NativePtr, dwFlags: Int, pvAuxInfo: NativePtr, pInfo: NativePtr, pcbInfo: NativePtr): Int

fun CryptImportPublicKeyInfo(hCryptProv: HCRYPTPROV, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO?, phKey: CValuesRef<HCRYPTKEYVar>?): WINBOOL {
    return memScoped {
        val _hCryptProv = hCryptProv
        val _dwCertEncodingType = dwCertEncodingType
        val _pInfo = pInfo.rawValue
        val _phKey = phKey?.getPointer(memScope).rawValue
        val res = kni_CryptImportPublicKeyInfo(_hCryptProv, _dwCertEncodingType, _pInfo, _phKey)
        res
    }
}

@SymbolName("win32_kni_CryptImportPublicKeyInfo")
private external fun kni_CryptImportPublicKeyInfo(hCryptProv: Long, dwCertEncodingType: Int, pInfo: NativePtr, phKey: NativePtr): Int

fun CryptImportPublicKeyInfoEx(hCryptProv: HCRYPTPROV, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO?, aiKeyAlg: ALG_ID, dwFlags: DWORD, pvAuxInfo: COpaquePointer?, phKey: CValuesRef<HCRYPTKEYVar>?): WINBOOL {
    return memScoped {
        val _hCryptProv = hCryptProv
        val _dwCertEncodingType = dwCertEncodingType
        val _pInfo = pInfo.rawValue
        val _aiKeyAlg = aiKeyAlg
        val _dwFlags = dwFlags
        val _pvAuxInfo = pvAuxInfo.rawValue
        val _phKey = phKey?.getPointer(memScope).rawValue
        val res = kni_CryptImportPublicKeyInfoEx(_hCryptProv, _dwCertEncodingType, _pInfo, _aiKeyAlg, _dwFlags, _pvAuxInfo, _phKey)
        res
    }
}

@SymbolName("win32_kni_CryptImportPublicKeyInfoEx")
private external fun kni_CryptImportPublicKeyInfoEx(hCryptProv: Long, dwCertEncodingType: Int, pInfo: NativePtr, aiKeyAlg: Int, dwFlags: Int, pvAuxInfo: NativePtr, phKey: NativePtr): Int

fun CryptAcquireCertificatePrivateKey(pCert: PCCERT_CONTEXT?, dwFlags: DWORD, pvParameters: COpaquePointer?, phCryptProvOrNCryptKey: CValuesRef<HCRYPTPROV_OR_NCRYPT_KEY_HANDLEVar>?, pdwKeySpec: CValuesRef<DWORDVar>?, pfCallerFreeProvOrNCryptKey: CValuesRef<WINBOOLVar>?): WINBOOL {
    return memScoped {
        val _pCert = pCert.rawValue
        val _dwFlags = dwFlags
        val _pvParameters = pvParameters.rawValue
        val _phCryptProvOrNCryptKey = phCryptProvOrNCryptKey?.getPointer(memScope).rawValue
        val _pdwKeySpec = pdwKeySpec?.getPointer(memScope).rawValue
        val _pfCallerFreeProvOrNCryptKey = pfCallerFreeProvOrNCryptKey?.getPointer(memScope).rawValue
        val res = kni_CryptAcquireCertificatePrivateKey(_pCert, _dwFlags, _pvParameters, _phCryptProvOrNCryptKey, _pdwKeySpec, _pfCallerFreeProvOrNCryptKey)
        res
    }
}

@SymbolName("win32_kni_CryptAcquireCertificatePrivateKey")
private external fun kni_CryptAcquireCertificatePrivateKey(pCert: NativePtr, dwFlags: Int, pvParameters: NativePtr, phCryptProvOrNCryptKey: NativePtr, pdwKeySpec: NativePtr, pfCallerFreeProvOrNCryptKey: NativePtr): Int

fun CryptFindCertificateKeyProvInfo(pCert: PCCERT_CONTEXT?, dwFlags: DWORD, pvReserved: COpaquePointer?): WINBOOL {
    val _pCert = pCert.rawValue
    val _dwFlags = dwFlags
    val _pvReserved = pvReserved.rawValue
    val res = kni_CryptFindCertificateKeyProvInfo(_pCert, _dwFlags, _pvReserved)
    return res
}

@SymbolName("win32_kni_CryptFindCertificateKeyProvInfo")
private external fun kni_CryptFindCertificateKeyProvInfo(pCert: NativePtr, dwFlags: Int, pvReserved: NativePtr): Int

fun CryptImportPKCS8(sPrivateKeyAndParams: CValue<CRYPT_PKCS8_IMPORT_PARAMS>, dwFlags: DWORD, phCryptProv: CValuesRef<HCRYPTPROVVar>?, pvAuxInfo: COpaquePointer?): WINBOOL {
    return memScoped {
        val _sPrivateKeyAndParams = sPrivateKeyAndParams.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _phCryptProv = phCryptProv?.getPointer(memScope).rawValue
        val _pvAuxInfo = pvAuxInfo.rawValue
        val res = kni_CryptImportPKCS8(_sPrivateKeyAndParams, _dwFlags, _phCryptProv, _pvAuxInfo)
        res
    }
}

@SymbolName("win32_kni_CryptImportPKCS8")
private external fun kni_CryptImportPKCS8(sPrivateKeyAndParams: NativePtr, dwFlags: Int, phCryptProv: NativePtr, pvAuxInfo: NativePtr): Int

fun CryptExportPKCS8(hCryptProv: HCRYPTPROV, dwKeySpec: DWORD, pszPrivateKeyObjId: LPSTR?, dwFlags: DWORD, pvAuxInfo: COpaquePointer?, pbPrivateKeyBlob: CValuesRef<BYTEVar>?, pcbPrivateKeyBlob: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCryptProv = hCryptProv
        val _dwKeySpec = dwKeySpec
        val _pszPrivateKeyObjId = pszPrivateKeyObjId.rawValue
        val _dwFlags = dwFlags
        val _pvAuxInfo = pvAuxInfo.rawValue
        val _pbPrivateKeyBlob = pbPrivateKeyBlob?.getPointer(memScope).rawValue
        val _pcbPrivateKeyBlob = pcbPrivateKeyBlob?.getPointer(memScope).rawValue
        val res = kni_CryptExportPKCS8(_hCryptProv, _dwKeySpec, _pszPrivateKeyObjId, _dwFlags, _pvAuxInfo, _pbPrivateKeyBlob, _pcbPrivateKeyBlob)
        res
    }
}

@SymbolName("win32_kni_CryptExportPKCS8")
private external fun kni_CryptExportPKCS8(hCryptProv: Long, dwKeySpec: Int, pszPrivateKeyObjId: NativePtr, dwFlags: Int, pvAuxInfo: NativePtr, pbPrivateKeyBlob: NativePtr, pcbPrivateKeyBlob: NativePtr): Int

fun CryptExportPKCS8Ex(psExportParams: CValuesRef<CRYPT_PKCS8_EXPORT_PARAMS>?, dwFlags: DWORD, pvAuxInfo: COpaquePointer?, pbPrivateKeyBlob: CValuesRef<BYTEVar>?, pcbPrivateKeyBlob: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _psExportParams = psExportParams?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val _pvAuxInfo = pvAuxInfo.rawValue
        val _pbPrivateKeyBlob = pbPrivateKeyBlob?.getPointer(memScope).rawValue
        val _pcbPrivateKeyBlob = pcbPrivateKeyBlob?.getPointer(memScope).rawValue
        val res = kni_CryptExportPKCS8Ex(_psExportParams, _dwFlags, _pvAuxInfo, _pbPrivateKeyBlob, _pcbPrivateKeyBlob)
        res
    }
}

@SymbolName("win32_kni_CryptExportPKCS8Ex")
private external fun kni_CryptExportPKCS8Ex(psExportParams: NativePtr, dwFlags: Int, pvAuxInfo: NativePtr, pbPrivateKeyBlob: NativePtr, pcbPrivateKeyBlob: NativePtr): Int

fun CryptHashPublicKeyInfo(hCryptProv: HCRYPTPROV_LEGACY, Algid: ALG_ID, dwFlags: DWORD, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO?, pbComputedHash: CValuesRef<BYTEVar>?, pcbComputedHash: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _hCryptProv = hCryptProv
        val _Algid = Algid
        val _dwFlags = dwFlags
        val _dwCertEncodingType = dwCertEncodingType
        val _pInfo = pInfo.rawValue
        val _pbComputedHash = pbComputedHash?.getPointer(memScope).rawValue
        val _pcbComputedHash = pcbComputedHash?.getPointer(memScope).rawValue
        val res = kni_CryptHashPublicKeyInfo(_hCryptProv, _Algid, _dwFlags, _dwCertEncodingType, _pInfo, _pbComputedHash, _pcbComputedHash)
        res
    }
}

@SymbolName("win32_kni_CryptHashPublicKeyInfo")
private external fun kni_CryptHashPublicKeyInfo(hCryptProv: Long, Algid: Int, dwFlags: Int, dwCertEncodingType: Int, pInfo: NativePtr, pbComputedHash: NativePtr, pcbComputedHash: NativePtr): Int

fun CertRDNValueToStrA(dwValueType: DWORD, pValue: PCERT_RDN_VALUE_BLOB?, psz: LPSTR?, csz: DWORD): DWORD {
    val _dwValueType = dwValueType
    val _pValue = pValue.rawValue
    val _psz = psz.rawValue
    val _csz = csz
    val res = kni_CertRDNValueToStrA(_dwValueType, _pValue, _psz, _csz)
    return res
}

@SymbolName("win32_kni_CertRDNValueToStrA")
private external fun kni_CertRDNValueToStrA(dwValueType: Int, pValue: NativePtr, psz: NativePtr, csz: Int): Int

fun CertRDNValueToStrW(dwValueType: DWORD, pValue: PCERT_RDN_VALUE_BLOB?, psz: LPWSTR?, csz: DWORD): DWORD {
    val _dwValueType = dwValueType
    val _pValue = pValue.rawValue
    val _psz = psz.rawValue
    val _csz = csz
    val res = kni_CertRDNValueToStrW(_dwValueType, _pValue, _psz, _csz)
    return res
}

@SymbolName("win32_kni_CertRDNValueToStrW")
private external fun kni_CertRDNValueToStrW(dwValueType: Int, pValue: NativePtr, psz: NativePtr, csz: Int): Int

fun CertNameToStrA(dwCertEncodingType: DWORD, pName: PCERT_NAME_BLOB?, dwStrType: DWORD, psz: LPSTR?, csz: DWORD): DWORD {
    val _dwCertEncodingType = dwCertEncodingType
    val _pName = pName.rawValue
    val _dwStrType = dwStrType
    val _psz = psz.rawValue
    val _csz = csz
    val res = kni_CertNameToStrA(_dwCertEncodingType, _pName, _dwStrType, _psz, _csz)
    return res
}

@SymbolName("win32_kni_CertNameToStrA")
private external fun kni_CertNameToStrA(dwCertEncodingType: Int, pName: NativePtr, dwStrType: Int, psz: NativePtr, csz: Int): Int

fun CertNameToStrW(dwCertEncodingType: DWORD, pName: PCERT_NAME_BLOB?, dwStrType: DWORD, psz: LPWSTR?, csz: DWORD): DWORD {
    val _dwCertEncodingType = dwCertEncodingType
    val _pName = pName.rawValue
    val _dwStrType = dwStrType
    val _psz = psz.rawValue
    val _csz = csz
    val res = kni_CertNameToStrW(_dwCertEncodingType, _pName, _dwStrType, _psz, _csz)
    return res
}

@SymbolName("win32_kni_CertNameToStrW")
private external fun kni_CertNameToStrW(dwCertEncodingType: Int, pName: NativePtr, dwStrType: Int, psz: NativePtr, csz: Int): Int

fun CertStrToNameA(dwCertEncodingType: DWORD, pszX500: String?, dwStrType: DWORD, pvReserved: COpaquePointer?, pbEncoded: CValuesRef<BYTEVar>?, pcbEncoded: CValuesRef<DWORDVar>?, ppszError: CValuesRef<LPCSTRVar>?): WINBOOL {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _pszX500 = pszX500?.cstr?.getPointer(memScope).rawValue
        val _dwStrType = dwStrType
        val _pvReserved = pvReserved.rawValue
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _pcbEncoded = pcbEncoded?.getPointer(memScope).rawValue
        val _ppszError = ppszError?.getPointer(memScope).rawValue
        val res = kni_CertStrToNameA(_dwCertEncodingType, _pszX500, _dwStrType, _pvReserved, _pbEncoded, _pcbEncoded, _ppszError)
        res
    }
}

@SymbolName("win32_kni_CertStrToNameA")
private external fun kni_CertStrToNameA(dwCertEncodingType: Int, pszX500: NativePtr, dwStrType: Int, pvReserved: NativePtr, pbEncoded: NativePtr, pcbEncoded: NativePtr, ppszError: NativePtr): Int

fun CertStrToNameW(dwCertEncodingType: DWORD, pszX500: String?, dwStrType: DWORD, pvReserved: COpaquePointer?, pbEncoded: CValuesRef<BYTEVar>?, pcbEncoded: CValuesRef<DWORDVar>?, ppszError: CValuesRef<LPCWSTRVar>?): WINBOOL {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _pszX500 = pszX500?.wcstr?.getPointer(memScope).rawValue
        val _dwStrType = dwStrType
        val _pvReserved = pvReserved.rawValue
        val _pbEncoded = pbEncoded?.getPointer(memScope).rawValue
        val _pcbEncoded = pcbEncoded?.getPointer(memScope).rawValue
        val _ppszError = ppszError?.getPointer(memScope).rawValue
        val res = kni_CertStrToNameW(_dwCertEncodingType, _pszX500, _dwStrType, _pvReserved, _pbEncoded, _pcbEncoded, _ppszError)
        res
    }
}

@SymbolName("win32_kni_CertStrToNameW")
private external fun kni_CertStrToNameW(dwCertEncodingType: Int, pszX500: NativePtr, dwStrType: Int, pvReserved: NativePtr, pbEncoded: NativePtr, pcbEncoded: NativePtr, ppszError: NativePtr): Int

fun CertGetNameStringA(pCertContext: PCCERT_CONTEXT?, dwType: DWORD, dwFlags: DWORD, pvTypePara: COpaquePointer?, pszNameString: LPSTR?, cchNameString: DWORD): DWORD {
    val _pCertContext = pCertContext.rawValue
    val _dwType = dwType
    val _dwFlags = dwFlags
    val _pvTypePara = pvTypePara.rawValue
    val _pszNameString = pszNameString.rawValue
    val _cchNameString = cchNameString
    val res = kni_CertGetNameStringA(_pCertContext, _dwType, _dwFlags, _pvTypePara, _pszNameString, _cchNameString)
    return res
}

@SymbolName("win32_kni_CertGetNameStringA")
private external fun kni_CertGetNameStringA(pCertContext: NativePtr, dwType: Int, dwFlags: Int, pvTypePara: NativePtr, pszNameString: NativePtr, cchNameString: Int): Int

fun CertGetNameStringW(pCertContext: PCCERT_CONTEXT?, dwType: DWORD, dwFlags: DWORD, pvTypePara: COpaquePointer?, pszNameString: LPWSTR?, cchNameString: DWORD): DWORD {
    val _pCertContext = pCertContext.rawValue
    val _dwType = dwType
    val _dwFlags = dwFlags
    val _pvTypePara = pvTypePara.rawValue
    val _pszNameString = pszNameString.rawValue
    val _cchNameString = cchNameString
    val res = kni_CertGetNameStringW(_pCertContext, _dwType, _dwFlags, _pvTypePara, _pszNameString, _cchNameString)
    return res
}

@SymbolName("win32_kni_CertGetNameStringW")
private external fun kni_CertGetNameStringW(pCertContext: NativePtr, dwType: Int, dwFlags: Int, pvTypePara: NativePtr, pszNameString: NativePtr, cchNameString: Int): Int

fun CryptSignMessage(pSignPara: PCRYPT_SIGN_MESSAGE_PARA?, fDetachedSignature: WINBOOL, cToBeSigned: DWORD, rgpbToBeSigned: CValuesRef<CPointerVar<BYTEVar>>?, rgcbToBeSigned: CValuesRef<DWORDVar>?, pbSignedBlob: CValuesRef<BYTEVar>?, pcbSignedBlob: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pSignPara = pSignPara.rawValue
        val _fDetachedSignature = fDetachedSignature
        val _cToBeSigned = cToBeSigned
        val _rgpbToBeSigned = rgpbToBeSigned?.getPointer(memScope).rawValue
        val _rgcbToBeSigned = rgcbToBeSigned?.getPointer(memScope).rawValue
        val _pbSignedBlob = pbSignedBlob?.getPointer(memScope).rawValue
        val _pcbSignedBlob = pcbSignedBlob?.getPointer(memScope).rawValue
        val res = kni_CryptSignMessage(_pSignPara, _fDetachedSignature, _cToBeSigned, _rgpbToBeSigned, _rgcbToBeSigned, _pbSignedBlob, _pcbSignedBlob)
        res
    }
}

@SymbolName("win32_kni_CryptSignMessage")
private external fun kni_CryptSignMessage(pSignPara: NativePtr, fDetachedSignature: Int, cToBeSigned: Int, rgpbToBeSigned: NativePtr, rgcbToBeSigned: NativePtr, pbSignedBlob: NativePtr, pcbSignedBlob: NativePtr): Int

fun CryptVerifyMessageSignature(pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA?, dwSignerIndex: DWORD, pbSignedBlob: CValuesRef<BYTEVar>?, cbSignedBlob: DWORD, pbDecoded: CValuesRef<BYTEVar>?, pcbDecoded: CValuesRef<DWORDVar>?, ppSignerCert: CValuesRef<PCCERT_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _pVerifyPara = pVerifyPara.rawValue
        val _dwSignerIndex = dwSignerIndex
        val _pbSignedBlob = pbSignedBlob?.getPointer(memScope).rawValue
        val _cbSignedBlob = cbSignedBlob
        val _pbDecoded = pbDecoded?.getPointer(memScope).rawValue
        val _pcbDecoded = pcbDecoded?.getPointer(memScope).rawValue
        val _ppSignerCert = ppSignerCert?.getPointer(memScope).rawValue
        val res = kni_CryptVerifyMessageSignature(_pVerifyPara, _dwSignerIndex, _pbSignedBlob, _cbSignedBlob, _pbDecoded, _pcbDecoded, _ppSignerCert)
        res
    }
}

@SymbolName("win32_kni_CryptVerifyMessageSignature")
private external fun kni_CryptVerifyMessageSignature(pVerifyPara: NativePtr, dwSignerIndex: Int, pbSignedBlob: NativePtr, cbSignedBlob: Int, pbDecoded: NativePtr, pcbDecoded: NativePtr, ppSignerCert: NativePtr): Int

fun CryptGetMessageSignerCount(dwMsgEncodingType: DWORD, pbSignedBlob: CValuesRef<BYTEVar>?, cbSignedBlob: DWORD): LONG {
    return memScoped {
        val _dwMsgEncodingType = dwMsgEncodingType
        val _pbSignedBlob = pbSignedBlob?.getPointer(memScope).rawValue
        val _cbSignedBlob = cbSignedBlob
        val res = kni_CryptGetMessageSignerCount(_dwMsgEncodingType, _pbSignedBlob, _cbSignedBlob)
        res
    }
}

@SymbolName("win32_kni_CryptGetMessageSignerCount")
private external fun kni_CryptGetMessageSignerCount(dwMsgEncodingType: Int, pbSignedBlob: NativePtr, cbSignedBlob: Int): Int

fun CryptGetMessageCertificates(dwMsgAndCertEncodingType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, dwFlags: DWORD, pbSignedBlob: CValuesRef<BYTEVar>?, cbSignedBlob: DWORD): HCERTSTORE? {
    return memScoped {
        val _dwMsgAndCertEncodingType = dwMsgAndCertEncodingType
        val _hCryptProv = hCryptProv
        val _dwFlags = dwFlags
        val _pbSignedBlob = pbSignedBlob?.getPointer(memScope).rawValue
        val _cbSignedBlob = cbSignedBlob
        val res = kni_CryptGetMessageCertificates(_dwMsgAndCertEncodingType, _hCryptProv, _dwFlags, _pbSignedBlob, _cbSignedBlob)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CryptGetMessageCertificates")
private external fun kni_CryptGetMessageCertificates(dwMsgAndCertEncodingType: Int, hCryptProv: Long, dwFlags: Int, pbSignedBlob: NativePtr, cbSignedBlob: Int): NativePtr

fun CryptVerifyDetachedMessageSignature(pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA?, dwSignerIndex: DWORD, pbDetachedSignBlob: CValuesRef<BYTEVar>?, cbDetachedSignBlob: DWORD, cToBeSigned: DWORD, rgpbToBeSigned: CValuesRef<CPointerVar<BYTEVar>>?, rgcbToBeSigned: CValuesRef<DWORDVar>?, ppSignerCert: CValuesRef<PCCERT_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _pVerifyPara = pVerifyPara.rawValue
        val _dwSignerIndex = dwSignerIndex
        val _pbDetachedSignBlob = pbDetachedSignBlob?.getPointer(memScope).rawValue
        val _cbDetachedSignBlob = cbDetachedSignBlob
        val _cToBeSigned = cToBeSigned
        val _rgpbToBeSigned = rgpbToBeSigned?.getPointer(memScope).rawValue
        val _rgcbToBeSigned = rgcbToBeSigned?.getPointer(memScope).rawValue
        val _ppSignerCert = ppSignerCert?.getPointer(memScope).rawValue
        val res = kni_CryptVerifyDetachedMessageSignature(_pVerifyPara, _dwSignerIndex, _pbDetachedSignBlob, _cbDetachedSignBlob, _cToBeSigned, _rgpbToBeSigned, _rgcbToBeSigned, _ppSignerCert)
        res
    }
}

@SymbolName("win32_kni_CryptVerifyDetachedMessageSignature")
private external fun kni_CryptVerifyDetachedMessageSignature(pVerifyPara: NativePtr, dwSignerIndex: Int, pbDetachedSignBlob: NativePtr, cbDetachedSignBlob: Int, cToBeSigned: Int, rgpbToBeSigned: NativePtr, rgcbToBeSigned: NativePtr, ppSignerCert: NativePtr): Int

fun CryptEncryptMessage(pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA?, cRecipientCert: DWORD, rgpRecipientCert: CValuesRef<PCCERT_CONTEXTVar>?, pbToBeEncrypted: CValuesRef<BYTEVar>?, cbToBeEncrypted: DWORD, pbEncryptedBlob: CValuesRef<BYTEVar>?, pcbEncryptedBlob: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pEncryptPara = pEncryptPara.rawValue
        val _cRecipientCert = cRecipientCert
        val _rgpRecipientCert = rgpRecipientCert?.getPointer(memScope).rawValue
        val _pbToBeEncrypted = pbToBeEncrypted?.getPointer(memScope).rawValue
        val _cbToBeEncrypted = cbToBeEncrypted
        val _pbEncryptedBlob = pbEncryptedBlob?.getPointer(memScope).rawValue
        val _pcbEncryptedBlob = pcbEncryptedBlob?.getPointer(memScope).rawValue
        val res = kni_CryptEncryptMessage(_pEncryptPara, _cRecipientCert, _rgpRecipientCert, _pbToBeEncrypted, _cbToBeEncrypted, _pbEncryptedBlob, _pcbEncryptedBlob)
        res
    }
}

@SymbolName("win32_kni_CryptEncryptMessage")
private external fun kni_CryptEncryptMessage(pEncryptPara: NativePtr, cRecipientCert: Int, rgpRecipientCert: NativePtr, pbToBeEncrypted: NativePtr, cbToBeEncrypted: Int, pbEncryptedBlob: NativePtr, pcbEncryptedBlob: NativePtr): Int

fun CryptDecryptMessage(pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA?, pbEncryptedBlob: CValuesRef<BYTEVar>?, cbEncryptedBlob: DWORD, pbDecrypted: CValuesRef<BYTEVar>?, pcbDecrypted: CValuesRef<DWORDVar>?, ppXchgCert: CValuesRef<PCCERT_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _pDecryptPara = pDecryptPara.rawValue
        val _pbEncryptedBlob = pbEncryptedBlob?.getPointer(memScope).rawValue
        val _cbEncryptedBlob = cbEncryptedBlob
        val _pbDecrypted = pbDecrypted?.getPointer(memScope).rawValue
        val _pcbDecrypted = pcbDecrypted?.getPointer(memScope).rawValue
        val _ppXchgCert = ppXchgCert?.getPointer(memScope).rawValue
        val res = kni_CryptDecryptMessage(_pDecryptPara, _pbEncryptedBlob, _cbEncryptedBlob, _pbDecrypted, _pcbDecrypted, _ppXchgCert)
        res
    }
}

@SymbolName("win32_kni_CryptDecryptMessage")
private external fun kni_CryptDecryptMessage(pDecryptPara: NativePtr, pbEncryptedBlob: NativePtr, cbEncryptedBlob: Int, pbDecrypted: NativePtr, pcbDecrypted: NativePtr, ppXchgCert: NativePtr): Int

fun CryptSignAndEncryptMessage(pSignPara: PCRYPT_SIGN_MESSAGE_PARA?, pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA?, cRecipientCert: DWORD, rgpRecipientCert: CValuesRef<PCCERT_CONTEXTVar>?, pbToBeSignedAndEncrypted: CValuesRef<BYTEVar>?, cbToBeSignedAndEncrypted: DWORD, pbSignedAndEncryptedBlob: CValuesRef<BYTEVar>?, pcbSignedAndEncryptedBlob: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pSignPara = pSignPara.rawValue
        val _pEncryptPara = pEncryptPara.rawValue
        val _cRecipientCert = cRecipientCert
        val _rgpRecipientCert = rgpRecipientCert?.getPointer(memScope).rawValue
        val _pbToBeSignedAndEncrypted = pbToBeSignedAndEncrypted?.getPointer(memScope).rawValue
        val _cbToBeSignedAndEncrypted = cbToBeSignedAndEncrypted
        val _pbSignedAndEncryptedBlob = pbSignedAndEncryptedBlob?.getPointer(memScope).rawValue
        val _pcbSignedAndEncryptedBlob = pcbSignedAndEncryptedBlob?.getPointer(memScope).rawValue
        val res = kni_CryptSignAndEncryptMessage(_pSignPara, _pEncryptPara, _cRecipientCert, _rgpRecipientCert, _pbToBeSignedAndEncrypted, _cbToBeSignedAndEncrypted, _pbSignedAndEncryptedBlob, _pcbSignedAndEncryptedBlob)
        res
    }
}

@SymbolName("win32_kni_CryptSignAndEncryptMessage")
private external fun kni_CryptSignAndEncryptMessage(pSignPara: NativePtr, pEncryptPara: NativePtr, cRecipientCert: Int, rgpRecipientCert: NativePtr, pbToBeSignedAndEncrypted: NativePtr, cbToBeSignedAndEncrypted: Int, pbSignedAndEncryptedBlob: NativePtr, pcbSignedAndEncryptedBlob: NativePtr): Int

fun CryptDecryptAndVerifyMessageSignature(pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA?, pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA?, dwSignerIndex: DWORD, pbEncryptedBlob: CValuesRef<BYTEVar>?, cbEncryptedBlob: DWORD, pbDecrypted: CValuesRef<BYTEVar>?, pcbDecrypted: CValuesRef<DWORDVar>?, ppXchgCert: CValuesRef<PCCERT_CONTEXTVar>?, ppSignerCert: CValuesRef<PCCERT_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _pDecryptPara = pDecryptPara.rawValue
        val _pVerifyPara = pVerifyPara.rawValue
        val _dwSignerIndex = dwSignerIndex
        val _pbEncryptedBlob = pbEncryptedBlob?.getPointer(memScope).rawValue
        val _cbEncryptedBlob = cbEncryptedBlob
        val _pbDecrypted = pbDecrypted?.getPointer(memScope).rawValue
        val _pcbDecrypted = pcbDecrypted?.getPointer(memScope).rawValue
        val _ppXchgCert = ppXchgCert?.getPointer(memScope).rawValue
        val _ppSignerCert = ppSignerCert?.getPointer(memScope).rawValue
        val res = kni_CryptDecryptAndVerifyMessageSignature(_pDecryptPara, _pVerifyPara, _dwSignerIndex, _pbEncryptedBlob, _cbEncryptedBlob, _pbDecrypted, _pcbDecrypted, _ppXchgCert, _ppSignerCert)
        res
    }
}

@SymbolName("win32_kni_CryptDecryptAndVerifyMessageSignature")
private external fun kni_CryptDecryptAndVerifyMessageSignature(pDecryptPara: NativePtr, pVerifyPara: NativePtr, dwSignerIndex: Int, pbEncryptedBlob: NativePtr, cbEncryptedBlob: Int, pbDecrypted: NativePtr, pcbDecrypted: NativePtr, ppXchgCert: NativePtr, ppSignerCert: NativePtr): Int

fun CryptDecodeMessage(dwMsgTypeFlags: DWORD, pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA?, pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA?, dwSignerIndex: DWORD, pbEncodedBlob: CValuesRef<BYTEVar>?, cbEncodedBlob: DWORD, dwPrevInnerContentType: DWORD, pdwMsgType: CValuesRef<DWORDVar>?, pdwInnerContentType: CValuesRef<DWORDVar>?, pbDecoded: CValuesRef<BYTEVar>?, pcbDecoded: CValuesRef<DWORDVar>?, ppXchgCert: CValuesRef<PCCERT_CONTEXTVar>?, ppSignerCert: CValuesRef<PCCERT_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _dwMsgTypeFlags = dwMsgTypeFlags
        val _pDecryptPara = pDecryptPara.rawValue
        val _pVerifyPara = pVerifyPara.rawValue
        val _dwSignerIndex = dwSignerIndex
        val _pbEncodedBlob = pbEncodedBlob?.getPointer(memScope).rawValue
        val _cbEncodedBlob = cbEncodedBlob
        val _dwPrevInnerContentType = dwPrevInnerContentType
        val _pdwMsgType = pdwMsgType?.getPointer(memScope).rawValue
        val _pdwInnerContentType = pdwInnerContentType?.getPointer(memScope).rawValue
        val _pbDecoded = pbDecoded?.getPointer(memScope).rawValue
        val _pcbDecoded = pcbDecoded?.getPointer(memScope).rawValue
        val _ppXchgCert = ppXchgCert?.getPointer(memScope).rawValue
        val _ppSignerCert = ppSignerCert?.getPointer(memScope).rawValue
        val res = kni_CryptDecodeMessage(_dwMsgTypeFlags, _pDecryptPara, _pVerifyPara, _dwSignerIndex, _pbEncodedBlob, _cbEncodedBlob, _dwPrevInnerContentType, _pdwMsgType, _pdwInnerContentType, _pbDecoded, _pcbDecoded, _ppXchgCert, _ppSignerCert)
        res
    }
}

@SymbolName("win32_kni_CryptDecodeMessage")
private external fun kni_CryptDecodeMessage(dwMsgTypeFlags: Int, pDecryptPara: NativePtr, pVerifyPara: NativePtr, dwSignerIndex: Int, pbEncodedBlob: NativePtr, cbEncodedBlob: Int, dwPrevInnerContentType: Int, pdwMsgType: NativePtr, pdwInnerContentType: NativePtr, pbDecoded: NativePtr, pcbDecoded: NativePtr, ppXchgCert: NativePtr, ppSignerCert: NativePtr): Int

fun CryptHashMessage(pHashPara: PCRYPT_HASH_MESSAGE_PARA?, fDetachedHash: WINBOOL, cToBeHashed: DWORD, rgpbToBeHashed: CValuesRef<CPointerVar<BYTEVar>>?, rgcbToBeHashed: CValuesRef<DWORDVar>?, pbHashedBlob: CValuesRef<BYTEVar>?, pcbHashedBlob: CValuesRef<DWORDVar>?, pbComputedHash: CValuesRef<BYTEVar>?, pcbComputedHash: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pHashPara = pHashPara.rawValue
        val _fDetachedHash = fDetachedHash
        val _cToBeHashed = cToBeHashed
        val _rgpbToBeHashed = rgpbToBeHashed?.getPointer(memScope).rawValue
        val _rgcbToBeHashed = rgcbToBeHashed?.getPointer(memScope).rawValue
        val _pbHashedBlob = pbHashedBlob?.getPointer(memScope).rawValue
        val _pcbHashedBlob = pcbHashedBlob?.getPointer(memScope).rawValue
        val _pbComputedHash = pbComputedHash?.getPointer(memScope).rawValue
        val _pcbComputedHash = pcbComputedHash?.getPointer(memScope).rawValue
        val res = kni_CryptHashMessage(_pHashPara, _fDetachedHash, _cToBeHashed, _rgpbToBeHashed, _rgcbToBeHashed, _pbHashedBlob, _pcbHashedBlob, _pbComputedHash, _pcbComputedHash)
        res
    }
}

@SymbolName("win32_kni_CryptHashMessage")
private external fun kni_CryptHashMessage(pHashPara: NativePtr, fDetachedHash: Int, cToBeHashed: Int, rgpbToBeHashed: NativePtr, rgcbToBeHashed: NativePtr, pbHashedBlob: NativePtr, pcbHashedBlob: NativePtr, pbComputedHash: NativePtr, pcbComputedHash: NativePtr): Int

fun CryptVerifyMessageHash(pHashPara: PCRYPT_HASH_MESSAGE_PARA?, pbHashedBlob: CValuesRef<BYTEVar>?, cbHashedBlob: DWORD, pbToBeHashed: CValuesRef<BYTEVar>?, pcbToBeHashed: CValuesRef<DWORDVar>?, pbComputedHash: CValuesRef<BYTEVar>?, pcbComputedHash: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pHashPara = pHashPara.rawValue
        val _pbHashedBlob = pbHashedBlob?.getPointer(memScope).rawValue
        val _cbHashedBlob = cbHashedBlob
        val _pbToBeHashed = pbToBeHashed?.getPointer(memScope).rawValue
        val _pcbToBeHashed = pcbToBeHashed?.getPointer(memScope).rawValue
        val _pbComputedHash = pbComputedHash?.getPointer(memScope).rawValue
        val _pcbComputedHash = pcbComputedHash?.getPointer(memScope).rawValue
        val res = kni_CryptVerifyMessageHash(_pHashPara, _pbHashedBlob, _cbHashedBlob, _pbToBeHashed, _pcbToBeHashed, _pbComputedHash, _pcbComputedHash)
        res
    }
}

@SymbolName("win32_kni_CryptVerifyMessageHash")
private external fun kni_CryptVerifyMessageHash(pHashPara: NativePtr, pbHashedBlob: NativePtr, cbHashedBlob: Int, pbToBeHashed: NativePtr, pcbToBeHashed: NativePtr, pbComputedHash: NativePtr, pcbComputedHash: NativePtr): Int

fun CryptVerifyDetachedMessageHash(pHashPara: PCRYPT_HASH_MESSAGE_PARA?, pbDetachedHashBlob: CValuesRef<BYTEVar>?, cbDetachedHashBlob: DWORD, cToBeHashed: DWORD, rgpbToBeHashed: CValuesRef<CPointerVar<BYTEVar>>?, rgcbToBeHashed: CValuesRef<DWORDVar>?, pbComputedHash: CValuesRef<BYTEVar>?, pcbComputedHash: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pHashPara = pHashPara.rawValue
        val _pbDetachedHashBlob = pbDetachedHashBlob?.getPointer(memScope).rawValue
        val _cbDetachedHashBlob = cbDetachedHashBlob
        val _cToBeHashed = cToBeHashed
        val _rgpbToBeHashed = rgpbToBeHashed?.getPointer(memScope).rawValue
        val _rgcbToBeHashed = rgcbToBeHashed?.getPointer(memScope).rawValue
        val _pbComputedHash = pbComputedHash?.getPointer(memScope).rawValue
        val _pcbComputedHash = pcbComputedHash?.getPointer(memScope).rawValue
        val res = kni_CryptVerifyDetachedMessageHash(_pHashPara, _pbDetachedHashBlob, _cbDetachedHashBlob, _cToBeHashed, _rgpbToBeHashed, _rgcbToBeHashed, _pbComputedHash, _pcbComputedHash)
        res
    }
}

@SymbolName("win32_kni_CryptVerifyDetachedMessageHash")
private external fun kni_CryptVerifyDetachedMessageHash(pHashPara: NativePtr, pbDetachedHashBlob: NativePtr, cbDetachedHashBlob: Int, cToBeHashed: Int, rgpbToBeHashed: NativePtr, rgcbToBeHashed: NativePtr, pbComputedHash: NativePtr, pcbComputedHash: NativePtr): Int

fun CryptSignMessageWithKey(pSignPara: PCRYPT_KEY_SIGN_MESSAGE_PARA?, pbToBeSigned: CValuesRef<BYTEVar>?, cbToBeSigned: DWORD, pbSignedBlob: CValuesRef<BYTEVar>?, pcbSignedBlob: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pSignPara = pSignPara.rawValue
        val _pbToBeSigned = pbToBeSigned?.getPointer(memScope).rawValue
        val _cbToBeSigned = cbToBeSigned
        val _pbSignedBlob = pbSignedBlob?.getPointer(memScope).rawValue
        val _pcbSignedBlob = pcbSignedBlob?.getPointer(memScope).rawValue
        val res = kni_CryptSignMessageWithKey(_pSignPara, _pbToBeSigned, _cbToBeSigned, _pbSignedBlob, _pcbSignedBlob)
        res
    }
}

@SymbolName("win32_kni_CryptSignMessageWithKey")
private external fun kni_CryptSignMessageWithKey(pSignPara: NativePtr, pbToBeSigned: NativePtr, cbToBeSigned: Int, pbSignedBlob: NativePtr, pcbSignedBlob: NativePtr): Int

fun CryptVerifyMessageSignatureWithKey(pVerifyPara: PCRYPT_KEY_VERIFY_MESSAGE_PARA?, pPublicKeyInfo: PCERT_PUBLIC_KEY_INFO?, pbSignedBlob: CValuesRef<BYTEVar>?, cbSignedBlob: DWORD, pbDecoded: CValuesRef<BYTEVar>?, pcbDecoded: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pVerifyPara = pVerifyPara.rawValue
        val _pPublicKeyInfo = pPublicKeyInfo.rawValue
        val _pbSignedBlob = pbSignedBlob?.getPointer(memScope).rawValue
        val _cbSignedBlob = cbSignedBlob
        val _pbDecoded = pbDecoded?.getPointer(memScope).rawValue
        val _pcbDecoded = pcbDecoded?.getPointer(memScope).rawValue
        val res = kni_CryptVerifyMessageSignatureWithKey(_pVerifyPara, _pPublicKeyInfo, _pbSignedBlob, _cbSignedBlob, _pbDecoded, _pcbDecoded)
        res
    }
}

@SymbolName("win32_kni_CryptVerifyMessageSignatureWithKey")
private external fun kni_CryptVerifyMessageSignatureWithKey(pVerifyPara: NativePtr, pPublicKeyInfo: NativePtr, pbSignedBlob: NativePtr, cbSignedBlob: Int, pbDecoded: NativePtr, pcbDecoded: NativePtr): Int

fun CertOpenSystemStoreA(hProv: HCRYPTPROV_LEGACY, szSubsystemProtocol: String?): HCERTSTORE? {
    return memScoped {
        val _hProv = hProv
        val _szSubsystemProtocol = szSubsystemProtocol?.cstr?.getPointer(memScope).rawValue
        val res = kni_CertOpenSystemStoreA(_hProv, _szSubsystemProtocol)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CertOpenSystemStoreA")
private external fun kni_CertOpenSystemStoreA(hProv: Long, szSubsystemProtocol: NativePtr): NativePtr

fun CertOpenSystemStoreW(hProv: HCRYPTPROV_LEGACY, szSubsystemProtocol: String?): HCERTSTORE? {
    return memScoped {
        val _hProv = hProv
        val _szSubsystemProtocol = szSubsystemProtocol?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CertOpenSystemStoreW(_hProv, _szSubsystemProtocol)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_CertOpenSystemStoreW")
private external fun kni_CertOpenSystemStoreW(hProv: Long, szSubsystemProtocol: NativePtr): NativePtr

fun CertAddEncodedCertificateToSystemStoreA(szCertStoreName: String?, pbCertEncoded: CValuesRef<BYTEVar>?, cbCertEncoded: DWORD): WINBOOL {
    return memScoped {
        val _szCertStoreName = szCertStoreName?.cstr?.getPointer(memScope).rawValue
        val _pbCertEncoded = pbCertEncoded?.getPointer(memScope).rawValue
        val _cbCertEncoded = cbCertEncoded
        val res = kni_CertAddEncodedCertificateToSystemStoreA(_szCertStoreName, _pbCertEncoded, _cbCertEncoded)
        res
    }
}

@SymbolName("win32_kni_CertAddEncodedCertificateToSystemStoreA")
private external fun kni_CertAddEncodedCertificateToSystemStoreA(szCertStoreName: NativePtr, pbCertEncoded: NativePtr, cbCertEncoded: Int): Int

fun CertAddEncodedCertificateToSystemStoreW(szCertStoreName: String?, pbCertEncoded: CValuesRef<BYTEVar>?, cbCertEncoded: DWORD): WINBOOL {
    return memScoped {
        val _szCertStoreName = szCertStoreName?.wcstr?.getPointer(memScope).rawValue
        val _pbCertEncoded = pbCertEncoded?.getPointer(memScope).rawValue
        val _cbCertEncoded = cbCertEncoded
        val res = kni_CertAddEncodedCertificateToSystemStoreW(_szCertStoreName, _pbCertEncoded, _cbCertEncoded)
        res
    }
}

@SymbolName("win32_kni_CertAddEncodedCertificateToSystemStoreW")
private external fun kni_CertAddEncodedCertificateToSystemStoreW(szCertStoreName: NativePtr, pbCertEncoded: NativePtr, cbCertEncoded: Int): Int

fun FindCertsByIssuer(pCertChains: PCERT_CHAIN?, pcbCertChains: CValuesRef<DWORDVar>?, pcCertChains: CValuesRef<DWORDVar>?, pbEncodedIssuerName: CValuesRef<BYTEVar>?, cbEncodedIssuerName: DWORD, pwszPurpose: String?, dwKeySpec: DWORD): HRESULT {
    return memScoped {
        val _pCertChains = pCertChains.rawValue
        val _pcbCertChains = pcbCertChains?.getPointer(memScope).rawValue
        val _pcCertChains = pcCertChains?.getPointer(memScope).rawValue
        val _pbEncodedIssuerName = pbEncodedIssuerName?.getPointer(memScope).rawValue
        val _cbEncodedIssuerName = cbEncodedIssuerName
        val _pwszPurpose = pwszPurpose?.wcstr?.getPointer(memScope).rawValue
        val _dwKeySpec = dwKeySpec
        val res = kni_FindCertsByIssuer(_pCertChains, _pcbCertChains, _pcCertChains, _pbEncodedIssuerName, _cbEncodedIssuerName, _pwszPurpose, _dwKeySpec)
        res
    }
}

@SymbolName("win32_kni_FindCertsByIssuer")
private external fun kni_FindCertsByIssuer(pCertChains: NativePtr, pcbCertChains: NativePtr, pcCertChains: NativePtr, pbEncodedIssuerName: NativePtr, cbEncodedIssuerName: Int, pwszPurpose: NativePtr, dwKeySpec: Int): Int

fun CryptQueryObject(dwObjectType: DWORD, pvObject: COpaquePointer?, dwExpectedContentTypeFlags: DWORD, dwExpectedFormatTypeFlags: DWORD, dwFlags: DWORD, pdwMsgAndCertEncodingType: CValuesRef<DWORDVar>?, pdwContentType: CValuesRef<DWORDVar>?, pdwFormatType: CValuesRef<DWORDVar>?, phCertStore: CValuesRef<HCERTSTOREVar>?, phMsg: CValuesRef<HCRYPTMSGVar>?, ppvContext: CValuesRef<COpaquePointerVar>?): WINBOOL {
    return memScoped {
        val _dwObjectType = dwObjectType
        val _pvObject = pvObject.rawValue
        val _dwExpectedContentTypeFlags = dwExpectedContentTypeFlags
        val _dwExpectedFormatTypeFlags = dwExpectedFormatTypeFlags
        val _dwFlags = dwFlags
        val _pdwMsgAndCertEncodingType = pdwMsgAndCertEncodingType?.getPointer(memScope).rawValue
        val _pdwContentType = pdwContentType?.getPointer(memScope).rawValue
        val _pdwFormatType = pdwFormatType?.getPointer(memScope).rawValue
        val _phCertStore = phCertStore?.getPointer(memScope).rawValue
        val _phMsg = phMsg?.getPointer(memScope).rawValue
        val _ppvContext = ppvContext?.getPointer(memScope).rawValue
        val res = kni_CryptQueryObject(_dwObjectType, _pvObject, _dwExpectedContentTypeFlags, _dwExpectedFormatTypeFlags, _dwFlags, _pdwMsgAndCertEncodingType, _pdwContentType, _pdwFormatType, _phCertStore, _phMsg, _ppvContext)
        res
    }
}

@SymbolName("win32_kni_CryptQueryObject")
private external fun kni_CryptQueryObject(dwObjectType: Int, pvObject: NativePtr, dwExpectedContentTypeFlags: Int, dwExpectedFormatTypeFlags: Int, dwFlags: Int, pdwMsgAndCertEncodingType: NativePtr, pdwContentType: NativePtr, pdwFormatType: NativePtr, phCertStore: NativePtr, phMsg: NativePtr, ppvContext: NativePtr): Int

fun CryptMemAlloc(cbSize: ULONG): LPVOID? {
    val _cbSize = cbSize
    val res = kni_CryptMemAlloc(_cbSize)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CryptMemAlloc")
private external fun kni_CryptMemAlloc(cbSize: Int): NativePtr

fun CryptMemRealloc(pv: LPVOID?, cbSize: ULONG): LPVOID? {
    val _pv = pv.rawValue
    val _cbSize = cbSize
    val res = kni_CryptMemRealloc(_pv, _cbSize)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_CryptMemRealloc")
private external fun kni_CryptMemRealloc(pv: NativePtr, cbSize: Int): NativePtr

fun CryptMemFree(pv: LPVOID?): Unit {
    val _pv = pv.rawValue
    val res = kni_CryptMemFree(_pv)
    return res
}

@SymbolName("win32_kni_CryptMemFree")
private external fun kni_CryptMemFree(pv: NativePtr): Unit

fun CryptCreateAsyncHandle(dwFlags: DWORD, phAsync: PHCRYPTASYNC?): WINBOOL {
    val _dwFlags = dwFlags
    val _phAsync = phAsync.rawValue
    val res = kni_CryptCreateAsyncHandle(_dwFlags, _phAsync)
    return res
}

@SymbolName("win32_kni_CryptCreateAsyncHandle")
private external fun kni_CryptCreateAsyncHandle(dwFlags: Int, phAsync: NativePtr): Int

fun CryptSetAsyncParam(hAsync: HCRYPTASYNC?, pszParamOid: LPSTR?, pvParam: LPVOID?, pfnFree: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC?): WINBOOL {
    val _hAsync = hAsync.rawValue
    val _pszParamOid = pszParamOid.rawValue
    val _pvParam = pvParam.rawValue
    val _pfnFree = pfnFree.rawValue
    val res = kni_CryptSetAsyncParam(_hAsync, _pszParamOid, _pvParam, _pfnFree)
    return res
}

@SymbolName("win32_kni_CryptSetAsyncParam")
private external fun kni_CryptSetAsyncParam(hAsync: NativePtr, pszParamOid: NativePtr, pvParam: NativePtr, pfnFree: NativePtr): Int

fun CryptGetAsyncParam(hAsync: HCRYPTASYNC?, pszParamOid: LPSTR?, ppvParam: CValuesRef<LPVOIDVar>?, ppfnFree: CValuesRef<PFN_CRYPT_ASYNC_PARAM_FREE_FUNCVar>?): WINBOOL {
    return memScoped {
        val _hAsync = hAsync.rawValue
        val _pszParamOid = pszParamOid.rawValue
        val _ppvParam = ppvParam?.getPointer(memScope).rawValue
        val _ppfnFree = ppfnFree?.getPointer(memScope).rawValue
        val res = kni_CryptGetAsyncParam(_hAsync, _pszParamOid, _ppvParam, _ppfnFree)
        res
    }
}

@SymbolName("win32_kni_CryptGetAsyncParam")
private external fun kni_CryptGetAsyncParam(hAsync: NativePtr, pszParamOid: NativePtr, ppvParam: NativePtr, ppfnFree: NativePtr): Int

fun CryptCloseAsyncHandle(hAsync: HCRYPTASYNC?): WINBOOL {
    val _hAsync = hAsync.rawValue
    val res = kni_CryptCloseAsyncHandle(_hAsync)
    return res
}

@SymbolName("win32_kni_CryptCloseAsyncHandle")
private external fun kni_CryptCloseAsyncHandle(hAsync: NativePtr): Int

fun CryptRetrieveObjectByUrlA(pszUrl: String?, pszObjectOid: String?, dwRetrievalFlags: DWORD, dwTimeout: DWORD, ppvObject: CValuesRef<LPVOIDVar>?, hAsyncRetrieve: HCRYPTASYNC?, pCredentials: PCRYPT_CREDENTIALS?, pvVerify: LPVOID?, pAuxInfo: PCRYPT_RETRIEVE_AUX_INFO?): WINBOOL {
    return memScoped {
        val _pszUrl = pszUrl?.cstr?.getPointer(memScope).rawValue
        val _pszObjectOid = pszObjectOid?.cstr?.getPointer(memScope).rawValue
        val _dwRetrievalFlags = dwRetrievalFlags
        val _dwTimeout = dwTimeout
        val _ppvObject = ppvObject?.getPointer(memScope).rawValue
        val _hAsyncRetrieve = hAsyncRetrieve.rawValue
        val _pCredentials = pCredentials.rawValue
        val _pvVerify = pvVerify.rawValue
        val _pAuxInfo = pAuxInfo.rawValue
        val res = kni_CryptRetrieveObjectByUrlA(_pszUrl, _pszObjectOid, _dwRetrievalFlags, _dwTimeout, _ppvObject, _hAsyncRetrieve, _pCredentials, _pvVerify, _pAuxInfo)
        res
    }
}

@SymbolName("win32_kni_CryptRetrieveObjectByUrlA")
private external fun kni_CryptRetrieveObjectByUrlA(pszUrl: NativePtr, pszObjectOid: NativePtr, dwRetrievalFlags: Int, dwTimeout: Int, ppvObject: NativePtr, hAsyncRetrieve: NativePtr, pCredentials: NativePtr, pvVerify: NativePtr, pAuxInfo: NativePtr): Int

fun CryptRetrieveObjectByUrlW(pszUrl: String?, pszObjectOid: String?, dwRetrievalFlags: DWORD, dwTimeout: DWORD, ppvObject: CValuesRef<LPVOIDVar>?, hAsyncRetrieve: HCRYPTASYNC?, pCredentials: PCRYPT_CREDENTIALS?, pvVerify: LPVOID?, pAuxInfo: PCRYPT_RETRIEVE_AUX_INFO?): WINBOOL {
    return memScoped {
        val _pszUrl = pszUrl?.wcstr?.getPointer(memScope).rawValue
        val _pszObjectOid = pszObjectOid?.cstr?.getPointer(memScope).rawValue
        val _dwRetrievalFlags = dwRetrievalFlags
        val _dwTimeout = dwTimeout
        val _ppvObject = ppvObject?.getPointer(memScope).rawValue
        val _hAsyncRetrieve = hAsyncRetrieve.rawValue
        val _pCredentials = pCredentials.rawValue
        val _pvVerify = pvVerify.rawValue
        val _pAuxInfo = pAuxInfo.rawValue
        val res = kni_CryptRetrieveObjectByUrlW(_pszUrl, _pszObjectOid, _dwRetrievalFlags, _dwTimeout, _ppvObject, _hAsyncRetrieve, _pCredentials, _pvVerify, _pAuxInfo)
        res
    }
}

@SymbolName("win32_kni_CryptRetrieveObjectByUrlW")
private external fun kni_CryptRetrieveObjectByUrlW(pszUrl: NativePtr, pszObjectOid: NativePtr, dwRetrievalFlags: Int, dwTimeout: Int, ppvObject: NativePtr, hAsyncRetrieve: NativePtr, pCredentials: NativePtr, pvVerify: NativePtr, pAuxInfo: NativePtr): Int

fun CryptInstallCancelRetrieval(pfnCancel: PFN_CRYPT_CANCEL_RETRIEVAL?, pvArg: COpaquePointer?, dwFlags: DWORD, pvReserved: COpaquePointer?): WINBOOL {
    val _pfnCancel = pfnCancel.rawValue
    val _pvArg = pvArg.rawValue
    val _dwFlags = dwFlags
    val _pvReserved = pvReserved.rawValue
    val res = kni_CryptInstallCancelRetrieval(_pfnCancel, _pvArg, _dwFlags, _pvReserved)
    return res
}

@SymbolName("win32_kni_CryptInstallCancelRetrieval")
private external fun kni_CryptInstallCancelRetrieval(pfnCancel: NativePtr, pvArg: NativePtr, dwFlags: Int, pvReserved: NativePtr): Int

fun CryptUninstallCancelRetrieval(dwFlags: DWORD, pvReserved: COpaquePointer?): WINBOOL {
    val _dwFlags = dwFlags
    val _pvReserved = pvReserved.rawValue
    val res = kni_CryptUninstallCancelRetrieval(_dwFlags, _pvReserved)
    return res
}

@SymbolName("win32_kni_CryptUninstallCancelRetrieval")
private external fun kni_CryptUninstallCancelRetrieval(dwFlags: Int, pvReserved: NativePtr): Int

fun CryptCancelAsyncRetrieval(hAsyncRetrieval: HCRYPTASYNC?): WINBOOL {
    val _hAsyncRetrieval = hAsyncRetrieval.rawValue
    val res = kni_CryptCancelAsyncRetrieval(_hAsyncRetrieval)
    return res
}

@SymbolName("win32_kni_CryptCancelAsyncRetrieval")
private external fun kni_CryptCancelAsyncRetrieval(hAsyncRetrieval: NativePtr): Int

fun CryptGetObjectUrl(pszUrlOid: String?, pvPara: LPVOID?, dwFlags: DWORD, pUrlArray: PCRYPT_URL_ARRAY?, pcbUrlArray: CValuesRef<DWORDVar>?, pUrlInfo: PCRYPT_URL_INFO?, pcbUrlInfo: CValuesRef<DWORDVar>?, pvReserved: LPVOID?): WINBOOL {
    return memScoped {
        val _pszUrlOid = pszUrlOid?.cstr?.getPointer(memScope).rawValue
        val _pvPara = pvPara.rawValue
        val _dwFlags = dwFlags
        val _pUrlArray = pUrlArray.rawValue
        val _pcbUrlArray = pcbUrlArray?.getPointer(memScope).rawValue
        val _pUrlInfo = pUrlInfo.rawValue
        val _pcbUrlInfo = pcbUrlInfo?.getPointer(memScope).rawValue
        val _pvReserved = pvReserved.rawValue
        val res = kni_CryptGetObjectUrl(_pszUrlOid, _pvPara, _dwFlags, _pUrlArray, _pcbUrlArray, _pUrlInfo, _pcbUrlInfo, _pvReserved)
        res
    }
}

@SymbolName("win32_kni_CryptGetObjectUrl")
private external fun kni_CryptGetObjectUrl(pszUrlOid: NativePtr, pvPara: NativePtr, dwFlags: Int, pUrlArray: NativePtr, pcbUrlArray: NativePtr, pUrlInfo: NativePtr, pcbUrlInfo: NativePtr, pvReserved: NativePtr): Int

fun CryptGetTimeValidObject(pszTimeValidOid: String?, pvPara: LPVOID?, pIssuer: PCCERT_CONTEXT?, pftValidFor: LPFILETIME?, dwFlags: DWORD, dwTimeout: DWORD, ppvObject: CValuesRef<LPVOIDVar>?, pCredentials: PCRYPT_CREDENTIALS?, pExtraInfo: PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO?): WINBOOL {
    return memScoped {
        val _pszTimeValidOid = pszTimeValidOid?.cstr?.getPointer(memScope).rawValue
        val _pvPara = pvPara.rawValue
        val _pIssuer = pIssuer.rawValue
        val _pftValidFor = pftValidFor.rawValue
        val _dwFlags = dwFlags
        val _dwTimeout = dwTimeout
        val _ppvObject = ppvObject?.getPointer(memScope).rawValue
        val _pCredentials = pCredentials.rawValue
        val _pExtraInfo = pExtraInfo.rawValue
        val res = kni_CryptGetTimeValidObject(_pszTimeValidOid, _pvPara, _pIssuer, _pftValidFor, _dwFlags, _dwTimeout, _ppvObject, _pCredentials, _pExtraInfo)
        res
    }
}

@SymbolName("win32_kni_CryptGetTimeValidObject")
private external fun kni_CryptGetTimeValidObject(pszTimeValidOid: NativePtr, pvPara: NativePtr, pIssuer: NativePtr, pftValidFor: NativePtr, dwFlags: Int, dwTimeout: Int, ppvObject: NativePtr, pCredentials: NativePtr, pExtraInfo: NativePtr): Int

fun CryptFlushTimeValidObject(pszFlushTimeValidOid: String?, pvPara: LPVOID?, pIssuer: PCCERT_CONTEXT?, dwFlags: DWORD, pvReserved: LPVOID?): WINBOOL {
    return memScoped {
        val _pszFlushTimeValidOid = pszFlushTimeValidOid?.cstr?.getPointer(memScope).rawValue
        val _pvPara = pvPara.rawValue
        val _pIssuer = pIssuer.rawValue
        val _dwFlags = dwFlags
        val _pvReserved = pvReserved.rawValue
        val res = kni_CryptFlushTimeValidObject(_pszFlushTimeValidOid, _pvPara, _pIssuer, _dwFlags, _pvReserved)
        res
    }
}

@SymbolName("win32_kni_CryptFlushTimeValidObject")
private external fun kni_CryptFlushTimeValidObject(pszFlushTimeValidOid: NativePtr, pvPara: NativePtr, pIssuer: NativePtr, dwFlags: Int, pvReserved: NativePtr): Int

fun CertCreateSelfSignCertificate(hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, pSubjectIssuerBlob: PCERT_NAME_BLOB?, dwFlags: DWORD, pKeyProvInfo: PCRYPT_KEY_PROV_INFO?, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER?, pStartTime: PSYSTEMTIME?, pEndTime: PSYSTEMTIME?, pExtensions: PCERT_EXTENSIONS?): PCCERT_CONTEXT? {
    val _hCryptProvOrNCryptKey = hCryptProvOrNCryptKey
    val _pSubjectIssuerBlob = pSubjectIssuerBlob.rawValue
    val _dwFlags = dwFlags
    val _pKeyProvInfo = pKeyProvInfo.rawValue
    val _pSignatureAlgorithm = pSignatureAlgorithm.rawValue
    val _pStartTime = pStartTime.rawValue
    val _pEndTime = pEndTime.rawValue
    val _pExtensions = pExtensions.rawValue
    val res = kni_CertCreateSelfSignCertificate(_hCryptProvOrNCryptKey, _pSubjectIssuerBlob, _dwFlags, _pKeyProvInfo, _pSignatureAlgorithm, _pStartTime, _pEndTime, _pExtensions)
    return interpretCPointer<CERT_CONTEXT>(res)
}

@SymbolName("win32_kni_CertCreateSelfSignCertificate")
private external fun kni_CertCreateSelfSignCertificate(hCryptProvOrNCryptKey: Long, pSubjectIssuerBlob: NativePtr, dwFlags: Int, pKeyProvInfo: NativePtr, pSignatureAlgorithm: NativePtr, pStartTime: NativePtr, pEndTime: NativePtr, pExtensions: NativePtr): NativePtr

fun CryptGetKeyIdentifierProperty(pKeyIdentifier: CValuesRef<CRYPT_HASH_BLOB>?, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: String?, pvReserved: COpaquePointer?, pvData: COpaquePointer?, pcbData: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pKeyIdentifier = pKeyIdentifier?.getPointer(memScope).rawValue
        val _dwPropId = dwPropId
        val _dwFlags = dwFlags
        val _pwszComputerName = pwszComputerName?.wcstr?.getPointer(memScope).rawValue
        val _pvReserved = pvReserved.rawValue
        val _pvData = pvData.rawValue
        val _pcbData = pcbData?.getPointer(memScope).rawValue
        val res = kni_CryptGetKeyIdentifierProperty(_pKeyIdentifier, _dwPropId, _dwFlags, _pwszComputerName, _pvReserved, _pvData, _pcbData)
        res
    }
}

@SymbolName("win32_kni_CryptGetKeyIdentifierProperty")
private external fun kni_CryptGetKeyIdentifierProperty(pKeyIdentifier: NativePtr, dwPropId: Int, dwFlags: Int, pwszComputerName: NativePtr, pvReserved: NativePtr, pvData: NativePtr, pcbData: NativePtr): Int

fun CryptSetKeyIdentifierProperty(pKeyIdentifier: CValuesRef<CRYPT_HASH_BLOB>?, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: String?, pvReserved: COpaquePointer?, pvData: COpaquePointer?): WINBOOL {
    return memScoped {
        val _pKeyIdentifier = pKeyIdentifier?.getPointer(memScope).rawValue
        val _dwPropId = dwPropId
        val _dwFlags = dwFlags
        val _pwszComputerName = pwszComputerName?.wcstr?.getPointer(memScope).rawValue
        val _pvReserved = pvReserved.rawValue
        val _pvData = pvData.rawValue
        val res = kni_CryptSetKeyIdentifierProperty(_pKeyIdentifier, _dwPropId, _dwFlags, _pwszComputerName, _pvReserved, _pvData)
        res
    }
}

@SymbolName("win32_kni_CryptSetKeyIdentifierProperty")
private external fun kni_CryptSetKeyIdentifierProperty(pKeyIdentifier: NativePtr, dwPropId: Int, dwFlags: Int, pwszComputerName: NativePtr, pvReserved: NativePtr, pvData: NativePtr): Int

fun CryptEnumKeyIdentifierProperties(pKeyIdentifier: CValuesRef<CRYPT_HASH_BLOB>?, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: String?, pvReserved: COpaquePointer?, pvArg: COpaquePointer?, pfnEnum: PFN_CRYPT_ENUM_KEYID_PROP?): WINBOOL {
    return memScoped {
        val _pKeyIdentifier = pKeyIdentifier?.getPointer(memScope).rawValue
        val _dwPropId = dwPropId
        val _dwFlags = dwFlags
        val _pwszComputerName = pwszComputerName?.wcstr?.getPointer(memScope).rawValue
        val _pvReserved = pvReserved.rawValue
        val _pvArg = pvArg.rawValue
        val _pfnEnum = pfnEnum.rawValue
        val res = kni_CryptEnumKeyIdentifierProperties(_pKeyIdentifier, _dwPropId, _dwFlags, _pwszComputerName, _pvReserved, _pvArg, _pfnEnum)
        res
    }
}

@SymbolName("win32_kni_CryptEnumKeyIdentifierProperties")
private external fun kni_CryptEnumKeyIdentifierProperties(pKeyIdentifier: NativePtr, dwPropId: Int, dwFlags: Int, pwszComputerName: NativePtr, pvReserved: NativePtr, pvArg: NativePtr, pfnEnum: NativePtr): Int

fun CryptCreateKeyIdentifierFromCSP(dwCertEncodingType: DWORD, pszPubKeyOID: String?, pPubKeyStruc: CValuesRef<PUBLICKEYSTRUC>?, cbPubKeyStruc: DWORD, dwFlags: DWORD, pvReserved: COpaquePointer?, pbHash: CValuesRef<BYTEVar>?, pcbHash: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _dwCertEncodingType = dwCertEncodingType
        val _pszPubKeyOID = pszPubKeyOID?.cstr?.getPointer(memScope).rawValue
        val _pPubKeyStruc = pPubKeyStruc?.getPointer(memScope).rawValue
        val _cbPubKeyStruc = cbPubKeyStruc
        val _dwFlags = dwFlags
        val _pvReserved = pvReserved.rawValue
        val _pbHash = pbHash?.getPointer(memScope).rawValue
        val _pcbHash = pcbHash?.getPointer(memScope).rawValue
        val res = kni_CryptCreateKeyIdentifierFromCSP(_dwCertEncodingType, _pszPubKeyOID, _pPubKeyStruc, _cbPubKeyStruc, _dwFlags, _pvReserved, _pbHash, _pcbHash)
        res
    }
}

@SymbolName("win32_kni_CryptCreateKeyIdentifierFromCSP")
private external fun kni_CryptCreateKeyIdentifierFromCSP(dwCertEncodingType: Int, pszPubKeyOID: NativePtr, pPubKeyStruc: NativePtr, cbPubKeyStruc: Int, dwFlags: Int, pvReserved: NativePtr, pbHash: NativePtr, pcbHash: NativePtr): Int

fun CertCreateCertificateChainEngine(pConfig: PCERT_CHAIN_ENGINE_CONFIG?, phChainEngine: CValuesRef<HCERTCHAINENGINEVar>?): WINBOOL {
    return memScoped {
        val _pConfig = pConfig.rawValue
        val _phChainEngine = phChainEngine?.getPointer(memScope).rawValue
        val res = kni_CertCreateCertificateChainEngine(_pConfig, _phChainEngine)
        res
    }
}

@SymbolName("win32_kni_CertCreateCertificateChainEngine")
private external fun kni_CertCreateCertificateChainEngine(pConfig: NativePtr, phChainEngine: NativePtr): Int

fun CertFreeCertificateChainEngine(hChainEngine: HCERTCHAINENGINE?): Unit {
    val _hChainEngine = hChainEngine.rawValue
    val res = kni_CertFreeCertificateChainEngine(_hChainEngine)
    return res
}

@SymbolName("win32_kni_CertFreeCertificateChainEngine")
private external fun kni_CertFreeCertificateChainEngine(hChainEngine: NativePtr): Unit

fun CertResyncCertificateChainEngine(hChainEngine: HCERTCHAINENGINE?): WINBOOL {
    val _hChainEngine = hChainEngine.rawValue
    val res = kni_CertResyncCertificateChainEngine(_hChainEngine)
    return res
}

@SymbolName("win32_kni_CertResyncCertificateChainEngine")
private external fun kni_CertResyncCertificateChainEngine(hChainEngine: NativePtr): Int

fun CertGetCertificateChain(hChainEngine: HCERTCHAINENGINE?, pCertContext: PCCERT_CONTEXT?, pTime: LPFILETIME?, hAdditionalStore: HCERTSTORE?, pChainPara: PCERT_CHAIN_PARA?, dwFlags: DWORD, pvReserved: LPVOID?, ppChainContext: CValuesRef<PCCERT_CHAIN_CONTEXTVar>?): WINBOOL {
    return memScoped {
        val _hChainEngine = hChainEngine.rawValue
        val _pCertContext = pCertContext.rawValue
        val _pTime = pTime.rawValue
        val _hAdditionalStore = hAdditionalStore.rawValue
        val _pChainPara = pChainPara.rawValue
        val _dwFlags = dwFlags
        val _pvReserved = pvReserved.rawValue
        val _ppChainContext = ppChainContext?.getPointer(memScope).rawValue
        val res = kni_CertGetCertificateChain(_hChainEngine, _pCertContext, _pTime, _hAdditionalStore, _pChainPara, _dwFlags, _pvReserved, _ppChainContext)
        res
    }
}

@SymbolName("win32_kni_CertGetCertificateChain")
private external fun kni_CertGetCertificateChain(hChainEngine: NativePtr, pCertContext: NativePtr, pTime: NativePtr, hAdditionalStore: NativePtr, pChainPara: NativePtr, dwFlags: Int, pvReserved: NativePtr, ppChainContext: NativePtr): Int

fun CertFreeCertificateChain(pChainContext: PCCERT_CHAIN_CONTEXT?): Unit {
    val _pChainContext = pChainContext.rawValue
    val res = kni_CertFreeCertificateChain(_pChainContext)
    return res
}

@SymbolName("win32_kni_CertFreeCertificateChain")
private external fun kni_CertFreeCertificateChain(pChainContext: NativePtr): Unit

fun CertDuplicateCertificateChain(pChainContext: PCCERT_CHAIN_CONTEXT?): PCCERT_CHAIN_CONTEXT? {
    val _pChainContext = pChainContext.rawValue
    val res = kni_CertDuplicateCertificateChain(_pChainContext)
    return interpretCPointer<CERT_CHAIN_CONTEXT>(res)
}

@SymbolName("win32_kni_CertDuplicateCertificateChain")
private external fun kni_CertDuplicateCertificateChain(pChainContext: NativePtr): NativePtr

fun CertFindChainInStore(hCertStore: HCERTSTORE?, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: COpaquePointer?, pPrevChainContext: PCCERT_CHAIN_CONTEXT?): PCCERT_CHAIN_CONTEXT? {
    val _hCertStore = hCertStore.rawValue
    val _dwCertEncodingType = dwCertEncodingType
    val _dwFindFlags = dwFindFlags
    val _dwFindType = dwFindType
    val _pvFindPara = pvFindPara.rawValue
    val _pPrevChainContext = pPrevChainContext.rawValue
    val res = kni_CertFindChainInStore(_hCertStore, _dwCertEncodingType, _dwFindFlags, _dwFindType, _pvFindPara, _pPrevChainContext)
    return interpretCPointer<CERT_CHAIN_CONTEXT>(res)
}

@SymbolName("win32_kni_CertFindChainInStore")
private external fun kni_CertFindChainInStore(hCertStore: NativePtr, dwCertEncodingType: Int, dwFindFlags: Int, dwFindType: Int, pvFindPara: NativePtr, pPrevChainContext: NativePtr): NativePtr

fun CertVerifyCertificateChainPolicy(pszPolicyOID: String?, pChainContext: PCCERT_CHAIN_CONTEXT?, pPolicyPara: PCERT_CHAIN_POLICY_PARA?, pPolicyStatus: PCERT_CHAIN_POLICY_STATUS?): WINBOOL {
    return memScoped {
        val _pszPolicyOID = pszPolicyOID?.cstr?.getPointer(memScope).rawValue
        val _pChainContext = pChainContext.rawValue
        val _pPolicyPara = pPolicyPara.rawValue
        val _pPolicyStatus = pPolicyStatus.rawValue
        val res = kni_CertVerifyCertificateChainPolicy(_pszPolicyOID, _pChainContext, _pPolicyPara, _pPolicyStatus)
        res
    }
}

@SymbolName("win32_kni_CertVerifyCertificateChainPolicy")
private external fun kni_CertVerifyCertificateChainPolicy(pszPolicyOID: NativePtr, pChainContext: NativePtr, pPolicyPara: NativePtr, pPolicyStatus: NativePtr): Int

fun CryptStringToBinaryA(pszString: String?, cchString: DWORD, dwFlags: DWORD, pbBinary: CValuesRef<BYTEVar>?, pcbBinary: CValuesRef<DWORDVar>?, pdwSkip: CValuesRef<DWORDVar>?, pdwFlags: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pszString = pszString?.cstr?.getPointer(memScope).rawValue
        val _cchString = cchString
        val _dwFlags = dwFlags
        val _pbBinary = pbBinary?.getPointer(memScope).rawValue
        val _pcbBinary = pcbBinary?.getPointer(memScope).rawValue
        val _pdwSkip = pdwSkip?.getPointer(memScope).rawValue
        val _pdwFlags = pdwFlags?.getPointer(memScope).rawValue
        val res = kni_CryptStringToBinaryA(_pszString, _cchString, _dwFlags, _pbBinary, _pcbBinary, _pdwSkip, _pdwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptStringToBinaryA")
private external fun kni_CryptStringToBinaryA(pszString: NativePtr, cchString: Int, dwFlags: Int, pbBinary: NativePtr, pcbBinary: NativePtr, pdwSkip: NativePtr, pdwFlags: NativePtr): Int

fun CryptStringToBinaryW(pszString: String?, cchString: DWORD, dwFlags: DWORD, pbBinary: CValuesRef<BYTEVar>?, pcbBinary: CValuesRef<DWORDVar>?, pdwSkip: CValuesRef<DWORDVar>?, pdwFlags: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pszString = pszString?.wcstr?.getPointer(memScope).rawValue
        val _cchString = cchString
        val _dwFlags = dwFlags
        val _pbBinary = pbBinary?.getPointer(memScope).rawValue
        val _pcbBinary = pcbBinary?.getPointer(memScope).rawValue
        val _pdwSkip = pdwSkip?.getPointer(memScope).rawValue
        val _pdwFlags = pdwFlags?.getPointer(memScope).rawValue
        val res = kni_CryptStringToBinaryW(_pszString, _cchString, _dwFlags, _pbBinary, _pcbBinary, _pdwSkip, _pdwFlags)
        res
    }
}

@SymbolName("win32_kni_CryptStringToBinaryW")
private external fun kni_CryptStringToBinaryW(pszString: NativePtr, cchString: Int, dwFlags: Int, pbBinary: NativePtr, pcbBinary: NativePtr, pdwSkip: NativePtr, pdwFlags: NativePtr): Int

fun CryptBinaryToStringA(pbBinary: CValuesRef<BYTEVar>?, cbBinary: DWORD, dwFlags: DWORD, pszString: LPSTR?, pcchString: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pbBinary = pbBinary?.getPointer(memScope).rawValue
        val _cbBinary = cbBinary
        val _dwFlags = dwFlags
        val _pszString = pszString.rawValue
        val _pcchString = pcchString?.getPointer(memScope).rawValue
        val res = kni_CryptBinaryToStringA(_pbBinary, _cbBinary, _dwFlags, _pszString, _pcchString)
        res
    }
}

@SymbolName("win32_kni_CryptBinaryToStringA")
private external fun kni_CryptBinaryToStringA(pbBinary: NativePtr, cbBinary: Int, dwFlags: Int, pszString: NativePtr, pcchString: NativePtr): Int

fun CryptBinaryToStringW(pbBinary: CValuesRef<BYTEVar>?, cbBinary: DWORD, dwFlags: DWORD, pszString: LPWSTR?, pcchString: CValuesRef<DWORDVar>?): WINBOOL {
    return memScoped {
        val _pbBinary = pbBinary?.getPointer(memScope).rawValue
        val _cbBinary = cbBinary
        val _dwFlags = dwFlags
        val _pszString = pszString.rawValue
        val _pcchString = pcchString?.getPointer(memScope).rawValue
        val res = kni_CryptBinaryToStringW(_pbBinary, _cbBinary, _dwFlags, _pszString, _pcchString)
        res
    }
}

@SymbolName("win32_kni_CryptBinaryToStringW")
private external fun kni_CryptBinaryToStringW(pbBinary: NativePtr, cbBinary: Int, dwFlags: Int, pszString: NativePtr, pcchString: NativePtr): Int

fun PFXImportCertStore(pPFX: CValuesRef<CRYPT_DATA_BLOB>?, szPassword: String?, dwFlags: DWORD): HCERTSTORE? {
    return memScoped {
        val _pPFX = pPFX?.getPointer(memScope).rawValue
        val _szPassword = szPassword?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_PFXImportCertStore(_pPFX, _szPassword, _dwFlags)
        interpretCPointer<COpaque>(res)
    }
}

@SymbolName("win32_kni_PFXImportCertStore")
private external fun kni_PFXImportCertStore(pPFX: NativePtr, szPassword: NativePtr, dwFlags: Int): NativePtr

fun PFXIsPFXBlob(pPFX: CValuesRef<CRYPT_DATA_BLOB>?): WINBOOL {
    return memScoped {
        val _pPFX = pPFX?.getPointer(memScope).rawValue
        val res = kni_PFXIsPFXBlob(_pPFX)
        res
    }
}

@SymbolName("win32_kni_PFXIsPFXBlob")
private external fun kni_PFXIsPFXBlob(pPFX: NativePtr): Int

fun PFXVerifyPassword(pPFX: CValuesRef<CRYPT_DATA_BLOB>?, szPassword: String?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _pPFX = pPFX?.getPointer(memScope).rawValue
        val _szPassword = szPassword?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_PFXVerifyPassword(_pPFX, _szPassword, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_PFXVerifyPassword")
private external fun kni_PFXVerifyPassword(pPFX: NativePtr, szPassword: NativePtr, dwFlags: Int): Int

fun PFXExportCertStoreEx(hStore: HCERTSTORE?, pPFX: CValuesRef<CRYPT_DATA_BLOB>?, szPassword: String?, pvPara: COpaquePointer?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hStore = hStore.rawValue
        val _pPFX = pPFX?.getPointer(memScope).rawValue
        val _szPassword = szPassword?.wcstr?.getPointer(memScope).rawValue
        val _pvPara = pvPara.rawValue
        val _dwFlags = dwFlags
        val res = kni_PFXExportCertStoreEx(_hStore, _pPFX, _szPassword, _pvPara, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_PFXExportCertStoreEx")
private external fun kni_PFXExportCertStoreEx(hStore: NativePtr, pPFX: NativePtr, szPassword: NativePtr, pvPara: NativePtr, dwFlags: Int): Int

fun PFXExportCertStore(hStore: HCERTSTORE?, pPFX: CValuesRef<CRYPT_DATA_BLOB>?, szPassword: String?, dwFlags: DWORD): WINBOOL {
    return memScoped {
        val _hStore = hStore.rawValue
        val _pPFX = pPFX?.getPointer(memScope).rawValue
        val _szPassword = szPassword?.wcstr?.getPointer(memScope).rawValue
        val _dwFlags = dwFlags
        val res = kni_PFXExportCertStore(_hStore, _pPFX, _szPassword, _dwFlags)
        res
    }
}

@SymbolName("win32_kni_PFXExportCertStore")
private external fun kni_PFXExportCertStore(hStore: NativePtr, pPFX: NativePtr, szPassword: NativePtr, dwFlags: Int): Int

fun CertRetrieveLogoOrBiometricInfo(pCertContext: PCCERT_CONTEXT?, lpszLogoOrBiometricType: String?, dwRetrievalFlags: DWORD, dwTimeout: DWORD, dwFlags: DWORD, pvReserved: COpaquePointer?, ppbData: CValuesRef<CPointerVar<BYTEVar>>?, pcbData: CValuesRef<DWORDVar>?, ppwszMimeType: CValuesRef<LPWSTRVar>?): WINBOOL {
    return memScoped {
        val _pCertContext = pCertContext.rawValue
        val _lpszLogoOrBiometricType = lpszLogoOrBiometricType?.cstr?.getPointer(memScope).rawValue
        val _dwRetrievalFlags = dwRetrievalFlags
        val _dwTimeout = dwTimeout
        val _dwFlags = dwFlags
        val _pvReserved = pvReserved.rawValue
        val _ppbData = ppbData?.getPointer(memScope).rawValue
        val _pcbData = pcbData?.getPointer(memScope).rawValue
        val _ppwszMimeType = ppwszMimeType?.getPointer(memScope).rawValue
        val res = kni_CertRetrieveLogoOrBiometricInfo(_pCertContext, _lpszLogoOrBiometricType, _dwRetrievalFlags, _dwTimeout, _dwFlags, _pvReserved, _ppbData, _pcbData, _ppwszMimeType)
        res
    }
}

@SymbolName("win32_kni_CertRetrieveLogoOrBiometricInfo")
private external fun kni_CertRetrieveLogoOrBiometricInfo(pCertContext: NativePtr, lpszLogoOrBiometricType: NativePtr, dwRetrievalFlags: Int, dwTimeout: Int, dwFlags: Int, pvReserved: NativePtr, ppbData: NativePtr, pcbData: NativePtr, ppwszMimeType: NativePtr): Int

fun QueryUsersOnEncryptedFile(lpFileName: String?, pUsers: CValuesRef<PENCRYPTION_CERTIFICATE_HASH_LISTVar>?): DWORD {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val _pUsers = pUsers?.getPointer(memScope).rawValue
        val res = kni_QueryUsersOnEncryptedFile(_lpFileName, _pUsers)
        res
    }
}

@SymbolName("win32_kni_QueryUsersOnEncryptedFile")
private external fun kni_QueryUsersOnEncryptedFile(lpFileName: NativePtr, pUsers: NativePtr): Int

fun QueryRecoveryAgentsOnEncryptedFile(lpFileName: String?, pRecoveryAgents: CValuesRef<PENCRYPTION_CERTIFICATE_HASH_LISTVar>?): DWORD {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val _pRecoveryAgents = pRecoveryAgents?.getPointer(memScope).rawValue
        val res = kni_QueryRecoveryAgentsOnEncryptedFile(_lpFileName, _pRecoveryAgents)
        res
    }
}

@SymbolName("win32_kni_QueryRecoveryAgentsOnEncryptedFile")
private external fun kni_QueryRecoveryAgentsOnEncryptedFile(lpFileName: NativePtr, pRecoveryAgents: NativePtr): Int

fun RemoveUsersFromEncryptedFile(lpFileName: String?, pHashes: PENCRYPTION_CERTIFICATE_HASH_LIST?): DWORD {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val _pHashes = pHashes.rawValue
        val res = kni_RemoveUsersFromEncryptedFile(_lpFileName, _pHashes)
        res
    }
}

@SymbolName("win32_kni_RemoveUsersFromEncryptedFile")
private external fun kni_RemoveUsersFromEncryptedFile(lpFileName: NativePtr, pHashes: NativePtr): Int

fun AddUsersToEncryptedFile(lpFileName: String?, pUsers: PENCRYPTION_CERTIFICATE_LIST?): DWORD {
    return memScoped {
        val _lpFileName = lpFileName?.wcstr?.getPointer(memScope).rawValue
        val _pUsers = pUsers.rawValue
        val res = kni_AddUsersToEncryptedFile(_lpFileName, _pUsers)
        res
    }
}

@SymbolName("win32_kni_AddUsersToEncryptedFile")
private external fun kni_AddUsersToEncryptedFile(lpFileName: NativePtr, pUsers: NativePtr): Int

fun SetUserFileEncryptionKey(pEncryptionCertificate: PENCRYPTION_CERTIFICATE?): DWORD {
    val _pEncryptionCertificate = pEncryptionCertificate.rawValue
    val res = kni_SetUserFileEncryptionKey(_pEncryptionCertificate)
    return res
}

@SymbolName("win32_kni_SetUserFileEncryptionKey")
private external fun kni_SetUserFileEncryptionKey(pEncryptionCertificate: NativePtr): Int

fun FreeEncryptionCertificateHashList(pHashes: PENCRYPTION_CERTIFICATE_HASH_LIST?): Unit {
    val _pHashes = pHashes.rawValue
    val res = kni_FreeEncryptionCertificateHashList(_pHashes)
    return res
}

@SymbolName("win32_kni_FreeEncryptionCertificateHashList")
private external fun kni_FreeEncryptionCertificateHashList(pHashes: NativePtr): Unit

fun EncryptionDisable(DirPath: String?, Disable: WINBOOL): WINBOOL {
    return memScoped {
        val _DirPath = DirPath?.wcstr?.getPointer(memScope).rawValue
        val _Disable = Disable
        val res = kni_EncryptionDisable(_DirPath, _Disable)
        res
    }
}

@SymbolName("win32_kni_EncryptionDisable")
private external fun kni_EncryptionDisable(DirPath: NativePtr, Disable: Int): Int

fun DuplicateEncryptionInfoFile(SrcFileName: String?, DstFileName: String?, dwCreationDistribution: DWORD, dwAttributes: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES?): DWORD {
    return memScoped {
        val _SrcFileName = SrcFileName?.wcstr?.getPointer(memScope).rawValue
        val _DstFileName = DstFileName?.wcstr?.getPointer(memScope).rawValue
        val _dwCreationDistribution = dwCreationDistribution
        val _dwAttributes = dwAttributes
        val _lpSecurityAttributes = lpSecurityAttributes.rawValue
        val res = kni_DuplicateEncryptionInfoFile(_SrcFileName, _DstFileName, _dwCreationDistribution, _dwAttributes, _lpSecurityAttributes)
        res
    }
}

@SymbolName("win32_kni_DuplicateEncryptionInfoFile")
private external fun kni_DuplicateEncryptionInfoFile(SrcFileName: NativePtr, DstFileName: NativePtr, dwCreationDistribution: Int, dwAttributes: Int, lpSecurityAttributes: NativePtr): Int

fun SCardEstablishContext(dwScope: DWORD, pvReserved1: LPCVOID?, pvReserved2: LPCVOID?, phContext: LPSCARDCONTEXT?): LONG {
    val _dwScope = dwScope
    val _pvReserved1 = pvReserved1.rawValue
    val _pvReserved2 = pvReserved2.rawValue
    val _phContext = phContext.rawValue
    val res = kni_SCardEstablishContext(_dwScope, _pvReserved1, _pvReserved2, _phContext)
    return res
}

@SymbolName("win32_kni_SCardEstablishContext")
private external fun kni_SCardEstablishContext(dwScope: Int, pvReserved1: NativePtr, pvReserved2: NativePtr, phContext: NativePtr): Int

fun SCardReleaseContext(hContext: SCARDCONTEXT): LONG {
    val _hContext = hContext
    val res = kni_SCardReleaseContext(_hContext)
    return res
}

@SymbolName("win32_kni_SCardReleaseContext")
private external fun kni_SCardReleaseContext(hContext: Long): Int

fun SCardIsValidContext(hContext: SCARDCONTEXT): LONG {
    val _hContext = hContext
    val res = kni_SCardIsValidContext(_hContext)
    return res
}

@SymbolName("win32_kni_SCardIsValidContext")
private external fun kni_SCardIsValidContext(hContext: Long): Int

fun SCardListReaderGroupsA(hContext: SCARDCONTEXT, mszGroups: LPSTR?, pcchGroups: LPDWORD?): LONG {
    val _hContext = hContext
    val _mszGroups = mszGroups.rawValue
    val _pcchGroups = pcchGroups.rawValue
    val res = kni_SCardListReaderGroupsA(_hContext, _mszGroups, _pcchGroups)
    return res
}

@SymbolName("win32_kni_SCardListReaderGroupsA")
private external fun kni_SCardListReaderGroupsA(hContext: Long, mszGroups: NativePtr, pcchGroups: NativePtr): Int

fun SCardListReaderGroupsW(hContext: SCARDCONTEXT, mszGroups: LPWSTR?, pcchGroups: LPDWORD?): LONG {
    val _hContext = hContext
    val _mszGroups = mszGroups.rawValue
    val _pcchGroups = pcchGroups.rawValue
    val res = kni_SCardListReaderGroupsW(_hContext, _mszGroups, _pcchGroups)
    return res
}

@SymbolName("win32_kni_SCardListReaderGroupsW")
private external fun kni_SCardListReaderGroupsW(hContext: Long, mszGroups: NativePtr, pcchGroups: NativePtr): Int

fun SCardListReadersA(hContext: SCARDCONTEXT, mszGroups: String?, mszReaders: LPSTR?, pcchReaders: LPDWORD?): LONG {
    return memScoped {
        val _hContext = hContext
        val _mszGroups = mszGroups?.cstr?.getPointer(memScope).rawValue
        val _mszReaders = mszReaders.rawValue
        val _pcchReaders = pcchReaders.rawValue
        val res = kni_SCardListReadersA(_hContext, _mszGroups, _mszReaders, _pcchReaders)
        res
    }
}

@SymbolName("win32_kni_SCardListReadersA")
private external fun kni_SCardListReadersA(hContext: Long, mszGroups: NativePtr, mszReaders: NativePtr, pcchReaders: NativePtr): Int

fun SCardListReadersW(hContext: SCARDCONTEXT, mszGroups: String?, mszReaders: LPWSTR?, pcchReaders: LPDWORD?): LONG {
    return memScoped {
        val _hContext = hContext
        val _mszGroups = mszGroups?.wcstr?.getPointer(memScope).rawValue
        val _mszReaders = mszReaders.rawValue
        val _pcchReaders = pcchReaders.rawValue
        val res = kni_SCardListReadersW(_hContext, _mszGroups, _mszReaders, _pcchReaders)
        res
    }
}

@SymbolName("win32_kni_SCardListReadersW")
private external fun kni_SCardListReadersW(hContext: Long, mszGroups: NativePtr, mszReaders: NativePtr, pcchReaders: NativePtr): Int

fun SCardListCardsA(hContext: SCARDCONTEXT, pbAtr: LPCBYTE?, rgquidInterfaces: LPCGUID?, cguidInterfaceCount: DWORD, mszCards: LPSTR?, pcchCards: LPDWORD?): LONG {
    val _hContext = hContext
    val _pbAtr = pbAtr.rawValue
    val _rgquidInterfaces = rgquidInterfaces.rawValue
    val _cguidInterfaceCount = cguidInterfaceCount
    val _mszCards = mszCards.rawValue
    val _pcchCards = pcchCards.rawValue
    val res = kni_SCardListCardsA(_hContext, _pbAtr, _rgquidInterfaces, _cguidInterfaceCount, _mszCards, _pcchCards)
    return res
}

@SymbolName("win32_kni_SCardListCardsA")
private external fun kni_SCardListCardsA(hContext: Long, pbAtr: NativePtr, rgquidInterfaces: NativePtr, cguidInterfaceCount: Int, mszCards: NativePtr, pcchCards: NativePtr): Int

fun SCardListCardsW(hContext: SCARDCONTEXT, pbAtr: LPCBYTE?, rgquidInterfaces: LPCGUID?, cguidInterfaceCount: DWORD, mszCards: LPWSTR?, pcchCards: LPDWORD?): LONG {
    val _hContext = hContext
    val _pbAtr = pbAtr.rawValue
    val _rgquidInterfaces = rgquidInterfaces.rawValue
    val _cguidInterfaceCount = cguidInterfaceCount
    val _mszCards = mszCards.rawValue
    val _pcchCards = pcchCards.rawValue
    val res = kni_SCardListCardsW(_hContext, _pbAtr, _rgquidInterfaces, _cguidInterfaceCount, _mszCards, _pcchCards)
    return res
}

@SymbolName("win32_kni_SCardListCardsW")
private external fun kni_SCardListCardsW(hContext: Long, pbAtr: NativePtr, rgquidInterfaces: NativePtr, cguidInterfaceCount: Int, mszCards: NativePtr, pcchCards: NativePtr): Int

fun SCardListInterfacesA(hContext: SCARDCONTEXT, szCard: String?, pguidInterfaces: LPGUID?, pcguidInterfaces: LPDWORD?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCard = szCard?.cstr?.getPointer(memScope).rawValue
        val _pguidInterfaces = pguidInterfaces.rawValue
        val _pcguidInterfaces = pcguidInterfaces.rawValue
        val res = kni_SCardListInterfacesA(_hContext, _szCard, _pguidInterfaces, _pcguidInterfaces)
        res
    }
}

@SymbolName("win32_kni_SCardListInterfacesA")
private external fun kni_SCardListInterfacesA(hContext: Long, szCard: NativePtr, pguidInterfaces: NativePtr, pcguidInterfaces: NativePtr): Int

fun SCardListInterfacesW(hContext: SCARDCONTEXT, szCard: String?, pguidInterfaces: LPGUID?, pcguidInterfaces: LPDWORD?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCard = szCard?.wcstr?.getPointer(memScope).rawValue
        val _pguidInterfaces = pguidInterfaces.rawValue
        val _pcguidInterfaces = pcguidInterfaces.rawValue
        val res = kni_SCardListInterfacesW(_hContext, _szCard, _pguidInterfaces, _pcguidInterfaces)
        res
    }
}

@SymbolName("win32_kni_SCardListInterfacesW")
private external fun kni_SCardListInterfacesW(hContext: Long, szCard: NativePtr, pguidInterfaces: NativePtr, pcguidInterfaces: NativePtr): Int

fun SCardGetProviderIdA(hContext: SCARDCONTEXT, szCard: String?, pguidProviderId: LPGUID?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCard = szCard?.cstr?.getPointer(memScope).rawValue
        val _pguidProviderId = pguidProviderId.rawValue
        val res = kni_SCardGetProviderIdA(_hContext, _szCard, _pguidProviderId)
        res
    }
}

@SymbolName("win32_kni_SCardGetProviderIdA")
private external fun kni_SCardGetProviderIdA(hContext: Long, szCard: NativePtr, pguidProviderId: NativePtr): Int

fun SCardGetProviderIdW(hContext: SCARDCONTEXT, szCard: String?, pguidProviderId: LPGUID?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCard = szCard?.wcstr?.getPointer(memScope).rawValue
        val _pguidProviderId = pguidProviderId.rawValue
        val res = kni_SCardGetProviderIdW(_hContext, _szCard, _pguidProviderId)
        res
    }
}

@SymbolName("win32_kni_SCardGetProviderIdW")
private external fun kni_SCardGetProviderIdW(hContext: Long, szCard: NativePtr, pguidProviderId: NativePtr): Int

fun SCardGetCardTypeProviderNameA(hContext: SCARDCONTEXT, szCardName: String?, dwProviderId: DWORD, szProvider: LPSTR?, pcchProvider: LPDWORD?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCardName = szCardName?.cstr?.getPointer(memScope).rawValue
        val _dwProviderId = dwProviderId
        val _szProvider = szProvider.rawValue
        val _pcchProvider = pcchProvider.rawValue
        val res = kni_SCardGetCardTypeProviderNameA(_hContext, _szCardName, _dwProviderId, _szProvider, _pcchProvider)
        res
    }
}

@SymbolName("win32_kni_SCardGetCardTypeProviderNameA")
private external fun kni_SCardGetCardTypeProviderNameA(hContext: Long, szCardName: NativePtr, dwProviderId: Int, szProvider: NativePtr, pcchProvider: NativePtr): Int

fun SCardGetCardTypeProviderNameW(hContext: SCARDCONTEXT, szCardName: String?, dwProviderId: DWORD, szProvider: LPWSTR?, pcchProvider: LPDWORD?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCardName = szCardName?.wcstr?.getPointer(memScope).rawValue
        val _dwProviderId = dwProviderId
        val _szProvider = szProvider.rawValue
        val _pcchProvider = pcchProvider.rawValue
        val res = kni_SCardGetCardTypeProviderNameW(_hContext, _szCardName, _dwProviderId, _szProvider, _pcchProvider)
        res
    }
}

@SymbolName("win32_kni_SCardGetCardTypeProviderNameW")
private external fun kni_SCardGetCardTypeProviderNameW(hContext: Long, szCardName: NativePtr, dwProviderId: Int, szProvider: NativePtr, pcchProvider: NativePtr): Int

fun SCardIntroduceReaderGroupA(hContext: SCARDCONTEXT, szGroupName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szGroupName = szGroupName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SCardIntroduceReaderGroupA(_hContext, _szGroupName)
        res
    }
}

@SymbolName("win32_kni_SCardIntroduceReaderGroupA")
private external fun kni_SCardIntroduceReaderGroupA(hContext: Long, szGroupName: NativePtr): Int

fun SCardIntroduceReaderGroupW(hContext: SCARDCONTEXT, szGroupName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szGroupName = szGroupName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SCardIntroduceReaderGroupW(_hContext, _szGroupName)
        res
    }
}

@SymbolName("win32_kni_SCardIntroduceReaderGroupW")
private external fun kni_SCardIntroduceReaderGroupW(hContext: Long, szGroupName: NativePtr): Int

fun SCardForgetReaderGroupA(hContext: SCARDCONTEXT, szGroupName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szGroupName = szGroupName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SCardForgetReaderGroupA(_hContext, _szGroupName)
        res
    }
}

@SymbolName("win32_kni_SCardForgetReaderGroupA")
private external fun kni_SCardForgetReaderGroupA(hContext: Long, szGroupName: NativePtr): Int

fun SCardForgetReaderGroupW(hContext: SCARDCONTEXT, szGroupName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szGroupName = szGroupName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SCardForgetReaderGroupW(_hContext, _szGroupName)
        res
    }
}

@SymbolName("win32_kni_SCardForgetReaderGroupW")
private external fun kni_SCardForgetReaderGroupW(hContext: Long, szGroupName: NativePtr): Int

fun SCardIntroduceReaderA(hContext: SCARDCONTEXT, szReaderName: String?, szDeviceName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szReaderName = szReaderName?.cstr?.getPointer(memScope).rawValue
        val _szDeviceName = szDeviceName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SCardIntroduceReaderA(_hContext, _szReaderName, _szDeviceName)
        res
    }
}

@SymbolName("win32_kni_SCardIntroduceReaderA")
private external fun kni_SCardIntroduceReaderA(hContext: Long, szReaderName: NativePtr, szDeviceName: NativePtr): Int

fun SCardIntroduceReaderW(hContext: SCARDCONTEXT, szReaderName: String?, szDeviceName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szReaderName = szReaderName?.wcstr?.getPointer(memScope).rawValue
        val _szDeviceName = szDeviceName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SCardIntroduceReaderW(_hContext, _szReaderName, _szDeviceName)
        res
    }
}

@SymbolName("win32_kni_SCardIntroduceReaderW")
private external fun kni_SCardIntroduceReaderW(hContext: Long, szReaderName: NativePtr, szDeviceName: NativePtr): Int

fun SCardForgetReaderA(hContext: SCARDCONTEXT, szReaderName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szReaderName = szReaderName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SCardForgetReaderA(_hContext, _szReaderName)
        res
    }
}

@SymbolName("win32_kni_SCardForgetReaderA")
private external fun kni_SCardForgetReaderA(hContext: Long, szReaderName: NativePtr): Int

fun SCardForgetReaderW(hContext: SCARDCONTEXT, szReaderName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szReaderName = szReaderName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SCardForgetReaderW(_hContext, _szReaderName)
        res
    }
}

@SymbolName("win32_kni_SCardForgetReaderW")
private external fun kni_SCardForgetReaderW(hContext: Long, szReaderName: NativePtr): Int

fun SCardAddReaderToGroupA(hContext: SCARDCONTEXT, szReaderName: String?, szGroupName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szReaderName = szReaderName?.cstr?.getPointer(memScope).rawValue
        val _szGroupName = szGroupName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SCardAddReaderToGroupA(_hContext, _szReaderName, _szGroupName)
        res
    }
}

@SymbolName("win32_kni_SCardAddReaderToGroupA")
private external fun kni_SCardAddReaderToGroupA(hContext: Long, szReaderName: NativePtr, szGroupName: NativePtr): Int

fun SCardAddReaderToGroupW(hContext: SCARDCONTEXT, szReaderName: String?, szGroupName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szReaderName = szReaderName?.wcstr?.getPointer(memScope).rawValue
        val _szGroupName = szGroupName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SCardAddReaderToGroupW(_hContext, _szReaderName, _szGroupName)
        res
    }
}

@SymbolName("win32_kni_SCardAddReaderToGroupW")
private external fun kni_SCardAddReaderToGroupW(hContext: Long, szReaderName: NativePtr, szGroupName: NativePtr): Int

fun SCardRemoveReaderFromGroupA(hContext: SCARDCONTEXT, szReaderName: String?, szGroupName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szReaderName = szReaderName?.cstr?.getPointer(memScope).rawValue
        val _szGroupName = szGroupName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SCardRemoveReaderFromGroupA(_hContext, _szReaderName, _szGroupName)
        res
    }
}

@SymbolName("win32_kni_SCardRemoveReaderFromGroupA")
private external fun kni_SCardRemoveReaderFromGroupA(hContext: Long, szReaderName: NativePtr, szGroupName: NativePtr): Int

fun SCardRemoveReaderFromGroupW(hContext: SCARDCONTEXT, szReaderName: String?, szGroupName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szReaderName = szReaderName?.wcstr?.getPointer(memScope).rawValue
        val _szGroupName = szGroupName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SCardRemoveReaderFromGroupW(_hContext, _szReaderName, _szGroupName)
        res
    }
}

@SymbolName("win32_kni_SCardRemoveReaderFromGroupW")
private external fun kni_SCardRemoveReaderFromGroupW(hContext: Long, szReaderName: NativePtr, szGroupName: NativePtr): Int

fun SCardIntroduceCardTypeA(hContext: SCARDCONTEXT, szCardName: String?, pguidPrimaryProvider: LPCGUID?, rgguidInterfaces: LPCGUID?, dwInterfaceCount: DWORD, pbAtr: LPCBYTE?, pbAtrMask: LPCBYTE?, cbAtrLen: DWORD): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCardName = szCardName?.cstr?.getPointer(memScope).rawValue
        val _pguidPrimaryProvider = pguidPrimaryProvider.rawValue
        val _rgguidInterfaces = rgguidInterfaces.rawValue
        val _dwInterfaceCount = dwInterfaceCount
        val _pbAtr = pbAtr.rawValue
        val _pbAtrMask = pbAtrMask.rawValue
        val _cbAtrLen = cbAtrLen
        val res = kni_SCardIntroduceCardTypeA(_hContext, _szCardName, _pguidPrimaryProvider, _rgguidInterfaces, _dwInterfaceCount, _pbAtr, _pbAtrMask, _cbAtrLen)
        res
    }
}

@SymbolName("win32_kni_SCardIntroduceCardTypeA")
private external fun kni_SCardIntroduceCardTypeA(hContext: Long, szCardName: NativePtr, pguidPrimaryProvider: NativePtr, rgguidInterfaces: NativePtr, dwInterfaceCount: Int, pbAtr: NativePtr, pbAtrMask: NativePtr, cbAtrLen: Int): Int

fun SCardIntroduceCardTypeW(hContext: SCARDCONTEXT, szCardName: String?, pguidPrimaryProvider: LPCGUID?, rgguidInterfaces: LPCGUID?, dwInterfaceCount: DWORD, pbAtr: LPCBYTE?, pbAtrMask: LPCBYTE?, cbAtrLen: DWORD): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCardName = szCardName?.wcstr?.getPointer(memScope).rawValue
        val _pguidPrimaryProvider = pguidPrimaryProvider.rawValue
        val _rgguidInterfaces = rgguidInterfaces.rawValue
        val _dwInterfaceCount = dwInterfaceCount
        val _pbAtr = pbAtr.rawValue
        val _pbAtrMask = pbAtrMask.rawValue
        val _cbAtrLen = cbAtrLen
        val res = kni_SCardIntroduceCardTypeW(_hContext, _szCardName, _pguidPrimaryProvider, _rgguidInterfaces, _dwInterfaceCount, _pbAtr, _pbAtrMask, _cbAtrLen)
        res
    }
}

@SymbolName("win32_kni_SCardIntroduceCardTypeW")
private external fun kni_SCardIntroduceCardTypeW(hContext: Long, szCardName: NativePtr, pguidPrimaryProvider: NativePtr, rgguidInterfaces: NativePtr, dwInterfaceCount: Int, pbAtr: NativePtr, pbAtrMask: NativePtr, cbAtrLen: Int): Int

fun SCardSetCardTypeProviderNameA(hContext: SCARDCONTEXT, szCardName: String?, dwProviderId: DWORD, szProvider: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCardName = szCardName?.cstr?.getPointer(memScope).rawValue
        val _dwProviderId = dwProviderId
        val _szProvider = szProvider?.cstr?.getPointer(memScope).rawValue
        val res = kni_SCardSetCardTypeProviderNameA(_hContext, _szCardName, _dwProviderId, _szProvider)
        res
    }
}

@SymbolName("win32_kni_SCardSetCardTypeProviderNameA")
private external fun kni_SCardSetCardTypeProviderNameA(hContext: Long, szCardName: NativePtr, dwProviderId: Int, szProvider: NativePtr): Int

fun SCardSetCardTypeProviderNameW(hContext: SCARDCONTEXT, szCardName: String?, dwProviderId: DWORD, szProvider: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCardName = szCardName?.wcstr?.getPointer(memScope).rawValue
        val _dwProviderId = dwProviderId
        val _szProvider = szProvider?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SCardSetCardTypeProviderNameW(_hContext, _szCardName, _dwProviderId, _szProvider)
        res
    }
}

@SymbolName("win32_kni_SCardSetCardTypeProviderNameW")
private external fun kni_SCardSetCardTypeProviderNameW(hContext: Long, szCardName: NativePtr, dwProviderId: Int, szProvider: NativePtr): Int

fun SCardForgetCardTypeA(hContext: SCARDCONTEXT, szCardName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCardName = szCardName?.cstr?.getPointer(memScope).rawValue
        val res = kni_SCardForgetCardTypeA(_hContext, _szCardName)
        res
    }
}

@SymbolName("win32_kni_SCardForgetCardTypeA")
private external fun kni_SCardForgetCardTypeA(hContext: Long, szCardName: NativePtr): Int

fun SCardForgetCardTypeW(hContext: SCARDCONTEXT, szCardName: String?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szCardName = szCardName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SCardForgetCardTypeW(_hContext, _szCardName)
        res
    }
}

@SymbolName("win32_kni_SCardForgetCardTypeW")
private external fun kni_SCardForgetCardTypeW(hContext: Long, szCardName: NativePtr): Int

fun SCardFreeMemory(hContext: SCARDCONTEXT, pvMem: LPCVOID?): LONG {
    val _hContext = hContext
    val _pvMem = pvMem.rawValue
    val res = kni_SCardFreeMemory(_hContext, _pvMem)
    return res
}

@SymbolName("win32_kni_SCardFreeMemory")
private external fun kni_SCardFreeMemory(hContext: Long, pvMem: NativePtr): Int

fun SCardAccessStartedEvent(): HANDLE? {
    val res = kni_SCardAccessStartedEvent()
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_SCardAccessStartedEvent")
private external fun kni_SCardAccessStartedEvent(): NativePtr

fun SCardReleaseStartedEvent(): Unit {
    val res = kni_SCardReleaseStartedEvent()
    return res
}

@SymbolName("win32_kni_SCardReleaseStartedEvent")
private external fun kni_SCardReleaseStartedEvent(): Unit

fun SCardLocateCardsA(hContext: SCARDCONTEXT, mszCards: String?, rgReaderStates: LPSCARD_READERSTATEA?, cReaders: DWORD): LONG {
    return memScoped {
        val _hContext = hContext
        val _mszCards = mszCards?.cstr?.getPointer(memScope).rawValue
        val _rgReaderStates = rgReaderStates.rawValue
        val _cReaders = cReaders
        val res = kni_SCardLocateCardsA(_hContext, _mszCards, _rgReaderStates, _cReaders)
        res
    }
}

@SymbolName("win32_kni_SCardLocateCardsA")
private external fun kni_SCardLocateCardsA(hContext: Long, mszCards: NativePtr, rgReaderStates: NativePtr, cReaders: Int): Int

fun SCardLocateCardsW(hContext: SCARDCONTEXT, mszCards: String?, rgReaderStates: LPSCARD_READERSTATEW?, cReaders: DWORD): LONG {
    return memScoped {
        val _hContext = hContext
        val _mszCards = mszCards?.wcstr?.getPointer(memScope).rawValue
        val _rgReaderStates = rgReaderStates.rawValue
        val _cReaders = cReaders
        val res = kni_SCardLocateCardsW(_hContext, _mszCards, _rgReaderStates, _cReaders)
        res
    }
}

@SymbolName("win32_kni_SCardLocateCardsW")
private external fun kni_SCardLocateCardsW(hContext: Long, mszCards: NativePtr, rgReaderStates: NativePtr, cReaders: Int): Int

fun SCardLocateCardsByATRA(hContext: SCARDCONTEXT, rgAtrMasks: LPSCARD_ATRMASK?, cAtrs: DWORD, rgReaderStates: LPSCARD_READERSTATEA?, cReaders: DWORD): LONG {
    val _hContext = hContext
    val _rgAtrMasks = rgAtrMasks.rawValue
    val _cAtrs = cAtrs
    val _rgReaderStates = rgReaderStates.rawValue
    val _cReaders = cReaders
    val res = kni_SCardLocateCardsByATRA(_hContext, _rgAtrMasks, _cAtrs, _rgReaderStates, _cReaders)
    return res
}

@SymbolName("win32_kni_SCardLocateCardsByATRA")
private external fun kni_SCardLocateCardsByATRA(hContext: Long, rgAtrMasks: NativePtr, cAtrs: Int, rgReaderStates: NativePtr, cReaders: Int): Int

fun SCardLocateCardsByATRW(hContext: SCARDCONTEXT, rgAtrMasks: LPSCARD_ATRMASK?, cAtrs: DWORD, rgReaderStates: LPSCARD_READERSTATEW?, cReaders: DWORD): LONG {
    val _hContext = hContext
    val _rgAtrMasks = rgAtrMasks.rawValue
    val _cAtrs = cAtrs
    val _rgReaderStates = rgReaderStates.rawValue
    val _cReaders = cReaders
    val res = kni_SCardLocateCardsByATRW(_hContext, _rgAtrMasks, _cAtrs, _rgReaderStates, _cReaders)
    return res
}

@SymbolName("win32_kni_SCardLocateCardsByATRW")
private external fun kni_SCardLocateCardsByATRW(hContext: Long, rgAtrMasks: NativePtr, cAtrs: Int, rgReaderStates: NativePtr, cReaders: Int): Int

fun SCardGetStatusChangeA(hContext: SCARDCONTEXT, dwTimeout: DWORD, rgReaderStates: LPSCARD_READERSTATEA?, cReaders: DWORD): LONG {
    val _hContext = hContext
    val _dwTimeout = dwTimeout
    val _rgReaderStates = rgReaderStates.rawValue
    val _cReaders = cReaders
    val res = kni_SCardGetStatusChangeA(_hContext, _dwTimeout, _rgReaderStates, _cReaders)
    return res
}

@SymbolName("win32_kni_SCardGetStatusChangeA")
private external fun kni_SCardGetStatusChangeA(hContext: Long, dwTimeout: Int, rgReaderStates: NativePtr, cReaders: Int): Int

fun SCardGetStatusChangeW(hContext: SCARDCONTEXT, dwTimeout: DWORD, rgReaderStates: LPSCARD_READERSTATEW?, cReaders: DWORD): LONG {
    val _hContext = hContext
    val _dwTimeout = dwTimeout
    val _rgReaderStates = rgReaderStates.rawValue
    val _cReaders = cReaders
    val res = kni_SCardGetStatusChangeW(_hContext, _dwTimeout, _rgReaderStates, _cReaders)
    return res
}

@SymbolName("win32_kni_SCardGetStatusChangeW")
private external fun kni_SCardGetStatusChangeW(hContext: Long, dwTimeout: Int, rgReaderStates: NativePtr, cReaders: Int): Int

fun SCardCancel(hContext: SCARDCONTEXT): LONG {
    val _hContext = hContext
    val res = kni_SCardCancel(_hContext)
    return res
}

@SymbolName("win32_kni_SCardCancel")
private external fun kni_SCardCancel(hContext: Long): Int

fun SCardConnectA(hContext: SCARDCONTEXT, szReader: String?, dwShareMode: DWORD, dwPreferredProtocols: DWORD, phCard: LPSCARDHANDLE?, pdwActiveProtocol: LPDWORD?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szReader = szReader?.cstr?.getPointer(memScope).rawValue
        val _dwShareMode = dwShareMode
        val _dwPreferredProtocols = dwPreferredProtocols
        val _phCard = phCard.rawValue
        val _pdwActiveProtocol = pdwActiveProtocol.rawValue
        val res = kni_SCardConnectA(_hContext, _szReader, _dwShareMode, _dwPreferredProtocols, _phCard, _pdwActiveProtocol)
        res
    }
}

@SymbolName("win32_kni_SCardConnectA")
private external fun kni_SCardConnectA(hContext: Long, szReader: NativePtr, dwShareMode: Int, dwPreferredProtocols: Int, phCard: NativePtr, pdwActiveProtocol: NativePtr): Int

fun SCardConnectW(hContext: SCARDCONTEXT, szReader: String?, dwShareMode: DWORD, dwPreferredProtocols: DWORD, phCard: LPSCARDHANDLE?, pdwActiveProtocol: LPDWORD?): LONG {
    return memScoped {
        val _hContext = hContext
        val _szReader = szReader?.wcstr?.getPointer(memScope).rawValue
        val _dwShareMode = dwShareMode
        val _dwPreferredProtocols = dwPreferredProtocols
        val _phCard = phCard.rawValue
        val _pdwActiveProtocol = pdwActiveProtocol.rawValue
        val res = kni_SCardConnectW(_hContext, _szReader, _dwShareMode, _dwPreferredProtocols, _phCard, _pdwActiveProtocol)
        res
    }
}

@SymbolName("win32_kni_SCardConnectW")
private external fun kni_SCardConnectW(hContext: Long, szReader: NativePtr, dwShareMode: Int, dwPreferredProtocols: Int, phCard: NativePtr, pdwActiveProtocol: NativePtr): Int

fun SCardReconnect(hCard: SCARDHANDLE, dwShareMode: DWORD, dwPreferredProtocols: DWORD, dwInitialization: DWORD, pdwActiveProtocol: LPDWORD?): LONG {
    val _hCard = hCard
    val _dwShareMode = dwShareMode
    val _dwPreferredProtocols = dwPreferredProtocols
    val _dwInitialization = dwInitialization
    val _pdwActiveProtocol = pdwActiveProtocol.rawValue
    val res = kni_SCardReconnect(_hCard, _dwShareMode, _dwPreferredProtocols, _dwInitialization, _pdwActiveProtocol)
    return res
}

@SymbolName("win32_kni_SCardReconnect")
private external fun kni_SCardReconnect(hCard: Long, dwShareMode: Int, dwPreferredProtocols: Int, dwInitialization: Int, pdwActiveProtocol: NativePtr): Int

fun SCardDisconnect(hCard: SCARDHANDLE, dwDisposition: DWORD): LONG {
    val _hCard = hCard
    val _dwDisposition = dwDisposition
    val res = kni_SCardDisconnect(_hCard, _dwDisposition)
    return res
}

@SymbolName("win32_kni_SCardDisconnect")
private external fun kni_SCardDisconnect(hCard: Long, dwDisposition: Int): Int

fun SCardBeginTransaction(hCard: SCARDHANDLE): LONG {
    val _hCard = hCard
    val res = kni_SCardBeginTransaction(_hCard)
    return res
}

@SymbolName("win32_kni_SCardBeginTransaction")
private external fun kni_SCardBeginTransaction(hCard: Long): Int

fun SCardEndTransaction(hCard: SCARDHANDLE, dwDisposition: DWORD): LONG {
    val _hCard = hCard
    val _dwDisposition = dwDisposition
    val res = kni_SCardEndTransaction(_hCard, _dwDisposition)
    return res
}

@SymbolName("win32_kni_SCardEndTransaction")
private external fun kni_SCardEndTransaction(hCard: Long, dwDisposition: Int): Int

fun SCardCancelTransaction(hCard: SCARDHANDLE): LONG {
    val _hCard = hCard
    val res = kni_SCardCancelTransaction(_hCard)
    return res
}

@SymbolName("win32_kni_SCardCancelTransaction")
private external fun kni_SCardCancelTransaction(hCard: Long): Int

fun SCardState(hCard: SCARDHANDLE, pdwState: LPDWORD?, pdwProtocol: LPDWORD?, pbAtr: LPBYTE?, pcbAtrLen: LPDWORD?): LONG {
    val _hCard = hCard
    val _pdwState = pdwState.rawValue
    val _pdwProtocol = pdwProtocol.rawValue
    val _pbAtr = pbAtr.rawValue
    val _pcbAtrLen = pcbAtrLen.rawValue
    val res = kni_SCardState(_hCard, _pdwState, _pdwProtocol, _pbAtr, _pcbAtrLen)
    return res
}

@SymbolName("win32_kni_SCardState")
private external fun kni_SCardState(hCard: Long, pdwState: NativePtr, pdwProtocol: NativePtr, pbAtr: NativePtr, pcbAtrLen: NativePtr): Int

fun SCardStatusA(hCard: SCARDHANDLE, szReaderName: LPSTR?, pcchReaderLen: LPDWORD?, pdwState: LPDWORD?, pdwProtocol: LPDWORD?, pbAtr: LPBYTE?, pcbAtrLen: LPDWORD?): LONG {
    val _hCard = hCard
    val _szReaderName = szReaderName.rawValue
    val _pcchReaderLen = pcchReaderLen.rawValue
    val _pdwState = pdwState.rawValue
    val _pdwProtocol = pdwProtocol.rawValue
    val _pbAtr = pbAtr.rawValue
    val _pcbAtrLen = pcbAtrLen.rawValue
    val res = kni_SCardStatusA(_hCard, _szReaderName, _pcchReaderLen, _pdwState, _pdwProtocol, _pbAtr, _pcbAtrLen)
    return res
}

@SymbolName("win32_kni_SCardStatusA")
private external fun kni_SCardStatusA(hCard: Long, szReaderName: NativePtr, pcchReaderLen: NativePtr, pdwState: NativePtr, pdwProtocol: NativePtr, pbAtr: NativePtr, pcbAtrLen: NativePtr): Int

fun SCardStatusW(hCard: SCARDHANDLE, szReaderName: LPWSTR?, pcchReaderLen: LPDWORD?, pdwState: LPDWORD?, pdwProtocol: LPDWORD?, pbAtr: LPBYTE?, pcbAtrLen: LPDWORD?): LONG {
    val _hCard = hCard
    val _szReaderName = szReaderName.rawValue
    val _pcchReaderLen = pcchReaderLen.rawValue
    val _pdwState = pdwState.rawValue
    val _pdwProtocol = pdwProtocol.rawValue
    val _pbAtr = pbAtr.rawValue
    val _pcbAtrLen = pcbAtrLen.rawValue
    val res = kni_SCardStatusW(_hCard, _szReaderName, _pcchReaderLen, _pdwState, _pdwProtocol, _pbAtr, _pcbAtrLen)
    return res
}

@SymbolName("win32_kni_SCardStatusW")
private external fun kni_SCardStatusW(hCard: Long, szReaderName: NativePtr, pcchReaderLen: NativePtr, pdwState: NativePtr, pdwProtocol: NativePtr, pbAtr: NativePtr, pcbAtrLen: NativePtr): Int

fun SCardTransmit(hCard: SCARDHANDLE, pioSendPci: LPCSCARD_IO_REQUEST?, pbSendBuffer: LPCBYTE?, cbSendLength: DWORD, pioRecvPci: LPSCARD_IO_REQUEST?, pbRecvBuffer: LPBYTE?, pcbRecvLength: LPDWORD?): LONG {
    val _hCard = hCard
    val _pioSendPci = pioSendPci.rawValue
    val _pbSendBuffer = pbSendBuffer.rawValue
    val _cbSendLength = cbSendLength
    val _pioRecvPci = pioRecvPci.rawValue
    val _pbRecvBuffer = pbRecvBuffer.rawValue
    val _pcbRecvLength = pcbRecvLength.rawValue
    val res = kni_SCardTransmit(_hCard, _pioSendPci, _pbSendBuffer, _cbSendLength, _pioRecvPci, _pbRecvBuffer, _pcbRecvLength)
    return res
}

@SymbolName("win32_kni_SCardTransmit")
private external fun kni_SCardTransmit(hCard: Long, pioSendPci: NativePtr, pbSendBuffer: NativePtr, cbSendLength: Int, pioRecvPci: NativePtr, pbRecvBuffer: NativePtr, pcbRecvLength: NativePtr): Int

fun SCardControl(hCard: SCARDHANDLE, dwControlCode: DWORD, lpInBuffer: LPCVOID?, nInBufferSize: DWORD, lpOutBuffer: LPVOID?, nOutBufferSize: DWORD, lpBytesReturned: LPDWORD?): LONG {
    val _hCard = hCard
    val _dwControlCode = dwControlCode
    val _lpInBuffer = lpInBuffer.rawValue
    val _nInBufferSize = nInBufferSize
    val _lpOutBuffer = lpOutBuffer.rawValue
    val _nOutBufferSize = nOutBufferSize
    val _lpBytesReturned = lpBytesReturned.rawValue
    val res = kni_SCardControl(_hCard, _dwControlCode, _lpInBuffer, _nInBufferSize, _lpOutBuffer, _nOutBufferSize, _lpBytesReturned)
    return res
}

@SymbolName("win32_kni_SCardControl")
private external fun kni_SCardControl(hCard: Long, dwControlCode: Int, lpInBuffer: NativePtr, nInBufferSize: Int, lpOutBuffer: NativePtr, nOutBufferSize: Int, lpBytesReturned: NativePtr): Int

fun SCardGetAttrib(hCard: SCARDHANDLE, dwAttrId: DWORD, pbAttr: LPBYTE?, pcbAttrLen: LPDWORD?): LONG {
    val _hCard = hCard
    val _dwAttrId = dwAttrId
    val _pbAttr = pbAttr.rawValue
    val _pcbAttrLen = pcbAttrLen.rawValue
    val res = kni_SCardGetAttrib(_hCard, _dwAttrId, _pbAttr, _pcbAttrLen)
    return res
}

@SymbolName("win32_kni_SCardGetAttrib")
private external fun kni_SCardGetAttrib(hCard: Long, dwAttrId: Int, pbAttr: NativePtr, pcbAttrLen: NativePtr): Int

fun SCardSetAttrib(hCard: SCARDHANDLE, dwAttrId: DWORD, pbAttr: LPCBYTE?, cbAttrLen: DWORD): LONG {
    val _hCard = hCard
    val _dwAttrId = dwAttrId
    val _pbAttr = pbAttr.rawValue
    val _cbAttrLen = cbAttrLen
    val res = kni_SCardSetAttrib(_hCard, _dwAttrId, _pbAttr, _cbAttrLen)
    return res
}

@SymbolName("win32_kni_SCardSetAttrib")
private external fun kni_SCardSetAttrib(hCard: Long, dwAttrId: Int, pbAttr: NativePtr, cbAttrLen: Int): Int

fun SCardUIDlgSelectCardA(arg0: LPOPENCARDNAME_EXA?): LONG {
    val _arg0 = arg0.rawValue
    val res = kni_SCardUIDlgSelectCardA(_arg0)
    return res
}

@SymbolName("win32_kni_SCardUIDlgSelectCardA")
private external fun kni_SCardUIDlgSelectCardA(arg0: NativePtr): Int

fun SCardUIDlgSelectCardW(arg0: LPOPENCARDNAME_EXW?): LONG {
    val _arg0 = arg0.rawValue
    val res = kni_SCardUIDlgSelectCardW(_arg0)
    return res
}

@SymbolName("win32_kni_SCardUIDlgSelectCardW")
private external fun kni_SCardUIDlgSelectCardW(arg0: NativePtr): Int

fun GetOpenCardNameA(arg0: LPOPENCARDNAMEA?): LONG {
    val _arg0 = arg0.rawValue
    val res = kni_GetOpenCardNameA(_arg0)
    return res
}

@SymbolName("win32_kni_GetOpenCardNameA")
private external fun kni_GetOpenCardNameA(arg0: NativePtr): Int

fun GetOpenCardNameW(arg0: LPOPENCARDNAMEW?): LONG {
    val _arg0 = arg0.rawValue
    val res = kni_GetOpenCardNameW(_arg0)
    return res
}

@SymbolName("win32_kni_GetOpenCardNameW")
private external fun kni_GetOpenCardNameW(arg0: NativePtr): Int

fun SCardDlgExtendedError(): LONG {
    val res = kni_SCardDlgExtendedError()
    return res
}

@SymbolName("win32_kni_SCardDlgExtendedError")
private external fun kni_SCardDlgExtendedError(): Int

fun EnumPrintersA(Flags: DWORD, Name: LPSTR?, Level: DWORD, pPrinterEnum: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _Flags = Flags
    val _Name = Name.rawValue
    val _Level = Level
    val _pPrinterEnum = pPrinterEnum.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumPrintersA(_Flags, _Name, _Level, _pPrinterEnum, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumPrintersA")
private external fun kni_EnumPrintersA(Flags: Int, Name: NativePtr, Level: Int, pPrinterEnum: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun EnumPrintersW(Flags: DWORD, Name: LPWSTR?, Level: DWORD, pPrinterEnum: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _Flags = Flags
    val _Name = Name.rawValue
    val _Level = Level
    val _pPrinterEnum = pPrinterEnum.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumPrintersW(_Flags, _Name, _Level, _pPrinterEnum, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumPrintersW")
private external fun kni_EnumPrintersW(Flags: Int, Name: NativePtr, Level: Int, pPrinterEnum: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun OpenPrinterA(pPrinterName: LPSTR?, phPrinter: LPHANDLE?, pDefault: LPPRINTER_DEFAULTSA?): WINBOOL {
    val _pPrinterName = pPrinterName.rawValue
    val _phPrinter = phPrinter.rawValue
    val _pDefault = pDefault.rawValue
    val res = kni_OpenPrinterA(_pPrinterName, _phPrinter, _pDefault)
    return res
}

@SymbolName("win32_kni_OpenPrinterA")
private external fun kni_OpenPrinterA(pPrinterName: NativePtr, phPrinter: NativePtr, pDefault: NativePtr): Int

fun OpenPrinterW(pPrinterName: LPWSTR?, phPrinter: LPHANDLE?, pDefault: LPPRINTER_DEFAULTSW?): WINBOOL {
    val _pPrinterName = pPrinterName.rawValue
    val _phPrinter = phPrinter.rawValue
    val _pDefault = pDefault.rawValue
    val res = kni_OpenPrinterW(_pPrinterName, _phPrinter, _pDefault)
    return res
}

@SymbolName("win32_kni_OpenPrinterW")
private external fun kni_OpenPrinterW(pPrinterName: NativePtr, phPrinter: NativePtr, pDefault: NativePtr): Int

fun ResetPrinterA(hPrinter: HANDLE?, pDefault: LPPRINTER_DEFAULTSA?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pDefault = pDefault.rawValue
    val res = kni_ResetPrinterA(_hPrinter, _pDefault)
    return res
}

@SymbolName("win32_kni_ResetPrinterA")
private external fun kni_ResetPrinterA(hPrinter: NativePtr, pDefault: NativePtr): Int

fun ResetPrinterW(hPrinter: HANDLE?, pDefault: LPPRINTER_DEFAULTSW?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pDefault = pDefault.rawValue
    val res = kni_ResetPrinterW(_hPrinter, _pDefault)
    return res
}

@SymbolName("win32_kni_ResetPrinterW")
private external fun kni_ResetPrinterW(hPrinter: NativePtr, pDefault: NativePtr): Int

fun SetJobA(hPrinter: HANDLE?, JobId: DWORD, Level: DWORD, pJob: LPBYTE?, Command: DWORD): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _JobId = JobId
    val _Level = Level
    val _pJob = pJob.rawValue
    val _Command = Command
    val res = kni_SetJobA(_hPrinter, _JobId, _Level, _pJob, _Command)
    return res
}

@SymbolName("win32_kni_SetJobA")
private external fun kni_SetJobA(hPrinter: NativePtr, JobId: Int, Level: Int, pJob: NativePtr, Command: Int): Int

fun SetJobW(hPrinter: HANDLE?, JobId: DWORD, Level: DWORD, pJob: LPBYTE?, Command: DWORD): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _JobId = JobId
    val _Level = Level
    val _pJob = pJob.rawValue
    val _Command = Command
    val res = kni_SetJobW(_hPrinter, _JobId, _Level, _pJob, _Command)
    return res
}

@SymbolName("win32_kni_SetJobW")
private external fun kni_SetJobW(hPrinter: NativePtr, JobId: Int, Level: Int, pJob: NativePtr, Command: Int): Int

fun GetJobA(hPrinter: HANDLE?, JobId: DWORD, Level: DWORD, pJob: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _JobId = JobId
    val _Level = Level
    val _pJob = pJob.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetJobA(_hPrinter, _JobId, _Level, _pJob, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetJobA")
private external fun kni_GetJobA(hPrinter: NativePtr, JobId: Int, Level: Int, pJob: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun GetJobW(hPrinter: HANDLE?, JobId: DWORD, Level: DWORD, pJob: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _JobId = JobId
    val _Level = Level
    val _pJob = pJob.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetJobW(_hPrinter, _JobId, _Level, _pJob, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetJobW")
private external fun kni_GetJobW(hPrinter: NativePtr, JobId: Int, Level: Int, pJob: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun EnumJobsA(hPrinter: HANDLE?, FirstJob: DWORD, NoJobs: DWORD, Level: DWORD, pJob: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _FirstJob = FirstJob
    val _NoJobs = NoJobs
    val _Level = Level
    val _pJob = pJob.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumJobsA(_hPrinter, _FirstJob, _NoJobs, _Level, _pJob, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumJobsA")
private external fun kni_EnumJobsA(hPrinter: NativePtr, FirstJob: Int, NoJobs: Int, Level: Int, pJob: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun EnumJobsW(hPrinter: HANDLE?, FirstJob: DWORD, NoJobs: DWORD, Level: DWORD, pJob: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _FirstJob = FirstJob
    val _NoJobs = NoJobs
    val _Level = Level
    val _pJob = pJob.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumJobsW(_hPrinter, _FirstJob, _NoJobs, _Level, _pJob, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumJobsW")
private external fun kni_EnumJobsW(hPrinter: NativePtr, FirstJob: Int, NoJobs: Int, Level: Int, pJob: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun AddPrinterA(pName: LPSTR?, Level: DWORD, pPrinter: LPBYTE?): HANDLE? {
    val _pName = pName.rawValue
    val _Level = Level
    val _pPrinter = pPrinter.rawValue
    val res = kni_AddPrinterA(_pName, _Level, _pPrinter)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_AddPrinterA")
private external fun kni_AddPrinterA(pName: NativePtr, Level: Int, pPrinter: NativePtr): NativePtr

fun AddPrinterW(pName: LPWSTR?, Level: DWORD, pPrinter: LPBYTE?): HANDLE? {
    val _pName = pName.rawValue
    val _Level = Level
    val _pPrinter = pPrinter.rawValue
    val res = kni_AddPrinterW(_pName, _Level, _pPrinter)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_AddPrinterW")
private external fun kni_AddPrinterW(pName: NativePtr, Level: Int, pPrinter: NativePtr): NativePtr

fun DeletePrinter(hPrinter: HANDLE?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val res = kni_DeletePrinter(_hPrinter)
    return res
}

@SymbolName("win32_kni_DeletePrinter")
private external fun kni_DeletePrinter(hPrinter: NativePtr): Int

fun SetPrinterA(hPrinter: HANDLE?, Level: DWORD, pPrinter: LPBYTE?, Command: DWORD): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pPrinter = pPrinter.rawValue
    val _Command = Command
    val res = kni_SetPrinterA(_hPrinter, _Level, _pPrinter, _Command)
    return res
}

@SymbolName("win32_kni_SetPrinterA")
private external fun kni_SetPrinterA(hPrinter: NativePtr, Level: Int, pPrinter: NativePtr, Command: Int): Int

fun SetPrinterW(hPrinter: HANDLE?, Level: DWORD, pPrinter: LPBYTE?, Command: DWORD): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pPrinter = pPrinter.rawValue
    val _Command = Command
    val res = kni_SetPrinterW(_hPrinter, _Level, _pPrinter, _Command)
    return res
}

@SymbolName("win32_kni_SetPrinterW")
private external fun kni_SetPrinterW(hPrinter: NativePtr, Level: Int, pPrinter: NativePtr, Command: Int): Int

fun GetPrinterA(hPrinter: HANDLE?, Level: DWORD, pPrinter: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pPrinter = pPrinter.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetPrinterA(_hPrinter, _Level, _pPrinter, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetPrinterA")
private external fun kni_GetPrinterA(hPrinter: NativePtr, Level: Int, pPrinter: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun GetPrinterW(hPrinter: HANDLE?, Level: DWORD, pPrinter: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pPrinter = pPrinter.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetPrinterW(_hPrinter, _Level, _pPrinter, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetPrinterW")
private external fun kni_GetPrinterW(hPrinter: NativePtr, Level: Int, pPrinter: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun AddPrinterDriverA(pName: LPSTR?, Level: DWORD, pDriverInfo: LPBYTE?): WINBOOL {
    val _pName = pName.rawValue
    val _Level = Level
    val _pDriverInfo = pDriverInfo.rawValue
    val res = kni_AddPrinterDriverA(_pName, _Level, _pDriverInfo)
    return res
}

@SymbolName("win32_kni_AddPrinterDriverA")
private external fun kni_AddPrinterDriverA(pName: NativePtr, Level: Int, pDriverInfo: NativePtr): Int

fun AddPrinterDriverW(pName: LPWSTR?, Level: DWORD, pDriverInfo: LPBYTE?): WINBOOL {
    val _pName = pName.rawValue
    val _Level = Level
    val _pDriverInfo = pDriverInfo.rawValue
    val res = kni_AddPrinterDriverW(_pName, _Level, _pDriverInfo)
    return res
}

@SymbolName("win32_kni_AddPrinterDriverW")
private external fun kni_AddPrinterDriverW(pName: NativePtr, Level: Int, pDriverInfo: NativePtr): Int

fun AddPrinterDriverExA(pName: LPSTR?, Level: DWORD, pDriverInfo: LPBYTE?, dwFileCopyFlags: DWORD): WINBOOL {
    val _pName = pName.rawValue
    val _Level = Level
    val _pDriverInfo = pDriverInfo.rawValue
    val _dwFileCopyFlags = dwFileCopyFlags
    val res = kni_AddPrinterDriverExA(_pName, _Level, _pDriverInfo, _dwFileCopyFlags)
    return res
}

@SymbolName("win32_kni_AddPrinterDriverExA")
private external fun kni_AddPrinterDriverExA(pName: NativePtr, Level: Int, pDriverInfo: NativePtr, dwFileCopyFlags: Int): Int

fun AddPrinterDriverExW(pName: LPWSTR?, Level: DWORD, pDriverInfo: LPBYTE?, dwFileCopyFlags: DWORD): WINBOOL {
    val _pName = pName.rawValue
    val _Level = Level
    val _pDriverInfo = pDriverInfo.rawValue
    val _dwFileCopyFlags = dwFileCopyFlags
    val res = kni_AddPrinterDriverExW(_pName, _Level, _pDriverInfo, _dwFileCopyFlags)
    return res
}

@SymbolName("win32_kni_AddPrinterDriverExW")
private external fun kni_AddPrinterDriverExW(pName: NativePtr, Level: Int, pDriverInfo: NativePtr, dwFileCopyFlags: Int): Int

fun EnumPrinterDriversA(pName: LPSTR?, pEnvironment: LPSTR?, Level: DWORD, pDriverInfo: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _Level = Level
    val _pDriverInfo = pDriverInfo.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumPrinterDriversA(_pName, _pEnvironment, _Level, _pDriverInfo, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumPrinterDriversA")
private external fun kni_EnumPrinterDriversA(pName: NativePtr, pEnvironment: NativePtr, Level: Int, pDriverInfo: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun EnumPrinterDriversW(pName: LPWSTR?, pEnvironment: LPWSTR?, Level: DWORD, pDriverInfo: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _Level = Level
    val _pDriverInfo = pDriverInfo.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumPrinterDriversW(_pName, _pEnvironment, _Level, _pDriverInfo, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumPrinterDriversW")
private external fun kni_EnumPrinterDriversW(pName: NativePtr, pEnvironment: NativePtr, Level: Int, pDriverInfo: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun GetPrinterDriverA(hPrinter: HANDLE?, pEnvironment: LPSTR?, Level: DWORD, pDriverInfo: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _Level = Level
    val _pDriverInfo = pDriverInfo.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetPrinterDriverA(_hPrinter, _pEnvironment, _Level, _pDriverInfo, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetPrinterDriverA")
private external fun kni_GetPrinterDriverA(hPrinter: NativePtr, pEnvironment: NativePtr, Level: Int, pDriverInfo: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun GetPrinterDriverW(hPrinter: HANDLE?, pEnvironment: LPWSTR?, Level: DWORD, pDriverInfo: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _Level = Level
    val _pDriverInfo = pDriverInfo.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetPrinterDriverW(_hPrinter, _pEnvironment, _Level, _pDriverInfo, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetPrinterDriverW")
private external fun kni_GetPrinterDriverW(hPrinter: NativePtr, pEnvironment: NativePtr, Level: Int, pDriverInfo: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun GetPrinterDriverDirectoryA(pName: LPSTR?, pEnvironment: LPSTR?, Level: DWORD, pDriverDirectory: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _Level = Level
    val _pDriverDirectory = pDriverDirectory.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetPrinterDriverDirectoryA(_pName, _pEnvironment, _Level, _pDriverDirectory, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetPrinterDriverDirectoryA")
private external fun kni_GetPrinterDriverDirectoryA(pName: NativePtr, pEnvironment: NativePtr, Level: Int, pDriverDirectory: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun GetPrinterDriverDirectoryW(pName: LPWSTR?, pEnvironment: LPWSTR?, Level: DWORD, pDriverDirectory: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _Level = Level
    val _pDriverDirectory = pDriverDirectory.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetPrinterDriverDirectoryW(_pName, _pEnvironment, _Level, _pDriverDirectory, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetPrinterDriverDirectoryW")
private external fun kni_GetPrinterDriverDirectoryW(pName: NativePtr, pEnvironment: NativePtr, Level: Int, pDriverDirectory: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun DeletePrinterDriverA(pName: LPSTR?, pEnvironment: LPSTR?, pDriverName: LPSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pDriverName = pDriverName.rawValue
    val res = kni_DeletePrinterDriverA(_pName, _pEnvironment, _pDriverName)
    return res
}

@SymbolName("win32_kni_DeletePrinterDriverA")
private external fun kni_DeletePrinterDriverA(pName: NativePtr, pEnvironment: NativePtr, pDriverName: NativePtr): Int

fun DeletePrinterDriverW(pName: LPWSTR?, pEnvironment: LPWSTR?, pDriverName: LPWSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pDriverName = pDriverName.rawValue
    val res = kni_DeletePrinterDriverW(_pName, _pEnvironment, _pDriverName)
    return res
}

@SymbolName("win32_kni_DeletePrinterDriverW")
private external fun kni_DeletePrinterDriverW(pName: NativePtr, pEnvironment: NativePtr, pDriverName: NativePtr): Int

fun DeletePrinterDriverExA(pName: LPSTR?, pEnvironment: LPSTR?, pDriverName: LPSTR?, dwDeleteFlag: DWORD, dwVersionFlag: DWORD): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pDriverName = pDriverName.rawValue
    val _dwDeleteFlag = dwDeleteFlag
    val _dwVersionFlag = dwVersionFlag
    val res = kni_DeletePrinterDriverExA(_pName, _pEnvironment, _pDriverName, _dwDeleteFlag, _dwVersionFlag)
    return res
}

@SymbolName("win32_kni_DeletePrinterDriverExA")
private external fun kni_DeletePrinterDriverExA(pName: NativePtr, pEnvironment: NativePtr, pDriverName: NativePtr, dwDeleteFlag: Int, dwVersionFlag: Int): Int

fun DeletePrinterDriverExW(pName: LPWSTR?, pEnvironment: LPWSTR?, pDriverName: LPWSTR?, dwDeleteFlag: DWORD, dwVersionFlag: DWORD): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pDriverName = pDriverName.rawValue
    val _dwDeleteFlag = dwDeleteFlag
    val _dwVersionFlag = dwVersionFlag
    val res = kni_DeletePrinterDriverExW(_pName, _pEnvironment, _pDriverName, _dwDeleteFlag, _dwVersionFlag)
    return res
}

@SymbolName("win32_kni_DeletePrinterDriverExW")
private external fun kni_DeletePrinterDriverExW(pName: NativePtr, pEnvironment: NativePtr, pDriverName: NativePtr, dwDeleteFlag: Int, dwVersionFlag: Int): Int

fun AddPrintProcessorA(pName: LPSTR?, pEnvironment: LPSTR?, pPathName: LPSTR?, pPrintProcessorName: LPSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pPathName = pPathName.rawValue
    val _pPrintProcessorName = pPrintProcessorName.rawValue
    val res = kni_AddPrintProcessorA(_pName, _pEnvironment, _pPathName, _pPrintProcessorName)
    return res
}

@SymbolName("win32_kni_AddPrintProcessorA")
private external fun kni_AddPrintProcessorA(pName: NativePtr, pEnvironment: NativePtr, pPathName: NativePtr, pPrintProcessorName: NativePtr): Int

fun AddPrintProcessorW(pName: LPWSTR?, pEnvironment: LPWSTR?, pPathName: LPWSTR?, pPrintProcessorName: LPWSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pPathName = pPathName.rawValue
    val _pPrintProcessorName = pPrintProcessorName.rawValue
    val res = kni_AddPrintProcessorW(_pName, _pEnvironment, _pPathName, _pPrintProcessorName)
    return res
}

@SymbolName("win32_kni_AddPrintProcessorW")
private external fun kni_AddPrintProcessorW(pName: NativePtr, pEnvironment: NativePtr, pPathName: NativePtr, pPrintProcessorName: NativePtr): Int

fun EnumPrintProcessorsA(pName: LPSTR?, pEnvironment: LPSTR?, Level: DWORD, pPrintProcessorInfo: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _Level = Level
    val _pPrintProcessorInfo = pPrintProcessorInfo.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumPrintProcessorsA(_pName, _pEnvironment, _Level, _pPrintProcessorInfo, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumPrintProcessorsA")
private external fun kni_EnumPrintProcessorsA(pName: NativePtr, pEnvironment: NativePtr, Level: Int, pPrintProcessorInfo: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun EnumPrintProcessorsW(pName: LPWSTR?, pEnvironment: LPWSTR?, Level: DWORD, pPrintProcessorInfo: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _Level = Level
    val _pPrintProcessorInfo = pPrintProcessorInfo.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumPrintProcessorsW(_pName, _pEnvironment, _Level, _pPrintProcessorInfo, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumPrintProcessorsW")
private external fun kni_EnumPrintProcessorsW(pName: NativePtr, pEnvironment: NativePtr, Level: Int, pPrintProcessorInfo: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun GetPrintProcessorDirectoryA(pName: LPSTR?, pEnvironment: LPSTR?, Level: DWORD, pPrintProcessorInfo: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _Level = Level
    val _pPrintProcessorInfo = pPrintProcessorInfo.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetPrintProcessorDirectoryA(_pName, _pEnvironment, _Level, _pPrintProcessorInfo, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetPrintProcessorDirectoryA")
private external fun kni_GetPrintProcessorDirectoryA(pName: NativePtr, pEnvironment: NativePtr, Level: Int, pPrintProcessorInfo: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun GetPrintProcessorDirectoryW(pName: LPWSTR?, pEnvironment: LPWSTR?, Level: DWORD, pPrintProcessorInfo: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _Level = Level
    val _pPrintProcessorInfo = pPrintProcessorInfo.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetPrintProcessorDirectoryW(_pName, _pEnvironment, _Level, _pPrintProcessorInfo, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetPrintProcessorDirectoryW")
private external fun kni_GetPrintProcessorDirectoryW(pName: NativePtr, pEnvironment: NativePtr, Level: Int, pPrintProcessorInfo: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun EnumPrintProcessorDatatypesA(pName: LPSTR?, pPrintProcessorName: LPSTR?, Level: DWORD, pDatatypes: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _pPrintProcessorName = pPrintProcessorName.rawValue
    val _Level = Level
    val _pDatatypes = pDatatypes.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumPrintProcessorDatatypesA(_pName, _pPrintProcessorName, _Level, _pDatatypes, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumPrintProcessorDatatypesA")
private external fun kni_EnumPrintProcessorDatatypesA(pName: NativePtr, pPrintProcessorName: NativePtr, Level: Int, pDatatypes: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun EnumPrintProcessorDatatypesW(pName: LPWSTR?, pPrintProcessorName: LPWSTR?, Level: DWORD, pDatatypes: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _pPrintProcessorName = pPrintProcessorName.rawValue
    val _Level = Level
    val _pDatatypes = pDatatypes.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumPrintProcessorDatatypesW(_pName, _pPrintProcessorName, _Level, _pDatatypes, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumPrintProcessorDatatypesW")
private external fun kni_EnumPrintProcessorDatatypesW(pName: NativePtr, pPrintProcessorName: NativePtr, Level: Int, pDatatypes: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun DeletePrintProcessorA(pName: LPSTR?, pEnvironment: LPSTR?, pPrintProcessorName: LPSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pPrintProcessorName = pPrintProcessorName.rawValue
    val res = kni_DeletePrintProcessorA(_pName, _pEnvironment, _pPrintProcessorName)
    return res
}

@SymbolName("win32_kni_DeletePrintProcessorA")
private external fun kni_DeletePrintProcessorA(pName: NativePtr, pEnvironment: NativePtr, pPrintProcessorName: NativePtr): Int

fun DeletePrintProcessorW(pName: LPWSTR?, pEnvironment: LPWSTR?, pPrintProcessorName: LPWSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pPrintProcessorName = pPrintProcessorName.rawValue
    val res = kni_DeletePrintProcessorW(_pName, _pEnvironment, _pPrintProcessorName)
    return res
}

@SymbolName("win32_kni_DeletePrintProcessorW")
private external fun kni_DeletePrintProcessorW(pName: NativePtr, pEnvironment: NativePtr, pPrintProcessorName: NativePtr): Int

fun StartDocPrinterA(hPrinter: HANDLE?, Level: DWORD, pDocInfo: LPBYTE?): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pDocInfo = pDocInfo.rawValue
    val res = kni_StartDocPrinterA(_hPrinter, _Level, _pDocInfo)
    return res
}

@SymbolName("win32_kni_StartDocPrinterA")
private external fun kni_StartDocPrinterA(hPrinter: NativePtr, Level: Int, pDocInfo: NativePtr): Int

fun StartDocPrinterW(hPrinter: HANDLE?, Level: DWORD, pDocInfo: LPBYTE?): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pDocInfo = pDocInfo.rawValue
    val res = kni_StartDocPrinterW(_hPrinter, _Level, _pDocInfo)
    return res
}

@SymbolName("win32_kni_StartDocPrinterW")
private external fun kni_StartDocPrinterW(hPrinter: NativePtr, Level: Int, pDocInfo: NativePtr): Int

fun StartPagePrinter(hPrinter: HANDLE?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val res = kni_StartPagePrinter(_hPrinter)
    return res
}

@SymbolName("win32_kni_StartPagePrinter")
private external fun kni_StartPagePrinter(hPrinter: NativePtr): Int

fun WritePrinter(hPrinter: HANDLE?, pBuf: LPVOID?, cbBuf: DWORD, pcWritten: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pBuf = pBuf.rawValue
    val _cbBuf = cbBuf
    val _pcWritten = pcWritten.rawValue
    val res = kni_WritePrinter(_hPrinter, _pBuf, _cbBuf, _pcWritten)
    return res
}

@SymbolName("win32_kni_WritePrinter")
private external fun kni_WritePrinter(hPrinter: NativePtr, pBuf: NativePtr, cbBuf: Int, pcWritten: NativePtr): Int

fun FlushPrinter(hPrinter: HANDLE?, pBuf: LPVOID?, cbBuf: DWORD, pcWritten: LPDWORD?, cSleep: DWORD): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pBuf = pBuf.rawValue
    val _cbBuf = cbBuf
    val _pcWritten = pcWritten.rawValue
    val _cSleep = cSleep
    val res = kni_FlushPrinter(_hPrinter, _pBuf, _cbBuf, _pcWritten, _cSleep)
    return res
}

@SymbolName("win32_kni_FlushPrinter")
private external fun kni_FlushPrinter(hPrinter: NativePtr, pBuf: NativePtr, cbBuf: Int, pcWritten: NativePtr, cSleep: Int): Int

fun EndPagePrinter(hPrinter: HANDLE?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val res = kni_EndPagePrinter(_hPrinter)
    return res
}

@SymbolName("win32_kni_EndPagePrinter")
private external fun kni_EndPagePrinter(hPrinter: NativePtr): Int

fun AbortPrinter(hPrinter: HANDLE?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val res = kni_AbortPrinter(_hPrinter)
    return res
}

@SymbolName("win32_kni_AbortPrinter")
private external fun kni_AbortPrinter(hPrinter: NativePtr): Int

fun ReadPrinter(hPrinter: HANDLE?, pBuf: LPVOID?, cbBuf: DWORD, pNoBytesRead: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pBuf = pBuf.rawValue
    val _cbBuf = cbBuf
    val _pNoBytesRead = pNoBytesRead.rawValue
    val res = kni_ReadPrinter(_hPrinter, _pBuf, _cbBuf, _pNoBytesRead)
    return res
}

@SymbolName("win32_kni_ReadPrinter")
private external fun kni_ReadPrinter(hPrinter: NativePtr, pBuf: NativePtr, cbBuf: Int, pNoBytesRead: NativePtr): Int

fun EndDocPrinter(hPrinter: HANDLE?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val res = kni_EndDocPrinter(_hPrinter)
    return res
}

@SymbolName("win32_kni_EndDocPrinter")
private external fun kni_EndDocPrinter(hPrinter: NativePtr): Int

fun AddJobA(hPrinter: HANDLE?, Level: DWORD, pData: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pData = pData.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_AddJobA(_hPrinter, _Level, _pData, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_AddJobA")
private external fun kni_AddJobA(hPrinter: NativePtr, Level: Int, pData: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun AddJobW(hPrinter: HANDLE?, Level: DWORD, pData: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pData = pData.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_AddJobW(_hPrinter, _Level, _pData, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_AddJobW")
private external fun kni_AddJobW(hPrinter: NativePtr, Level: Int, pData: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun ScheduleJob(hPrinter: HANDLE?, JobId: DWORD): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _JobId = JobId
    val res = kni_ScheduleJob(_hPrinter, _JobId)
    return res
}

@SymbolName("win32_kni_ScheduleJob")
private external fun kni_ScheduleJob(hPrinter: NativePtr, JobId: Int): Int

fun PrinterProperties(hWnd: HWND?, hPrinter: HANDLE?): WINBOOL {
    val _hWnd = hWnd.rawValue
    val _hPrinter = hPrinter.rawValue
    val res = kni_PrinterProperties(_hWnd, _hPrinter)
    return res
}

@SymbolName("win32_kni_PrinterProperties")
private external fun kni_PrinterProperties(hWnd: NativePtr, hPrinter: NativePtr): Int

fun DocumentPropertiesA(hWnd: HWND?, hPrinter: HANDLE?, pDeviceName: LPSTR?, pDevModeOutput: PDEVMODEA?, pDevModeInput: PDEVMODEA?, fMode: DWORD): LONG {
    val _hWnd = hWnd.rawValue
    val _hPrinter = hPrinter.rawValue
    val _pDeviceName = pDeviceName.rawValue
    val _pDevModeOutput = pDevModeOutput.rawValue
    val _pDevModeInput = pDevModeInput.rawValue
    val _fMode = fMode
    val res = kni_DocumentPropertiesA(_hWnd, _hPrinter, _pDeviceName, _pDevModeOutput, _pDevModeInput, _fMode)
    return res
}

@SymbolName("win32_kni_DocumentPropertiesA")
private external fun kni_DocumentPropertiesA(hWnd: NativePtr, hPrinter: NativePtr, pDeviceName: NativePtr, pDevModeOutput: NativePtr, pDevModeInput: NativePtr, fMode: Int): Int

fun DocumentPropertiesW(hWnd: HWND?, hPrinter: HANDLE?, pDeviceName: LPWSTR?, pDevModeOutput: PDEVMODEW?, pDevModeInput: PDEVMODEW?, fMode: DWORD): LONG {
    val _hWnd = hWnd.rawValue
    val _hPrinter = hPrinter.rawValue
    val _pDeviceName = pDeviceName.rawValue
    val _pDevModeOutput = pDevModeOutput.rawValue
    val _pDevModeInput = pDevModeInput.rawValue
    val _fMode = fMode
    val res = kni_DocumentPropertiesW(_hWnd, _hPrinter, _pDeviceName, _pDevModeOutput, _pDevModeInput, _fMode)
    return res
}

@SymbolName("win32_kni_DocumentPropertiesW")
private external fun kni_DocumentPropertiesW(hWnd: NativePtr, hPrinter: NativePtr, pDeviceName: NativePtr, pDevModeOutput: NativePtr, pDevModeInput: NativePtr, fMode: Int): Int

fun AdvancedDocumentPropertiesA(hWnd: HWND?, hPrinter: HANDLE?, pDeviceName: LPSTR?, pDevModeOutput: PDEVMODEA?, pDevModeInput: PDEVMODEA?): LONG {
    val _hWnd = hWnd.rawValue
    val _hPrinter = hPrinter.rawValue
    val _pDeviceName = pDeviceName.rawValue
    val _pDevModeOutput = pDevModeOutput.rawValue
    val _pDevModeInput = pDevModeInput.rawValue
    val res = kni_AdvancedDocumentPropertiesA(_hWnd, _hPrinter, _pDeviceName, _pDevModeOutput, _pDevModeInput)
    return res
}

@SymbolName("win32_kni_AdvancedDocumentPropertiesA")
private external fun kni_AdvancedDocumentPropertiesA(hWnd: NativePtr, hPrinter: NativePtr, pDeviceName: NativePtr, pDevModeOutput: NativePtr, pDevModeInput: NativePtr): Int

fun AdvancedDocumentPropertiesW(hWnd: HWND?, hPrinter: HANDLE?, pDeviceName: LPWSTR?, pDevModeOutput: PDEVMODEW?, pDevModeInput: PDEVMODEW?): LONG {
    val _hWnd = hWnd.rawValue
    val _hPrinter = hPrinter.rawValue
    val _pDeviceName = pDeviceName.rawValue
    val _pDevModeOutput = pDevModeOutput.rawValue
    val _pDevModeInput = pDevModeInput.rawValue
    val res = kni_AdvancedDocumentPropertiesW(_hWnd, _hPrinter, _pDeviceName, _pDevModeOutput, _pDevModeInput)
    return res
}

@SymbolName("win32_kni_AdvancedDocumentPropertiesW")
private external fun kni_AdvancedDocumentPropertiesW(hWnd: NativePtr, hPrinter: NativePtr, pDeviceName: NativePtr, pDevModeOutput: NativePtr, pDevModeInput: NativePtr): Int

fun ExtDeviceMode(hWnd: HWND?, hInst: HANDLE?, pDevModeOutput: LPDEVMODEA?, pDeviceName: LPSTR?, pPort: LPSTR?, pDevModeInput: LPDEVMODEA?, pProfile: LPSTR?, fMode: DWORD): LONG {
    val _hWnd = hWnd.rawValue
    val _hInst = hInst.rawValue
    val _pDevModeOutput = pDevModeOutput.rawValue
    val _pDeviceName = pDeviceName.rawValue
    val _pPort = pPort.rawValue
    val _pDevModeInput = pDevModeInput.rawValue
    val _pProfile = pProfile.rawValue
    val _fMode = fMode
    val res = kni_ExtDeviceMode(_hWnd, _hInst, _pDevModeOutput, _pDeviceName, _pPort, _pDevModeInput, _pProfile, _fMode)
    return res
}

@SymbolName("win32_kni_ExtDeviceMode")
private external fun kni_ExtDeviceMode(hWnd: NativePtr, hInst: NativePtr, pDevModeOutput: NativePtr, pDeviceName: NativePtr, pPort: NativePtr, pDevModeInput: NativePtr, pProfile: NativePtr, fMode: Int): Int

fun GetPrinterDataA(hPrinter: HANDLE?, pValueName: LPSTR?, pType: LPDWORD?, pData: LPBYTE?, nSize: DWORD, pcbNeeded: LPDWORD?): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _pValueName = pValueName.rawValue
    val _pType = pType.rawValue
    val _pData = pData.rawValue
    val _nSize = nSize
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetPrinterDataA(_hPrinter, _pValueName, _pType, _pData, _nSize, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetPrinterDataA")
private external fun kni_GetPrinterDataA(hPrinter: NativePtr, pValueName: NativePtr, pType: NativePtr, pData: NativePtr, nSize: Int, pcbNeeded: NativePtr): Int

fun GetPrinterDataW(hPrinter: HANDLE?, pValueName: LPWSTR?, pType: LPDWORD?, pData: LPBYTE?, nSize: DWORD, pcbNeeded: LPDWORD?): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _pValueName = pValueName.rawValue
    val _pType = pType.rawValue
    val _pData = pData.rawValue
    val _nSize = nSize
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetPrinterDataW(_hPrinter, _pValueName, _pType, _pData, _nSize, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetPrinterDataW")
private external fun kni_GetPrinterDataW(hPrinter: NativePtr, pValueName: NativePtr, pType: NativePtr, pData: NativePtr, nSize: Int, pcbNeeded: NativePtr): Int

fun GetPrinterDataExA(hPrinter: HANDLE?, pKeyName: String?, pValueName: String?, pType: LPDWORD?, pData: LPBYTE?, nSize: DWORD, pcbNeeded: LPDWORD?): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.cstr?.getPointer(memScope).rawValue
        val _pValueName = pValueName?.cstr?.getPointer(memScope).rawValue
        val _pType = pType.rawValue
        val _pData = pData.rawValue
        val _nSize = nSize
        val _pcbNeeded = pcbNeeded.rawValue
        val res = kni_GetPrinterDataExA(_hPrinter, _pKeyName, _pValueName, _pType, _pData, _nSize, _pcbNeeded)
        res
    }
}

@SymbolName("win32_kni_GetPrinterDataExA")
private external fun kni_GetPrinterDataExA(hPrinter: NativePtr, pKeyName: NativePtr, pValueName: NativePtr, pType: NativePtr, pData: NativePtr, nSize: Int, pcbNeeded: NativePtr): Int

fun GetPrinterDataExW(hPrinter: HANDLE?, pKeyName: String?, pValueName: String?, pType: LPDWORD?, pData: LPBYTE?, nSize: DWORD, pcbNeeded: LPDWORD?): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.wcstr?.getPointer(memScope).rawValue
        val _pValueName = pValueName?.wcstr?.getPointer(memScope).rawValue
        val _pType = pType.rawValue
        val _pData = pData.rawValue
        val _nSize = nSize
        val _pcbNeeded = pcbNeeded.rawValue
        val res = kni_GetPrinterDataExW(_hPrinter, _pKeyName, _pValueName, _pType, _pData, _nSize, _pcbNeeded)
        res
    }
}

@SymbolName("win32_kni_GetPrinterDataExW")
private external fun kni_GetPrinterDataExW(hPrinter: NativePtr, pKeyName: NativePtr, pValueName: NativePtr, pType: NativePtr, pData: NativePtr, nSize: Int, pcbNeeded: NativePtr): Int

fun EnumPrinterDataA(hPrinter: HANDLE?, dwIndex: DWORD, pValueName: LPSTR?, cbValueName: DWORD, pcbValueName: LPDWORD?, pType: LPDWORD?, pData: LPBYTE?, cbData: DWORD, pcbData: LPDWORD?): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _dwIndex = dwIndex
    val _pValueName = pValueName.rawValue
    val _cbValueName = cbValueName
    val _pcbValueName = pcbValueName.rawValue
    val _pType = pType.rawValue
    val _pData = pData.rawValue
    val _cbData = cbData
    val _pcbData = pcbData.rawValue
    val res = kni_EnumPrinterDataA(_hPrinter, _dwIndex, _pValueName, _cbValueName, _pcbValueName, _pType, _pData, _cbData, _pcbData)
    return res
}

@SymbolName("win32_kni_EnumPrinterDataA")
private external fun kni_EnumPrinterDataA(hPrinter: NativePtr, dwIndex: Int, pValueName: NativePtr, cbValueName: Int, pcbValueName: NativePtr, pType: NativePtr, pData: NativePtr, cbData: Int, pcbData: NativePtr): Int

fun EnumPrinterDataW(hPrinter: HANDLE?, dwIndex: DWORD, pValueName: LPWSTR?, cbValueName: DWORD, pcbValueName: LPDWORD?, pType: LPDWORD?, pData: LPBYTE?, cbData: DWORD, pcbData: LPDWORD?): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _dwIndex = dwIndex
    val _pValueName = pValueName.rawValue
    val _cbValueName = cbValueName
    val _pcbValueName = pcbValueName.rawValue
    val _pType = pType.rawValue
    val _pData = pData.rawValue
    val _cbData = cbData
    val _pcbData = pcbData.rawValue
    val res = kni_EnumPrinterDataW(_hPrinter, _dwIndex, _pValueName, _cbValueName, _pcbValueName, _pType, _pData, _cbData, _pcbData)
    return res
}

@SymbolName("win32_kni_EnumPrinterDataW")
private external fun kni_EnumPrinterDataW(hPrinter: NativePtr, dwIndex: Int, pValueName: NativePtr, cbValueName: Int, pcbValueName: NativePtr, pType: NativePtr, pData: NativePtr, cbData: Int, pcbData: NativePtr): Int

fun EnumPrinterDataExA(hPrinter: HANDLE?, pKeyName: String?, pEnumValues: LPBYTE?, cbEnumValues: DWORD, pcbEnumValues: LPDWORD?, pnEnumValues: LPDWORD?): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.cstr?.getPointer(memScope).rawValue
        val _pEnumValues = pEnumValues.rawValue
        val _cbEnumValues = cbEnumValues
        val _pcbEnumValues = pcbEnumValues.rawValue
        val _pnEnumValues = pnEnumValues.rawValue
        val res = kni_EnumPrinterDataExA(_hPrinter, _pKeyName, _pEnumValues, _cbEnumValues, _pcbEnumValues, _pnEnumValues)
        res
    }
}

@SymbolName("win32_kni_EnumPrinterDataExA")
private external fun kni_EnumPrinterDataExA(hPrinter: NativePtr, pKeyName: NativePtr, pEnumValues: NativePtr, cbEnumValues: Int, pcbEnumValues: NativePtr, pnEnumValues: NativePtr): Int

fun EnumPrinterDataExW(hPrinter: HANDLE?, pKeyName: String?, pEnumValues: LPBYTE?, cbEnumValues: DWORD, pcbEnumValues: LPDWORD?, pnEnumValues: LPDWORD?): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.wcstr?.getPointer(memScope).rawValue
        val _pEnumValues = pEnumValues.rawValue
        val _cbEnumValues = cbEnumValues
        val _pcbEnumValues = pcbEnumValues.rawValue
        val _pnEnumValues = pnEnumValues.rawValue
        val res = kni_EnumPrinterDataExW(_hPrinter, _pKeyName, _pEnumValues, _cbEnumValues, _pcbEnumValues, _pnEnumValues)
        res
    }
}

@SymbolName("win32_kni_EnumPrinterDataExW")
private external fun kni_EnumPrinterDataExW(hPrinter: NativePtr, pKeyName: NativePtr, pEnumValues: NativePtr, cbEnumValues: Int, pcbEnumValues: NativePtr, pnEnumValues: NativePtr): Int

fun EnumPrinterKeyA(hPrinter: HANDLE?, pKeyName: String?, pSubkey: LPSTR?, cbSubkey: DWORD, pcbSubkey: LPDWORD?): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.cstr?.getPointer(memScope).rawValue
        val _pSubkey = pSubkey.rawValue
        val _cbSubkey = cbSubkey
        val _pcbSubkey = pcbSubkey.rawValue
        val res = kni_EnumPrinterKeyA(_hPrinter, _pKeyName, _pSubkey, _cbSubkey, _pcbSubkey)
        res
    }
}

@SymbolName("win32_kni_EnumPrinterKeyA")
private external fun kni_EnumPrinterKeyA(hPrinter: NativePtr, pKeyName: NativePtr, pSubkey: NativePtr, cbSubkey: Int, pcbSubkey: NativePtr): Int

fun EnumPrinterKeyW(hPrinter: HANDLE?, pKeyName: String?, pSubkey: LPWSTR?, cbSubkey: DWORD, pcbSubkey: LPDWORD?): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.wcstr?.getPointer(memScope).rawValue
        val _pSubkey = pSubkey.rawValue
        val _cbSubkey = cbSubkey
        val _pcbSubkey = pcbSubkey.rawValue
        val res = kni_EnumPrinterKeyW(_hPrinter, _pKeyName, _pSubkey, _cbSubkey, _pcbSubkey)
        res
    }
}

@SymbolName("win32_kni_EnumPrinterKeyW")
private external fun kni_EnumPrinterKeyW(hPrinter: NativePtr, pKeyName: NativePtr, pSubkey: NativePtr, cbSubkey: Int, pcbSubkey: NativePtr): Int

fun SetPrinterDataA(hPrinter: HANDLE?, pValueName: LPSTR?, Type: DWORD, pData: LPBYTE?, cbData: DWORD): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _pValueName = pValueName.rawValue
    val _Type = Type
    val _pData = pData.rawValue
    val _cbData = cbData
    val res = kni_SetPrinterDataA(_hPrinter, _pValueName, _Type, _pData, _cbData)
    return res
}

@SymbolName("win32_kni_SetPrinterDataA")
private external fun kni_SetPrinterDataA(hPrinter: NativePtr, pValueName: NativePtr, Type: Int, pData: NativePtr, cbData: Int): Int

fun SetPrinterDataW(hPrinter: HANDLE?, pValueName: LPWSTR?, Type: DWORD, pData: LPBYTE?, cbData: DWORD): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _pValueName = pValueName.rawValue
    val _Type = Type
    val _pData = pData.rawValue
    val _cbData = cbData
    val res = kni_SetPrinterDataW(_hPrinter, _pValueName, _Type, _pData, _cbData)
    return res
}

@SymbolName("win32_kni_SetPrinterDataW")
private external fun kni_SetPrinterDataW(hPrinter: NativePtr, pValueName: NativePtr, Type: Int, pData: NativePtr, cbData: Int): Int

fun SetPrinterDataExA(hPrinter: HANDLE?, pKeyName: String?, pValueName: String?, Type: DWORD, pData: LPBYTE?, cbData: DWORD): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.cstr?.getPointer(memScope).rawValue
        val _pValueName = pValueName?.cstr?.getPointer(memScope).rawValue
        val _Type = Type
        val _pData = pData.rawValue
        val _cbData = cbData
        val res = kni_SetPrinterDataExA(_hPrinter, _pKeyName, _pValueName, _Type, _pData, _cbData)
        res
    }
}

@SymbolName("win32_kni_SetPrinterDataExA")
private external fun kni_SetPrinterDataExA(hPrinter: NativePtr, pKeyName: NativePtr, pValueName: NativePtr, Type: Int, pData: NativePtr, cbData: Int): Int

fun SetPrinterDataExW(hPrinter: HANDLE?, pKeyName: String?, pValueName: String?, Type: DWORD, pData: LPBYTE?, cbData: DWORD): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.wcstr?.getPointer(memScope).rawValue
        val _pValueName = pValueName?.wcstr?.getPointer(memScope).rawValue
        val _Type = Type
        val _pData = pData.rawValue
        val _cbData = cbData
        val res = kni_SetPrinterDataExW(_hPrinter, _pKeyName, _pValueName, _Type, _pData, _cbData)
        res
    }
}

@SymbolName("win32_kni_SetPrinterDataExW")
private external fun kni_SetPrinterDataExW(hPrinter: NativePtr, pKeyName: NativePtr, pValueName: NativePtr, Type: Int, pData: NativePtr, cbData: Int): Int

fun DeletePrinterDataA(hPrinter: HANDLE?, pValueName: LPSTR?): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _pValueName = pValueName.rawValue
    val res = kni_DeletePrinterDataA(_hPrinter, _pValueName)
    return res
}

@SymbolName("win32_kni_DeletePrinterDataA")
private external fun kni_DeletePrinterDataA(hPrinter: NativePtr, pValueName: NativePtr): Int

fun DeletePrinterDataW(hPrinter: HANDLE?, pValueName: LPWSTR?): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _pValueName = pValueName.rawValue
    val res = kni_DeletePrinterDataW(_hPrinter, _pValueName)
    return res
}

@SymbolName("win32_kni_DeletePrinterDataW")
private external fun kni_DeletePrinterDataW(hPrinter: NativePtr, pValueName: NativePtr): Int

fun DeletePrinterDataExA(hPrinter: HANDLE?, pKeyName: String?, pValueName: String?): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.cstr?.getPointer(memScope).rawValue
        val _pValueName = pValueName?.cstr?.getPointer(memScope).rawValue
        val res = kni_DeletePrinterDataExA(_hPrinter, _pKeyName, _pValueName)
        res
    }
}

@SymbolName("win32_kni_DeletePrinterDataExA")
private external fun kni_DeletePrinterDataExA(hPrinter: NativePtr, pKeyName: NativePtr, pValueName: NativePtr): Int

fun DeletePrinterDataExW(hPrinter: HANDLE?, pKeyName: String?, pValueName: String?): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.wcstr?.getPointer(memScope).rawValue
        val _pValueName = pValueName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_DeletePrinterDataExW(_hPrinter, _pKeyName, _pValueName)
        res
    }
}

@SymbolName("win32_kni_DeletePrinterDataExW")
private external fun kni_DeletePrinterDataExW(hPrinter: NativePtr, pKeyName: NativePtr, pValueName: NativePtr): Int

fun DeletePrinterKeyA(hPrinter: HANDLE?, pKeyName: String?): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.cstr?.getPointer(memScope).rawValue
        val res = kni_DeletePrinterKeyA(_hPrinter, _pKeyName)
        res
    }
}

@SymbolName("win32_kni_DeletePrinterKeyA")
private external fun kni_DeletePrinterKeyA(hPrinter: NativePtr, pKeyName: NativePtr): Int

fun DeletePrinterKeyW(hPrinter: HANDLE?, pKeyName: String?): DWORD {
    return memScoped {
        val _hPrinter = hPrinter.rawValue
        val _pKeyName = pKeyName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_DeletePrinterKeyW(_hPrinter, _pKeyName)
        res
    }
}

@SymbolName("win32_kni_DeletePrinterKeyW")
private external fun kni_DeletePrinterKeyW(hPrinter: NativePtr, pKeyName: NativePtr): Int

fun WaitForPrinterChange(hPrinter: HANDLE?, Flags: DWORD): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _Flags = Flags
    val res = kni_WaitForPrinterChange(_hPrinter, _Flags)
    return res
}

@SymbolName("win32_kni_WaitForPrinterChange")
private external fun kni_WaitForPrinterChange(hPrinter: NativePtr, Flags: Int): Int

fun FindFirstPrinterChangeNotification(hPrinter: HANDLE?, fdwFlags: DWORD, fdwOptions: DWORD, pPrinterNotifyOptions: LPVOID?): HANDLE? {
    val _hPrinter = hPrinter.rawValue
    val _fdwFlags = fdwFlags
    val _fdwOptions = fdwOptions
    val _pPrinterNotifyOptions = pPrinterNotifyOptions.rawValue
    val res = kni_FindFirstPrinterChangeNotification(_hPrinter, _fdwFlags, _fdwOptions, _pPrinterNotifyOptions)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_FindFirstPrinterChangeNotification")
private external fun kni_FindFirstPrinterChangeNotification(hPrinter: NativePtr, fdwFlags: Int, fdwOptions: Int, pPrinterNotifyOptions: NativePtr): NativePtr

fun FindNextPrinterChangeNotification(hChange: HANDLE?, pdwChange: PDWORD?, pPrinterNotifyOptions: LPVOID?, ppPrinterNotifyInfo: CValuesRef<LPVOIDVar>?): WINBOOL {
    return memScoped {
        val _hChange = hChange.rawValue
        val _pdwChange = pdwChange.rawValue
        val _pPrinterNotifyOptions = pPrinterNotifyOptions.rawValue
        val _ppPrinterNotifyInfo = ppPrinterNotifyInfo?.getPointer(memScope).rawValue
        val res = kni_FindNextPrinterChangeNotification(_hChange, _pdwChange, _pPrinterNotifyOptions, _ppPrinterNotifyInfo)
        res
    }
}

@SymbolName("win32_kni_FindNextPrinterChangeNotification")
private external fun kni_FindNextPrinterChangeNotification(hChange: NativePtr, pdwChange: NativePtr, pPrinterNotifyOptions: NativePtr, ppPrinterNotifyInfo: NativePtr): Int

fun FreePrinterNotifyInfo(pPrinterNotifyInfo: PPRINTER_NOTIFY_INFO?): WINBOOL {
    val _pPrinterNotifyInfo = pPrinterNotifyInfo.rawValue
    val res = kni_FreePrinterNotifyInfo(_pPrinterNotifyInfo)
    return res
}

@SymbolName("win32_kni_FreePrinterNotifyInfo")
private external fun kni_FreePrinterNotifyInfo(pPrinterNotifyInfo: NativePtr): Int

fun FindClosePrinterChangeNotification(hChange: HANDLE?): WINBOOL {
    val _hChange = hChange.rawValue
    val res = kni_FindClosePrinterChangeNotification(_hChange)
    return res
}

@SymbolName("win32_kni_FindClosePrinterChangeNotification")
private external fun kni_FindClosePrinterChangeNotification(hChange: NativePtr): Int

fun PrinterMessageBoxA(hPrinter: HANDLE?, Error: DWORD, hWnd: HWND?, pText: LPSTR?, pCaption: LPSTR?, dwType: DWORD): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _Error = Error
    val _hWnd = hWnd.rawValue
    val _pText = pText.rawValue
    val _pCaption = pCaption.rawValue
    val _dwType = dwType
    val res = kni_PrinterMessageBoxA(_hPrinter, _Error, _hWnd, _pText, _pCaption, _dwType)
    return res
}

@SymbolName("win32_kni_PrinterMessageBoxA")
private external fun kni_PrinterMessageBoxA(hPrinter: NativePtr, Error: Int, hWnd: NativePtr, pText: NativePtr, pCaption: NativePtr, dwType: Int): Int

fun PrinterMessageBoxW(hPrinter: HANDLE?, Error: DWORD, hWnd: HWND?, pText: LPWSTR?, pCaption: LPWSTR?, dwType: DWORD): DWORD {
    val _hPrinter = hPrinter.rawValue
    val _Error = Error
    val _hWnd = hWnd.rawValue
    val _pText = pText.rawValue
    val _pCaption = pCaption.rawValue
    val _dwType = dwType
    val res = kni_PrinterMessageBoxW(_hPrinter, _Error, _hWnd, _pText, _pCaption, _dwType)
    return res
}

@SymbolName("win32_kni_PrinterMessageBoxW")
private external fun kni_PrinterMessageBoxW(hPrinter: NativePtr, Error: Int, hWnd: NativePtr, pText: NativePtr, pCaption: NativePtr, dwType: Int): Int

fun ClosePrinter(hPrinter: HANDLE?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val res = kni_ClosePrinter(_hPrinter)
    return res
}

@SymbolName("win32_kni_ClosePrinter")
private external fun kni_ClosePrinter(hPrinter: NativePtr): Int

fun AddFormA(hPrinter: HANDLE?, Level: DWORD, pForm: LPBYTE?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pForm = pForm.rawValue
    val res = kni_AddFormA(_hPrinter, _Level, _pForm)
    return res
}

@SymbolName("win32_kni_AddFormA")
private external fun kni_AddFormA(hPrinter: NativePtr, Level: Int, pForm: NativePtr): Int

fun AddFormW(hPrinter: HANDLE?, Level: DWORD, pForm: LPBYTE?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pForm = pForm.rawValue
    val res = kni_AddFormW(_hPrinter, _Level, _pForm)
    return res
}

@SymbolName("win32_kni_AddFormW")
private external fun kni_AddFormW(hPrinter: NativePtr, Level: Int, pForm: NativePtr): Int

fun DeleteFormA(hPrinter: HANDLE?, pFormName: LPSTR?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pFormName = pFormName.rawValue
    val res = kni_DeleteFormA(_hPrinter, _pFormName)
    return res
}

@SymbolName("win32_kni_DeleteFormA")
private external fun kni_DeleteFormA(hPrinter: NativePtr, pFormName: NativePtr): Int

fun DeleteFormW(hPrinter: HANDLE?, pFormName: LPWSTR?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pFormName = pFormName.rawValue
    val res = kni_DeleteFormW(_hPrinter, _pFormName)
    return res
}

@SymbolName("win32_kni_DeleteFormW")
private external fun kni_DeleteFormW(hPrinter: NativePtr, pFormName: NativePtr): Int

fun GetFormA(hPrinter: HANDLE?, pFormName: LPSTR?, Level: DWORD, pForm: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pFormName = pFormName.rawValue
    val _Level = Level
    val _pForm = pForm.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetFormA(_hPrinter, _pFormName, _Level, _pForm, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetFormA")
private external fun kni_GetFormA(hPrinter: NativePtr, pFormName: NativePtr, Level: Int, pForm: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun GetFormW(hPrinter: HANDLE?, pFormName: LPWSTR?, Level: DWORD, pForm: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pFormName = pFormName.rawValue
    val _Level = Level
    val _pForm = pForm.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val res = kni_GetFormW(_hPrinter, _pFormName, _Level, _pForm, _cbBuf, _pcbNeeded)
    return res
}

@SymbolName("win32_kni_GetFormW")
private external fun kni_GetFormW(hPrinter: NativePtr, pFormName: NativePtr, Level: Int, pForm: NativePtr, cbBuf: Int, pcbNeeded: NativePtr): Int

fun SetFormA(hPrinter: HANDLE?, pFormName: LPSTR?, Level: DWORD, pForm: LPBYTE?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pFormName = pFormName.rawValue
    val _Level = Level
    val _pForm = pForm.rawValue
    val res = kni_SetFormA(_hPrinter, _pFormName, _Level, _pForm)
    return res
}

@SymbolName("win32_kni_SetFormA")
private external fun kni_SetFormA(hPrinter: NativePtr, pFormName: NativePtr, Level: Int, pForm: NativePtr): Int

fun SetFormW(hPrinter: HANDLE?, pFormName: LPWSTR?, Level: DWORD, pForm: LPBYTE?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _pFormName = pFormName.rawValue
    val _Level = Level
    val _pForm = pForm.rawValue
    val res = kni_SetFormW(_hPrinter, _pFormName, _Level, _pForm)
    return res
}

@SymbolName("win32_kni_SetFormW")
private external fun kni_SetFormW(hPrinter: NativePtr, pFormName: NativePtr, Level: Int, pForm: NativePtr): Int

fun EnumFormsA(hPrinter: HANDLE?, Level: DWORD, pForm: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pForm = pForm.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumFormsA(_hPrinter, _Level, _pForm, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumFormsA")
private external fun kni_EnumFormsA(hPrinter: NativePtr, Level: Int, pForm: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun EnumFormsW(hPrinter: HANDLE?, Level: DWORD, pForm: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _hPrinter = hPrinter.rawValue
    val _Level = Level
    val _pForm = pForm.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumFormsW(_hPrinter, _Level, _pForm, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumFormsW")
private external fun kni_EnumFormsW(hPrinter: NativePtr, Level: Int, pForm: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun EnumMonitorsA(pName: LPSTR?, Level: DWORD, pMonitor: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _Level = Level
    val _pMonitor = pMonitor.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumMonitorsA(_pName, _Level, _pMonitor, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumMonitorsA")
private external fun kni_EnumMonitorsA(pName: NativePtr, Level: Int, pMonitor: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun EnumMonitorsW(pName: LPWSTR?, Level: DWORD, pMonitor: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _Level = Level
    val _pMonitor = pMonitor.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumMonitorsW(_pName, _Level, _pMonitor, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumMonitorsW")
private external fun kni_EnumMonitorsW(pName: NativePtr, Level: Int, pMonitor: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun AddMonitorA(pName: LPSTR?, Level: DWORD, pMonitorInfo: LPBYTE?): WINBOOL {
    val _pName = pName.rawValue
    val _Level = Level
    val _pMonitorInfo = pMonitorInfo.rawValue
    val res = kni_AddMonitorA(_pName, _Level, _pMonitorInfo)
    return res
}

@SymbolName("win32_kni_AddMonitorA")
private external fun kni_AddMonitorA(pName: NativePtr, Level: Int, pMonitorInfo: NativePtr): Int

fun AddMonitorW(pName: LPWSTR?, Level: DWORD, pMonitorInfo: LPBYTE?): WINBOOL {
    val _pName = pName.rawValue
    val _Level = Level
    val _pMonitorInfo = pMonitorInfo.rawValue
    val res = kni_AddMonitorW(_pName, _Level, _pMonitorInfo)
    return res
}

@SymbolName("win32_kni_AddMonitorW")
private external fun kni_AddMonitorW(pName: NativePtr, Level: Int, pMonitorInfo: NativePtr): Int

fun DeleteMonitorA(pName: LPSTR?, pEnvironment: LPSTR?, pMonitorName: LPSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pMonitorName = pMonitorName.rawValue
    val res = kni_DeleteMonitorA(_pName, _pEnvironment, _pMonitorName)
    return res
}

@SymbolName("win32_kni_DeleteMonitorA")
private external fun kni_DeleteMonitorA(pName: NativePtr, pEnvironment: NativePtr, pMonitorName: NativePtr): Int

fun DeleteMonitorW(pName: LPWSTR?, pEnvironment: LPWSTR?, pMonitorName: LPWSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pMonitorName = pMonitorName.rawValue
    val res = kni_DeleteMonitorW(_pName, _pEnvironment, _pMonitorName)
    return res
}

@SymbolName("win32_kni_DeleteMonitorW")
private external fun kni_DeleteMonitorW(pName: NativePtr, pEnvironment: NativePtr, pMonitorName: NativePtr): Int

fun EnumPortsA(pName: LPSTR?, Level: DWORD, pPorts: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _Level = Level
    val _pPorts = pPorts.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumPortsA(_pName, _Level, _pPorts, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumPortsA")
private external fun kni_EnumPortsA(pName: NativePtr, Level: Int, pPorts: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun EnumPortsW(pName: LPWSTR?, Level: DWORD, pPorts: LPBYTE?, cbBuf: DWORD, pcbNeeded: LPDWORD?, pcReturned: LPDWORD?): WINBOOL {
    val _pName = pName.rawValue
    val _Level = Level
    val _pPorts = pPorts.rawValue
    val _cbBuf = cbBuf
    val _pcbNeeded = pcbNeeded.rawValue
    val _pcReturned = pcReturned.rawValue
    val res = kni_EnumPortsW(_pName, _Level, _pPorts, _cbBuf, _pcbNeeded, _pcReturned)
    return res
}

@SymbolName("win32_kni_EnumPortsW")
private external fun kni_EnumPortsW(pName: NativePtr, Level: Int, pPorts: NativePtr, cbBuf: Int, pcbNeeded: NativePtr, pcReturned: NativePtr): Int

fun AddPortA(pName: LPSTR?, hWnd: HWND?, pMonitorName: LPSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _hWnd = hWnd.rawValue
    val _pMonitorName = pMonitorName.rawValue
    val res = kni_AddPortA(_pName, _hWnd, _pMonitorName)
    return res
}

@SymbolName("win32_kni_AddPortA")
private external fun kni_AddPortA(pName: NativePtr, hWnd: NativePtr, pMonitorName: NativePtr): Int

fun AddPortW(pName: LPWSTR?, hWnd: HWND?, pMonitorName: LPWSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _hWnd = hWnd.rawValue
    val _pMonitorName = pMonitorName.rawValue
    val res = kni_AddPortW(_pName, _hWnd, _pMonitorName)
    return res
}

@SymbolName("win32_kni_AddPortW")
private external fun kni_AddPortW(pName: NativePtr, hWnd: NativePtr, pMonitorName: NativePtr): Int

fun ConfigurePortA(pName: LPSTR?, hWnd: HWND?, pPortName: LPSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _hWnd = hWnd.rawValue
    val _pPortName = pPortName.rawValue
    val res = kni_ConfigurePortA(_pName, _hWnd, _pPortName)
    return res
}

@SymbolName("win32_kni_ConfigurePortA")
private external fun kni_ConfigurePortA(pName: NativePtr, hWnd: NativePtr, pPortName: NativePtr): Int

fun ConfigurePortW(pName: LPWSTR?, hWnd: HWND?, pPortName: LPWSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _hWnd = hWnd.rawValue
    val _pPortName = pPortName.rawValue
    val res = kni_ConfigurePortW(_pName, _hWnd, _pPortName)
    return res
}

@SymbolName("win32_kni_ConfigurePortW")
private external fun kni_ConfigurePortW(pName: NativePtr, hWnd: NativePtr, pPortName: NativePtr): Int

fun DeletePortA(pName: LPSTR?, hWnd: HWND?, pPortName: LPSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _hWnd = hWnd.rawValue
    val _pPortName = pPortName.rawValue
    val res = kni_DeletePortA(_pName, _hWnd, _pPortName)
    return res
}

@SymbolName("win32_kni_DeletePortA")
private external fun kni_DeletePortA(pName: NativePtr, hWnd: NativePtr, pPortName: NativePtr): Int

fun DeletePortW(pName: LPWSTR?, hWnd: HWND?, pPortName: LPWSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _hWnd = hWnd.rawValue
    val _pPortName = pPortName.rawValue
    val res = kni_DeletePortW(_pName, _hWnd, _pPortName)
    return res
}

@SymbolName("win32_kni_DeletePortW")
private external fun kni_DeletePortW(pName: NativePtr, hWnd: NativePtr, pPortName: NativePtr): Int

fun XcvDataW(hXcv: HANDLE?, pszDataName: PCWSTR?, pInputData: PBYTE?, cbInputData: DWORD, pOutputData: PBYTE?, cbOutputData: DWORD, pcbOutputNeeded: PDWORD?, pdwStatus: PDWORD?): WINBOOL {
    val _hXcv = hXcv.rawValue
    val _pszDataName = pszDataName.rawValue
    val _pInputData = pInputData.rawValue
    val _cbInputData = cbInputData
    val _pOutputData = pOutputData.rawValue
    val _cbOutputData = cbOutputData
    val _pcbOutputNeeded = pcbOutputNeeded.rawValue
    val _pdwStatus = pdwStatus.rawValue
    val res = kni_XcvDataW(_hXcv, _pszDataName, _pInputData, _cbInputData, _pOutputData, _cbOutputData, _pcbOutputNeeded, _pdwStatus)
    return res
}

@SymbolName("win32_kni_XcvDataW")
private external fun kni_XcvDataW(hXcv: NativePtr, pszDataName: NativePtr, pInputData: NativePtr, cbInputData: Int, pOutputData: NativePtr, cbOutputData: Int, pcbOutputNeeded: NativePtr, pdwStatus: NativePtr): Int

fun GetDefaultPrinterA(pszBuffer: LPSTR?, pcchBuffer: LPDWORD?): WINBOOL {
    val _pszBuffer = pszBuffer.rawValue
    val _pcchBuffer = pcchBuffer.rawValue
    val res = kni_GetDefaultPrinterA(_pszBuffer, _pcchBuffer)
    return res
}

@SymbolName("win32_kni_GetDefaultPrinterA")
private external fun kni_GetDefaultPrinterA(pszBuffer: NativePtr, pcchBuffer: NativePtr): Int

fun GetDefaultPrinterW(pszBuffer: LPWSTR?, pcchBuffer: LPDWORD?): WINBOOL {
    val _pszBuffer = pszBuffer.rawValue
    val _pcchBuffer = pcchBuffer.rawValue
    val res = kni_GetDefaultPrinterW(_pszBuffer, _pcchBuffer)
    return res
}

@SymbolName("win32_kni_GetDefaultPrinterW")
private external fun kni_GetDefaultPrinterW(pszBuffer: NativePtr, pcchBuffer: NativePtr): Int

fun SetDefaultPrinterA(pszPrinter: String?): WINBOOL {
    return memScoped {
        val _pszPrinter = pszPrinter?.cstr?.getPointer(memScope).rawValue
        val res = kni_SetDefaultPrinterA(_pszPrinter)
        res
    }
}

@SymbolName("win32_kni_SetDefaultPrinterA")
private external fun kni_SetDefaultPrinterA(pszPrinter: NativePtr): Int

fun SetDefaultPrinterW(pszPrinter: String?): WINBOOL {
    return memScoped {
        val _pszPrinter = pszPrinter?.wcstr?.getPointer(memScope).rawValue
        val res = kni_SetDefaultPrinterW(_pszPrinter)
        res
    }
}

@SymbolName("win32_kni_SetDefaultPrinterW")
private external fun kni_SetDefaultPrinterW(pszPrinter: NativePtr): Int

fun SetPortA(pName: LPSTR?, pPortName: LPSTR?, dwLevel: DWORD, pPortInfo: LPBYTE?): WINBOOL {
    val _pName = pName.rawValue
    val _pPortName = pPortName.rawValue
    val _dwLevel = dwLevel
    val _pPortInfo = pPortInfo.rawValue
    val res = kni_SetPortA(_pName, _pPortName, _dwLevel, _pPortInfo)
    return res
}

@SymbolName("win32_kni_SetPortA")
private external fun kni_SetPortA(pName: NativePtr, pPortName: NativePtr, dwLevel: Int, pPortInfo: NativePtr): Int

fun SetPortW(pName: LPWSTR?, pPortName: LPWSTR?, dwLevel: DWORD, pPortInfo: LPBYTE?): WINBOOL {
    val _pName = pName.rawValue
    val _pPortName = pPortName.rawValue
    val _dwLevel = dwLevel
    val _pPortInfo = pPortInfo.rawValue
    val res = kni_SetPortW(_pName, _pPortName, _dwLevel, _pPortInfo)
    return res
}

@SymbolName("win32_kni_SetPortW")
private external fun kni_SetPortW(pName: NativePtr, pPortName: NativePtr, dwLevel: Int, pPortInfo: NativePtr): Int

fun AddPrinterConnectionA(pName: LPSTR?): WINBOOL {
    val _pName = pName.rawValue
    val res = kni_AddPrinterConnectionA(_pName)
    return res
}

@SymbolName("win32_kni_AddPrinterConnectionA")
private external fun kni_AddPrinterConnectionA(pName: NativePtr): Int

fun AddPrinterConnectionW(pName: LPWSTR?): WINBOOL {
    val _pName = pName.rawValue
    val res = kni_AddPrinterConnectionW(_pName)
    return res
}

@SymbolName("win32_kni_AddPrinterConnectionW")
private external fun kni_AddPrinterConnectionW(pName: NativePtr): Int

fun DeletePrinterConnectionA(pName: LPSTR?): WINBOOL {
    val _pName = pName.rawValue
    val res = kni_DeletePrinterConnectionA(_pName)
    return res
}

@SymbolName("win32_kni_DeletePrinterConnectionA")
private external fun kni_DeletePrinterConnectionA(pName: NativePtr): Int

fun DeletePrinterConnectionW(pName: LPWSTR?): WINBOOL {
    val _pName = pName.rawValue
    val res = kni_DeletePrinterConnectionW(_pName)
    return res
}

@SymbolName("win32_kni_DeletePrinterConnectionW")
private external fun kni_DeletePrinterConnectionW(pName: NativePtr): Int

fun ConnectToPrinterDlg(hwnd: HWND?, Flags: DWORD): HANDLE? {
    val _hwnd = hwnd.rawValue
    val _Flags = Flags
    val res = kni_ConnectToPrinterDlg(_hwnd, _Flags)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_ConnectToPrinterDlg")
private external fun kni_ConnectToPrinterDlg(hwnd: NativePtr, Flags: Int): NativePtr

fun AddPrintProvidorA(pName: LPSTR?, level: DWORD, pProvidorInfo: LPBYTE?): WINBOOL {
    val _pName = pName.rawValue
    val _level = level
    val _pProvidorInfo = pProvidorInfo.rawValue
    val res = kni_AddPrintProvidorA(_pName, _level, _pProvidorInfo)
    return res
}

@SymbolName("win32_kni_AddPrintProvidorA")
private external fun kni_AddPrintProvidorA(pName: NativePtr, level: Int, pProvidorInfo: NativePtr): Int

fun AddPrintProvidorW(pName: LPWSTR?, level: DWORD, pProvidorInfo: LPBYTE?): WINBOOL {
    val _pName = pName.rawValue
    val _level = level
    val _pProvidorInfo = pProvidorInfo.rawValue
    val res = kni_AddPrintProvidorW(_pName, _level, _pProvidorInfo)
    return res
}

@SymbolName("win32_kni_AddPrintProvidorW")
private external fun kni_AddPrintProvidorW(pName: NativePtr, level: Int, pProvidorInfo: NativePtr): Int

fun DeletePrintProvidorA(pName: LPSTR?, pEnvironment: LPSTR?, pPrintProvidorName: LPSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pPrintProvidorName = pPrintProvidorName.rawValue
    val res = kni_DeletePrintProvidorA(_pName, _pEnvironment, _pPrintProvidorName)
    return res
}

@SymbolName("win32_kni_DeletePrintProvidorA")
private external fun kni_DeletePrintProvidorA(pName: NativePtr, pEnvironment: NativePtr, pPrintProvidorName: NativePtr): Int

fun DeletePrintProvidorW(pName: LPWSTR?, pEnvironment: LPWSTR?, pPrintProvidorName: LPWSTR?): WINBOOL {
    val _pName = pName.rawValue
    val _pEnvironment = pEnvironment.rawValue
    val _pPrintProvidorName = pPrintProvidorName.rawValue
    val res = kni_DeletePrintProvidorW(_pName, _pEnvironment, _pPrintProvidorName)
    return res
}

@SymbolName("win32_kni_DeletePrintProvidorW")
private external fun kni_DeletePrintProvidorW(pName: NativePtr, pEnvironment: NativePtr, pPrintProvidorName: NativePtr): Int

fun IsValidDevmodeA(pDevmode: PDEVMODEA?, DevmodeSize: size_t): WINBOOL {
    val _pDevmode = pDevmode.rawValue
    val _DevmodeSize = DevmodeSize
    val res = kni_IsValidDevmodeA(_pDevmode, _DevmodeSize)
    return res
}

@SymbolName("win32_kni_IsValidDevmodeA")
private external fun kni_IsValidDevmodeA(pDevmode: NativePtr, DevmodeSize: Long): Int

fun IsValidDevmodeW(pDevmode: PDEVMODEW?, DevmodeSize: size_t): WINBOOL {
    val _pDevmode = pDevmode.rawValue
    val _DevmodeSize = DevmodeSize
    val res = kni_IsValidDevmodeW(_pDevmode, _DevmodeSize)
    return res
}

@SymbolName("win32_kni_IsValidDevmodeW")
private external fun kni_IsValidDevmodeW(pDevmode: NativePtr, DevmodeSize: Long): Int

fun ChangeServiceConfigA(hService: SC_HANDLE?, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: String?, lpLoadOrderGroup: String?, lpdwTagId: LPDWORD?, lpDependencies: String?, lpServiceStartName: String?, lpPassword: String?, lpDisplayName: String?): WINBOOL {
    return memScoped {
        val _hService = hService.rawValue
        val _dwServiceType = dwServiceType
        val _dwStartType = dwStartType
        val _dwErrorControl = dwErrorControl
        val _lpBinaryPathName = lpBinaryPathName?.cstr?.getPointer(memScope).rawValue
        val _lpLoadOrderGroup = lpLoadOrderGroup?.cstr?.getPointer(memScope).rawValue
        val _lpdwTagId = lpdwTagId.rawValue
        val _lpDependencies = lpDependencies?.cstr?.getPointer(memScope).rawValue
        val _lpServiceStartName = lpServiceStartName?.cstr?.getPointer(memScope).rawValue
        val _lpPassword = lpPassword?.cstr?.getPointer(memScope).rawValue
        val _lpDisplayName = lpDisplayName?.cstr?.getPointer(memScope).rawValue
        val res = kni_ChangeServiceConfigA(_hService, _dwServiceType, _dwStartType, _dwErrorControl, _lpBinaryPathName, _lpLoadOrderGroup, _lpdwTagId, _lpDependencies, _lpServiceStartName, _lpPassword, _lpDisplayName)
        res
    }
}

@SymbolName("win32_kni_ChangeServiceConfigA")
private external fun kni_ChangeServiceConfigA(hService: NativePtr, dwServiceType: Int, dwStartType: Int, dwErrorControl: Int, lpBinaryPathName: NativePtr, lpLoadOrderGroup: NativePtr, lpdwTagId: NativePtr, lpDependencies: NativePtr, lpServiceStartName: NativePtr, lpPassword: NativePtr, lpDisplayName: NativePtr): Int

fun ChangeServiceConfigW(hService: SC_HANDLE?, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: String?, lpLoadOrderGroup: String?, lpdwTagId: LPDWORD?, lpDependencies: String?, lpServiceStartName: String?, lpPassword: String?, lpDisplayName: String?): WINBOOL {
    return memScoped {
        val _hService = hService.rawValue
        val _dwServiceType = dwServiceType
        val _dwStartType = dwStartType
        val _dwErrorControl = dwErrorControl
        val _lpBinaryPathName = lpBinaryPathName?.wcstr?.getPointer(memScope).rawValue
        val _lpLoadOrderGroup = lpLoadOrderGroup?.wcstr?.getPointer(memScope).rawValue
        val _lpdwTagId = lpdwTagId.rawValue
        val _lpDependencies = lpDependencies?.wcstr?.getPointer(memScope).rawValue
        val _lpServiceStartName = lpServiceStartName?.wcstr?.getPointer(memScope).rawValue
        val _lpPassword = lpPassword?.wcstr?.getPointer(memScope).rawValue
        val _lpDisplayName = lpDisplayName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_ChangeServiceConfigW(_hService, _dwServiceType, _dwStartType, _dwErrorControl, _lpBinaryPathName, _lpLoadOrderGroup, _lpdwTagId, _lpDependencies, _lpServiceStartName, _lpPassword, _lpDisplayName)
        res
    }
}

@SymbolName("win32_kni_ChangeServiceConfigW")
private external fun kni_ChangeServiceConfigW(hService: NativePtr, dwServiceType: Int, dwStartType: Int, dwErrorControl: Int, lpBinaryPathName: NativePtr, lpLoadOrderGroup: NativePtr, lpdwTagId: NativePtr, lpDependencies: NativePtr, lpServiceStartName: NativePtr, lpPassword: NativePtr, lpDisplayName: NativePtr): Int

fun ChangeServiceConfig2A(hService: SC_HANDLE?, dwInfoLevel: DWORD, lpInfo: LPVOID?): WINBOOL {
    val _hService = hService.rawValue
    val _dwInfoLevel = dwInfoLevel
    val _lpInfo = lpInfo.rawValue
    val res = kni_ChangeServiceConfig2A(_hService, _dwInfoLevel, _lpInfo)
    return res
}

@SymbolName("win32_kni_ChangeServiceConfig2A")
private external fun kni_ChangeServiceConfig2A(hService: NativePtr, dwInfoLevel: Int, lpInfo: NativePtr): Int

fun ChangeServiceConfig2W(hService: SC_HANDLE?, dwInfoLevel: DWORD, lpInfo: LPVOID?): WINBOOL {
    val _hService = hService.rawValue
    val _dwInfoLevel = dwInfoLevel
    val _lpInfo = lpInfo.rawValue
    val res = kni_ChangeServiceConfig2W(_hService, _dwInfoLevel, _lpInfo)
    return res
}

@SymbolName("win32_kni_ChangeServiceConfig2W")
private external fun kni_ChangeServiceConfig2W(hService: NativePtr, dwInfoLevel: Int, lpInfo: NativePtr): Int

fun CloseServiceHandle(hSCObject: SC_HANDLE?): WINBOOL {
    val _hSCObject = hSCObject.rawValue
    val res = kni_CloseServiceHandle(_hSCObject)
    return res
}

@SymbolName("win32_kni_CloseServiceHandle")
private external fun kni_CloseServiceHandle(hSCObject: NativePtr): Int

fun ControlService(hService: SC_HANDLE?, dwControl: DWORD, lpServiceStatus: LPSERVICE_STATUS?): WINBOOL {
    val _hService = hService.rawValue
    val _dwControl = dwControl
    val _lpServiceStatus = lpServiceStatus.rawValue
    val res = kni_ControlService(_hService, _dwControl, _lpServiceStatus)
    return res
}

@SymbolName("win32_kni_ControlService")
private external fun kni_ControlService(hService: NativePtr, dwControl: Int, lpServiceStatus: NativePtr): Int

fun CreateServiceA(hSCManager: SC_HANDLE?, lpServiceName: String?, lpDisplayName: String?, dwDesiredAccess: DWORD, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: String?, lpLoadOrderGroup: String?, lpdwTagId: LPDWORD?, lpDependencies: String?, lpServiceStartName: String?, lpPassword: String?): SC_HANDLE? {
    return memScoped {
        val _hSCManager = hSCManager.rawValue
        val _lpServiceName = lpServiceName?.cstr?.getPointer(memScope).rawValue
        val _lpDisplayName = lpDisplayName?.cstr?.getPointer(memScope).rawValue
        val _dwDesiredAccess = dwDesiredAccess
        val _dwServiceType = dwServiceType
        val _dwStartType = dwStartType
        val _dwErrorControl = dwErrorControl
        val _lpBinaryPathName = lpBinaryPathName?.cstr?.getPointer(memScope).rawValue
        val _lpLoadOrderGroup = lpLoadOrderGroup?.cstr?.getPointer(memScope).rawValue
        val _lpdwTagId = lpdwTagId.rawValue
        val _lpDependencies = lpDependencies?.cstr?.getPointer(memScope).rawValue
        val _lpServiceStartName = lpServiceStartName?.cstr?.getPointer(memScope).rawValue
        val _lpPassword = lpPassword?.cstr?.getPointer(memScope).rawValue
        val res = kni_CreateServiceA(_hSCManager, _lpServiceName, _lpDisplayName, _dwDesiredAccess, _dwServiceType, _dwStartType, _dwErrorControl, _lpBinaryPathName, _lpLoadOrderGroup, _lpdwTagId, _lpDependencies, _lpServiceStartName, _lpPassword)
        interpretCPointer<SC_HANDLE__>(res)
    }
}

@SymbolName("win32_kni_CreateServiceA")
private external fun kni_CreateServiceA(hSCManager: NativePtr, lpServiceName: NativePtr, lpDisplayName: NativePtr, dwDesiredAccess: Int, dwServiceType: Int, dwStartType: Int, dwErrorControl: Int, lpBinaryPathName: NativePtr, lpLoadOrderGroup: NativePtr, lpdwTagId: NativePtr, lpDependencies: NativePtr, lpServiceStartName: NativePtr, lpPassword: NativePtr): NativePtr

fun CreateServiceW(hSCManager: SC_HANDLE?, lpServiceName: String?, lpDisplayName: String?, dwDesiredAccess: DWORD, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: String?, lpLoadOrderGroup: String?, lpdwTagId: LPDWORD?, lpDependencies: String?, lpServiceStartName: String?, lpPassword: String?): SC_HANDLE? {
    return memScoped {
        val _hSCManager = hSCManager.rawValue
        val _lpServiceName = lpServiceName?.wcstr?.getPointer(memScope).rawValue
        val _lpDisplayName = lpDisplayName?.wcstr?.getPointer(memScope).rawValue
        val _dwDesiredAccess = dwDesiredAccess
        val _dwServiceType = dwServiceType
        val _dwStartType = dwStartType
        val _dwErrorControl = dwErrorControl
        val _lpBinaryPathName = lpBinaryPathName?.wcstr?.getPointer(memScope).rawValue
        val _lpLoadOrderGroup = lpLoadOrderGroup?.wcstr?.getPointer(memScope).rawValue
        val _lpdwTagId = lpdwTagId.rawValue
        val _lpDependencies = lpDependencies?.wcstr?.getPointer(memScope).rawValue
        val _lpServiceStartName = lpServiceStartName?.wcstr?.getPointer(memScope).rawValue
        val _lpPassword = lpPassword?.wcstr?.getPointer(memScope).rawValue
        val res = kni_CreateServiceW(_hSCManager, _lpServiceName, _lpDisplayName, _dwDesiredAccess, _dwServiceType, _dwStartType, _dwErrorControl, _lpBinaryPathName, _lpLoadOrderGroup, _lpdwTagId, _lpDependencies, _lpServiceStartName, _lpPassword)
        interpretCPointer<SC_HANDLE__>(res)
    }
}

@SymbolName("win32_kni_CreateServiceW")
private external fun kni_CreateServiceW(hSCManager: NativePtr, lpServiceName: NativePtr, lpDisplayName: NativePtr, dwDesiredAccess: Int, dwServiceType: Int, dwStartType: Int, dwErrorControl: Int, lpBinaryPathName: NativePtr, lpLoadOrderGroup: NativePtr, lpdwTagId: NativePtr, lpDependencies: NativePtr, lpServiceStartName: NativePtr, lpPassword: NativePtr): NativePtr

fun DeleteService(hService: SC_HANDLE?): WINBOOL {
    val _hService = hService.rawValue
    val res = kni_DeleteService(_hService)
    return res
}

@SymbolName("win32_kni_DeleteService")
private external fun kni_DeleteService(hService: NativePtr): Int

fun EnumDependentServicesA(hService: SC_HANDLE?, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSA?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?, lpServicesReturned: LPDWORD?): WINBOOL {
    val _hService = hService.rawValue
    val _dwServiceState = dwServiceState
    val _lpServices = lpServices.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val _lpServicesReturned = lpServicesReturned.rawValue
    val res = kni_EnumDependentServicesA(_hService, _dwServiceState, _lpServices, _cbBufSize, _pcbBytesNeeded, _lpServicesReturned)
    return res
}

@SymbolName("win32_kni_EnumDependentServicesA")
private external fun kni_EnumDependentServicesA(hService: NativePtr, dwServiceState: Int, lpServices: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr, lpServicesReturned: NativePtr): Int

fun EnumDependentServicesW(hService: SC_HANDLE?, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSW?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?, lpServicesReturned: LPDWORD?): WINBOOL {
    val _hService = hService.rawValue
    val _dwServiceState = dwServiceState
    val _lpServices = lpServices.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val _lpServicesReturned = lpServicesReturned.rawValue
    val res = kni_EnumDependentServicesW(_hService, _dwServiceState, _lpServices, _cbBufSize, _pcbBytesNeeded, _lpServicesReturned)
    return res
}

@SymbolName("win32_kni_EnumDependentServicesW")
private external fun kni_EnumDependentServicesW(hService: NativePtr, dwServiceState: Int, lpServices: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr, lpServicesReturned: NativePtr): Int

fun EnumServicesStatusA(hSCManager: SC_HANDLE?, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSA?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?, lpServicesReturned: LPDWORD?, lpResumeHandle: LPDWORD?): WINBOOL {
    val _hSCManager = hSCManager.rawValue
    val _dwServiceType = dwServiceType
    val _dwServiceState = dwServiceState
    val _lpServices = lpServices.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val _lpServicesReturned = lpServicesReturned.rawValue
    val _lpResumeHandle = lpResumeHandle.rawValue
    val res = kni_EnumServicesStatusA(_hSCManager, _dwServiceType, _dwServiceState, _lpServices, _cbBufSize, _pcbBytesNeeded, _lpServicesReturned, _lpResumeHandle)
    return res
}

@SymbolName("win32_kni_EnumServicesStatusA")
private external fun kni_EnumServicesStatusA(hSCManager: NativePtr, dwServiceType: Int, dwServiceState: Int, lpServices: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr, lpServicesReturned: NativePtr, lpResumeHandle: NativePtr): Int

fun EnumServicesStatusW(hSCManager: SC_HANDLE?, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSW?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?, lpServicesReturned: LPDWORD?, lpResumeHandle: LPDWORD?): WINBOOL {
    val _hSCManager = hSCManager.rawValue
    val _dwServiceType = dwServiceType
    val _dwServiceState = dwServiceState
    val _lpServices = lpServices.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val _lpServicesReturned = lpServicesReturned.rawValue
    val _lpResumeHandle = lpResumeHandle.rawValue
    val res = kni_EnumServicesStatusW(_hSCManager, _dwServiceType, _dwServiceState, _lpServices, _cbBufSize, _pcbBytesNeeded, _lpServicesReturned, _lpResumeHandle)
    return res
}

@SymbolName("win32_kni_EnumServicesStatusW")
private external fun kni_EnumServicesStatusW(hSCManager: NativePtr, dwServiceType: Int, dwServiceState: Int, lpServices: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr, lpServicesReturned: NativePtr, lpResumeHandle: NativePtr): Int

fun EnumServicesStatusExA(hSCManager: SC_HANDLE?, InfoLevel: SC_ENUM_TYPE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPBYTE?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?, lpServicesReturned: LPDWORD?, lpResumeHandle: LPDWORD?, pszGroupName: String?): WINBOOL {
    return memScoped {
        val _hSCManager = hSCManager.rawValue
        val _InfoLevel = InfoLevel
        val _dwServiceType = dwServiceType
        val _dwServiceState = dwServiceState
        val _lpServices = lpServices.rawValue
        val _cbBufSize = cbBufSize
        val _pcbBytesNeeded = pcbBytesNeeded.rawValue
        val _lpServicesReturned = lpServicesReturned.rawValue
        val _lpResumeHandle = lpResumeHandle.rawValue
        val _pszGroupName = pszGroupName?.cstr?.getPointer(memScope).rawValue
        val res = kni_EnumServicesStatusExA(_hSCManager, _InfoLevel, _dwServiceType, _dwServiceState, _lpServices, _cbBufSize, _pcbBytesNeeded, _lpServicesReturned, _lpResumeHandle, _pszGroupName)
        res
    }
}

@SymbolName("win32_kni_EnumServicesStatusExA")
private external fun kni_EnumServicesStatusExA(hSCManager: NativePtr, InfoLevel: Int, dwServiceType: Int, dwServiceState: Int, lpServices: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr, lpServicesReturned: NativePtr, lpResumeHandle: NativePtr, pszGroupName: NativePtr): Int

fun EnumServicesStatusExW(hSCManager: SC_HANDLE?, InfoLevel: SC_ENUM_TYPE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPBYTE?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?, lpServicesReturned: LPDWORD?, lpResumeHandle: LPDWORD?, pszGroupName: String?): WINBOOL {
    return memScoped {
        val _hSCManager = hSCManager.rawValue
        val _InfoLevel = InfoLevel
        val _dwServiceType = dwServiceType
        val _dwServiceState = dwServiceState
        val _lpServices = lpServices.rawValue
        val _cbBufSize = cbBufSize
        val _pcbBytesNeeded = pcbBytesNeeded.rawValue
        val _lpServicesReturned = lpServicesReturned.rawValue
        val _lpResumeHandle = lpResumeHandle.rawValue
        val _pszGroupName = pszGroupName?.wcstr?.getPointer(memScope).rawValue
        val res = kni_EnumServicesStatusExW(_hSCManager, _InfoLevel, _dwServiceType, _dwServiceState, _lpServices, _cbBufSize, _pcbBytesNeeded, _lpServicesReturned, _lpResumeHandle, _pszGroupName)
        res
    }
}

@SymbolName("win32_kni_EnumServicesStatusExW")
private external fun kni_EnumServicesStatusExW(hSCManager: NativePtr, InfoLevel: Int, dwServiceType: Int, dwServiceState: Int, lpServices: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr, lpServicesReturned: NativePtr, lpResumeHandle: NativePtr, pszGroupName: NativePtr): Int

fun GetServiceKeyNameA(hSCManager: SC_HANDLE?, lpDisplayName: String?, lpServiceName: LPSTR?, lpcchBuffer: LPDWORD?): WINBOOL {
    return memScoped {
        val _hSCManager = hSCManager.rawValue
        val _lpDisplayName = lpDisplayName?.cstr?.getPointer(memScope).rawValue
        val _lpServiceName = lpServiceName.rawValue
        val _lpcchBuffer = lpcchBuffer.rawValue
        val res = kni_GetServiceKeyNameA(_hSCManager, _lpDisplayName, _lpServiceName, _lpcchBuffer)
        res
    }
}

@SymbolName("win32_kni_GetServiceKeyNameA")
private external fun kni_GetServiceKeyNameA(hSCManager: NativePtr, lpDisplayName: NativePtr, lpServiceName: NativePtr, lpcchBuffer: NativePtr): Int

fun GetServiceKeyNameW(hSCManager: SC_HANDLE?, lpDisplayName: String?, lpServiceName: LPWSTR?, lpcchBuffer: LPDWORD?): WINBOOL {
    return memScoped {
        val _hSCManager = hSCManager.rawValue
        val _lpDisplayName = lpDisplayName?.wcstr?.getPointer(memScope).rawValue
        val _lpServiceName = lpServiceName.rawValue
        val _lpcchBuffer = lpcchBuffer.rawValue
        val res = kni_GetServiceKeyNameW(_hSCManager, _lpDisplayName, _lpServiceName, _lpcchBuffer)
        res
    }
}

@SymbolName("win32_kni_GetServiceKeyNameW")
private external fun kni_GetServiceKeyNameW(hSCManager: NativePtr, lpDisplayName: NativePtr, lpServiceName: NativePtr, lpcchBuffer: NativePtr): Int

fun GetServiceDisplayNameA(hSCManager: SC_HANDLE?, lpServiceName: String?, lpDisplayName: LPSTR?, lpcchBuffer: LPDWORD?): WINBOOL {
    return memScoped {
        val _hSCManager = hSCManager.rawValue
        val _lpServiceName = lpServiceName?.cstr?.getPointer(memScope).rawValue
        val _lpDisplayName = lpDisplayName.rawValue
        val _lpcchBuffer = lpcchBuffer.rawValue
        val res = kni_GetServiceDisplayNameA(_hSCManager, _lpServiceName, _lpDisplayName, _lpcchBuffer)
        res
    }
}

@SymbolName("win32_kni_GetServiceDisplayNameA")
private external fun kni_GetServiceDisplayNameA(hSCManager: NativePtr, lpServiceName: NativePtr, lpDisplayName: NativePtr, lpcchBuffer: NativePtr): Int

fun GetServiceDisplayNameW(hSCManager: SC_HANDLE?, lpServiceName: String?, lpDisplayName: LPWSTR?, lpcchBuffer: LPDWORD?): WINBOOL {
    return memScoped {
        val _hSCManager = hSCManager.rawValue
        val _lpServiceName = lpServiceName?.wcstr?.getPointer(memScope).rawValue
        val _lpDisplayName = lpDisplayName.rawValue
        val _lpcchBuffer = lpcchBuffer.rawValue
        val res = kni_GetServiceDisplayNameW(_hSCManager, _lpServiceName, _lpDisplayName, _lpcchBuffer)
        res
    }
}

@SymbolName("win32_kni_GetServiceDisplayNameW")
private external fun kni_GetServiceDisplayNameW(hSCManager: NativePtr, lpServiceName: NativePtr, lpDisplayName: NativePtr, lpcchBuffer: NativePtr): Int

fun LockServiceDatabase(hSCManager: SC_HANDLE?): SC_LOCK? {
    val _hSCManager = hSCManager.rawValue
    val res = kni_LockServiceDatabase(_hSCManager)
    return interpretCPointer<COpaque>(res)
}

@SymbolName("win32_kni_LockServiceDatabase")
private external fun kni_LockServiceDatabase(hSCManager: NativePtr): NativePtr

fun NotifyBootConfigStatus(BootAcceptable: WINBOOL): WINBOOL {
    val _BootAcceptable = BootAcceptable
    val res = kni_NotifyBootConfigStatus(_BootAcceptable)
    return res
}

@SymbolName("win32_kni_NotifyBootConfigStatus")
private external fun kni_NotifyBootConfigStatus(BootAcceptable: Int): Int

fun OpenSCManagerA(lpMachineName: String?, lpDatabaseName: String?, dwDesiredAccess: DWORD): SC_HANDLE? {
    return memScoped {
        val _lpMachineName = lpMachineName?.cstr?.getPointer(memScope).rawValue
        val _lpDatabaseName = lpDatabaseName?.cstr?.getPointer(memScope).rawValue
        val _dwDesiredAccess = dwDesiredAccess
        val res = kni_OpenSCManagerA(_lpMachineName, _lpDatabaseName, _dwDesiredAccess)
        interpretCPointer<SC_HANDLE__>(res)
    }
}

@SymbolName("win32_kni_OpenSCManagerA")
private external fun kni_OpenSCManagerA(lpMachineName: NativePtr, lpDatabaseName: NativePtr, dwDesiredAccess: Int): NativePtr

fun OpenSCManagerW(lpMachineName: String?, lpDatabaseName: String?, dwDesiredAccess: DWORD): SC_HANDLE? {
    return memScoped {
        val _lpMachineName = lpMachineName?.wcstr?.getPointer(memScope).rawValue
        val _lpDatabaseName = lpDatabaseName?.wcstr?.getPointer(memScope).rawValue
        val _dwDesiredAccess = dwDesiredAccess
        val res = kni_OpenSCManagerW(_lpMachineName, _lpDatabaseName, _dwDesiredAccess)
        interpretCPointer<SC_HANDLE__>(res)
    }
}

@SymbolName("win32_kni_OpenSCManagerW")
private external fun kni_OpenSCManagerW(lpMachineName: NativePtr, lpDatabaseName: NativePtr, dwDesiredAccess: Int): NativePtr

fun OpenServiceA(hSCManager: SC_HANDLE?, lpServiceName: String?, dwDesiredAccess: DWORD): SC_HANDLE? {
    return memScoped {
        val _hSCManager = hSCManager.rawValue
        val _lpServiceName = lpServiceName?.cstr?.getPointer(memScope).rawValue
        val _dwDesiredAccess = dwDesiredAccess
        val res = kni_OpenServiceA(_hSCManager, _lpServiceName, _dwDesiredAccess)
        interpretCPointer<SC_HANDLE__>(res)
    }
}

@SymbolName("win32_kni_OpenServiceA")
private external fun kni_OpenServiceA(hSCManager: NativePtr, lpServiceName: NativePtr, dwDesiredAccess: Int): NativePtr

fun OpenServiceW(hSCManager: SC_HANDLE?, lpServiceName: String?, dwDesiredAccess: DWORD): SC_HANDLE? {
    return memScoped {
        val _hSCManager = hSCManager.rawValue
        val _lpServiceName = lpServiceName?.wcstr?.getPointer(memScope).rawValue
        val _dwDesiredAccess = dwDesiredAccess
        val res = kni_OpenServiceW(_hSCManager, _lpServiceName, _dwDesiredAccess)
        interpretCPointer<SC_HANDLE__>(res)
    }
}

@SymbolName("win32_kni_OpenServiceW")
private external fun kni_OpenServiceW(hSCManager: NativePtr, lpServiceName: NativePtr, dwDesiredAccess: Int): NativePtr

fun QueryServiceConfigA(hService: SC_HANDLE?, lpServiceConfig: LPQUERY_SERVICE_CONFIGA?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?): WINBOOL {
    val _hService = hService.rawValue
    val _lpServiceConfig = lpServiceConfig.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val res = kni_QueryServiceConfigA(_hService, _lpServiceConfig, _cbBufSize, _pcbBytesNeeded)
    return res
}

@SymbolName("win32_kni_QueryServiceConfigA")
private external fun kni_QueryServiceConfigA(hService: NativePtr, lpServiceConfig: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr): Int

fun QueryServiceConfigW(hService: SC_HANDLE?, lpServiceConfig: LPQUERY_SERVICE_CONFIGW?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?): WINBOOL {
    val _hService = hService.rawValue
    val _lpServiceConfig = lpServiceConfig.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val res = kni_QueryServiceConfigW(_hService, _lpServiceConfig, _cbBufSize, _pcbBytesNeeded)
    return res
}

@SymbolName("win32_kni_QueryServiceConfigW")
private external fun kni_QueryServiceConfigW(hService: NativePtr, lpServiceConfig: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr): Int

fun QueryServiceConfig2A(hService: SC_HANDLE?, dwInfoLevel: DWORD, lpBuffer: LPBYTE?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?): WINBOOL {
    val _hService = hService.rawValue
    val _dwInfoLevel = dwInfoLevel
    val _lpBuffer = lpBuffer.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val res = kni_QueryServiceConfig2A(_hService, _dwInfoLevel, _lpBuffer, _cbBufSize, _pcbBytesNeeded)
    return res
}

@SymbolName("win32_kni_QueryServiceConfig2A")
private external fun kni_QueryServiceConfig2A(hService: NativePtr, dwInfoLevel: Int, lpBuffer: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr): Int

fun QueryServiceConfig2W(hService: SC_HANDLE?, dwInfoLevel: DWORD, lpBuffer: LPBYTE?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?): WINBOOL {
    val _hService = hService.rawValue
    val _dwInfoLevel = dwInfoLevel
    val _lpBuffer = lpBuffer.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val res = kni_QueryServiceConfig2W(_hService, _dwInfoLevel, _lpBuffer, _cbBufSize, _pcbBytesNeeded)
    return res
}

@SymbolName("win32_kni_QueryServiceConfig2W")
private external fun kni_QueryServiceConfig2W(hService: NativePtr, dwInfoLevel: Int, lpBuffer: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr): Int

fun QueryServiceLockStatusA(hSCManager: SC_HANDLE?, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSA?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?): WINBOOL {
    val _hSCManager = hSCManager.rawValue
    val _lpLockStatus = lpLockStatus.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val res = kni_QueryServiceLockStatusA(_hSCManager, _lpLockStatus, _cbBufSize, _pcbBytesNeeded)
    return res
}

@SymbolName("win32_kni_QueryServiceLockStatusA")
private external fun kni_QueryServiceLockStatusA(hSCManager: NativePtr, lpLockStatus: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr): Int

fun QueryServiceLockStatusW(hSCManager: SC_HANDLE?, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSW?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?): WINBOOL {
    val _hSCManager = hSCManager.rawValue
    val _lpLockStatus = lpLockStatus.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val res = kni_QueryServiceLockStatusW(_hSCManager, _lpLockStatus, _cbBufSize, _pcbBytesNeeded)
    return res
}

@SymbolName("win32_kni_QueryServiceLockStatusW")
private external fun kni_QueryServiceLockStatusW(hSCManager: NativePtr, lpLockStatus: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr): Int

fun QueryServiceObjectSecurity(hService: SC_HANDLE?, dwSecurityInformation: SECURITY_INFORMATION, lpSecurityDescriptor: PSECURITY_DESCRIPTOR?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?): WINBOOL {
    val _hService = hService.rawValue
    val _dwSecurityInformation = dwSecurityInformation
    val _lpSecurityDescriptor = lpSecurityDescriptor.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val res = kni_QueryServiceObjectSecurity(_hService, _dwSecurityInformation, _lpSecurityDescriptor, _cbBufSize, _pcbBytesNeeded)
    return res
}

@SymbolName("win32_kni_QueryServiceObjectSecurity")
private external fun kni_QueryServiceObjectSecurity(hService: NativePtr, dwSecurityInformation: Int, lpSecurityDescriptor: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr): Int

fun QueryServiceStatus(hService: SC_HANDLE?, lpServiceStatus: LPSERVICE_STATUS?): WINBOOL {
    val _hService = hService.rawValue
    val _lpServiceStatus = lpServiceStatus.rawValue
    val res = kni_QueryServiceStatus(_hService, _lpServiceStatus)
    return res
}

@SymbolName("win32_kni_QueryServiceStatus")
private external fun kni_QueryServiceStatus(hService: NativePtr, lpServiceStatus: NativePtr): Int

fun QueryServiceStatusEx(hService: SC_HANDLE?, InfoLevel: SC_STATUS_TYPE, lpBuffer: LPBYTE?, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD?): WINBOOL {
    val _hService = hService.rawValue
    val _InfoLevel = InfoLevel
    val _lpBuffer = lpBuffer.rawValue
    val _cbBufSize = cbBufSize
    val _pcbBytesNeeded = pcbBytesNeeded.rawValue
    val res = kni_QueryServiceStatusEx(_hService, _InfoLevel, _lpBuffer, _cbBufSize, _pcbBytesNeeded)
    return res
}

@SymbolName("win32_kni_QueryServiceStatusEx")
private external fun kni_QueryServiceStatusEx(hService: NativePtr, InfoLevel: Int, lpBuffer: NativePtr, cbBufSize: Int, pcbBytesNeeded: NativePtr): Int

fun RegisterServiceCtrlHandlerA(lpServiceName: String?, lpHandlerProc: LPHANDLER_FUNCTION?): SERVICE_STATUS_HANDLE? {
    return memScoped {
        val _lpServiceName = lpServiceName?.cstr?.getPointer(memScope).rawValue
        val _lpHandlerProc = lpHandlerProc.rawValue
        val res = kni_RegisterServiceCtrlHandlerA(_lpServiceName, _lpHandlerProc)
        interpretCPointer<SERVICE_STATUS_HANDLE__>(res)
    }
}

@SymbolName("win32_kni_RegisterServiceCtrlHandlerA")
private external fun kni_RegisterServiceCtrlHandlerA(lpServiceName: NativePtr, lpHandlerProc: NativePtr): NativePtr

fun RegisterServiceCtrlHandlerW(lpServiceName: String?, lpHandlerProc: LPHANDLER_FUNCTION?): SERVICE_STATUS_HANDLE? {
    return memScoped {
        val _lpServiceName = lpServiceName?.wcstr?.getPointer(memScope).rawValue
        val _lpHandlerProc = lpHandlerProc.rawValue
        val res = kni_RegisterServiceCtrlHandlerW(_lpServiceName, _lpHandlerProc)
        interpretCPointer<SERVICE_STATUS_HANDLE__>(res)
    }
}

@SymbolName("win32_kni_RegisterServiceCtrlHandlerW")
private external fun kni_RegisterServiceCtrlHandlerW(lpServiceName: NativePtr, lpHandlerProc: NativePtr): NativePtr

fun RegisterServiceCtrlHandlerExA(lpServiceName: String?, lpHandlerProc: LPHANDLER_FUNCTION_EX?, lpContext: LPVOID?): SERVICE_STATUS_HANDLE? {
    return memScoped {
        val _lpServiceName = lpServiceName?.cstr?.getPointer(memScope).rawValue
        val _lpHandlerProc = lpHandlerProc.rawValue
        val _lpContext = lpContext.rawValue
        val res = kni_RegisterServiceCtrlHandlerExA(_lpServiceName, _lpHandlerProc, _lpContext)
        interpretCPointer<SERVICE_STATUS_HANDLE__>(res)
    }
}

@SymbolName("win32_kni_RegisterServiceCtrlHandlerExA")
private external fun kni_RegisterServiceCtrlHandlerExA(lpServiceName: NativePtr, lpHandlerProc: NativePtr, lpContext: NativePtr): NativePtr

fun RegisterServiceCtrlHandlerExW(lpServiceName: String?, lpHandlerProc: LPHANDLER_FUNCTION_EX?, lpContext: LPVOID?): SERVICE_STATUS_HANDLE? {
    return memScoped {
        val _lpServiceName = lpServiceName?.wcstr?.getPointer(memScope).rawValue
        val _lpHandlerProc = lpHandlerProc.rawValue
        val _lpContext = lpContext.rawValue
        val res = kni_RegisterServiceCtrlHandlerExW(_lpServiceName, _lpHandlerProc, _lpContext)
        interpretCPointer<SERVICE_STATUS_HANDLE__>(res)
    }
}

@SymbolName("win32_kni_RegisterServiceCtrlHandlerExW")
private external fun kni_RegisterServiceCtrlHandlerExW(lpServiceName: NativePtr, lpHandlerProc: NativePtr, lpContext: NativePtr): NativePtr

fun SetServiceObjectSecurity(hService: SC_HANDLE?, dwSecurityInformation: SECURITY_INFORMATION, lpSecurityDescriptor: PSECURITY_DESCRIPTOR?): WINBOOL {
    val _hService = hService.rawValue
    val _dwSecurityInformation = dwSecurityInformation
    val _lpSecurityDescriptor = lpSecurityDescriptor.rawValue
    val res = kni_SetServiceObjectSecurity(_hService, _dwSecurityInformation, _lpSecurityDescriptor)
    return res
}

@SymbolName("win32_kni_SetServiceObjectSecurity")
private external fun kni_SetServiceObjectSecurity(hService: NativePtr, dwSecurityInformation: Int, lpSecurityDescriptor: NativePtr): Int

fun SetServiceStatus(hServiceStatus: SERVICE_STATUS_HANDLE?, lpServiceStatus: LPSERVICE_STATUS?): WINBOOL {
    val _hServiceStatus = hServiceStatus.rawValue
    val _lpServiceStatus = lpServiceStatus.rawValue
    val res = kni_SetServiceStatus(_hServiceStatus, _lpServiceStatus)
    return res
}

@SymbolName("win32_kni_SetServiceStatus")
private external fun kni_SetServiceStatus(hServiceStatus: NativePtr, lpServiceStatus: NativePtr): Int

fun StartServiceCtrlDispatcherA(lpServiceStartTable: CValuesRef<SERVICE_TABLE_ENTRYA>?): WINBOOL {
    return memScoped {
        val _lpServiceStartTable = lpServiceStartTable?.getPointer(memScope).rawValue
        val res = kni_StartServiceCtrlDispatcherA(_lpServiceStartTable)
        res
    }
}

@SymbolName("win32_kni_StartServiceCtrlDispatcherA")
private external fun kni_StartServiceCtrlDispatcherA(lpServiceStartTable: NativePtr): Int

fun StartServiceCtrlDispatcherW(lpServiceStartTable: CValuesRef<SERVICE_TABLE_ENTRYW>?): WINBOOL {
    return memScoped {
        val _lpServiceStartTable = lpServiceStartTable?.getPointer(memScope).rawValue
        val res = kni_StartServiceCtrlDispatcherW(_lpServiceStartTable)
        res
    }
}

@SymbolName("win32_kni_StartServiceCtrlDispatcherW")
private external fun kni_StartServiceCtrlDispatcherW(lpServiceStartTable: NativePtr): Int

fun StartServiceA(hService: SC_HANDLE?, dwNumServiceArgs: DWORD, lpServiceArgVectors: CValuesRef<LPCSTRVar>?): WINBOOL {
    return memScoped {
        val _hService = hService.rawValue
        val _dwNumServiceArgs = dwNumServiceArgs
        val _lpServiceArgVectors = lpServiceArgVectors?.getPointer(memScope).rawValue
        val res = kni_StartServiceA(_hService, _dwNumServiceArgs, _lpServiceArgVectors)
        res
    }
}

@SymbolName("win32_kni_StartServiceA")
private external fun kni_StartServiceA(hService: NativePtr, dwNumServiceArgs: Int, lpServiceArgVectors: NativePtr): Int

fun StartServiceW(hService: SC_HANDLE?, dwNumServiceArgs: DWORD, lpServiceArgVectors: CValuesRef<LPCWSTRVar>?): WINBOOL {
    return memScoped {
        val _hService = hService.rawValue
        val _dwNumServiceArgs = dwNumServiceArgs
        val _lpServiceArgVectors = lpServiceArgVectors?.getPointer(memScope).rawValue
        val res = kni_StartServiceW(_hService, _dwNumServiceArgs, _lpServiceArgVectors)
        res
    }
}

@SymbolName("win32_kni_StartServiceW")
private external fun kni_StartServiceW(hService: NativePtr, dwNumServiceArgs: Int, lpServiceArgVectors: NativePtr): Int

fun UnlockServiceDatabase(ScLock: SC_LOCK?): WINBOOL {
    val _ScLock = ScLock.rawValue
    val res = kni_UnlockServiceDatabase(_ScLock)
    return res
}

@SymbolName("win32_kni_UnlockServiceDatabase")
private external fun kni_UnlockServiceDatabase(ScLock: NativePtr): Int

val WINAPI_PARTITION_DESKTOP: Int = 1

val WINAPI_PARTITION_APP: Int = 2

val WINAPI_FAMILY_APP: Int = 2

val WINAPI_FAMILY_DESKTOP_APP: Int = 3

val WINAPI_FAMILY: Int = 3

val ANYSIZE_ARRAY: Int = 1

val MAX_NATURAL_ALIGNMENT: Long = 8

val MEMORY_ALLOCATION_ALIGNMENT: Int = 16

val SYSTEM_CACHE_ALIGNMENT_SIZE: Int = 64

val PRAGMA_DEPRECATED_DDK: Int = 0

val APPLICATION_ERROR_MASK: Int = 536870912

val ERROR_SEVERITY_SUCCESS: Int = 0

val ERROR_SEVERITY_INFORMATIONAL: Int = 1073741824

val ERROR_SEVERITY_WARNING: Int = -2147483648

val ERROR_SEVERITY_ERROR: Int = -1073741824

val MAXLONGLONG: Long = 9223372036854775807

val ANSI_NULL: CHAR = 0

val UNICODE_NULL: WCHAR = 0

val UNICODE_STRING_MAX_BYTES: WORD = -2

val UNICODE_STRING_MAX_CHARS: Int = 32767

val MINCHAR: Int = 128

val MAXCHAR: Int = 127

val MINSHORT: Int = 32768

val MAXSHORT: Int = 32767

val MINLONG: Int = -2147483648

val MAXLONG: Int = 2147483647

val MAXBYTE: Int = 255

val MAXWORD: Int = 65535

val MAXDWORD: Int = -1

val VER_WORKSTATION_NT: Int = 1073741824

val VER_SERVER_NT: Int = -2147483648

val VER_SUITE_SMALLBUSINESS: Int = 1

val VER_SUITE_ENTERPRISE: Int = 2

val VER_SUITE_BACKOFFICE: Int = 4

val VER_SUITE_COMMUNICATIONS: Int = 8

val VER_SUITE_TERMINAL: Int = 16

val VER_SUITE_SMALLBUSINESS_RESTRICTED: Int = 32

val VER_SUITE_EMBEDDEDNT: Int = 64

val VER_SUITE_DATACENTER: Int = 128

val VER_SUITE_SINGLEUSERTS: Int = 256

val VER_SUITE_PERSONAL: Int = 512

val VER_SUITE_BLADE: Int = 1024

val VER_SUITE_EMBEDDED_RESTRICTED: Int = 2048

val VER_SUITE_SECURITY_APPLIANCE: Int = 4096

val VER_SUITE_STORAGE_SERVER: Int = 8192

val VER_SUITE_COMPUTE_SERVER: Int = 16384

val VER_SUITE_WH_SERVER: Int = 32768

val PRODUCT_UNDEFINED: Int = 0

val PRODUCT_ULTIMATE: Int = 1

val PRODUCT_HOME_BASIC: Int = 2

val PRODUCT_HOME_PREMIUM: Int = 3

val PRODUCT_ENTERPRISE: Int = 4

val PRODUCT_HOME_BASIC_N: Int = 5

val PRODUCT_BUSINESS: Int = 6

val PRODUCT_STANDARD_SERVER: Int = 7

val PRODUCT_DATACENTER_SERVER: Int = 8

val PRODUCT_SMALLBUSINESS_SERVER: Int = 9

val PRODUCT_ENTERPRISE_SERVER: Int = 10

val PRODUCT_STARTER: Int = 11

val PRODUCT_DATACENTER_SERVER_CORE: Int = 12

val PRODUCT_STANDARD_SERVER_CORE: Int = 13

val PRODUCT_ENTERPRISE_SERVER_CORE: Int = 14

val PRODUCT_ENTERPRISE_SERVER_IA64: Int = 15

val PRODUCT_BUSINESS_N: Int = 16

val PRODUCT_WEB_SERVER: Int = 17

val PRODUCT_CLUSTER_SERVER: Int = 18

val PRODUCT_HOME_SERVER: Int = 19

val PRODUCT_STORAGE_EXPRESS_SERVER: Int = 20

val PRODUCT_STORAGE_STANDARD_SERVER: Int = 21

val PRODUCT_STORAGE_WORKGROUP_SERVER: Int = 22

val PRODUCT_STORAGE_ENTERPRISE_SERVER: Int = 23

val PRODUCT_SERVER_FOR_SMALLBUSINESS: Int = 24

val PRODUCT_SMALLBUSINESS_SERVER_PREMIUM: Int = 25

val PRODUCT_HOME_PREMIUM_N: Int = 26

val PRODUCT_ENTERPRISE_N: Int = 27

val PRODUCT_ULTIMATE_N: Int = 28

val PRODUCT_WEB_SERVER_CORE: Int = 29

val PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT: Int = 30

val PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY: Int = 31

val PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING: Int = 32

val PRODUCT_SERVER_FOUNDATION: Int = 33

val PRODUCT_HOME_PREMIUM_SERVER: Int = 34

val PRODUCT_SERVER_FOR_SMALLBUSINESS_V: Int = 35

val PRODUCT_STANDARD_SERVER_V: Int = 36

val PRODUCT_DATACENTER_SERVER_V: Int = 37

val PRODUCT_ENTERPRISE_SERVER_V: Int = 38

val PRODUCT_DATACENTER_SERVER_CORE_V: Int = 39

val PRODUCT_STANDARD_SERVER_CORE_V: Int = 40

val PRODUCT_ENTERPRISE_SERVER_CORE_V: Int = 41

val PRODUCT_HYPERV: Int = 42

val PRODUCT_STORAGE_EXPRESS_SERVER_CORE: Int = 43

val PRODUCT_STORAGE_STANDARD_SERVER_CORE: Int = 44

val PRODUCT_STORAGE_WORKGROUP_SERVER_CORE: Int = 45

val PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE: Int = 46

val PRODUCT_STARTER_N: Int = 47

val PRODUCT_PROFESSIONAL: Int = 48

val PRODUCT_PROFESSIONAL_N: Int = 49

val PRODUCT_SB_SOLUTION_SERVER: Int = 50

val PRODUCT_SERVER_FOR_SB_SOLUTIONS: Int = 51

val PRODUCT_STANDARD_SERVER_SOLUTIONS: Int = 52

val PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE: Int = 53

val PRODUCT_SB_SOLUTION_SERVER_EM: Int = 54

val PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM: Int = 55

val PRODUCT_SOLUTION_EMBEDDEDSERVER: Int = 56

val PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE: Int = 57

val PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT: Int = 59

val PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL: Int = 60

val PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC: Int = 61

val PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC: Int = 62

val PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE: Int = 63

val PRODUCT_CLUSTER_SERVER_V: Int = 64

val PRODUCT_EMBEDDED: Int = 65

val PRODUCT_STARTER_E: Int = 66

val PRODUCT_HOME_BASIC_E: Int = 67

val PRODUCT_HOME_PREMIUM_E: Int = 68

val PRODUCT_PROFESSIONAL_E: Int = 69

val PRODUCT_ENTERPRISE_E: Int = 70

val PRODUCT_ULTIMATE_E: Int = 71

val PRODUCT_ENTERPRISE_EVALUATION: Int = 72

val PRODUCT_MULTIPOINT_STANDARD_SERVER: Int = 76

val PRODUCT_MULTIPOINT_PREMIUM_SERVER: Int = 77

val PRODUCT_STANDARD_EVALUATION_SERVER: Int = 79

val PRODUCT_DATACENTER_EVALUATION_SERVER: Int = 80

val PRODUCT_ENTERPRISE_N_EVALUATION: Int = 84

val PRODUCT_EMBEDDED_AUTOMOTIVE: Int = 85

val PRODUCT_EMBEDDED_INDUSTRY_A: Int = 86

val PRODUCT_THINPC: Int = 87

val PRODUCT_EMBEDDED_A: Int = 88

val PRODUCT_EMBEDDED_INDUSTRY: Int = 89

val PRODUCT_EMBEDDED_E: Int = 90

val PRODUCT_EMBEDDED_INDUSTRY_E: Int = 91

val PRODUCT_EMBEDDED_INDUSTRY_A_E: Int = 92

val PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER: Int = 95

val PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER: Int = 96

val PRODUCT_CORE_ARM: Int = 97

val PRODUCT_CORE_N: Int = 98

val PRODUCT_CORE_COUNTRYSPECIFIC: Int = 99

val PRODUCT_CORE_SINGLELANGUAGE: Int = 100

val PRODUCT_CORE: Int = 101

val PRODUCT_PROFESSIONAL_WMC: Int = 103

val PRODUCT_MOBILE_CORE: Int = 104

val PRODUCT_EDUCATION: Int = 121

val PRODUCT_EDUCATION_N: Int = 122

val PRODUCT_MOBILE_ENTERPRISE: Int = 133

val PRODUCT_UNLICENSED: Int = -1412584499

val LANG_NEUTRAL: Int = 0

val LANG_INVARIANT: Int = 127

val LANG_AFRIKAANS: Int = 54

val LANG_ALBANIAN: Int = 28

val LANG_ALSATIAN: Int = 132

val LANG_AMHARIC: Int = 94

val LANG_ARABIC: Int = 1

val LANG_ARMENIAN: Int = 43

val LANG_ASSAMESE: Int = 77

val LANG_AZERI: Int = 44

val LANG_AZERBAIJANI: Int = 44

val LANG_BANGLA: Int = 69

val LANG_BASHKIR: Int = 109

val LANG_BASQUE: Int = 45

val LANG_BELARUSIAN: Int = 35

val LANG_BENGALI: Int = 69

val LANG_BRETON: Int = 126

val LANG_BOSNIAN: Int = 26

val LANG_BOSNIAN_NEUTRAL: Int = 30746

val LANG_BULGARIAN: Int = 2

val LANG_CATALAN: Int = 3

val LANG_CENTRAL_KURDISH: Int = 146

val LANG_CHEROKEE: Int = 92

val LANG_CHINESE: Int = 4

val LANG_CHINESE_SIMPLIFIED: Int = 4

val LANG_CHINESE_TRADITIONAL: Int = 31748

val LANG_CORSICAN: Int = 131

val LANG_CROATIAN: Int = 26

val LANG_CZECH: Int = 5

val LANG_DANISH: Int = 6

val LANG_DARI: Int = 140

val LANG_DIVEHI: Int = 101

val LANG_DUTCH: Int = 19

val LANG_ENGLISH: Int = 9

val LANG_ESTONIAN: Int = 37

val LANG_FAEROESE: Int = 56

val LANG_FARSI: Int = 41

val LANG_FILIPINO: Int = 100

val LANG_FINNISH: Int = 11

val LANG_FRENCH: Int = 12

val LANG_FRISIAN: Int = 98

val LANG_FULAH: Int = 103

val LANG_GALICIAN: Int = 86

val LANG_GEORGIAN: Int = 55

val LANG_GERMAN: Int = 7

val LANG_GREEK: Int = 8

val LANG_GREENLANDIC: Int = 111

val LANG_GUJARATI: Int = 71

val LANG_HAUSA: Int = 104

val LANG_HEBREW: Int = 13

val LANG_HINDI: Int = 57

val LANG_HUNGARIAN: Int = 14

val LANG_ICELANDIC: Int = 15

val LANG_IGBO: Int = 112

val LANG_INDONESIAN: Int = 33

val LANG_INUKTITUT: Int = 93

val LANG_IRISH: Int = 60

val LANG_ITALIAN: Int = 16

val LANG_JAPANESE: Int = 17

val LANG_KANNADA: Int = 75

val LANG_KASHMIRI: Int = 96

val LANG_KAZAK: Int = 63

val LANG_KHMER: Int = 83

val LANG_KICHE: Int = 134

val LANG_KINYARWANDA: Int = 135

val LANG_KONKANI: Int = 87

val LANG_KOREAN: Int = 18

val LANG_KYRGYZ: Int = 64

val LANG_LAO: Int = 84

val LANG_LATVIAN: Int = 38

val LANG_LITHUANIAN: Int = 39

val LANG_LOWER_SORBIAN: Int = 46

val LANG_LUXEMBOURGISH: Int = 110

val LANG_MACEDONIAN: Int = 47

val LANG_MALAY: Int = 62

val LANG_MALAYALAM: Int = 76

val LANG_MALTESE: Int = 58

val LANG_MANIPURI: Int = 88

val LANG_MAORI: Int = 129

val LANG_MAPUDUNGUN: Int = 122

val LANG_MARATHI: Int = 78

val LANG_MOHAWK: Int = 124

val LANG_MONGOLIAN: Int = 80

val LANG_NEPALI: Int = 97

val LANG_NORWEGIAN: Int = 20

val LANG_OCCITAN: Int = 130

val LANG_ODIA: Int = 72

val LANG_ORIYA: Int = 72

val LANG_PASHTO: Int = 99

val LANG_PERSIAN: Int = 41

val LANG_POLISH: Int = 21

val LANG_PORTUGUESE: Int = 22

val LANG_PULAR: Int = 103

val LANG_PUNJABI: Int = 70

val LANG_QUECHUA: Int = 107

val LANG_ROMANIAN: Int = 24

val LANG_ROMANSH: Int = 23

val LANG_RUSSIAN: Int = 25

val LANG_SAKHA: Int = 133

val LANG_SAMI: Int = 59

val LANG_SANSKRIT: Int = 79

val LANG_SCOTTISH_GAELIC: Int = 145

val LANG_SERBIAN: Int = 26

val LANG_SERBIAN_NEUTRAL: Int = 31770

val LANG_SINDHI: Int = 89

val LANG_SINHALESE: Int = 91

val LANG_SLOVAK: Int = 27

val LANG_SLOVENIAN: Int = 36

val LANG_SOTHO: Int = 108

val LANG_SPANISH: Int = 10

val LANG_SWAHILI: Int = 65

val LANG_SWEDISH: Int = 29

val LANG_SYRIAC: Int = 90

val LANG_TAJIK: Int = 40

val LANG_TAMAZIGHT: Int = 95

val LANG_TAMIL: Int = 73

val LANG_TATAR: Int = 68

val LANG_TELUGU: Int = 74

val LANG_THAI: Int = 30

val LANG_TIBETAN: Int = 81

val LANG_TIGRIGNA: Int = 115

val LANG_TIGRINYA: Int = 115

val LANG_TSWANA: Int = 50

val LANG_TURKISH: Int = 31

val LANG_TURKMEN: Int = 66

val LANG_UIGHUR: Int = 128

val LANG_UKRAINIAN: Int = 34

val LANG_UPPER_SORBIAN: Int = 46

val LANG_URDU: Int = 32

val LANG_UZBEK: Int = 67

val LANG_VALENCIAN: Int = 3

val LANG_VIETNAMESE: Int = 42

val LANG_WELSH: Int = 82

val LANG_WOLOF: Int = 136

val LANG_XHOSA: Int = 52

val LANG_YAKUT: Int = 133

val LANG_YI: Int = 120

val LANG_YORUBA: Int = 106

val LANG_ZULU: Int = 53

val SUBLANG_NEUTRAL: Int = 0

val SUBLANG_DEFAULT: Int = 1

val SUBLANG_SYS_DEFAULT: Int = 2

val SUBLANG_CUSTOM_DEFAULT: Int = 3

val SUBLANG_CUSTOM_UNSPECIFIED: Int = 4

val SUBLANG_UI_CUSTOM_DEFAULT: Int = 5

val SUBLANG_AFRIKAANS_SOUTH_AFRICA: Int = 1

val SUBLANG_ALBANIAN_ALBANIA: Int = 1

val SUBLANG_ALSATIAN_FRANCE: Int = 1

val SUBLANG_AMHARIC_ETHIOPIA: Int = 1

val SUBLANG_ARABIC_SAUDI_ARABIA: Int = 1

val SUBLANG_ARABIC_IRAQ: Int = 2

val SUBLANG_ARABIC_EGYPT: Int = 3

val SUBLANG_ARABIC_LIBYA: Int = 4

val SUBLANG_ARABIC_ALGERIA: Int = 5

val SUBLANG_ARABIC_MOROCCO: Int = 6

val SUBLANG_ARABIC_TUNISIA: Int = 7

val SUBLANG_ARABIC_OMAN: Int = 8

val SUBLANG_ARABIC_YEMEN: Int = 9

val SUBLANG_ARABIC_SYRIA: Int = 10

val SUBLANG_ARABIC_JORDAN: Int = 11

val SUBLANG_ARABIC_LEBANON: Int = 12

val SUBLANG_ARABIC_KUWAIT: Int = 13

val SUBLANG_ARABIC_UAE: Int = 14

val SUBLANG_ARABIC_BAHRAIN: Int = 15

val SUBLANG_ARABIC_QATAR: Int = 16

val SUBLANG_ARMENIAN_ARMENIA: Int = 1

val SUBLANG_ASSAMESE_INDIA: Int = 1

val SUBLANG_AZERI_LATIN: Int = 1

val SUBLANG_AZERI_CYRILLIC: Int = 2

val SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN: Int = 1

val SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC: Int = 2

val SUBLANG_BANGLA_INDIA: Int = 1

val SUBLANG_BANGLA_BANGLADESH: Int = 2

val SUBLANG_BASHKIR_RUSSIA: Int = 1

val SUBLANG_BASQUE_BASQUE: Int = 1

val SUBLANG_BELARUSIAN_BELARUS: Int = 1

val SUBLANG_BENGALI_INDIA: Int = 1

val SUBLANG_BENGALI_BANGLADESH: Int = 2

val SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN: Int = 5

val SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC: Int = 8

val SUBLANG_BRETON_FRANCE: Int = 1

val SUBLANG_BULGARIAN_BULGARIA: Int = 1

val SUBLANG_CATALAN_CATALAN: Int = 1

val SUBLANG_CENTRAL_KURDISH_IRAQ: Int = 1

val SUBLANG_CHEROKEE_CHEROKEE: Int = 1

val SUBLANG_CHINESE_TRADITIONAL: Int = 1

val SUBLANG_CHINESE_SIMPLIFIED: Int = 2

val SUBLANG_CHINESE_HONGKONG: Int = 3

val SUBLANG_CHINESE_SINGAPORE: Int = 4

val SUBLANG_CHINESE_MACAU: Int = 5

val SUBLANG_CORSICAN_FRANCE: Int = 1

val SUBLANG_CZECH_CZECH_REPUBLIC: Int = 1

val SUBLANG_CROATIAN_CROATIA: Int = 1

val SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN: Int = 4

val SUBLANG_DANISH_DENMARK: Int = 1

val SUBLANG_DARI_AFGHANISTAN: Int = 1

val SUBLANG_DIVEHI_MALDIVES: Int = 1

val SUBLANG_DUTCH: Int = 1

val SUBLANG_DUTCH_BELGIAN: Int = 2

val SUBLANG_ENGLISH_US: Int = 1

val SUBLANG_ENGLISH_UK: Int = 2

val SUBLANG_ENGLISH_AUS: Int = 3

val SUBLANG_ENGLISH_CAN: Int = 4

val SUBLANG_ENGLISH_NZ: Int = 5

val SUBLANG_ENGLISH_IRELAND: Int = 6

val SUBLANG_ENGLISH_EIRE: Int = 6

val SUBLANG_ENGLISH_SOUTH_AFRICA: Int = 7

val SUBLANG_ENGLISH_JAMAICA: Int = 8

val SUBLANG_ENGLISH_CARIBBEAN: Int = 9

val SUBLANG_ENGLISH_BELIZE: Int = 10

val SUBLANG_ENGLISH_TRINIDAD: Int = 11

val SUBLANG_ENGLISH_ZIMBABWE: Int = 12

val SUBLANG_ENGLISH_PHILIPPINES: Int = 13

val SUBLANG_ENGLISH_INDIA: Int = 16

val SUBLANG_ENGLISH_MALAYSIA: Int = 17

val SUBLANG_ENGLISH_SINGAPORE: Int = 18

val SUBLANG_ESTONIAN_ESTONIA: Int = 1

val SUBLANG_FAEROESE_FAROE_ISLANDS: Int = 1

val SUBLANG_FILIPINO_PHILIPPINES: Int = 1

val SUBLANG_FINNISH_FINLAND: Int = 1

val SUBLANG_FRENCH: Int = 1

val SUBLANG_FRENCH_BELGIAN: Int = 2

val SUBLANG_FRENCH_CANADIAN: Int = 3

val SUBLANG_FRENCH_SWISS: Int = 4

val SUBLANG_FRENCH_LUXEMBOURG: Int = 5

val SUBLANG_FRENCH_MONACO: Int = 6

val SUBLANG_FRISIAN_NETHERLANDS: Int = 1

val SUBLANG_FULAH_SENEGAL: Int = 2

val SUBLANG_GALICIAN_GALICIAN: Int = 1

val SUBLANG_GEORGIAN_GEORGIA: Int = 1

val SUBLANG_GERMAN: Int = 1

val SUBLANG_GERMAN_SWISS: Int = 2

val SUBLANG_GERMAN_AUSTRIAN: Int = 3

val SUBLANG_GERMAN_LUXEMBOURG: Int = 4

val SUBLANG_GERMAN_LIECHTENSTEIN: Int = 5

val SUBLANG_GREEK_GREECE: Int = 1

val SUBLANG_GREENLANDIC_GREENLAND: Int = 1

val SUBLANG_GUJARATI_INDIA: Int = 1

val SUBLANG_HAUSA_NIGERIA_LATIN: Int = 1

val SUBLANG_HAUSA_NIGERIA: Int = 1

val SUBLANG_HAWAIIAN_US: Int = 1

val SUBLANG_HEBREW_ISRAEL: Int = 1

val SUBLANG_HINDI_INDIA: Int = 1

val SUBLANG_HUNGARIAN_HUNGARY: Int = 1

val SUBLANG_ICELANDIC_ICELAND: Int = 1

val SUBLANG_IGBO_NIGERIA: Int = 1

val SUBLANG_INDONESIAN_INDONESIA: Int = 1

val SUBLANG_INUKTITUT_CANADA: Int = 1

val SUBLANG_INUKTITUT_CANADA_LATIN: Int = 2

val SUBLANG_IRISH_IRELAND: Int = 2

val SUBLANG_ITALIAN: Int = 1

val SUBLANG_ITALIAN_SWISS: Int = 2

val SUBLANG_JAPANESE_JAPAN: Int = 1

val SUBLANG_KANNADA_INDIA: Int = 1

val SUBLANG_KASHMIRI_INDIA: Int = 2

val SUBLANG_KASHMIRI_SASIA: Int = 2

val SUBLANG_KAZAK_KAZAKHSTAN: Int = 1

val SUBLANG_KHMER_CAMBODIA: Int = 1

val SUBLANG_KICHE_GUATEMALA: Int = 1

val SUBLANG_KINYARWANDA_RWANDA: Int = 1

val SUBLANG_KONKANI_INDIA: Int = 1

val SUBLANG_KOREAN: Int = 1

val SUBLANG_KYRGYZ_KYRGYZSTAN: Int = 1

val SUBLANG_LAO_LAO: Int = 1

val SUBLANG_LAO_LAO_PDR: Int = 1

val SUBLANG_LATVIAN_LATVIA: Int = 1

val SUBLANG_LITHUANIAN: Int = 1

val SUBLANG_LOWER_SORBIAN_GERMANY: Int = 2

val SUBLANG_LUXEMBOURGISH_LUXEMBOURG: Int = 1

val SUBLANG_MACEDONIAN_MACEDONIA: Int = 1

val SUBLANG_MALAY_MALAYSIA: Int = 1

val SUBLANG_MALAY_BRUNEI_DARUSSALAM: Int = 2

val SUBLANG_MALAYALAM_INDIA: Int = 1

val SUBLANG_MALTESE_MALTA: Int = 1

val SUBLANG_MAORI_NEW_ZEALAND: Int = 1

val SUBLANG_MAPUDUNGUN_CHILE: Int = 1

val SUBLANG_MARATHI_INDIA: Int = 1

val SUBLANG_MOHAWK_MOHAWK: Int = 1

val SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA: Int = 1

val SUBLANG_MONGOLIAN_PRC: Int = 2

val SUBLANG_NEPALI_NEPAL: Int = 1

val SUBLANG_NEPALI_INDIA: Int = 2

val SUBLANG_NORWEGIAN_BOKMAL: Int = 1

val SUBLANG_NORWEGIAN_NYNORSK: Int = 2

val SUBLANG_OCCITAN_FRANCE: Int = 1

val SUBLANG_ORIYA_INDIA: Int = 1

val SUBLANG_PASHTO_AFGHANISTAN: Int = 1

val SUBLANG_PERSIAN_IRAN: Int = 1

val SUBLANG_POLISH_POLAND: Int = 1

val SUBLANG_PORTUGUESE_BRAZILIAN: Int = 1

val SUBLANG_PORTUGUESE: Int = 2

val SUBLANG_PULAR_SENEGAL: Int = 2

val SUBLANG_PUNJABI_INDIA: Int = 1

val SUBLANG_PUNJABI_PAKISTAN: Int = 2

val SUBLANG_QUECHUA_BOLIVIA: Int = 1

val SUBLANG_QUECHUA_ECUADOR: Int = 2

val SUBLANG_QUECHUA_PERU: Int = 3

val SUBLANG_ROMANIAN_ROMANIA: Int = 1

val SUBLANG_ROMANSH_SWITZERLAND: Int = 1

val SUBLANG_RUSSIAN_RUSSIA: Int = 1

val SUBLANG_SAKHA_RUSSIA: Int = 1

val SUBLANG_SAMI_NORTHERN_NORWAY: Int = 1

val SUBLANG_SAMI_NORTHERN_SWEDEN: Int = 2

val SUBLANG_SAMI_NORTHERN_FINLAND: Int = 3

val SUBLANG_SAMI_LULE_NORWAY: Int = 4

val SUBLANG_SAMI_LULE_SWEDEN: Int = 5

val SUBLANG_SAMI_SOUTHERN_NORWAY: Int = 6

val SUBLANG_SAMI_SOUTHERN_SWEDEN: Int = 7

val SUBLANG_SAMI_SKOLT_FINLAND: Int = 8

val SUBLANG_SAMI_INARI_FINLAND: Int = 9

val SUBLANG_SANSKRIT_INDIA: Int = 1

val SUBLANG_SCOTTISH_GAELIC: Int = 1

val SUBLANG_SERBIAN_LATIN: Int = 2

val SUBLANG_SERBIAN_CYRILLIC: Int = 3

val SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN: Int = 6

val SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC: Int = 7

val SUBLANG_SERBIAN_MONTENEGRO_LATIN: Int = 11

val SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC: Int = 12

val SUBLANG_SERBIAN_SERBIA_LATIN: Int = 9

val SUBLANG_SERBIAN_SERBIA_CYRILLIC: Int = 10

val SUBLANG_SINDHI_INDIA: Int = 1

val SUBLANG_SINDHI_AFGHANISTAN: Int = 2

val SUBLANG_SINDHI_PAKISTAN: Int = 2

val SUBLANG_SINHALESE_SRI_LANKA: Int = 1

val SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA: Int = 1

val SUBLANG_SLOVAK_SLOVAKIA: Int = 1

val SUBLANG_SLOVENIAN_SLOVENIA: Int = 1

val SUBLANG_SPANISH: Int = 1

val SUBLANG_SPANISH_MEXICAN: Int = 2

val SUBLANG_SPANISH_MODERN: Int = 3

val SUBLANG_SPANISH_GUATEMALA: Int = 4

val SUBLANG_SPANISH_COSTA_RICA: Int = 5

val SUBLANG_SPANISH_PANAMA: Int = 6

val SUBLANG_SPANISH_DOMINICAN_REPUBLIC: Int = 7

val SUBLANG_SPANISH_VENEZUELA: Int = 8

val SUBLANG_SPANISH_COLOMBIA: Int = 9

val SUBLANG_SPANISH_PERU: Int = 10

val SUBLANG_SPANISH_ARGENTINA: Int = 11

val SUBLANG_SPANISH_ECUADOR: Int = 12

val SUBLANG_SPANISH_CHILE: Int = 13

val SUBLANG_SPANISH_URUGUAY: Int = 14

val SUBLANG_SPANISH_PARAGUAY: Int = 15

val SUBLANG_SPANISH_BOLIVIA: Int = 16

val SUBLANG_SPANISH_EL_SALVADOR: Int = 17

val SUBLANG_SPANISH_HONDURAS: Int = 18

val SUBLANG_SPANISH_NICARAGUA: Int = 19

val SUBLANG_SPANISH_PUERTO_RICO: Int = 20

val SUBLANG_SPANISH_US: Int = 21

val SUBLANG_SWAHILI_KENYA: Int = 1

val SUBLANG_SWEDISH: Int = 1

val SUBLANG_SWEDISH_FINLAND: Int = 2

val SUBLANG_SYRIAC: Int = 1

val SUBLANG_SYRIAC_SYRIA: Int = 1

val SUBLANG_TAJIK_TAJIKISTAN: Int = 1

val SUBLANG_TAMAZIGHT_ALGERIA_LATIN: Int = 2

val SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH: Int = 4

val SUBLANG_TAMIL_INDIA: Int = 1

val SUBLANG_TAMIL_SRI_LANKA: Int = 2

val SUBLANG_TATAR_RUSSIA: Int = 1

val SUBLANG_TELUGU_INDIA: Int = 1

val SUBLANG_THAI_THAILAND: Int = 1

val SUBLANG_TIBETAN_PRC: Int = 1

val SUBLANG_TIBETAN_BHUTAN: Int = 2

val SUBLANG_TIGRIGNA_ERITREA: Int = 2

val SUBLANG_TIGRINYA_ERITREA: Int = 2

val SUBLANG_TIGRINYA_ETHIOPIA: Int = 1

val SUBLANG_TSWANA_BOTSWANA: Int = 2

val SUBLANG_TSWANA_SOUTH_AFRICA: Int = 1

val SUBLANG_TURKISH_TURKEY: Int = 1

val SUBLANG_TURKMEN_TURKMENISTAN: Int = 1

val SUBLANG_UIGHUR_PRC: Int = 1

val SUBLANG_UKRAINIAN_UKRAINE: Int = 1

val SUBLANG_UPPER_SORBIAN_GERMANY: Int = 1

val SUBLANG_URDU_PAKISTAN: Int = 1

val SUBLANG_URDU_INDIA: Int = 2

val SUBLANG_UZBEK_LATIN: Int = 1

val SUBLANG_UZBEK_CYRILLIC: Int = 2

val SUBLANG_VALENCIAN_VALENCIA: Int = 2

val SUBLANG_VIETNAMESE_VIETNAM: Int = 1

val SUBLANG_WELSH_UNITED_KINGDOM: Int = 1

val SUBLANG_WOLOF_SENEGAL: Int = 1

val SUBLANG_YORUBA_NIGERIA: Int = 1

val SUBLANG_XHOSA_SOUTH_AFRICA: Int = 1

val SUBLANG_YAKUT_RUSSIA: Int = 1

val SUBLANG_YI_PRC: Int = 1

val SUBLANG_ZULU_SOUTH_AFRICA: Int = 1

val SORT_DEFAULT: Int = 0

val SORT_INVARIANT_MATH: Int = 1

val SORT_JAPANESE_XJIS: Int = 0

val SORT_JAPANESE_UNICODE: Int = 1

val SORT_JAPANESE_RADICALSTROKE: Int = 4

val SORT_CHINESE_BIG5: Int = 0

val SORT_CHINESE_PRCP: Int = 0

val SORT_CHINESE_UNICODE: Int = 1

val SORT_CHINESE_PRC: Int = 2

val SORT_CHINESE_BOPOMOFO: Int = 3

val SORT_CHINESE_RADICALSTROKE: Int = 4

val SORT_KOREAN_KSC: Int = 0

val SORT_KOREAN_UNICODE: Int = 1

val SORT_GERMAN_PHONE_BOOK: Int = 1

val SORT_HUNGARIAN_DEFAULT: Int = 0

val SORT_HUNGARIAN_TECHNICAL: Int = 1

val SORT_GEORGIAN_TRADITIONAL: Int = 0

val SORT_GEORGIAN_MODERN: Int = 1

val NLS_VALID_LOCALE_MASK: Int = 1048575

val LOCALE_NAME_MAX_LENGTH: Int = 85

val LANG_SYSTEM_DEFAULT: Int = 2048

val LANG_USER_DEFAULT: Int = 1024

val LOCALE_SYSTEM_DEFAULT: DWORD = 2048

val LOCALE_USER_DEFAULT: DWORD = 1024

val LOCALE_NEUTRAL: DWORD = 0

val LOCALE_CUSTOM_DEFAULT: DWORD = 3072

val LOCALE_CUSTOM_UNSPECIFIED: DWORD = 4096

val LOCALE_CUSTOM_UI_DEFAULT: DWORD = 5120

val LOCALE_INVARIANT: DWORD = 127

val STATUS_WAIT_0: DWORD = 0

val STATUS_ABANDONED_WAIT_0: DWORD = 128

val STATUS_USER_APC: DWORD = 192

val STATUS_TIMEOUT: DWORD = 258

val STATUS_PENDING: DWORD = 259

val DBG_EXCEPTION_HANDLED: DWORD = 65537

val DBG_CONTINUE: DWORD = 65538

val STATUS_SEGMENT_NOTIFICATION: DWORD = 1073741829

val STATUS_FATAL_APP_EXIT: DWORD = 1073741845

val DBG_TERMINATE_THREAD: DWORD = 1073807363

val DBG_TERMINATE_PROCESS: DWORD = 1073807364

val DBG_CONTROL_C: DWORD = 1073807365

val DBG_PRINTEXCEPTION_C: DWORD = 1073807366

val DBG_RIPEXCEPTION: DWORD = 1073807367

val DBG_CONTROL_BREAK: DWORD = 1073807368

val DBG_COMMAND_EXCEPTION: DWORD = 1073807369

val STATUS_GUARD_PAGE_VIOLATION: DWORD = -2147483647

val STATUS_DATATYPE_MISALIGNMENT: DWORD = -2147483646

val STATUS_BREAKPOINT: DWORD = -2147483645

val STATUS_SINGLE_STEP: DWORD = -2147483644

val STATUS_LONGJUMP: DWORD = -2147483610

val STATUS_UNWIND_CONSOLIDATE: DWORD = -2147483607

val DBG_EXCEPTION_NOT_HANDLED: DWORD = -2147418111

val STATUS_ACCESS_VIOLATION: DWORD = -1073741819

val STATUS_IN_PAGE_ERROR: DWORD = -1073741818

val STATUS_INVALID_HANDLE: DWORD = -1073741816

val STATUS_INVALID_PARAMETER: DWORD = -1073741811

val STATUS_NO_MEMORY: DWORD = -1073741801

val STATUS_ILLEGAL_INSTRUCTION: DWORD = -1073741795

val STATUS_NONCONTINUABLE_EXCEPTION: DWORD = -1073741787

val STATUS_INVALID_DISPOSITION: DWORD = -1073741786

val STATUS_ARRAY_BOUNDS_EXCEEDED: DWORD = -1073741684

val STATUS_FLOAT_DENORMAL_OPERAND: DWORD = -1073741683

val STATUS_FLOAT_DIVIDE_BY_ZERO: DWORD = -1073741682

val STATUS_FLOAT_INEXACT_RESULT: DWORD = -1073741681

val STATUS_FLOAT_INVALID_OPERATION: DWORD = -1073741680

val STATUS_FLOAT_OVERFLOW: DWORD = -1073741679

val STATUS_FLOAT_STACK_CHECK: DWORD = -1073741678

val STATUS_FLOAT_UNDERFLOW: DWORD = -1073741677

val STATUS_INTEGER_DIVIDE_BY_ZERO: DWORD = -1073741676

val STATUS_INTEGER_OVERFLOW: DWORD = -1073741675

val STATUS_PRIVILEGED_INSTRUCTION: DWORD = -1073741674

val STATUS_STACK_OVERFLOW: DWORD = -1073741571

val STATUS_DLL_NOT_FOUND: DWORD = -1073741515

val STATUS_ORDINAL_NOT_FOUND: DWORD = -1073741512

val STATUS_ENTRYPOINT_NOT_FOUND: DWORD = -1073741511

val STATUS_CONTROL_C_EXIT: DWORD = -1073741510

val STATUS_DLL_INIT_FAILED: DWORD = -1073741502

val STATUS_FLOAT_MULTIPLE_FAULTS: DWORD = -1073741132

val STATUS_FLOAT_MULTIPLE_TRAPS: DWORD = -1073741131

val STATUS_REG_NAT_CONSUMPTION: DWORD = -1073741111

val STATUS_STACK_BUFFER_OVERRUN: DWORD = -1073740791

val STATUS_INVALID_CRUNTIME_PARAMETER: DWORD = -1073740777

val STATUS_ASSERTION_FAILURE: DWORD = -1073740768

val STATUS_SXS_EARLY_DEACTIVATION: DWORD = -1072365553

val STATUS_SXS_INVALID_DEACTIVATION: DWORD = -1072365552

val MAXIMUM_WAIT_OBJECTS: Int = 64

val MAXIMUM_SUSPEND_COUNT: Int = 127

val PF_TEMPORAL_LEVEL_1: Int = 3

val PF_TEMPORAL_LEVEL_2: Int = 2

val PF_TEMPORAL_LEVEL_3: Int = 1

val PF_NON_TEMPORAL_LEVEL_ALL: Int = 0

val EXCEPTION_READ_FAULT: Int = 0

val EXCEPTION_WRITE_FAULT: Int = 1

val EXCEPTION_EXECUTE_FAULT: Int = 8

val CONTEXT_AMD64: Int = 1048576

val CONTEXT_CONTROL: Int = 1048577

val CONTEXT_INTEGER: Int = 1048578

val CONTEXT_SEGMENTS: Int = 1048580

val CONTEXT_FLOATING_POINT: Int = 1048584

val CONTEXT_DEBUG_REGISTERS: Int = 1048592

val CONTEXT_FULL: Int = 1048587

val CONTEXT_ALL: Int = 1048607

val CONTEXT_EXCEPTION_ACTIVE: Int = 134217728

val CONTEXT_SERVICE_ACTIVE: Int = 268435456

val CONTEXT_EXCEPTION_REQUEST: Int = 1073741824

val CONTEXT_EXCEPTION_REPORTING: Int = -2147483648

val INITIAL_MXCSR: Int = 8064

val INITIAL_FPCSR: Int = 639

val LEGACY_SAVE_AREA_LENGTH: Long = 512

val RUNTIME_FUNCTION_INDIRECT: Int = 1

val UNW_FLAG_NHANDLER: Int = 0

val UNW_FLAG_EHANDLER: Int = 1

val UNW_FLAG_UHANDLER: Int = 2

val UNW_FLAG_CHAININFO: Int = 4

val EXCEPTION_NONCONTINUABLE: Int = 1

val EXCEPTION_UNWINDING: Int = 2

val EXCEPTION_EXIT_UNWIND: Int = 4

val EXCEPTION_STACK_INVALID: Int = 8

val EXCEPTION_NESTED_CALL: Int = 16

val EXCEPTION_TARGET_UNWIND: Int = 32

val EXCEPTION_COLLIDED_UNWIND: Int = 64

val EXCEPTION_UNWIND: Int = 102

val EXCEPTION_MAXIMUM_PARAMETERS: Int = 15

val UNWIND_HISTORY_TABLE_SIZE: Int = 12

val UNWIND_HISTORY_TABLE_NONE: Int = 0

val UNWIND_HISTORY_TABLE_GLOBAL: Int = 1

val UNWIND_HISTORY_TABLE_LOCAL: Int = 2

val DELETE: Int = 65536

val READ_CONTROL: Int = 131072

val WRITE_DAC: Int = 262144

val WRITE_OWNER: Int = 524288

val SYNCHRONIZE: Int = 1048576

val STANDARD_RIGHTS_REQUIRED: Int = 983040

val STANDARD_RIGHTS_READ: Int = 131072

val STANDARD_RIGHTS_WRITE: Int = 131072

val STANDARD_RIGHTS_EXECUTE: Int = 131072

val STANDARD_RIGHTS_ALL: Int = 2031616

val SPECIFIC_RIGHTS_ALL: Int = 65535

val ACCESS_SYSTEM_SECURITY: Int = 16777216

val MAXIMUM_ALLOWED: Int = 33554432

val GENERIC_READ: Int = -2147483648

val GENERIC_WRITE: Int = 1073741824

val GENERIC_EXECUTE: Int = 536870912

val GENERIC_ALL: Int = 268435456

val SID_REVISION: Int = 1

val SID_MAX_SUB_AUTHORITIES: Int = 15

val SID_RECOMMENDED_SUB_AUTHORITIES: Int = 1

val SECURITY_MAX_SID_SIZE: Long = 68

val SID_HASH_SIZE: Int = 32

val SECURITY_NULL_RID: Int = 0

val SECURITY_WORLD_RID: Int = 0

val SECURITY_LOCAL_RID: Int = 0

val SECURITY_LOCAL_LOGON_RID: Int = 1

val SECURITY_CREATOR_OWNER_RID: Int = 0

val SECURITY_CREATOR_GROUP_RID: Int = 1

val SECURITY_CREATOR_OWNER_SERVER_RID: Int = 2

val SECURITY_CREATOR_GROUP_SERVER_RID: Int = 3

val SECURITY_CREATOR_OWNER_RIGHTS_RID: Int = 4

val SECURITY_DIALUP_RID: Int = 1

val SECURITY_NETWORK_RID: Int = 2

val SECURITY_BATCH_RID: Int = 3

val SECURITY_INTERACTIVE_RID: Int = 4

val SECURITY_LOGON_IDS_RID: Int = 5

val SECURITY_LOGON_IDS_RID_COUNT: Int = 3

val SECURITY_SERVICE_RID: Int = 6

val SECURITY_ANONYMOUS_LOGON_RID: Int = 7

val SECURITY_PROXY_RID: Int = 8

val SECURITY_ENTERPRISE_CONTROLLERS_RID: Int = 9

val SECURITY_SERVER_LOGON_RID: Int = 9

val SECURITY_PRINCIPAL_SELF_RID: Int = 10

val SECURITY_AUTHENTICATED_USER_RID: Int = 11

val SECURITY_RESTRICTED_CODE_RID: Int = 12

val SECURITY_TERMINAL_SERVER_RID: Int = 13

val SECURITY_REMOTE_LOGON_RID: Int = 14

val SECURITY_THIS_ORGANIZATION_RID: Int = 15

val SECURITY_IUSER_RID: Int = 17

val SECURITY_LOCAL_SYSTEM_RID: Int = 18

val SECURITY_LOCAL_SERVICE_RID: Int = 19

val SECURITY_NETWORK_SERVICE_RID: Int = 20

val SECURITY_NT_NON_UNIQUE: Int = 21

val SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT: Int = 3

val SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID: Int = 22

val SECURITY_BUILTIN_DOMAIN_RID: Int = 32

val SECURITY_WRITE_RESTRICTED_CODE_RID: Int = 33

val SECURITY_PACKAGE_BASE_RID: Int = 64

val SECURITY_PACKAGE_RID_COUNT: Int = 2

val SECURITY_PACKAGE_NTLM_RID: Int = 10

val SECURITY_PACKAGE_SCHANNEL_RID: Int = 14

val SECURITY_PACKAGE_DIGEST_RID: Int = 21

val SECURITY_CRED_TYPE_BASE_RID: Int = 65

val SECURITY_CRED_TYPE_RID_COUNT: Int = 2

val SECURITY_CRED_TYPE_THIS_ORG_CERT_RID: Int = 1

val SECURITY_MIN_BASE_RID: Int = 80

val SECURITY_SERVICE_ID_BASE_RID: Int = 80

val SECURITY_SERVICE_ID_RID_COUNT: Int = 6

val SECURITY_RESERVED_ID_BASE_RID: Int = 81

val SECURITY_APPPOOL_ID_BASE_RID: Int = 82

val SECURITY_APPPOOL_ID_RID_COUNT: Int = 6

val SECURITY_VIRTUALSERVER_ID_BASE_RID: Int = 83

val SECURITY_VIRTUALSERVER_ID_RID_COUNT: Int = 6

val SECURITY_USERMODEDRIVERHOST_ID_BASE_RID: Int = 84

val SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT: Int = 6

val SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID: Int = 85

val SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT: Int = 6

val SECURITY_WMIHOST_ID_BASE_RID: Int = 86

val SECURITY_WMIHOST_ID_RID_COUNT: Int = 6

val SECURITY_TASK_ID_BASE_RID: Int = 87

val SECURITY_NFS_ID_BASE_RID: Int = 88

val SECURITY_COM_ID_BASE_RID: Int = 89

val SECURITY_WINDOW_MANAGER_BASE_RID: Int = 90

val SECURITY_RDV_GFX_BASE_RID: Int = 91

val SECURITY_DASHOST_ID_BASE_RID: Int = 92

val SECURITY_DASHOST_ID_RID_COUNT: Int = 6

val SECURITY_VIRTUALACCOUNT_ID_RID_COUNT: Int = 6

val SECURITY_MAX_BASE_RID: Int = 111

val SECURITY_MAX_ALWAYS_FILTERED: Int = 999

val SECURITY_MIN_NEVER_FILTERED: Int = 1000

val SECURITY_OTHER_ORGANIZATION_RID: Int = 1000

val SECURITY_WINDOWSMOBILE_ID_BASE_RID: Int = 112

val DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED: Int = 496

val DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS: Int = 497

val DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS: Int = 498

val FOREST_USER_RID_MAX: Int = 499

val DOMAIN_USER_RID_ADMIN: Int = 500

val DOMAIN_USER_RID_GUEST: Int = 501

val DOMAIN_USER_RID_KRBTGT: Int = 502

val DOMAIN_USER_RID_MAX: Int = 999

val DOMAIN_GROUP_RID_ADMINS: Int = 512

val DOMAIN_GROUP_RID_USERS: Int = 513

val DOMAIN_GROUP_RID_GUESTS: Int = 514

val DOMAIN_GROUP_RID_COMPUTERS: Int = 515

val DOMAIN_GROUP_RID_CONTROLLERS: Int = 516

val DOMAIN_GROUP_RID_CERT_ADMINS: Int = 517

val DOMAIN_GROUP_RID_SCHEMA_ADMINS: Int = 518

val DOMAIN_GROUP_RID_ENTERPRISE_ADMINS: Int = 519

val DOMAIN_GROUP_RID_POLICY_ADMINS: Int = 520

val DOMAIN_GROUP_RID_READONLY_CONTROLLERS: Int = 521

val DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS: Int = 522

val DOMAIN_ALIAS_RID_ADMINS: Int = 544

val DOMAIN_ALIAS_RID_USERS: Int = 545

val DOMAIN_ALIAS_RID_GUESTS: Int = 546

val DOMAIN_ALIAS_RID_POWER_USERS: Int = 547

val DOMAIN_ALIAS_RID_ACCOUNT_OPS: Int = 548

val DOMAIN_ALIAS_RID_SYSTEM_OPS: Int = 549

val DOMAIN_ALIAS_RID_PRINT_OPS: Int = 550

val DOMAIN_ALIAS_RID_BACKUP_OPS: Int = 551

val DOMAIN_ALIAS_RID_REPLICATOR: Int = 552

val DOMAIN_ALIAS_RID_RAS_SERVERS: Int = 553

val DOMAIN_ALIAS_RID_PREW2KCOMPACCESS: Int = 554

val DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS: Int = 555

val DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS: Int = 556

val DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS: Int = 557

val DOMAIN_ALIAS_RID_MONITORING_USERS: Int = 558

val DOMAIN_ALIAS_RID_LOGGING_USERS: Int = 559

val DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS: Int = 560

val DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS: Int = 561

val DOMAIN_ALIAS_RID_DCOM_USERS: Int = 562

val DOMAIN_ALIAS_RID_IUSERS: Int = 568

val DOMAIN_ALIAS_RID_CRYPTO_OPERATORS: Int = 569

val DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP: Int = 571

val DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP: Int = 572

val DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP: Int = 573

val DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP: Int = 574

val DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS: Int = 575

val DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS: Int = 576

val DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS: Int = 577

val DOMAIN_ALIAS_RID_HYPER_V_ADMINS: Int = 578

val DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS: Int = 579

val DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS: Int = 580

val SECURITY_APP_PACKAGE_BASE_RID: Int = 2

val SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT: Int = 2

val SECURITY_APP_PACKAGE_RID_COUNT: Int = 8

val SECURITY_CAPABILITY_BASE_RID: Int = 3

val SECURITY_BUILTIN_CAPABILITY_RID_COUNT: Int = 2

val SECURITY_CAPABILITY_RID_COUNT: Int = 5

val SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE: Int = 1

val SECURITY_CAPABILITY_INTERNET_CLIENT: Int = 1

val SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER: Int = 2

val SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER: Int = 3

val SECURITY_CAPABILITY_PICTURES_LIBRARY: Int = 4

val SECURITY_CAPABILITY_VIDEOS_LIBRARY: Int = 5

val SECURITY_CAPABILITY_MUSIC_LIBRARY: Int = 6

val SECURITY_CAPABILITY_DOCUMENTS_LIBRARY: Int = 7

val SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION: Int = 8

val SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES: Int = 9

val SECURITY_CAPABILITY_REMOVABLE_STORAGE: Int = 10

val SECURITY_CAPABILITY_INTERNET_EXPLORER: Int = 4096

val SECURITY_MANDATORY_UNTRUSTED_RID: Int = 0

val SECURITY_MANDATORY_LOW_RID: Int = 4096

val SECURITY_MANDATORY_MEDIUM_RID: Int = 8192

val SECURITY_MANDATORY_HIGH_RID: Int = 12288

val SECURITY_MANDATORY_SYSTEM_RID: Int = 16384

val SECURITY_MANDATORY_PROTECTED_PROCESS_RID: Int = 20480

val SECURITY_MANDATORY_MAXIMUM_USER_RID: Int = 16384

val SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT: Int = 1

val SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID: Int = 1

val SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID: Int = 2

val SECURITY_TRUSTED_INSTALLER_RID1: Int = 956008885

val SECURITY_TRUSTED_INSTALLER_RID2: Long = -876444647

val SECURITY_TRUSTED_INSTALLER_RID3: Int = 1831038044

val SECURITY_TRUSTED_INSTALLER_RID4: Int = 1853292631

val SECURITY_TRUSTED_INSTALLER_RID5: Long = -2023488832

val SE_GROUP_MANDATORY: Int = 1

val SE_GROUP_ENABLED_BY_DEFAULT: Int = 2

val SE_GROUP_ENABLED: Int = 4

val SE_GROUP_OWNER: Int = 8

val SE_GROUP_USE_FOR_DENY_ONLY: Int = 16

val SE_GROUP_INTEGRITY: Int = 32

val SE_GROUP_INTEGRITY_ENABLED: Int = 64

val SE_GROUP_LOGON_ID: Int = -1073741824

val SE_GROUP_RESOURCE: Int = 536870912

val SE_GROUP_VALID_ATTRIBUTES: Int = -536870785

val ACL_REVISION: Int = 2

val ACL_REVISION_DS: Int = 4

val ACL_REVISION1: Int = 1

val MIN_ACL_REVISION: Int = 2

val ACL_REVISION2: Int = 2

val ACL_REVISION3: Int = 3

val ACL_REVISION4: Int = 4

val MAX_ACL_REVISION: Int = 4

val ACCESS_MIN_MS_ACE_TYPE: Int = 0

val ACCESS_ALLOWED_ACE_TYPE: Int = 0

val ACCESS_DENIED_ACE_TYPE: Int = 1

val SYSTEM_AUDIT_ACE_TYPE: Int = 2

val SYSTEM_ALARM_ACE_TYPE: Int = 3

val ACCESS_MAX_MS_V2_ACE_TYPE: Int = 3

val ACCESS_ALLOWED_COMPOUND_ACE_TYPE: Int = 4

val ACCESS_MAX_MS_V3_ACE_TYPE: Int = 4

val ACCESS_MIN_MS_OBJECT_ACE_TYPE: Int = 5

val ACCESS_ALLOWED_OBJECT_ACE_TYPE: Int = 5

val ACCESS_DENIED_OBJECT_ACE_TYPE: Int = 6

val SYSTEM_AUDIT_OBJECT_ACE_TYPE: Int = 7

val SYSTEM_ALARM_OBJECT_ACE_TYPE: Int = 8

val ACCESS_MAX_MS_OBJECT_ACE_TYPE: Int = 8

val ACCESS_MAX_MS_V4_ACE_TYPE: Int = 8

val ACCESS_MAX_MS_ACE_TYPE: Int = 8

val ACCESS_ALLOWED_CALLBACK_ACE_TYPE: Int = 9

val ACCESS_DENIED_CALLBACK_ACE_TYPE: Int = 10

val ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE: Int = 11

val ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE: Int = 12

val SYSTEM_AUDIT_CALLBACK_ACE_TYPE: Int = 13

val SYSTEM_ALARM_CALLBACK_ACE_TYPE: Int = 14

val SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE: Int = 15

val SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE: Int = 16

val SYSTEM_MANDATORY_LABEL_ACE_TYPE: Int = 17

val SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE: Int = 18

val SYSTEM_SCOPED_POLICY_ID_ACE_TYPE: Int = 19

val ACCESS_MAX_MS_V5_ACE_TYPE: Int = 19

val OBJECT_INHERIT_ACE: Int = 1

val CONTAINER_INHERIT_ACE: Int = 2

val NO_PROPAGATE_INHERIT_ACE: Int = 4

val INHERIT_ONLY_ACE: Int = 8

val INHERITED_ACE: Int = 16

val VALID_INHERIT_FLAGS: Int = 31

val SUCCESSFUL_ACCESS_ACE_FLAG: Int = 64

val FAILED_ACCESS_ACE_FLAG: Int = 128

val SYSTEM_MANDATORY_LABEL_NO_WRITE_UP: Int = 1

val SYSTEM_MANDATORY_LABEL_NO_READ_UP: Int = 2

val SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP: Int = 4

val SYSTEM_MANDATORY_LABEL_VALID_MASK: Int = 7

val ACE_OBJECT_TYPE_PRESENT: Int = 1

val ACE_INHERITED_OBJECT_TYPE_PRESENT: Int = 2

val SECURITY_DESCRIPTOR_REVISION: Int = 1

val SECURITY_DESCRIPTOR_REVISION1: Int = 1

val SECURITY_DESCRIPTOR_MIN_LENGTH: Long = 40

val SE_OWNER_DEFAULTED: Int = 1

val SE_GROUP_DEFAULTED: Int = 2

val SE_DACL_PRESENT: Int = 4

val SE_DACL_DEFAULTED: Int = 8

val SE_SACL_PRESENT: Int = 16

val SE_SACL_DEFAULTED: Int = 32

val SE_DACL_AUTO_INHERIT_REQ: Int = 256

val SE_SACL_AUTO_INHERIT_REQ: Int = 512

val SE_DACL_AUTO_INHERITED: Int = 1024

val SE_SACL_AUTO_INHERITED: Int = 2048

val SE_DACL_PROTECTED: Int = 4096

val SE_SACL_PROTECTED: Int = 8192

val SE_RM_CONTROL_VALID: Int = 16384

val SE_SELF_RELATIVE: Int = 32768

val ACCESS_OBJECT_GUID: Int = 0

val ACCESS_PROPERTY_SET_GUID: Int = 1

val ACCESS_PROPERTY_GUID: Int = 2

val ACCESS_MAX_LEVEL: Int = 4

val AUDIT_ALLOW_NO_PRIVILEGE: Int = 1

val SE_PRIVILEGE_ENABLED_BY_DEFAULT: Int = 1

val SE_PRIVILEGE_ENABLED: Int = 2

val SE_PRIVILEGE_REMOVED: Int = 4

val SE_PRIVILEGE_USED_FOR_ACCESS: Int = -2147483648

val SE_PRIVILEGE_VALID_ATTRIBUTES: Int = -2147483641

val PRIVILEGE_SET_ALL_NECESSARY: Int = 1

val ACCESS_REASON_TYPE_MASK: Int = 16711680

val ACCESS_REASON_DATA_MASK: Int = 65535

val ACCESS_REASON_STAGING_MASK: Int = -2147483648

val ACCESS_REASON_EXDATA_MASK: Int = 2130706432

val SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE: Int = 1

val SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE: Int = 2

val SE_SECURITY_DESCRIPTOR_VALID_FLAGS: Int = 3

val SECURITY_MAX_IMPERSONATION_LEVEL: Int = 3

val SECURITY_MIN_IMPERSONATION_LEVEL: Int = 0

val DEFAULT_IMPERSONATION_LEVEL: Int = 2

val TOKEN_ASSIGN_PRIMARY: Int = 1

val TOKEN_DUPLICATE: Int = 2

val TOKEN_IMPERSONATE: Int = 4

val TOKEN_QUERY: Int = 8

val TOKEN_QUERY_SOURCE: Int = 16

val TOKEN_ADJUST_PRIVILEGES: Int = 32

val TOKEN_ADJUST_GROUPS: Int = 64

val TOKEN_ADJUST_DEFAULT: Int = 128

val TOKEN_ADJUST_SESSIONID: Int = 256

val TOKEN_ALL_ACCESS_P: Int = 983295

val TOKEN_ALL_ACCESS: Int = 983551

val TOKEN_READ: Int = 131080

val TOKEN_WRITE: Int = 131296

val TOKEN_EXECUTE: Int = 131072

val TOKEN_MANDATORY_POLICY_OFF: Int = 0

val TOKEN_MANDATORY_POLICY_NO_WRITE_UP: Int = 1

val TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN: Int = 2

val TOKEN_MANDATORY_POLICY_VALID_MASK: Int = 3

val POLICY_AUDIT_SUBCATEGORY_COUNT: Int = 56

val TOKEN_SOURCE_LENGTH: Int = 8

val CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID: Int = 0

val CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64: Int = 1

val CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64: Int = 2

val CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING: Int = 3

val CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN: Int = 4

val CLAIM_SECURITY_ATTRIBUTE_TYPE_SID: Int = 5

val CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN: Int = 6

val CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING: Int = 16

val CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE: Int = 1

val CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE: Int = 2

val CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY: Int = 4

val CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT: Int = 8

val CLAIM_SECURITY_ATTRIBUTE_DISABLED: Int = 16

val CLAIM_SECURITY_ATTRIBUTE_MANDATORY: Int = 32

val CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS: Int = 63

val CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS: Int = -65536

val CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1: Int = 1

val CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION: Int = 1

val SECURITY_DYNAMIC_TRACKING: Int = 1

val SECURITY_STATIC_TRACKING: Int = 0

val DISABLE_MAX_PRIVILEGE: Int = 1

val SANDBOX_INERT: Int = 2

val LUA_TOKEN: Int = 4

val WRITE_RESTRICTED: Int = 8

val OWNER_SECURITY_INFORMATION: Int = 1

val GROUP_SECURITY_INFORMATION: Int = 2

val DACL_SECURITY_INFORMATION: Int = 4

val SACL_SECURITY_INFORMATION: Int = 8

val LABEL_SECURITY_INFORMATION: Int = 16

val ATTRIBUTE_SECURITY_INFORMATION: Int = 32

val SCOPE_SECURITY_INFORMATION: Int = 64

val BACKUP_SECURITY_INFORMATION: Int = 65536

val PROTECTED_DACL_SECURITY_INFORMATION: Int = -2147483648

val PROTECTED_SACL_SECURITY_INFORMATION: Int = 1073741824

val UNPROTECTED_DACL_SECURITY_INFORMATION: Int = 536870912

val UNPROTECTED_SACL_SECURITY_INFORMATION: Int = 268435456

val SE_LEARNING_MODE_FLAG_PERMISSIVE: Int = 1

val PROCESS_TERMINATE: Int = 1

val PROCESS_CREATE_THREAD: Int = 2

val PROCESS_SET_SESSIONID: Int = 4

val PROCESS_VM_OPERATION: Int = 8

val PROCESS_VM_READ: Int = 16

val PROCESS_VM_WRITE: Int = 32

val PROCESS_DUP_HANDLE: Int = 64

val PROCESS_CREATE_PROCESS: Int = 128

val PROCESS_SET_QUOTA: Int = 256

val PROCESS_SET_INFORMATION: Int = 512

val PROCESS_QUERY_INFORMATION: Int = 1024

val PROCESS_SUSPEND_RESUME: Int = 2048

val PROCESS_QUERY_LIMITED_INFORMATION: Int = 4096

val PROCESS_ALL_ACCESS: Int = 2035711

val MAXIMUM_PROC_PER_GROUP: Int = 64

val MAXIMUM_PROCESSORS: Int = 64

val THREAD_TERMINATE: Int = 1

val THREAD_SUSPEND_RESUME: Int = 2

val THREAD_GET_CONTEXT: Int = 8

val THREAD_SET_CONTEXT: Int = 16

val THREAD_SET_INFORMATION: Int = 32

val THREAD_QUERY_INFORMATION: Int = 64

val THREAD_SET_THREAD_TOKEN: Int = 128

val THREAD_IMPERSONATE: Int = 256

val THREAD_DIRECT_IMPERSONATION: Int = 512

val THREAD_SET_LIMITED_INFORMATION: Int = 1024

val THREAD_QUERY_LIMITED_INFORMATION: Int = 2048

val THREAD_ALL_ACCESS: Int = 2032639

val JOB_OBJECT_ASSIGN_PROCESS: Int = 1

val JOB_OBJECT_SET_ATTRIBUTES: Int = 2

val JOB_OBJECT_QUERY: Int = 4

val JOB_OBJECT_TERMINATE: Int = 8

val JOB_OBJECT_SET_SECURITY_ATTRIBUTES: Int = 16

val JOB_OBJECT_ALL_ACCESS: Int = 2031647

val FLS_MAXIMUM_AVAILABLE: Int = 128

val TLS_MINIMUM_AVAILABLE: Int = 64

val THREAD_BASE_PRIORITY_LOWRT: Int = 15

val THREAD_BASE_PRIORITY_MAX: Int = 2

val THREAD_BASE_PRIORITY_MIN: Int = -2

val THREAD_BASE_PRIORITY_IDLE: Int = -15

val QUOTA_LIMITS_HARDWS_MIN_ENABLE: Int = 1

val QUOTA_LIMITS_HARDWS_MIN_DISABLE: Int = 2

val QUOTA_LIMITS_HARDWS_MAX_ENABLE: Int = 4

val QUOTA_LIMITS_HARDWS_MAX_DISABLE: Int = 8

val QUOTA_LIMITS_USE_DEFAULT_LIMITS: Int = 16

val MAX_HW_COUNTERS: Int = 16

val THREAD_PROFILING_FLAG_DISPATCH: Int = 1

val JOB_OBJECT_TERMINATE_AT_END_OF_JOB: Int = 0

val JOB_OBJECT_POST_AT_END_OF_JOB: Int = 1

val JOB_OBJECT_MSG_END_OF_JOB_TIME: Int = 1

val JOB_OBJECT_MSG_END_OF_PROCESS_TIME: Int = 2

val JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT: Int = 3

val JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO: Int = 4

val JOB_OBJECT_MSG_NEW_PROCESS: Int = 6

val JOB_OBJECT_MSG_EXIT_PROCESS: Int = 7

val JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS: Int = 8

val JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT: Int = 9

val JOB_OBJECT_MSG_JOB_MEMORY_LIMIT: Int = 10

val JOB_OBJECT_MSG_NOTIFICATION_LIMIT: Int = 11

val JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT: Int = 12

val JOB_OBJECT_MSG_MINIMUM: Int = 1

val JOB_OBJECT_MSG_MAXIMUM: Int = 12

val JOB_OBJECT_LIMIT_WORKINGSET: Int = 1

val JOB_OBJECT_LIMIT_PROCESS_TIME: Int = 2

val JOB_OBJECT_LIMIT_JOB_TIME: Int = 4

val JOB_OBJECT_LIMIT_ACTIVE_PROCESS: Int = 8

val JOB_OBJECT_LIMIT_AFFINITY: Int = 16

val JOB_OBJECT_LIMIT_PRIORITY_CLASS: Int = 32

val JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME: Int = 64

val JOB_OBJECT_LIMIT_SCHEDULING_CLASS: Int = 128

val JOB_OBJECT_LIMIT_PROCESS_MEMORY: Int = 256

val JOB_OBJECT_LIMIT_JOB_MEMORY: Int = 512

val JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION: Int = 1024

val JOB_OBJECT_LIMIT_BREAKAWAY_OK: Int = 2048

val JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK: Int = 4096

val JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: Int = 8192

val JOB_OBJECT_LIMIT_SUBSET_AFFINITY: Int = 16384

val JOB_OBJECT_LIMIT_RESERVED3: Int = 32768

val JOB_OBJECT_LIMIT_JOB_READ_BYTES: Int = 65536

val JOB_OBJECT_LIMIT_JOB_WRITE_BYTES: Int = 131072

val JOB_OBJECT_LIMIT_RATE_CONTROL: Int = 262144

val JOB_OBJECT_LIMIT_RESERVED4: Int = 65536

val JOB_OBJECT_LIMIT_RESERVED5: Int = 131072

val JOB_OBJECT_LIMIT_RESERVED6: Int = 262144

val JOB_OBJECT_LIMIT_VALID_FLAGS: Int = 524287

val JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS: Int = 255

val JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS: Int = 32767

val JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS: Int = 524287

val JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS: Int = 459268

val JOB_OBJECT_UILIMIT_NONE: Int = 0

val JOB_OBJECT_UILIMIT_HANDLES: Int = 1

val JOB_OBJECT_UILIMIT_READCLIPBOARD: Int = 2

val JOB_OBJECT_UILIMIT_WRITECLIPBOARD: Int = 4

val JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS: Int = 8

val JOB_OBJECT_UILIMIT_DISPLAYSETTINGS: Int = 16

val JOB_OBJECT_UILIMIT_GLOBALATOMS: Int = 32

val JOB_OBJECT_UILIMIT_DESKTOP: Int = 64

val JOB_OBJECT_UILIMIT_EXITWINDOWS: Int = 128

val JOB_OBJECT_UILIMIT_ALL: Int = 255

val JOB_OBJECT_UI_VALID_FLAGS: Int = 255

val JOB_OBJECT_SECURITY_NO_ADMIN: Int = 1

val JOB_OBJECT_SECURITY_RESTRICTED_TOKEN: Int = 2

val JOB_OBJECT_SECURITY_ONLY_TOKEN: Int = 4

val JOB_OBJECT_SECURITY_FILTER_TOKENS: Int = 8

val JOB_OBJECT_SECURITY_VALID_FLAGS: Int = 15

val JOB_OBJECT_CPU_RATE_CONTROL_ENABLE: Int = 1

val JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED: Int = 2

val JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP: Int = 4

val JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY: Int = 8

val JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS: Int = 15

val EVENT_MODIFY_STATE: Int = 2

val EVENT_ALL_ACCESS: Int = 2031619

val MUTANT_QUERY_STATE: Int = 1

val MUTANT_ALL_ACCESS: Int = 2031617

val SEMAPHORE_MODIFY_STATE: Int = 2

val SEMAPHORE_ALL_ACCESS: Int = 2031619

val TIMER_QUERY_STATE: Int = 1

val TIMER_MODIFY_STATE: Int = 2

val TIMER_ALL_ACCESS: Int = 2031619

val TIME_ZONE_ID_UNKNOWN: Int = 0

val TIME_ZONE_ID_STANDARD: Int = 1

val TIME_ZONE_ID_DAYLIGHT: Int = 2

val LTP_PC_SMT: Int = 1

val CACHE_FULLY_ASSOCIATIVE: Int = 255

val PROCESSOR_INTEL_386: Int = 386

val PROCESSOR_INTEL_486: Int = 486

val PROCESSOR_INTEL_PENTIUM: Int = 586

val PROCESSOR_INTEL_IA64: Int = 2200

val PROCESSOR_AMD_X8664: Int = 8664

val PROCESSOR_MIPS_R4000: Int = 4000

val PROCESSOR_ALPHA_21064: Int = 21064

val PROCESSOR_PPC_601: Int = 601

val PROCESSOR_PPC_603: Int = 603

val PROCESSOR_PPC_604: Int = 604

val PROCESSOR_PPC_620: Int = 620

val PROCESSOR_HITACHI_SH3: Int = 10003

val PROCESSOR_HITACHI_SH3E: Int = 10004

val PROCESSOR_HITACHI_SH4: Int = 10005

val PROCESSOR_MOTOROLA_821: Int = 821

val PROCESSOR_SHx_SH3: Int = 103

val PROCESSOR_SHx_SH4: Int = 104

val PROCESSOR_STRONGARM: Int = 2577

val PROCESSOR_ARM720: Int = 1824

val PROCESSOR_ARM820: Int = 2080

val PROCESSOR_ARM920: Int = 2336

val PROCESSOR_ARM_7TDMI: Int = 70001

val PROCESSOR_OPTIL: Int = 18767

val PROCESSOR_ARCHITECTURE_INTEL: Int = 0

val PROCESSOR_ARCHITECTURE_MIPS: Int = 1

val PROCESSOR_ARCHITECTURE_ALPHA: Int = 2

val PROCESSOR_ARCHITECTURE_PPC: Int = 3

val PROCESSOR_ARCHITECTURE_SHX: Int = 4

val PROCESSOR_ARCHITECTURE_ARM: Int = 5

val PROCESSOR_ARCHITECTURE_IA64: Int = 6

val PROCESSOR_ARCHITECTURE_ALPHA64: Int = 7

val PROCESSOR_ARCHITECTURE_MSIL: Int = 8

val PROCESSOR_ARCHITECTURE_AMD64: Int = 9

val PROCESSOR_ARCHITECTURE_IA32_ON_WIN64: Int = 10

val PROCESSOR_ARCHITECTURE_NEUTRAL: Int = 11

val PROCESSOR_ARCHITECTURE_UNKNOWN: Int = 65535

val PF_FLOATING_POINT_PRECISION_ERRATA: Int = 0

val PF_FLOATING_POINT_EMULATED: Int = 1

val PF_COMPARE_EXCHANGE_DOUBLE: Int = 2

val PF_MMX_INSTRUCTIONS_AVAILABLE: Int = 3

val PF_PPC_MOVEMEM_64BIT_OK: Int = 4

val PF_ALPHA_BYTE_INSTRUCTIONS: Int = 5

val PF_XMMI_INSTRUCTIONS_AVAILABLE: Int = 6

val PF_3DNOW_INSTRUCTIONS_AVAILABLE: Int = 7

val PF_RDTSC_INSTRUCTION_AVAILABLE: Int = 8

val PF_PAE_ENABLED: Int = 9

val PF_XMMI64_INSTRUCTIONS_AVAILABLE: Int = 10

val PF_SSE_DAZ_MODE_AVAILABLE: Int = 11

val PF_NX_ENABLED: Int = 12

val PF_SSE3_INSTRUCTIONS_AVAILABLE: Int = 13

val PF_COMPARE_EXCHANGE128: Int = 14

val PF_COMPARE64_EXCHANGE128: Int = 15

val PF_CHANNELS_ENABLED: Int = 16

val PF_XSAVE_ENABLED: Int = 17

val PF_ARM_VFP_32_REGISTERS_AVAILABLE: Int = 18

val PF_ARM_NEON_INSTRUCTIONS_AVAILABLE: Int = 19

val PF_SECOND_LEVEL_ADDRESS_TRANSLATION: Int = 20

val PF_VIRT_FIRMWARE_ENABLED: Int = 21

val PF_RDWRFSGSBASE_AVAILABLE: Int = 22

val PF_FASTFAIL_AVAILABLE: Int = 23

val PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE: Int = 24

val PF_ARM_64BIT_LOADSTORE_ATOMIC: Int = 25

val PF_ARM_EXTERNAL_CACHE_AVAILABLE: Int = 26

val PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE: Int = 27

val XSTATE_LEGACY_FLOATING_POINT: Int = 0

val XSTATE_LEGACY_SSE: Int = 1

val XSTATE_GSSE: Int = 2

val XSTATE_AVX: Int = 2

val XSTATE_MASK_LEGACY_FLOATING_POINT: Long = 1

val XSTATE_MASK_LEGACY_SSE: Long = 2

val XSTATE_MASK_LEGACY: Long = 3

val XSTATE_MASK_GSSE: Long = 4

val XSTATE_MASK_AVX: Long = 4

val MAXIMUM_XSTATE_FEATURES: Int = 64

val SECTION_QUERY: Int = 1

val SECTION_MAP_WRITE: Int = 2

val SECTION_MAP_READ: Int = 4

val SECTION_MAP_EXECUTE: Int = 8

val SECTION_EXTEND_SIZE: Int = 16

val SECTION_MAP_EXECUTE_EXPLICIT: Int = 32

val SECTION_ALL_ACCESS: Int = 983071

val SESSION_QUERY_ACCESS: Int = 1

val SESSION_MODIFY_ACCESS: Int = 2

val SESSION_ALL_ACCESS: Int = 983043

val PAGE_NOACCESS: Int = 1

val PAGE_READONLY: Int = 2

val PAGE_READWRITE: Int = 4

val PAGE_WRITECOPY: Int = 8

val PAGE_EXECUTE: Int = 16

val PAGE_EXECUTE_READ: Int = 32

val PAGE_EXECUTE_READWRITE: Int = 64

val PAGE_EXECUTE_WRITECOPY: Int = 128

val PAGE_GUARD: Int = 256

val PAGE_NOCACHE: Int = 512

val PAGE_WRITECOMBINE: Int = 1024

val MEM_COMMIT: Int = 4096

val MEM_RESERVE: Int = 8192

val MEM_DECOMMIT: Int = 16384

val MEM_RELEASE: Int = 32768

val MEM_FREE: Int = 65536

val MEM_PRIVATE: Int = 131072

val MEM_MAPPED: Int = 262144

val MEM_RESET: Int = 524288

val MEM_TOP_DOWN: Int = 1048576

val MEM_WRITE_WATCH: Int = 2097152

val MEM_PHYSICAL: Int = 4194304

val MEM_ROTATE: Int = 8388608

val MEM_LARGE_PAGES: Int = 536870912

val MEM_4MB_PAGES: Int = -2147483648

val SEC_FILE: Int = 8388608

val SEC_IMAGE: Int = 16777216

val SEC_PROTECTED_IMAGE: Int = 33554432

val SEC_RESERVE: Int = 67108864

val SEC_COMMIT: Int = 134217728

val SEC_NOCACHE: Int = 268435456

val SEC_WRITECOMBINE: Int = 1073741824

val SEC_LARGE_PAGES: Int = -2147483648

val SEC_IMAGE_NO_EXECUTE: Int = 285212672

val MEM_IMAGE: Int = 16777216

val WRITE_WATCH_FLAG_RESET: Int = 1

val MEM_UNMAP_WITH_TRANSIENT_BOOST: Int = 1

val FILE_READ_DATA: Int = 1

val FILE_LIST_DIRECTORY: Int = 1

val FILE_WRITE_DATA: Int = 2

val FILE_ADD_FILE: Int = 2

val FILE_APPEND_DATA: Int = 4

val FILE_ADD_SUBDIRECTORY: Int = 4

val FILE_CREATE_PIPE_INSTANCE: Int = 4

val FILE_READ_EA: Int = 8

val FILE_WRITE_EA: Int = 16

val FILE_EXECUTE: Int = 32

val FILE_TRAVERSE: Int = 32

val FILE_DELETE_CHILD: Int = 64

val FILE_READ_ATTRIBUTES: Int = 128

val FILE_WRITE_ATTRIBUTES: Int = 256

val FILE_ALL_ACCESS: Int = 2032127

val FILE_GENERIC_READ: Int = 1179785

val FILE_GENERIC_WRITE: Int = 1179926

val FILE_GENERIC_EXECUTE: Int = 1179808

val FILE_SUPERSEDE: Int = 0

val FILE_OPEN: Int = 1

val FILE_CREATE: Int = 2

val FILE_OPEN_IF: Int = 3

val FILE_OVERWRITE: Int = 4

val FILE_OVERWRITE_IF: Int = 5

val FILE_MAXIMUM_DISPOSITION: Int = 5

val FILE_DIRECTORY_FILE: Int = 1

val FILE_WRITE_THROUGH: Int = 2

val FILE_SEQUENTIAL_ONLY: Int = 4

val FILE_NO_INTERMEDIATE_BUFFERING: Int = 8

val FILE_SYNCHRONOUS_IO_ALERT: Int = 16

val FILE_SYNCHRONOUS_IO_NONALERT: Int = 32

val FILE_NON_DIRECTORY_FILE: Int = 64

val FILE_CREATE_TREE_CONNECTION: Int = 128

val FILE_COMPLETE_IF_OPLOCKED: Int = 256

val FILE_NO_EA_KNOWLEDGE: Int = 512

val FILE_OPEN_REMOTE_INSTANCE: Int = 1024

val FILE_RANDOM_ACCESS: Int = 2048

val FILE_DELETE_ON_CLOSE: Int = 4096

val FILE_OPEN_BY_FILE_ID: Int = 8192

val FILE_OPEN_FOR_BACKUP_INTENT: Int = 16384

val FILE_NO_COMPRESSION: Int = 32768

val FILE_RESERVE_OPFILTER: Int = 1048576

val FILE_OPEN_REPARSE_POINT: Int = 2097152

val FILE_OPEN_NO_RECALL: Int = 4194304

val FILE_OPEN_FOR_FREE_SPACE_QUERY: Int = 8388608

val FILE_SHARE_READ: Int = 1

val FILE_SHARE_WRITE: Int = 2

val FILE_SHARE_DELETE: Int = 4

val FILE_SHARE_VALID_FLAGS: Int = 7

val FILE_ATTRIBUTE_READONLY: Int = 1

val FILE_ATTRIBUTE_HIDDEN: Int = 2

val FILE_ATTRIBUTE_SYSTEM: Int = 4

val FILE_ATTRIBUTE_DIRECTORY: Int = 16

val FILE_ATTRIBUTE_ARCHIVE: Int = 32

val FILE_ATTRIBUTE_DEVICE: Int = 64

val FILE_ATTRIBUTE_NORMAL: Int = 128

val FILE_ATTRIBUTE_TEMPORARY: Int = 256

val FILE_ATTRIBUTE_SPARSE_FILE: Int = 512

val FILE_ATTRIBUTE_REPARSE_POINT: Int = 1024

val FILE_ATTRIBUTE_COMPRESSED: Int = 2048

val FILE_ATTRIBUTE_OFFLINE: Int = 4096

val FILE_ATTRIBUTE_NOT_CONTENT_INDEXED: Int = 8192

val FILE_ATTRIBUTE_ENCRYPTED: Int = 16384

val FILE_ATTRIBUTE_VIRTUAL: Int = 65536

val FILE_NOTIFY_CHANGE_FILE_NAME: Int = 1

val FILE_NOTIFY_CHANGE_DIR_NAME: Int = 2

val FILE_NOTIFY_CHANGE_ATTRIBUTES: Int = 4

val FILE_NOTIFY_CHANGE_SIZE: Int = 8

val FILE_NOTIFY_CHANGE_LAST_WRITE: Int = 16

val FILE_NOTIFY_CHANGE_LAST_ACCESS: Int = 32

val FILE_NOTIFY_CHANGE_CREATION: Int = 64

val FILE_NOTIFY_CHANGE_SECURITY: Int = 256

val FILE_ACTION_ADDED: Int = 1

val FILE_ACTION_REMOVED: Int = 2

val FILE_ACTION_MODIFIED: Int = 3

val FILE_ACTION_RENAMED_OLD_NAME: Int = 4

val FILE_ACTION_RENAMED_NEW_NAME: Int = 5

val MAILSLOT_NO_MESSAGE: DWORD = -1

val MAILSLOT_WAIT_FOREVER: DWORD = -1

val FILE_CASE_SENSITIVE_SEARCH: Int = 1

val FILE_CASE_PRESERVED_NAMES: Int = 2

val FILE_UNICODE_ON_DISK: Int = 4

val FILE_PERSISTENT_ACLS: Int = 8

val FILE_FILE_COMPRESSION: Int = 16

val FILE_VOLUME_QUOTAS: Int = 32

val FILE_SUPPORTS_SPARSE_FILES: Int = 64

val FILE_SUPPORTS_REPARSE_POINTS: Int = 128

val FILE_SUPPORTS_REMOTE_STORAGE: Int = 256

val FILE_VOLUME_IS_COMPRESSED: Int = 32768

val FILE_SUPPORTS_OBJECT_IDS: Int = 65536

val FILE_SUPPORTS_ENCRYPTION: Int = 131072

val FILE_NAMED_STREAMS: Int = 262144

val FILE_READ_ONLY_VOLUME: Int = 524288

val FILE_SEQUENTIAL_WRITE_ONCE: Int = 1048576

val FILE_SUPPORTS_TRANSACTIONS: Int = 2097152

val FILE_SUPPORTS_HARD_LINKS: Int = 4194304

val FILE_SUPPORTS_EXTENDED_ATTRIBUTES: Int = 8388608

val FILE_SUPPORTS_OPEN_BY_FILE_ID: Int = 16777216

val FILE_SUPPORTS_USN_JOURNAL: Int = 33554432

val FILE_SUPPORTS_INTEGRITY_STREAMS: Int = 67108864

val REPARSE_GUID_DATA_BUFFER_HEADER_SIZE: LONG = 24

val MAXIMUM_REPARSE_DATA_BUFFER_SIZE: Int = 16384

val SYMLINK_FLAG_RELATIVE: Int = 1

val IO_REPARSE_TAG_RESERVED_ZERO: Int = 0

val IO_REPARSE_TAG_RESERVED_ONE: Int = 1

val IO_REPARSE_TAG_RESERVED_RANGE: Int = 1

val IO_REPARSE_TAG_MOUNT_POINT: Int = -1610612733

val IO_REPARSE_TAG_HSM: Int = -1073741820

val IO_REPARSE_TAG_HSM2: Int = -2147483642

val IO_REPARSE_TAG_SIS: Int = -2147483641

val IO_REPARSE_TAG_WIM: Int = -2147483640

val IO_REPARSE_TAG_CSV: Int = -2147483639

val IO_REPARSE_TAG_DFS: Int = -2147483638

val IO_REPARSE_TAG_FILTER_MANAGER: Int = -2147483637

val IO_REPARSE_TAG_DFSR: Int = -2147483630

val IO_REPARSE_TAG_SYMLINK: Int = -1610612724

val IO_REPARSE_TAG_IIS_CACHE: Int = -1610612720

val IO_REPARSE_TAG_DRIVE_EXTENDER: Int = -2147483643

val IO_REPARSE_TAG_DEDUP: Int = -2147483629

val IO_REPARSE_TAG_NFS: Int = -2147483628

val IO_COMPLETION_MODIFY_STATE: Int = 2

val IO_COMPLETION_ALL_ACCESS: Int = 2031619

val DUPLICATE_CLOSE_SOURCE: Int = 1

val DUPLICATE_SAME_ACCESS: Int = 2

val POWERBUTTON_ACTION_INDEX_NOTHING: Int = 0

val POWERBUTTON_ACTION_INDEX_SLEEP: Int = 1

val POWERBUTTON_ACTION_INDEX_HIBERNATE: Int = 2

val POWERBUTTON_ACTION_INDEX_SHUTDOWN: Int = 3

val POWERBUTTON_ACTION_VALUE_NOTHING: Int = 0

val POWERBUTTON_ACTION_VALUE_SLEEP: Int = 2

val POWERBUTTON_ACTION_VALUE_HIBERNATE: Int = 3

val POWERBUTTON_ACTION_VALUE_SHUTDOWN: Int = 6

val PERFSTATE_POLICY_CHANGE_IDEAL: Int = 0

val PERFSTATE_POLICY_CHANGE_SINGLE: Int = 1

val PERFSTATE_POLICY_CHANGE_ROCKET: Int = 2

val PERFSTATE_POLICY_CHANGE_MAX: Int = 2

val PROCESSOR_PERF_BOOST_POLICY_DISABLED: Int = 0

val PROCESSOR_PERF_BOOST_POLICY_MAX: Int = 100

val PROCESSOR_PERF_BOOST_MODE_DISABLED: Int = 0

val PROCESSOR_PERF_BOOST_MODE_ENABLED: Int = 1

val PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE: Int = 2

val PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED: Int = 3

val PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE: Int = 4

val PROCESSOR_PERF_BOOST_MODE_MAX: Int = 4

val CORE_PARKING_POLICY_CHANGE_IDEAL: Int = 0

val CORE_PARKING_POLICY_CHANGE_SINGLE: Int = 1

val CORE_PARKING_POLICY_CHANGE_ROCKET: Int = 2

val CORE_PARKING_POLICY_CHANGE_MULTISTEP: Int = 3

val CORE_PARKING_POLICY_CHANGE_MAX: Int = 3

val POWER_DEVICE_IDLE_POLICY_PERFORMANCE: Int = 0

val POWER_DEVICE_IDLE_POLICY_CONSERVATIVE: Int = 1

val POWER_SYSTEM_MAXIMUM: Int = 7

val ES_SYSTEM_REQUIRED: DWORD = 1

val ES_DISPLAY_REQUIRED: DWORD = 2

val ES_USER_PRESENT: DWORD = 4

val ES_AWAYMODE_REQUIRED: DWORD = 64

val ES_CONTINUOUS: DWORD = -2147483648

val DIAGNOSTIC_REASON_VERSION: Int = 0

val POWER_REQUEST_CONTEXT_VERSION: Int = 0

val DIAGNOSTIC_REASON_SIMPLE_STRING: Int = 1

val DIAGNOSTIC_REASON_DETAILED_STRING: Int = 2

val DIAGNOSTIC_REASON_NOT_SPECIFIED: Int = -2147483648

val DIAGNOSTIC_REASON_INVALID_FLAGS: Int = 2147483644

val POWER_REQUEST_CONTEXT_SIMPLE_STRING: Int = 1

val POWER_REQUEST_CONTEXT_DETAILED_STRING: Int = 2

val PDCAP_D0_SUPPORTED: Int = 1

val PDCAP_D1_SUPPORTED: Int = 2

val PDCAP_D2_SUPPORTED: Int = 4

val PDCAP_D3_SUPPORTED: Int = 8

val PDCAP_WAKE_FROM_D0_SUPPORTED: Int = 16

val PDCAP_WAKE_FROM_D1_SUPPORTED: Int = 32

val PDCAP_WAKE_FROM_D2_SUPPORTED: Int = 64

val PDCAP_WAKE_FROM_D3_SUPPORTED: Int = 128

val PDCAP_WARM_EJECT_SUPPORTED: Int = 256

val POWER_SETTING_VALUE_VERSION: Int = 1

val POWER_PLATFORM_ROLE_V1: Int = 1

val POWER_PLATFORM_ROLE_V1_MAX: Int = 8

val POWER_PLATFORM_ROLE_V2: Int = 2

val POWER_PLATFORM_ROLE_V2_MAX: Int = 9

val POWER_PLATFORM_ROLE_VERSION: Int = 1

val POWER_PLATFORM_ROLE_VERSION_MAX: Int = 8

val PROC_IDLE_BUCKET_COUNT: Int = 6

val PROC_IDLE_BUCKET_COUNT_EX: Int = 16

val ACPI_PPM_SOFTWARE_ALL: Int = 252

val ACPI_PPM_SOFTWARE_ANY: Int = 253

val ACPI_PPM_HARDWARE_ALL: Int = 254

val MS_PPM_SOFTWARE_ALL: Int = 1

val PPM_FIRMWARE_ACPI1C2: Int = 1

val PPM_FIRMWARE_ACPI1C3: Int = 2

val PPM_FIRMWARE_ACPI1TSTATES: Int = 4

val PPM_FIRMWARE_CST: Int = 8

val PPM_FIRMWARE_CSD: Int = 16

val PPM_FIRMWARE_PCT: Int = 32

val PPM_FIRMWARE_PSS: Int = 64

val PPM_FIRMWARE_XPSS: Int = 128

val PPM_FIRMWARE_PPC: Int = 256

val PPM_FIRMWARE_PSD: Int = 512

val PPM_FIRMWARE_PTC: Int = 1024

val PPM_FIRMWARE_TSS: Int = 2048

val PPM_FIRMWARE_TPC: Int = 4096

val PPM_FIRMWARE_TSD: Int = 8192

val PPM_FIRMWARE_PCCH: Int = 16384

val PPM_FIRMWARE_PCCP: Int = 32768

val PPM_FIRMWARE_OSC: Int = 65536

val PPM_FIRMWARE_PDC: Int = 131072

val PPM_FIRMWARE_CPC: Int = 262144

val PPM_PERFORMANCE_IMPLEMENTATION_NONE: Int = 0

val PPM_PERFORMANCE_IMPLEMENTATION_PSTATES: Int = 1

val PPM_PERFORMANCE_IMPLEMENTATION_PCCV1: Int = 2

val PPM_PERFORMANCE_IMPLEMENTATION_CPPC: Int = 3

val PPM_PERFORMANCE_IMPLEMENTATION_PEP: Int = 4

val PPM_IDLE_IMPLEMENTATION_NONE: Int = 0

val PPM_IDLE_IMPLEMENTATION_CSTATES: Int = 1

val PPM_IDLE_IMPLEMENTATION_PEP: Int = 2

val POWER_ACTION_QUERY_ALLOWED: Int = 1

val POWER_ACTION_UI_ALLOWED: Int = 2

val POWER_ACTION_OVERRIDE_APPS: Int = 4

val POWER_ACTION_HIBERBOOT: Int = 8

val POWER_ACTION_PSEUDO_TRANSITION: Int = 134217728

val POWER_ACTION_LIGHTEST_FIRST: Int = 268435456

val POWER_ACTION_LOCK_CONSOLE: Int = 536870912

val POWER_ACTION_DISABLE_WAKES: Int = 1073741824

val POWER_ACTION_CRITICAL: Int = -2147483648

val POWER_LEVEL_USER_NOTIFY_TEXT: Int = 1

val POWER_LEVEL_USER_NOTIFY_SOUND: Int = 2

val POWER_LEVEL_USER_NOTIFY_EXEC: Int = 4

val POWER_USER_NOTIFY_BUTTON: Int = 8

val POWER_USER_NOTIFY_SHUTDOWN: Int = 16

val POWER_USER_NOTIFY_FORCED_SHUTDOWN: Int = 32

val POWER_FORCE_TRIGGER_RESET: Int = -2147483648

val BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK: Int = 7

val BATTERY_DISCHARGE_FLAGS_ENABLE: Int = -2147483648

val DISCHARGE_POLICY_CRITICAL: Int = 0

val DISCHARGE_POLICY_LOW: Int = 1

val NUM_DISCHARGE_POLICIES: Int = 4

val PROCESSOR_IDLESTATE_POLICY_COUNT: Int = 3

val PO_THROTTLE_NONE: Int = 0

val PO_THROTTLE_CONSTANT: Int = 1

val PO_THROTTLE_DEGRADE: Int = 2

val PO_THROTTLE_ADAPTIVE: Int = 3

val PO_THROTTLE_MAXIMUM: Int = 4

val IMAGE_DOS_SIGNATURE: Int = 23117

val IMAGE_OS2_SIGNATURE: Int = 17742

val IMAGE_OS2_SIGNATURE_LE: Int = 17740

val IMAGE_VXD_SIGNATURE: Int = 17740

val IMAGE_NT_SIGNATURE: Int = 17744

val IMAGE_SIZEOF_FILE_HEADER: Int = 20

val IMAGE_FILE_RELOCS_STRIPPED: Int = 1

val IMAGE_FILE_EXECUTABLE_IMAGE: Int = 2

val IMAGE_FILE_LINE_NUMS_STRIPPED: Int = 4

val IMAGE_FILE_LOCAL_SYMS_STRIPPED: Int = 8

val IMAGE_FILE_AGGRESIVE_WS_TRIM: Int = 16

val IMAGE_FILE_LARGE_ADDRESS_AWARE: Int = 32

val IMAGE_FILE_BYTES_REVERSED_LO: Int = 128

val IMAGE_FILE_32BIT_MACHINE: Int = 256

val IMAGE_FILE_DEBUG_STRIPPED: Int = 512

val IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP: Int = 1024

val IMAGE_FILE_NET_RUN_FROM_SWAP: Int = 2048

val IMAGE_FILE_SYSTEM: Int = 4096

val IMAGE_FILE_DLL: Int = 8192

val IMAGE_FILE_UP_SYSTEM_ONLY: Int = 16384

val IMAGE_FILE_BYTES_REVERSED_HI: Int = 32768

val IMAGE_FILE_MACHINE_UNKNOWN: Int = 0

val IMAGE_FILE_MACHINE_I386: Int = 332

val IMAGE_FILE_MACHINE_R3000: Int = 354

val IMAGE_FILE_MACHINE_R4000: Int = 358

val IMAGE_FILE_MACHINE_R10000: Int = 360

val IMAGE_FILE_MACHINE_WCEMIPSV2: Int = 361

val IMAGE_FILE_MACHINE_ALPHA: Int = 388

val IMAGE_FILE_MACHINE_SH3: Int = 418

val IMAGE_FILE_MACHINE_SH3DSP: Int = 419

val IMAGE_FILE_MACHINE_SH3E: Int = 420

val IMAGE_FILE_MACHINE_SH4: Int = 422

val IMAGE_FILE_MACHINE_SH5: Int = 424

val IMAGE_FILE_MACHINE_ARM: Int = 448

val IMAGE_FILE_MACHINE_ARMV7: Int = 452

val IMAGE_FILE_MACHINE_ARMNT: Int = 452

val IMAGE_FILE_MACHINE_THUMB: Int = 450

val IMAGE_FILE_MACHINE_AM33: Int = 467

val IMAGE_FILE_MACHINE_POWERPC: Int = 496

val IMAGE_FILE_MACHINE_POWERPCFP: Int = 497

val IMAGE_FILE_MACHINE_IA64: Int = 512

val IMAGE_FILE_MACHINE_MIPS16: Int = 614

val IMAGE_FILE_MACHINE_ALPHA64: Int = 644

val IMAGE_FILE_MACHINE_MIPSFPU: Int = 870

val IMAGE_FILE_MACHINE_MIPSFPU16: Int = 1126

val IMAGE_FILE_MACHINE_AXP64: Int = 644

val IMAGE_FILE_MACHINE_TRICORE: Int = 1312

val IMAGE_FILE_MACHINE_CEF: Int = 3311

val IMAGE_FILE_MACHINE_EBC: Int = 3772

val IMAGE_FILE_MACHINE_AMD64: Int = 34404

val IMAGE_FILE_MACHINE_M32R: Int = 36929

val IMAGE_FILE_MACHINE_CEE: Int = 49390

val IMAGE_NUMBEROF_DIRECTORY_ENTRIES: Int = 16

val IMAGE_SIZEOF_ROM_OPTIONAL_HEADER: Int = 56

val IMAGE_SIZEOF_STD_OPTIONAL_HEADER: Int = 28

val IMAGE_SIZEOF_NT_OPTIONAL32_HEADER: Int = 224

val IMAGE_SIZEOF_NT_OPTIONAL64_HEADER: Int = 240

val IMAGE_NT_OPTIONAL_HDR32_MAGIC: Int = 267

val IMAGE_NT_OPTIONAL_HDR64_MAGIC: Int = 523

val IMAGE_ROM_OPTIONAL_HDR_MAGIC: Int = 263

val IMAGE_SIZEOF_NT_OPTIONAL_HEADER: Int = 240

val IMAGE_NT_OPTIONAL_HDR_MAGIC: Int = 523

val IMAGE_SUBSYSTEM_UNKNOWN: Int = 0

val IMAGE_SUBSYSTEM_NATIVE: Int = 1

val IMAGE_SUBSYSTEM_WINDOWS_GUI: Int = 2

val IMAGE_SUBSYSTEM_WINDOWS_CUI: Int = 3

val IMAGE_SUBSYSTEM_OS2_CUI: Int = 5

val IMAGE_SUBSYSTEM_POSIX_CUI: Int = 7

val IMAGE_SUBSYSTEM_NATIVE_WINDOWS: Int = 8

val IMAGE_SUBSYSTEM_WINDOWS_CE_GUI: Int = 9

val IMAGE_SUBSYSTEM_EFI_APPLICATION: Int = 10

val IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER: Int = 11

val IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER: Int = 12

val IMAGE_SUBSYSTEM_EFI_ROM: Int = 13

val IMAGE_SUBSYSTEM_XBOX: Int = 14

val IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION: Int = 16

val IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA: Int = 32

val IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE: Int = 64

val IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY: Int = 128

val IMAGE_DLLCHARACTERISTICS_NX_COMPAT: Int = 256

val IMAGE_DLLCHARACTERISTICS_NO_ISOLATION: Int = 512

val IMAGE_DLLCHARACTERISTICS_NO_SEH: Int = 1024

val IMAGE_DLLCHARACTERISTICS_NO_BIND: Int = 2048

val IMAGE_DLLCHARACTERISTICS_APPCONTAINER: Int = 4096

val IMAGE_DLLCHARACTERISTICS_WDM_DRIVER: Int = 8192

val IMAGE_DLLCHARACTERISTICS_GUARD_CF: Int = 16384

val IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE: Int = 32768

val IMAGE_DIRECTORY_ENTRY_EXPORT: Int = 0

val IMAGE_DIRECTORY_ENTRY_IMPORT: Int = 1

val IMAGE_DIRECTORY_ENTRY_RESOURCE: Int = 2

val IMAGE_DIRECTORY_ENTRY_EXCEPTION: Int = 3

val IMAGE_DIRECTORY_ENTRY_SECURITY: Int = 4

val IMAGE_DIRECTORY_ENTRY_BASERELOC: Int = 5

val IMAGE_DIRECTORY_ENTRY_DEBUG: Int = 6

val IMAGE_DIRECTORY_ENTRY_ARCHITECTURE: Int = 7

val IMAGE_DIRECTORY_ENTRY_GLOBALPTR: Int = 8

val IMAGE_DIRECTORY_ENTRY_TLS: Int = 9

val IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG: Int = 10

val IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT: Int = 11

val IMAGE_DIRECTORY_ENTRY_IAT: Int = 12

val IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT: Int = 13

val IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR: Int = 14

val IMAGE_SIZEOF_SHORT_NAME: Int = 8

val IMAGE_SIZEOF_SECTION_HEADER: Int = 40

val IMAGE_SCN_TYPE_NO_PAD: Int = 8

val IMAGE_SCN_CNT_CODE: Int = 32

val IMAGE_SCN_CNT_INITIALIZED_DATA: Int = 64

val IMAGE_SCN_CNT_UNINITIALIZED_DATA: Int = 128

val IMAGE_SCN_LNK_OTHER: Int = 256

val IMAGE_SCN_LNK_INFO: Int = 512

val IMAGE_SCN_LNK_REMOVE: Int = 2048

val IMAGE_SCN_LNK_COMDAT: Int = 4096

val IMAGE_SCN_NO_DEFER_SPEC_EXC: Int = 16384

val IMAGE_SCN_GPREL: Int = 32768

val IMAGE_SCN_MEM_FARDATA: Int = 32768

val IMAGE_SCN_MEM_PURGEABLE: Int = 131072

val IMAGE_SCN_MEM_16BIT: Int = 131072

val IMAGE_SCN_MEM_LOCKED: Int = 262144

val IMAGE_SCN_MEM_PRELOAD: Int = 524288

val IMAGE_SCN_ALIGN_1BYTES: Int = 1048576

val IMAGE_SCN_ALIGN_2BYTES: Int = 2097152

val IMAGE_SCN_ALIGN_4BYTES: Int = 3145728

val IMAGE_SCN_ALIGN_8BYTES: Int = 4194304

val IMAGE_SCN_ALIGN_16BYTES: Int = 5242880

val IMAGE_SCN_ALIGN_32BYTES: Int = 6291456

val IMAGE_SCN_ALIGN_64BYTES: Int = 7340032

val IMAGE_SCN_ALIGN_128BYTES: Int = 8388608

val IMAGE_SCN_ALIGN_256BYTES: Int = 9437184

val IMAGE_SCN_ALIGN_512BYTES: Int = 10485760

val IMAGE_SCN_ALIGN_1024BYTES: Int = 11534336

val IMAGE_SCN_ALIGN_2048BYTES: Int = 12582912

val IMAGE_SCN_ALIGN_4096BYTES: Int = 13631488

val IMAGE_SCN_ALIGN_8192BYTES: Int = 14680064

val IMAGE_SCN_ALIGN_MASK: Int = 15728640

val IMAGE_SCN_LNK_NRELOC_OVFL: Int = 16777216

val IMAGE_SCN_MEM_DISCARDABLE: Int = 33554432

val IMAGE_SCN_MEM_NOT_CACHED: Int = 67108864

val IMAGE_SCN_MEM_NOT_PAGED: Int = 134217728

val IMAGE_SCN_MEM_SHARED: Int = 268435456

val IMAGE_SCN_MEM_EXECUTE: Int = 536870912

val IMAGE_SCN_MEM_READ: Int = 1073741824

val IMAGE_SCN_MEM_WRITE: Int = -2147483648

val IMAGE_SCN_SCALE_INDEX: Int = 1

val IMAGE_SIZEOF_SYMBOL: Int = 18

val IMAGE_SYM_UNDEFINED: SHORT = 0

val IMAGE_SYM_ABSOLUTE: SHORT = -1

val IMAGE_SYM_DEBUG: SHORT = -2

val IMAGE_SYM_SECTION_MAX: Int = 65279

val IMAGE_SYM_SECTION_MAX_EX: Int = 2147483647

val IMAGE_SYM_TYPE_NULL: Int = 0

val IMAGE_SYM_TYPE_VOID: Int = 1

val IMAGE_SYM_TYPE_CHAR: Int = 2

val IMAGE_SYM_TYPE_SHORT: Int = 3

val IMAGE_SYM_TYPE_INT: Int = 4

val IMAGE_SYM_TYPE_LONG: Int = 5

val IMAGE_SYM_TYPE_FLOAT: Int = 6

val IMAGE_SYM_TYPE_DOUBLE: Int = 7

val IMAGE_SYM_TYPE_STRUCT: Int = 8

val IMAGE_SYM_TYPE_UNION: Int = 9

val IMAGE_SYM_TYPE_ENUM: Int = 10

val IMAGE_SYM_TYPE_MOE: Int = 11

val IMAGE_SYM_TYPE_BYTE: Int = 12

val IMAGE_SYM_TYPE_WORD: Int = 13

val IMAGE_SYM_TYPE_UINT: Int = 14

val IMAGE_SYM_TYPE_DWORD: Int = 15

val IMAGE_SYM_TYPE_PCODE: Int = 32768

val IMAGE_SYM_DTYPE_NULL: Int = 0

val IMAGE_SYM_DTYPE_POINTER: Int = 1

val IMAGE_SYM_DTYPE_FUNCTION: Int = 2

val IMAGE_SYM_DTYPE_ARRAY: Int = 3

val IMAGE_SYM_CLASS_END_OF_FUNCTION: BYTE = -1

val IMAGE_SYM_CLASS_NULL: Int = 0

val IMAGE_SYM_CLASS_AUTOMATIC: Int = 1

val IMAGE_SYM_CLASS_EXTERNAL: Int = 2

val IMAGE_SYM_CLASS_STATIC: Int = 3

val IMAGE_SYM_CLASS_REGISTER: Int = 4

val IMAGE_SYM_CLASS_EXTERNAL_DEF: Int = 5

val IMAGE_SYM_CLASS_LABEL: Int = 6

val IMAGE_SYM_CLASS_UNDEFINED_LABEL: Int = 7

val IMAGE_SYM_CLASS_MEMBER_OF_STRUCT: Int = 8

val IMAGE_SYM_CLASS_ARGUMENT: Int = 9

val IMAGE_SYM_CLASS_STRUCT_TAG: Int = 10

val IMAGE_SYM_CLASS_MEMBER_OF_UNION: Int = 11

val IMAGE_SYM_CLASS_UNION_TAG: Int = 12

val IMAGE_SYM_CLASS_TYPE_DEFINITION: Int = 13

val IMAGE_SYM_CLASS_UNDEFINED_STATIC: Int = 14

val IMAGE_SYM_CLASS_ENUM_TAG: Int = 15

val IMAGE_SYM_CLASS_MEMBER_OF_ENUM: Int = 16

val IMAGE_SYM_CLASS_REGISTER_PARAM: Int = 17

val IMAGE_SYM_CLASS_BIT_FIELD: Int = 18

val IMAGE_SYM_CLASS_FAR_EXTERNAL: Int = 68

val IMAGE_SYM_CLASS_BLOCK: Int = 100

val IMAGE_SYM_CLASS_FUNCTION: Int = 101

val IMAGE_SYM_CLASS_END_OF_STRUCT: Int = 102

val IMAGE_SYM_CLASS_FILE: Int = 103

val IMAGE_SYM_CLASS_SECTION: Int = 104

val IMAGE_SYM_CLASS_WEAK_EXTERNAL: Int = 105

val IMAGE_SYM_CLASS_CLR_TOKEN: Int = 107

val N_BTMASK: Int = 15

val N_TMASK: Int = 48

val N_TMASK1: Int = 192

val N_TMASK2: Int = 240

val N_BTSHFT: Int = 4

val N_TSHIFT: Int = 2

val IMAGE_SIZEOF_AUX_SYMBOL: Int = 18

val IMAGE_COMDAT_SELECT_NODUPLICATES: Int = 1

val IMAGE_COMDAT_SELECT_ANY: Int = 2

val IMAGE_COMDAT_SELECT_SAME_SIZE: Int = 3

val IMAGE_COMDAT_SELECT_EXACT_MATCH: Int = 4

val IMAGE_COMDAT_SELECT_ASSOCIATIVE: Int = 5

val IMAGE_COMDAT_SELECT_LARGEST: Int = 6

val IMAGE_COMDAT_SELECT_NEWEST: Int = 7

val IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY: Int = 1

val IMAGE_WEAK_EXTERN_SEARCH_LIBRARY: Int = 2

val IMAGE_WEAK_EXTERN_SEARCH_ALIAS: Int = 3

val IMAGE_SIZEOF_RELOCATION: Int = 10

val IMAGE_REL_I386_ABSOLUTE: Int = 0

val IMAGE_REL_I386_DIR16: Int = 1

val IMAGE_REL_I386_REL16: Int = 2

val IMAGE_REL_I386_DIR32: Int = 6

val IMAGE_REL_I386_DIR32NB: Int = 7

val IMAGE_REL_I386_SEG12: Int = 9

val IMAGE_REL_I386_SECTION: Int = 10

val IMAGE_REL_I386_SECREL: Int = 11

val IMAGE_REL_I386_TOKEN: Int = 12

val IMAGE_REL_I386_SECREL7: Int = 13

val IMAGE_REL_I386_REL32: Int = 20

val IMAGE_REL_MIPS_ABSOLUTE: Int = 0

val IMAGE_REL_MIPS_REFHALF: Int = 1

val IMAGE_REL_MIPS_REFWORD: Int = 2

val IMAGE_REL_MIPS_JMPADDR: Int = 3

val IMAGE_REL_MIPS_REFHI: Int = 4

val IMAGE_REL_MIPS_REFLO: Int = 5

val IMAGE_REL_MIPS_GPREL: Int = 6

val IMAGE_REL_MIPS_LITERAL: Int = 7

val IMAGE_REL_MIPS_SECTION: Int = 10

val IMAGE_REL_MIPS_SECREL: Int = 11

val IMAGE_REL_MIPS_SECRELLO: Int = 12

val IMAGE_REL_MIPS_SECRELHI: Int = 13

val IMAGE_REL_MIPS_TOKEN: Int = 14

val IMAGE_REL_MIPS_JMPADDR16: Int = 16

val IMAGE_REL_MIPS_REFWORDNB: Int = 34

val IMAGE_REL_MIPS_PAIR: Int = 37

val IMAGE_REL_ALPHA_ABSOLUTE: Int = 0

val IMAGE_REL_ALPHA_REFLONG: Int = 1

val IMAGE_REL_ALPHA_REFQUAD: Int = 2

val IMAGE_REL_ALPHA_GPREL32: Int = 3

val IMAGE_REL_ALPHA_LITERAL: Int = 4

val IMAGE_REL_ALPHA_LITUSE: Int = 5

val IMAGE_REL_ALPHA_GPDISP: Int = 6

val IMAGE_REL_ALPHA_BRADDR: Int = 7

val IMAGE_REL_ALPHA_HINT: Int = 8

val IMAGE_REL_ALPHA_INLINE_REFLONG: Int = 9

val IMAGE_REL_ALPHA_REFHI: Int = 10

val IMAGE_REL_ALPHA_REFLO: Int = 11

val IMAGE_REL_ALPHA_PAIR: Int = 12

val IMAGE_REL_ALPHA_MATCH: Int = 13

val IMAGE_REL_ALPHA_SECTION: Int = 14

val IMAGE_REL_ALPHA_SECREL: Int = 15

val IMAGE_REL_ALPHA_REFLONGNB: Int = 16

val IMAGE_REL_ALPHA_SECRELLO: Int = 17

val IMAGE_REL_ALPHA_SECRELHI: Int = 18

val IMAGE_REL_ALPHA_REFQ3: Int = 19

val IMAGE_REL_ALPHA_REFQ2: Int = 20

val IMAGE_REL_ALPHA_REFQ1: Int = 21

val IMAGE_REL_ALPHA_GPRELLO: Int = 22

val IMAGE_REL_ALPHA_GPRELHI: Int = 23

val IMAGE_REL_PPC_ABSOLUTE: Int = 0

val IMAGE_REL_PPC_ADDR64: Int = 1

val IMAGE_REL_PPC_ADDR32: Int = 2

val IMAGE_REL_PPC_ADDR24: Int = 3

val IMAGE_REL_PPC_ADDR16: Int = 4

val IMAGE_REL_PPC_ADDR14: Int = 5

val IMAGE_REL_PPC_REL24: Int = 6

val IMAGE_REL_PPC_REL14: Int = 7

val IMAGE_REL_PPC_TOCREL16: Int = 8

val IMAGE_REL_PPC_TOCREL14: Int = 9

val IMAGE_REL_PPC_ADDR32NB: Int = 10

val IMAGE_REL_PPC_SECREL: Int = 11

val IMAGE_REL_PPC_SECTION: Int = 12

val IMAGE_REL_PPC_IFGLUE: Int = 13

val IMAGE_REL_PPC_IMGLUE: Int = 14

val IMAGE_REL_PPC_SECREL16: Int = 15

val IMAGE_REL_PPC_REFHI: Int = 16

val IMAGE_REL_PPC_REFLO: Int = 17

val IMAGE_REL_PPC_PAIR: Int = 18

val IMAGE_REL_PPC_SECRELLO: Int = 19

val IMAGE_REL_PPC_SECRELHI: Int = 20

val IMAGE_REL_PPC_GPREL: Int = 21

val IMAGE_REL_PPC_TOKEN: Int = 22

val IMAGE_REL_PPC_TYPEMASK: Int = 255

val IMAGE_REL_PPC_NEG: Int = 256

val IMAGE_REL_PPC_BRTAKEN: Int = 512

val IMAGE_REL_PPC_BRNTAKEN: Int = 1024

val IMAGE_REL_PPC_TOCDEFN: Int = 2048

val IMAGE_REL_SH3_ABSOLUTE: Int = 0

val IMAGE_REL_SH3_DIRECT16: Int = 1

val IMAGE_REL_SH3_DIRECT32: Int = 2

val IMAGE_REL_SH3_DIRECT8: Int = 3

val IMAGE_REL_SH3_DIRECT8_WORD: Int = 4

val IMAGE_REL_SH3_DIRECT8_LONG: Int = 5

val IMAGE_REL_SH3_DIRECT4: Int = 6

val IMAGE_REL_SH3_DIRECT4_WORD: Int = 7

val IMAGE_REL_SH3_DIRECT4_LONG: Int = 8

val IMAGE_REL_SH3_PCREL8_WORD: Int = 9

val IMAGE_REL_SH3_PCREL8_LONG: Int = 10

val IMAGE_REL_SH3_PCREL12_WORD: Int = 11

val IMAGE_REL_SH3_STARTOF_SECTION: Int = 12

val IMAGE_REL_SH3_SIZEOF_SECTION: Int = 13

val IMAGE_REL_SH3_SECTION: Int = 14

val IMAGE_REL_SH3_SECREL: Int = 15

val IMAGE_REL_SH3_DIRECT32_NB: Int = 16

val IMAGE_REL_SH3_GPREL4_LONG: Int = 17

val IMAGE_REL_SH3_TOKEN: Int = 18

val IMAGE_REL_SHM_PCRELPT: Int = 19

val IMAGE_REL_SHM_REFLO: Int = 20

val IMAGE_REL_SHM_REFHALF: Int = 21

val IMAGE_REL_SHM_RELLO: Int = 22

val IMAGE_REL_SHM_RELHALF: Int = 23

val IMAGE_REL_SHM_PAIR: Int = 24

val IMAGE_REL_SH_NOMODE: Int = 32768

val IMAGE_REL_ARM_ABSOLUTE: Int = 0

val IMAGE_REL_ARM_ADDR32: Int = 1

val IMAGE_REL_ARM_ADDR32NB: Int = 2

val IMAGE_REL_ARM_BRANCH24: Int = 3

val IMAGE_REL_ARM_BRANCH11: Int = 4

val IMAGE_REL_ARM_TOKEN: Int = 5

val IMAGE_REL_ARM_GPREL12: Int = 6

val IMAGE_REL_ARM_GPREL7: Int = 7

val IMAGE_REL_ARM_BLX24: Int = 8

val IMAGE_REL_ARM_BLX11: Int = 9

val IMAGE_REL_ARM_SECTION: Int = 14

val IMAGE_REL_ARM_SECREL: Int = 15

val IMAGE_REL_ARM_MOV32A: Int = 16

val IMAGE_REL_ARM_MOV32: Int = 16

val IMAGE_REL_ARM_MOV32T: Int = 17

val IMAGE_REL_THUMB_MOV32: Int = 17

val IMAGE_REL_ARM_BRANCH20T: Int = 18

val IMAGE_REL_THUMB_BRANCH20: Int = 18

val IMAGE_REL_ARM_BRANCH24T: Int = 20

val IMAGE_REL_THUMB_BRANCH24: Int = 20

val IMAGE_REL_ARM_BLX23T: Int = 21

val IMAGE_REL_THUMB_BLX23: Int = 21

val IMAGE_REL_AM_ABSOLUTE: Int = 0

val IMAGE_REL_AM_ADDR32: Int = 1

val IMAGE_REL_AM_ADDR32NB: Int = 2

val IMAGE_REL_AM_CALL32: Int = 3

val IMAGE_REL_AM_FUNCINFO: Int = 4

val IMAGE_REL_AM_REL32_1: Int = 5

val IMAGE_REL_AM_REL32_2: Int = 6

val IMAGE_REL_AM_SECREL: Int = 7

val IMAGE_REL_AM_SECTION: Int = 8

val IMAGE_REL_AM_TOKEN: Int = 9

val IMAGE_REL_AMD64_ABSOLUTE: Int = 0

val IMAGE_REL_AMD64_ADDR64: Int = 1

val IMAGE_REL_AMD64_ADDR32: Int = 2

val IMAGE_REL_AMD64_ADDR32NB: Int = 3

val IMAGE_REL_AMD64_REL32: Int = 4

val IMAGE_REL_AMD64_REL32_1: Int = 5

val IMAGE_REL_AMD64_REL32_2: Int = 6

val IMAGE_REL_AMD64_REL32_3: Int = 7

val IMAGE_REL_AMD64_REL32_4: Int = 8

val IMAGE_REL_AMD64_REL32_5: Int = 9

val IMAGE_REL_AMD64_SECTION: Int = 10

val IMAGE_REL_AMD64_SECREL: Int = 11

val IMAGE_REL_AMD64_SECREL7: Int = 12

val IMAGE_REL_AMD64_TOKEN: Int = 13

val IMAGE_REL_AMD64_SREL32: Int = 14

val IMAGE_REL_AMD64_PAIR: Int = 15

val IMAGE_REL_AMD64_SSPAN32: Int = 16

val IMAGE_REL_IA64_ABSOLUTE: Int = 0

val IMAGE_REL_IA64_IMM14: Int = 1

val IMAGE_REL_IA64_IMM22: Int = 2

val IMAGE_REL_IA64_IMM64: Int = 3

val IMAGE_REL_IA64_DIR32: Int = 4

val IMAGE_REL_IA64_DIR64: Int = 5

val IMAGE_REL_IA64_PCREL21B: Int = 6

val IMAGE_REL_IA64_PCREL21M: Int = 7

val IMAGE_REL_IA64_PCREL21F: Int = 8

val IMAGE_REL_IA64_GPREL22: Int = 9

val IMAGE_REL_IA64_LTOFF22: Int = 10

val IMAGE_REL_IA64_SECTION: Int = 11

val IMAGE_REL_IA64_SECREL22: Int = 12

val IMAGE_REL_IA64_SECREL64I: Int = 13

val IMAGE_REL_IA64_SECREL32: Int = 14

val IMAGE_REL_IA64_DIR32NB: Int = 16

val IMAGE_REL_IA64_SREL14: Int = 17

val IMAGE_REL_IA64_SREL22: Int = 18

val IMAGE_REL_IA64_SREL32: Int = 19

val IMAGE_REL_IA64_UREL32: Int = 20

val IMAGE_REL_IA64_PCREL60X: Int = 21

val IMAGE_REL_IA64_PCREL60B: Int = 22

val IMAGE_REL_IA64_PCREL60F: Int = 23

val IMAGE_REL_IA64_PCREL60I: Int = 24

val IMAGE_REL_IA64_PCREL60M: Int = 25

val IMAGE_REL_IA64_IMMGPREL64: Int = 26

val IMAGE_REL_IA64_TOKEN: Int = 27

val IMAGE_REL_IA64_GPREL32: Int = 28

val IMAGE_REL_IA64_ADDEND: Int = 31

val IMAGE_REL_CEF_ABSOLUTE: Int = 0

val IMAGE_REL_CEF_ADDR32: Int = 1

val IMAGE_REL_CEF_ADDR64: Int = 2

val IMAGE_REL_CEF_ADDR32NB: Int = 3

val IMAGE_REL_CEF_SECTION: Int = 4

val IMAGE_REL_CEF_SECREL: Int = 5

val IMAGE_REL_CEF_TOKEN: Int = 6

val IMAGE_REL_CEE_ABSOLUTE: Int = 0

val IMAGE_REL_CEE_ADDR32: Int = 1

val IMAGE_REL_CEE_ADDR64: Int = 2

val IMAGE_REL_CEE_ADDR32NB: Int = 3

val IMAGE_REL_CEE_SECTION: Int = 4

val IMAGE_REL_CEE_SECREL: Int = 5

val IMAGE_REL_CEE_TOKEN: Int = 6

val IMAGE_REL_M32R_ABSOLUTE: Int = 0

val IMAGE_REL_M32R_ADDR32: Int = 1

val IMAGE_REL_M32R_ADDR32NB: Int = 2

val IMAGE_REL_M32R_ADDR24: Int = 3

val IMAGE_REL_M32R_GPREL16: Int = 4

val IMAGE_REL_M32R_PCREL24: Int = 5

val IMAGE_REL_M32R_PCREL16: Int = 6

val IMAGE_REL_M32R_PCREL8: Int = 7

val IMAGE_REL_M32R_REFHALF: Int = 8

val IMAGE_REL_M32R_REFHI: Int = 9

val IMAGE_REL_M32R_REFLO: Int = 10

val IMAGE_REL_M32R_PAIR: Int = 11

val IMAGE_REL_M32R_SECTION: Int = 12

val IMAGE_REL_M32R_SECREL32: Int = 13

val IMAGE_REL_M32R_TOKEN: Int = 14

val IMAGE_REL_EBC_ABSOLUTE: Int = 0

val IMAGE_REL_EBC_ADDR32NB: Int = 1

val IMAGE_REL_EBC_REL32: Int = 2

val IMAGE_REL_EBC_SECTION: Int = 3

val IMAGE_REL_EBC_SECREL: Int = 4

val EMARCH_ENC_I17_IMM7B_INST_WORD_X: Int = 3

val EMARCH_ENC_I17_IMM7B_SIZE_X: Int = 7

val EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X: Int = 4

val EMARCH_ENC_I17_IMM7B_VAL_POS_X: Int = 0

val EMARCH_ENC_I17_IMM9D_INST_WORD_X: Int = 3

val EMARCH_ENC_I17_IMM9D_SIZE_X: Int = 9

val EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X: Int = 18

val EMARCH_ENC_I17_IMM9D_VAL_POS_X: Int = 7

val EMARCH_ENC_I17_IMM5C_INST_WORD_X: Int = 3

val EMARCH_ENC_I17_IMM5C_SIZE_X: Int = 5

val EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X: Int = 13

val EMARCH_ENC_I17_IMM5C_VAL_POS_X: Int = 16

val EMARCH_ENC_I17_IC_INST_WORD_X: Int = 3

val EMARCH_ENC_I17_IC_SIZE_X: Int = 1

val EMARCH_ENC_I17_IC_INST_WORD_POS_X: Int = 12

val EMARCH_ENC_I17_IC_VAL_POS_X: Int = 21

val EMARCH_ENC_I17_IMM41a_INST_WORD_X: Int = 1

val EMARCH_ENC_I17_IMM41a_SIZE_X: Int = 10

val EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X: Int = 14

val EMARCH_ENC_I17_IMM41a_VAL_POS_X: Int = 22

val EMARCH_ENC_I17_IMM41b_INST_WORD_X: Int = 1

val EMARCH_ENC_I17_IMM41b_SIZE_X: Int = 8

val EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X: Int = 24

val EMARCH_ENC_I17_IMM41b_VAL_POS_X: Int = 32

val EMARCH_ENC_I17_IMM41c_INST_WORD_X: Int = 2

val EMARCH_ENC_I17_IMM41c_SIZE_X: Int = 23

val EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X: Int = 0

val EMARCH_ENC_I17_IMM41c_VAL_POS_X: Int = 40

val EMARCH_ENC_I17_SIGN_INST_WORD_X: Int = 3

val EMARCH_ENC_I17_SIGN_SIZE_X: Int = 1

val EMARCH_ENC_I17_SIGN_INST_WORD_POS_X: Int = 27

val EMARCH_ENC_I17_SIGN_VAL_POS_X: Int = 63

val X3_OPCODE_INST_WORD_X: Int = 3

val X3_OPCODE_SIZE_X: Int = 4

val X3_OPCODE_INST_WORD_POS_X: Int = 28

val X3_OPCODE_SIGN_VAL_POS_X: Int = 0

val X3_I_INST_WORD_X: Int = 3

val X3_I_SIZE_X: Int = 1

val X3_I_INST_WORD_POS_X: Int = 27

val X3_I_SIGN_VAL_POS_X: Int = 59

val X3_D_WH_INST_WORD_X: Int = 3

val X3_D_WH_SIZE_X: Int = 3

val X3_D_WH_INST_WORD_POS_X: Int = 24

val X3_D_WH_SIGN_VAL_POS_X: Int = 0

val X3_IMM20_INST_WORD_X: Int = 3

val X3_IMM20_SIZE_X: Int = 20

val X3_IMM20_INST_WORD_POS_X: Int = 4

val X3_IMM20_SIGN_VAL_POS_X: Int = 0

val X3_IMM39_1_INST_WORD_X: Int = 2

val X3_IMM39_1_SIZE_X: Int = 23

val X3_IMM39_1_INST_WORD_POS_X: Int = 0

val X3_IMM39_1_SIGN_VAL_POS_X: Int = 36

val X3_IMM39_2_INST_WORD_X: Int = 1

val X3_IMM39_2_SIZE_X: Int = 16

val X3_IMM39_2_INST_WORD_POS_X: Int = 16

val X3_IMM39_2_SIGN_VAL_POS_X: Int = 20

val X3_P_INST_WORD_X: Int = 3

val X3_P_SIZE_X: Int = 4

val X3_P_INST_WORD_POS_X: Int = 0

val X3_P_SIGN_VAL_POS_X: Int = 0

val X3_TMPLT_INST_WORD_X: Int = 0

val X3_TMPLT_SIZE_X: Int = 4

val X3_TMPLT_INST_WORD_POS_X: Int = 0

val X3_TMPLT_SIGN_VAL_POS_X: Int = 0

val X3_BTYPE_QP_INST_WORD_X: Int = 2

val X3_BTYPE_QP_SIZE_X: Int = 9

val X3_BTYPE_QP_INST_WORD_POS_X: Int = 23

val X3_BTYPE_QP_INST_VAL_POS_X: Int = 0

val X3_EMPTY_INST_WORD_X: Int = 1

val X3_EMPTY_SIZE_X: Int = 2

val X3_EMPTY_INST_WORD_POS_X: Int = 14

val X3_EMPTY_INST_VAL_POS_X: Int = 0

val IMAGE_SIZEOF_LINENUMBER: Int = 6

val IMAGE_SIZEOF_BASE_RELOCATION: Int = 8

val IMAGE_REL_BASED_ABSOLUTE: Int = 0

val IMAGE_REL_BASED_HIGH: Int = 1

val IMAGE_REL_BASED_LOW: Int = 2

val IMAGE_REL_BASED_HIGHLOW: Int = 3

val IMAGE_REL_BASED_HIGHADJ: Int = 4

val IMAGE_REL_BASED_MIPS_JMPADDR: Int = 5

val IMAGE_REL_BASED_ARM_MOV32: Int = 5

val IMAGE_REL_BASED_THUMB_MOV32: Int = 7

val IMAGE_REL_BASED_MIPS_JMPADDR16: Int = 9

val IMAGE_REL_BASED_IA64_IMM64: Int = 9

val IMAGE_REL_BASED_DIR64: Int = 10

val IMAGE_ARCHIVE_START_SIZE: Int = 8

val IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR: Int = 60

val IMAGE_ORDINAL_FLAG64: Long = -9223372036854775807 - 1

val IMAGE_ORDINAL_FLAG32: Int = -2147483648

val IMAGE_ORDINAL_FLAG: Long = -9223372036854775807 - 1

val IMAGE_RESOURCE_NAME_IS_STRING: Int = -2147483648

val IMAGE_RESOURCE_DATA_IS_DIRECTORY: Int = -2147483648

val IMAGE_DEBUG_TYPE_UNKNOWN: Int = 0

val IMAGE_DEBUG_TYPE_COFF: Int = 1

val IMAGE_DEBUG_TYPE_CODEVIEW: Int = 2

val IMAGE_DEBUG_TYPE_FPO: Int = 3

val IMAGE_DEBUG_TYPE_MISC: Int = 4

val IMAGE_DEBUG_TYPE_EXCEPTION: Int = 5

val IMAGE_DEBUG_TYPE_FIXUP: Int = 6

val IMAGE_DEBUG_TYPE_OMAP_TO_SRC: Int = 7

val IMAGE_DEBUG_TYPE_OMAP_FROM_SRC: Int = 8

val IMAGE_DEBUG_TYPE_BORLAND: Int = 9

val IMAGE_DEBUG_TYPE_RESERVED10: Int = 10

val IMAGE_DEBUG_TYPE_CLSID: Int = 11

val FRAME_FPO: Int = 0

val FRAME_TRAP: Int = 1

val FRAME_TSS: Int = 2

val FRAME_NONFPO: Int = 3

val SIZEOF_RFPO_DATA: Int = 16

val IMAGE_DEBUG_MISC_EXENAME: Int = 1

val IMAGE_SEPARATE_DEBUG_SIGNATURE: Int = 18756

val NON_PAGED_DEBUG_SIGNATURE: Int = 18766

val IMAGE_SEPARATE_DEBUG_FLAGS_MASK: Int = 32768

val IMAGE_SEPARATE_DEBUG_MISMATCH: Int = 32768

val IMPORT_OBJECT_HDR_SIG2: Int = 65535

val _RTL_RUN_ONCE_DEF: Int = 1

val RTL_RUN_ONCE_CHECK_ONLY: Int = 1

val RTL_RUN_ONCE_ASYNC: Int = 2

val RTL_RUN_ONCE_INIT_FAILED: Int = 4

val RTL_RUN_ONCE_CTX_RESERVED_BITS: Int = 2

val FAST_FAIL_LEGACY_GS_VIOLATION: Int = 0

val FAST_FAIL_VTGUARD_CHECK_FAILURE: Int = 1

val FAST_FAIL_STACK_COOKIE_CHECK_FAILURE: Int = 2

val FAST_FAIL_CORRUPT_LIST_ENTRY: Int = 3

val FAST_FAIL_INCORRECT_STACK: Int = 4

val FAST_FAIL_INVALID_ARG: Int = 5

val FAST_FAIL_GS_COOKIE_INIT: Int = 6

val FAST_FAIL_FATAL_APP_EXIT: Int = 7

val FAST_FAIL_RANGE_CHECK_FAILURE: Int = 8

val FAST_FAIL_UNSAFE_REGISTRY_ACCESS: Int = 9

val FAST_FAIL_INVALID_FAST_FAIL_CODE: Int = -1

val HEAP_NO_SERIALIZE: Int = 1

val HEAP_GROWABLE: Int = 2

val HEAP_GENERATE_EXCEPTIONS: Int = 4

val HEAP_ZERO_MEMORY: Int = 8

val HEAP_REALLOC_IN_PLACE_ONLY: Int = 16

val HEAP_TAIL_CHECKING_ENABLED: Int = 32

val HEAP_FREE_CHECKING_ENABLED: Int = 64

val HEAP_DISABLE_COALESCE_ON_FREE: Int = 128

val HEAP_CREATE_ALIGN_16: Int = 65536

val HEAP_CREATE_ENABLE_TRACING: Int = 131072

val HEAP_CREATE_ENABLE_EXECUTE: Int = 262144

val HEAP_MAXIMUM_TAG: Int = 4095

val HEAP_PSEUDO_TAG_FLAG: Int = 32768

val HEAP_TAG_SHIFT: Int = 18

val IS_TEXT_UNICODE_ASCII16: Int = 1

val IS_TEXT_UNICODE_REVERSE_ASCII16: Int = 16

val IS_TEXT_UNICODE_STATISTICS: Int = 2

val IS_TEXT_UNICODE_REVERSE_STATISTICS: Int = 32

val IS_TEXT_UNICODE_CONTROLS: Int = 4

val IS_TEXT_UNICODE_REVERSE_CONTROLS: Int = 64

val IS_TEXT_UNICODE_SIGNATURE: Int = 8

val IS_TEXT_UNICODE_REVERSE_SIGNATURE: Int = 128

val IS_TEXT_UNICODE_ILLEGAL_CHARS: Int = 256

val IS_TEXT_UNICODE_ODD_LENGTH: Int = 512

val IS_TEXT_UNICODE_DBCS_LEADBYTE: Int = 1024

val IS_TEXT_UNICODE_NULL_BYTES: Int = 4096

val IS_TEXT_UNICODE_UNICODE_MASK: Int = 15

val IS_TEXT_UNICODE_REVERSE_MASK: Int = 240

val IS_TEXT_UNICODE_NOT_UNICODE_MASK: Int = 3840

val IS_TEXT_UNICODE_NOT_ASCII_MASK: Int = 61440

val COMPRESSION_FORMAT_NONE: Int = 0

val COMPRESSION_FORMAT_DEFAULT: Int = 1

val COMPRESSION_FORMAT_LZNT1: Int = 2

val COMPRESSION_FORMAT_XPRESS: Int = 3

val COMPRESSION_FORMAT_XPRESS_HUFF: Int = 4

val COMPRESSION_ENGINE_STANDARD: Int = 0

val COMPRESSION_ENGINE_MAXIMUM: Int = 256

val COMPRESSION_ENGINE_HIBER: Int = 512

val SEF_DACL_AUTO_INHERIT: Int = 1

val SEF_SACL_AUTO_INHERIT: Int = 2

val SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT: Int = 4

val SEF_AVOID_PRIVILEGE_CHECK: Int = 8

val SEF_AVOID_OWNER_CHECK: Int = 16

val SEF_DEFAULT_OWNER_FROM_PARENT: Int = 32

val SEF_DEFAULT_GROUP_FROM_PARENT: Int = 64

val SEF_MACL_NO_WRITE_UP: Int = 256

val SEF_MACL_NO_READ_UP: Int = 512

val SEF_MACL_NO_EXECUTE_UP: Int = 1024

val SEF_AVOID_OWNER_RESTRICTION: Int = 4096

val SEF_MACL_VALID_FLAGS: Int = 1792

val MESSAGE_RESOURCE_UNICODE: Int = 1

val VER_EQUAL: Int = 1

val VER_GREATER: Int = 2

val VER_GREATER_EQUAL: Int = 3

val VER_LESS: Int = 4

val VER_LESS_EQUAL: Int = 5

val VER_AND: Int = 6

val VER_OR: Int = 7

val VER_CONDITION_MASK: Int = 7

val VER_NUM_BITS_PER_CONDITION_MASK: Int = 3

val VER_MINORVERSION: Int = 1

val VER_MAJORVERSION: Int = 2

val VER_BUILDNUMBER: Int = 4

val VER_PLATFORMID: Int = 8

val VER_SERVICEPACKMINOR: Int = 16

val VER_SERVICEPACKMAJOR: Int = 32

val VER_SUITENAME: Int = 64

val VER_PRODUCT_TYPE: Int = 128

val VER_NT_WORKSTATION: Int = 1

val VER_NT_DOMAIN_CONTROLLER: Int = 2

val VER_NT_SERVER: Int = 3

val VER_PLATFORM_WIN32s: Int = 0

val VER_PLATFORM_WIN32_WINDOWS: Int = 1

val VER_PLATFORM_WIN32_NT: Int = 2

val RTL_UMS_VERSION: Int = 256

val RTL_CRITSECT_TYPE: Int = 0

val RTL_RESOURCE_TYPE: Int = 1

val RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO: Int = 16777216

val RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN: Int = 33554432

val RTL_CRITICAL_SECTION_FLAG_STATIC_INIT: Int = 67108864

val RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE: Int = 134217728

val RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO: Int = 268435456

val RTL_CRITICAL_SECTION_ALL_FLAG_BITS: Int = -16777216

val RTL_CRITICAL_SECTION_FLAG_RESERVED: Int = -536870912

val RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT: Int = 1

val RTL_CONDITION_VARIABLE_LOCKMODE_SHARED: Int = 1

val WT_EXECUTEDEFAULT: Int = 0

val WT_EXECUTEINIOTHREAD: Int = 1

val WT_EXECUTEINUITHREAD: Int = 2

val WT_EXECUTEINWAITTHREAD: Int = 4

val WT_EXECUTEONLYONCE: Int = 8

val WT_EXECUTEINTIMERTHREAD: Int = 32

val WT_EXECUTELONGFUNCTION: Int = 16

val WT_EXECUTEINPERSISTENTIOTHREAD: Int = 64

val WT_EXECUTEINPERSISTENTTHREAD: Int = 128

val WT_TRANSFER_IMPERSONATION: Int = 256

val WT_EXECUTEDELETEWAIT: Int = 8

val WT_EXECUTEINLONGTHREAD: Int = 16

val MAX_SUPPORTED_OS_NUM: Int = 4

val ACTIVATION_CONTEXT_PATH_TYPE_NONE: Int = 1

val ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE: Int = 2

val ACTIVATION_CONTEXT_PATH_TYPE_URL: Int = 3

val ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF: Int = 4

val INVALID_OS_COUNT: Int = 65535

val CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID: Int = 1

val RTL_VRF_FLG_FULL_PAGE_HEAP: Int = 1

val RTL_VRF_FLG_RESERVED_DONOTUSE: Int = 2

val RTL_VRF_FLG_HANDLE_CHECKS: Int = 4

val RTL_VRF_FLG_STACK_CHECKS: Int = 8

val RTL_VRF_FLG_APPCOMPAT_CHECKS: Int = 16

val RTL_VRF_FLG_TLS_CHECKS: Int = 32

val RTL_VRF_FLG_DIRTY_STACKS: Int = 64

val RTL_VRF_FLG_RPC_CHECKS: Int = 128

val RTL_VRF_FLG_COM_CHECKS: Int = 256

val RTL_VRF_FLG_DANGEROUS_APIS: Int = 512

val RTL_VRF_FLG_RACE_CHECKS: Int = 1024

val RTL_VRF_FLG_DEADLOCK_CHECKS: Int = 2048

val RTL_VRF_FLG_FIRST_CHANCE_EXCEPTION_CHECKS: Int = 4096

val RTL_VRF_FLG_VIRTUAL_MEM_CHECKS: Int = 8192

val RTL_VRF_FLG_ENABLE_LOGGING: Int = 16384

val RTL_VRF_FLG_FAST_FILL_HEAP: Int = 32768

val RTL_VRF_FLG_VIRTUAL_SPACE_TRACKING: Int = 65536

val RTL_VRF_FLG_ENABLED_SYSTEM_WIDE: Int = 131072

val RTL_VRF_FLG_MISCELLANEOUS_CHECKS: Int = 131072

val RTL_VRF_FLG_LOCK_CHECKS: Int = 262144

val APPLICATION_VERIFIER_INTERNAL_ERROR: Int = -2147483648

val APPLICATION_VERIFIER_INTERNAL_WARNING: Int = 1073741824

val APPLICATION_VERIFIER_NO_BREAK: Int = 536870912

val APPLICATION_VERIFIER_CONTINUABLE_BREAK: Int = 268435456

val APPLICATION_VERIFIER_UNKNOWN_ERROR: Int = 1

val APPLICATION_VERIFIER_ACCESS_VIOLATION: Int = 2

val APPLICATION_VERIFIER_UNSYNCHRONIZED_ACCESS: Int = 3

val APPLICATION_VERIFIER_EXTREME_SIZE_REQUEST: Int = 4

val APPLICATION_VERIFIER_BAD_HEAP_HANDLE: Int = 5

val APPLICATION_VERIFIER_SWITCHED_HEAP_HANDLE: Int = 6

val APPLICATION_VERIFIER_DOUBLE_FREE: Int = 7

val APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK: Int = 8

val APPLICATION_VERIFIER_DESTROY_PROCESS_HEAP: Int = 9

val APPLICATION_VERIFIER_UNEXPECTED_EXCEPTION: Int = 10

val APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_EXCEPTION_RAISED_FOR_HEADER: Int = 11

val APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_EXCEPTION_RAISED_FOR_PROBING: Int = 12

val APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_HEADER: Int = 13

val APPLICATION_VERIFIER_CORRUPTED_FREED_HEAP_BLOCK: Int = 14

val APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_SUFFIX: Int = 15

val APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_START_STAMP: Int = 16

val APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_END_STAMP: Int = 17

val APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_PREFIX: Int = 18

val APPLICATION_VERIFIER_FIRST_CHANCE_ACCESS_VIOLATION: Int = 19

val APPLICATION_VERIFIER_CORRUPTED_HEAP_LIST: Int = 20

val APPLICATION_VERIFIER_TERMINATE_THREAD_CALL: Int = 256

val APPLICATION_VERIFIER_STACK_OVERFLOW: Int = 257

val APPLICATION_VERIFIER_INVALID_EXIT_PROCESS_CALL: Int = 258

val APPLICATION_VERIFIER_EXIT_THREAD_OWNS_LOCK: Int = 512

val APPLICATION_VERIFIER_LOCK_IN_UNLOADED_DLL: Int = 513

val APPLICATION_VERIFIER_LOCK_IN_FREED_HEAP: Int = 514

val APPLICATION_VERIFIER_LOCK_DOUBLE_INITIALIZE: Int = 515

val APPLICATION_VERIFIER_LOCK_IN_FREED_MEMORY: Int = 516

val APPLICATION_VERIFIER_LOCK_CORRUPTED: Int = 517

val APPLICATION_VERIFIER_LOCK_INVALID_OWNER: Int = 518

val APPLICATION_VERIFIER_LOCK_INVALID_RECURSION_COUNT: Int = 519

val APPLICATION_VERIFIER_LOCK_INVALID_LOCK_COUNT: Int = 520

val APPLICATION_VERIFIER_LOCK_OVER_RELEASED: Int = 521

val APPLICATION_VERIFIER_LOCK_NOT_INITIALIZED: Int = 528

val APPLICATION_VERIFIER_LOCK_ALREADY_INITIALIZED: Int = 529

val APPLICATION_VERIFIER_LOCK_IN_FREED_VMEM: Int = 530

val APPLICATION_VERIFIER_LOCK_IN_UNMAPPED_MEM: Int = 531

val APPLICATION_VERIFIER_THREAD_NOT_LOCK_OWNER: Int = 532

val APPLICATION_VERIFIER_INVALID_HANDLE: Int = 768

val APPLICATION_VERIFIER_INVALID_TLS_VALUE: Int = 769

val APPLICATION_VERIFIER_INCORRECT_WAIT_CALL: Int = 770

val APPLICATION_VERIFIER_NULL_HANDLE: Int = 771

val APPLICATION_VERIFIER_WAIT_IN_DLLMAIN: Int = 772

val APPLICATION_VERIFIER_COM_ERROR: Int = 1024

val APPLICATION_VERIFIER_COM_API_IN_DLLMAIN: Int = 1025

val APPLICATION_VERIFIER_COM_UNHANDLED_EXCEPTION: Int = 1026

val APPLICATION_VERIFIER_COM_UNBALANCED_COINIT: Int = 1027

val APPLICATION_VERIFIER_COM_UNBALANCED_OLEINIT: Int = 1028

val APPLICATION_VERIFIER_COM_UNBALANCED_SWC: Int = 1029

val APPLICATION_VERIFIER_COM_NULL_DACL: Int = 1030

val APPLICATION_VERIFIER_COM_UNSAFE_IMPERSONATION: Int = 1031

val APPLICATION_VERIFIER_COM_SMUGGLED_WRAPPER: Int = 1032

val APPLICATION_VERIFIER_COM_SMUGGLED_PROXY: Int = 1033

val APPLICATION_VERIFIER_COM_CF_SUCCESS_WITH_NULL: Int = 1034

val APPLICATION_VERIFIER_COM_GCO_SUCCESS_WITH_NULL: Int = 1035

val APPLICATION_VERIFIER_COM_OBJECT_IN_FREED_MEMORY: Int = 1036

val APPLICATION_VERIFIER_COM_OBJECT_IN_UNLOADED_DLL: Int = 1037

val APPLICATION_VERIFIER_COM_VTBL_IN_FREED_MEMORY: Int = 1038

val APPLICATION_VERIFIER_COM_VTBL_IN_UNLOADED_DLL: Int = 1039

val APPLICATION_VERIFIER_COM_HOLDING_LOCKS_ON_CALL: Int = 1040

val APPLICATION_VERIFIER_RPC_ERROR: Int = 1280

val APPLICATION_VERIFIER_INVALID_FREEMEM: Int = 1536

val APPLICATION_VERIFIER_INVALID_ALLOCMEM: Int = 1537

val APPLICATION_VERIFIER_INVALID_MAPVIEW: Int = 1538

val APPLICATION_VERIFIER_PROBE_INVALID_ADDRESS: Int = 1539

val APPLICATION_VERIFIER_PROBE_FREE_MEM: Int = 1540

val APPLICATION_VERIFIER_PROBE_GUARD_PAGE: Int = 1541

val APPLICATION_VERIFIER_PROBE_NULL: Int = 1542

val APPLICATION_VERIFIER_PROBE_INVALID_START_OR_SIZE: Int = 1543

val APPLICATION_VERIFIER_SIZE_HEAP_UNEXPECTED_EXCEPTION: Int = 1560

val PERFORMANCE_DATA_VERSION: Int = 1

val READ_THREAD_PROFILING_FLAG_DISPATCHING: Int = 1

val READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS: Int = 2

val DLL_PROCESS_ATTACH: Int = 1

val DLL_THREAD_ATTACH: Int = 2

val DLL_THREAD_DETACH: Int = 3

val DLL_PROCESS_DETACH: Int = 0

val DLL_PROCESS_VERIFIER: Int = 4

val EVENTLOG_SEQUENTIAL_READ: Int = 1

val EVENTLOG_SEEK_READ: Int = 2

val EVENTLOG_FORWARDS_READ: Int = 4

val EVENTLOG_BACKWARDS_READ: Int = 8

val EVENTLOG_SUCCESS: Int = 0

val EVENTLOG_ERROR_TYPE: Int = 1

val EVENTLOG_WARNING_TYPE: Int = 2

val EVENTLOG_INFORMATION_TYPE: Int = 4

val EVENTLOG_AUDIT_SUCCESS: Int = 8

val EVENTLOG_AUDIT_FAILURE: Int = 16

val EVENTLOG_START_PAIRED_EVENT: Int = 1

val EVENTLOG_END_PAIRED_EVENT: Int = 2

val EVENTLOG_END_ALL_PAIRED_EVENTS: Int = 4

val EVENTLOG_PAIRED_EVENT_ACTIVE: Int = 8

val EVENTLOG_PAIRED_EVENT_INACTIVE: Int = 16

val MAXLOGICALLOGNAMESIZE: Int = 256

val KEY_QUERY_VALUE: Int = 1

val KEY_SET_VALUE: Int = 2

val KEY_CREATE_SUB_KEY: Int = 4

val KEY_ENUMERATE_SUB_KEYS: Int = 8

val KEY_NOTIFY: Int = 16

val KEY_CREATE_LINK: Int = 32

val KEY_WOW64_64KEY: Int = 256

val KEY_WOW64_32KEY: Int = 512

val KEY_WOW64_RES: Int = 768

val KEY_READ: Int = 131097

val KEY_WRITE: Int = 131078

val KEY_EXECUTE: Int = 131097

val KEY_ALL_ACCESS: Int = 983103

val REG_OPTION_RESERVED: Int = 0

val REG_OPTION_NON_VOLATILE: Int = 0

val REG_OPTION_VOLATILE: Int = 1

val REG_OPTION_CREATE_LINK: Int = 2

val REG_OPTION_BACKUP_RESTORE: Int = 4

val REG_OPTION_OPEN_LINK: Int = 8

val REG_LEGAL_OPTION: Int = 15

val REG_CREATED_NEW_KEY: Int = 1

val REG_OPENED_EXISTING_KEY: Int = 2

val REG_STANDARD_FORMAT: Int = 1

val REG_LATEST_FORMAT: Int = 2

val REG_NO_COMPRESSION: Int = 4

val REG_WHOLE_HIVE_VOLATILE: Int = 1

val REG_REFRESH_HIVE: Int = 2

val REG_NO_LAZY_FLUSH: Int = 4

val REG_FORCE_RESTORE: Int = 8

val REG_APP_HIVE: Int = 16

val REG_PROCESS_PRIVATE: Int = 32

val REG_START_JOURNAL: Int = 64

val REG_HIVE_EXACT_FILE_GROWTH: Int = 128

val REG_HIVE_NO_RM: Int = 256

val REG_HIVE_SINGLE_LOG: Int = 512

val REG_BOOT_HIVE: Int = 1024

val REG_FORCE_UNLOAD: Int = 1

val REG_NOTIFY_CHANGE_NAME: Int = 1

val REG_NOTIFY_CHANGE_ATTRIBUTES: Int = 2

val REG_NOTIFY_CHANGE_LAST_SET: Int = 4

val REG_NOTIFY_CHANGE_SECURITY: Int = 8

val REG_NOTIFY_THREAD_AGNOSTIC: Int = 268435456

val REG_LEGAL_CHANGE_FILTER: Int = 268435471

val REG_NONE: Int = 0

val REG_SZ: Int = 1

val REG_EXPAND_SZ: Int = 2

val REG_BINARY: Int = 3

val REG_DWORD: Int = 4

val REG_DWORD_LITTLE_ENDIAN: Int = 4

val REG_DWORD_BIG_ENDIAN: Int = 5

val REG_LINK: Int = 6

val REG_MULTI_SZ: Int = 7

val REG_RESOURCE_LIST: Int = 8

val REG_FULL_RESOURCE_DESCRIPTOR: Int = 9

val REG_RESOURCE_REQUIREMENTS_LIST: Int = 10

val REG_QWORD: Int = 11

val REG_QWORD_LITTLE_ENDIAN: Int = 11

val SERVICE_KERNEL_DRIVER: Int = 1

val SERVICE_FILE_SYSTEM_DRIVER: Int = 2

val SERVICE_ADAPTER: Int = 4

val SERVICE_RECOGNIZER_DRIVER: Int = 8

val SERVICE_DRIVER: Int = 11

val SERVICE_WIN32_OWN_PROCESS: Int = 16

val SERVICE_WIN32_SHARE_PROCESS: Int = 32

val SERVICE_WIN32: Int = 48

val SERVICE_INTERACTIVE_PROCESS: Int = 256

val SERVICE_TYPE_ALL: Int = 319

val SERVICE_BOOT_START: Int = 0

val SERVICE_SYSTEM_START: Int = 1

val SERVICE_AUTO_START: Int = 2

val SERVICE_DEMAND_START: Int = 3

val SERVICE_DISABLED: Int = 4

val SERVICE_ERROR_IGNORE: Int = 0

val SERVICE_ERROR_NORMAL: Int = 1

val SERVICE_ERROR_SEVERE: Int = 2

val SERVICE_ERROR_CRITICAL: Int = 3

val CM_SERVICE_NETWORK_BOOT_LOAD: Int = 1

val CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD: Int = 2

val CM_SERVICE_USB_DISK_BOOT_LOAD: Int = 4

val CM_SERVICE_SD_DISK_BOOT_LOAD: Int = 8

val CM_SERVICE_USB3_DISK_BOOT_LOAD: Int = 16

val CM_SERVICE_MEASURED_BOOT_LOAD: Int = 32

val CM_SERVICE_VERIFIER_BOOT_LOAD: Int = 64

val CM_SERVICE_WINPE_BOOT_LOAD: Int = 128

val CM_SERVICE_VALID_PROMOTION_MASK: Int = 255

val TAPE_ERASE_SHORT: Int = 0

val TAPE_ERASE_LONG: Int = 1

val TAPE_LOAD: Int = 0

val TAPE_UNLOAD: Int = 1

val TAPE_TENSION: Int = 2

val TAPE_LOCK: Int = 3

val TAPE_UNLOCK: Int = 4

val TAPE_FORMAT: Int = 5

val TAPE_SETMARKS: Int = 0

val TAPE_FILEMARKS: Int = 1

val TAPE_SHORT_FILEMARKS: Int = 2

val TAPE_LONG_FILEMARKS: Int = 3

val TAPE_ABSOLUTE_POSITION: Int = 0

val TAPE_LOGICAL_POSITION: Int = 1

val TAPE_PSEUDO_LOGICAL_POSITION: Int = 2

val TAPE_REWIND: Int = 0

val TAPE_ABSOLUTE_BLOCK: Int = 1

val TAPE_LOGICAL_BLOCK: Int = 2

val TAPE_PSEUDO_LOGICAL_BLOCK: Int = 3

val TAPE_SPACE_END_OF_DATA: Int = 4

val TAPE_SPACE_RELATIVE_BLOCKS: Int = 5

val TAPE_SPACE_FILEMARKS: Int = 6

val TAPE_SPACE_SEQUENTIAL_FMKS: Int = 7

val TAPE_SPACE_SETMARKS: Int = 8

val TAPE_SPACE_SEQUENTIAL_SMKS: Int = 9

val TAPE_DRIVE_FIXED: Int = 1

val TAPE_DRIVE_SELECT: Int = 2

val TAPE_DRIVE_INITIATOR: Int = 4

val TAPE_DRIVE_ERASE_SHORT: Int = 16

val TAPE_DRIVE_ERASE_LONG: Int = 32

val TAPE_DRIVE_ERASE_BOP_ONLY: Int = 64

val TAPE_DRIVE_ERASE_IMMEDIATE: Int = 128

val TAPE_DRIVE_TAPE_CAPACITY: Int = 256

val TAPE_DRIVE_TAPE_REMAINING: Int = 512

val TAPE_DRIVE_FIXED_BLOCK: Int = 1024

val TAPE_DRIVE_VARIABLE_BLOCK: Int = 2048

val TAPE_DRIVE_WRITE_PROTECT: Int = 4096

val TAPE_DRIVE_EOT_WZ_SIZE: Int = 8192

val TAPE_DRIVE_ECC: Int = 65536

val TAPE_DRIVE_COMPRESSION: Int = 131072

val TAPE_DRIVE_PADDING: Int = 262144

val TAPE_DRIVE_REPORT_SMKS: Int = 524288

val TAPE_DRIVE_GET_ABSOLUTE_BLK: Int = 1048576

val TAPE_DRIVE_GET_LOGICAL_BLK: Int = 2097152

val TAPE_DRIVE_SET_EOT_WZ_SIZE: Int = 4194304

val TAPE_DRIVE_EJECT_MEDIA: Int = 16777216

val TAPE_DRIVE_CLEAN_REQUESTS: Int = 33554432

val TAPE_DRIVE_SET_CMP_BOP_ONLY: Int = 67108864

val TAPE_DRIVE_RESERVED_BIT: Int = -2147483648

val TAPE_DRIVE_LOAD_UNLOAD: Int = -2147483647

val TAPE_DRIVE_TENSION: Int = -2147483646

val TAPE_DRIVE_LOCK_UNLOCK: Int = -2147483644

val TAPE_DRIVE_REWIND_IMMEDIATE: Int = -2147483640

val TAPE_DRIVE_SET_BLOCK_SIZE: Int = -2147483632

val TAPE_DRIVE_LOAD_UNLD_IMMED: Int = -2147483616

val TAPE_DRIVE_TENSION_IMMED: Int = -2147483584

val TAPE_DRIVE_LOCK_UNLK_IMMED: Int = -2147483520

val TAPE_DRIVE_SET_ECC: Int = -2147483392

val TAPE_DRIVE_SET_COMPRESSION: Int = -2147483136

val TAPE_DRIVE_SET_PADDING: Int = -2147482624

val TAPE_DRIVE_SET_REPORT_SMKS: Int = -2147481600

val TAPE_DRIVE_ABSOLUTE_BLK: Int = -2147479552

val TAPE_DRIVE_ABS_BLK_IMMED: Int = -2147475456

val TAPE_DRIVE_LOGICAL_BLK: Int = -2147467264

val TAPE_DRIVE_LOG_BLK_IMMED: Int = -2147450880

val TAPE_DRIVE_END_OF_DATA: Int = -2147418112

val TAPE_DRIVE_RELATIVE_BLKS: Int = -2147352576

val TAPE_DRIVE_FILEMARKS: Int = -2147221504

val TAPE_DRIVE_SEQUENTIAL_FMKS: Int = -2146959360

val TAPE_DRIVE_SETMARKS: Int = -2146435072

val TAPE_DRIVE_SEQUENTIAL_SMKS: Int = -2145386496

val TAPE_DRIVE_REVERSE_POSITION: Int = -2143289344

val TAPE_DRIVE_SPACE_IMMEDIATE: Int = -2139095040

val TAPE_DRIVE_WRITE_SETMARKS: Int = -2130706432

val TAPE_DRIVE_WRITE_FILEMARKS: Int = -2113929216

val TAPE_DRIVE_WRITE_SHORT_FMKS: Int = -2080374784

val TAPE_DRIVE_WRITE_LONG_FMKS: Int = -2013265920

val TAPE_DRIVE_WRITE_MARK_IMMED: Int = -1879048192

val TAPE_DRIVE_FORMAT: Int = -1610612736

val TAPE_DRIVE_FORMAT_IMMEDIATE: Int = -1073741824

val TAPE_DRIVE_HIGH_FEATURES: Int = -2147483648

val TAPE_FIXED_PARTITIONS: Int = 0

val TAPE_SELECT_PARTITIONS: Int = 1

val TAPE_INITIATOR_PARTITIONS: Int = 2

val TAPE_QUERY_DRIVE_PARAMETERS: Int = 0

val TAPE_QUERY_MEDIA_CAPACITY: Int = 1

val TAPE_CHECK_FOR_DRIVE_PROBLEM: Int = 2

val TAPE_QUERY_IO_ERROR_DATA: Int = 3

val TAPE_QUERY_DEVICE_ERROR_DATA: Int = 4

val TRANSACTIONMANAGER_QUERY_INFORMATION: Int = 1

val TRANSACTIONMANAGER_SET_INFORMATION: Int = 2

val TRANSACTIONMANAGER_RECOVER: Int = 4

val TRANSACTIONMANAGER_RENAME: Int = 8

val TRANSACTIONMANAGER_CREATE_RM: Int = 16

val TRANSACTIONMANAGER_BIND_TRANSACTION: Int = 32

val TRANSACTIONMANAGER_GENERIC_READ: Int = 131073

val TRANSACTIONMANAGER_GENERIC_WRITE: Int = 131102

val TRANSACTIONMANAGER_GENERIC_EXECUTE: Int = 131072

val TRANSACTIONMANAGER_ALL_ACCESS: Int = 983103

val TRANSACTION_QUERY_INFORMATION: Int = 1

val TRANSACTION_SET_INFORMATION: Int = 2

val TRANSACTION_ENLIST: Int = 4

val TRANSACTION_COMMIT: Int = 8

val TRANSACTION_ROLLBACK: Int = 16

val TRANSACTION_PROPAGATE: Int = 32

val TRANSACTION_RIGHT_RESERVED1: Int = 64

val TRANSACTION_GENERIC_READ: Int = 1179649

val TRANSACTION_GENERIC_WRITE: Int = 1179710

val TRANSACTION_GENERIC_EXECUTE: Int = 1179672

val TRANSACTION_ALL_ACCESS: Int = 2031679

val TRANSACTION_RESOURCE_MANAGER_RIGHTS: Int = 1179703

val RESOURCEMANAGER_QUERY_INFORMATION: Int = 1

val RESOURCEMANAGER_SET_INFORMATION: Int = 2

val RESOURCEMANAGER_RECOVER: Int = 4

val RESOURCEMANAGER_ENLIST: Int = 8

val RESOURCEMANAGER_GET_NOTIFICATION: Int = 16

val RESOURCEMANAGER_REGISTER_PROTOCOL: Int = 32

val RESOURCEMANAGER_COMPLETE_PROPAGATION: Int = 64

val RESOURCEMANAGER_GENERIC_READ: Int = 1179649

val RESOURCEMANAGER_GENERIC_WRITE: Int = 1179774

val RESOURCEMANAGER_GENERIC_EXECUTE: Int = 1179740

val RESOURCEMANAGER_ALL_ACCESS: Int = 2031743

val ENLISTMENT_QUERY_INFORMATION: Int = 1

val ENLISTMENT_SET_INFORMATION: Int = 2

val ENLISTMENT_RECOVER: Int = 4

val ENLISTMENT_SUBORDINATE_RIGHTS: Int = 8

val ENLISTMENT_SUPERIOR_RIGHTS: Int = 16

val ENLISTMENT_GENERIC_READ: Int = 131073

val ENLISTMENT_GENERIC_WRITE: Int = 131102

val ENLISTMENT_GENERIC_EXECUTE: Int = 131100

val ENLISTMENT_ALL_ACCESS: Int = 983071

val WOW64_CONTEXT_i386: Int = 65536

val WOW64_CONTEXT_i486: Int = 65536

val WOW64_CONTEXT_CONTROL: Int = 65537

val WOW64_CONTEXT_INTEGER: Int = 65538

val WOW64_CONTEXT_SEGMENTS: Int = 65540

val WOW64_CONTEXT_FLOATING_POINT: Int = 65544

val WOW64_CONTEXT_DEBUG_REGISTERS: Int = 65552

val WOW64_CONTEXT_EXTENDED_REGISTERS: Int = 65568

val WOW64_CONTEXT_FULL: Int = 65543

val WOW64_CONTEXT_ALL: Int = 65599

val WOW64_CONTEXT_XSTATE: Int = 65600

val WOW64_CONTEXT_EXCEPTION_ACTIVE: Int = 134217728

val WOW64_CONTEXT_SERVICE_ACTIVE: Int = 268435456

val WOW64_CONTEXT_EXCEPTION_REQUEST: Int = 1073741824

val WOW64_CONTEXT_EXCEPTION_REPORTING: Int = -2147483648

val WOW64_SIZE_OF_80387_REGISTERS: Int = 80

val WOW64_MAXIMUM_SUPPORTED_EXTENSION: Int = 512

val ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION: Int = 1

val ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION: Int = 2

val ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION: Int = 3

val ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION: Int = 4

val ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION: Int = 5

val ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION: Int = 6

val ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION: Int = 7

val ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE: Int = 8

val ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES: Int = 9

val ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS: Int = 10

val ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO: Int = 11

val HMONITOR_DECLARED: Int = 1

val HFILE_ERROR: HFILE = -1

val DM_UPDATE: Int = 1

val DM_COPY: Int = 2

val DM_PROMPT: Int = 4

val DM_MODIFY: Int = 8

val DM_IN_BUFFER: Int = 8

val DM_IN_PROMPT: Int = 4

val DM_OUT_BUFFER: Int = 2

val DM_OUT_DEFAULT: Int = 1

val DC_FIELDS: Int = 1

val DC_PAPERS: Int = 2

val DC_PAPERSIZE: Int = 3

val DC_MINEXTENT: Int = 4

val DC_MAXEXTENT: Int = 5

val DC_BINS: Int = 6

val DC_DUPLEX: Int = 7

val DC_SIZE: Int = 8

val DC_EXTRA: Int = 9

val DC_VERSION: Int = 10

val DC_DRIVER: Int = 11

val DC_BINNAMES: Int = 12

val DC_ENUMRESOLUTIONS: Int = 13

val DC_FILEDEPENDENCIES: Int = 14

val DC_TRUETYPE: Int = 15

val DC_PAPERNAMES: Int = 16

val DC_ORIENTATION: Int = 17

val DC_COPIES: Int = 18

val FILE_BEGIN: Int = 0

val FILE_CURRENT: Int = 1

val FILE_END: Int = 2

val WAIT_FAILED: DWORD = -1

val WAIT_OBJECT_0: Int = 0

val WAIT_ABANDONED: Int = 128

val WAIT_ABANDONED_0: Int = 128

val WAIT_IO_COMPLETION: DWORD = 192

val FILE_FLAG_WRITE_THROUGH: Int = -2147483648

val FILE_FLAG_OVERLAPPED: Int = 1073741824

val FILE_FLAG_NO_BUFFERING: Int = 536870912

val FILE_FLAG_RANDOM_ACCESS: Int = 268435456

val FILE_FLAG_SEQUENTIAL_SCAN: Int = 134217728

val FILE_FLAG_DELETE_ON_CLOSE: Int = 67108864

val FILE_FLAG_BACKUP_SEMANTICS: Int = 33554432

val FILE_FLAG_POSIX_SEMANTICS: Int = 16777216

val FILE_FLAG_SESSION_AWARE: Int = 8388608

val FILE_FLAG_OPEN_REPARSE_POINT: Int = 2097152

val FILE_FLAG_OPEN_NO_RECALL: Int = 1048576

val FILE_FLAG_FIRST_PIPE_INSTANCE: Int = 524288

val PROGRESS_CONTINUE: Int = 0

val PROGRESS_CANCEL: Int = 1

val PROGRESS_STOP: Int = 2

val PROGRESS_QUIET: Int = 3

val CALLBACK_CHUNK_FINISHED: Int = 0

val CALLBACK_STREAM_SWITCH: Int = 1

val COPY_FILE_FAIL_IF_EXISTS: Int = 1

val COPY_FILE_RESTARTABLE: Int = 2

val COPY_FILE_OPEN_SOURCE_FOR_WRITE: Int = 4

val COPY_FILE_ALLOW_DECRYPTED_DESTINATION: Int = 8

val REPLACEFILE_WRITE_THROUGH: Int = 1

val REPLACEFILE_IGNORE_MERGE_ERRORS: Int = 2

val PIPE_ACCESS_INBOUND: Int = 1

val PIPE_ACCESS_OUTBOUND: Int = 2

val PIPE_ACCESS_DUPLEX: Int = 3

val PIPE_CLIENT_END: Int = 0

val PIPE_SERVER_END: Int = 1

val PIPE_WAIT: Int = 0

val PIPE_NOWAIT: Int = 1

val PIPE_READMODE_BYTE: Int = 0

val PIPE_READMODE_MESSAGE: Int = 2

val PIPE_TYPE_BYTE: Int = 0

val PIPE_TYPE_MESSAGE: Int = 4

val PIPE_ACCEPT_REMOTE_CLIENTS: Int = 0

val PIPE_REJECT_REMOTE_CLIENTS: Int = 8

val PIPE_UNLIMITED_INSTANCES: Int = 255

val SECURITY_ANONYMOUS: Int = 0

val SECURITY_IDENTIFICATION: Int = 65536

val SECURITY_IMPERSONATION: Int = 131072

val SECURITY_DELEGATION: Int = 196608

val SECURITY_CONTEXT_TRACKING: Int = 262144

val SECURITY_EFFECTIVE_ONLY: Int = 524288

val SECURITY_SQOS_PRESENT: Int = 1048576

val SECURITY_VALID_SQOS_FLAGS: Int = 2031616

val FAIL_FAST_GENERATE_EXCEPTION_ADDRESS: Int = 1

val FAIL_FAST_NO_HARD_ERROR_DLG: Int = 2

val SP_SERIALCOMM: DWORD = 1

val PST_UNSPECIFIED: DWORD = 0

val PST_RS232: DWORD = 1

val PST_PARALLELPORT: DWORD = 2

val PST_RS422: DWORD = 3

val PST_RS423: DWORD = 4

val PST_RS449: DWORD = 5

val PST_MODEM: DWORD = 6

val PST_FAX: DWORD = 33

val PST_SCANNER: DWORD = 34

val PST_NETWORK_BRIDGE: DWORD = 256

val PST_LAT: DWORD = 257

val PST_TCPIP_TELNET: DWORD = 258

val PST_X25: DWORD = 259

val PCF_DTRDSR: DWORD = 1

val PCF_RTSCTS: DWORD = 2

val PCF_RLSD: DWORD = 4

val PCF_PARITY_CHECK: DWORD = 8

val PCF_XONXOFF: DWORD = 16

val PCF_SETXCHAR: DWORD = 32

val PCF_TOTALTIMEOUTS: DWORD = 64

val PCF_INTTIMEOUTS: DWORD = 128

val PCF_SPECIALCHARS: DWORD = 256

val PCF_16BITMODE: DWORD = 512

val SP_PARITY: DWORD = 1

val SP_BAUD: DWORD = 2

val SP_DATABITS: DWORD = 4

val SP_STOPBITS: DWORD = 8

val SP_HANDSHAKING: DWORD = 16

val SP_PARITY_CHECK: DWORD = 32

val SP_RLSD: DWORD = 64

val BAUD_075: DWORD = 1

val BAUD_110: DWORD = 2

val BAUD_134_5: DWORD = 4

val BAUD_150: DWORD = 8

val BAUD_300: DWORD = 16

val BAUD_600: DWORD = 32

val BAUD_1200: DWORD = 64

val BAUD_1800: DWORD = 128

val BAUD_2400: DWORD = 256

val BAUD_4800: DWORD = 512

val BAUD_7200: DWORD = 1024

val BAUD_9600: DWORD = 2048

val BAUD_14400: DWORD = 4096

val BAUD_19200: DWORD = 8192

val BAUD_38400: DWORD = 16384

val BAUD_56K: DWORD = 32768

val BAUD_128K: DWORD = 65536

val BAUD_115200: DWORD = 131072

val BAUD_57600: DWORD = 262144

val BAUD_USER: DWORD = 268435456

val DATABITS_5: WORD = 1

val DATABITS_6: WORD = 2

val DATABITS_7: WORD = 4

val DATABITS_8: WORD = 8

val DATABITS_16: WORD = 16

val DATABITS_16X: WORD = 32

val STOPBITS_10: WORD = 1

val STOPBITS_15: WORD = 2

val STOPBITS_20: WORD = 4

val PARITY_NONE: WORD = 256

val PARITY_ODD: WORD = 512

val PARITY_EVEN: WORD = 1024

val PARITY_MARK: WORD = 2048

val PARITY_SPACE: WORD = 4096

val COMMPROP_INITIALIZED: DWORD = -415435474

val DTR_CONTROL_DISABLE: Int = 0

val DTR_CONTROL_ENABLE: Int = 1

val DTR_CONTROL_HANDSHAKE: Int = 2

val RTS_CONTROL_DISABLE: Int = 0

val RTS_CONTROL_ENABLE: Int = 1

val RTS_CONTROL_HANDSHAKE: Int = 2

val RTS_CONTROL_TOGGLE: Int = 3

val GMEM_FIXED: Int = 0

val GMEM_MOVEABLE: Int = 2

val GMEM_NOCOMPACT: Int = 16

val GMEM_NODISCARD: Int = 32

val GMEM_ZEROINIT: Int = 64

val GMEM_MODIFY: Int = 128

val GMEM_DISCARDABLE: Int = 256

val GMEM_NOT_BANKED: Int = 4096

val GMEM_SHARE: Int = 8192

val GMEM_DDESHARE: Int = 8192

val GMEM_NOTIFY: Int = 16384

val GMEM_LOWER: Int = 4096

val GMEM_VALID_FLAGS: Int = 32626

val GMEM_INVALID_HANDLE: Int = 32768

val GHND: Int = 66

val GPTR: Int = 64

val GMEM_DISCARDED: Int = 16384

val GMEM_LOCKCOUNT: Int = 255

val NUMA_NO_PREFERRED_NODE: DWORD = -1

val DEBUG_PROCESS: Int = 1

val DEBUG_ONLY_THIS_PROCESS: Int = 2

val CREATE_SUSPENDED: Int = 4

val DETACHED_PROCESS: Int = 8

val CREATE_NEW_CONSOLE: Int = 16

val NORMAL_PRIORITY_CLASS: Int = 32

val IDLE_PRIORITY_CLASS: Int = 64

val HIGH_PRIORITY_CLASS: Int = 128

val REALTIME_PRIORITY_CLASS: Int = 256

val CREATE_NEW_PROCESS_GROUP: Int = 512

val CREATE_UNICODE_ENVIRONMENT: Int = 1024

val CREATE_SEPARATE_WOW_VDM: Int = 2048

val CREATE_SHARED_WOW_VDM: Int = 4096

val CREATE_FORCEDOS: Int = 8192

val BELOW_NORMAL_PRIORITY_CLASS: Int = 16384

val ABOVE_NORMAL_PRIORITY_CLASS: Int = 32768

val INHERIT_PARENT_AFFINITY: Int = 65536

val INHERIT_CALLER_PRIORITY: Int = 131072

val CREATE_PROTECTED_PROCESS: Int = 262144

val EXTENDED_STARTUPINFO_PRESENT: Int = 524288

val PROCESS_MODE_BACKGROUND_BEGIN: Int = 1048576

val PROCESS_MODE_BACKGROUND_END: Int = 2097152

val CREATE_BREAKAWAY_FROM_JOB: Int = 16777216

val CREATE_PRESERVE_CODE_AUTHZ_LEVEL: Int = 33554432

val CREATE_DEFAULT_ERROR_MODE: Int = 67108864

val CREATE_NO_WINDOW: Int = 134217728

val PROFILE_USER: Int = 268435456

val PROFILE_KERNEL: Int = 536870912

val PROFILE_SERVER: Int = 1073741824

val CREATE_IGNORE_SYSTEM_DEFAULT: Int = -2147483648

val STACK_SIZE_PARAM_IS_A_RESERVATION: Int = 65536

val THREAD_PRIORITY_LOWEST: Int = -2

val THREAD_PRIORITY_BELOW_NORMAL: Int = -1

val THREAD_PRIORITY_NORMAL: Int = 0

val THREAD_PRIORITY_HIGHEST: Int = 2

val THREAD_PRIORITY_ABOVE_NORMAL: Int = 1

val THREAD_PRIORITY_ERROR_RETURN: Int = 2147483647

val THREAD_PRIORITY_TIME_CRITICAL: Int = 15

val THREAD_PRIORITY_IDLE: Int = -15

val THREAD_MODE_BACKGROUND_BEGIN: Int = 65536

val THREAD_MODE_BACKGROUND_END: Int = 131072

val VOLUME_NAME_DOS: Int = 0

val VOLUME_NAME_GUID: Int = 1

val VOLUME_NAME_NT: Int = 2

val VOLUME_NAME_NONE: Int = 4

val FILE_NAME_NORMALIZED: Int = 0

val FILE_NAME_OPENED: Int = 8

val DRIVE_UNKNOWN: Int = 0

val DRIVE_NO_ROOT_DIR: Int = 1

val DRIVE_REMOVABLE: Int = 2

val DRIVE_FIXED: Int = 3

val DRIVE_REMOTE: Int = 4

val DRIVE_CDROM: Int = 5

val DRIVE_RAMDISK: Int = 6

val FILE_TYPE_UNKNOWN: Int = 0

val FILE_TYPE_DISK: Int = 1

val FILE_TYPE_CHAR: Int = 2

val FILE_TYPE_PIPE: Int = 3

val FILE_TYPE_REMOTE: Int = 32768

val STD_INPUT_HANDLE: DWORD = -10

val STD_OUTPUT_HANDLE: DWORD = -11

val STD_ERROR_HANDLE: DWORD = -12

val NOPARITY: Int = 0

val ODDPARITY: Int = 1

val EVENPARITY: Int = 2

val MARKPARITY: Int = 3

val SPACEPARITY: Int = 4

val ONESTOPBIT: Int = 0

val ONE5STOPBITS: Int = 1

val TWOSTOPBITS: Int = 2

val IGNORE: Int = 0

val INFINITE: Int = -1

val CBR_110: Int = 110

val CBR_300: Int = 300

val CBR_600: Int = 600

val CBR_1200: Int = 1200

val CBR_2400: Int = 2400

val CBR_4800: Int = 4800

val CBR_9600: Int = 9600

val CBR_14400: Int = 14400

val CBR_19200: Int = 19200

val CBR_38400: Int = 38400

val CBR_56000: Int = 56000

val CBR_57600: Int = 57600

val CBR_115200: Int = 115200

val CBR_128000: Int = 128000

val CBR_256000: Int = 256000

val CE_RXOVER: Int = 1

val CE_OVERRUN: Int = 2

val CE_RXPARITY: Int = 4

val CE_FRAME: Int = 8

val CE_BREAK: Int = 16

val CE_TXFULL: Int = 256

val CE_PTO: Int = 512

val CE_IOE: Int = 1024

val CE_DNS: Int = 2048

val CE_OOP: Int = 4096

val CE_MODE: Int = 32768

val IE_BADID: Int = -1

val IE_OPEN: Int = -2

val IE_NOPEN: Int = -3

val IE_MEMORY: Int = -4

val IE_DEFAULT: Int = -5

val IE_HARDWARE: Int = -10

val IE_BYTESIZE: Int = -11

val IE_BAUDRATE: Int = -12

val EV_RXCHAR: Int = 1

val EV_RXFLAG: Int = 2

val EV_TXEMPTY: Int = 4

val EV_CTS: Int = 8

val EV_DSR: Int = 16

val EV_RLSD: Int = 32

val EV_BREAK: Int = 64

val EV_ERR: Int = 128

val EV_RING: Int = 256

val EV_PERR: Int = 512

val EV_RX80FULL: Int = 1024

val EV_EVENT1: Int = 2048

val EV_EVENT2: Int = 4096

val SETXOFF: Int = 1

val SETXON: Int = 2

val SETRTS: Int = 3

val CLRRTS: Int = 4

val SETDTR: Int = 5

val CLRDTR: Int = 6

val RESETDEV: Int = 7

val SETBREAK: Int = 8

val CLRBREAK: Int = 9

val PURGE_TXABORT: Int = 1

val PURGE_RXABORT: Int = 2

val PURGE_TXCLEAR: Int = 4

val PURGE_RXCLEAR: Int = 8

val LPTx: Int = 128

val MS_CTS_ON: DWORD = 16

val MS_DSR_ON: DWORD = 32

val MS_RING_ON: DWORD = 64

val MS_RLSD_ON: DWORD = 128

val S_QUEUEEMPTY: Int = 0

val S_THRESHOLD: Int = 1

val S_ALLTHRESHOLD: Int = 2

val S_NORMAL: Int = 0

val S_LEGATO: Int = 1

val S_STACCATO: Int = 2

val S_PERIOD512: Int = 0

val S_PERIOD1024: Int = 1

val S_PERIOD2048: Int = 2

val S_PERIODVOICE: Int = 3

val S_WHITE512: Int = 4

val S_WHITE1024: Int = 5

val S_WHITE2048: Int = 6

val S_WHITEVOICE: Int = 7

val S_SERDVNA: Int = -1

val S_SEROFM: Int = -2

val S_SERMACT: Int = -3

val S_SERQFUL: Int = -4

val S_SERBDNT: Int = -5

val S_SERDLN: Int = -6

val S_SERDCC: Int = -7

val S_SERDTP: Int = -8

val S_SERDVL: Int = -9

val S_SERDMD: Int = -10

val S_SERDSH: Int = -11

val S_SERDPT: Int = -12

val S_SERDFQ: Int = -13

val S_SERDDR: Int = -14

val S_SERDSR: Int = -15

val S_SERDST: Int = -16

val NMPWAIT_WAIT_FOREVER: Int = -1

val NMPWAIT_NOWAIT: Int = 1

val NMPWAIT_USE_DEFAULT_WAIT: Int = 0

val FS_CASE_IS_PRESERVED: Int = 2

val FS_CASE_SENSITIVE: Int = 1

val FS_UNICODE_STORED_ON_DISK: Int = 4

val FS_PERSISTENT_ACLS: Int = 8

val FS_VOL_IS_COMPRESSED: Int = 32768

val FS_FILE_COMPRESSION: Int = 16

val FS_FILE_ENCRYPTION: Int = 131072

val OF_READ: Int = 0

val OF_WRITE: Int = 1

val OF_READWRITE: Int = 2

val OF_SHARE_COMPAT: Int = 0

val OF_SHARE_EXCLUSIVE: Int = 16

val OF_SHARE_DENY_WRITE: Int = 32

val OF_SHARE_DENY_READ: Int = 48

val OF_SHARE_DENY_NONE: Int = 64

val OF_PARSE: Int = 256

val OF_DELETE: Int = 512

val OF_VERIFY: Int = 1024

val OF_CANCEL: Int = 2048

val OF_CREATE: Int = 4096

val OF_PROMPT: Int = 8192

val OF_EXIST: Int = 16384

val OF_REOPEN: Int = 32768

val OFS_MAXPATHNAME: Int = 128

val MAXINTATOM: Int = 49152

val INVALID_ATOM: ATOM = 0

val SCS_32BIT_BINARY: Int = 0

val SCS_DOS_BINARY: Int = 1

val SCS_WOW_BINARY: Int = 2

val SCS_PIF_BINARY: Int = 3

val SCS_POSIX_BINARY: Int = 4

val SCS_OS216_BINARY: Int = 5

val SCS_64BIT_BINARY: Int = 6

val SCS_THIS_PLATFORM_BINARY: Int = 6

val FIBER_FLAG_FLOAT_SWITCH: Int = 1

val SEM_FAILCRITICALERRORS: Int = 1

val SEM_NOGPFAULTERRORBOX: Int = 2

val SEM_NOALIGNMENTFAULTEXCEPT: Int = 4

val SEM_NOOPENFILEERRORBOX: Int = 32768

val CRITICAL_SECTION_NO_DEBUG_INFO: Int = 16777216

val HANDLE_FLAG_INHERIT: Int = 1

val HANDLE_FLAG_PROTECT_FROM_CLOSE: Int = 2

val HINSTANCE_ERROR: Int = 32

val GET_TAPE_MEDIA_INFORMATION: Int = 0

val GET_TAPE_DRIVE_INFORMATION: Int = 1

val SET_TAPE_MEDIA_INFORMATION: Int = 0

val SET_TAPE_DRIVE_INFORMATION: Int = 1

val FORMAT_MESSAGE_IGNORE_INSERTS: Int = 512

val FORMAT_MESSAGE_FROM_STRING: Int = 1024

val FORMAT_MESSAGE_FROM_HMODULE: Int = 2048

val FORMAT_MESSAGE_FROM_SYSTEM: Int = 4096

val FORMAT_MESSAGE_ARGUMENT_ARRAY: Int = 8192

val FORMAT_MESSAGE_MAX_WIDTH_MASK: Int = 255

val FILE_ENCRYPTABLE: Int = 0

val FILE_IS_ENCRYPTED: Int = 1

val FILE_SYSTEM_ATTR: Int = 2

val FILE_ROOT_DIR: Int = 3

val FILE_SYSTEM_DIR: Int = 4

val FILE_UNKNOWN: Int = 5

val FILE_SYSTEM_NOT_SUPPORT: Int = 6

val FILE_USER_DISALLOWED: Int = 7

val FILE_READ_ONLY: Int = 8

val FILE_DIR_DISALLOWED: Int = 9

val FORMAT_MESSAGE_ALLOCATE_BUFFER: Int = 256

val EFS_USE_RECOVERY_KEYS: Int = 1

val CREATE_FOR_IMPORT: Int = 1

val CREATE_FOR_DIR: Int = 2

val OVERWRITE_HIDDEN: Int = 4

val EFSRPC_SECURE_ONLY: Int = 8

val BACKUP_INVALID: Int = 0

val BACKUP_DATA: Int = 1

val BACKUP_EA_DATA: Int = 2

val BACKUP_SECURITY_DATA: Int = 3

val BACKUP_ALTERNATE_DATA: Int = 4

val BACKUP_LINK: Int = 5

val BACKUP_PROPERTY_DATA: Int = 6

val BACKUP_OBJECT_ID: Int = 7

val BACKUP_REPARSE_DATA: Int = 8

val BACKUP_SPARSE_BLOCK: Int = 9

val BACKUP_TXFS_DATA: Int = 10

val STREAM_NORMAL_ATTRIBUTE: Int = 0

val STREAM_MODIFIED_WHEN_READ: Int = 1

val STREAM_CONTAINS_SECURITY: Int = 2

val STREAM_CONTAINS_PROPERTIES: Int = 4

val STREAM_SPARSE_ATTRIBUTE: Int = 8

val STARTF_USESHOWWINDOW: Int = 1

val STARTF_USESIZE: Int = 2

val STARTF_USEPOSITION: Int = 4

val STARTF_USECOUNTCHARS: Int = 8

val STARTF_USEFILLATTRIBUTE: Int = 16

val STARTF_RUNFULLSCREEN: Int = 32

val STARTF_FORCEONFEEDBACK: Int = 64

val STARTF_FORCEOFFFEEDBACK: Int = 128

val STARTF_USESTDHANDLES: Int = 256

val STARTF_USEHOTKEY: Int = 512

val STARTF_TITLEISLINKNAME: Int = 2048

val STARTF_TITLEISAPPID: Int = 4096

val STARTF_PREVENTPINNING: Int = 8192

val SHUTDOWN_NORETRY: Int = 1

val ATOM_FLAG_GLOBAL: Int = 2

val BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE: Int = 1

val BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE: Int = 65536

val BASE_SEARCH_PATH_PERMANENT: Int = 32768

val BASE_SEARCH_PATH_INVALID_FLAGS: Int = -98306

val DDD_RAW_TARGET_PATH: Int = 1

val DDD_REMOVE_DEFINITION: Int = 2

val DDD_EXACT_MATCH_ON_REMOVE: Int = 4

val DDD_NO_BROADCAST_SYSTEM: Int = 8

val DDD_LUID_BROADCAST_DRIVE: Int = 16

val MOVEFILE_REPLACE_EXISTING: Int = 1

val MOVEFILE_COPY_ALLOWED: Int = 2

val MOVEFILE_DELAY_UNTIL_REBOOT: Int = 4

val MOVEFILE_WRITE_THROUGH: Int = 8

val MOVEFILE_CREATE_HARDLINK: Int = 16

val MOVEFILE_FAIL_IF_NOT_TRACKABLE: Int = 32

val EVENTLOG_FULL_INFO: Int = 0

val MAX_COMPUTERNAME_LENGTH: Int = 15

val LOGON32_LOGON_INTERACTIVE: Int = 2

val LOGON32_LOGON_NETWORK: Int = 3

val LOGON32_LOGON_BATCH: Int = 4

val LOGON32_LOGON_SERVICE: Int = 5

val LOGON32_LOGON_UNLOCK: Int = 7

val LOGON32_LOGON_NETWORK_CLEARTEXT: Int = 8

val LOGON32_LOGON_NEW_CREDENTIALS: Int = 9

val LOGON32_PROVIDER_DEFAULT: Int = 0

val LOGON32_PROVIDER_WINNT35: Int = 1

val LOGON32_PROVIDER_WINNT40: Int = 2

val LOGON32_PROVIDER_WINNT50: Int = 3

val LOGON_WITH_PROFILE: Int = 1

val LOGON_NETCREDENTIALS_ONLY: Int = 2

val LOGON_ZERO_PASSWORD_BUFFER: Int = -2147483648

val HW_PROFILE_GUIDLEN: Int = 39

val MAX_PROFILE_LEN: Int = 80

val DOCKINFO_UNDOCKED: Int = 1

val DOCKINFO_DOCKED: Int = 2

val DOCKINFO_USER_SUPPLIED: Int = 4

val DOCKINFO_USER_UNDOCKED: Int = 5

val DOCKINFO_USER_DOCKED: Int = 6

val FACILITY_WINDOWSUPDATE: Int = 36

val FACILITY_WINDOWS_CE: Int = 24

val FACILITY_WINDOWS: Int = 8

val FACILITY_URT: Int = 19

val FACILITY_UMI: Int = 22

val FACILITY_SXS: Int = 23

val FACILITY_STORAGE: Int = 3

val FACILITY_STATE_MANAGEMENT: Int = 34

val FACILITY_SSPI: Int = 9

val FACILITY_SCARD: Int = 16

val FACILITY_SETUPAPI: Int = 15

val FACILITY_SECURITY: Int = 9

val FACILITY_RPC: Int = 1

val FACILITY_WIN32: Int = 7

val FACILITY_CONTROL: Int = 10

val FACILITY_NULL: Int = 0

val FACILITY_METADIRECTORY: Int = 35

val FACILITY_MSMQ: Int = 14

val FACILITY_MEDIASERVER: Int = 13

val FACILITY_INTERNET: Int = 12

val FACILITY_ITF: Int = 4

val FACILITY_HTTP: Int = 25

val FACILITY_DPLAY: Int = 21

val FACILITY_DISPATCH: Int = 2

val FACILITY_DIRECTORYSERVICE: Int = 37

val FACILITY_CONFIGURATION: Int = 33

val FACILITY_COMPLUS: Int = 17

val FACILITY_CERT: Int = 11

val FACILITY_BACKGROUNDCOPY: Int = 32

val FACILITY_ACS: Int = 20

val FACILITY_AAF: Int = 18

val FACILITY_AUDCLNT: Int = 2185

val ERROR_SUCCESS: Int = 0

val NO_ERROR: Int = 0

val SEC_E_OK: HRESULT = 0

val ERROR_INVALID_FUNCTION: Int = 1

val ERROR_FILE_NOT_FOUND: Int = 2

val ERROR_PATH_NOT_FOUND: Int = 3

val ERROR_TOO_MANY_OPEN_FILES: Int = 4

val ERROR_ACCESS_DENIED: Int = 5

val ERROR_INVALID_HANDLE: Int = 6

val ERROR_ARENA_TRASHED: Int = 7

val ERROR_NOT_ENOUGH_MEMORY: Int = 8

val ERROR_INVALID_BLOCK: Int = 9

val ERROR_BAD_ENVIRONMENT: Int = 10

val ERROR_BAD_FORMAT: Int = 11

val ERROR_INVALID_ACCESS: Int = 12

val ERROR_INVALID_DATA: Int = 13

val ERROR_OUTOFMEMORY: Int = 14

val ERROR_INVALID_DRIVE: Int = 15

val ERROR_CURRENT_DIRECTORY: Int = 16

val ERROR_NOT_SAME_DEVICE: Int = 17

val ERROR_NO_MORE_FILES: Int = 18

val ERROR_WRITE_PROTECT: Int = 19

val ERROR_BAD_UNIT: Int = 20

val ERROR_NOT_READY: Int = 21

val ERROR_BAD_COMMAND: Int = 22

val ERROR_CRC: Int = 23

val ERROR_BAD_LENGTH: Int = 24

val ERROR_SEEK: Int = 25

val ERROR_NOT_DOS_DISK: Int = 26

val ERROR_SECTOR_NOT_FOUND: Int = 27

val ERROR_OUT_OF_PAPER: Int = 28

val ERROR_WRITE_FAULT: Int = 29

val ERROR_READ_FAULT: Int = 30

val ERROR_GEN_FAILURE: Int = 31

val ERROR_SHARING_VIOLATION: Int = 32

val ERROR_LOCK_VIOLATION: Int = 33

val ERROR_WRONG_DISK: Int = 34

val ERROR_SHARING_BUFFER_EXCEEDED: Int = 36

val ERROR_HANDLE_EOF: Int = 38

val ERROR_HANDLE_DISK_FULL: Int = 39

val ERROR_NOT_SUPPORTED: Int = 50

val ERROR_REM_NOT_LIST: Int = 51

val ERROR_DUP_NAME: Int = 52

val ERROR_BAD_NETPATH: Int = 53

val ERROR_NETWORK_BUSY: Int = 54

val ERROR_DEV_NOT_EXIST: Int = 55

val ERROR_TOO_MANY_CMDS: Int = 56

val ERROR_ADAP_HDW_ERR: Int = 57

val ERROR_BAD_NET_RESP: Int = 58

val ERROR_UNEXP_NET_ERR: Int = 59

val ERROR_BAD_REM_ADAP: Int = 60

val ERROR_PRINTQ_FULL: Int = 61

val ERROR_NO_SPOOL_SPACE: Int = 62

val ERROR_PRINT_CANCELLED: Int = 63

val ERROR_NETNAME_DELETED: Int = 64

val ERROR_NETWORK_ACCESS_DENIED: Int = 65

val ERROR_BAD_DEV_TYPE: Int = 66

val ERROR_BAD_NET_NAME: Int = 67

val ERROR_TOO_MANY_NAMES: Int = 68

val ERROR_TOO_MANY_SESS: Int = 69

val ERROR_SHARING_PAUSED: Int = 70

val ERROR_REQ_NOT_ACCEP: Int = 71

val ERROR_REDIR_PAUSED: Int = 72

val ERROR_FILE_EXISTS: Int = 80

val ERROR_CANNOT_MAKE: Int = 82

val ERROR_FAIL_I24: Int = 83

val ERROR_OUT_OF_STRUCTURES: Int = 84

val ERROR_ALREADY_ASSIGNED: Int = 85

val ERROR_INVALID_PASSWORD: Int = 86

val ERROR_INVALID_PARAMETER: Int = 87

val ERROR_NET_WRITE_FAULT: Int = 88

val ERROR_NO_PROC_SLOTS: Int = 89

val ERROR_TOO_MANY_SEMAPHORES: Int = 100

val ERROR_EXCL_SEM_ALREADY_OWNED: Int = 101

val ERROR_SEM_IS_SET: Int = 102

val ERROR_TOO_MANY_SEM_REQUESTS: Int = 103

val ERROR_INVALID_AT_INTERRUPT_TIME: Int = 104

val ERROR_SEM_OWNER_DIED: Int = 105

val ERROR_SEM_USER_LIMIT: Int = 106

val ERROR_DISK_CHANGE: Int = 107

val ERROR_DRIVE_LOCKED: Int = 108

val ERROR_BROKEN_PIPE: Int = 109

val ERROR_OPEN_FAILED: Int = 110

val ERROR_BUFFER_OVERFLOW: Int = 111

val ERROR_DISK_FULL: Int = 112

val ERROR_NO_MORE_SEARCH_HANDLES: Int = 113

val ERROR_INVALID_TARGET_HANDLE: Int = 114

val ERROR_INVALID_CATEGORY: Int = 117

val ERROR_INVALID_VERIFY_SWITCH: Int = 118

val ERROR_BAD_DRIVER_LEVEL: Int = 119

val ERROR_CALL_NOT_IMPLEMENTED: Int = 120

val ERROR_SEM_TIMEOUT: Int = 121

val ERROR_INSUFFICIENT_BUFFER: Int = 122

val ERROR_INVALID_NAME: Int = 123

val ERROR_INVALID_LEVEL: Int = 124

val ERROR_NO_VOLUME_LABEL: Int = 125

val ERROR_MOD_NOT_FOUND: Int = 126

val ERROR_PROC_NOT_FOUND: Int = 127

val ERROR_WAIT_NO_CHILDREN: Int = 128

val ERROR_CHILD_NOT_COMPLETE: Int = 129

val ERROR_DIRECT_ACCESS_HANDLE: Int = 130

val ERROR_NEGATIVE_SEEK: Int = 131

val ERROR_SEEK_ON_DEVICE: Int = 132

val ERROR_IS_JOIN_TARGET: Int = 133

val ERROR_IS_JOINED: Int = 134

val ERROR_IS_SUBSTED: Int = 135

val ERROR_NOT_JOINED: Int = 136

val ERROR_NOT_SUBSTED: Int = 137

val ERROR_JOIN_TO_JOIN: Int = 138

val ERROR_SUBST_TO_SUBST: Int = 139

val ERROR_JOIN_TO_SUBST: Int = 140

val ERROR_SUBST_TO_JOIN: Int = 141

val ERROR_BUSY_DRIVE: Int = 142

val ERROR_SAME_DRIVE: Int = 143

val ERROR_DIR_NOT_ROOT: Int = 144

val ERROR_DIR_NOT_EMPTY: Int = 145

val ERROR_IS_SUBST_PATH: Int = 146

val ERROR_IS_JOIN_PATH: Int = 147

val ERROR_PATH_BUSY: Int = 148

val ERROR_IS_SUBST_TARGET: Int = 149

val ERROR_SYSTEM_TRACE: Int = 150

val ERROR_INVALID_EVENT_COUNT: Int = 151

val ERROR_TOO_MANY_MUXWAITERS: Int = 152

val ERROR_INVALID_LIST_FORMAT: Int = 153

val ERROR_LABEL_TOO_LONG: Int = 154

val ERROR_TOO_MANY_TCBS: Int = 155

val ERROR_SIGNAL_REFUSED: Int = 156

val ERROR_DISCARDED: Int = 157

val ERROR_NOT_LOCKED: Int = 158

val ERROR_BAD_THREADID_ADDR: Int = 159

val ERROR_BAD_ARGUMENTS: Int = 160

val ERROR_BAD_PATHNAME: Int = 161

val ERROR_SIGNAL_PENDING: Int = 162

val ERROR_MAX_THRDS_REACHED: Int = 164

val ERROR_LOCK_FAILED: Int = 167

val ERROR_BUSY: Int = 170

val ERROR_CANCEL_VIOLATION: Int = 173

val ERROR_ATOMIC_LOCKS_NOT_SUPPORTED: Int = 174

val ERROR_INVALID_SEGMENT_NUMBER: Int = 180

val ERROR_INVALID_ORDINAL: Int = 182

val ERROR_ALREADY_EXISTS: Int = 183

val ERROR_INVALID_FLAG_NUMBER: Int = 186

val ERROR_SEM_NOT_FOUND: Int = 187

val ERROR_INVALID_STARTING_CODESEG: Int = 188

val ERROR_INVALID_STACKSEG: Int = 189

val ERROR_INVALID_MODULETYPE: Int = 190

val ERROR_INVALID_EXE_SIGNATURE: Int = 191

val ERROR_EXE_MARKED_INVALID: Int = 192

val ERROR_BAD_EXE_FORMAT: Int = 193

val ERROR_ITERATED_DATA_EXCEEDS_64k: Int = 194

val ERROR_INVALID_MINALLOCSIZE: Int = 195

val ERROR_DYNLINK_FROM_INVALID_RING: Int = 196

val ERROR_IOPL_NOT_ENABLED: Int = 197

val ERROR_INVALID_SEGDPL: Int = 198

val ERROR_AUTODATASEG_EXCEEDS_64k: Int = 199

val ERROR_RING2SEG_MUST_BE_MOVABLE: Int = 200

val ERROR_RELOC_CHAIN_XEEDS_SEGLIM: Int = 201

val ERROR_INFLOOP_IN_RELOC_CHAIN: Int = 202

val ERROR_ENVVAR_NOT_FOUND: Int = 203

val ERROR_NO_SIGNAL_SENT: Int = 205

val ERROR_FILENAME_EXCED_RANGE: Int = 206

val ERROR_RING2_STACK_IN_USE: Int = 207

val ERROR_META_EXPANSION_TOO_LONG: Int = 208

val ERROR_INVALID_SIGNAL_NUMBER: Int = 209

val ERROR_THREAD_1_INACTIVE: Int = 210

val ERROR_LOCKED: Int = 212

val ERROR_TOO_MANY_MODULES: Int = 214

val ERROR_NESTING_NOT_ALLOWED: Int = 215

val ERROR_EXE_MACHINE_TYPE_MISMATCH: Int = 216

val ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY: Int = 217

val ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY: Int = 218

val ERROR_FILE_CHECKED_OUT: Int = 220

val ERROR_CHECKOUT_REQUIRED: Int = 221

val ERROR_BAD_FILE_TYPE: Int = 222

val ERROR_FILE_TOO_LARGE: Int = 223

val ERROR_FORMS_AUTH_REQUIRED: Int = 224

val ERROR_PIPE_LOCAL: Int = 229

val ERROR_BAD_PIPE: Int = 230

val ERROR_PIPE_BUSY: Int = 231

val ERROR_NO_DATA: Int = 232

val ERROR_PIPE_NOT_CONNECTED: Int = 233

val ERROR_MORE_DATA: Int = 234

val ERROR_VC_DISCONNECTED: Int = 240

val ERROR_INVALID_EA_NAME: Int = 254

val ERROR_EA_LIST_INCONSISTENT: Int = 255

val WAIT_TIMEOUT: Int = 258

val ERROR_NO_MORE_ITEMS: Int = 259

val ERROR_CANNOT_COPY: Int = 266

val ERROR_DIRECTORY: Int = 267

val ERROR_EAS_DIDNT_FIT: Int = 275

val ERROR_EA_FILE_CORRUPT: Int = 276

val ERROR_EA_TABLE_FULL: Int = 277

val ERROR_INVALID_EA_HANDLE: Int = 278

val ERROR_EAS_NOT_SUPPORTED: Int = 282

val ERROR_NOT_OWNER: Int = 288

val ERROR_TOO_MANY_POSTS: Int = 298

val ERROR_PARTIAL_COPY: Int = 299

val ERROR_OPLOCK_NOT_GRANTED: Int = 300

val ERROR_INVALID_OPLOCK_PROTOCOL: Int = 301

val ERROR_DISK_TOO_FRAGMENTED: Int = 302

val ERROR_DELETE_PENDING: Int = 303

val ERROR_MR_MID_NOT_FOUND: Int = 317

val ERROR_SCOPE_NOT_FOUND: Int = 318

val ERROR_INVALID_ADDRESS: Int = 487

val ERROR_ARITHMETIC_OVERFLOW: Int = 534

val ERROR_PIPE_CONNECTED: Int = 535

val ERROR_PIPE_LISTENING: Int = 536

val ERROR_WAKE_SYSTEM: Int = 730

val ERROR_WAIT_1: Int = 731

val ERROR_WAIT_2: Int = 732

val ERROR_WAIT_3: Int = 733

val ERROR_WAIT_63: Int = 734

val ERROR_ABANDONED_WAIT_0: Int = 735

val ERROR_ABANDONED_WAIT_63: Int = 736

val ERROR_USER_APC: Int = 737

val ERROR_KERNEL_APC: Int = 738

val ERROR_ALERTED: Int = 739

val ERROR_EA_ACCESS_DENIED: Int = 994

val ERROR_OPERATION_ABORTED: Int = 995

val ERROR_IO_INCOMPLETE: Int = 996

val ERROR_IO_PENDING: Int = 997

val ERROR_NOACCESS: Int = 998

val ERROR_SWAPERROR: Int = 999

val ERROR_STACK_OVERFLOW: Int = 1001

val ERROR_INVALID_MESSAGE: Int = 1002

val ERROR_CAN_NOT_COMPLETE: Int = 1003

val ERROR_INVALID_FLAGS: Int = 1004

val ERROR_UNRECOGNIZED_VOLUME: Int = 1005

val ERROR_FILE_INVALID: Int = 1006

val ERROR_FULLSCREEN_MODE: Int = 1007

val ERROR_NO_TOKEN: Int = 1008

val ERROR_BADDB: Int = 1009

val ERROR_BADKEY: Int = 1010

val ERROR_CANTOPEN: Int = 1011

val ERROR_CANTREAD: Int = 1012

val ERROR_CANTWRITE: Int = 1013

val ERROR_REGISTRY_RECOVERED: Int = 1014

val ERROR_REGISTRY_CORRUPT: Int = 1015

val ERROR_REGISTRY_IO_FAILED: Int = 1016

val ERROR_NOT_REGISTRY_FILE: Int = 1017

val ERROR_KEY_DELETED: Int = 1018

val ERROR_NO_LOG_SPACE: Int = 1019

val ERROR_KEY_HAS_CHILDREN: Int = 1020

val ERROR_CHILD_MUST_BE_VOLATILE: Int = 1021

val ERROR_NOTIFY_ENUM_DIR: Int = 1022

val ERROR_DEPENDENT_SERVICES_RUNNING: Int = 1051

val ERROR_INVALID_SERVICE_CONTROL: Int = 1052

val ERROR_SERVICE_REQUEST_TIMEOUT: Int = 1053

val ERROR_SERVICE_NO_THREAD: Int = 1054

val ERROR_SERVICE_DATABASE_LOCKED: Int = 1055

val ERROR_SERVICE_ALREADY_RUNNING: Int = 1056

val ERROR_INVALID_SERVICE_ACCOUNT: Int = 1057

val ERROR_SERVICE_DISABLED: Int = 1058

val ERROR_CIRCULAR_DEPENDENCY: Int = 1059

val ERROR_SERVICE_DOES_NOT_EXIST: Int = 1060

val ERROR_SERVICE_CANNOT_ACCEPT_CTRL: Int = 1061

val ERROR_SERVICE_NOT_ACTIVE: Int = 1062

val ERROR_FAILED_SERVICE_CONTROLLER_CONNECT: Int = 1063

val ERROR_EXCEPTION_IN_SERVICE: Int = 1064

val ERROR_DATABASE_DOES_NOT_EXIST: Int = 1065

val ERROR_SERVICE_SPECIFIC_ERROR: Int = 1066

val ERROR_PROCESS_ABORTED: Int = 1067

val ERROR_SERVICE_DEPENDENCY_FAIL: Int = 1068

val ERROR_SERVICE_LOGON_FAILED: Int = 1069

val ERROR_SERVICE_START_HANG: Int = 1070

val ERROR_INVALID_SERVICE_LOCK: Int = 1071

val ERROR_SERVICE_MARKED_FOR_DELETE: Int = 1072

val ERROR_SERVICE_EXISTS: Int = 1073

val ERROR_ALREADY_RUNNING_LKG: Int = 1074

val ERROR_SERVICE_DEPENDENCY_DELETED: Int = 1075

val ERROR_BOOT_ALREADY_ACCEPTED: Int = 1076

val ERROR_SERVICE_NEVER_STARTED: Int = 1077

val ERROR_DUPLICATE_SERVICE_NAME: Int = 1078

val ERROR_DIFFERENT_SERVICE_ACCOUNT: Int = 1079

val ERROR_CANNOT_DETECT_DRIVER_FAILURE: Int = 1080

val ERROR_CANNOT_DETECT_PROCESS_ABORT: Int = 1081

val ERROR_NO_RECOVERY_PROGRAM: Int = 1082

val ERROR_SERVICE_NOT_IN_EXE: Int = 1083

val ERROR_NOT_SAFEBOOT_SERVICE: Int = 1084

val ERROR_END_OF_MEDIA: Int = 1100

val ERROR_FILEMARK_DETECTED: Int = 1101

val ERROR_BEGINNING_OF_MEDIA: Int = 1102

val ERROR_SETMARK_DETECTED: Int = 1103

val ERROR_NO_DATA_DETECTED: Int = 1104

val ERROR_PARTITION_FAILURE: Int = 1105

val ERROR_INVALID_BLOCK_LENGTH: Int = 1106

val ERROR_DEVICE_NOT_PARTITIONED: Int = 1107

val ERROR_UNABLE_TO_LOCK_MEDIA: Int = 1108

val ERROR_UNABLE_TO_UNLOAD_MEDIA: Int = 1109

val ERROR_MEDIA_CHANGED: Int = 1110

val ERROR_BUS_RESET: Int = 1111

val ERROR_NO_MEDIA_IN_DRIVE: Int = 1112

val ERROR_NO_UNICODE_TRANSLATION: Int = 1113

val ERROR_DLL_INIT_FAILED: Int = 1114

val ERROR_SHUTDOWN_IN_PROGRESS: Int = 1115

val ERROR_NO_SHUTDOWN_IN_PROGRESS: Int = 1116

val ERROR_IO_DEVICE: Int = 1117

val ERROR_SERIAL_NO_DEVICE: Int = 1118

val ERROR_IRQ_BUSY: Int = 1119

val ERROR_MORE_WRITES: Int = 1120

val ERROR_COUNTER_TIMEOUT: Int = 1121

val ERROR_FLOPPY_ID_MARK_NOT_FOUND: Int = 1122

val ERROR_FLOPPY_WRONG_CYLINDER: Int = 1123

val ERROR_FLOPPY_UNKNOWN_ERROR: Int = 1124

val ERROR_FLOPPY_BAD_REGISTERS: Int = 1125

val ERROR_DISK_RECALIBRATE_FAILED: Int = 1126

val ERROR_DISK_OPERATION_FAILED: Int = 1127

val ERROR_DISK_RESET_FAILED: Int = 1128

val ERROR_EOM_OVERFLOW: Int = 1129

val ERROR_NOT_ENOUGH_SERVER_MEMORY: Int = 1130

val ERROR_POSSIBLE_DEADLOCK: Int = 1131

val ERROR_MAPPED_ALIGNMENT: Int = 1132

val ERROR_SET_POWER_STATE_VETOED: Int = 1140

val ERROR_SET_POWER_STATE_FAILED: Int = 1141

val ERROR_TOO_MANY_LINKS: Int = 1142

val ERROR_OLD_WIN_VERSION: Int = 1150

val ERROR_APP_WRONG_OS: Int = 1151

val ERROR_SINGLE_INSTANCE_APP: Int = 1152

val ERROR_RMODE_APP: Int = 1153

val ERROR_INVALID_DLL: Int = 1154

val ERROR_NO_ASSOCIATION: Int = 1155

val ERROR_DDE_FAIL: Int = 1156

val ERROR_DLL_NOT_FOUND: Int = 1157

val ERROR_NO_MORE_USER_HANDLES: Int = 1158

val ERROR_MESSAGE_SYNC_ONLY: Int = 1159

val ERROR_SOURCE_ELEMENT_EMPTY: Int = 1160

val ERROR_DESTINATION_ELEMENT_FULL: Int = 1161

val ERROR_ILLEGAL_ELEMENT_ADDRESS: Int = 1162

val ERROR_MAGAZINE_NOT_PRESENT: Int = 1163

val ERROR_DEVICE_REINITIALIZATION_NEEDED: Int = 1164

val ERROR_DEVICE_REQUIRES_CLEANING: Int = 1165

val ERROR_DEVICE_DOOR_OPEN: Int = 1166

val ERROR_DEVICE_NOT_CONNECTED: Int = 1167

val ERROR_NOT_FOUND: Int = 1168

val ERROR_NO_MATCH: Int = 1169

val ERROR_SET_NOT_FOUND: Int = 1170

val ERROR_POINT_NOT_FOUND: Int = 1171

val ERROR_NO_TRACKING_SERVICE: Int = 1172

val ERROR_NO_VOLUME_ID: Int = 1173

val ERROR_UNABLE_TO_REMOVE_REPLACED: Int = 1175

val ERROR_UNABLE_TO_MOVE_REPLACEMENT: Int = 1176

val ERROR_UNABLE_TO_MOVE_REPLACEMENT_2: Int = 1177

val ERROR_JOURNAL_DELETE_IN_PROGRESS: Int = 1178

val ERROR_JOURNAL_NOT_ACTIVE: Int = 1179

val ERROR_POTENTIAL_FILE_FOUND: Int = 1180

val ERROR_JOURNAL_ENTRY_DELETED: Int = 1181

val ERROR_BAD_DEVICE: Int = 1200

val ERROR_CONNECTION_UNAVAIL: Int = 1201

val ERROR_DEVICE_ALREADY_REMEMBERED: Int = 1202

val ERROR_NO_NET_OR_BAD_PATH: Int = 1203

val ERROR_BAD_PROVIDER: Int = 1204

val ERROR_CANNOT_OPEN_PROFILE: Int = 1205

val ERROR_BAD_PROFILE: Int = 1206

val ERROR_NOT_CONTAINER: Int = 1207

val ERROR_EXTENDED_ERROR: Int = 1208

val ERROR_INVALID_GROUPNAME: Int = 1209

val ERROR_INVALID_COMPUTERNAME: Int = 1210

val ERROR_INVALID_EVENTNAME: Int = 1211

val ERROR_INVALID_DOMAINNAME: Int = 1212

val ERROR_INVALID_SERVICENAME: Int = 1213

val ERROR_INVALID_NETNAME: Int = 1214

val ERROR_INVALID_SHARENAME: Int = 1215

val ERROR_INVALID_PASSWORDNAME: Int = 1216

val ERROR_INVALID_MESSAGENAME: Int = 1217

val ERROR_INVALID_MESSAGEDEST: Int = 1218

val ERROR_SESSION_CREDENTIAL_CONFLICT: Int = 1219

val ERROR_REMOTE_SESSION_LIMIT_EXCEEDED: Int = 1220

val ERROR_DUP_DOMAINNAME: Int = 1221

val ERROR_NO_NETWORK: Int = 1222

val ERROR_CANCELLED: Int = 1223

val ERROR_USER_MAPPED_FILE: Int = 1224

val ERROR_CONNECTION_REFUSED: Int = 1225

val ERROR_GRACEFUL_DISCONNECT: Int = 1226

val ERROR_ADDRESS_ALREADY_ASSOCIATED: Int = 1227

val ERROR_ADDRESS_NOT_ASSOCIATED: Int = 1228

val ERROR_CONNECTION_INVALID: Int = 1229

val ERROR_CONNECTION_ACTIVE: Int = 1230

val ERROR_NETWORK_UNREACHABLE: Int = 1231

val ERROR_HOST_UNREACHABLE: Int = 1232

val ERROR_PROTOCOL_UNREACHABLE: Int = 1233

val ERROR_PORT_UNREACHABLE: Int = 1234

val ERROR_REQUEST_ABORTED: Int = 1235

val ERROR_CONNECTION_ABORTED: Int = 1236

val ERROR_RETRY: Int = 1237

val ERROR_CONNECTION_COUNT_LIMIT: Int = 1238

val ERROR_LOGIN_TIME_RESTRICTION: Int = 1239

val ERROR_LOGIN_WKSTA_RESTRICTION: Int = 1240

val ERROR_INCORRECT_ADDRESS: Int = 1241

val ERROR_ALREADY_REGISTERED: Int = 1242

val ERROR_SERVICE_NOT_FOUND: Int = 1243

val ERROR_NOT_AUTHENTICATED: Int = 1244

val ERROR_NOT_LOGGED_ON: Int = 1245

val ERROR_CONTINUE: Int = 1246

val ERROR_ALREADY_INITIALIZED: Int = 1247

val ERROR_NO_MORE_DEVICES: Int = 1248

val ERROR_NO_SUCH_SITE: Int = 1249

val ERROR_DOMAIN_CONTROLLER_EXISTS: Int = 1250

val ERROR_ONLY_IF_CONNECTED: Int = 1251

val ERROR_OVERRIDE_NOCHANGES: Int = 1252

val ERROR_BAD_USER_PROFILE: Int = 1253

val ERROR_NOT_SUPPORTED_ON_SBS: Int = 1254

val ERROR_SERVER_SHUTDOWN_IN_PROGRESS: Int = 1255

val ERROR_HOST_DOWN: Int = 1256

val ERROR_NON_ACCOUNT_SID: Int = 1257

val ERROR_NON_DOMAIN_SID: Int = 1258

val ERROR_APPHELP_BLOCK: Int = 1259

val ERROR_ACCESS_DISABLED_BY_POLICY: Int = 1260

val ERROR_REG_NAT_CONSUMPTION: Int = 1261

val ERROR_CSCSHARE_OFFLINE: Int = 1262

val ERROR_PKINIT_FAILURE: Int = 1263

val ERROR_SMARTCARD_SUBSYSTEM_FAILURE: Int = 1264

val ERROR_DOWNGRADE_DETECTED: Int = 1265

val ERROR_MACHINE_LOCKED: Int = 1271

val ERROR_CALLBACK_SUPPLIED_INVALID_DATA: Int = 1273

val ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED: Int = 1274

val ERROR_DRIVER_BLOCKED: Int = 1275

val ERROR_INVALID_IMPORT_OF_NON_DLL: Int = 1276

val ERROR_ACCESS_DISABLED_WEBBLADE: Int = 1277

val ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER: Int = 1278

val ERROR_RECOVERY_FAILURE: Int = 1279

val ERROR_ALREADY_FIBER: Int = 1280

val ERROR_ALREADY_THREAD: Int = 1281

val ERROR_STACK_BUFFER_OVERRUN: Int = 1282

val ERROR_PARAMETER_QUOTA_EXCEEDED: Int = 1283

val ERROR_DEBUGGER_INACTIVE: Int = 1284

val ERROR_DELAY_LOAD_FAILED: Int = 1285

val ERROR_VDM_DISALLOWED: Int = 1286

val ERROR_UNIDENTIFIED_ERROR: Int = 1287

val ERROR_NOT_ALL_ASSIGNED: Int = 1300

val ERROR_SOME_NOT_MAPPED: Int = 1301

val ERROR_NO_QUOTAS_FOR_ACCOUNT: Int = 1302

val ERROR_LOCAL_USER_SESSION_KEY: Int = 1303

val ERROR_NULL_LM_PASSWORD: Int = 1304

val ERROR_UNKNOWN_REVISION: Int = 1305

val ERROR_REVISION_MISMATCH: Int = 1306

val ERROR_INVALID_OWNER: Int = 1307

val ERROR_INVALID_PRIMARY_GROUP: Int = 1308

val ERROR_NO_IMPERSONATION_TOKEN: Int = 1309

val ERROR_CANT_DISABLE_MANDATORY: Int = 1310

val ERROR_NO_LOGON_SERVERS: Int = 1311

val ERROR_NO_SUCH_LOGON_SESSION: Int = 1312

val ERROR_NO_SUCH_PRIVILEGE: Int = 1313

val ERROR_PRIVILEGE_NOT_HELD: Int = 1314

val ERROR_INVALID_ACCOUNT_NAME: Int = 1315

val ERROR_USER_EXISTS: Int = 1316

val ERROR_NO_SUCH_USER: Int = 1317

val ERROR_GROUP_EXISTS: Int = 1318

val ERROR_NO_SUCH_GROUP: Int = 1319

val ERROR_MEMBER_IN_GROUP: Int = 1320

val ERROR_MEMBER_NOT_IN_GROUP: Int = 1321

val ERROR_LAST_ADMIN: Int = 1322

val ERROR_WRONG_PASSWORD: Int = 1323

val ERROR_ILL_FORMED_PASSWORD: Int = 1324

val ERROR_PASSWORD_RESTRICTION: Int = 1325

val ERROR_LOGON_FAILURE: Int = 1326

val ERROR_ACCOUNT_RESTRICTION: Int = 1327

val ERROR_INVALID_LOGON_HOURS: Int = 1328

val ERROR_INVALID_WORKSTATION: Int = 1329

val ERROR_PASSWORD_EXPIRED: Int = 1330

val ERROR_ACCOUNT_DISABLED: Int = 1331

val ERROR_NONE_MAPPED: Int = 1332

val ERROR_TOO_MANY_LUIDS_REQUESTED: Int = 1333

val ERROR_LUIDS_EXHAUSTED: Int = 1334

val ERROR_INVALID_SUB_AUTHORITY: Int = 1335

val ERROR_INVALID_ACL: Int = 1336

val ERROR_INVALID_SID: Int = 1337

val ERROR_INVALID_SECURITY_DESCR: Int = 1338

val ERROR_BAD_INHERITANCE_ACL: Int = 1340

val ERROR_SERVER_DISABLED: Int = 1341

val ERROR_SERVER_NOT_DISABLED: Int = 1342

val ERROR_INVALID_ID_AUTHORITY: Int = 1343

val ERROR_ALLOTTED_SPACE_EXCEEDED: Int = 1344

val ERROR_INVALID_GROUP_ATTRIBUTES: Int = 1345

val ERROR_BAD_IMPERSONATION_LEVEL: Int = 1346

val ERROR_CANT_OPEN_ANONYMOUS: Int = 1347

val ERROR_BAD_VALIDATION_CLASS: Int = 1348

val ERROR_BAD_TOKEN_TYPE: Int = 1349

val ERROR_NO_SECURITY_ON_OBJECT: Int = 1350

val ERROR_CANT_ACCESS_DOMAIN_INFO: Int = 1351

val ERROR_INVALID_SERVER_STATE: Int = 1352

val ERROR_INVALID_DOMAIN_STATE: Int = 1353

val ERROR_INVALID_DOMAIN_ROLE: Int = 1354

val ERROR_NO_SUCH_DOMAIN: Int = 1355

val ERROR_DOMAIN_EXISTS: Int = 1356

val ERROR_DOMAIN_LIMIT_EXCEEDED: Int = 1357

val ERROR_INTERNAL_DB_CORRUPTION: Int = 1358

val ERROR_INTERNAL_ERROR: Int = 1359

val ERROR_GENERIC_NOT_MAPPED: Int = 1360

val ERROR_BAD_DESCRIPTOR_FORMAT: Int = 1361

val ERROR_NOT_LOGON_PROCESS: Int = 1362

val ERROR_LOGON_SESSION_EXISTS: Int = 1363

val ERROR_NO_SUCH_PACKAGE: Int = 1364

val ERROR_BAD_LOGON_SESSION_STATE: Int = 1365

val ERROR_LOGON_SESSION_COLLISION: Int = 1366

val ERROR_INVALID_LOGON_TYPE: Int = 1367

val ERROR_CANNOT_IMPERSONATE: Int = 1368

val ERROR_RXACT_INVALID_STATE: Int = 1369

val ERROR_RXACT_COMMIT_FAILURE: Int = 1370

val ERROR_SPECIAL_ACCOUNT: Int = 1371

val ERROR_SPECIAL_GROUP: Int = 1372

val ERROR_SPECIAL_USER: Int = 1373

val ERROR_MEMBERS_PRIMARY_GROUP: Int = 1374

val ERROR_TOKEN_ALREADY_IN_USE: Int = 1375

val ERROR_NO_SUCH_ALIAS: Int = 1376

val ERROR_MEMBER_NOT_IN_ALIAS: Int = 1377

val ERROR_MEMBER_IN_ALIAS: Int = 1378

val ERROR_ALIAS_EXISTS: Int = 1379

val ERROR_LOGON_NOT_GRANTED: Int = 1380

val ERROR_TOO_MANY_SECRETS: Int = 1381

val ERROR_SECRET_TOO_LONG: Int = 1382

val ERROR_INTERNAL_DB_ERROR: Int = 1383

val ERROR_TOO_MANY_CONTEXT_IDS: Int = 1384

val ERROR_LOGON_TYPE_NOT_GRANTED: Int = 1385

val ERROR_NT_CROSS_ENCRYPTION_REQUIRED: Int = 1386

val ERROR_NO_SUCH_MEMBER: Int = 1387

val ERROR_INVALID_MEMBER: Int = 1388

val ERROR_TOO_MANY_SIDS: Int = 1389

val ERROR_LM_CROSS_ENCRYPTION_REQUIRED: Int = 1390

val ERROR_NO_INHERITANCE: Int = 1391

val ERROR_FILE_CORRUPT: Int = 1392

val ERROR_DISK_CORRUPT: Int = 1393

val ERROR_NO_USER_SESSION_KEY: Int = 1394

val ERROR_LICENSE_QUOTA_EXCEEDED: Int = 1395

val ERROR_WRONG_TARGET_NAME: Int = 1396

val ERROR_MUTUAL_AUTH_FAILED: Int = 1397

val ERROR_TIME_SKEW: Int = 1398

val ERROR_CURRENT_DOMAIN_NOT_ALLOWED: Int = 1399

val ERROR_INVALID_WINDOW_HANDLE: Int = 1400

val ERROR_INVALID_MENU_HANDLE: Int = 1401

val ERROR_INVALID_CURSOR_HANDLE: Int = 1402

val ERROR_INVALID_ACCEL_HANDLE: Int = 1403

val ERROR_INVALID_HOOK_HANDLE: Int = 1404

val ERROR_INVALID_DWP_HANDLE: Int = 1405

val ERROR_TLW_WITH_WSCHILD: Int = 1406

val ERROR_CANNOT_FIND_WND_CLASS: Int = 1407

val ERROR_WINDOW_OF_OTHER_THREAD: Int = 1408

val ERROR_HOTKEY_ALREADY_REGISTERED: Int = 1409

val ERROR_CLASS_ALREADY_EXISTS: Int = 1410

val ERROR_CLASS_DOES_NOT_EXIST: Int = 1411

val ERROR_CLASS_HAS_WINDOWS: Int = 1412

val ERROR_INVALID_INDEX: Int = 1413

val ERROR_INVALID_ICON_HANDLE: Int = 1414

val ERROR_PRIVATE_DIALOG_INDEX: Int = 1415

val ERROR_LISTBOX_ID_NOT_FOUND: Int = 1416

val ERROR_NO_WILDCARD_CHARACTERS: Int = 1417

val ERROR_CLIPBOARD_NOT_OPEN: Int = 1418

val ERROR_HOTKEY_NOT_REGISTERED: Int = 1419

val ERROR_WINDOW_NOT_DIALOG: Int = 1420

val ERROR_CONTROL_ID_NOT_FOUND: Int = 1421

val ERROR_INVALID_COMBOBOX_MESSAGE: Int = 1422

val ERROR_WINDOW_NOT_COMBOBOX: Int = 1423

val ERROR_INVALID_EDIT_HEIGHT: Int = 1424

val ERROR_DC_NOT_FOUND: Int = 1425

val ERROR_INVALID_HOOK_FILTER: Int = 1426

val ERROR_INVALID_FILTER_PROC: Int = 1427

val ERROR_HOOK_NEEDS_HMOD: Int = 1428

val ERROR_GLOBAL_ONLY_HOOK: Int = 1429

val ERROR_JOURNAL_HOOK_SET: Int = 1430

val ERROR_HOOK_NOT_INSTALLED: Int = 1431

val ERROR_INVALID_LB_MESSAGE: Int = 1432

val ERROR_SETCOUNT_ON_BAD_LB: Int = 1433

val ERROR_LB_WITHOUT_TABSTOPS: Int = 1434

val ERROR_DESTROY_OBJECT_OF_OTHER_THREAD: Int = 1435

val ERROR_CHILD_WINDOW_MENU: Int = 1436

val ERROR_NO_SYSTEM_MENU: Int = 1437

val ERROR_INVALID_MSGBOX_STYLE: Int = 1438

val ERROR_INVALID_SPI_VALUE: Int = 1439

val ERROR_SCREEN_ALREADY_LOCKED: Int = 1440

val ERROR_HWNDS_HAVE_DIFF_PARENT: Int = 1441

val ERROR_NOT_CHILD_WINDOW: Int = 1442

val ERROR_INVALID_GW_COMMAND: Int = 1443

val ERROR_INVALID_THREAD_ID: Int = 1444

val ERROR_NON_MDICHILD_WINDOW: Int = 1445

val ERROR_POPUP_ALREADY_ACTIVE: Int = 1446

val ERROR_NO_SCROLLBARS: Int = 1447

val ERROR_INVALID_SCROLLBAR_RANGE: Int = 1448

val ERROR_INVALID_SHOWWIN_COMMAND: Int = 1449

val ERROR_NO_SYSTEM_RESOURCES: Int = 1450

val ERROR_NONPAGED_SYSTEM_RESOURCES: Int = 1451

val ERROR_PAGED_SYSTEM_RESOURCES: Int = 1452

val ERROR_WORKING_SET_QUOTA: Int = 1453

val ERROR_PAGEFILE_QUOTA: Int = 1454

val ERROR_COMMITMENT_LIMIT: Int = 1455

val ERROR_MENU_ITEM_NOT_FOUND: Int = 1456

val ERROR_INVALID_KEYBOARD_HANDLE: Int = 1457

val ERROR_HOOK_TYPE_NOT_ALLOWED: Int = 1458

val ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION: Int = 1459

val ERROR_TIMEOUT: Int = 1460

val ERROR_INVALID_MONITOR_HANDLE: Int = 1461

val ERROR_INCORRECT_SIZE: Int = 1462

val ERROR_EVENTLOG_FILE_CORRUPT: Int = 1500

val ERROR_EVENTLOG_CANT_START: Int = 1501

val ERROR_LOG_FILE_FULL: Int = 1502

val ERROR_EVENTLOG_FILE_CHANGED: Int = 1503

val ERROR_INSTALL_SERVICE_FAILURE: Int = 1601

val ERROR_INSTALL_USEREXIT: Int = 1602

val ERROR_INSTALL_FAILURE: Int = 1603

val ERROR_INSTALL_SUSPEND: Int = 1604

val ERROR_UNKNOWN_PRODUCT: Int = 1605

val ERROR_UNKNOWN_FEATURE: Int = 1606

val ERROR_UNKNOWN_COMPONENT: Int = 1607

val ERROR_UNKNOWN_PROPERTY: Int = 1608

val ERROR_INVALID_HANDLE_STATE: Int = 1609

val ERROR_BAD_CONFIGURATION: Int = 1610

val ERROR_INDEX_ABSENT: Int = 1611

val ERROR_INSTALL_SOURCE_ABSENT: Int = 1612

val ERROR_INSTALL_PACKAGE_VERSION: Int = 1613

val ERROR_PRODUCT_UNINSTALLED: Int = 1614

val ERROR_BAD_QUERY_SYNTAX: Int = 1615

val ERROR_INVALID_FIELD: Int = 1616

val ERROR_DEVICE_REMOVED: Int = 1617

val ERROR_INSTALL_ALREADY_RUNNING: Int = 1618

val ERROR_INSTALL_PACKAGE_OPEN_FAILED: Int = 1619

val ERROR_INSTALL_PACKAGE_INVALID: Int = 1620

val ERROR_INSTALL_UI_FAILURE: Int = 1621

val ERROR_INSTALL_LOG_FAILURE: Int = 1622

val ERROR_INSTALL_LANGUAGE_UNSUPPORTED: Int = 1623

val ERROR_INSTALL_TRANSFORM_FAILURE: Int = 1624

val ERROR_INSTALL_PACKAGE_REJECTED: Int = 1625

val ERROR_FUNCTION_NOT_CALLED: Int = 1626

val ERROR_FUNCTION_FAILED: Int = 1627

val ERROR_INVALID_TABLE: Int = 1628

val ERROR_DATATYPE_MISMATCH: Int = 1629

val ERROR_UNSUPPORTED_TYPE: Int = 1630

val ERROR_CREATE_FAILED: Int = 1631

val ERROR_INSTALL_TEMP_UNWRITABLE: Int = 1632

val ERROR_INSTALL_PLATFORM_UNSUPPORTED: Int = 1633

val ERROR_INSTALL_NOTUSED: Int = 1634

val ERROR_PATCH_PACKAGE_OPEN_FAILED: Int = 1635

val ERROR_PATCH_PACKAGE_INVALID: Int = 1636

val ERROR_PATCH_PACKAGE_UNSUPPORTED: Int = 1637

val ERROR_PRODUCT_VERSION: Int = 1638

val ERROR_INVALID_COMMAND_LINE: Int = 1639

val ERROR_INSTALL_REMOTE_DISALLOWED: Int = 1640

val ERROR_SUCCESS_REBOOT_INITIATED: Int = 1641

val ERROR_PATCH_TARGET_NOT_FOUND: Int = 1642

val ERROR_PATCH_PACKAGE_REJECTED: Int = 1643

val ERROR_INSTALL_TRANSFORM_REJECTED: Int = 1644

val ERROR_INSTALL_REMOTE_PROHIBITED: Int = 1645

val RPC_S_INVALID_STRING_BINDING: Int = 1700

val RPC_S_WRONG_KIND_OF_BINDING: Int = 1701

val RPC_S_INVALID_BINDING: Int = 1702

val RPC_S_PROTSEQ_NOT_SUPPORTED: Int = 1703

val RPC_S_INVALID_RPC_PROTSEQ: Int = 1704

val RPC_S_INVALID_STRING_UUID: Int = 1705

val RPC_S_INVALID_ENDPOINT_FORMAT: Int = 1706

val RPC_S_INVALID_NET_ADDR: Int = 1707

val RPC_S_NO_ENDPOINT_FOUND: Int = 1708

val RPC_S_INVALID_TIMEOUT: Int = 1709

val RPC_S_OBJECT_NOT_FOUND: Int = 1710

val RPC_S_ALREADY_REGISTERED: Int = 1711

val RPC_S_TYPE_ALREADY_REGISTERED: Int = 1712

val RPC_S_ALREADY_LISTENING: Int = 1713

val RPC_S_NO_PROTSEQS_REGISTERED: Int = 1714

val RPC_S_NOT_LISTENING: Int = 1715

val RPC_S_UNKNOWN_MGR_TYPE: Int = 1716

val RPC_S_UNKNOWN_IF: Int = 1717

val RPC_S_NO_BINDINGS: Int = 1718

val RPC_S_NO_PROTSEQS: Int = 1719

val RPC_S_CANT_CREATE_ENDPOINT: Int = 1720

val RPC_S_OUT_OF_RESOURCES: Int = 1721

val RPC_S_SERVER_UNAVAILABLE: Int = 1722

val RPC_S_SERVER_TOO_BUSY: Int = 1723

val RPC_S_INVALID_NETWORK_OPTIONS: Int = 1724

val RPC_S_NO_CALL_ACTIVE: Int = 1725

val RPC_S_CALL_FAILED: Int = 1726

val RPC_S_CALL_FAILED_DNE: Int = 1727

val RPC_S_PROTOCOL_ERROR: Int = 1728

val RPC_S_UNSUPPORTED_TRANS_SYN: Int = 1730

val RPC_S_UNSUPPORTED_TYPE: Int = 1732

val RPC_S_INVALID_TAG: Int = 1733

val RPC_S_INVALID_BOUND: Int = 1734

val RPC_S_NO_ENTRY_NAME: Int = 1735

val RPC_S_INVALID_NAME_SYNTAX: Int = 1736

val RPC_S_UNSUPPORTED_NAME_SYNTAX: Int = 1737

val RPC_S_UUID_NO_ADDRESS: Int = 1739

val RPC_S_DUPLICATE_ENDPOINT: Int = 1740

val RPC_S_UNKNOWN_AUTHN_TYPE: Int = 1741

val RPC_S_MAX_CALLS_TOO_SMALL: Int = 1742

val RPC_S_STRING_TOO_LONG: Int = 1743

val RPC_S_PROTSEQ_NOT_FOUND: Int = 1744

val RPC_S_PROCNUM_OUT_OF_RANGE: Int = 1745

val RPC_S_BINDING_HAS_NO_AUTH: Int = 1746

val RPC_S_UNKNOWN_AUTHN_SERVICE: Int = 1747

val RPC_S_UNKNOWN_AUTHN_LEVEL: Int = 1748

val RPC_S_INVALID_AUTH_IDENTITY: Int = 1749

val RPC_S_UNKNOWN_AUTHZ_SERVICE: Int = 1750

val EPT_S_INVALID_ENTRY: Int = 1751

val EPT_S_CANT_PERFORM_OP: Int = 1752

val EPT_S_NOT_REGISTERED: Int = 1753

val RPC_S_NOTHING_TO_EXPORT: Int = 1754

val RPC_S_INCOMPLETE_NAME: Int = 1755

val RPC_S_INVALID_VERS_OPTION: Int = 1756

val RPC_S_NO_MORE_MEMBERS: Int = 1757

val RPC_S_NOT_ALL_OBJS_UNEXPORTED: Int = 1758

val RPC_S_INTERFACE_NOT_FOUND: Int = 1759

val RPC_S_ENTRY_ALREADY_EXISTS: Int = 1760

val RPC_S_ENTRY_NOT_FOUND: Int = 1761

val RPC_S_NAME_SERVICE_UNAVAILABLE: Int = 1762

val RPC_S_INVALID_NAF_ID: Int = 1763

val RPC_S_CANNOT_SUPPORT: Int = 1764

val RPC_S_NO_CONTEXT_AVAILABLE: Int = 1765

val RPC_S_INTERNAL_ERROR: Int = 1766

val RPC_S_ZERO_DIVIDE: Int = 1767

val RPC_S_ADDRESS_ERROR: Int = 1768

val RPC_S_FP_DIV_ZERO: Int = 1769

val RPC_S_FP_UNDERFLOW: Int = 1770

val RPC_S_FP_OVERFLOW: Int = 1771

val RPC_X_NO_MORE_ENTRIES: Int = 1772

val RPC_X_SS_CHAR_TRANS_OPEN_FAIL: Int = 1773

val RPC_X_SS_CHAR_TRANS_SHORT_FILE: Int = 1774

val RPC_X_SS_IN_NULL_CONTEXT: Int = 1775

val RPC_X_SS_CONTEXT_DAMAGED: Int = 1777

val RPC_X_SS_HANDLES_MISMATCH: Int = 1778

val RPC_X_SS_CANNOT_GET_CALL_HANDLE: Int = 1779

val RPC_X_NULL_REF_POINTER: Int = 1780

val RPC_X_ENUM_VALUE_OUT_OF_RANGE: Int = 1781

val RPC_X_BYTE_COUNT_TOO_SMALL: Int = 1782

val RPC_X_BAD_STUB_DATA: Int = 1783

val ERROR_INVALID_USER_BUFFER: Int = 1784

val ERROR_UNRECOGNIZED_MEDIA: Int = 1785

val ERROR_NO_TRUST_LSA_SECRET: Int = 1786

val ERROR_NO_TRUST_SAM_ACCOUNT: Int = 1787

val ERROR_TRUSTED_DOMAIN_FAILURE: Int = 1788

val ERROR_TRUSTED_RELATIONSHIP_FAILURE: Int = 1789

val ERROR_TRUST_FAILURE: Int = 1790

val RPC_S_CALL_IN_PROGRESS: Int = 1791

val ERROR_NETLOGON_NOT_STARTED: Int = 1792

val ERROR_ACCOUNT_EXPIRED: Int = 1793

val ERROR_REDIRECTOR_HAS_OPEN_HANDLES: Int = 1794

val ERROR_PRINTER_DRIVER_ALREADY_INSTALLED: Int = 1795

val ERROR_UNKNOWN_PORT: Int = 1796

val ERROR_UNKNOWN_PRINTER_DRIVER: Int = 1797

val ERROR_UNKNOWN_PRINTPROCESSOR: Int = 1798

val ERROR_INVALID_SEPARATOR_FILE: Int = 1799

val ERROR_INVALID_PRIORITY: Int = 1800

val ERROR_INVALID_PRINTER_NAME: Int = 1801

val ERROR_PRINTER_ALREADY_EXISTS: Int = 1802

val ERROR_INVALID_PRINTER_COMMAND: Int = 1803

val ERROR_INVALID_DATATYPE: Int = 1804

val ERROR_INVALID_ENVIRONMENT: Int = 1805

val RPC_S_NO_MORE_BINDINGS: Int = 1806

val ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT: Int = 1807

val ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT: Int = 1808

val ERROR_NOLOGON_SERVER_TRUST_ACCOUNT: Int = 1809

val ERROR_DOMAIN_TRUST_INCONSISTENT: Int = 1810

val ERROR_SERVER_HAS_OPEN_HANDLES: Int = 1811

val ERROR_RESOURCE_DATA_NOT_FOUND: Int = 1812

val ERROR_RESOURCE_TYPE_NOT_FOUND: Int = 1813

val ERROR_RESOURCE_NAME_NOT_FOUND: Int = 1814

val ERROR_RESOURCE_LANG_NOT_FOUND: Int = 1815

val ERROR_NOT_ENOUGH_QUOTA: Int = 1816

val RPC_S_NO_INTERFACES: Int = 1817

val RPC_S_CALL_CANCELLED: Int = 1818

val RPC_S_BINDING_INCOMPLETE: Int = 1819

val RPC_S_COMM_FAILURE: Int = 1820

val RPC_S_UNSUPPORTED_AUTHN_LEVEL: Int = 1821

val RPC_S_NO_PRINC_NAME: Int = 1822

val RPC_S_NOT_RPC_ERROR: Int = 1823

val RPC_S_UUID_LOCAL_ONLY: Int = 1824

val RPC_S_SEC_PKG_ERROR: Int = 1825

val RPC_S_NOT_CANCELLED: Int = 1826

val RPC_X_INVALID_ES_ACTION: Int = 1827

val RPC_X_WRONG_ES_VERSION: Int = 1828

val RPC_X_WRONG_STUB_VERSION: Int = 1829

val RPC_X_INVALID_PIPE_OBJECT: Int = 1830

val RPC_X_WRONG_PIPE_ORDER: Int = 1831

val RPC_X_WRONG_PIPE_VERSION: Int = 1832

val RPC_S_GROUP_MEMBER_NOT_FOUND: Int = 1898

val EPT_S_CANT_CREATE: Int = 1899

val RPC_S_INVALID_OBJECT: Int = 1900

val ERROR_INVALID_TIME: Int = 1901

val ERROR_INVALID_FORM_NAME: Int = 1902

val ERROR_INVALID_FORM_SIZE: Int = 1903

val ERROR_ALREADY_WAITING: Int = 1904

val ERROR_PRINTER_DELETED: Int = 1905

val ERROR_INVALID_PRINTER_STATE: Int = 1906

val ERROR_PASSWORD_MUST_CHANGE: Int = 1907

val ERROR_DOMAIN_CONTROLLER_NOT_FOUND: Int = 1908

val ERROR_ACCOUNT_LOCKED_OUT: Int = 1909

val OR_INVALID_OXID: Int = 1910

val OR_INVALID_OID: Int = 1911

val OR_INVALID_SET: Int = 1912

val RPC_S_SEND_INCOMPLETE: Int = 1913

val RPC_S_INVALID_ASYNC_HANDLE: Int = 1914

val RPC_S_INVALID_ASYNC_CALL: Int = 1915

val RPC_X_PIPE_CLOSED: Int = 1916

val RPC_X_PIPE_DISCIPLINE_ERROR: Int = 1917

val RPC_X_PIPE_EMPTY: Int = 1918

val ERROR_NO_SITENAME: Int = 1919

val ERROR_CANT_ACCESS_FILE: Int = 1920

val ERROR_CANT_RESOLVE_FILENAME: Int = 1921

val RPC_S_ENTRY_TYPE_MISMATCH: Int = 1922

val RPC_S_NOT_ALL_OBJS_EXPORTED: Int = 1923

val RPC_S_INTERFACE_NOT_EXPORTED: Int = 1924

val RPC_S_PROFILE_NOT_ADDED: Int = 1925

val RPC_S_PRF_ELT_NOT_ADDED: Int = 1926

val RPC_S_PRF_ELT_NOT_REMOVED: Int = 1927

val RPC_S_GRP_ELT_NOT_ADDED: Int = 1928

val RPC_S_GRP_ELT_NOT_REMOVED: Int = 1929

val ERROR_KM_DRIVER_BLOCKED: Int = 1930

val ERROR_CONTEXT_EXPIRED: Int = 1931

val ERROR_PER_USER_TRUST_QUOTA_EXCEEDED: Int = 1932

val ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED: Int = 1933

val ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED: Int = 1934

val ERROR_AUTHENTICATION_FIREWALL_FAILED: Int = 1935

val ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED: Int = 1936

val ERROR_INVALID_PIXEL_FORMAT: Int = 2000

val ERROR_BAD_DRIVER: Int = 2001

val ERROR_INVALID_WINDOW_STYLE: Int = 2002

val ERROR_METAFILE_NOT_SUPPORTED: Int = 2003

val ERROR_TRANSFORM_NOT_SUPPORTED: Int = 2004

val ERROR_CLIPPING_NOT_SUPPORTED: Int = 2005

val ERROR_INVALID_CMM: Int = 2010

val ERROR_INVALID_PROFILE: Int = 2011

val ERROR_TAG_NOT_FOUND: Int = 2012

val ERROR_TAG_NOT_PRESENT: Int = 2013

val ERROR_DUPLICATE_TAG: Int = 2014

val ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE: Int = 2015

val ERROR_PROFILE_NOT_FOUND: Int = 2016

val ERROR_INVALID_COLORSPACE: Int = 2017

val ERROR_ICM_NOT_ENABLED: Int = 2018

val ERROR_DELETING_ICM_XFORM: Int = 2019

val ERROR_INVALID_TRANSFORM: Int = 2020

val ERROR_COLORSPACE_MISMATCH: Int = 2021

val ERROR_INVALID_COLORINDEX: Int = 2022

val ERROR_CONNECTED_OTHER_PASSWORD: Int = 2108

val ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT: Int = 2109

val ERROR_BAD_USERNAME: Int = 2202

val ERROR_NOT_CONNECTED: Int = 2250

val ERROR_OPEN_FILES: Int = 2401

val ERROR_ACTIVE_CONNECTIONS: Int = 2402

val ERROR_DEVICE_IN_USE: Int = 2404

val ERROR_UNKNOWN_PRINT_MONITOR: Int = 3000

val ERROR_PRINTER_DRIVER_IN_USE: Int = 3001

val ERROR_SPOOL_FILE_NOT_FOUND: Int = 3002

val ERROR_SPL_NO_STARTDOC: Int = 3003

val ERROR_SPL_NO_ADDJOB: Int = 3004

val ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED: Int = 3005

val ERROR_PRINT_MONITOR_ALREADY_INSTALLED: Int = 3006

val ERROR_INVALID_PRINT_MONITOR: Int = 3007

val ERROR_PRINT_MONITOR_IN_USE: Int = 3008

val ERROR_PRINTER_HAS_JOBS_QUEUED: Int = 3009

val ERROR_SUCCESS_REBOOT_REQUIRED: Int = 3010

val ERROR_SUCCESS_RESTART_REQUIRED: Int = 3011

val ERROR_PRINTER_NOT_FOUND: Int = 3012

val ERROR_PRINTER_DRIVER_WARNED: Int = 3013

val ERROR_PRINTER_DRIVER_BLOCKED: Int = 3014

val ERROR_WINS_INTERNAL: Int = 4000

val ERROR_CAN_NOT_DEL_LOCAL_WINS: Int = 4001

val ERROR_STATIC_INIT: Int = 4002

val ERROR_INC_BACKUP: Int = 4003

val ERROR_FULL_BACKUP: Int = 4004

val ERROR_REC_NON_EXISTENT: Int = 4005

val ERROR_RPL_NOT_ALLOWED: Int = 4006

val ERROR_DHCP_ADDRESS_CONFLICT: Int = 4100

val ERROR_WMI_GUID_NOT_FOUND: Int = 4200

val ERROR_WMI_INSTANCE_NOT_FOUND: Int = 4201

val ERROR_WMI_ITEMID_NOT_FOUND: Int = 4202

val ERROR_WMI_TRY_AGAIN: Int = 4203

val ERROR_WMI_DP_NOT_FOUND: Int = 4204

val ERROR_WMI_UNRESOLVED_INSTANCE_REF: Int = 4205

val ERROR_WMI_ALREADY_ENABLED: Int = 4206

val ERROR_WMI_GUID_DISCONNECTED: Int = 4207

val ERROR_WMI_SERVER_UNAVAILABLE: Int = 4208

val ERROR_WMI_DP_FAILED: Int = 4209

val ERROR_WMI_INVALID_MOF: Int = 4210

val ERROR_WMI_INVALID_REGINFO: Int = 4211

val ERROR_WMI_ALREADY_DISABLED: Int = 4212

val ERROR_WMI_READ_ONLY: Int = 4213

val ERROR_WMI_SET_FAILURE: Int = 4214

val ERROR_INVALID_MEDIA: Int = 4300

val ERROR_INVALID_LIBRARY: Int = 4301

val ERROR_INVALID_MEDIA_POOL: Int = 4302

val ERROR_DRIVE_MEDIA_MISMATCH: Int = 4303

val ERROR_MEDIA_OFFLINE: Int = 4304

val ERROR_LIBRARY_OFFLINE: Int = 4305

val ERROR_EMPTY: Int = 4306

val ERROR_NOT_EMPTY: Int = 4307

val ERROR_MEDIA_UNAVAILABLE: Int = 4308

val ERROR_RESOURCE_DISABLED: Int = 4309

val ERROR_INVALID_CLEANER: Int = 4310

val ERROR_UNABLE_TO_CLEAN: Int = 4311

val ERROR_OBJECT_NOT_FOUND: Int = 4312

val ERROR_DATABASE_FAILURE: Int = 4313

val ERROR_DATABASE_FULL: Int = 4314

val ERROR_MEDIA_INCOMPATIBLE: Int = 4315

val ERROR_RESOURCE_NOT_PRESENT: Int = 4316

val ERROR_INVALID_OPERATION: Int = 4317

val ERROR_MEDIA_NOT_AVAILABLE: Int = 4318

val ERROR_DEVICE_NOT_AVAILABLE: Int = 4319

val ERROR_REQUEST_REFUSED: Int = 4320

val ERROR_INVALID_DRIVE_OBJECT: Int = 4321

val ERROR_LIBRARY_FULL: Int = 4322

val ERROR_MEDIUM_NOT_ACCESSIBLE: Int = 4323

val ERROR_UNABLE_TO_LOAD_MEDIUM: Int = 4324

val ERROR_UNABLE_TO_INVENTORY_DRIVE: Int = 4325

val ERROR_UNABLE_TO_INVENTORY_SLOT: Int = 4326

val ERROR_UNABLE_TO_INVENTORY_TRANSPORT: Int = 4327

val ERROR_TRANSPORT_FULL: Int = 4328

val ERROR_CONTROLLING_IEPORT: Int = 4329

val ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA: Int = 4330

val ERROR_CLEANER_SLOT_SET: Int = 4331

val ERROR_CLEANER_SLOT_NOT_SET: Int = 4332

val ERROR_CLEANER_CARTRIDGE_SPENT: Int = 4333

val ERROR_UNEXPECTED_OMID: Int = 4334

val ERROR_CANT_DELETE_LAST_ITEM: Int = 4335

val ERROR_MESSAGE_EXCEEDS_MAX_SIZE: Int = 4336

val ERROR_VOLUME_CONTAINS_SYS_FILES: Int = 4337

val ERROR_INDIGENOUS_TYPE: Int = 4338

val ERROR_NO_SUPPORTING_DRIVES: Int = 4339

val ERROR_CLEANER_CARTRIDGE_INSTALLED: Int = 4340

val ERROR_IEPORT_FULL: Int = 4341

val ERROR_FILE_OFFLINE: Int = 4350

val ERROR_REMOTE_STORAGE_NOT_ACTIVE: Int = 4351

val ERROR_REMOTE_STORAGE_MEDIA_ERROR: Int = 4352

val ERROR_NOT_A_REPARSE_POINT: Int = 4390

val ERROR_REPARSE_ATTRIBUTE_CONFLICT: Int = 4391

val ERROR_INVALID_REPARSE_DATA: Int = 4392

val ERROR_REPARSE_TAG_INVALID: Int = 4393

val ERROR_REPARSE_TAG_MISMATCH: Int = 4394

val ERROR_VOLUME_NOT_SIS_ENABLED: Int = 4500

val ERROR_DEPENDENT_RESOURCE_EXISTS: Int = 5001

val ERROR_DEPENDENCY_NOT_FOUND: Int = 5002

val ERROR_DEPENDENCY_ALREADY_EXISTS: Int = 5003

val ERROR_RESOURCE_NOT_ONLINE: Int = 5004

val ERROR_HOST_NODE_NOT_AVAILABLE: Int = 5005

val ERROR_RESOURCE_NOT_AVAILABLE: Int = 5006

val ERROR_RESOURCE_NOT_FOUND: Int = 5007

val ERROR_SHUTDOWN_CLUSTER: Int = 5008

val ERROR_CANT_EVICT_ACTIVE_NODE: Int = 5009

val ERROR_OBJECT_ALREADY_EXISTS: Int = 5010

val ERROR_OBJECT_IN_LIST: Int = 5011

val ERROR_GROUP_NOT_AVAILABLE: Int = 5012

val ERROR_GROUP_NOT_FOUND: Int = 5013

val ERROR_GROUP_NOT_ONLINE: Int = 5014

val ERROR_HOST_NODE_NOT_RESOURCE_OWNER: Int = 5015

val ERROR_HOST_NODE_NOT_GROUP_OWNER: Int = 5016

val ERROR_RESMON_CREATE_FAILED: Int = 5017

val ERROR_RESMON_ONLINE_FAILED: Int = 5018

val ERROR_RESOURCE_ONLINE: Int = 5019

val ERROR_QUORUM_RESOURCE: Int = 5020

val ERROR_NOT_QUORUM_CAPABLE: Int = 5021

val ERROR_CLUSTER_SHUTTING_DOWN: Int = 5022

val ERROR_INVALID_STATE: Int = 5023

val ERROR_RESOURCE_PROPERTIES_STORED: Int = 5024

val ERROR_NOT_QUORUM_CLASS: Int = 5025

val ERROR_CORE_RESOURCE: Int = 5026

val ERROR_QUORUM_RESOURCE_ONLINE_FAILED: Int = 5027

val ERROR_QUORUMLOG_OPEN_FAILED: Int = 5028

val ERROR_CLUSTERLOG_CORRUPT: Int = 5029

val ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE: Int = 5030

val ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE: Int = 5031

val ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND: Int = 5032

val ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE: Int = 5033

val ERROR_QUORUM_OWNER_ALIVE: Int = 5034

val ERROR_NETWORK_NOT_AVAILABLE: Int = 5035

val ERROR_NODE_NOT_AVAILABLE: Int = 5036

val ERROR_ALL_NODES_NOT_AVAILABLE: Int = 5037

val ERROR_RESOURCE_FAILED: Int = 5038

val ERROR_CLUSTER_INVALID_NODE: Int = 5039

val ERROR_CLUSTER_NODE_EXISTS: Int = 5040

val ERROR_CLUSTER_JOIN_IN_PROGRESS: Int = 5041

val ERROR_CLUSTER_NODE_NOT_FOUND: Int = 5042

val ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND: Int = 5043

val ERROR_CLUSTER_NETWORK_EXISTS: Int = 5044

val ERROR_CLUSTER_NETWORK_NOT_FOUND: Int = 5045

val ERROR_CLUSTER_NETINTERFACE_EXISTS: Int = 5046

val ERROR_CLUSTER_NETINTERFACE_NOT_FOUND: Int = 5047

val ERROR_CLUSTER_INVALID_REQUEST: Int = 5048

val ERROR_CLUSTER_INVALID_NETWORK_PROVIDER: Int = 5049

val ERROR_CLUSTER_NODE_DOWN: Int = 5050

val ERROR_CLUSTER_NODE_UNREACHABLE: Int = 5051

val ERROR_CLUSTER_NODE_NOT_MEMBER: Int = 5052

val ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS: Int = 5053

val ERROR_CLUSTER_INVALID_NETWORK: Int = 5054

val ERROR_CLUSTER_NODE_UP: Int = 5056

val ERROR_CLUSTER_IPADDR_IN_USE: Int = 5057

val ERROR_CLUSTER_NODE_NOT_PAUSED: Int = 5058

val ERROR_CLUSTER_NO_SECURITY_CONTEXT: Int = 5059

val ERROR_CLUSTER_NETWORK_NOT_INTERNAL: Int = 5060

val ERROR_CLUSTER_NODE_ALREADY_UP: Int = 5061

val ERROR_CLUSTER_NODE_ALREADY_DOWN: Int = 5062

val ERROR_CLUSTER_NETWORK_ALREADY_ONLINE: Int = 5063

val ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE: Int = 5064

val ERROR_CLUSTER_NODE_ALREADY_MEMBER: Int = 5065

val ERROR_CLUSTER_LAST_INTERNAL_NETWORK: Int = 5066

val ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS: Int = 5067

val ERROR_INVALID_OPERATION_ON_QUORUM: Int = 5068

val ERROR_DEPENDENCY_NOT_ALLOWED: Int = 5069

val ERROR_CLUSTER_NODE_PAUSED: Int = 5070

val ERROR_NODE_CANT_HOST_RESOURCE: Int = 5071

val ERROR_CLUSTER_NODE_NOT_READY: Int = 5072

val ERROR_CLUSTER_NODE_SHUTTING_DOWN: Int = 5073

val ERROR_CLUSTER_JOIN_ABORTED: Int = 5074

val ERROR_CLUSTER_INCOMPATIBLE_VERSIONS: Int = 5075

val ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED: Int = 5076

val ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED: Int = 5077

val ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND: Int = 5078

val ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED: Int = 5079

val ERROR_CLUSTER_RESNAME_NOT_FOUND: Int = 5080

val ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED: Int = 5081

val ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST: Int = 5082

val ERROR_CLUSTER_DATABASE_SEQMISMATCH: Int = 5083

val ERROR_RESMON_INVALID_STATE: Int = 5084

val ERROR_CLUSTER_GUM_NOT_LOCKER: Int = 5085

val ERROR_QUORUM_DISK_NOT_FOUND: Int = 5086

val ERROR_DATABASE_BACKUP_CORRUPT: Int = 5087

val ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT: Int = 5088

val ERROR_RESOURCE_PROPERTY_UNCHANGEABLE: Int = 5089

val ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE: Int = 5890

val ERROR_CLUSTER_QUORUMLOG_NOT_FOUND: Int = 5891

val ERROR_CLUSTER_MEMBERSHIP_HALT: Int = 5892

val ERROR_CLUSTER_INSTANCE_ID_MISMATCH: Int = 5893

val ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP: Int = 5894

val ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH: Int = 5895

val ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP: Int = 5896

val ERROR_CLUSTER_PARAMETER_MISMATCH: Int = 5897

val ERROR_NODE_CANNOT_BE_CLUSTERED: Int = 5898

val ERROR_CLUSTER_WRONG_OS_VERSION: Int = 5899

val ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME: Int = 5900

val ERROR_CLUSCFG_ALREADY_COMMITTED: Int = 5901

val ERROR_CLUSCFG_ROLLBACK_FAILED: Int = 5902

val ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT: Int = 5903

val ERROR_CLUSTER_OLD_VERSION: Int = 5904

val ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME: Int = 5905

val ERROR_ENCRYPTION_FAILED: Int = 6000

val ERROR_DECRYPTION_FAILED: Int = 6001

val ERROR_FILE_ENCRYPTED: Int = 6002

val ERROR_NO_RECOVERY_POLICY: Int = 6003

val ERROR_NO_EFS: Int = 6004

val ERROR_WRONG_EFS: Int = 6005

val ERROR_NO_USER_KEYS: Int = 6006

val ERROR_FILE_NOT_ENCRYPTED: Int = 6007

val ERROR_NOT_EXPORT_FORMAT: Int = 6008

val ERROR_FILE_READ_ONLY: Int = 6009

val ERROR_DIR_EFS_DISALLOWED: Int = 6010

val ERROR_EFS_SERVER_NOT_TRUSTED: Int = 6011

val ERROR_BAD_RECOVERY_POLICY: Int = 6012

val ERROR_EFS_ALG_BLOB_TOO_BIG: Int = 6013

val ERROR_VOLUME_NOT_SUPPORT_EFS: Int = 6014

val ERROR_EFS_DISABLED: Int = 6015

val ERROR_EFS_VERSION_NOT_SUPPORT: Int = 6016

val ERROR_NO_BROWSER_SERVERS_FOUND: Int = 6118

val SCHED_E_SERVICE_NOT_LOCALSYSTEM: Int = 6200

val ERROR_CTX_WINSTATION_NAME_INVALID: Int = 7001

val ERROR_CTX_INVALID_PD: Int = 7002

val ERROR_CTX_PD_NOT_FOUND: Int = 7003

val ERROR_CTX_WD_NOT_FOUND: Int = 7004

val ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY: Int = 7005

val ERROR_CTX_SERVICE_NAME_COLLISION: Int = 7006

val ERROR_CTX_CLOSE_PENDING: Int = 7007

val ERROR_CTX_NO_OUTBUF: Int = 7008

val ERROR_CTX_MODEM_INF_NOT_FOUND: Int = 7009

val ERROR_CTX_INVALID_MODEMNAME: Int = 7010

val ERROR_CTX_MODEM_RESPONSE_ERROR: Int = 7011

val ERROR_CTX_MODEM_RESPONSE_TIMEOUT: Int = 7012

val ERROR_CTX_MODEM_RESPONSE_NO_CARRIER: Int = 7013

val ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE: Int = 7014

val ERROR_CTX_MODEM_RESPONSE_BUSY: Int = 7015

val ERROR_CTX_MODEM_RESPONSE_VOICE: Int = 7016

val ERROR_CTX_TD_ERROR: Int = 7017

val ERROR_CTX_WINSTATION_NOT_FOUND: Int = 7022

val ERROR_CTX_WINSTATION_ALREADY_EXISTS: Int = 7023

val ERROR_CTX_WINSTATION_BUSY: Int = 7024

val ERROR_CTX_BAD_VIDEO_MODE: Int = 7025

val ERROR_CTX_GRAPHICS_INVALID: Int = 7035

val ERROR_CTX_LOGON_DISABLED: Int = 7037

val ERROR_CTX_NOT_CONSOLE: Int = 7038

val ERROR_CTX_CLIENT_QUERY_TIMEOUT: Int = 7040

val ERROR_CTX_CONSOLE_DISCONNECT: Int = 7041

val ERROR_CTX_CONSOLE_CONNECT: Int = 7042

val ERROR_CTX_SHADOW_DENIED: Int = 7044

val ERROR_CTX_WINSTATION_ACCESS_DENIED: Int = 7045

val ERROR_CTX_INVALID_WD: Int = 7049

val ERROR_CTX_SHADOW_INVALID: Int = 7050

val ERROR_CTX_SHADOW_DISABLED: Int = 7051

val ERROR_CTX_CLIENT_LICENSE_IN_USE: Int = 7052

val ERROR_CTX_CLIENT_LICENSE_NOT_SET: Int = 7053

val ERROR_CTX_LICENSE_NOT_AVAILABLE: Int = 7054

val ERROR_CTX_LICENSE_CLIENT_INVALID: Int = 7055

val ERROR_CTX_LICENSE_EXPIRED: Int = 7056

val ERROR_CTX_SHADOW_NOT_RUNNING: Int = 7057

val ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE: Int = 7058

val ERROR_ACTIVATION_COUNT_EXCEEDED: Int = 7059

val FRS_ERR_INVALID_API_SEQUENCE: Int = 8001

val FRS_ERR_STARTING_SERVICE: Int = 8002

val FRS_ERR_STOPPING_SERVICE: Int = 8003

val FRS_ERR_INTERNAL_API: Int = 8004

val FRS_ERR_INTERNAL: Int = 8005

val FRS_ERR_SERVICE_COMM: Int = 8006

val FRS_ERR_INSUFFICIENT_PRIV: Int = 8007

val FRS_ERR_AUTHENTICATION: Int = 8008

val FRS_ERR_PARENT_INSUFFICIENT_PRIV: Int = 8009

val FRS_ERR_PARENT_AUTHENTICATION: Int = 8010

val FRS_ERR_CHILD_TO_PARENT_COMM: Int = 8011

val FRS_ERR_PARENT_TO_CHILD_COMM: Int = 8012

val FRS_ERR_SYSVOL_POPULATE: Int = 8013

val FRS_ERR_SYSVOL_POPULATE_TIMEOUT: Int = 8014

val FRS_ERR_SYSVOL_IS_BUSY: Int = 8015

val FRS_ERR_SYSVOL_DEMOTE: Int = 8016

val FRS_ERR_INVALID_SERVICE_PARAMETER: Int = 8017

val DS_S_SUCCESS: Int = 0

val ERROR_DS_NOT_INSTALLED: Int = 8200

val ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY: Int = 8201

val ERROR_DS_NO_ATTRIBUTE_OR_VALUE: Int = 8202

val ERROR_DS_INVALID_ATTRIBUTE_SYNTAX: Int = 8203

val ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED: Int = 8204

val ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS: Int = 8205

val ERROR_DS_BUSY: Int = 8206

val ERROR_DS_UNAVAILABLE: Int = 8207

val ERROR_DS_NO_RIDS_ALLOCATED: Int = 8208

val ERROR_DS_NO_MORE_RIDS: Int = 8209

val ERROR_DS_INCORRECT_ROLE_OWNER: Int = 8210

val ERROR_DS_RIDMGR_INIT_ERROR: Int = 8211

val ERROR_DS_OBJ_CLASS_VIOLATION: Int = 8212

val ERROR_DS_CANT_ON_NON_LEAF: Int = 8213

val ERROR_DS_CANT_ON_RDN: Int = 8214

val ERROR_DS_CANT_MOD_OBJ_CLASS: Int = 8215

val ERROR_DS_CROSS_DOM_MOVE_ERROR: Int = 8216

val ERROR_DS_GC_NOT_AVAILABLE: Int = 8217

val ERROR_SHARED_POLICY: Int = 8218

val ERROR_POLICY_OBJECT_NOT_FOUND: Int = 8219

val ERROR_POLICY_ONLY_IN_DS: Int = 8220

val ERROR_PROMOTION_ACTIVE: Int = 8221

val ERROR_NO_PROMOTION_ACTIVE: Int = 8222

val ERROR_DS_OPERATIONS_ERROR: Int = 8224

val ERROR_DS_PROTOCOL_ERROR: Int = 8225

val ERROR_DS_TIMELIMIT_EXCEEDED: Int = 8226

val ERROR_DS_SIZELIMIT_EXCEEDED: Int = 8227

val ERROR_DS_ADMIN_LIMIT_EXCEEDED: Int = 8228

val ERROR_DS_COMPARE_FALSE: Int = 8229

val ERROR_DS_COMPARE_TRUE: Int = 8230

val ERROR_DS_AUTH_METHOD_NOT_SUPPORTED: Int = 8231

val ERROR_DS_STRONG_AUTH_REQUIRED: Int = 8232

val ERROR_DS_INAPPROPRIATE_AUTH: Int = 8233

val ERROR_DS_AUTH_UNKNOWN: Int = 8234

val ERROR_DS_REFERRAL: Int = 8235

val ERROR_DS_UNAVAILABLE_CRIT_EXTENSION: Int = 8236

val ERROR_DS_CONFIDENTIALITY_REQUIRED: Int = 8237

val ERROR_DS_INAPPROPRIATE_MATCHING: Int = 8238

val ERROR_DS_CONSTRAINT_VIOLATION: Int = 8239

val ERROR_DS_NO_SUCH_OBJECT: Int = 8240

val ERROR_DS_ALIAS_PROBLEM: Int = 8241

val ERROR_DS_INVALID_DN_SYNTAX: Int = 8242

val ERROR_DS_IS_LEAF: Int = 8243

val ERROR_DS_ALIAS_DEREF_PROBLEM: Int = 8244

val ERROR_DS_UNWILLING_TO_PERFORM: Int = 8245

val ERROR_DS_LOOP_DETECT: Int = 8246

val ERROR_DS_NAMING_VIOLATION: Int = 8247

val ERROR_DS_OBJECT_RESULTS_TOO_LARGE: Int = 8248

val ERROR_DS_AFFECTS_MULTIPLE_DSAS: Int = 8249

val ERROR_DS_SERVER_DOWN: Int = 8250

val ERROR_DS_LOCAL_ERROR: Int = 8251

val ERROR_DS_ENCODING_ERROR: Int = 8252

val ERROR_DS_DECODING_ERROR: Int = 8253

val ERROR_DS_FILTER_UNKNOWN: Int = 8254

val ERROR_DS_PARAM_ERROR: Int = 8255

val ERROR_DS_NOT_SUPPORTED: Int = 8256

val ERROR_DS_NO_RESULTS_RETURNED: Int = 8257

val ERROR_DS_CONTROL_NOT_FOUND: Int = 8258

val ERROR_DS_CLIENT_LOOP: Int = 8259

val ERROR_DS_REFERRAL_LIMIT_EXCEEDED: Int = 8260

val ERROR_DS_SORT_CONTROL_MISSING: Int = 8261

val ERROR_DS_OFFSET_RANGE_ERROR: Int = 8262

val ERROR_DS_ROOT_MUST_BE_NC: Int = 8301

val ERROR_DS_ADD_REPLICA_INHIBITED: Int = 8302

val ERROR_DS_ATT_NOT_DEF_IN_SCHEMA: Int = 8303

val ERROR_DS_MAX_OBJ_SIZE_EXCEEDED: Int = 8304

val ERROR_DS_OBJ_STRING_NAME_EXISTS: Int = 8305

val ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA: Int = 8306

val ERROR_DS_RDN_DOESNT_MATCH_SCHEMA: Int = 8307

val ERROR_DS_NO_REQUESTED_ATTS_FOUND: Int = 8308

val ERROR_DS_USER_BUFFER_TO_SMALL: Int = 8309

val ERROR_DS_ATT_IS_NOT_ON_OBJ: Int = 8310

val ERROR_DS_ILLEGAL_MOD_OPERATION: Int = 8311

val ERROR_DS_OBJ_TOO_LARGE: Int = 8312

val ERROR_DS_BAD_INSTANCE_TYPE: Int = 8313

val ERROR_DS_MASTERDSA_REQUIRED: Int = 8314

val ERROR_DS_OBJECT_CLASS_REQUIRED: Int = 8315

val ERROR_DS_MISSING_REQUIRED_ATT: Int = 8316

val ERROR_DS_ATT_NOT_DEF_FOR_CLASS: Int = 8317

val ERROR_DS_ATT_ALREADY_EXISTS: Int = 8318

val ERROR_DS_CANT_ADD_ATT_VALUES: Int = 8320

val ERROR_DS_SINGLE_VALUE_CONSTRAINT: Int = 8321

val ERROR_DS_RANGE_CONSTRAINT: Int = 8322

val ERROR_DS_ATT_VAL_ALREADY_EXISTS: Int = 8323

val ERROR_DS_CANT_REM_MISSING_ATT: Int = 8324

val ERROR_DS_CANT_REM_MISSING_ATT_VAL: Int = 8325

val ERROR_DS_ROOT_CANT_BE_SUBREF: Int = 8326

val ERROR_DS_NO_CHAINING: Int = 8327

val ERROR_DS_NO_CHAINED_EVAL: Int = 8328

val ERROR_DS_NO_PARENT_OBJECT: Int = 8329

val ERROR_DS_PARENT_IS_AN_ALIAS: Int = 8330

val ERROR_DS_CANT_MIX_MASTER_AND_REPS: Int = 8331

val ERROR_DS_CHILDREN_EXIST: Int = 8332

val ERROR_DS_OBJ_NOT_FOUND: Int = 8333

val ERROR_DS_ALIASED_OBJ_MISSING: Int = 8334

val ERROR_DS_BAD_NAME_SYNTAX: Int = 8335

val ERROR_DS_ALIAS_POINTS_TO_ALIAS: Int = 8336

val ERROR_DS_CANT_DEREF_ALIAS: Int = 8337

val ERROR_DS_OUT_OF_SCOPE: Int = 8338

val ERROR_DS_OBJECT_BEING_REMOVED: Int = 8339

val ERROR_DS_CANT_DELETE_DSA_OBJ: Int = 8340

val ERROR_DS_GENERIC_ERROR: Int = 8341

val ERROR_DS_DSA_MUST_BE_INT_MASTER: Int = 8342

val ERROR_DS_CLASS_NOT_DSA: Int = 8343

val ERROR_DS_INSUFF_ACCESS_RIGHTS: Int = 8344

val ERROR_DS_ILLEGAL_SUPERIOR: Int = 8345

val ERROR_DS_ATTRIBUTE_OWNED_BY_SAM: Int = 8346

val ERROR_DS_NAME_TOO_MANY_PARTS: Int = 8347

val ERROR_DS_NAME_TOO_LONG: Int = 8348

val ERROR_DS_NAME_VALUE_TOO_LONG: Int = 8349

val ERROR_DS_NAME_UNPARSEABLE: Int = 8350

val ERROR_DS_NAME_TYPE_UNKNOWN: Int = 8351

val ERROR_DS_NOT_AN_OBJECT: Int = 8352

val ERROR_DS_SEC_DESC_TOO_SHORT: Int = 8353

val ERROR_DS_SEC_DESC_INVALID: Int = 8354

val ERROR_DS_NO_DELETED_NAME: Int = 8355

val ERROR_DS_SUBREF_MUST_HAVE_PARENT: Int = 8356

val ERROR_DS_NCNAME_MUST_BE_NC: Int = 8357

val ERROR_DS_CANT_ADD_SYSTEM_ONLY: Int = 8358

val ERROR_DS_CLASS_MUST_BE_CONCRETE: Int = 8359

val ERROR_DS_INVALID_DMD: Int = 8360

val ERROR_DS_OBJ_GUID_EXISTS: Int = 8361

val ERROR_DS_NOT_ON_BACKLINK: Int = 8362

val ERROR_DS_NO_CROSSREF_FOR_NC: Int = 8363

val ERROR_DS_SHUTTING_DOWN: Int = 8364

val ERROR_DS_UNKNOWN_OPERATION: Int = 8365

val ERROR_DS_INVALID_ROLE_OWNER: Int = 8366

val ERROR_DS_COULDNT_CONTACT_FSMO: Int = 8367

val ERROR_DS_CROSS_NC_DN_RENAME: Int = 8368

val ERROR_DS_CANT_MOD_SYSTEM_ONLY: Int = 8369

val ERROR_DS_REPLICATOR_ONLY: Int = 8370

val ERROR_DS_OBJ_CLASS_NOT_DEFINED: Int = 8371

val ERROR_DS_OBJ_CLASS_NOT_SUBCLASS: Int = 8372

val ERROR_DS_NAME_REFERENCE_INVALID: Int = 8373

val ERROR_DS_CROSS_REF_EXISTS: Int = 8374

val ERROR_DS_CANT_DEL_MASTER_CROSSREF: Int = 8375

val ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD: Int = 8376

val ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX: Int = 8377

val ERROR_DS_DUP_RDN: Int = 8378

val ERROR_DS_DUP_OID: Int = 8379

val ERROR_DS_DUP_MAPI_ID: Int = 8380

val ERROR_DS_DUP_SCHEMA_ID_GUID: Int = 8381

val ERROR_DS_DUP_LDAP_DISPLAY_NAME: Int = 8382

val ERROR_DS_SEMANTIC_ATT_TEST: Int = 8383

val ERROR_DS_SYNTAX_MISMATCH: Int = 8384

val ERROR_DS_EXISTS_IN_MUST_HAVE: Int = 8385

val ERROR_DS_EXISTS_IN_MAY_HAVE: Int = 8386

val ERROR_DS_NONEXISTENT_MAY_HAVE: Int = 8387

val ERROR_DS_NONEXISTENT_MUST_HAVE: Int = 8388

val ERROR_DS_AUX_CLS_TEST_FAIL: Int = 8389

val ERROR_DS_NONEXISTENT_POSS_SUP: Int = 8390

val ERROR_DS_SUB_CLS_TEST_FAIL: Int = 8391

val ERROR_DS_BAD_RDN_ATT_ID_SYNTAX: Int = 8392

val ERROR_DS_EXISTS_IN_AUX_CLS: Int = 8393

val ERROR_DS_EXISTS_IN_SUB_CLS: Int = 8394

val ERROR_DS_EXISTS_IN_POSS_SUP: Int = 8395

val ERROR_DS_RECALCSCHEMA_FAILED: Int = 8396

val ERROR_DS_TREE_DELETE_NOT_FINISHED: Int = 8397

val ERROR_DS_CANT_DELETE: Int = 8398

val ERROR_DS_ATT_SCHEMA_REQ_ID: Int = 8399

val ERROR_DS_BAD_ATT_SCHEMA_SYNTAX: Int = 8400

val ERROR_DS_CANT_CACHE_ATT: Int = 8401

val ERROR_DS_CANT_CACHE_CLASS: Int = 8402

val ERROR_DS_CANT_REMOVE_ATT_CACHE: Int = 8403

val ERROR_DS_CANT_REMOVE_CLASS_CACHE: Int = 8404

val ERROR_DS_CANT_RETRIEVE_DN: Int = 8405

val ERROR_DS_MISSING_SUPREF: Int = 8406

val ERROR_DS_CANT_RETRIEVE_INSTANCE: Int = 8407

val ERROR_DS_CODE_INCONSISTENCY: Int = 8408

val ERROR_DS_DATABASE_ERROR: Int = 8409

val ERROR_DS_GOVERNSID_MISSING: Int = 8410

val ERROR_DS_MISSING_EXPECTED_ATT: Int = 8411

val ERROR_DS_NCNAME_MISSING_CR_REF: Int = 8412

val ERROR_DS_SECURITY_CHECKING_ERROR: Int = 8413

val ERROR_DS_SCHEMA_NOT_LOADED: Int = 8414

val ERROR_DS_SCHEMA_ALLOC_FAILED: Int = 8415

val ERROR_DS_ATT_SCHEMA_REQ_SYNTAX: Int = 8416

val ERROR_DS_GCVERIFY_ERROR: Int = 8417

val ERROR_DS_DRA_SCHEMA_MISMATCH: Int = 8418

val ERROR_DS_CANT_FIND_DSA_OBJ: Int = 8419

val ERROR_DS_CANT_FIND_EXPECTED_NC: Int = 8420

val ERROR_DS_CANT_FIND_NC_IN_CACHE: Int = 8421

val ERROR_DS_CANT_RETRIEVE_CHILD: Int = 8422

val ERROR_DS_SECURITY_ILLEGAL_MODIFY: Int = 8423

val ERROR_DS_CANT_REPLACE_HIDDEN_REC: Int = 8424

val ERROR_DS_BAD_HIERARCHY_FILE: Int = 8425

val ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED: Int = 8426

val ERROR_DS_CONFIG_PARAM_MISSING: Int = 8427

val ERROR_DS_COUNTING_AB_INDICES_FAILED: Int = 8428

val ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED: Int = 8429

val ERROR_DS_INTERNAL_FAILURE: Int = 8430

val ERROR_DS_UNKNOWN_ERROR: Int = 8431

val ERROR_DS_ROOT_REQUIRES_CLASS_TOP: Int = 8432

val ERROR_DS_REFUSING_FSMO_ROLES: Int = 8433

val ERROR_DS_MISSING_FSMO_SETTINGS: Int = 8434

val ERROR_DS_UNABLE_TO_SURRENDER_ROLES: Int = 8435

val ERROR_DS_DRA_GENERIC: Int = 8436

val ERROR_DS_DRA_INVALID_PARAMETER: Int = 8437

val ERROR_DS_DRA_BUSY: Int = 8438

val ERROR_DS_DRA_BAD_DN: Int = 8439

val ERROR_DS_DRA_BAD_NC: Int = 8440

val ERROR_DS_DRA_DN_EXISTS: Int = 8441

val ERROR_DS_DRA_INTERNAL_ERROR: Int = 8442

val ERROR_DS_DRA_INCONSISTENT_DIT: Int = 8443

val ERROR_DS_DRA_CONNECTION_FAILED: Int = 8444

val ERROR_DS_DRA_BAD_INSTANCE_TYPE: Int = 8445

val ERROR_DS_DRA_OUT_OF_MEM: Int = 8446

val ERROR_DS_DRA_MAIL_PROBLEM: Int = 8447

val ERROR_DS_DRA_REF_ALREADY_EXISTS: Int = 8448

val ERROR_DS_DRA_REF_NOT_FOUND: Int = 8449

val ERROR_DS_DRA_OBJ_IS_REP_SOURCE: Int = 8450

val ERROR_DS_DRA_DB_ERROR: Int = 8451

val ERROR_DS_DRA_NO_REPLICA: Int = 8452

val ERROR_DS_DRA_ACCESS_DENIED: Int = 8453

val ERROR_DS_DRA_NOT_SUPPORTED: Int = 8454

val ERROR_DS_DRA_RPC_CANCELLED: Int = 8455

val ERROR_DS_DRA_SOURCE_DISABLED: Int = 8456

val ERROR_DS_DRA_SINK_DISABLED: Int = 8457

val ERROR_DS_DRA_NAME_COLLISION: Int = 8458

val ERROR_DS_DRA_SOURCE_REINSTALLED: Int = 8459

val ERROR_DS_DRA_MISSING_PARENT: Int = 8460

val ERROR_DS_DRA_PREEMPTED: Int = 8461

val ERROR_DS_DRA_ABANDON_SYNC: Int = 8462

val ERROR_DS_DRA_SHUTDOWN: Int = 8463

val ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET: Int = 8464

val ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA: Int = 8465

val ERROR_DS_DRA_EXTN_CONNECTION_FAILED: Int = 8466

val ERROR_DS_INSTALL_SCHEMA_MISMATCH: Int = 8467

val ERROR_DS_DUP_LINK_ID: Int = 8468

val ERROR_DS_NAME_ERROR_RESOLVING: Int = 8469

val ERROR_DS_NAME_ERROR_NOT_FOUND: Int = 8470

val ERROR_DS_NAME_ERROR_NOT_UNIQUE: Int = 8471

val ERROR_DS_NAME_ERROR_NO_MAPPING: Int = 8472

val ERROR_DS_NAME_ERROR_DOMAIN_ONLY: Int = 8473

val ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING: Int = 8474

val ERROR_DS_CONSTRUCTED_ATT_MOD: Int = 8475

val ERROR_DS_WRONG_OM_OBJ_CLASS: Int = 8476

val ERROR_DS_DRA_REPL_PENDING: Int = 8477

val ERROR_DS_DS_REQUIRED: Int = 8478

val ERROR_DS_INVALID_LDAP_DISPLAY_NAME: Int = 8479

val ERROR_DS_NON_BASE_SEARCH: Int = 8480

val ERROR_DS_CANT_RETRIEVE_ATTS: Int = 8481

val ERROR_DS_BACKLINK_WITHOUT_LINK: Int = 8482

val ERROR_DS_EPOCH_MISMATCH: Int = 8483

val ERROR_DS_SRC_NAME_MISMATCH: Int = 8484

val ERROR_DS_SRC_AND_DST_NC_IDENTICAL: Int = 8485

val ERROR_DS_DST_NC_MISMATCH: Int = 8486

val ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC: Int = 8487

val ERROR_DS_SRC_GUID_MISMATCH: Int = 8488

val ERROR_DS_CANT_MOVE_DELETED_OBJECT: Int = 8489

val ERROR_DS_PDC_OPERATION_IN_PROGRESS: Int = 8490

val ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD: Int = 8491

val ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION: Int = 8492

val ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS: Int = 8493

val ERROR_DS_NC_MUST_HAVE_NC_PARENT: Int = 8494

val ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE: Int = 8495

val ERROR_DS_DST_DOMAIN_NOT_NATIVE: Int = 8496

val ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER: Int = 8497

val ERROR_DS_CANT_MOVE_ACCOUNT_GROUP: Int = 8498

val ERROR_DS_CANT_MOVE_RESOURCE_GROUP: Int = 8499

val ERROR_DS_INVALID_SEARCH_FLAG: Int = 8500

val ERROR_DS_NO_TREE_DELETE_ABOVE_NC: Int = 8501

val ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE: Int = 8502

val ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE: Int = 8503

val ERROR_DS_SAM_INIT_FAILURE: Int = 8504

val ERROR_DS_SENSITIVE_GROUP_VIOLATION: Int = 8505

val ERROR_DS_CANT_MOD_PRIMARYGROUPID: Int = 8506

val ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD: Int = 8507

val ERROR_DS_NONSAFE_SCHEMA_CHANGE: Int = 8508

val ERROR_DS_SCHEMA_UPDATE_DISALLOWED: Int = 8509

val ERROR_DS_CANT_CREATE_UNDER_SCHEMA: Int = 8510

val ERROR_DS_INSTALL_NO_SRC_SCH_VERSION: Int = 8511

val ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE: Int = 8512

val ERROR_DS_INVALID_GROUP_TYPE: Int = 8513

val ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN: Int = 8514

val ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN: Int = 8515

val ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER: Int = 8516

val ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER: Int = 8517

val ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER: Int = 8518

val ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER: Int = 8519

val ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER: Int = 8520

val ERROR_DS_HAVE_PRIMARY_MEMBERS: Int = 8521

val ERROR_DS_STRING_SD_CONVERSION_FAILED: Int = 8522

val ERROR_DS_NAMING_MASTER_GC: Int = 8523

val ERROR_DS_DNS_LOOKUP_FAILURE: Int = 8524

val ERROR_DS_COULDNT_UPDATE_SPNS: Int = 8525

val ERROR_DS_CANT_RETRIEVE_SD: Int = 8526

val ERROR_DS_KEY_NOT_UNIQUE: Int = 8527

val ERROR_DS_WRONG_LINKED_ATT_SYNTAX: Int = 8528

val ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD: Int = 8529

val ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY: Int = 8530

val ERROR_DS_CANT_START: Int = 8531

val ERROR_DS_INIT_FAILURE: Int = 8532

val ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION: Int = 8533

val ERROR_DS_SOURCE_DOMAIN_IN_FOREST: Int = 8534

val ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST: Int = 8535

val ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED: Int = 8536

val ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN: Int = 8537

val ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER: Int = 8538

val ERROR_DS_SRC_SID_EXISTS_IN_FOREST: Int = 8539

val ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH: Int = 8540

val ERROR_SAM_INIT_FAILURE: Int = 8541

val ERROR_DS_DRA_SCHEMA_INFO_SHIP: Int = 8542

val ERROR_DS_DRA_SCHEMA_CONFLICT: Int = 8543

val ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT: Int = 8544

val ERROR_DS_DRA_OBJ_NC_MISMATCH: Int = 8545

val ERROR_DS_NC_STILL_HAS_DSAS: Int = 8546

val ERROR_DS_GC_REQUIRED: Int = 8547

val ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY: Int = 8548

val ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS: Int = 8549

val ERROR_DS_CANT_ADD_TO_GC: Int = 8550

val ERROR_DS_NO_CHECKPOINT_WITH_PDC: Int = 8551

val ERROR_DS_SOURCE_AUDITING_NOT_ENABLED: Int = 8552

val ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC: Int = 8553

val ERROR_DS_INVALID_NAME_FOR_SPN: Int = 8554

val ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS: Int = 8555

val ERROR_DS_UNICODEPWD_NOT_IN_QUOTES: Int = 8556

val ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED: Int = 8557

val ERROR_DS_MUST_BE_RUN_ON_DST_DC: Int = 8558

val ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER: Int = 8559

val ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ: Int = 8560

val ERROR_DS_INIT_FAILURE_CONSOLE: Int = 8561

val ERROR_DS_SAM_INIT_FAILURE_CONSOLE: Int = 8562

val ERROR_DS_FOREST_VERSION_TOO_HIGH: Int = 8563

val ERROR_DS_DOMAIN_VERSION_TOO_HIGH: Int = 8564

val ERROR_DS_FOREST_VERSION_TOO_LOW: Int = 8565

val ERROR_DS_DOMAIN_VERSION_TOO_LOW: Int = 8566

val ERROR_DS_INCOMPATIBLE_VERSION: Int = 8567

val ERROR_DS_LOW_DSA_VERSION: Int = 8568

val ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN: Int = 8569

val ERROR_DS_NOT_SUPPORTED_SORT_ORDER: Int = 8570

val ERROR_DS_NAME_NOT_UNIQUE: Int = 8571

val ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4: Int = 8572

val ERROR_DS_OUT_OF_VERSION_STORE: Int = 8573

val ERROR_DS_INCOMPATIBLE_CONTROLS_USED: Int = 8574

val ERROR_DS_NO_REF_DOMAIN: Int = 8575

val ERROR_DS_RESERVED_LINK_ID: Int = 8576

val ERROR_DS_LINK_ID_NOT_AVAILABLE: Int = 8577

val ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER: Int = 8578

val ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE: Int = 8579

val ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC: Int = 8580

val ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG: Int = 8581

val ERROR_DS_MODIFYDN_WRONG_GRANDPARENT: Int = 8582

val ERROR_DS_NAME_ERROR_TRUST_REFERRAL: Int = 8583

val ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER: Int = 8584

val ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD: Int = 8585

val ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2: Int = 8586

val ERROR_DS_THREAD_LIMIT_EXCEEDED: Int = 8587

val ERROR_DS_NOT_CLOSEST: Int = 8588

val ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF: Int = 8589

val ERROR_DS_SINGLE_USER_MODE_FAILED: Int = 8590

val ERROR_DS_NTDSCRIPT_SYNTAX_ERROR: Int = 8591

val ERROR_DS_NTDSCRIPT_PROCESS_ERROR: Int = 8592

val ERROR_DS_DIFFERENT_REPL_EPOCHS: Int = 8593

val ERROR_DS_DRS_EXTENSIONS_CHANGED: Int = 8594

val ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR: Int = 8595

val ERROR_DS_NO_MSDS_INTID: Int = 8596

val ERROR_DS_DUP_MSDS_INTID: Int = 8597

val ERROR_DS_EXISTS_IN_RDNATTID: Int = 8598

val ERROR_DS_AUTHORIZATION_FAILED: Int = 8599

val ERROR_DS_INVALID_SCRIPT: Int = 8600

val ERROR_DS_REMOTE_CROSSREF_OP_FAILED: Int = 8601

val ERROR_DS_CROSS_REF_BUSY: Int = 8602

val ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN: Int = 8603

val ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC: Int = 8604

val ERROR_DS_DUPLICATE_ID_FOUND: Int = 8605

val ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT: Int = 8606

val ERROR_DS_GROUP_CONVERSION_ERROR: Int = 8607

val ERROR_DS_CANT_MOVE_APP_BASIC_GROUP: Int = 8608

val ERROR_DS_CANT_MOVE_APP_QUERY_GROUP: Int = 8609

val ERROR_DS_ROLE_NOT_VERIFIED: Int = 8610

val ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL: Int = 8611

val ERROR_DS_DOMAIN_RENAME_IN_PROGRESS: Int = 8612

val ERROR_DS_EXISTING_AD_CHILD_NC: Int = 8613

val ERROR_DS_REPL_LIFETIME_EXCEEDED: Int = 8614

val ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER: Int = 8615

val ERROR_DS_LDAP_SEND_QUEUE_FULL: Int = 8616

val ERROR_DS_DRA_OUT_SCHEDULE_WINDOW: Int = 8617

val DNS_ERROR_RESPONSE_CODES_BASE: Int = 9000

val DNS_ERROR_RCODE_NO_ERROR: Int = 0

val DNS_ERROR_MASK: Int = 9000

val DNS_ERROR_RCODE_FORMAT_ERROR: Int = 9001

val DNS_ERROR_RCODE_SERVER_FAILURE: Int = 9002

val DNS_ERROR_RCODE_NAME_ERROR: Int = 9003

val DNS_ERROR_RCODE_NOT_IMPLEMENTED: Int = 9004

val DNS_ERROR_RCODE_REFUSED: Int = 9005

val DNS_ERROR_RCODE_YXDOMAIN: Int = 9006

val DNS_ERROR_RCODE_YXRRSET: Int = 9007

val DNS_ERROR_RCODE_NXRRSET: Int = 9008

val DNS_ERROR_RCODE_NOTAUTH: Int = 9009

val DNS_ERROR_RCODE_NOTZONE: Int = 9010

val DNS_ERROR_RCODE_BADSIG: Int = 9016

val DNS_ERROR_RCODE_BADKEY: Int = 9017

val DNS_ERROR_RCODE_BADTIME: Int = 9018

val DNS_ERROR_RCODE_LAST: Int = 9018

val DNS_ERROR_PACKET_FMT_BASE: Int = 9500

val DNS_INFO_NO_RECORDS: Int = 9501

val DNS_ERROR_BAD_PACKET: Int = 9502

val DNS_ERROR_NO_PACKET: Int = 9503

val DNS_ERROR_RCODE: Int = 9504

val DNS_ERROR_UNSECURE_PACKET: Int = 9505

val DNS_STATUS_PACKET_UNSECURE: Int = 9505

val DNS_ERROR_NO_MEMORY: Int = 14

val DNS_ERROR_INVALID_NAME: Int = 123

val DNS_ERROR_INVALID_DATA: Int = 13

val DNS_ERROR_GENERAL_API_BASE: Int = 9550

val DNS_ERROR_INVALID_TYPE: Int = 9551

val DNS_ERROR_INVALID_IP_ADDRESS: Int = 9552

val DNS_ERROR_INVALID_PROPERTY: Int = 9553

val DNS_ERROR_TRY_AGAIN_LATER: Int = 9554

val DNS_ERROR_NOT_UNIQUE: Int = 9555

val DNS_ERROR_NON_RFC_NAME: Int = 9556

val DNS_STATUS_FQDN: Int = 9557

val DNS_STATUS_DOTTED_NAME: Int = 9558

val DNS_STATUS_SINGLE_PART_NAME: Int = 9559

val DNS_ERROR_INVALID_NAME_CHAR: Int = 9560

val DNS_ERROR_NUMERIC_NAME: Int = 9561

val DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER: Int = 9562

val DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION: Int = 9563

val DNS_ERROR_CANNOT_FIND_ROOT_HINTS: Int = 9564

val DNS_ERROR_INCONSISTENT_ROOT_HINTS: Int = 9565

val DNS_ERROR_ZONE_BASE: Int = 9600

val DNS_ERROR_ZONE_DOES_NOT_EXIST: Int = 9601

val DNS_ERROR_NO_ZONE_INFO: Int = 9602

val DNS_ERROR_INVALID_ZONE_OPERATION: Int = 9603

val DNS_ERROR_ZONE_CONFIGURATION_ERROR: Int = 9604

val DNS_ERROR_ZONE_HAS_NO_SOA_RECORD: Int = 9605

val DNS_ERROR_ZONE_HAS_NO_NS_RECORDS: Int = 9606

val DNS_ERROR_ZONE_LOCKED: Int = 9607

val DNS_ERROR_ZONE_CREATION_FAILED: Int = 9608

val DNS_ERROR_ZONE_ALREADY_EXISTS: Int = 9609

val DNS_ERROR_AUTOZONE_ALREADY_EXISTS: Int = 9610

val DNS_ERROR_INVALID_ZONE_TYPE: Int = 9611

val DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP: Int = 9612

val DNS_ERROR_ZONE_NOT_SECONDARY: Int = 9613

val DNS_ERROR_NEED_SECONDARY_ADDRESSES: Int = 9614

val DNS_ERROR_WINS_INIT_FAILED: Int = 9615

val DNS_ERROR_NEED_WINS_SERVERS: Int = 9616

val DNS_ERROR_NBSTAT_INIT_FAILED: Int = 9617

val DNS_ERROR_SOA_DELETE_INVALID: Int = 9618

val DNS_ERROR_FORWARDER_ALREADY_EXISTS: Int = 9619

val DNS_ERROR_ZONE_REQUIRES_MASTER_IP: Int = 9620

val DNS_ERROR_ZONE_IS_SHUTDOWN: Int = 9621

val DNS_ERROR_DATAFILE_BASE: Int = 9650

val DNS_ERROR_PRIMARY_REQUIRES_DATAFILE: Int = 9651

val DNS_ERROR_INVALID_DATAFILE_NAME: Int = 9652

val DNS_ERROR_DATAFILE_OPEN_FAILURE: Int = 9653

val DNS_ERROR_FILE_WRITEBACK_FAILED: Int = 9654

val DNS_ERROR_DATAFILE_PARSING: Int = 9655

val DNS_ERROR_DATABASE_BASE: Int = 9700

val DNS_ERROR_RECORD_DOES_NOT_EXIST: Int = 9701

val DNS_ERROR_RECORD_FORMAT: Int = 9702

val DNS_ERROR_NODE_CREATION_FAILED: Int = 9703

val DNS_ERROR_UNKNOWN_RECORD_TYPE: Int = 9704

val DNS_ERROR_RECORD_TIMED_OUT: Int = 9705

val DNS_ERROR_NAME_NOT_IN_ZONE: Int = 9706

val DNS_ERROR_CNAME_LOOP: Int = 9707

val DNS_ERROR_NODE_IS_CNAME: Int = 9708

val DNS_ERROR_CNAME_COLLISION: Int = 9709

val DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT: Int = 9710

val DNS_ERROR_RECORD_ALREADY_EXISTS: Int = 9711

val DNS_ERROR_SECONDARY_DATA: Int = 9712

val DNS_ERROR_NO_CREATE_CACHE_DATA: Int = 9713

val DNS_ERROR_NAME_DOES_NOT_EXIST: Int = 9714

val DNS_WARNING_PTR_CREATE_FAILED: Int = 9715

val DNS_WARNING_DOMAIN_UNDELETED: Int = 9716

val DNS_ERROR_DS_UNAVAILABLE: Int = 9717

val DNS_ERROR_DS_ZONE_ALREADY_EXISTS: Int = 9718

val DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE: Int = 9719

val DNS_ERROR_OPERATION_BASE: Int = 9750

val DNS_INFO_AXFR_COMPLETE: Int = 9751

val DNS_ERROR_AXFR: Int = 9752

val DNS_INFO_ADDED_LOCAL_WINS: Int = 9753

val DNS_ERROR_SECURE_BASE: Int = 9800

val DNS_STATUS_CONTINUE_NEEDED: Int = 9801

val DNS_ERROR_SETUP_BASE: Int = 9850

val DNS_ERROR_NO_TCPIP: Int = 9851

val DNS_ERROR_NO_DNS_SERVERS: Int = 9852

val DNS_ERROR_DP_BASE: Int = 9900

val DNS_ERROR_DP_DOES_NOT_EXIST: Int = 9901

val DNS_ERROR_DP_ALREADY_EXISTS: Int = 9902

val DNS_ERROR_DP_NOT_ENLISTED: Int = 9903

val DNS_ERROR_DP_ALREADY_ENLISTED: Int = 9904

val DNS_ERROR_DP_NOT_AVAILABLE: Int = 9905

val DNS_ERROR_DP_FSMO_ERROR: Int = 9906

val WSABASEERR: Int = 10000

val WSAEINTR: Int = 10004

val WSAEBADF: Int = 10009

val WSAEACCES: Int = 10013

val WSAEFAULT: Int = 10014

val WSAEINVAL: Int = 10022

val WSAEMFILE: Int = 10024

val WSAEWOULDBLOCK: Int = 10035

val WSAEINPROGRESS: Int = 10036

val WSAEALREADY: Int = 10037

val WSAENOTSOCK: Int = 10038

val WSAEDESTADDRREQ: Int = 10039

val WSAEMSGSIZE: Int = 10040

val WSAEPROTOTYPE: Int = 10041

val WSAENOPROTOOPT: Int = 10042

val WSAEPROTONOSUPPORT: Int = 10043

val WSAESOCKTNOSUPPORT: Int = 10044

val WSAEOPNOTSUPP: Int = 10045

val WSAEPFNOSUPPORT: Int = 10046

val WSAEAFNOSUPPORT: Int = 10047

val WSAEADDRINUSE: Int = 10048

val WSAEADDRNOTAVAIL: Int = 10049

val WSAENETDOWN: Int = 10050

val WSAENETUNREACH: Int = 10051

val WSAENETRESET: Int = 10052

val WSAECONNABORTED: Int = 10053

val WSAECONNRESET: Int = 10054

val WSAENOBUFS: Int = 10055

val WSAEISCONN: Int = 10056

val WSAENOTCONN: Int = 10057

val WSAESHUTDOWN: Int = 10058

val WSAETOOMANYREFS: Int = 10059

val WSAETIMEDOUT: Int = 10060

val WSAECONNREFUSED: Int = 10061

val WSAELOOP: Int = 10062

val WSAENAMETOOLONG: Int = 10063

val WSAEHOSTDOWN: Int = 10064

val WSAEHOSTUNREACH: Int = 10065

val WSAENOTEMPTY: Int = 10066

val WSAEPROCLIM: Int = 10067

val WSAEUSERS: Int = 10068

val WSAEDQUOT: Int = 10069

val WSAESTALE: Int = 10070

val WSAEREMOTE: Int = 10071

val WSASYSNOTREADY: Int = 10091

val WSAVERNOTSUPPORTED: Int = 10092

val WSANOTINITIALISED: Int = 10093

val WSAEDISCON: Int = 10101

val WSAENOMORE: Int = 10102

val WSAECANCELLED: Int = 10103

val WSAEINVALIDPROCTABLE: Int = 10104

val WSAEINVALIDPROVIDER: Int = 10105

val WSAEPROVIDERFAILEDINIT: Int = 10106

val WSASYSCALLFAILURE: Int = 10107

val WSASERVICE_NOT_FOUND: Int = 10108

val WSATYPE_NOT_FOUND: Int = 10109

val WSA_E_NO_MORE: Int = 10110

val WSA_E_CANCELLED: Int = 10111

val WSAEREFUSED: Int = 10112

val WSAHOST_NOT_FOUND: Int = 11001

val WSATRY_AGAIN: Int = 11002

val WSANO_RECOVERY: Int = 11003

val WSANO_DATA: Int = 11004

val WSA_QOS_RECEIVERS: Int = 11005

val WSA_QOS_SENDERS: Int = 11006

val WSA_QOS_NO_SENDERS: Int = 11007

val WSA_QOS_NO_RECEIVERS: Int = 11008

val WSA_QOS_REQUEST_CONFIRMED: Int = 11009

val WSA_QOS_ADMISSION_FAILURE: Int = 11010

val WSA_QOS_POLICY_FAILURE: Int = 11011

val WSA_QOS_BAD_STYLE: Int = 11012

val WSA_QOS_BAD_OBJECT: Int = 11013

val WSA_QOS_TRAFFIC_CTRL_ERROR: Int = 11014

val WSA_QOS_GENERIC_ERROR: Int = 11015

val WSA_QOS_ESERVICETYPE: Int = 11016

val WSA_QOS_EFLOWSPEC: Int = 11017

val WSA_QOS_EPROVSPECBUF: Int = 11018

val WSA_QOS_EFILTERSTYLE: Int = 11019

val WSA_QOS_EFILTERTYPE: Int = 11020

val WSA_QOS_EFILTERCOUNT: Int = 11021

val WSA_QOS_EOBJLENGTH: Int = 11022

val WSA_QOS_EFLOWCOUNT: Int = 11023

val WSA_QOS_EUNKNOWNPSOBJ: Int = 11024

val WSA_QOS_EUNKOWNPSOBJ: Int = 11024

val WSA_QOS_EPOLICYOBJ: Int = 11025

val WSA_QOS_EFLOWDESC: Int = 11026

val WSA_QOS_EPSFLOWSPEC: Int = 11027

val WSA_QOS_EPSFILTERSPEC: Int = 11028

val WSA_QOS_ESDMODEOBJ: Int = 11029

val WSA_QOS_ESHAPERATEOBJ: Int = 11030

val WSA_QOS_RESERVED_PETYPE: Int = 11031

val ERROR_SXS_SECTION_NOT_FOUND: Int = 14000

val ERROR_SXS_CANT_GEN_ACTCTX: Int = 14001

val ERROR_SXS_INVALID_ACTCTXDATA_FORMAT: Int = 14002

val ERROR_SXS_ASSEMBLY_NOT_FOUND: Int = 14003

val ERROR_SXS_MANIFEST_FORMAT_ERROR: Int = 14004

val ERROR_SXS_MANIFEST_PARSE_ERROR: Int = 14005

val ERROR_SXS_ACTIVATION_CONTEXT_DISABLED: Int = 14006

val ERROR_SXS_KEY_NOT_FOUND: Int = 14007

val ERROR_SXS_VERSION_CONFLICT: Int = 14008

val ERROR_SXS_WRONG_SECTION_TYPE: Int = 14009

val ERROR_SXS_THREAD_QUERIES_DISABLED: Int = 14010

val ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET: Int = 14011

val ERROR_SXS_UNKNOWN_ENCODING_GROUP: Int = 14012

val ERROR_SXS_UNKNOWN_ENCODING: Int = 14013

val ERROR_SXS_INVALID_XML_NAMESPACE_URI: Int = 14014

val ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED: Int = 14015

val ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED: Int = 14016

val ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE: Int = 14017

val ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE: Int = 14018

val ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE: Int = 14019

val ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT: Int = 14020

val ERROR_SXS_DUPLICATE_DLL_NAME: Int = 14021

val ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME: Int = 14022

val ERROR_SXS_DUPLICATE_CLSID: Int = 14023

val ERROR_SXS_DUPLICATE_IID: Int = 14024

val ERROR_SXS_DUPLICATE_TLBID: Int = 14025

val ERROR_SXS_DUPLICATE_PROGID: Int = 14026

val ERROR_SXS_DUPLICATE_ASSEMBLY_NAME: Int = 14027

val ERROR_SXS_FILE_HASH_MISMATCH: Int = 14028

val ERROR_SXS_POLICY_PARSE_ERROR: Int = 14029

val ERROR_SXS_XML_E_MISSINGQUOTE: Int = 14030

val ERROR_SXS_XML_E_COMMENTSYNTAX: Int = 14031

val ERROR_SXS_XML_E_BADSTARTNAMECHAR: Int = 14032

val ERROR_SXS_XML_E_BADNAMECHAR: Int = 14033

val ERROR_SXS_XML_E_BADCHARINSTRING: Int = 14034

val ERROR_SXS_XML_E_XMLDECLSYNTAX: Int = 14035

val ERROR_SXS_XML_E_BADCHARDATA: Int = 14036

val ERROR_SXS_XML_E_MISSINGWHITESPACE: Int = 14037

val ERROR_SXS_XML_E_EXPECTINGTAGEND: Int = 14038

val ERROR_SXS_XML_E_MISSINGSEMICOLON: Int = 14039

val ERROR_SXS_XML_E_UNBALANCEDPAREN: Int = 14040

val ERROR_SXS_XML_E_INTERNALERROR: Int = 14041

val ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE: Int = 14042

val ERROR_SXS_XML_E_INCOMPLETE_ENCODING: Int = 14043

val ERROR_SXS_XML_E_MISSING_PAREN: Int = 14044

val ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE: Int = 14045

val ERROR_SXS_XML_E_MULTIPLE_COLONS: Int = 14046

val ERROR_SXS_XML_E_INVALID_DECIMAL: Int = 14047

val ERROR_SXS_XML_E_INVALID_HEXIDECIMAL: Int = 14048

val ERROR_SXS_XML_E_INVALID_UNICODE: Int = 14049

val ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK: Int = 14050

val ERROR_SXS_XML_E_UNEXPECTEDENDTAG: Int = 14051

val ERROR_SXS_XML_E_UNCLOSEDTAG: Int = 14052

val ERROR_SXS_XML_E_DUPLICATEATTRIBUTE: Int = 14053

val ERROR_SXS_XML_E_MULTIPLEROOTS: Int = 14054

val ERROR_SXS_XML_E_INVALIDATROOTLEVEL: Int = 14055

val ERROR_SXS_XML_E_BADXMLDECL: Int = 14056

val ERROR_SXS_XML_E_MISSINGROOT: Int = 14057

val ERROR_SXS_XML_E_UNEXPECTEDEOF: Int = 14058

val ERROR_SXS_XML_E_BADPEREFINSUBSET: Int = 14059

val ERROR_SXS_XML_E_UNCLOSEDSTARTTAG: Int = 14060

val ERROR_SXS_XML_E_UNCLOSEDENDTAG: Int = 14061

val ERROR_SXS_XML_E_UNCLOSEDSTRING: Int = 14062

val ERROR_SXS_XML_E_UNCLOSEDCOMMENT: Int = 14063

val ERROR_SXS_XML_E_UNCLOSEDDECL: Int = 14064

val ERROR_SXS_XML_E_UNCLOSEDCDATA: Int = 14065

val ERROR_SXS_XML_E_RESERVEDNAMESPACE: Int = 14066

val ERROR_SXS_XML_E_INVALIDENCODING: Int = 14067

val ERROR_SXS_XML_E_INVALIDSWITCH: Int = 14068

val ERROR_SXS_XML_E_BADXMLCASE: Int = 14069

val ERROR_SXS_XML_E_INVALID_STANDALONE: Int = 14070

val ERROR_SXS_XML_E_UNEXPECTED_STANDALONE: Int = 14071

val ERROR_SXS_XML_E_INVALID_VERSION: Int = 14072

val ERROR_SXS_XML_E_MISSINGEQUALS: Int = 14073

val ERROR_SXS_PROTECTION_RECOVERY_FAILED: Int = 14074

val ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT: Int = 14075

val ERROR_SXS_PROTECTION_CATALOG_NOT_VALID: Int = 14076

val ERROR_SXS_UNTRANSLATABLE_HRESULT: Int = 14077

val ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING: Int = 14078

val ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE: Int = 14079

val ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME: Int = 14080

val ERROR_SXS_ASSEMBLY_MISSING: Int = 14081

val ERROR_SXS_CORRUPT_ACTIVATION_STACK: Int = 14082

val ERROR_SXS_CORRUPTION: Int = 14083

val ERROR_SXS_EARLY_DEACTIVATION: Int = 14084

val ERROR_SXS_INVALID_DEACTIVATION: Int = 14085

val ERROR_SXS_MULTIPLE_DEACTIVATION: Int = 14086

val ERROR_SXS_PROCESS_TERMINATION_REQUESTED: Int = 14087

val ERROR_SXS_RELEASE_ACTIVATION_CONTEXT: Int = 14088

val ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY: Int = 14089

val ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE: Int = 14090

val ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME: Int = 14091

val ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE: Int = 14092

val ERROR_SXS_IDENTITY_PARSE_ERROR: Int = 14093

val ERROR_MALFORMED_SUBSTITUTION_STRING: Int = 14094

val ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN: Int = 14095

val ERROR_UNMAPPED_SUBSTITUTION_STRING: Int = 14096

val ERROR_SXS_ASSEMBLY_NOT_LOCKED: Int = 14097

val ERROR_SXS_COMPONENT_STORE_CORRUPT: Int = 14098

val ERROR_ADVANCED_INSTALLER_FAILED: Int = 14099

val ERROR_XML_ENCODING_MISMATCH: Int = 14100

val ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT: Int = 14101

val ERROR_SXS_IDENTITIES_DIFFERENT: Int = 14102

val ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT: Int = 14103

val ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY: Int = 14104

val ERROR_SXS_MANIFEST_TOO_BIG: Int = 14105

val ERROR_SXS_SETTING_NOT_REGISTERED: Int = 14106

val ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE: Int = 14107

val ERROR_SMI_PRIMITIVE_INSTALLER_FAILED: Int = 14108

val ERROR_GENERIC_COMMAND_FAILED: Int = 14109

val ERROR_SXS_FILE_HASH_MISSING: Int = 14110

val ERROR_IPSEC_QM_POLICY_EXISTS: Int = 13000

val ERROR_IPSEC_QM_POLICY_NOT_FOUND: Int = 13001

val ERROR_IPSEC_QM_POLICY_IN_USE: Int = 13002

val ERROR_IPSEC_MM_POLICY_EXISTS: Int = 13003

val ERROR_IPSEC_MM_POLICY_NOT_FOUND: Int = 13004

val ERROR_IPSEC_MM_POLICY_IN_USE: Int = 13005

val ERROR_IPSEC_MM_FILTER_EXISTS: Int = 13006

val ERROR_IPSEC_MM_FILTER_NOT_FOUND: Int = 13007

val ERROR_IPSEC_TRANSPORT_FILTER_EXISTS: Int = 13008

val ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND: Int = 13009

val ERROR_IPSEC_MM_AUTH_EXISTS: Int = 13010

val ERROR_IPSEC_MM_AUTH_NOT_FOUND: Int = 13011

val ERROR_IPSEC_MM_AUTH_IN_USE: Int = 13012

val ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND: Int = 13013

val ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND: Int = 13014

val ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND: Int = 13015

val ERROR_IPSEC_TUNNEL_FILTER_EXISTS: Int = 13016

val ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND: Int = 13017

val ERROR_IPSEC_MM_FILTER_PENDING_DELETION: Int = 13018

val ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION: Int = 13019

val ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION: Int = 13020

val ERROR_IPSEC_MM_POLICY_PENDING_DELETION: Int = 13021

val ERROR_IPSEC_MM_AUTH_PENDING_DELETION: Int = 13022

val ERROR_IPSEC_QM_POLICY_PENDING_DELETION: Int = 13023

val WARNING_IPSEC_MM_POLICY_PRUNED: Int = 13024

val WARNING_IPSEC_QM_POLICY_PRUNED: Int = 13025

val ERROR_IPSEC_IKE_NEG_STATUS_BEGIN: Int = 13800

val ERROR_IPSEC_IKE_AUTH_FAIL: Int = 13801

val ERROR_IPSEC_IKE_ATTRIB_FAIL: Int = 13802

val ERROR_IPSEC_IKE_NEGOTIATION_PENDING: Int = 13803

val ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR: Int = 13804

val ERROR_IPSEC_IKE_TIMED_OUT: Int = 13805

val ERROR_IPSEC_IKE_NO_CERT: Int = 13806

val ERROR_IPSEC_IKE_SA_DELETED: Int = 13807

val ERROR_IPSEC_IKE_SA_REAPED: Int = 13808

val ERROR_IPSEC_IKE_MM_ACQUIRE_DROP: Int = 13809

val ERROR_IPSEC_IKE_QM_ACQUIRE_DROP: Int = 13810

val ERROR_IPSEC_IKE_QUEUE_DROP_MM: Int = 13811

val ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM: Int = 13812

val ERROR_IPSEC_IKE_DROP_NO_RESPONSE: Int = 13813

val ERROR_IPSEC_IKE_MM_DELAY_DROP: Int = 13814

val ERROR_IPSEC_IKE_QM_DELAY_DROP: Int = 13815

val ERROR_IPSEC_IKE_ERROR: Int = 13816

val ERROR_IPSEC_IKE_CRL_FAILED: Int = 13817

val ERROR_IPSEC_IKE_INVALID_KEY_USAGE: Int = 13818

val ERROR_IPSEC_IKE_INVALID_CERT_TYPE: Int = 13819

val ERROR_IPSEC_IKE_NO_PRIVATE_KEY: Int = 13820

val ERROR_IPSEC_IKE_DH_FAIL: Int = 13822

val ERROR_IPSEC_IKE_INVALID_HEADER: Int = 13824

val ERROR_IPSEC_IKE_NO_POLICY: Int = 13825

val ERROR_IPSEC_IKE_INVALID_SIGNATURE: Int = 13826

val ERROR_IPSEC_IKE_KERBEROS_ERROR: Int = 13827

val ERROR_IPSEC_IKE_NO_PUBLIC_KEY: Int = 13828

val ERROR_IPSEC_IKE_PROCESS_ERR: Int = 13829

val ERROR_IPSEC_IKE_PROCESS_ERR_SA: Int = 13830

val ERROR_IPSEC_IKE_PROCESS_ERR_PROP: Int = 13831

val ERROR_IPSEC_IKE_PROCESS_ERR_TRANS: Int = 13832

val ERROR_IPSEC_IKE_PROCESS_ERR_KE: Int = 13833

val ERROR_IPSEC_IKE_PROCESS_ERR_ID: Int = 13834

val ERROR_IPSEC_IKE_PROCESS_ERR_CERT: Int = 13835

val ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ: Int = 13836

val ERROR_IPSEC_IKE_PROCESS_ERR_HASH: Int = 13837

val ERROR_IPSEC_IKE_PROCESS_ERR_SIG: Int = 13838

val ERROR_IPSEC_IKE_PROCESS_ERR_NONCE: Int = 13839

val ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY: Int = 13840

val ERROR_IPSEC_IKE_PROCESS_ERR_DELETE: Int = 13841

val ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR: Int = 13842

val ERROR_IPSEC_IKE_INVALID_PAYLOAD: Int = 13843

val ERROR_IPSEC_IKE_LOAD_SOFT_SA: Int = 13844

val ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN: Int = 13845

val ERROR_IPSEC_IKE_INVALID_COOKIE: Int = 13846

val ERROR_IPSEC_IKE_NO_PEER_CERT: Int = 13847

val ERROR_IPSEC_IKE_PEER_CRL_FAILED: Int = 13848

val ERROR_IPSEC_IKE_POLICY_CHANGE: Int = 13849

val ERROR_IPSEC_IKE_NO_MM_POLICY: Int = 13850

val ERROR_IPSEC_IKE_NOTCBPRIV: Int = 13851

val ERROR_IPSEC_IKE_SECLOADFAIL: Int = 13852

val ERROR_IPSEC_IKE_FAILSSPINIT: Int = 13853

val ERROR_IPSEC_IKE_FAILQUERYSSP: Int = 13854

val ERROR_IPSEC_IKE_SRVACQFAIL: Int = 13855

val ERROR_IPSEC_IKE_SRVQUERYCRED: Int = 13856

val ERROR_IPSEC_IKE_GETSPIFAIL: Int = 13857

val ERROR_IPSEC_IKE_INVALID_FILTER: Int = 13858

val ERROR_IPSEC_IKE_OUT_OF_MEMORY: Int = 13859

val ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED: Int = 13860

val ERROR_IPSEC_IKE_INVALID_POLICY: Int = 13861

val ERROR_IPSEC_IKE_UNKNOWN_DOI: Int = 13862

val ERROR_IPSEC_IKE_INVALID_SITUATION: Int = 13863

val ERROR_IPSEC_IKE_DH_FAILURE: Int = 13864

val ERROR_IPSEC_IKE_INVALID_GROUP: Int = 13865

val ERROR_IPSEC_IKE_ENCRYPT: Int = 13866

val ERROR_IPSEC_IKE_DECRYPT: Int = 13867

val ERROR_IPSEC_IKE_POLICY_MATCH: Int = 13868

val ERROR_IPSEC_IKE_UNSUPPORTED_ID: Int = 13869

val ERROR_IPSEC_IKE_INVALID_HASH: Int = 13870

val ERROR_IPSEC_IKE_INVALID_HASH_ALG: Int = 13871

val ERROR_IPSEC_IKE_INVALID_HASH_SIZE: Int = 13872

val ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG: Int = 13873

val ERROR_IPSEC_IKE_INVALID_AUTH_ALG: Int = 13874

val ERROR_IPSEC_IKE_INVALID_SIG: Int = 13875

val ERROR_IPSEC_IKE_LOAD_FAILED: Int = 13876

val ERROR_IPSEC_IKE_RPC_DELETE: Int = 13877

val ERROR_IPSEC_IKE_BENIGN_REINIT: Int = 13878

val ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY: Int = 13879

val ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN: Int = 13881

val ERROR_IPSEC_IKE_MM_LIMIT: Int = 13882

val ERROR_IPSEC_IKE_NEGOTIATION_DISABLED: Int = 13883

val ERROR_IPSEC_IKE_QM_LIMIT: Int = 13884

val ERROR_IPSEC_IKE_MM_EXPIRED: Int = 13885

val ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID: Int = 13886

val ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH: Int = 13887

val ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID: Int = 13888

val ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD: Int = 13889

val ERROR_IPSEC_IKE_DOS_COOKIE_SENT: Int = 13890

val ERROR_IPSEC_IKE_SHUTTING_DOWN: Int = 13891

val ERROR_IPSEC_IKE_CGA_AUTH_FAILED: Int = 13892

val ERROR_IPSEC_IKE_PROCESS_ERR_NATOA: Int = 13893

val ERROR_IPSEC_IKE_INVALID_MM_FOR_QM: Int = 13894

val ERROR_IPSEC_IKE_QM_EXPIRED: Int = 13895

val ERROR_IPSEC_IKE_TOO_MANY_FILTERS: Int = 13896

val ERROR_IPSEC_IKE_NEG_STATUS_END: Int = 13897

val ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL: Int = 13898

val ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE: Int = 13899

val ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING: Int = 13900

val ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING: Int = 13901

val ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS: Int = 13902

val ERROR_IPSEC_IKE_RATELIMIT_DROP: Int = 13903

val ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE: Int = 13904

val ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE: Int = 13905

val ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE: Int = 13906

val ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY: Int = 13907

val ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE: Int = 13908

val ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END: Int = 13909

val ERROR_IPSEC_BAD_SPI: Int = 13910

val ERROR_IPSEC_SA_LIFETIME_EXPIRED: Int = 13911

val ERROR_IPSEC_WRONG_SA: Int = 13912

val ERROR_IPSEC_REPLAY_CHECK_FAILED: Int = 13913

val ERROR_IPSEC_INVALID_PACKET: Int = 13914

val ERROR_IPSEC_INTEGRITY_CHECK_FAILED: Int = 13915

val ERROR_IPSEC_CLEAR_TEXT_DROP: Int = 13916

val ERROR_IPSEC_AUTH_FIREWALL_DROP: Int = 13917

val ERROR_IPSEC_THROTTLE_DROP: Int = 13918

val ERROR_IPSEC_DOSP_BLOCK: Int = 13925

val ERROR_IPSEC_DOSP_RECEIVED_MULTICAST: Int = 13926

val ERROR_IPSEC_DOSP_INVALID_PACKET: Int = 13927

val ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED: Int = 13928

val ERROR_IPSEC_DOSP_MAX_ENTRIES: Int = 13929

val ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED: Int = 13930

val ERROR_IPSEC_DOSP_NOT_INSTALLED: Int = 13931

val ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES: Int = 13932

val ERROR_EVT_INVALID_CHANNEL_PATH: Int = 15000

val ERROR_EVT_INVALID_QUERY: Int = 15001

val ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND: Int = 15002

val ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND: Int = 15003

val ERROR_EVT_INVALID_PUBLISHER_NAME: Int = 15004

val ERROR_EVT_INVALID_EVENT_DATA: Int = 15005

val ERROR_EVT_CHANNEL_NOT_FOUND: Int = 15007

val ERROR_EVT_MALFORMED_XML_TEXT: Int = 15008

val ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL: Int = 15009

val ERROR_EVT_CONFIGURATION_ERROR: Int = 15010

val ERROR_EVT_QUERY_RESULT_STALE: Int = 15011

val ERROR_EVT_QUERY_RESULT_INVALID_POSITION: Int = 15012

val ERROR_EVT_NON_VALIDATING_MSXML: Int = 15013

val ERROR_EVT_FILTER_ALREADYSCOPED: Int = 15014

val ERROR_EVT_FILTER_NOTELTSET: Int = 15015

val ERROR_EVT_FILTER_INVARG: Int = 15016

val ERROR_EVT_FILTER_INVTEST: Int = 15017

val ERROR_EVT_FILTER_INVTYPE: Int = 15018

val ERROR_EVT_FILTER_PARSEERR: Int = 15019

val ERROR_EVT_FILTER_UNSUPPORTEDOP: Int = 15020

val ERROR_EVT_FILTER_UNEXPECTEDTOKEN: Int = 15021

val ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL: Int = 15022

val ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE: Int = 15023

val ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE: Int = 15024

val ERROR_EVT_CHANNEL_CANNOT_ACTIVATE: Int = 15025

val ERROR_EVT_FILTER_TOO_COMPLEX: Int = 15026

val ERROR_EVT_MESSAGE_NOT_FOUND: Int = 15027

val ERROR_EVT_MESSAGE_ID_NOT_FOUND: Int = 15028

val ERROR_EVT_UNRESOLVED_VALUE_INSERT: Int = 15029

val ERROR_EVT_UNRESOLVED_PARAMETER_INSERT: Int = 15030

val ERROR_EVT_MAX_INSERTS_REACHED: Int = 15031

val ERROR_EVT_EVENT_DEFINITION_NOT_FOUND: Int = 15032

val ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND: Int = 15033

val ERROR_EVT_VERSION_TOO_OLD: Int = 15034

val ERROR_EVT_VERSION_TOO_NEW: Int = 15035

val ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY: Int = 15036

val ERROR_EVT_PUBLISHER_DISABLED: Int = 15037

val ERROR_EVT_FILTER_OUT_OF_RANGE: Int = 15038

val ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE: Int = 15080

val ERROR_EC_LOG_DISABLED: Int = 15081

val ERROR_EC_CIRCULAR_FORWARDING: Int = 15082

val ERROR_EC_CREDSTORE_FULL: Int = 15083

val ERROR_EC_CRED_NOT_FOUND: Int = 15084

val ERROR_EC_NO_ACTIVE_CHANNEL: Int = 15085

val ERROR_MUI_FILE_NOT_FOUND: Int = 15100

val ERROR_MUI_INVALID_FILE: Int = 15101

val ERROR_MUI_INVALID_RC_CONFIG: Int = 15102

val ERROR_MUI_INVALID_LOCALE_NAME: Int = 15103

val ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME: Int = 15104

val ERROR_MUI_FILE_NOT_LOADED: Int = 15105

val ERROR_RESOURCE_ENUM_USER_STOP: Int = 15106

val ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED: Int = 15107

val ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME: Int = 15108

val ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE: Int = 15110

val ERROR_MRM_INVALID_PRICONFIG: Int = 15111

val ERROR_MRM_INVALID_FILE_TYPE: Int = 15112

val ERROR_MRM_UNKNOWN_QUALIFIER: Int = 15113

val ERROR_MRM_INVALID_QUALIFIER_VALUE: Int = 15114

val ERROR_MRM_NO_CANDIDATE: Int = 15115

val ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE: Int = 15116

val ERROR_MRM_RESOURCE_TYPE_MISMATCH: Int = 15117

val ERROR_MRM_DUPLICATE_MAP_NAME: Int = 15118

val ERROR_MRM_DUPLICATE_ENTRY: Int = 15119

val ERROR_MRM_INVALID_RESOURCE_IDENTIFIER: Int = 15120

val ERROR_MRM_FILEPATH_TOO_LONG: Int = 15121

val ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE: Int = 15122

val ERROR_MRM_INVALID_PRI_FILE: Int = 15126

val ERROR_MRM_NAMED_RESOURCE_NOT_FOUND: Int = 15127

val ERROR_MRM_MAP_NOT_FOUND: Int = 15135

val ERROR_MRM_UNSUPPORTED_PROFILE_TYPE: Int = 15136

val ERROR_MRM_INVALID_QUALIFIER_OPERATOR: Int = 15137

val ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE: Int = 15138

val ERROR_MRM_AUTOMERGE_ENABLED: Int = 15139

val ERROR_MRM_TOO_MANY_RESOURCES: Int = 15140

val ERROR_MCA_INVALID_CAPABILITIES_STRING: Int = 15200

val ERROR_MCA_INVALID_VCP_VERSION: Int = 15201

val ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION: Int = 15202

val ERROR_MCA_MCCS_VERSION_MISMATCH: Int = 15203

val ERROR_MCA_UNSUPPORTED_MCCS_VERSION: Int = 15204

val ERROR_MCA_INTERNAL_ERROR: Int = 15205

val ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED: Int = 15206

val ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE: Int = 15207

val ERROR_AMBIGUOUS_SYSTEM_DEVICE: Int = 15250

val ERROR_SYSTEM_DEVICE_NOT_FOUND: Int = 15299

val ERROR_HASH_NOT_SUPPORTED: Int = 15300

val ERROR_HASH_NOT_PRESENT: Int = 15301

val ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED: Int = 15321

val ERROR_GPIO_CLIENT_INFORMATION_INVALID: Int = 15322

val ERROR_GPIO_VERSION_NOT_SUPPORTED: Int = 15323

val ERROR_GPIO_INVALID_REGISTRATION_PACKET: Int = 15324

val ERROR_GPIO_OPERATION_DENIED: Int = 15325

val ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE: Int = 15326

val ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED: Int = 15327

val ERROR_CANNOT_SWITCH_RUNLEVEL: Int = 15400

val ERROR_INVALID_RUNLEVEL_SETTING: Int = 15401

val ERROR_RUNLEVEL_SWITCH_TIMEOUT: Int = 15402

val ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT: Int = 15403

val ERROR_RUNLEVEL_SWITCH_IN_PROGRESS: Int = 15404

val ERROR_SERVICES_FAILED_AUTOSTART: Int = 15405

val ERROR_COM_TASK_STOP_PENDING: Int = 15501

val ERROR_INSTALL_OPEN_PACKAGE_FAILED: Int = 15600

val ERROR_INSTALL_PACKAGE_NOT_FOUND: Int = 15601

val ERROR_INSTALL_INVALID_PACKAGE: Int = 15602

val ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED: Int = 15603

val ERROR_INSTALL_OUT_OF_DISK_SPACE: Int = 15604

val ERROR_INSTALL_NETWORK_FAILURE: Int = 15605

val ERROR_INSTALL_REGISTRATION_FAILURE: Int = 15606

val ERROR_INSTALL_DEREGISTRATION_FAILURE: Int = 15607

val ERROR_INSTALL_CANCEL: Int = 15608

val ERROR_INSTALL_FAILED: Int = 15609

val ERROR_REMOVE_FAILED: Int = 15610

val ERROR_PACKAGE_ALREADY_EXISTS: Int = 15611

val ERROR_NEEDS_REMEDIATION: Int = 15612

val ERROR_INSTALL_PREREQUISITE_FAILED: Int = 15613

val ERROR_PACKAGE_REPOSITORY_CORRUPTED: Int = 15614

val ERROR_INSTALL_POLICY_FAILURE: Int = 15615

val ERROR_PACKAGE_UPDATING: Int = 15616

val ERROR_DEPLOYMENT_BLOCKED_BY_POLICY: Int = 15617

val ERROR_PACKAGES_IN_USE: Int = 15618

val ERROR_RECOVERY_FILE_CORRUPT: Int = 15619

val ERROR_INVALID_STAGED_SIGNATURE: Int = 15620

val ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED: Int = 15621

val ERROR_INSTALL_PACKAGE_DOWNGRADE: Int = 15622

val ERROR_SYSTEM_NEEDS_REMEDIATION: Int = 15623

val ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN: Int = 15624

val ERROR_RESILIENCY_FILE_CORRUPT: Int = 15625

val ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING: Int = 15626

val APPMODEL_ERROR_NO_PACKAGE: Int = 15700

val APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT: Int = 15701

val APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT: Int = 15702

val APPMODEL_ERROR_NO_APPLICATION: Int = 15703

val ERROR_STATE_LOAD_STORE_FAILED: Int = 15800

val ERROR_STATE_GET_VERSION_FAILED: Int = 15801

val ERROR_STATE_SET_VERSION_FAILED: Int = 15802

val ERROR_STATE_STRUCTURED_RESET_FAILED: Int = 15803

val ERROR_STATE_OPEN_CONTAINER_FAILED: Int = 15804

val ERROR_STATE_CREATE_CONTAINER_FAILED: Int = 15805

val ERROR_STATE_DELETE_CONTAINER_FAILED: Int = 15806

val ERROR_STATE_READ_SETTING_FAILED: Int = 15807

val ERROR_STATE_WRITE_SETTING_FAILED: Int = 15808

val ERROR_STATE_DELETE_SETTING_FAILED: Int = 15809

val ERROR_STATE_QUERY_SETTING_FAILED: Int = 15810

val ERROR_STATE_READ_COMPOSITE_SETTING_FAILED: Int = 15811

val ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED: Int = 15812

val ERROR_STATE_ENUMERATE_CONTAINER_FAILED: Int = 15813

val ERROR_STATE_ENUMERATE_SETTINGS_FAILED: Int = 15814

val ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED: Int = 15815

val ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED: Int = 15816

val ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED: Int = 15817

val ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED: Int = 15818

val ERROR_API_UNAVAILABLE: Int = 15841

val SEVERITY_SUCCESS: Int = 0

val SEVERITY_ERROR: Int = 1

val FACILITY_NT_BIT: Int = 268435456

val NOERROR: Int = 0

val E_UNEXPECTED: HRESULT = -2147418113

val E_NOTIMPL: HRESULT = -2147467263

val E_OUTOFMEMORY: HRESULT = -2147024882

val E_INVALIDARG: HRESULT = -2147024809

val E_NOINTERFACE: HRESULT = -2147467262

val E_POINTER: HRESULT = -2147467261

val E_HANDLE: HRESULT = -2147024890

val E_ABORT: HRESULT = -2147467260

val E_FAIL: HRESULT = -2147467259

val E_ACCESSDENIED: HRESULT = -2147024891

val E_PENDING: HRESULT = -2147483638

val E_NOT_SUFFICIENT_BUFFER: Int = -2147024774

val CO_E_INIT_TLS: HRESULT = -2147467258

val CO_E_INIT_SHARED_ALLOCATOR: HRESULT = -2147467257

val CO_E_INIT_MEMORY_ALLOCATOR: HRESULT = -2147467256

val CO_E_INIT_CLASS_CACHE: HRESULT = -2147467255

val CO_E_INIT_RPC_CHANNEL: HRESULT = -2147467254

val CO_E_INIT_TLS_SET_CHANNEL_CONTROL: HRESULT = -2147467253

val CO_E_INIT_TLS_CHANNEL_CONTROL: HRESULT = -2147467252

val CO_E_INIT_UNACCEPTED_USER_ALLOCATOR: HRESULT = -2147467251

val CO_E_INIT_SCM_MUTEX_EXISTS: HRESULT = -2147467250

val CO_E_INIT_SCM_FILE_MAPPING_EXISTS: HRESULT = -2147467249

val CO_E_INIT_SCM_MAP_VIEW_OF_FILE: HRESULT = -2147467248

val CO_E_INIT_SCM_EXEC_FAILURE: HRESULT = -2147467247

val CO_E_INIT_ONLY_SINGLE_THREADED: HRESULT = -2147467246

val CO_E_CANT_REMOTE: HRESULT = -2147467245

val CO_E_BAD_SERVER_NAME: HRESULT = -2147467244

val CO_E_WRONG_SERVER_IDENTITY: HRESULT = -2147467243

val CO_E_OLE1DDE_DISABLED: HRESULT = -2147467242

val CO_E_RUNAS_SYNTAX: HRESULT = -2147467241

val CO_E_CREATEPROCESS_FAILURE: HRESULT = -2147467240

val CO_E_RUNAS_CREATEPROCESS_FAILURE: HRESULT = -2147467239

val CO_E_RUNAS_LOGON_FAILURE: HRESULT = -2147467238

val CO_E_LAUNCH_PERMSSION_DENIED: HRESULT = -2147467237

val CO_E_START_SERVICE_FAILURE: HRESULT = -2147467236

val CO_E_REMOTE_COMMUNICATION_FAILURE: HRESULT = -2147467235

val CO_E_SERVER_START_TIMEOUT: HRESULT = -2147467234

val CO_E_CLSREG_INCONSISTENT: HRESULT = -2147467233

val CO_E_IIDREG_INCONSISTENT: HRESULT = -2147467232

val CO_E_NOT_SUPPORTED: HRESULT = -2147467231

val CO_E_RELOAD_DLL: HRESULT = -2147467230

val CO_E_MSI_ERROR: HRESULT = -2147467229

val CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT: HRESULT = -2147467228

val CO_E_SERVER_PAUSED: HRESULT = -2147467227

val CO_E_SERVER_NOT_PAUSED: HRESULT = -2147467226

val CO_E_CLASS_DISABLED: HRESULT = -2147467225

val CO_E_CLRNOTAVAILABLE: HRESULT = -2147467224

val CO_E_ASYNC_WORK_REJECTED: HRESULT = -2147467223

val CO_E_SERVER_INIT_TIMEOUT: HRESULT = -2147467222

val CO_E_NO_SECCTX_IN_ACTIVATE: HRESULT = -2147467221

val CO_E_TRACKER_CONFIG: HRESULT = -2147467216

val CO_E_THREADPOOL_CONFIG: HRESULT = -2147467215

val CO_E_SXS_CONFIG: HRESULT = -2147467214

val CO_E_MALFORMED_SPN: HRESULT = -2147467213

val S_OK: HRESULT = 0

val S_FALSE: HRESULT = 1

val OLE_E_FIRST: HRESULT = -2147221504

val OLE_E_LAST: HRESULT = -2147221249

val OLE_S_FIRST: HRESULT = 262144

val OLE_S_LAST: HRESULT = 262399

val OLE_E_OLEVERB: HRESULT = -2147221504

val OLE_E_ADVF: HRESULT = -2147221503

val OLE_E_ENUM_NOMORE: HRESULT = -2147221502

val OLE_E_ADVISENOTSUPPORTED: HRESULT = -2147221501

val OLE_E_NOCONNECTION: HRESULT = -2147221500

val OLE_E_NOTRUNNING: HRESULT = -2147221499

val OLE_E_NOCACHE: HRESULT = -2147221498

val OLE_E_BLANK: HRESULT = -2147221497

val OLE_E_CLASSDIFF: HRESULT = -2147221496

val OLE_E_CANT_GETMONIKER: HRESULT = -2147221495

val OLE_E_CANT_BINDTOSOURCE: HRESULT = -2147221494

val OLE_E_STATIC: HRESULT = -2147221493

val OLE_E_PROMPTSAVECANCELLED: HRESULT = -2147221492

val OLE_E_INVALIDRECT: HRESULT = -2147221491

val OLE_E_WRONGCOMPOBJ: HRESULT = -2147221490

val OLE_E_INVALIDHWND: HRESULT = -2147221489

val OLE_E_NOT_INPLACEACTIVE: HRESULT = -2147221488

val OLE_E_CANTCONVERT: HRESULT = -2147221487

val OLE_E_NOSTORAGE: HRESULT = -2147221486

val DV_E_FORMATETC: HRESULT = -2147221404

val DV_E_DVTARGETDEVICE: HRESULT = -2147221403

val DV_E_STGMEDIUM: HRESULT = -2147221402

val DV_E_STATDATA: HRESULT = -2147221401

val DV_E_LINDEX: HRESULT = -2147221400

val DV_E_TYMED: HRESULT = -2147221399

val DV_E_CLIPFORMAT: HRESULT = -2147221398

val DV_E_DVASPECT: HRESULT = -2147221397

val DV_E_DVTARGETDEVICE_SIZE: HRESULT = -2147221396

val DV_E_NOIVIEWOBJECT: HRESULT = -2147221395

val DRAGDROP_E_FIRST: Int = -2147221248

val DRAGDROP_E_LAST: Int = -2147221233

val DRAGDROP_S_FIRST: Int = 262400

val DRAGDROP_S_LAST: Int = 262415

val DRAGDROP_E_NOTREGISTERED: HRESULT = -2147221248

val DRAGDROP_E_ALREADYREGISTERED: HRESULT = -2147221247

val DRAGDROP_E_INVALIDHWND: HRESULT = -2147221246

val CLASSFACTORY_E_FIRST: Int = -2147221232

val CLASSFACTORY_E_LAST: Int = -2147221217

val CLASSFACTORY_S_FIRST: Int = 262416

val CLASSFACTORY_S_LAST: Int = 262431

val CLASS_E_NOAGGREGATION: HRESULT = -2147221232

val CLASS_E_CLASSNOTAVAILABLE: HRESULT = -2147221231

val CLASS_E_NOTLICENSED: HRESULT = -2147221230

val MARSHAL_E_FIRST: Int = -2147221216

val MARSHAL_E_LAST: Int = -2147221201

val MARSHAL_S_FIRST: Int = 262432

val MARSHAL_S_LAST: Int = 262447

val DATA_E_FIRST: Int = -2147221200

val DATA_E_LAST: Int = -2147221185

val DATA_S_FIRST: Int = 262448

val DATA_S_LAST: Int = 262463

val VIEW_E_FIRST: Int = -2147221184

val VIEW_E_LAST: Int = -2147221169

val VIEW_S_FIRST: Int = 262464

val VIEW_S_LAST: Int = 262479

val VIEW_E_DRAW: HRESULT = -2147221184

val REGDB_E_FIRST: Int = -2147221168

val REGDB_E_LAST: Int = -2147221153

val REGDB_S_FIRST: Int = 262480

val REGDB_S_LAST: Int = 262495

val REGDB_E_READREGDB: HRESULT = -2147221168

val REGDB_E_WRITEREGDB: HRESULT = -2147221167

val REGDB_E_KEYMISSING: HRESULT = -2147221166

val REGDB_E_INVALIDVALUE: HRESULT = -2147221165

val REGDB_E_CLASSNOTREG: HRESULT = -2147221164

val REGDB_E_IIDNOTREG: HRESULT = -2147221163

val REGDB_E_BADTHREADINGMODEL: HRESULT = -2147221162

val CAT_E_FIRST: Int = -2147221152

val CAT_E_LAST: Int = -2147221151

val CAT_E_CATIDNOEXIST: HRESULT = -2147221152

val CAT_E_NODESCRIPTION: HRESULT = -2147221151

val CS_E_FIRST: Int = -2147221148

val CS_E_LAST: Int = -2147221137

val CS_E_PACKAGE_NOTFOUND: HRESULT = -2147221148

val CS_E_NOT_DELETABLE: HRESULT = -2147221147

val CS_E_CLASS_NOTFOUND: HRESULT = -2147221146

val CS_E_INVALID_VERSION: HRESULT = -2147221145

val CS_E_NO_CLASSSTORE: HRESULT = -2147221144

val CS_E_OBJECT_NOTFOUND: HRESULT = -2147221143

val CS_E_OBJECT_ALREADY_EXISTS: HRESULT = -2147221142

val CS_E_INVALID_PATH: HRESULT = -2147221141

val CS_E_NETWORK_ERROR: HRESULT = -2147221140

val CS_E_ADMIN_LIMIT_EXCEEDED: HRESULT = -2147221139

val CS_E_SCHEMA_MISMATCH: HRESULT = -2147221138

val CS_E_INTERNAL_ERROR: HRESULT = -2147221137

val CACHE_E_FIRST: Int = -2147221136

val CACHE_E_LAST: Int = -2147221121

val CACHE_S_FIRST: Int = 262512

val CACHE_S_LAST: Int = 262527

val CACHE_E_NOCACHE_UPDATED: HRESULT = -2147221136

val OLEOBJ_E_FIRST: Int = -2147221120

val OLEOBJ_E_LAST: Int = -2147221105

val OLEOBJ_S_FIRST: Int = 262528

val OLEOBJ_S_LAST: Int = 262543

val OLEOBJ_E_NOVERBS: HRESULT = -2147221120

val OLEOBJ_E_INVALIDVERB: HRESULT = -2147221119

val CLIENTSITE_E_FIRST: Int = -2147221104

val CLIENTSITE_E_LAST: Int = -2147221089

val CLIENTSITE_S_FIRST: Int = 262544

val CLIENTSITE_S_LAST: Int = 262559

val INPLACE_E_NOTUNDOABLE: HRESULT = -2147221088

val INPLACE_E_NOTOOLSPACE: HRESULT = -2147221087

val INPLACE_E_FIRST: Int = -2147221088

val INPLACE_E_LAST: Int = -2147221073

val INPLACE_S_FIRST: Int = 262560

val INPLACE_S_LAST: Int = 262575

val ENUM_E_FIRST: Int = -2147221072

val ENUM_E_LAST: Int = -2147221057

val ENUM_S_FIRST: Int = 262576

val ENUM_S_LAST: Int = 262591

val CONVERT10_E_FIRST: Int = -2147221056

val CONVERT10_E_LAST: Int = -2147221041

val CONVERT10_S_FIRST: Int = 262592

val CONVERT10_S_LAST: Int = 262607

val CONVERT10_E_OLESTREAM_GET: HRESULT = -2147221056

val CONVERT10_E_OLESTREAM_PUT: HRESULT = -2147221055

val CONVERT10_E_OLESTREAM_FMT: HRESULT = -2147221054

val CONVERT10_E_OLESTREAM_BITMAP_TO_DIB: HRESULT = -2147221053

val CONVERT10_E_STG_FMT: HRESULT = -2147221052

val CONVERT10_E_STG_NO_STD_STREAM: HRESULT = -2147221051

val CONVERT10_E_STG_DIB_TO_BITMAP: HRESULT = -2147221050

val CLIPBRD_E_FIRST: Int = -2147221040

val CLIPBRD_E_LAST: Int = -2147221025

val CLIPBRD_S_FIRST: Int = 262608

val CLIPBRD_S_LAST: Int = 262623

val CLIPBRD_E_CANT_OPEN: HRESULT = -2147221040

val CLIPBRD_E_CANT_EMPTY: HRESULT = -2147221039

val CLIPBRD_E_CANT_SET: HRESULT = -2147221038

val CLIPBRD_E_BAD_DATA: HRESULT = -2147221037

val CLIPBRD_E_CANT_CLOSE: HRESULT = -2147221036

val MK_E_FIRST: Int = -2147221024

val MK_E_LAST: Int = -2147221009

val MK_S_FIRST: Int = 262624

val MK_S_LAST: Int = 262639

val MK_E_CONNECTMANUALLY: HRESULT = -2147221024

val MK_E_EXCEEDEDDEADLINE: HRESULT = -2147221023

val MK_E_NEEDGENERIC: HRESULT = -2147221022

val MK_E_UNAVAILABLE: HRESULT = -2147221021

val MK_E_SYNTAX: HRESULT = -2147221020

val MK_E_NOOBJECT: HRESULT = -2147221019

val MK_E_INVALIDEXTENSION: HRESULT = -2147221018

val MK_E_INTERMEDIATEINTERFACENOTSUPPORTED: HRESULT = -2147221017

val MK_E_NOTBINDABLE: HRESULT = -2147221016

val MK_E_NOTBOUND: HRESULT = -2147221015

val MK_E_CANTOPENFILE: HRESULT = -2147221014

val MK_E_MUSTBOTHERUSER: HRESULT = -2147221013

val MK_E_NOINVERSE: HRESULT = -2147221012

val MK_E_NOSTORAGE: HRESULT = -2147221011

val MK_E_NOPREFIX: HRESULT = -2147221010

val MK_E_ENUMERATION_FAILED: HRESULT = -2147221009

val CO_E_FIRST: Int = -2147221008

val CO_E_LAST: Int = -2147220993

val CO_S_FIRST: Int = 262640

val CO_S_LAST: Int = 262655

val CO_E_NOTINITIALIZED: HRESULT = -2147221008

val CO_E_ALREADYINITIALIZED: HRESULT = -2147221007

val CO_E_CANTDETERMINECLASS: HRESULT = -2147221006

val CO_E_CLASSSTRING: HRESULT = -2147221005

val CO_E_IIDSTRING: HRESULT = -2147221004

val CO_E_APPNOTFOUND: HRESULT = -2147221003

val CO_E_APPSINGLEUSE: HRESULT = -2147221002

val CO_E_ERRORINAPP: HRESULT = -2147221001

val CO_E_DLLNOTFOUND: HRESULT = -2147221000

val CO_E_ERRORINDLL: HRESULT = -2147220999

val CO_E_WRONGOSFORAPP: HRESULT = -2147220998

val CO_E_OBJNOTREG: HRESULT = -2147220997

val CO_E_OBJISREG: HRESULT = -2147220996

val CO_E_OBJNOTCONNECTED: HRESULT = -2147220995

val CO_E_APPDIDNTREG: HRESULT = -2147220994

val CO_E_RELEASED: HRESULT = -2147220993

val EVENT_E_FIRST: Int = -2147220992

val EVENT_E_LAST: Int = -2147220961

val EVENT_S_FIRST: Int = 262656

val EVENT_S_LAST: Int = 262687

val EVENT_S_SOME_SUBSCRIBERS_FAILED: HRESULT = 262656

val EVENT_E_ALL_SUBSCRIBERS_FAILED: HRESULT = -2147220991

val EVENT_S_NOSUBSCRIBERS: HRESULT = 262658

val EVENT_E_QUERYSYNTAX: HRESULT = -2147220989

val EVENT_E_QUERYFIELD: HRESULT = -2147220988

val EVENT_E_INTERNALEXCEPTION: HRESULT = -2147220987

val EVENT_E_INTERNALERROR: HRESULT = -2147220986

val EVENT_E_INVALID_PER_USER_SID: HRESULT = -2147220985

val EVENT_E_USER_EXCEPTION: HRESULT = -2147220984

val EVENT_E_TOO_MANY_METHODS: HRESULT = -2147220983

val EVENT_E_MISSING_EVENTCLASS: HRESULT = -2147220982

val EVENT_E_NOT_ALL_REMOVED: HRESULT = -2147220981

val EVENT_E_COMPLUS_NOT_INSTALLED: HRESULT = -2147220980

val EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT: HRESULT = -2147220979

val EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT: HRESULT = -2147220978

val EVENT_E_INVALID_EVENT_CLASS_PARTITION: HRESULT = -2147220977

val EVENT_E_PER_USER_SID_NOT_LOGGED_ON: HRESULT = -2147220976

val XACT_E_FIRST: Int = -2147168256

val XACT_E_LAST: Int = -2147168215

val XACT_S_FIRST: Int = 315392

val XACT_S_LAST: Int = 315408

val XACT_E_ALREADYOTHERSINGLEPHASE: HRESULT = -2147168256

val XACT_E_CANTRETAIN: HRESULT = -2147168255

val XACT_E_COMMITFAILED: HRESULT = -2147168254

val XACT_E_COMMITPREVENTED: HRESULT = -2147168253

val XACT_E_HEURISTICABORT: HRESULT = -2147168252

val XACT_E_HEURISTICCOMMIT: HRESULT = -2147168251

val XACT_E_HEURISTICDAMAGE: HRESULT = -2147168250

val XACT_E_HEURISTICDANGER: HRESULT = -2147168249

val XACT_E_ISOLATIONLEVEL: HRESULT = -2147168248

val XACT_E_NOASYNC: HRESULT = -2147168247

val XACT_E_NOENLIST: HRESULT = -2147168246

val XACT_E_NOISORETAIN: HRESULT = -2147168245

val XACT_E_NORESOURCE: HRESULT = -2147168244

val XACT_E_NOTCURRENT: HRESULT = -2147168243

val XACT_E_NOTRANSACTION: HRESULT = -2147168242

val XACT_E_NOTSUPPORTED: HRESULT = -2147168241

val XACT_E_UNKNOWNRMGRID: HRESULT = -2147168240

val XACT_E_WRONGSTATE: HRESULT = -2147168239

val XACT_E_WRONGUOW: HRESULT = -2147168238

val XACT_E_XTIONEXISTS: HRESULT = -2147168237

val XACT_E_NOIMPORTOBJECT: HRESULT = -2147168236

val XACT_E_INVALIDCOOKIE: HRESULT = -2147168235

val XACT_E_INDOUBT: HRESULT = -2147168234

val XACT_E_NOTIMEOUT: HRESULT = -2147168233

val XACT_E_ALREADYINPROGRESS: HRESULT = -2147168232

val XACT_E_ABORTED: HRESULT = -2147168231

val XACT_E_LOGFULL: HRESULT = -2147168230

val XACT_E_TMNOTAVAILABLE: HRESULT = -2147168229

val XACT_E_CONNECTION_DOWN: HRESULT = -2147168228

val XACT_E_CONNECTION_DENIED: HRESULT = -2147168227

val XACT_E_REENLISTTIMEOUT: HRESULT = -2147168226

val XACT_E_TIP_CONNECT_FAILED: HRESULT = -2147168225

val XACT_E_TIP_PROTOCOL_ERROR: HRESULT = -2147168224

val XACT_E_TIP_PULL_FAILED: HRESULT = -2147168223

val XACT_E_DEST_TMNOTAVAILABLE: HRESULT = -2147168222

val XACT_E_TIP_DISABLED: HRESULT = -2147168221

val XACT_E_NETWORK_TX_DISABLED: HRESULT = -2147168220

val XACT_E_PARTNER_NETWORK_TX_DISABLED: HRESULT = -2147168219

val XACT_E_XA_TX_DISABLED: HRESULT = -2147168218

val XACT_E_UNABLE_TO_READ_DTC_CONFIG: HRESULT = -2147168217

val XACT_E_UNABLE_TO_LOAD_DTC_PROXY: HRESULT = -2147168216

val XACT_E_ABORTING: HRESULT = -2147168215

val XACT_E_CLERKNOTFOUND: HRESULT = -2147168128

val XACT_E_CLERKEXISTS: HRESULT = -2147168127

val XACT_E_RECOVERYINPROGRESS: HRESULT = -2147168126

val XACT_E_TRANSACTIONCLOSED: HRESULT = -2147168125

val XACT_E_INVALIDLSN: HRESULT = -2147168124

val XACT_E_REPLAYREQUEST: HRESULT = -2147168123

val XACT_S_ASYNC: HRESULT = 315392

val XACT_S_DEFECT: HRESULT = 315393

val XACT_S_READONLY: HRESULT = 315394

val XACT_S_SOMENORETAIN: HRESULT = 315395

val XACT_S_OKINFORM: HRESULT = 315396

val XACT_S_MADECHANGESCONTENT: HRESULT = 315397

val XACT_S_MADECHANGESINFORM: HRESULT = 315398

val XACT_S_ALLNORETAIN: HRESULT = 315399

val XACT_S_ABORTING: HRESULT = 315400

val XACT_S_SINGLEPHASE: HRESULT = 315401

val XACT_S_LOCALLY_OK: HRESULT = 315402

val XACT_S_LASTRESOURCEMANAGER: HRESULT = 315408

val CONTEXT_E_FIRST: Int = -2147164160

val CONTEXT_E_LAST: Int = -2147164113

val CONTEXT_S_FIRST: Int = 319488

val CONTEXT_S_LAST: Int = 319535

val CONTEXT_E_ABORTED: HRESULT = -2147164158

val CONTEXT_E_ABORTING: HRESULT = -2147164157

val CONTEXT_E_NOCONTEXT: HRESULT = -2147164156

val CONTEXT_E_WOULD_DEADLOCK: HRESULT = -2147164155

val CONTEXT_E_SYNCH_TIMEOUT: HRESULT = -2147164154

val CONTEXT_E_OLDREF: HRESULT = -2147164153

val CONTEXT_E_ROLENOTFOUND: HRESULT = -2147164148

val CONTEXT_E_TMNOTAVAILABLE: HRESULT = -2147164145

val CO_E_ACTIVATIONFAILED: HRESULT = -2147164127

val CO_E_ACTIVATIONFAILED_EVENTLOGGED: HRESULT = -2147164126

val CO_E_ACTIVATIONFAILED_CATALOGERROR: HRESULT = -2147164125

val CO_E_ACTIVATIONFAILED_TIMEOUT: HRESULT = -2147164124

val CO_E_INITIALIZATIONFAILED: HRESULT = -2147164123

val CONTEXT_E_NOJIT: HRESULT = -2147164122

val CONTEXT_E_NOTRANSACTION: HRESULT = -2147164121

val CO_E_THREADINGMODEL_CHANGED: HRESULT = -2147164120

val CO_E_NOIISINTRINSICS: HRESULT = -2147164119

val CO_E_NOCOOKIES: HRESULT = -2147164118

val CO_E_DBERROR: HRESULT = -2147164117

val CO_E_NOTPOOLED: HRESULT = -2147164116

val CO_E_NOTCONSTRUCTED: HRESULT = -2147164115

val CO_E_NOSYNCHRONIZATION: HRESULT = -2147164114

val CO_E_ISOLEVELMISMATCH: HRESULT = -2147164113

val OLE_S_USEREG: HRESULT = 262144

val OLE_S_STATIC: HRESULT = 262145

val OLE_S_MAC_CLIPFORMAT: HRESULT = 262146

val DRAGDROP_S_DROP: HRESULT = 262400

val DRAGDROP_S_CANCEL: HRESULT = 262401

val DRAGDROP_S_USEDEFAULTCURSORS: HRESULT = 262402

val DATA_S_SAMEFORMATETC: HRESULT = 262448

val VIEW_S_ALREADY_FROZEN: HRESULT = 262464

val CACHE_S_FORMATETC_NOTSUPPORTED: HRESULT = 262512

val CACHE_S_SAMECACHE: HRESULT = 262513

val CACHE_S_SOMECACHES_NOTUPDATED: HRESULT = 262514

val OLEOBJ_S_INVALIDVERB: HRESULT = 262528

val OLEOBJ_S_CANNOT_DOVERB_NOW: HRESULT = 262529

val OLEOBJ_S_INVALIDHWND: HRESULT = 262530

val INPLACE_S_TRUNCATED: HRESULT = 262560

val CONVERT10_S_NO_PRESENTATION: HRESULT = 262592

val MK_S_REDUCED_TO_SELF: HRESULT = 262626

val MK_S_ME: HRESULT = 262628

val MK_S_HIM: HRESULT = 262629

val MK_S_US: HRESULT = 262630

val MK_S_MONIKERALREADYREGISTERED: HRESULT = 262631

val SCHED_S_TASK_READY: HRESULT = 267008

val SCHED_S_TASK_RUNNING: HRESULT = 267009

val SCHED_S_TASK_DISABLED: HRESULT = 267010

val SCHED_S_TASK_HAS_NOT_RUN: HRESULT = 267011

val SCHED_S_TASK_NO_MORE_RUNS: HRESULT = 267012

val SCHED_S_TASK_NOT_SCHEDULED: HRESULT = 267013

val SCHED_S_TASK_TERMINATED: HRESULT = 267014

val SCHED_S_TASK_NO_VALID_TRIGGERS: HRESULT = 267015

val SCHED_S_EVENT_TRIGGER: HRESULT = 267016

val SCHED_E_TRIGGER_NOT_FOUND: HRESULT = -2147216631

val SCHED_E_TASK_NOT_READY: HRESULT = -2147216630

val SCHED_E_TASK_NOT_RUNNING: HRESULT = -2147216629

val SCHED_E_SERVICE_NOT_INSTALLED: HRESULT = -2147216628

val SCHED_E_CANNOT_OPEN_TASK: HRESULT = -2147216627

val SCHED_E_INVALID_TASK: HRESULT = -2147216626

val SCHED_E_ACCOUNT_INFORMATION_NOT_SET: HRESULT = -2147216625

val SCHED_E_ACCOUNT_NAME_NOT_FOUND: HRESULT = -2147216624

val SCHED_E_ACCOUNT_DBASE_CORRUPT: HRESULT = -2147216623

val SCHED_E_NO_SECURITY_SERVICES: HRESULT = -2147216622

val SCHED_E_UNKNOWN_OBJECT_VERSION: HRESULT = -2147216621

val SCHED_E_UNSUPPORTED_ACCOUNT_OPTION: HRESULT = -2147216620

val SCHED_E_SERVICE_NOT_RUNNING: HRESULT = -2147216619

val CO_E_CLASS_CREATE_FAILED: HRESULT = -2146959359

val CO_E_SCM_ERROR: HRESULT = -2146959358

val CO_E_SCM_RPC_FAILURE: HRESULT = -2146959357

val CO_E_BAD_PATH: HRESULT = -2146959356

val CO_E_SERVER_EXEC_FAILURE: HRESULT = -2146959355

val CO_E_OBJSRV_RPC_FAILURE: HRESULT = -2146959354

val MK_E_NO_NORMALIZED: HRESULT = -2146959353

val CO_E_SERVER_STOPPING: HRESULT = -2146959352

val MEM_E_INVALID_ROOT: HRESULT = -2146959351

val MEM_E_INVALID_LINK: HRESULT = -2146959344

val MEM_E_INVALID_SIZE: HRESULT = -2146959343

val CO_S_NOTALLINTERFACES: HRESULT = 524306

val CO_S_MACHINENAMENOTFOUND: HRESULT = 524307

val DISP_E_UNKNOWNINTERFACE: HRESULT = -2147352575

val DISP_E_MEMBERNOTFOUND: HRESULT = -2147352573

val DISP_E_PARAMNOTFOUND: HRESULT = -2147352572

val DISP_E_TYPEMISMATCH: HRESULT = -2147352571

val DISP_E_UNKNOWNNAME: HRESULT = -2147352570

val DISP_E_NONAMEDARGS: HRESULT = -2147352569

val DISP_E_BADVARTYPE: HRESULT = -2147352568

val DISP_E_EXCEPTION: HRESULT = -2147352567

val DISP_E_OVERFLOW: HRESULT = -2147352566

val DISP_E_BADINDEX: HRESULT = -2147352565

val DISP_E_UNKNOWNLCID: HRESULT = -2147352564

val DISP_E_ARRAYISLOCKED: HRESULT = -2147352563

val DISP_E_BADPARAMCOUNT: HRESULT = -2147352562

val DISP_E_PARAMNOTOPTIONAL: HRESULT = -2147352561

val DISP_E_BADCALLEE: HRESULT = -2147352560

val DISP_E_NOTACOLLECTION: HRESULT = -2147352559

val DISP_E_DIVBYZERO: HRESULT = -2147352558

val DISP_E_BUFFERTOOSMALL: HRESULT = -2147352557

val TYPE_E_BUFFERTOOSMALL: HRESULT = -2147319786

val TYPE_E_FIELDNOTFOUND: HRESULT = -2147319785

val TYPE_E_INVDATAREAD: HRESULT = -2147319784

val TYPE_E_UNSUPFORMAT: HRESULT = -2147319783

val TYPE_E_REGISTRYACCESS: HRESULT = -2147319780

val TYPE_E_LIBNOTREGISTERED: HRESULT = -2147319779

val TYPE_E_UNDEFINEDTYPE: HRESULT = -2147319769

val TYPE_E_QUALIFIEDNAMEDISALLOWED: HRESULT = -2147319768

val TYPE_E_INVALIDSTATE: HRESULT = -2147319767

val TYPE_E_WRONGTYPEKIND: HRESULT = -2147319766

val TYPE_E_ELEMENTNOTFOUND: HRESULT = -2147319765

val TYPE_E_AMBIGUOUSNAME: HRESULT = -2147319764

val TYPE_E_NAMECONFLICT: HRESULT = -2147319763

val TYPE_E_UNKNOWNLCID: HRESULT = -2147319762

val TYPE_E_DLLFUNCTIONNOTFOUND: HRESULT = -2147319761

val TYPE_E_BADMODULEKIND: HRESULT = -2147317571

val TYPE_E_SIZETOOBIG: HRESULT = -2147317563

val TYPE_E_DUPLICATEID: HRESULT = -2147317562

val TYPE_E_INVALIDID: HRESULT = -2147317553

val TYPE_E_TYPEMISMATCH: HRESULT = -2147316576

val TYPE_E_OUTOFBOUNDS: HRESULT = -2147316575

val TYPE_E_IOERROR: HRESULT = -2147316574

val TYPE_E_CANTCREATETMPFILE: HRESULT = -2147316573

val TYPE_E_CANTLOADLIBRARY: HRESULT = -2147312566

val TYPE_E_INCONSISTENTPROPFUNCS: HRESULT = -2147312509

val TYPE_E_CIRCULARTYPE: HRESULT = -2147312508

val STG_E_INVALIDFUNCTION: HRESULT = -2147287039

val STG_E_FILENOTFOUND: HRESULT = -2147287038

val STG_E_PATHNOTFOUND: HRESULT = -2147287037

val STG_E_TOOMANYOPENFILES: HRESULT = -2147287036

val STG_E_ACCESSDENIED: HRESULT = -2147287035

val STG_E_INVALIDHANDLE: HRESULT = -2147287034

val STG_E_INSUFFICIENTMEMORY: HRESULT = -2147287032

val STG_E_INVALIDPOINTER: HRESULT = -2147287031

val STG_E_NOMOREFILES: HRESULT = -2147287022

val STG_E_DISKISWRITEPROTECTED: HRESULT = -2147287021

val STG_E_SEEKERROR: HRESULT = -2147287015

val STG_E_WRITEFAULT: HRESULT = -2147287011

val STG_E_READFAULT: HRESULT = -2147287010

val STG_E_SHAREVIOLATION: HRESULT = -2147287008

val STG_E_LOCKVIOLATION: HRESULT = -2147287007

val STG_E_FILEALREADYEXISTS: HRESULT = -2147286960

val STG_E_INVALIDPARAMETER: HRESULT = -2147286953

val STG_E_MEDIUMFULL: HRESULT = -2147286928

val STG_E_PROPSETMISMATCHED: HRESULT = -2147286800

val STG_E_ABNORMALAPIEXIT: HRESULT = -2147286790

val STG_E_INVALIDHEADER: HRESULT = -2147286789

val STG_E_INVALIDNAME: HRESULT = -2147286788

val STG_E_UNKNOWN: HRESULT = -2147286787

val STG_E_UNIMPLEMENTEDFUNCTION: HRESULT = -2147286786

val STG_E_INVALIDFLAG: HRESULT = -2147286785

val STG_E_INUSE: HRESULT = -2147286784

val STG_E_NOTCURRENT: HRESULT = -2147286783

val STG_E_REVERTED: HRESULT = -2147286782

val STG_E_CANTSAVE: HRESULT = -2147286781

val STG_E_OLDFORMAT: HRESULT = -2147286780

val STG_E_OLDDLL: HRESULT = -2147286779

val STG_E_SHAREREQUIRED: HRESULT = -2147286778

val STG_E_NOTFILEBASEDSTORAGE: HRESULT = -2147286777

val STG_E_EXTANTMARSHALLINGS: HRESULT = -2147286776

val STG_E_DOCFILECORRUPT: HRESULT = -2147286775

val STG_E_BADBASEADDRESS: HRESULT = -2147286768

val STG_E_DOCFILETOOLARGE: HRESULT = -2147286767

val STG_E_NOTSIMPLEFORMAT: HRESULT = -2147286766

val STG_E_INCOMPLETE: HRESULT = -2147286527

val STG_E_TERMINATED: HRESULT = -2147286526

val STG_S_CONVERTED: HRESULT = 197120

val STG_S_BLOCK: HRESULT = 197121

val STG_S_RETRYNOW: HRESULT = 197122

val STG_S_MONITORING: HRESULT = 197123

val STG_S_MULTIPLEOPENS: HRESULT = 197124

val STG_S_CONSOLIDATIONFAILED: HRESULT = 197125

val STG_S_CANNOTCONSOLIDATE: HRESULT = 197126

val STG_E_STATUS_COPY_PROTECTION_FAILURE: HRESULT = -2147286267

val STG_E_CSS_AUTHENTICATION_FAILURE: HRESULT = -2147286266

val STG_E_CSS_KEY_NOT_PRESENT: HRESULT = -2147286265

val STG_E_CSS_KEY_NOT_ESTABLISHED: HRESULT = -2147286264

val STG_E_CSS_SCRAMBLED_SECTOR: HRESULT = -2147286263

val STG_E_CSS_REGION_MISMATCH: HRESULT = -2147286262

val STG_E_RESETS_EXHAUSTED: HRESULT = -2147286261

val RPC_E_CALL_REJECTED: HRESULT = -2147418111

val RPC_E_CALL_CANCELED: HRESULT = -2147418110

val RPC_E_CANTPOST_INSENDCALL: HRESULT = -2147418109

val RPC_E_CANTCALLOUT_INASYNCCALL: HRESULT = -2147418108

val RPC_E_CANTCALLOUT_INEXTERNALCALL: HRESULT = -2147418107

val RPC_E_CONNECTION_TERMINATED: HRESULT = -2147418106

val RPC_E_SERVER_DIED: HRESULT = -2147418105

val RPC_E_CLIENT_DIED: HRESULT = -2147418104

val RPC_E_INVALID_DATAPACKET: HRESULT = -2147418103

val RPC_E_CANTTRANSMIT_CALL: HRESULT = -2147418102

val RPC_E_CLIENT_CANTMARSHAL_DATA: HRESULT = -2147418101

val RPC_E_CLIENT_CANTUNMARSHAL_DATA: HRESULT = -2147418100

val RPC_E_SERVER_CANTMARSHAL_DATA: HRESULT = -2147418099

val RPC_E_SERVER_CANTUNMARSHAL_DATA: HRESULT = -2147418098

val RPC_E_INVALID_DATA: HRESULT = -2147418097

val RPC_E_INVALID_PARAMETER: HRESULT = -2147418096

val RPC_E_CANTCALLOUT_AGAIN: HRESULT = -2147418095

val RPC_E_SERVER_DIED_DNE: HRESULT = -2147418094

val RPC_E_SYS_CALL_FAILED: HRESULT = -2147417856

val RPC_E_OUT_OF_RESOURCES: HRESULT = -2147417855

val RPC_E_ATTEMPTED_MULTITHREAD: HRESULT = -2147417854

val RPC_E_NOT_REGISTERED: HRESULT = -2147417853

val RPC_E_FAULT: HRESULT = -2147417852

val RPC_E_SERVERFAULT: HRESULT = -2147417851

val RPC_E_CHANGED_MODE: HRESULT = -2147417850

val RPC_E_INVALIDMETHOD: HRESULT = -2147417849

val RPC_E_DISCONNECTED: HRESULT = -2147417848

val RPC_E_RETRY: HRESULT = -2147417847

val RPC_E_SERVERCALL_RETRYLATER: HRESULT = -2147417846

val RPC_E_SERVERCALL_REJECTED: HRESULT = -2147417845

val RPC_E_INVALID_CALLDATA: HRESULT = -2147417844

val RPC_E_CANTCALLOUT_ININPUTSYNCCALL: HRESULT = -2147417843

val RPC_E_WRONG_THREAD: HRESULT = -2147417842

val RPC_E_THREAD_NOT_INIT: HRESULT = -2147417841

val RPC_E_VERSION_MISMATCH: HRESULT = -2147417840

val RPC_E_INVALID_HEADER: HRESULT = -2147417839

val RPC_E_INVALID_EXTENSION: HRESULT = -2147417838

val RPC_E_INVALID_IPID: HRESULT = -2147417837

val RPC_E_INVALID_OBJECT: HRESULT = -2147417836

val RPC_S_CALLPENDING: HRESULT = -2147417835

val RPC_S_WAITONTIMER: HRESULT = -2147417834

val RPC_E_CALL_COMPLETE: HRESULT = -2147417833

val RPC_E_UNSECURE_CALL: HRESULT = -2147417832

val RPC_E_TOO_LATE: HRESULT = -2147417831

val RPC_E_NO_GOOD_SECURITY_PACKAGES: HRESULT = -2147417830

val RPC_E_ACCESS_DENIED: HRESULT = -2147417829

val RPC_E_REMOTE_DISABLED: HRESULT = -2147417828

val RPC_E_INVALID_OBJREF: HRESULT = -2147417827

val RPC_E_NO_CONTEXT: HRESULT = -2147417826

val RPC_E_TIMEOUT: HRESULT = -2147417825

val RPC_E_NO_SYNC: HRESULT = -2147417824

val RPC_E_FULLSIC_REQUIRED: HRESULT = -2147417823

val RPC_E_INVALID_STD_NAME: HRESULT = -2147417822

val CO_E_FAILEDTOIMPERSONATE: HRESULT = -2147417821

val CO_E_FAILEDTOGETSECCTX: HRESULT = -2147417820

val CO_E_FAILEDTOOPENTHREADTOKEN: HRESULT = -2147417819

val CO_E_FAILEDTOGETTOKENINFO: HRESULT = -2147417818

val CO_E_TRUSTEEDOESNTMATCHCLIENT: HRESULT = -2147417817

val CO_E_FAILEDTOQUERYCLIENTBLANKET: HRESULT = -2147417816

val CO_E_FAILEDTOSETDACL: HRESULT = -2147417815

val CO_E_ACCESSCHECKFAILED: HRESULT = -2147417814

val CO_E_NETACCESSAPIFAILED: HRESULT = -2147417813

val CO_E_WRONGTRUSTEENAMESYNTAX: HRESULT = -2147417812

val CO_E_INVALIDSID: HRESULT = -2147417811

val CO_E_CONVERSIONFAILED: HRESULT = -2147417810

val CO_E_NOMATCHINGSIDFOUND: HRESULT = -2147417809

val CO_E_LOOKUPACCSIDFAILED: HRESULT = -2147417808

val CO_E_NOMATCHINGNAMEFOUND: HRESULT = -2147417807

val CO_E_LOOKUPACCNAMEFAILED: HRESULT = -2147417806

val CO_E_SETSERLHNDLFAILED: HRESULT = -2147417805

val CO_E_FAILEDTOGETWINDIR: HRESULT = -2147417804

val CO_E_PATHTOOLONG: HRESULT = -2147417803

val CO_E_FAILEDTOGENUUID: HRESULT = -2147417802

val CO_E_FAILEDTOCREATEFILE: HRESULT = -2147417801

val CO_E_FAILEDTOCLOSEHANDLE: HRESULT = -2147417800

val CO_E_EXCEEDSYSACLLIMIT: HRESULT = -2147417799

val CO_E_ACESINWRONGORDER: HRESULT = -2147417798

val CO_E_INCOMPATIBLESTREAMVERSION: HRESULT = -2147417797

val CO_E_FAILEDTOOPENPROCESSTOKEN: HRESULT = -2147417796

val CO_E_DECODEFAILED: HRESULT = -2147417795

val CO_E_ACNOTINITIALIZED: HRESULT = -2147417793

val CO_E_CANCEL_DISABLED: HRESULT = -2147417792

val RPC_E_UNEXPECTED: HRESULT = -2147352577

val ERROR_AUDITING_DISABLED: HRESULT = -1073151999

val ERROR_ALL_SIDS_FILTERED: HRESULT = -1073151998

val NTE_BAD_UID: HRESULT = -2146893823

val NTE_BAD_HASH: HRESULT = -2146893822

val NTE_BAD_KEY: HRESULT = -2146893821

val NTE_BAD_LEN: HRESULT = -2146893820

val NTE_BAD_DATA: HRESULT = -2146893819

val NTE_BAD_SIGNATURE: HRESULT = -2146893818

val NTE_BAD_VER: HRESULT = -2146893817

val NTE_BAD_ALGID: HRESULT = -2146893816

val NTE_BAD_FLAGS: HRESULT = -2146893815

val NTE_BAD_TYPE: HRESULT = -2146893814

val NTE_BAD_KEY_STATE: HRESULT = -2146893813

val NTE_BAD_HASH_STATE: HRESULT = -2146893812

val NTE_NO_KEY: HRESULT = -2146893811

val NTE_NO_MEMORY: HRESULT = -2146893810

val NTE_EXISTS: HRESULT = -2146893809

val NTE_PERM: HRESULT = -2146893808

val NTE_NOT_FOUND: HRESULT = -2146893807

val NTE_DOUBLE_ENCRYPT: HRESULT = -2146893806

val NTE_BAD_PROVIDER: HRESULT = -2146893805

val NTE_BAD_PROV_TYPE: HRESULT = -2146893804

val NTE_BAD_PUBLIC_KEY: HRESULT = -2146893803

val NTE_BAD_KEYSET: HRESULT = -2146893802

val NTE_PROV_TYPE_NOT_DEF: HRESULT = -2146893801

val NTE_PROV_TYPE_ENTRY_BAD: HRESULT = -2146893800

val NTE_KEYSET_NOT_DEF: HRESULT = -2146893799

val NTE_KEYSET_ENTRY_BAD: HRESULT = -2146893798

val NTE_PROV_TYPE_NO_MATCH: HRESULT = -2146893797

val NTE_SIGNATURE_FILE_BAD: HRESULT = -2146893796

val NTE_PROVIDER_DLL_FAIL: HRESULT = -2146893795

val NTE_PROV_DLL_NOT_FOUND: HRESULT = -2146893794

val NTE_BAD_KEYSET_PARAM: HRESULT = -2146893793

val NTE_FAIL: HRESULT = -2146893792

val NTE_SYS_ERR: HRESULT = -2146893791

val NTE_SILENT_CONTEXT: HRESULT = -2146893790

val NTE_TOKEN_KEYSET_STORAGE_FULL: HRESULT = -2146893789

val NTE_TEMPORARY_PROFILE: HRESULT = -2146893788

val NTE_FIXEDPARAMETER: HRESULT = -2146893787

val SEC_E_INSUFFICIENT_MEMORY: HRESULT = -2146893056

val SEC_E_INVALID_HANDLE: HRESULT = -2146893055

val SEC_E_UNSUPPORTED_FUNCTION: HRESULT = -2146893054

val SEC_E_TARGET_UNKNOWN: HRESULT = -2146893053

val SEC_E_INTERNAL_ERROR: HRESULT = -2146893052

val SEC_E_SECPKG_NOT_FOUND: HRESULT = -2146893051

val SEC_E_NOT_OWNER: HRESULT = -2146893050

val SEC_E_CANNOT_INSTALL: HRESULT = -2146893049

val SEC_E_INVALID_TOKEN: HRESULT = -2146893048

val SEC_E_CANNOT_PACK: HRESULT = -2146893047

val SEC_E_QOP_NOT_SUPPORTED: HRESULT = -2146893046

val SEC_E_NO_IMPERSONATION: HRESULT = -2146893045

val SEC_E_LOGON_DENIED: HRESULT = -2146893044

val SEC_E_UNKNOWN_CREDENTIALS: HRESULT = -2146893043

val SEC_E_NO_CREDENTIALS: HRESULT = -2146893042

val SEC_E_MESSAGE_ALTERED: HRESULT = -2146893041

val SEC_E_OUT_OF_SEQUENCE: HRESULT = -2146893040

val SEC_E_NO_AUTHENTICATING_AUTHORITY: HRESULT = -2146893039

val SEC_I_CONTINUE_NEEDED: HRESULT = 590610

val SEC_I_COMPLETE_NEEDED: HRESULT = 590611

val SEC_I_COMPLETE_AND_CONTINUE: HRESULT = 590612

val SEC_I_LOCAL_LOGON: HRESULT = 590613

val SEC_E_BAD_PKGID: HRESULT = -2146893034

val SEC_E_CONTEXT_EXPIRED: HRESULT = -2146893033

val SEC_I_CONTEXT_EXPIRED: HRESULT = 590615

val SEC_E_INCOMPLETE_MESSAGE: HRESULT = -2146893032

val SEC_E_INCOMPLETE_CREDENTIALS: HRESULT = -2146893024

val SEC_E_BUFFER_TOO_SMALL: HRESULT = -2146893023

val SEC_I_INCOMPLETE_CREDENTIALS: HRESULT = 590624

val SEC_I_RENEGOTIATE: HRESULT = 590625

val SEC_E_WRONG_PRINCIPAL: HRESULT = -2146893022

val SEC_I_NO_LSA_CONTEXT: HRESULT = 590627

val SEC_E_TIME_SKEW: HRESULT = -2146893020

val SEC_E_UNTRUSTED_ROOT: HRESULT = -2146893019

val SEC_E_ILLEGAL_MESSAGE: HRESULT = -2146893018

val SEC_E_CERT_UNKNOWN: HRESULT = -2146893017

val SEC_E_CERT_EXPIRED: HRESULT = -2146893016

val SEC_E_ENCRYPT_FAILURE: HRESULT = -2146893015

val SEC_E_DECRYPT_FAILURE: HRESULT = -2146893008

val SEC_E_ALGORITHM_MISMATCH: HRESULT = -2146893007

val SEC_E_SECURITY_QOS_FAILED: HRESULT = -2146893006

val SEC_E_UNFINISHED_CONTEXT_DELETED: HRESULT = -2146893005

val SEC_E_NO_TGT_REPLY: HRESULT = -2146893004

val SEC_E_NO_IP_ADDRESSES: HRESULT = -2146893003

val SEC_E_WRONG_CREDENTIAL_HANDLE: HRESULT = -2146893002

val SEC_E_CRYPTO_SYSTEM_INVALID: HRESULT = -2146893001

val SEC_E_MAX_REFERRALS_EXCEEDED: HRESULT = -2146893000

val SEC_E_MUST_BE_KDC: HRESULT = -2146892999

val SEC_E_STRONG_CRYPTO_NOT_SUPPORTED: HRESULT = -2146892998

val SEC_E_TOO_MANY_PRINCIPALS: HRESULT = -2146892997

val SEC_E_NO_PA_DATA: HRESULT = -2146892996

val SEC_E_PKINIT_NAME_MISMATCH: HRESULT = -2146892995

val SEC_E_SMARTCARD_LOGON_REQUIRED: HRESULT = -2146892994

val SEC_E_SHUTDOWN_IN_PROGRESS: HRESULT = -2146892993

val SEC_E_KDC_INVALID_REQUEST: HRESULT = -2146892992

val SEC_E_KDC_UNABLE_TO_REFER: HRESULT = -2146892991

val SEC_E_KDC_UNKNOWN_ETYPE: HRESULT = -2146892990

val SEC_E_UNSUPPORTED_PREAUTH: HRESULT = -2146892989

val SEC_E_DELEGATION_REQUIRED: HRESULT = -2146892987

val SEC_E_BAD_BINDINGS: HRESULT = -2146892986

val SEC_E_MULTIPLE_ACCOUNTS: HRESULT = -2146892985

val SEC_E_NO_KERB_KEY: HRESULT = -2146892984

val SEC_E_CERT_WRONG_USAGE: HRESULT = -2146892983

val SEC_E_DOWNGRADE_DETECTED: HRESULT = -2146892976

val SEC_E_SMARTCARD_CERT_REVOKED: HRESULT = -2146892975

val SEC_E_ISSUING_CA_UNTRUSTED: HRESULT = -2146892974

val SEC_E_REVOCATION_OFFLINE_C: HRESULT = -2146892973

val SEC_E_PKINIT_CLIENT_FAILURE: HRESULT = -2146892972

val SEC_E_SMARTCARD_CERT_EXPIRED: HRESULT = -2146892971

val SEC_E_NO_S4U_PROT_SUPPORT: HRESULT = -2146892970

val SEC_E_CROSSREALM_DELEGATION_FAILURE: HRESULT = -2146892969

val SEC_E_REVOCATION_OFFLINE_KDC: HRESULT = -2146892968

val SEC_E_ISSUING_CA_UNTRUSTED_KDC: HRESULT = -2146892967

val SEC_E_KDC_CERT_EXPIRED: HRESULT = -2146892966

val SEC_E_KDC_CERT_REVOKED: HRESULT = -2146892965

val SEC_E_NO_SPM: HRESULT = -2146893052

val SEC_E_NOT_SUPPORTED: HRESULT = -2146893054

val CRYPT_E_MSG_ERROR: HRESULT = -2146889727

val CRYPT_E_UNKNOWN_ALGO: HRESULT = -2146889726

val CRYPT_E_OID_FORMAT: HRESULT = -2146889725

val CRYPT_E_INVALID_MSG_TYPE: HRESULT = -2146889724

val CRYPT_E_UNEXPECTED_ENCODING: HRESULT = -2146889723

val CRYPT_E_AUTH_ATTR_MISSING: HRESULT = -2146889722

val CRYPT_E_HASH_VALUE: HRESULT = -2146889721

val CRYPT_E_INVALID_INDEX: HRESULT = -2146889720

val CRYPT_E_ALREADY_DECRYPTED: HRESULT = -2146889719

val CRYPT_E_NOT_DECRYPTED: HRESULT = -2146889718

val CRYPT_E_RECIPIENT_NOT_FOUND: HRESULT = -2146889717

val CRYPT_E_CONTROL_TYPE: HRESULT = -2146889716

val CRYPT_E_ISSUER_SERIALNUMBER: HRESULT = -2146889715

val CRYPT_E_SIGNER_NOT_FOUND: HRESULT = -2146889714

val CRYPT_E_ATTRIBUTES_MISSING: HRESULT = -2146889713

val CRYPT_E_STREAM_MSG_NOT_READY: HRESULT = -2146889712

val CRYPT_E_STREAM_INSUFFICIENT_DATA: HRESULT = -2146889711

val CRYPT_I_NEW_PROTECTION_REQUIRED: HRESULT = 593938

val CRYPT_E_BAD_LEN: HRESULT = -2146885631

val CRYPT_E_BAD_ENCODE: HRESULT = -2146885630

val CRYPT_E_FILE_ERROR: HRESULT = -2146885629

val CRYPT_E_NOT_FOUND: HRESULT = -2146885628

val CRYPT_E_EXISTS: HRESULT = -2146885627

val CRYPT_E_NO_PROVIDER: HRESULT = -2146885626

val CRYPT_E_SELF_SIGNED: HRESULT = -2146885625

val CRYPT_E_DELETED_PREV: HRESULT = -2146885624

val CRYPT_E_NO_MATCH: HRESULT = -2146885623

val CRYPT_E_UNEXPECTED_MSG_TYPE: HRESULT = -2146885622

val CRYPT_E_NO_KEY_PROPERTY: HRESULT = -2146885621

val CRYPT_E_NO_DECRYPT_CERT: HRESULT = -2146885620

val CRYPT_E_BAD_MSG: HRESULT = -2146885619

val CRYPT_E_NO_SIGNER: HRESULT = -2146885618

val CRYPT_E_PENDING_CLOSE: HRESULT = -2146885617

val CRYPT_E_REVOKED: HRESULT = -2146885616

val CRYPT_E_NO_REVOCATION_DLL: HRESULT = -2146885615

val CRYPT_E_NO_REVOCATION_CHECK: HRESULT = -2146885614

val CRYPT_E_REVOCATION_OFFLINE: HRESULT = -2146885613

val CRYPT_E_NOT_IN_REVOCATION_DATABASE: HRESULT = -2146885612

val CRYPT_E_INVALID_NUMERIC_STRING: HRESULT = -2146885600

val CRYPT_E_INVALID_PRINTABLE_STRING: HRESULT = -2146885599

val CRYPT_E_INVALID_IA5_STRING: HRESULT = -2146885598

val CRYPT_E_INVALID_X500_STRING: HRESULT = -2146885597

val CRYPT_E_NOT_CHAR_STRING: HRESULT = -2146885596

val CRYPT_E_FILERESIZED: HRESULT = -2146885595

val CRYPT_E_SECURITY_SETTINGS: HRESULT = -2146885594

val CRYPT_E_NO_VERIFY_USAGE_DLL: HRESULT = -2146885593

val CRYPT_E_NO_VERIFY_USAGE_CHECK: HRESULT = -2146885592

val CRYPT_E_VERIFY_USAGE_OFFLINE: HRESULT = -2146885591

val CRYPT_E_NOT_IN_CTL: HRESULT = -2146885590

val CRYPT_E_NO_TRUSTED_SIGNER: HRESULT = -2146885589

val CRYPT_E_MISSING_PUBKEY_PARA: HRESULT = -2146885588

val CRYPT_E_OSS_ERROR: HRESULT = -2146881536

val OSS_MORE_BUF: HRESULT = -2146881535

val OSS_NEGATIVE_UINTEGER: HRESULT = -2146881534

val OSS_PDU_RANGE: HRESULT = -2146881533

val OSS_MORE_INPUT: HRESULT = -2146881532

val OSS_DATA_ERROR: HRESULT = -2146881531

val OSS_BAD_ARG: HRESULT = -2146881530

val OSS_BAD_VERSION: HRESULT = -2146881529

val OSS_OUT_MEMORY: HRESULT = -2146881528

val OSS_PDU_MISMATCH: HRESULT = -2146881527

val OSS_LIMITED: HRESULT = -2146881526

val OSS_BAD_PTR: HRESULT = -2146881525

val OSS_BAD_TIME: HRESULT = -2146881524

val OSS_INDEFINITE_NOT_SUPPORTED: HRESULT = -2146881523

val OSS_MEM_ERROR: HRESULT = -2146881522

val OSS_BAD_TABLE: HRESULT = -2146881521

val OSS_TOO_LONG: HRESULT = -2146881520

val OSS_CONSTRAINT_VIOLATED: HRESULT = -2146881519

val OSS_FATAL_ERROR: HRESULT = -2146881518

val OSS_ACCESS_SERIALIZATION_ERROR: HRESULT = -2146881517

val OSS_NULL_TBL: HRESULT = -2146881516

val OSS_NULL_FCN: HRESULT = -2146881515

val OSS_BAD_ENCRULES: HRESULT = -2146881514

val OSS_UNAVAIL_ENCRULES: HRESULT = -2146881513

val OSS_CANT_OPEN_TRACE_WINDOW: HRESULT = -2146881512

val OSS_UNIMPLEMENTED: HRESULT = -2146881511

val OSS_OID_DLL_NOT_LINKED: HRESULT = -2146881510

val OSS_CANT_OPEN_TRACE_FILE: HRESULT = -2146881509

val OSS_TRACE_FILE_ALREADY_OPEN: HRESULT = -2146881508

val OSS_TABLE_MISMATCH: HRESULT = -2146881507

val OSS_TYPE_NOT_SUPPORTED: HRESULT = -2146881506

val OSS_REAL_DLL_NOT_LINKED: HRESULT = -2146881505

val OSS_REAL_CODE_NOT_LINKED: HRESULT = -2146881504

val OSS_OUT_OF_RANGE: HRESULT = -2146881503

val OSS_COPIER_DLL_NOT_LINKED: HRESULT = -2146881502

val OSS_CONSTRAINT_DLL_NOT_LINKED: HRESULT = -2146881501

val OSS_COMPARATOR_DLL_NOT_LINKED: HRESULT = -2146881500

val OSS_COMPARATOR_CODE_NOT_LINKED: HRESULT = -2146881499

val OSS_MEM_MGR_DLL_NOT_LINKED: HRESULT = -2146881498

val OSS_PDV_DLL_NOT_LINKED: HRESULT = -2146881497

val OSS_PDV_CODE_NOT_LINKED: HRESULT = -2146881496

val OSS_API_DLL_NOT_LINKED: HRESULT = -2146881495

val OSS_BERDER_DLL_NOT_LINKED: HRESULT = -2146881494

val OSS_PER_DLL_NOT_LINKED: HRESULT = -2146881493

val OSS_OPEN_TYPE_ERROR: HRESULT = -2146881492

val OSS_MUTEX_NOT_CREATED: HRESULT = -2146881491

val OSS_CANT_CLOSE_TRACE_FILE: HRESULT = -2146881490

val CRYPT_E_ASN1_ERROR: HRESULT = -2146881280

val CRYPT_E_ASN1_INTERNAL: HRESULT = -2146881279

val CRYPT_E_ASN1_EOD: HRESULT = -2146881278

val CRYPT_E_ASN1_CORRUPT: HRESULT = -2146881277

val CRYPT_E_ASN1_LARGE: HRESULT = -2146881276

val CRYPT_E_ASN1_CONSTRAINT: HRESULT = -2146881275

val CRYPT_E_ASN1_MEMORY: HRESULT = -2146881274

val CRYPT_E_ASN1_OVERFLOW: HRESULT = -2146881273

val CRYPT_E_ASN1_BADPDU: HRESULT = -2146881272

val CRYPT_E_ASN1_BADARGS: HRESULT = -2146881271

val CRYPT_E_ASN1_BADREAL: HRESULT = -2146881270

val CRYPT_E_ASN1_BADTAG: HRESULT = -2146881269

val CRYPT_E_ASN1_CHOICE: HRESULT = -2146881268

val CRYPT_E_ASN1_RULE: HRESULT = -2146881267

val CRYPT_E_ASN1_UTF8: HRESULT = -2146881266

val CRYPT_E_ASN1_PDU_TYPE: HRESULT = -2146881229

val CRYPT_E_ASN1_NYI: HRESULT = -2146881228

val CRYPT_E_ASN1_EXTENDED: HRESULT = -2146881023

val CRYPT_E_ASN1_NOEOD: HRESULT = -2146881022

val CERTSRV_E_BAD_REQUESTSUBJECT: HRESULT = -2146877439

val CERTSRV_E_NO_REQUEST: HRESULT = -2146877438

val CERTSRV_E_BAD_REQUESTSTATUS: HRESULT = -2146877437

val CERTSRV_E_PROPERTY_EMPTY: HRESULT = -2146877436

val CERTSRV_E_INVALID_CA_CERTIFICATE: HRESULT = -2146877435

val CERTSRV_E_SERVER_SUSPENDED: HRESULT = -2146877434

val CERTSRV_E_ENCODING_LENGTH: HRESULT = -2146877433

val CERTSRV_E_ROLECONFLICT: HRESULT = -2146877432

val CERTSRV_E_RESTRICTEDOFFICER: HRESULT = -2146877431

val CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED: HRESULT = -2146877430

val CERTSRV_E_NO_VALID_KRA: HRESULT = -2146877429

val CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL: HRESULT = -2146877428

val CERTSRV_E_NO_CAADMIN_DEFINED: HRESULT = -2146877427

val CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE: HRESULT = -2146877426

val CERTSRV_E_NO_DB_SESSIONS: HRESULT = -2146877425

val CERTSRV_E_ALIGNMENT_FAULT: HRESULT = -2146877424

val CERTSRV_E_ENROLL_DENIED: HRESULT = -2146877423

val CERTSRV_E_TEMPLATE_DENIED: HRESULT = -2146877422

val CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE: HRESULT = -2146877421

val CERTSRV_E_UNSUPPORTED_CERT_TYPE: HRESULT = -2146875392

val CERTSRV_E_NO_CERT_TYPE: HRESULT = -2146875391

val CERTSRV_E_TEMPLATE_CONFLICT: HRESULT = -2146875390

val CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED: HRESULT = -2146875389

val CERTSRV_E_ARCHIVED_KEY_REQUIRED: HRESULT = -2146875388

val CERTSRV_E_SMIME_REQUIRED: HRESULT = -2146875387

val CERTSRV_E_BAD_RENEWAL_SUBJECT: HRESULT = -2146875386

val CERTSRV_E_BAD_TEMPLATE_VERSION: HRESULT = -2146875385

val CERTSRV_E_TEMPLATE_POLICY_REQUIRED: HRESULT = -2146875384

val CERTSRV_E_SIGNATURE_POLICY_REQUIRED: HRESULT = -2146875383

val CERTSRV_E_SIGNATURE_COUNT: HRESULT = -2146875382

val CERTSRV_E_SIGNATURE_REJECTED: HRESULT = -2146875381

val CERTSRV_E_ISSUANCE_POLICY_REQUIRED: HRESULT = -2146875380

val CERTSRV_E_SUBJECT_UPN_REQUIRED: HRESULT = -2146875379

val CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED: HRESULT = -2146875378

val CERTSRV_E_SUBJECT_DNS_REQUIRED: HRESULT = -2146875377

val CERTSRV_E_ARCHIVED_KEY_UNEXPECTED: HRESULT = -2146875376

val CERTSRV_E_KEY_LENGTH: HRESULT = -2146875375

val CERTSRV_E_SUBJECT_EMAIL_REQUIRED: HRESULT = -2146875374

val CERTSRV_E_UNKNOWN_CERT_TYPE: HRESULT = -2146875373

val CERTSRV_E_CERT_TYPE_OVERLAP: HRESULT = -2146875372

val XENROLL_E_KEY_NOT_EXPORTABLE: HRESULT = -2146873344

val XENROLL_E_CANNOT_ADD_ROOT_CERT: HRESULT = -2146873343

val XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND: HRESULT = -2146873342

val XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH: HRESULT = -2146873341

val XENROLL_E_RESPONSE_KA_HASH_MISMATCH: HRESULT = -2146873340

val XENROLL_E_KEYSPEC_SMIME_MISMATCH: HRESULT = -2146873339

val TRUST_E_SYSTEM_ERROR: HRESULT = -2146869247

val TRUST_E_NO_SIGNER_CERT: HRESULT = -2146869246

val TRUST_E_COUNTER_SIGNER: HRESULT = -2146869245

val TRUST_E_CERT_SIGNATURE: HRESULT = -2146869244

val TRUST_E_TIME_STAMP: HRESULT = -2146869243

val TRUST_E_BAD_DIGEST: HRESULT = -2146869232

val TRUST_E_BASIC_CONSTRAINTS: HRESULT = -2146869223

val TRUST_E_FINANCIAL_CRITERIA: HRESULT = -2146869218

val MSSIPOTF_E_OUTOFMEMRANGE: HRESULT = -2146865151

val MSSIPOTF_E_CANTGETOBJECT: HRESULT = -2146865150

val MSSIPOTF_E_NOHEADTABLE: HRESULT = -2146865149

val MSSIPOTF_E_BAD_MAGICNUMBER: HRESULT = -2146865148

val MSSIPOTF_E_BAD_OFFSET_TABLE: HRESULT = -2146865147

val MSSIPOTF_E_TABLE_TAGORDER: HRESULT = -2146865146

val MSSIPOTF_E_TABLE_LONGWORD: HRESULT = -2146865145

val MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT: HRESULT = -2146865144

val MSSIPOTF_E_TABLES_OVERLAP: HRESULT = -2146865143

val MSSIPOTF_E_TABLE_PADBYTES: HRESULT = -2146865142

val MSSIPOTF_E_FILETOOSMALL: HRESULT = -2146865141

val MSSIPOTF_E_TABLE_CHECKSUM: HRESULT = -2146865140

val MSSIPOTF_E_FILE_CHECKSUM: HRESULT = -2146865139

val MSSIPOTF_E_FAILED_POLICY: HRESULT = -2146865136

val MSSIPOTF_E_FAILED_HINTS_CHECK: HRESULT = -2146865135

val MSSIPOTF_E_NOT_OPENTYPE: HRESULT = -2146865134

val MSSIPOTF_E_FILE: HRESULT = -2146865133

val MSSIPOTF_E_CRYPT: HRESULT = -2146865132

val MSSIPOTF_E_BADVERSION: HRESULT = -2146865131

val MSSIPOTF_E_DSIG_STRUCTURE: HRESULT = -2146865130

val MSSIPOTF_E_PCONST_CHECK: HRESULT = -2146865129

val MSSIPOTF_E_STRUCTURE: HRESULT = -2146865128

val NTE_OP_OK: Int = 0

val TRUST_E_PROVIDER_UNKNOWN: HRESULT = -2146762751

val TRUST_E_ACTION_UNKNOWN: HRESULT = -2146762750

val TRUST_E_SUBJECT_FORM_UNKNOWN: HRESULT = -2146762749

val TRUST_E_SUBJECT_NOT_TRUSTED: HRESULT = -2146762748

val DIGSIG_E_ENCODE: HRESULT = -2146762747

val DIGSIG_E_DECODE: HRESULT = -2146762746

val DIGSIG_E_EXTENSIBILITY: HRESULT = -2146762745

val DIGSIG_E_CRYPTO: HRESULT = -2146762744

val PERSIST_E_SIZEDEFINITE: HRESULT = -2146762743

val PERSIST_E_SIZEINDEFINITE: HRESULT = -2146762742

val PERSIST_E_NOTSELFSIZING: HRESULT = -2146762741

val TRUST_E_NOSIGNATURE: HRESULT = -2146762496

val CERT_E_EXPIRED: HRESULT = -2146762495

val CERT_E_VALIDITYPERIODNESTING: HRESULT = -2146762494

val CERT_E_ROLE: HRESULT = -2146762493

val CERT_E_PATHLENCONST: HRESULT = -2146762492

val CERT_E_CRITICAL: HRESULT = -2146762491

val CERT_E_PURPOSE: HRESULT = -2146762490

val CERT_E_ISSUERCHAINING: HRESULT = -2146762489

val CERT_E_MALFORMED: HRESULT = -2146762488

val CERT_E_UNTRUSTEDROOT: HRESULT = -2146762487

val CERT_E_CHAINING: HRESULT = -2146762486

val TRUST_E_FAIL: HRESULT = -2146762485

val CERT_E_REVOKED: HRESULT = -2146762484

val CERT_E_UNTRUSTEDTESTROOT: HRESULT = -2146762483

val CERT_E_REVOCATION_FAILURE: HRESULT = -2146762482

val CERT_E_CN_NO_MATCH: HRESULT = -2146762481

val CERT_E_WRONG_USAGE: HRESULT = -2146762480

val TRUST_E_EXPLICIT_DISTRUST: HRESULT = -2146762479

val CERT_E_UNTRUSTEDCA: HRESULT = -2146762478

val CERT_E_INVALID_POLICY: HRESULT = -2146762477

val CERT_E_INVALID_NAME: HRESULT = -2146762476

val SPAPI_E_EXPECTED_SECTION_NAME: HRESULT = -2146500608

val SPAPI_E_BAD_SECTION_NAME_LINE: HRESULT = -2146500607

val SPAPI_E_SECTION_NAME_TOO_LONG: HRESULT = -2146500606

val SPAPI_E_GENERAL_SYNTAX: HRESULT = -2146500605

val SPAPI_E_WRONG_INF_STYLE: HRESULT = -2146500352

val SPAPI_E_SECTION_NOT_FOUND: HRESULT = -2146500351

val SPAPI_E_LINE_NOT_FOUND: HRESULT = -2146500350

val SPAPI_E_NO_BACKUP: HRESULT = -2146500349

val SPAPI_E_NO_ASSOCIATED_CLASS: HRESULT = -2146500096

val SPAPI_E_CLASS_MISMATCH: HRESULT = -2146500095

val SPAPI_E_DUPLICATE_FOUND: HRESULT = -2146500094

val SPAPI_E_NO_DRIVER_SELECTED: HRESULT = -2146500093

val SPAPI_E_KEY_DOES_NOT_EXIST: HRESULT = -2146500092

val SPAPI_E_INVALID_DEVINST_NAME: HRESULT = -2146500091

val SPAPI_E_INVALID_CLASS: HRESULT = -2146500090

val SPAPI_E_DEVINST_ALREADY_EXISTS: HRESULT = -2146500089

val SPAPI_E_DEVINFO_NOT_REGISTERED: HRESULT = -2146500088

val SPAPI_E_INVALID_REG_PROPERTY: HRESULT = -2146500087

val SPAPI_E_NO_INF: HRESULT = -2146500086

val SPAPI_E_NO_SUCH_DEVINST: HRESULT = -2146500085

val SPAPI_E_CANT_LOAD_CLASS_ICON: HRESULT = -2146500084

val SPAPI_E_INVALID_CLASS_INSTALLER: HRESULT = -2146500083

val SPAPI_E_DI_DO_DEFAULT: HRESULT = -2146500082

val SPAPI_E_DI_NOFILECOPY: HRESULT = -2146500081

val SPAPI_E_INVALID_HWPROFILE: HRESULT = -2146500080

val SPAPI_E_NO_DEVICE_SELECTED: HRESULT = -2146500079

val SPAPI_E_DEVINFO_LIST_LOCKED: HRESULT = -2146500078

val SPAPI_E_DEVINFO_DATA_LOCKED: HRESULT = -2146500077

val SPAPI_E_DI_BAD_PATH: HRESULT = -2146500076

val SPAPI_E_NO_CLASSINSTALL_PARAMS: HRESULT = -2146500075

val SPAPI_E_FILEQUEUE_LOCKED: HRESULT = -2146500074

val SPAPI_E_BAD_SERVICE_INSTALLSECT: HRESULT = -2146500073

val SPAPI_E_NO_CLASS_DRIVER_LIST: HRESULT = -2146500072

val SPAPI_E_NO_ASSOCIATED_SERVICE: HRESULT = -2146500071

val SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE: HRESULT = -2146500070

val SPAPI_E_DEVICE_INTERFACE_ACTIVE: HRESULT = -2146500069

val SPAPI_E_DEVICE_INTERFACE_REMOVED: HRESULT = -2146500068

val SPAPI_E_BAD_INTERFACE_INSTALLSECT: HRESULT = -2146500067

val SPAPI_E_NO_SUCH_INTERFACE_CLASS: HRESULT = -2146500066

val SPAPI_E_INVALID_REFERENCE_STRING: HRESULT = -2146500065

val SPAPI_E_INVALID_MACHINENAME: HRESULT = -2146500064

val SPAPI_E_REMOTE_COMM_FAILURE: HRESULT = -2146500063

val SPAPI_E_MACHINE_UNAVAILABLE: HRESULT = -2146500062

val SPAPI_E_NO_CONFIGMGR_SERVICES: HRESULT = -2146500061

val SPAPI_E_INVALID_PROPPAGE_PROVIDER: HRESULT = -2146500060

val SPAPI_E_NO_SUCH_DEVICE_INTERFACE: HRESULT = -2146500059

val SPAPI_E_DI_POSTPROCESSING_REQUIRED: HRESULT = -2146500058

val SPAPI_E_INVALID_COINSTALLER: HRESULT = -2146500057

val SPAPI_E_NO_COMPAT_DRIVERS: HRESULT = -2146500056

val SPAPI_E_NO_DEVICE_ICON: HRESULT = -2146500055

val SPAPI_E_INVALID_INF_LOGCONFIG: HRESULT = -2146500054

val SPAPI_E_DI_DONT_INSTALL: HRESULT = -2146500053

val SPAPI_E_INVALID_FILTER_DRIVER: HRESULT = -2146500052

val SPAPI_E_NON_WINDOWS_NT_DRIVER: HRESULT = -2146500051

val SPAPI_E_NON_WINDOWS_DRIVER: HRESULT = -2146500050

val SPAPI_E_NO_CATALOG_FOR_OEM_INF: HRESULT = -2146500049

val SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE: HRESULT = -2146500048

val SPAPI_E_NOT_DISABLEABLE: HRESULT = -2146500047

val SPAPI_E_CANT_REMOVE_DEVINST: HRESULT = -2146500046

val SPAPI_E_INVALID_TARGET: HRESULT = -2146500045

val SPAPI_E_DRIVER_NONNATIVE: HRESULT = -2146500044

val SPAPI_E_IN_WOW64: HRESULT = -2146500043

val SPAPI_E_SET_SYSTEM_RESTORE_POINT: HRESULT = -2146500042

val SPAPI_E_INCORRECTLY_COPIED_INF: HRESULT = -2146500041

val SPAPI_E_SCE_DISABLED: HRESULT = -2146500040

val SPAPI_E_UNKNOWN_EXCEPTION: HRESULT = -2146500039

val SPAPI_E_PNP_REGISTRY_ERROR: HRESULT = -2146500038

val SPAPI_E_REMOTE_REQUEST_UNSUPPORTED: HRESULT = -2146500037

val SPAPI_E_NOT_AN_INSTALLED_OEM_INF: HRESULT = -2146500036

val SPAPI_E_INF_IN_USE_BY_DEVICES: HRESULT = -2146500035

val SPAPI_E_DI_FUNCTION_OBSOLETE: HRESULT = -2146500034

val SPAPI_E_NO_AUTHENTICODE_CATALOG: HRESULT = -2146500033

val SPAPI_E_AUTHENTICODE_DISALLOWED: HRESULT = -2146500032

val SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER: HRESULT = -2146500031

val SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED: HRESULT = -2146500030

val SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED: HRESULT = -2146500029

val SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH: HRESULT = -2146500028

val SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE: HRESULT = -2146500027

val SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW: HRESULT = -2146499840

val SPAPI_E_ERROR_NOT_INSTALLED: HRESULT = -2146496512

val SCARD_S_SUCCESS: Int = 0

val SCARD_F_INTERNAL_ERROR: HRESULT = -2146435071

val SCARD_E_CANCELLED: HRESULT = -2146435070

val SCARD_E_INVALID_HANDLE: HRESULT = -2146435069

val SCARD_E_INVALID_PARAMETER: HRESULT = -2146435068

val SCARD_E_INVALID_TARGET: HRESULT = -2146435067

val SCARD_E_NO_MEMORY: HRESULT = -2146435066

val SCARD_F_WAITED_TOO_LONG: HRESULT = -2146435065

val SCARD_E_INSUFFICIENT_BUFFER: HRESULT = -2146435064

val SCARD_E_UNKNOWN_READER: HRESULT = -2146435063

val SCARD_E_TIMEOUT: HRESULT = -2146435062

val SCARD_E_SHARING_VIOLATION: HRESULT = -2146435061

val SCARD_E_NO_SMARTCARD: HRESULT = -2146435060

val SCARD_E_UNKNOWN_CARD: HRESULT = -2146435059

val SCARD_E_CANT_DISPOSE: HRESULT = -2146435058

val SCARD_E_PROTO_MISMATCH: HRESULT = -2146435057

val SCARD_E_NOT_READY: HRESULT = -2146435056

val SCARD_E_INVALID_VALUE: HRESULT = -2146435055

val SCARD_E_SYSTEM_CANCELLED: HRESULT = -2146435054

val SCARD_F_COMM_ERROR: HRESULT = -2146435053

val SCARD_F_UNKNOWN_ERROR: HRESULT = -2146435052

val SCARD_E_INVALID_ATR: HRESULT = -2146435051

val SCARD_E_NOT_TRANSACTED: HRESULT = -2146435050

val SCARD_E_READER_UNAVAILABLE: HRESULT = -2146435049

val SCARD_P_SHUTDOWN: HRESULT = -2146435048

val SCARD_E_PCI_TOO_SMALL: HRESULT = -2146435047

val SCARD_E_READER_UNSUPPORTED: HRESULT = -2146435046

val SCARD_E_DUPLICATE_READER: HRESULT = -2146435045

val SCARD_E_CARD_UNSUPPORTED: HRESULT = -2146435044

val SCARD_E_NO_SERVICE: HRESULT = -2146435043

val SCARD_E_SERVICE_STOPPED: HRESULT = -2146435042

val SCARD_E_UNEXPECTED: HRESULT = -2146435041

val SCARD_E_ICC_INSTALLATION: HRESULT = -2146435040

val SCARD_E_ICC_CREATEORDER: HRESULT = -2146435039

val SCARD_E_UNSUPPORTED_FEATURE: HRESULT = -2146435038

val SCARD_E_DIR_NOT_FOUND: HRESULT = -2146435037

val SCARD_E_FILE_NOT_FOUND: HRESULT = -2146435036

val SCARD_E_NO_DIR: HRESULT = -2146435035

val SCARD_E_NO_FILE: HRESULT = -2146435034

val SCARD_E_NO_ACCESS: HRESULT = -2146435033

val SCARD_E_WRITE_TOO_MANY: HRESULT = -2146435032

val SCARD_E_BAD_SEEK: HRESULT = -2146435031

val SCARD_E_INVALID_CHV: HRESULT = -2146435030

val SCARD_E_UNKNOWN_RES_MNG: HRESULT = -2146435029

val SCARD_E_NO_SUCH_CERTIFICATE: HRESULT = -2146435028

val SCARD_E_CERTIFICATE_UNAVAILABLE: HRESULT = -2146435027

val SCARD_E_NO_READERS_AVAILABLE: HRESULT = -2146435026

val SCARD_E_COMM_DATA_LOST: HRESULT = -2146435025

val SCARD_E_NO_KEY_CONTAINER: HRESULT = -2146435024

val SCARD_E_SERVER_TOO_BUSY: HRESULT = -2146435023

val SCARD_W_UNSUPPORTED_CARD: HRESULT = -2146434971

val SCARD_W_UNRESPONSIVE_CARD: HRESULT = -2146434970

val SCARD_W_UNPOWERED_CARD: HRESULT = -2146434969

val SCARD_W_RESET_CARD: HRESULT = -2146434968

val SCARD_W_REMOVED_CARD: HRESULT = -2146434967

val SCARD_W_SECURITY_VIOLATION: HRESULT = -2146434966

val SCARD_W_WRONG_CHV: HRESULT = -2146434965

val SCARD_W_CHV_BLOCKED: HRESULT = -2146434964

val SCARD_W_EOF: HRESULT = -2146434963

val SCARD_W_CANCELLED_BY_USER: HRESULT = -2146434962

val SCARD_W_CARD_NOT_AUTHENTICATED: HRESULT = -2146434961

val SCARD_W_CACHE_ITEM_NOT_FOUND: HRESULT = -2146434960

val SCARD_W_CACHE_ITEM_STALE: HRESULT = -2146434959

val COMADMIN_E_OBJECTERRORS: HRESULT = -2146368511

val COMADMIN_E_OBJECTINVALID: HRESULT = -2146368510

val COMADMIN_E_KEYMISSING: HRESULT = -2146368509

val COMADMIN_E_ALREADYINSTALLED: HRESULT = -2146368508

val COMADMIN_E_APP_FILE_WRITEFAIL: HRESULT = -2146368505

val COMADMIN_E_APP_FILE_READFAIL: HRESULT = -2146368504

val COMADMIN_E_APP_FILE_VERSION: HRESULT = -2146368503

val COMADMIN_E_BADPATH: HRESULT = -2146368502

val COMADMIN_E_APPLICATIONEXISTS: HRESULT = -2146368501

val COMADMIN_E_ROLEEXISTS: HRESULT = -2146368500

val COMADMIN_E_CANTCOPYFILE: HRESULT = -2146368499

val COMADMIN_E_NOUSER: HRESULT = -2146368497

val COMADMIN_E_INVALIDUSERIDS: HRESULT = -2146368496

val COMADMIN_E_NOREGISTRYCLSID: HRESULT = -2146368495

val COMADMIN_E_BADREGISTRYPROGID: HRESULT = -2146368494

val COMADMIN_E_AUTHENTICATIONLEVEL: HRESULT = -2146368493

val COMADMIN_E_USERPASSWDNOTVALID: HRESULT = -2146368492

val COMADMIN_E_CLSIDORIIDMISMATCH: HRESULT = -2146368488

val COMADMIN_E_REMOTEINTERFACE: HRESULT = -2146368487

val COMADMIN_E_DLLREGISTERSERVER: HRESULT = -2146368486

val COMADMIN_E_NOSERVERSHARE: HRESULT = -2146368485

val COMADMIN_E_DLLLOADFAILED: HRESULT = -2146368483

val COMADMIN_E_BADREGISTRYLIBID: HRESULT = -2146368482

val COMADMIN_E_APPDIRNOTFOUND: HRESULT = -2146368481

val COMADMIN_E_REGISTRARFAILED: HRESULT = -2146368477

val COMADMIN_E_COMPFILE_DOESNOTEXIST: HRESULT = -2146368476

val COMADMIN_E_COMPFILE_LOADDLLFAIL: HRESULT = -2146368475

val COMADMIN_E_COMPFILE_GETCLASSOBJ: HRESULT = -2146368474

val COMADMIN_E_COMPFILE_CLASSNOTAVAIL: HRESULT = -2146368473

val COMADMIN_E_COMPFILE_BADTLB: HRESULT = -2146368472

val COMADMIN_E_COMPFILE_NOTINSTALLABLE: HRESULT = -2146368471

val COMADMIN_E_NOTCHANGEABLE: HRESULT = -2146368470

val COMADMIN_E_NOTDELETEABLE: HRESULT = -2146368469

val COMADMIN_E_SESSION: HRESULT = -2146368468

val COMADMIN_E_COMP_MOVE_LOCKED: HRESULT = -2146368467

val COMADMIN_E_COMP_MOVE_BAD_DEST: HRESULT = -2146368466

val COMADMIN_E_REGISTERTLB: HRESULT = -2146368464

val COMADMIN_E_SYSTEMAPP: HRESULT = -2146368461

val COMADMIN_E_COMPFILE_NOREGISTRAR: HRESULT = -2146368460

val COMADMIN_E_COREQCOMPINSTALLED: HRESULT = -2146368459

val COMADMIN_E_SERVICENOTINSTALLED: HRESULT = -2146368458

val COMADMIN_E_PROPERTYSAVEFAILED: HRESULT = -2146368457

val COMADMIN_E_OBJECTEXISTS: HRESULT = -2146368456

val COMADMIN_E_COMPONENTEXISTS: HRESULT = -2146368455

val COMADMIN_E_REGFILE_CORRUPT: HRESULT = -2146368453

val COMADMIN_E_PROPERTY_OVERFLOW: HRESULT = -2146368452

val COMADMIN_E_NOTINREGISTRY: HRESULT = -2146368450

val COMADMIN_E_OBJECTNOTPOOLABLE: HRESULT = -2146368449

val COMADMIN_E_APPLID_MATCHES_CLSID: HRESULT = -2146368442

val COMADMIN_E_ROLE_DOES_NOT_EXIST: HRESULT = -2146368441

val COMADMIN_E_START_APP_NEEDS_COMPONENTS: HRESULT = -2146368440

val COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM: HRESULT = -2146368439

val COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY: HRESULT = -2146368438

val COMADMIN_E_CAN_NOT_START_APP: HRESULT = -2146368437

val COMADMIN_E_CAN_NOT_EXPORT_SYS_APP: HRESULT = -2146368436

val COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT: HRESULT = -2146368435

val COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER: HRESULT = -2146368434

val COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE: HRESULT = -2146368433

val COMADMIN_E_BASE_PARTITION_ONLY: HRESULT = -2146368432

val COMADMIN_E_START_APP_DISABLED: HRESULT = -2146368431

val COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME: HRESULT = -2146368425

val COMADMIN_E_CAT_INVALID_PARTITION_NAME: HRESULT = -2146368424

val COMADMIN_E_CAT_PARTITION_IN_USE: HRESULT = -2146368423

val COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES: HRESULT = -2146368422

val COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED: HRESULT = -2146368421

val COMADMIN_E_AMBIGUOUS_APPLICATION_NAME: HRESULT = -2146368420

val COMADMIN_E_AMBIGUOUS_PARTITION_NAME: HRESULT = -2146368419

val COMADMIN_E_REGDB_NOTINITIALIZED: HRESULT = -2146368398

val COMADMIN_E_REGDB_NOTOPEN: HRESULT = -2146368397

val COMADMIN_E_REGDB_SYSTEMERR: HRESULT = -2146368396

val COMADMIN_E_REGDB_ALREADYRUNNING: HRESULT = -2146368395

val COMADMIN_E_MIG_VERSIONNOTSUPPORTED: HRESULT = -2146368384

val COMADMIN_E_MIG_SCHEMANOTFOUND: HRESULT = -2146368383

val COMADMIN_E_CAT_BITNESSMISMATCH: HRESULT = -2146368382

val COMADMIN_E_CAT_UNACCEPTABLEBITNESS: HRESULT = -2146368381

val COMADMIN_E_CAT_WRONGAPPBITNESS: HRESULT = -2146368380

val COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED: HRESULT = -2146368379

val COMADMIN_E_CAT_SERVERFAULT: HRESULT = -2146368378

val COMQC_E_APPLICATION_NOT_QUEUED: HRESULT = -2146368000

val COMQC_E_NO_QUEUEABLE_INTERFACES: HRESULT = -2146367999

val COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE: HRESULT = -2146367998

val COMQC_E_NO_IPERSISTSTREAM: HRESULT = -2146367997

val COMQC_E_BAD_MESSAGE: HRESULT = -2146367996

val COMQC_E_UNAUTHENTICATED: HRESULT = -2146367995

val COMQC_E_UNTRUSTED_ENQUEUER: HRESULT = -2146367994

val MSDTC_E_DUPLICATE_RESOURCE: HRESULT = -2146367743

val COMADMIN_E_OBJECT_PARENT_MISSING: HRESULT = -2146367480

val COMADMIN_E_OBJECT_DOES_NOT_EXIST: HRESULT = -2146367479

val COMADMIN_E_APP_NOT_RUNNING: HRESULT = -2146367478

val COMADMIN_E_INVALID_PARTITION: HRESULT = -2146367477

val COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE: HRESULT = -2146367475

val COMADMIN_E_USER_IN_SET: HRESULT = -2146367474

val COMADMIN_E_CANTRECYCLELIBRARYAPPS: HRESULT = -2146367473

val COMADMIN_E_CANTRECYCLESERVICEAPPS: HRESULT = -2146367471

val COMADMIN_E_PROCESSALREADYRECYCLED: HRESULT = -2146367470

val COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED: HRESULT = -2146367469

val COMADMIN_E_CANTMAKEINPROCSERVICE: HRESULT = -2146367468

val COMADMIN_E_PROGIDINUSEBYCLSID: HRESULT = -2146367467

val COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET: HRESULT = -2146367466

val COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED: HRESULT = -2146367465

val COMADMIN_E_PARTITION_ACCESSDENIED: HRESULT = -2146367464

val COMADMIN_E_PARTITION_MSI_ONLY: HRESULT = -2146367463

val COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT: HRESULT = -2146367462

val COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS: HRESULT = -2146367461

val COMADMIN_E_COMP_MOVE_SOURCE: HRESULT = -2146367460

val COMADMIN_E_COMP_MOVE_DEST: HRESULT = -2146367459

val COMADMIN_E_COMP_MOVE_PRIVATE: HRESULT = -2146367458

val COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET: HRESULT = -2146367457

val COMADMIN_E_CANNOT_ALIAS_EVENTCLASS: HRESULT = -2146367456

val COMADMIN_E_PRIVATE_ACCESSDENIED: HRESULT = -2146367455

val COMADMIN_E_SAFERINVALID: HRESULT = -2146367454

val COMADMIN_E_REGISTRY_ACCESSDENIED: HRESULT = -2146367453

val COMADMIN_E_PARTITIONS_DISABLED: HRESULT = -2146367452

val VSS_E_BAD_STATE: HRESULT = -2147212543

val VSS_E_LEGACY_PROVIDER: HRESULT = -2147212297

val VSS_E_RESYNC_IN_PROGRESS: HRESULT = -2147212289

val VSS_E_SNAPSHOT_NOT_IN_SET: HRESULT = -2147212501

val VSS_E_MAXIMUM_NUMBER_OF_VOLUMES_REACHED: HRESULT = -2147212526

val VSS_E_MAXIMUM_NUMBER_OF_SNAPSHOTS_REACHED: HRESULT = -2147212521

val VSS_E_NESTED_VOLUME_LIMIT: HRESULT = -2147212500

val VSS_E_OBJECT_NOT_FOUND: HRESULT = -2147212536

val VSS_E_PROVIDER_NOT_REGISTERED: HRESULT = -2147212540

val VSS_E_PROVIDER_VETO: HRESULT = -2147212538

val VSS_E_VOLUME_NOT_SUPPORTED: HRESULT = -2147212532

val VSS_E_VOLUME_NOT_SUPPORTED_BY_PROVIDER: HRESULT = -2147212530

val VSS_E_UNEXPECTED: HRESULT = -2147212542

val VSS_E_UNEXPECTED_PROVIDER_ERROR: HRESULT = -2147212529

val VSS_E_UNSELECTED_VOLUME: HRESULT = -2147212502

val VSS_E_CANNOT_REVERT_DISKID: HRESULT = -2147212290

val VSS_E_INVALID_XML_DOCUMENT: HRESULT = -2147212527

val VSS_E_OBJECT_ALREADY_EXISTS: HRESULT = -2147212531

val DXGI_STATUS_OCCLUDED: HRESULT = 142213121

val DXGI_STATUS_CLIPPED: HRESULT = 142213122

val DXGI_STATUS_NO_REDIRECTION: HRESULT = 142213124

val DXGI_STATUS_NO_DESKTOP_ACCESS: HRESULT = 142213125

val DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE: HRESULT = 142213126

val DXGI_STATUS_MODE_CHANGED: HRESULT = 142213127

val DXGI_STATUS_MODE_CHANGE_IN_PROGRESS: HRESULT = 142213128

val DXGI_STATUS_UNOCCLUDED: HRESULT = 142213129

val DXGI_STATUS_DDA_WAS_STILL_DRAWING: HRESULT = 142213130

val DXGI_STATUS_PRESENT_REQUIRED: HRESULT = 142213167

val DXGI_ERROR_INVALID_CALL: HRESULT = -2005270527

val DXGI_ERROR_NOT_FOUND: HRESULT = -2005270526

val DXGI_ERROR_MORE_DATA: HRESULT = -2005270525

val DXGI_ERROR_UNSUPPORTED: HRESULT = -2005270524

val DXGI_ERROR_DEVICE_REMOVED: HRESULT = -2005270523

val DXGI_ERROR_DEVICE_HUNG: HRESULT = -2005270522

val DXGI_ERROR_DEVICE_RESET: HRESULT = -2005270521

val DXGI_ERROR_WAS_STILL_DRAWING: HRESULT = -2005270518

val DXGI_ERROR_FRAME_STATISTICS_DISJOINT: HRESULT = -2005270517

val DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE: HRESULT = -2005270516

val DXGI_ERROR_DRIVER_INTERNAL_ERROR: HRESULT = -2005270496

val DXGI_ERROR_NONEXCLUSIVE: HRESULT = -2005270495

val DXGI_ERROR_NOT_CURRENTLY_AVAILABLE: HRESULT = -2005270494

val DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED: HRESULT = -2005270493

val DXGI_ERROR_REMOTE_OUTOFMEMORY: HRESULT = -2005270492

val DXGI_ERROR_ACCESS_LOST: HRESULT = -2005270490

val DXGI_ERROR_WAIT_TIMEOUT: HRESULT = -2005270489

val DXGI_ERROR_SESSION_DISCONNECTED: HRESULT = -2005270488

val DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE: HRESULT = -2005270487

val DXGI_ERROR_CANNOT_PROTECT_CONTENT: HRESULT = -2005270486

val DXGI_ERROR_ACCESS_DENIED: HRESULT = -2005270485

val DXGI_ERROR_NAME_ALREADY_EXISTS: HRESULT = -2005270484

val DXGI_ERROR_SDK_COMPONENT_MISSING: HRESULT = -2005270483

val WINCODEC_ERR_WRONGSTATE: HRESULT = -2003292412

val WINCODEC_ERR_VALUEOUTOFRANGE: HRESULT = -2003292411

val WINCODEC_ERR_UNKNOWNIMAGEFORMAT: HRESULT = -2003292409

val WINCODEC_ERR_UNSUPPORTEDVERSION: HRESULT = -2003292405

val WINCODEC_ERR_NOTINITIALIZED: HRESULT = -2003292404

val WINCODEC_ERR_ALREADYLOCKED: HRESULT = -2003292403

val WINCODEC_ERR_PROPERTYNOTFOUND: HRESULT = -2003292352

val WINCODEC_ERR_PROPERTYNOTSUPPORTED: HRESULT = -2003292351

val WINCODEC_ERR_PROPERTYSIZE: HRESULT = -2003292350

val WINCODEC_ERR_CODECPRESENT: HRESULT = -2003292349

val WINCODEC_ERR_CODECNOTHUMBNAIL: HRESULT = -2003292348

val WINCODEC_ERR_PALETTEUNAVAILABLE: HRESULT = -2003292347

val WINCODEC_ERR_CODECTOOMANYSCANLINES: HRESULT = -2003292346

val WINCODEC_ERR_INTERNALERROR: HRESULT = -2003292344

val WINCODEC_ERR_SOURCERECTDOESNOTMATCHDIMENSIONS: HRESULT = -2003292343

val WINCODEC_ERR_COMPONENTNOTFOUND: HRESULT = -2003292336

val WINCODEC_ERR_IMAGESIZEOUTOFRANGE: HRESULT = -2003292335

val WINCODEC_ERR_TOOMUCHMETADATA: HRESULT = -2003292334

val WINCODEC_ERR_BADIMAGE: HRESULT = -2003292320

val WINCODEC_ERR_BADHEADER: HRESULT = -2003292319

val WINCODEC_ERR_FRAMEMISSING: HRESULT = -2003292318

val WINCODEC_ERR_BADMETADATAHEADER: HRESULT = -2003292317

val WINCODEC_ERR_BADSTREAMDATA: HRESULT = -2003292304

val WINCODEC_ERR_STREAMWRITE: HRESULT = -2003292303

val WINCODEC_ERR_STREAMREAD: HRESULT = -2003292302

val WINCODEC_ERR_STREAMNOTAVAILABLE: HRESULT = -2003292301

val WINCODEC_ERR_UNSUPPORTEDPIXELFORMAT: HRESULT = -2003292288

val WINCODEC_ERR_UNSUPPORTEDOPERATION: HRESULT = -2003292287

val WINCODEC_ERR_INVALIDREGISTRATION: HRESULT = -2003292278

val WINCODEC_ERR_COMPONENTINITIALIZEFAILURE: HRESULT = -2003292277

val WINCODEC_ERR_INSUFFICIENTBUFFER: HRESULT = -2003292276

val WINCODEC_ERR_DUPLICATEMETADATAPRESENT: HRESULT = -2003292275

val WINCODEC_ERR_PROPERTYUNEXPECTEDTYPE: HRESULT = -2003292274

val WINCODEC_ERR_UNEXPECTEDSIZE: HRESULT = -2003292273

val WINCODEC_ERR_INVALIDQUERYREQUEST: HRESULT = -2003292272

val WINCODEC_ERR_UNEXPECTEDMETADATATYPE: HRESULT = -2003292271

val WINCODEC_ERR_REQUESTONLYVALIDATMETADATAROOT: HRESULT = -2003292270

val WINCODEC_ERR_INVALIDQUERYCHARACTER: HRESULT = -2003292269

val WINCODEC_ERR_WIN32ERROR: HRESULT = -2003292268

val WINCODEC_ERR_INVALIDPROGRESSIVELEVEL: HRESULT = -2003292267

val NAP_E_INVALID_PACKET: HRESULT = -2144927743

val NAP_E_MISSING_SOH: HRESULT = -2144927742

val NAP_E_CONFLICTING_ID: HRESULT = -2144927741

val NAP_E_NO_CACHED_SOH: HRESULT = -2144927740

val NAP_E_STILL_BOUND: HRESULT = -2144927739

val NAP_E_NOT_REGISTERED: HRESULT = -2144927738

val NAP_E_NOT_INITIALIZED: HRESULT = -2144927737

val NAP_E_MISMATCHED_ID: HRESULT = -2144927736

val NAP_E_NOT_PENDING: HRESULT = -2144927735

val NAP_E_ID_NOT_FOUND: HRESULT = -2144927734

val NAP_E_MAXSIZE_TOO_SMALL: HRESULT = -2144927733

val NAP_E_SERVICE_NOT_RUNNING: HRESULT = -2144927732

val NAP_S_CERT_ALREADY_PRESENT: HRESULT = 2555917

val NAP_E_ENTITY_DISABLED: HRESULT = -2144927730

val NAP_E_NETSH_GROUPPOLICY_ERROR: HRESULT = -2144927729

val NAP_E_TOO_MANY_CALLS: HRESULT = -2144927728

val NAP_E_SHV_CONFIG_EXISTED: HRESULT = -2144927727

val NAP_E_SHV_CONFIG_NOT_FOUND: HRESULT = -2144927726

val NAP_E_SHV_TIMEOUT: HRESULT = -2144927725

val DWRITE_E_FILEFORMAT: HRESULT = -2003283968

val DWRITE_E_UNEXPECTED: HRESULT = -2003283967

val DWRITE_E_NOFONT: HRESULT = -2003283966

val DWRITE_E_FILENOTFOUND: HRESULT = -2003283965

val DWRITE_E_FILEACCESS: HRESULT = -2003283964

val DWRITE_E_FONTCOLLECTIONOBSOLETE: HRESULT = -2003283963

val DWRITE_E_ALREADYREGISTERED: HRESULT = -2003283962

val DWRITE_E_CACHEFORMAT: HRESULT = -2003283961

val DWRITE_E_CACHEVERSION: HRESULT = -2003283960

val DWRITE_E_UNSUPPORTEDOPERATION: HRESULT = -2003283959

val DWRITE_E_TEXTRENDERERINCOMPATIBLE: HRESULT = -2003283958

val DWRITE_E_FLOWDIRECTIONCONFLICTS: HRESULT = -2003283957

val DWRITE_E_NOCOLOR: HRESULT = -2003283956

val TC_NORMAL: Int = 0

val TC_HARDERR: Int = 1

val TC_GP_TRAP: Int = 2

val TC_SIGNAL: Int = 3

val AC_LINE_OFFLINE: Int = 0

val AC_LINE_ONLINE: Int = 1

val AC_LINE_BACKUP_POWER: Int = 2

val AC_LINE_UNKNOWN: Int = 255

val BATTERY_FLAG_HIGH: Int = 1

val BATTERY_FLAG_LOW: Int = 2

val BATTERY_FLAG_CRITICAL: Int = 4

val BATTERY_FLAG_CHARGING: Int = 8

val BATTERY_FLAG_NO_BATTERY: Int = 128

val BATTERY_FLAG_UNKNOWN: Int = 255

val BATTERY_PERCENTAGE_UNKNOWN: Int = 255

val BATTERY_LIFE_UNKNOWN: Int = -1

val ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID: Int = 1

val ACTCTX_FLAG_LANGID_VALID: Int = 2

val ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID: Int = 4

val ACTCTX_FLAG_RESOURCE_NAME_VALID: Int = 8

val ACTCTX_FLAG_SET_PROCESS_DEFAULT: Int = 16

val ACTCTX_FLAG_APPLICATION_NAME_VALID: Int = 32

val ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF: Int = 64

val ACTCTX_FLAG_HMODULE_VALID: Int = 128

val DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION: Int = 1

val FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX: Int = 1

val FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS: Int = 2

val FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA: Int = 4

val ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED: Int = 1

val QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX: Int = 4

val QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE: Int = 8

val QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS: Int = 16

val QUERY_ACTCTX_FLAG_NO_ADDREF: Int = -2147483648

val RESTART_MAX_CMD_LINE: Int = 1024

val RESTART_NO_CRASH: Int = 1

val RESTART_NO_HANG: Int = 2

val RESTART_NO_PATCH: Int = 4

val RESTART_NO_REBOOT: Int = 8

val RECOVERY_DEFAULT_PING_INTERVAL: Int = 5000

val RECOVERY_MAX_PING_INTERVAL: Int = 300000

val MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS: Int = 1

val MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS: Int = 0

val R2_BLACK: Int = 1

val R2_NOTMERGEPEN: Int = 2

val R2_MASKNOTPEN: Int = 3

val R2_NOTCOPYPEN: Int = 4

val R2_MASKPENNOT: Int = 5

val R2_NOT: Int = 6

val R2_XORPEN: Int = 7

val R2_NOTMASKPEN: Int = 8

val R2_MASKPEN: Int = 9

val R2_NOTXORPEN: Int = 10

val R2_NOP: Int = 11

val R2_MERGENOTPEN: Int = 12

val R2_COPYPEN: Int = 13

val R2_MERGEPENNOT: Int = 14

val R2_MERGEPEN: Int = 15

val R2_WHITE: Int = 16

val R2_LAST: Int = 16

val SRCCOPY: DWORD = 13369376

val SRCPAINT: DWORD = 15597702

val SRCAND: DWORD = 8913094

val SRCINVERT: DWORD = 6684742

val SRCERASE: DWORD = 4457256

val NOTSRCCOPY: DWORD = 3342344

val NOTSRCERASE: DWORD = 1114278

val MERGECOPY: DWORD = 12583114

val MERGEPAINT: DWORD = 12255782

val PATCOPY: DWORD = 15728673

val PATPAINT: DWORD = 16452105

val PATINVERT: DWORD = 5898313

val DSTINVERT: DWORD = 5570569

val BLACKNESS: DWORD = 66

val WHITENESS: DWORD = 16711778

val NOMIRRORBITMAP: DWORD = -2147483648

val CAPTUREBLT: DWORD = 1073741824

val GDI_ERROR: Int = -1

val ERROR: Int = 0

val NULLREGION: Int = 1

val SIMPLEREGION: Int = 2

val COMPLEXREGION: Int = 3

val RGN_ERROR: Int = 0

val RGN_AND: Int = 1

val RGN_OR: Int = 2

val RGN_XOR: Int = 3

val RGN_DIFF: Int = 4

val RGN_COPY: Int = 5

val RGN_MIN: Int = 1

val RGN_MAX: Int = 5

val BLACKONWHITE: Int = 1

val WHITEONBLACK: Int = 2

val COLORONCOLOR: Int = 3

val HALFTONE: Int = 4

val MAXSTRETCHBLTMODE: Int = 4

val STRETCH_ANDSCANS: Int = 1

val STRETCH_ORSCANS: Int = 2

val STRETCH_DELETESCANS: Int = 3

val STRETCH_HALFTONE: Int = 4

val ALTERNATE: Int = 1

val WINDING: Int = 2

val POLYFILL_LAST: Int = 2

val LAYOUT_RTL: Int = 1

val LAYOUT_BTT: Int = 2

val LAYOUT_VBH: Int = 4

val LAYOUT_ORIENTATIONMASK: Int = 7

val LAYOUT_BITMAPORIENTATIONPRESERVED: Int = 8

val TA_NOUPDATECP: Int = 0

val TA_UPDATECP: Int = 1

val TA_LEFT: Int = 0

val TA_RIGHT: Int = 2

val TA_CENTER: Int = 6

val TA_TOP: Int = 0

val TA_BOTTOM: Int = 8

val TA_BASELINE: Int = 24

val TA_RTLREADING: Int = 256

val TA_MASK: Int = 287

val VTA_BASELINE: Int = 24

val VTA_LEFT: Int = 8

val VTA_RIGHT: Int = 0

val VTA_CENTER: Int = 6

val VTA_BOTTOM: Int = 2

val VTA_TOP: Int = 0

val ETO_OPAQUE: Int = 2

val ETO_CLIPPED: Int = 4

val ETO_GLYPH_INDEX: Int = 16

val ETO_RTLREADING: Int = 128

val ETO_NUMERICSLOCAL: Int = 1024

val ETO_NUMERICSLATIN: Int = 2048

val ETO_IGNORELANGUAGE: Int = 4096

val ETO_PDY: Int = 8192

val ASPECT_FILTERING: Int = 1

val DCB_RESET: Int = 1

val DCB_ACCUMULATE: Int = 2

val DCB_DIRTY: Int = 2

val DCB_SET: Int = 3

val DCB_ENABLE: Int = 4

val DCB_DISABLE: Int = 8

val META_SETBKCOLOR: Int = 513

val META_SETBKMODE: Int = 258

val META_SETMAPMODE: Int = 259

val META_SETROP2: Int = 260

val META_SETRELABS: Int = 261

val META_SETPOLYFILLMODE: Int = 262

val META_SETSTRETCHBLTMODE: Int = 263

val META_SETTEXTCHAREXTRA: Int = 264

val META_SETTEXTCOLOR: Int = 521

val META_SETTEXTJUSTIFICATION: Int = 522

val META_SETWINDOWORG: Int = 523

val META_SETWINDOWEXT: Int = 524

val META_SETVIEWPORTORG: Int = 525

val META_SETVIEWPORTEXT: Int = 526

val META_OFFSETWINDOWORG: Int = 527

val META_SCALEWINDOWEXT: Int = 1040

val META_OFFSETVIEWPORTORG: Int = 529

val META_SCALEVIEWPORTEXT: Int = 1042

val META_LINETO: Int = 531

val META_MOVETO: Int = 532

val META_EXCLUDECLIPRECT: Int = 1045

val META_INTERSECTCLIPRECT: Int = 1046

val META_ARC: Int = 2071

val META_ELLIPSE: Int = 1048

val META_FLOODFILL: Int = 1049

val META_PIE: Int = 2074

val META_RECTANGLE: Int = 1051

val META_ROUNDRECT: Int = 1564

val META_PATBLT: Int = 1565

val META_SAVEDC: Int = 30

val META_SETPIXEL: Int = 1055

val META_OFFSETCLIPRGN: Int = 544

val META_TEXTOUT: Int = 1313

val META_BITBLT: Int = 2338

val META_STRETCHBLT: Int = 2851

val META_POLYGON: Int = 804

val META_POLYLINE: Int = 805

val META_ESCAPE: Int = 1574

val META_RESTOREDC: Int = 295

val META_FILLREGION: Int = 552

val META_FRAMEREGION: Int = 1065

val META_INVERTREGION: Int = 298

val META_PAINTREGION: Int = 299

val META_SELECTCLIPREGION: Int = 300

val META_SELECTOBJECT: Int = 301

val META_SETTEXTALIGN: Int = 302

val META_CHORD: Int = 2096

val META_SETMAPPERFLAGS: Int = 561

val META_EXTTEXTOUT: Int = 2610

val META_SETDIBTODEV: Int = 3379

val META_SELECTPALETTE: Int = 564

val META_REALIZEPALETTE: Int = 53

val META_ANIMATEPALETTE: Int = 1078

val META_SETPALENTRIES: Int = 55

val META_POLYPOLYGON: Int = 1336

val META_RESIZEPALETTE: Int = 313

val META_DIBBITBLT: Int = 2368

val META_DIBSTRETCHBLT: Int = 2881

val META_DIBCREATEPATTERNBRUSH: Int = 322

val META_STRETCHDIB: Int = 3907

val META_EXTFLOODFILL: Int = 1352

val META_SETLAYOUT: Int = 329

val META_DELETEOBJECT: Int = 496

val META_CREATEPALETTE: Int = 247

val META_CREATEPATTERNBRUSH: Int = 505

val META_CREATEPENINDIRECT: Int = 762

val META_CREATEFONTINDIRECT: Int = 763

val META_CREATEBRUSHINDIRECT: Int = 764

val META_CREATEREGION: Int = 1791

val NEWFRAME: Int = 1

val ABORTDOC: Int = 2

val NEXTBAND: Int = 3

val SETCOLORTABLE: Int = 4

val GETCOLORTABLE: Int = 5

val FLUSHOUTPUT: Int = 6

val DRAFTMODE: Int = 7

val QUERYESCSUPPORT: Int = 8

val SETABORTPROC: Int = 9

val STARTDOC: Int = 10

val ENDDOC: Int = 11

val GETPHYSPAGESIZE: Int = 12

val GETPRINTINGOFFSET: Int = 13

val GETSCALINGFACTOR: Int = 14

val MFCOMMENT: Int = 15

val GETPENWIDTH: Int = 16

val SETCOPYCOUNT: Int = 17

val SELECTPAPERSOURCE: Int = 18

val DEVICEDATA: Int = 19

val PASSTHROUGH: Int = 19

val GETTECHNOLGY: Int = 20

val GETTECHNOLOGY: Int = 20

val SETLINECAP: Int = 21

val SETLINEJOIN: Int = 22

val SETMITERLIMIT: Int = 23

val BANDINFO: Int = 24

val DRAWPATTERNRECT: Int = 25

val GETVECTORPENSIZE: Int = 26

val GETVECTORBRUSHSIZE: Int = 27

val ENABLEDUPLEX: Int = 28

val GETSETPAPERBINS: Int = 29

val GETSETPRINTORIENT: Int = 30

val ENUMPAPERBINS: Int = 31

val SETDIBSCALING: Int = 32

val EPSPRINTING: Int = 33

val ENUMPAPERMETRICS: Int = 34

val GETSETPAPERMETRICS: Int = 35

val POSTSCRIPT_DATA: Int = 37

val POSTSCRIPT_IGNORE: Int = 38

val MOUSETRAILS: Int = 39

val GETDEVICEUNITS: Int = 42

val GETEXTENDEDTEXTMETRICS: Int = 256

val GETEXTENTTABLE: Int = 257

val GETPAIRKERNTABLE: Int = 258

val GETTRACKKERNTABLE: Int = 259

val EXTTEXTOUT: Int = 512

val GETFACENAME: Int = 513

val DOWNLOADFACE: Int = 514

val ENABLERELATIVEWIDTHS: Int = 768

val ENABLEPAIRKERNING: Int = 769

val SETKERNTRACK: Int = 770

val SETALLJUSTVALUES: Int = 771

val SETCHARSET: Int = 772

val STRETCHBLT: Int = 2048

val METAFILE_DRIVER: Int = 2049

val GETSETSCREENPARAMS: Int = 3072

val QUERYDIBSUPPORT: Int = 3073

val BEGIN_PATH: Int = 4096

val CLIP_TO_PATH: Int = 4097

val END_PATH: Int = 4098

val EXT_DEVICE_CAPS: Int = 4099

val RESTORE_CTM: Int = 4100

val SAVE_CTM: Int = 4101

val SET_ARC_DIRECTION: Int = 4102

val SET_BACKGROUND_COLOR: Int = 4103

val SET_POLY_MODE: Int = 4104

val SET_SCREEN_ANGLE: Int = 4105

val SET_SPREAD: Int = 4106

val TRANSFORM_CTM: Int = 4107

val SET_CLIP_BOX: Int = 4108

val SET_BOUNDS: Int = 4109

val SET_MIRROR_MODE: Int = 4110

val OPENCHANNEL: Int = 4110

val DOWNLOADHEADER: Int = 4111

val CLOSECHANNEL: Int = 4112

val POSTSCRIPT_PASSTHROUGH: Int = 4115

val ENCAPSULATED_POSTSCRIPT: Int = 4116

val POSTSCRIPT_IDENTIFY: Int = 4117

val POSTSCRIPT_INJECTION: Int = 4118

val CHECKJPEGFORMAT: Int = 4119

val CHECKPNGFORMAT: Int = 4120

val GET_PS_FEATURESETTING: Int = 4121

val GDIPLUS_TS_QUERYVER: Int = 4122

val GDIPLUS_TS_RECORD: Int = 4123

val SPCLPASSTHROUGH2: Int = 4568

val PSIDENT_GDICENTRIC: Int = 0

val PSIDENT_PSCENTRIC: Int = 1

val PSINJECT_BEGINSTREAM: Int = 1

val PSINJECT_PSADOBE: Int = 2

val PSINJECT_PAGESATEND: Int = 3

val PSINJECT_PAGES: Int = 4

val PSINJECT_DOCNEEDEDRES: Int = 5

val PSINJECT_DOCSUPPLIEDRES: Int = 6

val PSINJECT_PAGEORDER: Int = 7

val PSINJECT_ORIENTATION: Int = 8

val PSINJECT_BOUNDINGBOX: Int = 9

val PSINJECT_DOCUMENTPROCESSCOLORS: Int = 10

val PSINJECT_COMMENTS: Int = 11

val PSINJECT_BEGINDEFAULTS: Int = 12

val PSINJECT_ENDDEFAULTS: Int = 13

val PSINJECT_BEGINPROLOG: Int = 14

val PSINJECT_ENDPROLOG: Int = 15

val PSINJECT_BEGINSETUP: Int = 16

val PSINJECT_ENDSETUP: Int = 17

val PSINJECT_TRAILER: Int = 18

val PSINJECT_EOF: Int = 19

val PSINJECT_ENDSTREAM: Int = 20

val PSINJECT_DOCUMENTPROCESSCOLORSATEND: Int = 21

val PSINJECT_PAGENUMBER: Int = 100

val PSINJECT_BEGINPAGESETUP: Int = 101

val PSINJECT_ENDPAGESETUP: Int = 102

val PSINJECT_PAGETRAILER: Int = 103

val PSINJECT_PLATECOLOR: Int = 104

val PSINJECT_SHOWPAGE: Int = 105

val PSINJECT_PAGEBBOX: Int = 106

val PSINJECT_ENDPAGECOMMENTS: Int = 107

val PSINJECT_VMSAVE: Int = 200

val PSINJECT_VMRESTORE: Int = 201

val FEATURESETTING_NUP: Int = 0

val FEATURESETTING_OUTPUT: Int = 1

val FEATURESETTING_PSLEVEL: Int = 2

val FEATURESETTING_CUSTPAPER: Int = 3

val FEATURESETTING_MIRROR: Int = 4

val FEATURESETTING_NEGATIVE: Int = 5

val FEATURESETTING_PROTOCOL: Int = 6

val FEATURESETTING_PRIVATE_BEGIN: Int = 4096

val FEATURESETTING_PRIVATE_END: Int = 8191

val PSPROTOCOL_ASCII: Int = 0

val PSPROTOCOL_BCP: Int = 1

val PSPROTOCOL_TBCP: Int = 2

val PSPROTOCOL_BINARY: Int = 3

val QDI_SETDIBITS: Int = 1

val QDI_GETDIBITS: Int = 2

val QDI_DIBTOSCREEN: Int = 4

val QDI_STRETCHDIB: Int = 8

val SP_NOTREPORTED: Int = 16384

val SP_ERROR: Int = -1

val SP_APPABORT: Int = -2

val SP_USERABORT: Int = -3

val SP_OUTOFDISK: Int = -4

val SP_OUTOFMEMORY: Int = -5

val PR_JOBSTATUS: Int = 0

val OBJ_PEN: Int = 1

val OBJ_BRUSH: Int = 2

val OBJ_DC: Int = 3

val OBJ_METADC: Int = 4

val OBJ_PAL: Int = 5

val OBJ_FONT: Int = 6

val OBJ_BITMAP: Int = 7

val OBJ_REGION: Int = 8

val OBJ_METAFILE: Int = 9

val OBJ_MEMDC: Int = 10

val OBJ_EXTPEN: Int = 11

val OBJ_ENHMETADC: Int = 12

val OBJ_ENHMETAFILE: Int = 13

val OBJ_COLORSPACE: Int = 14

val GDI_OBJ_LAST: Int = 14

val MWT_IDENTITY: Int = 1

val MWT_LEFTMULTIPLY: Int = 2

val MWT_RIGHTMULTIPLY: Int = 3

val MWT_MIN: Int = 1

val MWT_MAX: Int = 3

val CS_ENABLE: Int = 1

val CS_DISABLE: Int = 2

val CS_DELETE_TRANSFORM: Int = 3

val LCS_SIGNATURE: Int = 1347637059

val LCS_sRGB: Int = 1934772034

val LCS_WINDOWS_COLOR_SPACE: Int = 1466527264

val LCS_CALIBRATED_RGB: Int = 0

val LCS_GM_BUSINESS: Int = 1

val LCS_GM_GRAPHICS: Int = 2

val LCS_GM_IMAGES: Int = 4

val LCS_GM_ABS_COLORIMETRIC: Int = 8

val CM_OUT_OF_GAMUT: Int = 255

val CM_IN_GAMUT: Int = 0

val ICM_ADDPROFILE: Int = 1

val ICM_DELETEPROFILE: Int = 2

val ICM_QUERYPROFILE: Int = 3

val ICM_SETDEFAULTPROFILE: Int = 4

val ICM_REGISTERICMATCHER: Int = 5

val ICM_UNREGISTERICMATCHER: Int = 6

val ICM_QUERYMATCH: Int = 7

val PROFILE_LINKED: Int = 1279872587

val PROFILE_EMBEDDED: Int = 1296188740

val BI_RGB: Int = 0

val BI_RLE8: Int = 1

val BI_RLE4: Int = 2

val BI_BITFIELDS: Int = 3

val BI_JPEG: Int = 4

val BI_PNG: Int = 5

val TCI_SRCCHARSET: Int = 1

val TCI_SRCCODEPAGE: Int = 2

val TCI_SRCFONTSIG: Int = 3

val TCI_SRCLOCALE: Int = 4096

val TMPF_FIXED_PITCH: Int = 1

val TMPF_VECTOR: Int = 2

val TMPF_DEVICE: Int = 8

val TMPF_TRUETYPE: Int = 4

val NTM_REGULAR: Int = 64

val NTM_BOLD: Int = 32

val NTM_ITALIC: Int = 1

val NTM_NONNEGATIVE_AC: Int = 65536

val NTM_PS_OPENTYPE: Int = 131072

val NTM_TT_OPENTYPE: Int = 262144

val NTM_MULTIPLEMASTER: Int = 524288

val NTM_TYPE1: Int = 1048576

val NTM_DSIG: Int = 2097152

val LF_FACESIZE: Int = 32

val LF_FULLFACESIZE: Int = 64

val OUT_DEFAULT_PRECIS: Int = 0

val OUT_STRING_PRECIS: Int = 1

val OUT_CHARACTER_PRECIS: Int = 2

val OUT_STROKE_PRECIS: Int = 3

val OUT_TT_PRECIS: Int = 4

val OUT_DEVICE_PRECIS: Int = 5

val OUT_RASTER_PRECIS: Int = 6

val OUT_TT_ONLY_PRECIS: Int = 7

val OUT_OUTLINE_PRECIS: Int = 8

val OUT_SCREEN_OUTLINE_PRECIS: Int = 9

val OUT_PS_ONLY_PRECIS: Int = 10

val CLIP_DEFAULT_PRECIS: Int = 0

val CLIP_CHARACTER_PRECIS: Int = 1

val CLIP_STROKE_PRECIS: Int = 2

val CLIP_MASK: Int = 15

val CLIP_LH_ANGLES: Int = 16

val CLIP_TT_ALWAYS: Int = 32

val CLIP_EMBEDDED: Int = 128

val DEFAULT_QUALITY: Int = 0

val DRAFT_QUALITY: Int = 1

val PROOF_QUALITY: Int = 2

val NONANTIALIASED_QUALITY: Int = 3

val ANTIALIASED_QUALITY: Int = 4

val CLEARTYPE_QUALITY: Int = 5

val CLEARTYPE_NATURAL_QUALITY: Int = 6

val DEFAULT_PITCH: Int = 0

val FIXED_PITCH: Int = 1

val VARIABLE_PITCH: Int = 2

val MONO_FONT: Int = 8

val ANSI_CHARSET: Int = 0

val DEFAULT_CHARSET: Int = 1

val SYMBOL_CHARSET: Int = 2

val SHIFTJIS_CHARSET: Int = 128

val HANGEUL_CHARSET: Int = 129

val HANGUL_CHARSET: Int = 129

val GB2312_CHARSET: Int = 134

val CHINESEBIG5_CHARSET: Int = 136

val OEM_CHARSET: Int = 255

val JOHAB_CHARSET: Int = 130

val HEBREW_CHARSET: Int = 177

val ARABIC_CHARSET: Int = 178

val GREEK_CHARSET: Int = 161

val TURKISH_CHARSET: Int = 162

val VIETNAMESE_CHARSET: Int = 163

val THAI_CHARSET: Int = 222

val EASTEUROPE_CHARSET: Int = 238

val RUSSIAN_CHARSET: Int = 204

val MAC_CHARSET: Int = 77

val BALTIC_CHARSET: Int = 186

val FS_LATIN1: Int = 1

val FS_LATIN2: Int = 2

val FS_CYRILLIC: Int = 4

val FS_GREEK: Int = 8

val FS_TURKISH: Int = 16

val FS_HEBREW: Int = 32

val FS_ARABIC: Int = 64

val FS_BALTIC: Int = 128

val FS_VIETNAMESE: Int = 256

val FS_THAI: Int = 65536

val FS_JISJAPAN: Int = 131072

val FS_CHINESESIMP: Int = 262144

val FS_WANSUNG: Int = 524288

val FS_CHINESETRAD: Int = 1048576

val FS_JOHAB: Int = 2097152

val FS_SYMBOL: Int = -2147483648

val FF_DONTCARE: Int = 0

val FF_ROMAN: Int = 16

val FF_SWISS: Int = 32

val FF_MODERN: Int = 48

val FF_SCRIPT: Int = 64

val FF_DECORATIVE: Int = 80

val FW_DONTCARE: Int = 0

val FW_THIN: Int = 100

val FW_EXTRALIGHT: Int = 200

val FW_LIGHT: Int = 300

val FW_NORMAL: Int = 400

val FW_MEDIUM: Int = 500

val FW_SEMIBOLD: Int = 600

val FW_BOLD: Int = 700

val FW_EXTRABOLD: Int = 800

val FW_HEAVY: Int = 900

val FW_ULTRALIGHT: Int = 200

val FW_REGULAR: Int = 400

val FW_DEMIBOLD: Int = 600

val FW_ULTRABOLD: Int = 800

val FW_BLACK: Int = 900

val PANOSE_COUNT: Int = 10

val PAN_FAMILYTYPE_INDEX: Int = 0

val PAN_SERIFSTYLE_INDEX: Int = 1

val PAN_WEIGHT_INDEX: Int = 2

val PAN_PROPORTION_INDEX: Int = 3

val PAN_CONTRAST_INDEX: Int = 4

val PAN_STROKEVARIATION_INDEX: Int = 5

val PAN_ARMSTYLE_INDEX: Int = 6

val PAN_LETTERFORM_INDEX: Int = 7

val PAN_MIDLINE_INDEX: Int = 8

val PAN_XHEIGHT_INDEX: Int = 9

val PAN_CULTURE_LATIN: Int = 0

val PAN_ANY: Int = 0

val PAN_NO_FIT: Int = 1

val PAN_FAMILY_TEXT_DISPLAY: Int = 2

val PAN_FAMILY_SCRIPT: Int = 3

val PAN_FAMILY_DECORATIVE: Int = 4

val PAN_FAMILY_PICTORIAL: Int = 5

val PAN_SERIF_COVE: Int = 2

val PAN_SERIF_OBTUSE_COVE: Int = 3

val PAN_SERIF_SQUARE_COVE: Int = 4

val PAN_SERIF_OBTUSE_SQUARE_COVE: Int = 5

val PAN_SERIF_SQUARE: Int = 6

val PAN_SERIF_THIN: Int = 7

val PAN_SERIF_BONE: Int = 8

val PAN_SERIF_EXAGGERATED: Int = 9

val PAN_SERIF_TRIANGLE: Int = 10

val PAN_SERIF_NORMAL_SANS: Int = 11

val PAN_SERIF_OBTUSE_SANS: Int = 12

val PAN_SERIF_PERP_SANS: Int = 13

val PAN_SERIF_FLARED: Int = 14

val PAN_SERIF_ROUNDED: Int = 15

val PAN_WEIGHT_VERY_LIGHT: Int = 2

val PAN_WEIGHT_LIGHT: Int = 3

val PAN_WEIGHT_THIN: Int = 4

val PAN_WEIGHT_BOOK: Int = 5

val PAN_WEIGHT_MEDIUM: Int = 6

val PAN_WEIGHT_DEMI: Int = 7

val PAN_WEIGHT_BOLD: Int = 8

val PAN_WEIGHT_HEAVY: Int = 9

val PAN_WEIGHT_BLACK: Int = 10

val PAN_WEIGHT_NORD: Int = 11

val PAN_PROP_OLD_STYLE: Int = 2

val PAN_PROP_MODERN: Int = 3

val PAN_PROP_EVEN_WIDTH: Int = 4

val PAN_PROP_EXPANDED: Int = 5

val PAN_PROP_CONDENSED: Int = 6

val PAN_PROP_VERY_EXPANDED: Int = 7

val PAN_PROP_VERY_CONDENSED: Int = 8

val PAN_PROP_MONOSPACED: Int = 9

val PAN_CONTRAST_NONE: Int = 2

val PAN_CONTRAST_VERY_LOW: Int = 3

val PAN_CONTRAST_LOW: Int = 4

val PAN_CONTRAST_MEDIUM_LOW: Int = 5

val PAN_CONTRAST_MEDIUM: Int = 6

val PAN_CONTRAST_MEDIUM_HIGH: Int = 7

val PAN_CONTRAST_HIGH: Int = 8

val PAN_CONTRAST_VERY_HIGH: Int = 9

val PAN_STROKE_GRADUAL_DIAG: Int = 2

val PAN_STROKE_GRADUAL_TRAN: Int = 3

val PAN_STROKE_GRADUAL_VERT: Int = 4

val PAN_STROKE_GRADUAL_HORZ: Int = 5

val PAN_STROKE_RAPID_VERT: Int = 6

val PAN_STROKE_RAPID_HORZ: Int = 7

val PAN_STROKE_INSTANT_VERT: Int = 8

val PAN_STRAIGHT_ARMS_HORZ: Int = 2

val PAN_STRAIGHT_ARMS_WEDGE: Int = 3

val PAN_STRAIGHT_ARMS_VERT: Int = 4

val PAN_STRAIGHT_ARMS_SINGLE_SERIF: Int = 5

val PAN_STRAIGHT_ARMS_DOUBLE_SERIF: Int = 6

val PAN_BENT_ARMS_HORZ: Int = 7

val PAN_BENT_ARMS_WEDGE: Int = 8

val PAN_BENT_ARMS_VERT: Int = 9

val PAN_BENT_ARMS_SINGLE_SERIF: Int = 10

val PAN_BENT_ARMS_DOUBLE_SERIF: Int = 11

val PAN_LETT_NORMAL_CONTACT: Int = 2

val PAN_LETT_NORMAL_WEIGHTED: Int = 3

val PAN_LETT_NORMAL_BOXED: Int = 4

val PAN_LETT_NORMAL_FLATTENED: Int = 5

val PAN_LETT_NORMAL_ROUNDED: Int = 6

val PAN_LETT_NORMAL_OFF_CENTER: Int = 7

val PAN_LETT_NORMAL_SQUARE: Int = 8

val PAN_LETT_OBLIQUE_CONTACT: Int = 9

val PAN_LETT_OBLIQUE_WEIGHTED: Int = 10

val PAN_LETT_OBLIQUE_BOXED: Int = 11

val PAN_LETT_OBLIQUE_FLATTENED: Int = 12

val PAN_LETT_OBLIQUE_ROUNDED: Int = 13

val PAN_LETT_OBLIQUE_OFF_CENTER: Int = 14

val PAN_LETT_OBLIQUE_SQUARE: Int = 15

val PAN_MIDLINE_STANDARD_TRIMMED: Int = 2

val PAN_MIDLINE_STANDARD_POINTED: Int = 3

val PAN_MIDLINE_STANDARD_SERIFED: Int = 4

val PAN_MIDLINE_HIGH_TRIMMED: Int = 5

val PAN_MIDLINE_HIGH_POINTED: Int = 6

val PAN_MIDLINE_HIGH_SERIFED: Int = 7

val PAN_MIDLINE_CONSTANT_TRIMMED: Int = 8

val PAN_MIDLINE_CONSTANT_POINTED: Int = 9

val PAN_MIDLINE_CONSTANT_SERIFED: Int = 10

val PAN_MIDLINE_LOW_TRIMMED: Int = 11

val PAN_MIDLINE_LOW_POINTED: Int = 12

val PAN_MIDLINE_LOW_SERIFED: Int = 13

val PAN_XHEIGHT_CONSTANT_SMALL: Int = 2

val PAN_XHEIGHT_CONSTANT_STD: Int = 3

val PAN_XHEIGHT_CONSTANT_LARGE: Int = 4

val PAN_XHEIGHT_DUCKING_SMALL: Int = 5

val PAN_XHEIGHT_DUCKING_STD: Int = 6

val PAN_XHEIGHT_DUCKING_LARGE: Int = 7

val ELF_VENDOR_SIZE: Int = 4

val ELF_VERSION: Int = 0

val ELF_CULTURE_LATIN: Int = 0

val RASTER_FONTTYPE: Int = 1

val DEVICE_FONTTYPE: Int = 2

val TRUETYPE_FONTTYPE: Int = 4

val PC_RESERVED: Int = 1

val PC_EXPLICIT: Int = 2

val PC_NOCOLLAPSE: Int = 4

val TRANSPARENT: Int = 1

val OPAQUE: Int = 2

val BKMODE_LAST: Int = 2

val GM_COMPATIBLE: Int = 1

val GM_ADVANCED: Int = 2

val GM_LAST: Int = 2

val PT_CLOSEFIGURE: Int = 1

val PT_LINETO: Int = 2

val PT_BEZIERTO: Int = 4

val PT_MOVETO: Int = 6

val MM_TEXT: Int = 1

val MM_LOMETRIC: Int = 2

val MM_HIMETRIC: Int = 3

val MM_LOENGLISH: Int = 4

val MM_HIENGLISH: Int = 5

val MM_TWIPS: Int = 6

val MM_ISOTROPIC: Int = 7

val MM_ANISOTROPIC: Int = 8

val MM_MIN: Int = 1

val MM_MAX: Int = 8

val MM_MAX_FIXEDSCALE: Int = 6

val ABSOLUTE: Int = 1

val RELATIVE: Int = 2

val WHITE_BRUSH: Int = 0

val LTGRAY_BRUSH: Int = 1

val GRAY_BRUSH: Int = 2

val DKGRAY_BRUSH: Int = 3

val BLACK_BRUSH: Int = 4

val NULL_BRUSH: Int = 5

val HOLLOW_BRUSH: Int = 5

val WHITE_PEN: Int = 6

val BLACK_PEN: Int = 7

val NULL_PEN: Int = 8

val OEM_FIXED_FONT: Int = 10

val ANSI_FIXED_FONT: Int = 11

val ANSI_VAR_FONT: Int = 12

val SYSTEM_FONT: Int = 13

val DEVICE_DEFAULT_FONT: Int = 14

val DEFAULT_PALETTE: Int = 15

val SYSTEM_FIXED_FONT: Int = 16

val DEFAULT_GUI_FONT: Int = 17

val DC_BRUSH: Int = 18

val DC_PEN: Int = 19

val STOCK_LAST: Int = 19

val CLR_INVALID: Int = -1

val BS_SOLID: Int = 0

val BS_NULL: Int = 1

val BS_HOLLOW: Int = 1

val BS_HATCHED: Int = 2

val BS_PATTERN: Int = 3

val BS_INDEXED: Int = 4

val BS_DIBPATTERN: Int = 5

val BS_DIBPATTERNPT: Int = 6

val BS_PATTERN8X8: Int = 7

val BS_DIBPATTERN8X8: Int = 8

val BS_MONOPATTERN: Int = 9

val HS_HORIZONTAL: Int = 0

val HS_VERTICAL: Int = 1

val HS_FDIAGONAL: Int = 2

val HS_BDIAGONAL: Int = 3

val HS_CROSS: Int = 4

val HS_DIAGCROSS: Int = 5

val HS_API_MAX: Int = 12

val PS_SOLID: Int = 0

val PS_DASH: Int = 1

val PS_DOT: Int = 2

val PS_DASHDOT: Int = 3

val PS_DASHDOTDOT: Int = 4

val PS_NULL: Int = 5

val PS_INSIDEFRAME: Int = 6

val PS_USERSTYLE: Int = 7

val PS_ALTERNATE: Int = 8

val PS_STYLE_MASK: Int = 15

val PS_ENDCAP_ROUND: Int = 0

val PS_ENDCAP_SQUARE: Int = 256

val PS_ENDCAP_FLAT: Int = 512

val PS_ENDCAP_MASK: Int = 3840

val PS_JOIN_ROUND: Int = 0

val PS_JOIN_BEVEL: Int = 4096

val PS_JOIN_MITER: Int = 8192

val PS_JOIN_MASK: Int = 61440

val PS_COSMETIC: Int = 0

val PS_GEOMETRIC: Int = 65536

val PS_TYPE_MASK: Int = 983040

val AD_COUNTERCLOCKWISE: Int = 1

val AD_CLOCKWISE: Int = 2

val DRIVERVERSION: Int = 0

val TECHNOLOGY: Int = 2

val HORZSIZE: Int = 4

val VERTSIZE: Int = 6

val HORZRES: Int = 8

val VERTRES: Int = 10

val BITSPIXEL: Int = 12

val PLANES: Int = 14

val NUMBRUSHES: Int = 16

val NUMPENS: Int = 18

val NUMMARKERS: Int = 20

val NUMFONTS: Int = 22

val NUMCOLORS: Int = 24

val PDEVICESIZE: Int = 26

val CURVECAPS: Int = 28

val LINECAPS: Int = 30

val POLYGONALCAPS: Int = 32

val TEXTCAPS: Int = 34

val CLIPCAPS: Int = 36

val RASTERCAPS: Int = 38

val ASPECTX: Int = 40

val ASPECTY: Int = 42

val ASPECTXY: Int = 44

val LOGPIXELSX: Int = 88

val LOGPIXELSY: Int = 90

val SIZEPALETTE: Int = 104

val NUMRESERVED: Int = 106

val COLORRES: Int = 108

val PHYSICALWIDTH: Int = 110

val PHYSICALHEIGHT: Int = 111

val PHYSICALOFFSETX: Int = 112

val PHYSICALOFFSETY: Int = 113

val SCALINGFACTORX: Int = 114

val SCALINGFACTORY: Int = 115

val VREFRESH: Int = 116

val DESKTOPVERTRES: Int = 117

val DESKTOPHORZRES: Int = 118

val BLTALIGNMENT: Int = 119

val SHADEBLENDCAPS: Int = 120

val COLORMGMTCAPS: Int = 121

val DT_PLOTTER: Int = 0

val DT_RASDISPLAY: Int = 1

val DT_RASPRINTER: Int = 2

val DT_RASCAMERA: Int = 3

val DT_CHARSTREAM: Int = 4

val DT_METAFILE: Int = 5

val DT_DISPFILE: Int = 6

val CC_NONE: Int = 0

val CC_CIRCLES: Int = 1

val CC_PIE: Int = 2

val CC_CHORD: Int = 4

val CC_ELLIPSES: Int = 8

val CC_WIDE: Int = 16

val CC_STYLED: Int = 32

val CC_WIDESTYLED: Int = 64

val CC_INTERIORS: Int = 128

val CC_ROUNDRECT: Int = 256

val LC_NONE: Int = 0

val LC_POLYLINE: Int = 2

val LC_MARKER: Int = 4

val LC_POLYMARKER: Int = 8

val LC_WIDE: Int = 16

val LC_STYLED: Int = 32

val LC_WIDESTYLED: Int = 64

val LC_INTERIORS: Int = 128

val PC_NONE: Int = 0

val PC_POLYGON: Int = 1

val PC_RECTANGLE: Int = 2

val PC_WINDPOLYGON: Int = 4

val PC_TRAPEZOID: Int = 4

val PC_SCANLINE: Int = 8

val PC_WIDE: Int = 16

val PC_STYLED: Int = 32

val PC_WIDESTYLED: Int = 64

val PC_INTERIORS: Int = 128

val PC_POLYPOLYGON: Int = 256

val PC_PATHS: Int = 512

val CP_NONE: Int = 0

val CP_RECTANGLE: Int = 1

val CP_REGION: Int = 2

val TC_OP_CHARACTER: Int = 1

val TC_OP_STROKE: Int = 2

val TC_CP_STROKE: Int = 4

val TC_CR_90: Int = 8

val TC_CR_ANY: Int = 16

val TC_SF_X_YINDEP: Int = 32

val TC_SA_DOUBLE: Int = 64

val TC_SA_INTEGER: Int = 128

val TC_SA_CONTIN: Int = 256

val TC_EA_DOUBLE: Int = 512

val TC_IA_ABLE: Int = 1024

val TC_UA_ABLE: Int = 2048

val TC_SO_ABLE: Int = 4096

val TC_RA_ABLE: Int = 8192

val TC_VA_ABLE: Int = 16384

val TC_RESERVED: Int = 32768

val TC_SCROLLBLT: Int = 65536

val RC_BITBLT: Int = 1

val RC_BANDING: Int = 2

val RC_SCALING: Int = 4

val RC_BITMAP64: Int = 8

val RC_GDI20_OUTPUT: Int = 16

val RC_GDI20_STATE: Int = 32

val RC_SAVEBITMAP: Int = 64

val RC_DI_BITMAP: Int = 128

val RC_PALETTE: Int = 256

val RC_DIBTODEV: Int = 512

val RC_BIGFONT: Int = 1024

val RC_STRETCHBLT: Int = 2048

val RC_FLOODFILL: Int = 4096

val RC_STRETCHDIB: Int = 8192

val RC_OP_DX_OUTPUT: Int = 16384

val RC_DEVBITS: Int = 32768

val SB_NONE: Int = 0

val SB_CONST_ALPHA: Int = 1

val SB_PIXEL_ALPHA: Int = 2

val SB_PREMULT_ALPHA: Int = 4

val SB_GRAD_RECT: Int = 16

val SB_GRAD_TRI: Int = 32

val CM_NONE: Int = 0

val CM_DEVICE_ICM: Int = 1

val CM_GAMMA_RAMP: Int = 2

val CM_CMYK_COLOR: Int = 4

val DIB_RGB_COLORS: Int = 0

val DIB_PAL_COLORS: Int = 1

val SYSPAL_ERROR: Int = 0

val SYSPAL_STATIC: Int = 1

val SYSPAL_NOSTATIC: Int = 2

val SYSPAL_NOSTATIC256: Int = 3

val CBM_INIT: Int = 4

val FLOODFILLBORDER: Int = 0

val FLOODFILLSURFACE: Int = 1

val CCHDEVICENAME: Int = 32

val CCHFORMNAME: Int = 32

val DM_SPECVERSION: Int = 1025

val DM_ORIENTATION: Int = 1

val DM_PAPERSIZE: Int = 2

val DM_PAPERLENGTH: Int = 4

val DM_PAPERWIDTH: Int = 8

val DM_SCALE: Int = 16

val DM_POSITION: Int = 32

val DM_NUP: Int = 64

val DM_DISPLAYORIENTATION: Int = 128

val DM_COPIES: Int = 256

val DM_DEFAULTSOURCE: Int = 512

val DM_PRINTQUALITY: Int = 1024

val DM_COLOR: Int = 2048

val DM_DUPLEX: Int = 4096

val DM_YRESOLUTION: Int = 8192

val DM_TTOPTION: Int = 16384

val DM_COLLATE: Int = 32768

val DM_FORMNAME: Int = 65536

val DM_LOGPIXELS: Int = 131072

val DM_BITSPERPEL: Int = 262144

val DM_PELSWIDTH: Int = 524288

val DM_PELSHEIGHT: Int = 1048576

val DM_DISPLAYFLAGS: Int = 2097152

val DM_DISPLAYFREQUENCY: Int = 4194304

val DM_ICMMETHOD: Int = 8388608

val DM_ICMINTENT: Int = 16777216

val DM_MEDIATYPE: Int = 33554432

val DM_DITHERTYPE: Int = 67108864

val DM_PANNINGWIDTH: Int = 134217728

val DM_PANNINGHEIGHT: Int = 268435456

val DM_DISPLAYFIXEDOUTPUT: Int = 536870912

val DMORIENT_PORTRAIT: Int = 1

val DMORIENT_LANDSCAPE: Int = 2

val DMPAPER_FIRST: Int = 1

val DMPAPER_LETTER: Int = 1

val DMPAPER_LETTERSMALL: Int = 2

val DMPAPER_TABLOID: Int = 3

val DMPAPER_LEDGER: Int = 4

val DMPAPER_LEGAL: Int = 5

val DMPAPER_STATEMENT: Int = 6

val DMPAPER_EXECUTIVE: Int = 7

val DMPAPER_A3: Int = 8

val DMPAPER_A4: Int = 9

val DMPAPER_A4SMALL: Int = 10

val DMPAPER_A5: Int = 11

val DMPAPER_B4: Int = 12

val DMPAPER_B5: Int = 13

val DMPAPER_FOLIO: Int = 14

val DMPAPER_QUARTO: Int = 15

val DMPAPER_10X14: Int = 16

val DMPAPER_11X17: Int = 17

val DMPAPER_NOTE: Int = 18

val DMPAPER_ENV_9: Int = 19

val DMPAPER_ENV_10: Int = 20

val DMPAPER_ENV_11: Int = 21

val DMPAPER_ENV_12: Int = 22

val DMPAPER_ENV_14: Int = 23

val DMPAPER_CSHEET: Int = 24

val DMPAPER_DSHEET: Int = 25

val DMPAPER_ESHEET: Int = 26

val DMPAPER_ENV_DL: Int = 27

val DMPAPER_ENV_C5: Int = 28

val DMPAPER_ENV_C3: Int = 29

val DMPAPER_ENV_C4: Int = 30

val DMPAPER_ENV_C6: Int = 31

val DMPAPER_ENV_C65: Int = 32

val DMPAPER_ENV_B4: Int = 33

val DMPAPER_ENV_B5: Int = 34

val DMPAPER_ENV_B6: Int = 35

val DMPAPER_ENV_ITALY: Int = 36

val DMPAPER_ENV_MONARCH: Int = 37

val DMPAPER_ENV_PERSONAL: Int = 38

val DMPAPER_FANFOLD_US: Int = 39

val DMPAPER_FANFOLD_STD_GERMAN: Int = 40

val DMPAPER_FANFOLD_LGL_GERMAN: Int = 41

val DMPAPER_ISO_B4: Int = 42

val DMPAPER_JAPANESE_POSTCARD: Int = 43

val DMPAPER_9X11: Int = 44

val DMPAPER_10X11: Int = 45

val DMPAPER_15X11: Int = 46

val DMPAPER_ENV_INVITE: Int = 47

val DMPAPER_RESERVED_48: Int = 48

val DMPAPER_RESERVED_49: Int = 49

val DMPAPER_LETTER_EXTRA: Int = 50

val DMPAPER_LEGAL_EXTRA: Int = 51

val DMPAPER_TABLOID_EXTRA: Int = 52

val DMPAPER_A4_EXTRA: Int = 53

val DMPAPER_LETTER_TRANSVERSE: Int = 54

val DMPAPER_A4_TRANSVERSE: Int = 55

val DMPAPER_LETTER_EXTRA_TRANSVERSE: Int = 56

val DMPAPER_A_PLUS: Int = 57

val DMPAPER_B_PLUS: Int = 58

val DMPAPER_LETTER_PLUS: Int = 59

val DMPAPER_A4_PLUS: Int = 60

val DMPAPER_A5_TRANSVERSE: Int = 61

val DMPAPER_B5_TRANSVERSE: Int = 62

val DMPAPER_A3_EXTRA: Int = 63

val DMPAPER_A5_EXTRA: Int = 64

val DMPAPER_B5_EXTRA: Int = 65

val DMPAPER_A2: Int = 66

val DMPAPER_A3_TRANSVERSE: Int = 67

val DMPAPER_A3_EXTRA_TRANSVERSE: Int = 68

val DMPAPER_DBL_JAPANESE_POSTCARD: Int = 69

val DMPAPER_A6: Int = 70

val DMPAPER_JENV_KAKU2: Int = 71

val DMPAPER_JENV_KAKU3: Int = 72

val DMPAPER_JENV_CHOU3: Int = 73

val DMPAPER_JENV_CHOU4: Int = 74

val DMPAPER_LETTER_ROTATED: Int = 75

val DMPAPER_A3_ROTATED: Int = 76

val DMPAPER_A4_ROTATED: Int = 77

val DMPAPER_A5_ROTATED: Int = 78

val DMPAPER_B4_JIS_ROTATED: Int = 79

val DMPAPER_B5_JIS_ROTATED: Int = 80

val DMPAPER_JAPANESE_POSTCARD_ROTATED: Int = 81

val DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED: Int = 82

val DMPAPER_A6_ROTATED: Int = 83

val DMPAPER_JENV_KAKU2_ROTATED: Int = 84

val DMPAPER_JENV_KAKU3_ROTATED: Int = 85

val DMPAPER_JENV_CHOU3_ROTATED: Int = 86

val DMPAPER_JENV_CHOU4_ROTATED: Int = 87

val DMPAPER_B6_JIS: Int = 88

val DMPAPER_B6_JIS_ROTATED: Int = 89

val DMPAPER_12X11: Int = 90

val DMPAPER_JENV_YOU4: Int = 91

val DMPAPER_JENV_YOU4_ROTATED: Int = 92

val DMPAPER_P16K: Int = 93

val DMPAPER_P32K: Int = 94

val DMPAPER_P32KBIG: Int = 95

val DMPAPER_PENV_1: Int = 96

val DMPAPER_PENV_2: Int = 97

val DMPAPER_PENV_3: Int = 98

val DMPAPER_PENV_4: Int = 99

val DMPAPER_PENV_5: Int = 100

val DMPAPER_PENV_6: Int = 101

val DMPAPER_PENV_7: Int = 102

val DMPAPER_PENV_8: Int = 103

val DMPAPER_PENV_9: Int = 104

val DMPAPER_PENV_10: Int = 105

val DMPAPER_P16K_ROTATED: Int = 106

val DMPAPER_P32K_ROTATED: Int = 107

val DMPAPER_P32KBIG_ROTATED: Int = 108

val DMPAPER_PENV_1_ROTATED: Int = 109

val DMPAPER_PENV_2_ROTATED: Int = 110

val DMPAPER_PENV_3_ROTATED: Int = 111

val DMPAPER_PENV_4_ROTATED: Int = 112

val DMPAPER_PENV_5_ROTATED: Int = 113

val DMPAPER_PENV_6_ROTATED: Int = 114

val DMPAPER_PENV_7_ROTATED: Int = 115

val DMPAPER_PENV_8_ROTATED: Int = 116

val DMPAPER_PENV_9_ROTATED: Int = 117

val DMPAPER_PENV_10_ROTATED: Int = 118

val DMPAPER_LAST: Int = 118

val DMPAPER_USER: Int = 256

val DMBIN_FIRST: Int = 1

val DMBIN_UPPER: Int = 1

val DMBIN_ONLYONE: Int = 1

val DMBIN_LOWER: Int = 2

val DMBIN_MIDDLE: Int = 3

val DMBIN_MANUAL: Int = 4

val DMBIN_ENVELOPE: Int = 5

val DMBIN_ENVMANUAL: Int = 6

val DMBIN_AUTO: Int = 7

val DMBIN_TRACTOR: Int = 8

val DMBIN_SMALLFMT: Int = 9

val DMBIN_LARGEFMT: Int = 10

val DMBIN_LARGECAPACITY: Int = 11

val DMBIN_CASSETTE: Int = 14

val DMBIN_FORMSOURCE: Int = 15

val DMBIN_LAST: Int = 15

val DMBIN_USER: Int = 256

val DMRES_DRAFT: Int = -1

val DMRES_LOW: Int = -2

val DMRES_MEDIUM: Int = -3

val DMRES_HIGH: Int = -4

val DMCOLOR_MONOCHROME: Int = 1

val DMCOLOR_COLOR: Int = 2

val DMDUP_SIMPLEX: Int = 1

val DMDUP_VERTICAL: Int = 2

val DMDUP_HORIZONTAL: Int = 3

val DMTT_BITMAP: Int = 1

val DMTT_DOWNLOAD: Int = 2

val DMTT_SUBDEV: Int = 3

val DMTT_DOWNLOAD_OUTLINE: Int = 4

val DMCOLLATE_FALSE: Int = 0

val DMCOLLATE_TRUE: Int = 1

val DMDO_DEFAULT: Int = 0

val DMDO_90: Int = 1

val DMDO_180: Int = 2

val DMDO_270: Int = 3

val DMDFO_DEFAULT: Int = 0

val DMDFO_STRETCH: Int = 1

val DMDFO_CENTER: Int = 2

val DM_INTERLACED: Int = 2

val DMDISPLAYFLAGS_TEXTMODE: Int = 4

val DMNUP_SYSTEM: Int = 1

val DMNUP_ONEUP: Int = 2

val DMICMMETHOD_NONE: Int = 1

val DMICMMETHOD_SYSTEM: Int = 2

val DMICMMETHOD_DRIVER: Int = 3

val DMICMMETHOD_DEVICE: Int = 4

val DMICMMETHOD_USER: Int = 256

val DMICM_SATURATE: Int = 1

val DMICM_CONTRAST: Int = 2

val DMICM_COLORIMETRIC: Int = 3

val DMICM_ABS_COLORIMETRIC: Int = 4

val DMICM_USER: Int = 256

val DMMEDIA_STANDARD: Int = 1

val DMMEDIA_TRANSPARENCY: Int = 2

val DMMEDIA_GLOSSY: Int = 3

val DMMEDIA_USER: Int = 256

val DMDITHER_NONE: Int = 1

val DMDITHER_COARSE: Int = 2

val DMDITHER_FINE: Int = 3

val DMDITHER_LINEART: Int = 4

val DMDITHER_ERRORDIFFUSION: Int = 5

val DMDITHER_RESERVED6: Int = 6

val DMDITHER_RESERVED7: Int = 7

val DMDITHER_RESERVED8: Int = 8

val DMDITHER_RESERVED9: Int = 9

val DMDITHER_GRAYSCALE: Int = 10

val DMDITHER_USER: Int = 256

val DISPLAY_DEVICE_ATTACHED_TO_DESKTOP: Int = 1

val DISPLAY_DEVICE_MULTI_DRIVER: Int = 2

val DISPLAY_DEVICE_PRIMARY_DEVICE: Int = 4

val DISPLAY_DEVICE_MIRRORING_DRIVER: Int = 8

val DISPLAY_DEVICE_VGA_COMPATIBLE: Int = 16

val DISPLAY_DEVICE_REMOVABLE: Int = 32

val DISPLAY_DEVICE_TS_COMPATIBLE: Int = 2097152

val DISPLAY_DEVICE_MODESPRUNED: Int = 134217728

val DISPLAY_DEVICE_REMOTE: Int = 67108864

val DISPLAY_DEVICE_DISCONNECT: Int = 33554432

val DISPLAY_DEVICE_ACTIVE: Int = 1

val DISPLAY_DEVICE_ATTACHED: Int = 2

val RDH_RECTANGLES: Int = 1

val SYSRGN: Int = 4

val GGO_METRICS: Int = 0

val GGO_BITMAP: Int = 1

val GGO_NATIVE: Int = 2

val GGO_BEZIER: Int = 3

val GGO_GRAY2_BITMAP: Int = 4

val GGO_GRAY4_BITMAP: Int = 5

val GGO_GRAY8_BITMAP: Int = 6

val GGO_GLYPH_INDEX: Int = 128

val GGO_UNHINTED: Int = 256

val TT_POLYGON_TYPE: Int = 24

val TT_PRIM_LINE: Int = 1

val TT_PRIM_QSPLINE: Int = 2

val TT_PRIM_CSPLINE: Int = 3

val GCP_DBCS: Int = 1

val GCP_REORDER: Int = 2

val GCP_USEKERNING: Int = 8

val GCP_GLYPHSHAPE: Int = 16

val GCP_LIGATE: Int = 32

val GCP_DIACRITIC: Int = 256

val GCP_KASHIDA: Int = 1024

val GCP_ERROR: Int = 32768

val FLI_MASK: Int = 4155

val GCP_JUSTIFY: Int = 65536

val FLI_GLYPHS: Int = 262144

val GCP_CLASSIN: Int = 524288

val GCP_MAXEXTENT: Int = 1048576

val GCP_JUSTIFYIN: Int = 2097152

val GCP_DISPLAYZWG: Int = 4194304

val GCP_SYMSWAPOFF: Int = 8388608

val GCP_NUMERICOVERRIDE: Int = 16777216

val GCP_NEUTRALOVERRIDE: Int = 33554432

val GCP_NUMERICSLATIN: Int = 67108864

val GCP_NUMERICSLOCAL: Int = 134217728

val GCPCLASS_LATIN: Int = 1

val GCPCLASS_HEBREW: Int = 2

val GCPCLASS_ARABIC: Int = 2

val GCPCLASS_NEUTRAL: Int = 3

val GCPCLASS_LOCALNUMBER: Int = 4

val GCPCLASS_LATINNUMBER: Int = 5

val GCPCLASS_LATINNUMERICTERMINATOR: Int = 6

val GCPCLASS_LATINNUMERICSEPARATOR: Int = 7

val GCPCLASS_NUMERICSEPARATOR: Int = 8

val GCPCLASS_PREBOUNDLTR: Int = 128

val GCPCLASS_PREBOUNDRTL: Int = 64

val GCPCLASS_POSTBOUNDLTR: Int = 32

val GCPCLASS_POSTBOUNDRTL: Int = 16

val GCPGLYPH_LINKBEFORE: Int = 32768

val GCPGLYPH_LINKAFTER: Int = 16384

val TT_AVAILABLE: Int = 1

val TT_ENABLED: Int = 2

val PFD_TYPE_RGBA: Int = 0

val PFD_TYPE_COLORINDEX: Int = 1

val PFD_MAIN_PLANE: Int = 0

val PFD_OVERLAY_PLANE: Int = 1

val PFD_UNDERLAY_PLANE: Int = -1

val PFD_DOUBLEBUFFER: Int = 1

val PFD_STEREO: Int = 2

val PFD_DRAW_TO_WINDOW: Int = 4

val PFD_DRAW_TO_BITMAP: Int = 8

val PFD_SUPPORT_GDI: Int = 16

val PFD_SUPPORT_OPENGL: Int = 32

val PFD_GENERIC_FORMAT: Int = 64

val PFD_NEED_PALETTE: Int = 128

val PFD_NEED_SYSTEM_PALETTE: Int = 256

val PFD_SWAP_EXCHANGE: Int = 512

val PFD_SWAP_COPY: Int = 1024

val PFD_SWAP_LAYER_BUFFERS: Int = 2048

val PFD_GENERIC_ACCELERATED: Int = 4096

val PFD_SUPPORT_DIRECTDRAW: Int = 8192

val PFD_DIRECT3D_ACCELERATED: Int = 16384

val PFD_SUPPORT_COMPOSITION: Int = 32768

val PFD_DEPTH_DONTCARE: Int = 536870912

val PFD_DOUBLEBUFFER_DONTCARE: Int = 1073741824

val PFD_STEREO_DONTCARE: Int = -2147483648

val DC_BINADJUST: Int = 19

val DC_EMF_COMPLIANT: Int = 20

val DC_DATATYPE_PRODUCED: Int = 21

val DC_COLLATE: Int = 22

val DC_MANUFACTURER: Int = 23

val DC_MODEL: Int = 24

val DC_PERSONALITY: Int = 25

val DC_PRINTRATE: Int = 26

val DC_PRINTRATEUNIT: Int = 27

val PRINTRATEUNIT_PPM: Int = 1

val PRINTRATEUNIT_CPS: Int = 2

val PRINTRATEUNIT_LPM: Int = 3

val PRINTRATEUNIT_IPM: Int = 4

val DC_PRINTERMEM: Int = 28

val DC_MEDIAREADY: Int = 29

val DC_STAPLE: Int = 30

val DC_PRINTRATEPPM: Int = 31

val DC_COLORDEVICE: Int = 32

val DC_NUP: Int = 33

val DC_MEDIATYPENAMES: Int = 34

val DC_MEDIATYPES: Int = 35

val DCTT_BITMAP: Int = 1

val DCTT_DOWNLOAD: Int = 2

val DCTT_SUBDEV: Int = 4

val DCTT_DOWNLOAD_OUTLINE: Int = 8

val DCBA_FACEUPNONE: Int = 0

val DCBA_FACEUPCENTER: Int = 1

val DCBA_FACEUPLEFT: Int = 2

val DCBA_FACEUPRIGHT: Int = 3

val DCBA_FACEDOWNNONE: Int = 256

val DCBA_FACEDOWNCENTER: Int = 257

val DCBA_FACEDOWNLEFT: Int = 258

val DCBA_FACEDOWNRIGHT: Int = 259

val GS_8BIT_INDICES: Int = 1

val GGI_MARK_NONEXISTING_GLYPHS: Int = 1

val STAMP_DESIGNVECTOR: Int = 134248036

val STAMP_AXESLIST: Int = 134245473

val MM_MAX_NUMAXES: Int = 16

val FR_PRIVATE: Int = 16

val FR_NOT_ENUM: Int = 32

val MM_MAX_AXES_NAMELEN: Int = 16

val AC_SRC_OVER: Int = 0

val AC_SRC_ALPHA: Int = 1

val GRADIENT_FILL_RECT_H: Int = 0

val GRADIENT_FILL_RECT_V: Int = 1

val GRADIENT_FILL_TRIANGLE: Int = 2

val GRADIENT_FILL_OP_FLAG: Int = 255

val CA_NEGATIVE: Int = 1

val CA_LOG_FILTER: Int = 2

val ILLUMINANT_DEVICE_DEFAULT: Int = 0

val ILLUMINANT_A: Int = 1

val ILLUMINANT_B: Int = 2

val ILLUMINANT_C: Int = 3

val ILLUMINANT_D50: Int = 4

val ILLUMINANT_D55: Int = 5

val ILLUMINANT_D65: Int = 6

val ILLUMINANT_D75: Int = 7

val ILLUMINANT_F2: Int = 8

val ILLUMINANT_MAX_INDEX: Int = 8

val ILLUMINANT_TUNGSTEN: Int = 1

val ILLUMINANT_DAYLIGHT: Int = 3

val ILLUMINANT_FLUORESCENT: Int = 8

val ILLUMINANT_NTSC: Int = 3

val RGB_GAMMA_MIN: WORD = 1344

val RGB_GAMMA_MAX: WORD = -536

val REFERENCE_WHITE_MIN: WORD = 6000

val REFERENCE_WHITE_MAX: WORD = 10000

val REFERENCE_BLACK_MIN: WORD = 0

val REFERENCE_BLACK_MAX: WORD = 4000

val COLOR_ADJ_MIN: SHORT = -100

val COLOR_ADJ_MAX: SHORT = 100

val DI_APPBANDING: Int = 1

val DI_ROPS_READ_DESTINATION: Int = 2

val FONTMAPPER_MAX: Int = 10

val ICM_OFF: Int = 1

val ICM_ON: Int = 2

val ICM_QUERY: Int = 3

val ICM_DONE_OUTSIDEDC: Int = 4

val ENHMETA_SIGNATURE: Int = 1179469088

val ENHMETA_STOCK_OBJECT: Int = -2147483648

val EMR_HEADER: Int = 1

val EMR_POLYBEZIER: Int = 2

val EMR_POLYGON: Int = 3

val EMR_POLYLINE: Int = 4

val EMR_POLYBEZIERTO: Int = 5

val EMR_POLYLINETO: Int = 6

val EMR_POLYPOLYLINE: Int = 7

val EMR_POLYPOLYGON: Int = 8

val EMR_SETWINDOWEXTEX: Int = 9

val EMR_SETWINDOWORGEX: Int = 10

val EMR_SETVIEWPORTEXTEX: Int = 11

val EMR_SETVIEWPORTORGEX: Int = 12

val EMR_SETBRUSHORGEX: Int = 13

val EMR_EOF: Int = 14

val EMR_SETPIXELV: Int = 15

val EMR_SETMAPPERFLAGS: Int = 16

val EMR_SETMAPMODE: Int = 17

val EMR_SETBKMODE: Int = 18

val EMR_SETPOLYFILLMODE: Int = 19

val EMR_SETROP2: Int = 20

val EMR_SETSTRETCHBLTMODE: Int = 21

val EMR_SETTEXTALIGN: Int = 22

val EMR_SETCOLORADJUSTMENT: Int = 23

val EMR_SETTEXTCOLOR: Int = 24

val EMR_SETBKCOLOR: Int = 25

val EMR_OFFSETCLIPRGN: Int = 26

val EMR_MOVETOEX: Int = 27

val EMR_SETMETARGN: Int = 28

val EMR_EXCLUDECLIPRECT: Int = 29

val EMR_INTERSECTCLIPRECT: Int = 30

val EMR_SCALEVIEWPORTEXTEX: Int = 31

val EMR_SCALEWINDOWEXTEX: Int = 32

val EMR_SAVEDC: Int = 33

val EMR_RESTOREDC: Int = 34

val EMR_SETWORLDTRANSFORM: Int = 35

val EMR_MODIFYWORLDTRANSFORM: Int = 36

val EMR_SELECTOBJECT: Int = 37

val EMR_CREATEPEN: Int = 38

val EMR_CREATEBRUSHINDIRECT: Int = 39

val EMR_DELETEOBJECT: Int = 40

val EMR_ANGLEARC: Int = 41

val EMR_ELLIPSE: Int = 42

val EMR_RECTANGLE: Int = 43

val EMR_ROUNDRECT: Int = 44

val EMR_ARC: Int = 45

val EMR_CHORD: Int = 46

val EMR_PIE: Int = 47

val EMR_SELECTPALETTE: Int = 48

val EMR_CREATEPALETTE: Int = 49

val EMR_SETPALETTEENTRIES: Int = 50

val EMR_RESIZEPALETTE: Int = 51

val EMR_REALIZEPALETTE: Int = 52

val EMR_EXTFLOODFILL: Int = 53

val EMR_LINETO: Int = 54

val EMR_ARCTO: Int = 55

val EMR_POLYDRAW: Int = 56

val EMR_SETARCDIRECTION: Int = 57

val EMR_SETMITERLIMIT: Int = 58

val EMR_BEGINPATH: Int = 59

val EMR_ENDPATH: Int = 60

val EMR_CLOSEFIGURE: Int = 61

val EMR_FILLPATH: Int = 62

val EMR_STROKEANDFILLPATH: Int = 63

val EMR_STROKEPATH: Int = 64

val EMR_FLATTENPATH: Int = 65

val EMR_WIDENPATH: Int = 66

val EMR_SELECTCLIPPATH: Int = 67

val EMR_ABORTPATH: Int = 68

val EMR_GDICOMMENT: Int = 70

val EMR_FILLRGN: Int = 71

val EMR_FRAMERGN: Int = 72

val EMR_INVERTRGN: Int = 73

val EMR_PAINTRGN: Int = 74

val EMR_EXTSELECTCLIPRGN: Int = 75

val EMR_BITBLT: Int = 76

val EMR_STRETCHBLT: Int = 77

val EMR_MASKBLT: Int = 78

val EMR_PLGBLT: Int = 79

val EMR_SETDIBITSTODEVICE: Int = 80

val EMR_STRETCHDIBITS: Int = 81

val EMR_EXTCREATEFONTINDIRECTW: Int = 82

val EMR_EXTTEXTOUTA: Int = 83

val EMR_EXTTEXTOUTW: Int = 84

val EMR_POLYBEZIER16: Int = 85

val EMR_POLYGON16: Int = 86

val EMR_POLYLINE16: Int = 87

val EMR_POLYBEZIERTO16: Int = 88

val EMR_POLYLINETO16: Int = 89

val EMR_POLYPOLYLINE16: Int = 90

val EMR_POLYPOLYGON16: Int = 91

val EMR_POLYDRAW16: Int = 92

val EMR_CREATEMONOBRUSH: Int = 93

val EMR_CREATEDIBPATTERNBRUSHPT: Int = 94

val EMR_EXTCREATEPEN: Int = 95

val EMR_POLYTEXTOUTA: Int = 96

val EMR_POLYTEXTOUTW: Int = 97

val EMR_SETICMMODE: Int = 98

val EMR_CREATECOLORSPACE: Int = 99

val EMR_SETCOLORSPACE: Int = 100

val EMR_DELETECOLORSPACE: Int = 101

val EMR_GLSRECORD: Int = 102

val EMR_GLSBOUNDEDRECORD: Int = 103

val EMR_PIXELFORMAT: Int = 104

val EMR_RESERVED_105: Int = 105

val EMR_RESERVED_106: Int = 106

val EMR_RESERVED_107: Int = 107

val EMR_RESERVED_108: Int = 108

val EMR_RESERVED_109: Int = 109

val EMR_RESERVED_110: Int = 110

val EMR_COLORCORRECTPALETTE: Int = 111

val EMR_SETICMPROFILEA: Int = 112

val EMR_SETICMPROFILEW: Int = 113

val EMR_ALPHABLEND: Int = 114

val EMR_SETLAYOUT: Int = 115

val EMR_TRANSPARENTBLT: Int = 116

val EMR_RESERVED_117: Int = 117

val EMR_GRADIENTFILL: Int = 118

val EMR_RESERVED_119: Int = 119

val EMR_RESERVED_120: Int = 120

val EMR_COLORMATCHTOTARGETW: Int = 121

val EMR_CREATECOLORSPACEW: Int = 122

val EMR_MIN: Int = 1

val EMR_MAX: Int = 122

val SETICMPROFILE_EMBEDED: Int = 1

val CREATECOLORSPACE_EMBEDED: Int = 1

val COLORMATCHTOTARGET_EMBEDED: Int = 1

val GDICOMMENT_IDENTIFIER: Int = 1128875079

val GDICOMMENT_WINDOWS_METAFILE: Int = -2147483647

val GDICOMMENT_BEGINGROUP: Int = 2

val GDICOMMENT_ENDGROUP: Int = 3

val GDICOMMENT_MULTIFORMATS: Int = 1073741828

val EPS_SIGNATURE: Int = 1179865157

val GDICOMMENT_UNICODE_STRING: Int = 64

val GDICOMMENT_UNICODE_END: Int = 128

val WGL_FONT_LINES: Int = 0

val WGL_FONT_POLYGONS: Int = 1

val LPD_DOUBLEBUFFER: Int = 1

val LPD_STEREO: Int = 2

val LPD_SUPPORT_GDI: Int = 16

val LPD_SUPPORT_OPENGL: Int = 32

val LPD_SHARE_DEPTH: Int = 64

val LPD_SHARE_STENCIL: Int = 128

val LPD_SHARE_ACCUM: Int = 256

val LPD_SWAP_EXCHANGE: Int = 512

val LPD_SWAP_COPY: Int = 1024

val LPD_TRANSPARENT: Int = 4096

val LPD_TYPE_RGBA: Int = 0

val LPD_TYPE_COLORINDEX: Int = 1

val WGL_SWAP_MAIN_PLANE: Int = 1

val WGL_SWAP_OVERLAY1: Int = 2

val WGL_SWAP_OVERLAY2: Int = 4

val WGL_SWAP_OVERLAY3: Int = 8

val WGL_SWAP_OVERLAY4: Int = 16

val WGL_SWAP_OVERLAY5: Int = 32

val WGL_SWAP_OVERLAY6: Int = 64

val WGL_SWAP_OVERLAY7: Int = 128

val WGL_SWAP_OVERLAY8: Int = 256

val WGL_SWAP_OVERLAY9: Int = 512

val WGL_SWAP_OVERLAY10: Int = 1024

val WGL_SWAP_OVERLAY11: Int = 2048

val WGL_SWAP_OVERLAY12: Int = 4096

val WGL_SWAP_OVERLAY13: Int = 8192

val WGL_SWAP_OVERLAY14: Int = 16384

val WGL_SWAP_OVERLAY15: Int = 32768

val WGL_SWAP_UNDERLAY1: Int = 65536

val WGL_SWAP_UNDERLAY2: Int = 131072

val WGL_SWAP_UNDERLAY3: Int = 262144

val WGL_SWAP_UNDERLAY4: Int = 524288

val WGL_SWAP_UNDERLAY5: Int = 1048576

val WGL_SWAP_UNDERLAY6: Int = 2097152

val WGL_SWAP_UNDERLAY7: Int = 4194304

val WGL_SWAP_UNDERLAY8: Int = 8388608

val WGL_SWAP_UNDERLAY9: Int = 16777216

val WGL_SWAP_UNDERLAY10: Int = 33554432

val WGL_SWAP_UNDERLAY11: Int = 67108864

val WGL_SWAP_UNDERLAY12: Int = 134217728

val WGL_SWAP_UNDERLAY13: Int = 268435456

val WGL_SWAP_UNDERLAY14: Int = 536870912

val WGL_SWAP_UNDERLAY15: Int = 1073741824

val WGL_SWAPMULTIPLE_MAX: Int = 16

val DIFFERENCE: Int = 11

val SB_HORZ: Int = 0

val SB_VERT: Int = 1

val SB_CTL: Int = 2

val SB_BOTH: Int = 3

val SB_LINEUP: Int = 0

val SB_LINELEFT: Int = 0

val SB_LINEDOWN: Int = 1

val SB_LINERIGHT: Int = 1

val SB_PAGEUP: Int = 2

val SB_PAGELEFT: Int = 2

val SB_PAGEDOWN: Int = 3

val SB_PAGERIGHT: Int = 3

val SB_THUMBPOSITION: Int = 4

val SB_THUMBTRACK: Int = 5

val SB_TOP: Int = 6

val SB_LEFT: Int = 6

val SB_BOTTOM: Int = 7

val SB_RIGHT: Int = 7

val SB_ENDSCROLL: Int = 8

val SW_HIDE: Int = 0

val SW_SHOWNORMAL: Int = 1

val SW_NORMAL: Int = 1

val SW_SHOWMINIMIZED: Int = 2

val SW_SHOWMAXIMIZED: Int = 3

val SW_MAXIMIZE: Int = 3

val SW_SHOWNOACTIVATE: Int = 4

val SW_SHOW: Int = 5

val SW_MINIMIZE: Int = 6

val SW_SHOWMINNOACTIVE: Int = 7

val SW_SHOWNA: Int = 8

val SW_RESTORE: Int = 9

val SW_SHOWDEFAULT: Int = 10

val SW_FORCEMINIMIZE: Int = 11

val SW_MAX: Int = 11

val HIDE_WINDOW: Int = 0

val SHOW_OPENWINDOW: Int = 1

val SHOW_ICONWINDOW: Int = 2

val SHOW_FULLSCREEN: Int = 3

val SHOW_OPENNOACTIVATE: Int = 4

val SW_PARENTCLOSING: Int = 1

val SW_OTHERZOOM: Int = 2

val SW_PARENTOPENING: Int = 3

val SW_OTHERUNZOOM: Int = 4

val AW_HOR_POSITIVE: Int = 1

val AW_HOR_NEGATIVE: Int = 2

val AW_VER_POSITIVE: Int = 4

val AW_VER_NEGATIVE: Int = 8

val AW_CENTER: Int = 16

val AW_HIDE: Int = 65536

val AW_ACTIVATE: Int = 131072

val AW_SLIDE: Int = 262144

val AW_BLEND: Int = 524288

val KF_EXTENDED: Int = 256

val KF_DLGMODE: Int = 2048

val KF_MENUMODE: Int = 4096

val KF_ALTDOWN: Int = 8192

val KF_REPEAT: Int = 16384

val KF_UP: Int = 32768

val VK_LBUTTON: Int = 1

val VK_RBUTTON: Int = 2

val VK_CANCEL: Int = 3

val VK_MBUTTON: Int = 4

val VK_XBUTTON1: Int = 5

val VK_XBUTTON2: Int = 6

val VK_BACK: Int = 8

val VK_TAB: Int = 9

val VK_CLEAR: Int = 12

val VK_RETURN: Int = 13

val VK_SHIFT: Int = 16

val VK_CONTROL: Int = 17

val VK_MENU: Int = 18

val VK_PAUSE: Int = 19

val VK_CAPITAL: Int = 20

val VK_KANA: Int = 21

val VK_HANGEUL: Int = 21

val VK_HANGUL: Int = 21

val VK_JUNJA: Int = 23

val VK_FINAL: Int = 24

val VK_HANJA: Int = 25

val VK_KANJI: Int = 25

val VK_ESCAPE: Int = 27

val VK_CONVERT: Int = 28

val VK_NONCONVERT: Int = 29

val VK_ACCEPT: Int = 30

val VK_MODECHANGE: Int = 31

val VK_SPACE: Int = 32

val VK_PRIOR: Int = 33

val VK_NEXT: Int = 34

val VK_END: Int = 35

val VK_HOME: Int = 36

val VK_LEFT: Int = 37

val VK_UP: Int = 38

val VK_RIGHT: Int = 39

val VK_DOWN: Int = 40

val VK_SELECT: Int = 41

val VK_PRINT: Int = 42

val VK_EXECUTE: Int = 43

val VK_SNAPSHOT: Int = 44

val VK_INSERT: Int = 45

val VK_DELETE: Int = 46

val VK_HELP: Int = 47

val VK_LWIN: Int = 91

val VK_RWIN: Int = 92

val VK_APPS: Int = 93

val VK_SLEEP: Int = 95

val VK_NUMPAD0: Int = 96

val VK_NUMPAD1: Int = 97

val VK_NUMPAD2: Int = 98

val VK_NUMPAD3: Int = 99

val VK_NUMPAD4: Int = 100

val VK_NUMPAD5: Int = 101

val VK_NUMPAD6: Int = 102

val VK_NUMPAD7: Int = 103

val VK_NUMPAD8: Int = 104

val VK_NUMPAD9: Int = 105

val VK_MULTIPLY: Int = 106

val VK_ADD: Int = 107

val VK_SEPARATOR: Int = 108

val VK_SUBTRACT: Int = 109

val VK_DECIMAL: Int = 110

val VK_DIVIDE: Int = 111

val VK_F1: Int = 112

val VK_F2: Int = 113

val VK_F3: Int = 114

val VK_F4: Int = 115

val VK_F5: Int = 116

val VK_F6: Int = 117

val VK_F7: Int = 118

val VK_F8: Int = 119

val VK_F9: Int = 120

val VK_F10: Int = 121

val VK_F11: Int = 122

val VK_F12: Int = 123

val VK_F13: Int = 124

val VK_F14: Int = 125

val VK_F15: Int = 126

val VK_F16: Int = 127

val VK_F17: Int = 128

val VK_F18: Int = 129

val VK_F19: Int = 130

val VK_F20: Int = 131

val VK_F21: Int = 132

val VK_F22: Int = 133

val VK_F23: Int = 134

val VK_F24: Int = 135

val VK_NUMLOCK: Int = 144

val VK_SCROLL: Int = 145

val VK_OEM_NEC_EQUAL: Int = 146

val VK_OEM_FJ_JISHO: Int = 146

val VK_OEM_FJ_MASSHOU: Int = 147

val VK_OEM_FJ_TOUROKU: Int = 148

val VK_OEM_FJ_LOYA: Int = 149

val VK_OEM_FJ_ROYA: Int = 150

val VK_LSHIFT: Int = 160

val VK_RSHIFT: Int = 161

val VK_LCONTROL: Int = 162

val VK_RCONTROL: Int = 163

val VK_LMENU: Int = 164

val VK_RMENU: Int = 165

val VK_BROWSER_BACK: Int = 166

val VK_BROWSER_FORWARD: Int = 167

val VK_BROWSER_REFRESH: Int = 168

val VK_BROWSER_STOP: Int = 169

val VK_BROWSER_SEARCH: Int = 170

val VK_BROWSER_FAVORITES: Int = 171

val VK_BROWSER_HOME: Int = 172

val VK_VOLUME_MUTE: Int = 173

val VK_VOLUME_DOWN: Int = 174

val VK_VOLUME_UP: Int = 175

val VK_MEDIA_NEXT_TRACK: Int = 176

val VK_MEDIA_PREV_TRACK: Int = 177

val VK_MEDIA_STOP: Int = 178

val VK_MEDIA_PLAY_PAUSE: Int = 179

val VK_LAUNCH_MAIL: Int = 180

val VK_LAUNCH_MEDIA_SELECT: Int = 181

val VK_LAUNCH_APP1: Int = 182

val VK_LAUNCH_APP2: Int = 183

val VK_OEM_1: Int = 186

val VK_OEM_PLUS: Int = 187

val VK_OEM_COMMA: Int = 188

val VK_OEM_MINUS: Int = 189

val VK_OEM_PERIOD: Int = 190

val VK_OEM_2: Int = 191

val VK_OEM_3: Int = 192

val VK_OEM_4: Int = 219

val VK_OEM_5: Int = 220

val VK_OEM_6: Int = 221

val VK_OEM_7: Int = 222

val VK_OEM_8: Int = 223

val VK_OEM_AX: Int = 225

val VK_OEM_102: Int = 226

val VK_ICO_HELP: Int = 227

val VK_ICO_00: Int = 228

val VK_PROCESSKEY: Int = 229

val VK_ICO_CLEAR: Int = 230

val VK_PACKET: Int = 231

val VK_OEM_RESET: Int = 233

val VK_OEM_JUMP: Int = 234

val VK_OEM_PA1: Int = 235

val VK_OEM_PA2: Int = 236

val VK_OEM_PA3: Int = 237

val VK_OEM_WSCTRL: Int = 238

val VK_OEM_CUSEL: Int = 239

val VK_OEM_ATTN: Int = 240

val VK_OEM_FINISH: Int = 241

val VK_OEM_COPY: Int = 242

val VK_OEM_AUTO: Int = 243

val VK_OEM_ENLW: Int = 244

val VK_OEM_BACKTAB: Int = 245

val VK_ATTN: Int = 246

val VK_CRSEL: Int = 247

val VK_EXSEL: Int = 248

val VK_EREOF: Int = 249

val VK_PLAY: Int = 250

val VK_ZOOM: Int = 251

val VK_NONAME: Int = 252

val VK_PA1: Int = 253

val VK_OEM_CLEAR: Int = 254

val WH_MIN: Int = -1

val WH_MSGFILTER: Int = -1

val WH_JOURNALRECORD: Int = 0

val WH_JOURNALPLAYBACK: Int = 1

val WH_KEYBOARD: Int = 2

val WH_GETMESSAGE: Int = 3

val WH_CALLWNDPROC: Int = 4

val WH_CBT: Int = 5

val WH_SYSMSGFILTER: Int = 6

val WH_MOUSE: Int = 7

val WH_HARDWARE: Int = 8

val WH_DEBUG: Int = 9

val WH_SHELL: Int = 10

val WH_FOREGROUNDIDLE: Int = 11

val WH_CALLWNDPROCRET: Int = 12

val WH_KEYBOARD_LL: Int = 13

val WH_MOUSE_LL: Int = 14

val WH_MAX: Int = 14

val WH_MINHOOK: Int = -1

val WH_MAXHOOK: Int = 14

val HC_ACTION: Int = 0

val HC_GETNEXT: Int = 1

val HC_SKIP: Int = 2

val HC_NOREMOVE: Int = 3

val HC_NOREM: Int = 3

val HC_SYSMODALON: Int = 4

val HC_SYSMODALOFF: Int = 5

val HCBT_MOVESIZE: Int = 0

val HCBT_MINMAX: Int = 1

val HCBT_QS: Int = 2

val HCBT_CREATEWND: Int = 3

val HCBT_DESTROYWND: Int = 4

val HCBT_ACTIVATE: Int = 5

val HCBT_CLICKSKIPPED: Int = 6

val HCBT_KEYSKIPPED: Int = 7

val HCBT_SYSCOMMAND: Int = 8

val HCBT_SETFOCUS: Int = 9

val WTS_CONSOLE_CONNECT: Int = 1

val WTS_CONSOLE_DISCONNECT: Int = 2

val WTS_REMOTE_CONNECT: Int = 3

val WTS_REMOTE_DISCONNECT: Int = 4

val WTS_SESSION_LOGON: Int = 5

val WTS_SESSION_LOGOFF: Int = 6

val WTS_SESSION_LOCK: Int = 7

val WTS_SESSION_UNLOCK: Int = 8

val WTS_SESSION_REMOTE_CONTROL: Int = 9

val WTS_SESSION_CREATE: Int = 10

val WTS_SESSION_TERMINATE: Int = 11

val MSGF_DIALOGBOX: Int = 0

val MSGF_MESSAGEBOX: Int = 1

val MSGF_MENU: Int = 2

val MSGF_SCROLLBAR: Int = 5

val MSGF_NEXTWINDOW: Int = 6

val MSGF_MAX: Int = 8

val MSGF_USER: Int = 4096

val HSHELL_WINDOWCREATED: Int = 1

val HSHELL_WINDOWDESTROYED: Int = 2

val HSHELL_ACTIVATESHELLWINDOW: Int = 3

val HSHELL_WINDOWACTIVATED: Int = 4

val HSHELL_GETMINRECT: Int = 5

val HSHELL_REDRAW: Int = 6

val HSHELL_TASKMAN: Int = 7

val HSHELL_LANGUAGE: Int = 8

val HSHELL_SYSMENU: Int = 9

val HSHELL_ENDTASK: Int = 10

val HSHELL_ACCESSIBILITYSTATE: Int = 11

val HSHELL_APPCOMMAND: Int = 12

val HSHELL_WINDOWREPLACED: Int = 13

val HSHELL_WINDOWREPLACING: Int = 14

val HSHELL_HIGHBIT: Int = 32768

val HSHELL_FLASH: Int = 32774

val HSHELL_RUDEAPPACTIVATED: Int = 32772

val ACCESS_STICKYKEYS: Int = 1

val ACCESS_FILTERKEYS: Int = 2

val ACCESS_MOUSEKEYS: Int = 3

val APPCOMMAND_BROWSER_BACKWARD: Int = 1

val APPCOMMAND_BROWSER_FORWARD: Int = 2

val APPCOMMAND_BROWSER_REFRESH: Int = 3

val APPCOMMAND_BROWSER_STOP: Int = 4

val APPCOMMAND_BROWSER_SEARCH: Int = 5

val APPCOMMAND_BROWSER_FAVORITES: Int = 6

val APPCOMMAND_BROWSER_HOME: Int = 7

val APPCOMMAND_VOLUME_MUTE: Int = 8

val APPCOMMAND_VOLUME_DOWN: Int = 9

val APPCOMMAND_VOLUME_UP: Int = 10

val APPCOMMAND_MEDIA_NEXTTRACK: Int = 11

val APPCOMMAND_MEDIA_PREVIOUSTRACK: Int = 12

val APPCOMMAND_MEDIA_STOP: Int = 13

val APPCOMMAND_MEDIA_PLAY_PAUSE: Int = 14

val APPCOMMAND_LAUNCH_MAIL: Int = 15

val APPCOMMAND_LAUNCH_MEDIA_SELECT: Int = 16

val APPCOMMAND_LAUNCH_APP1: Int = 17

val APPCOMMAND_LAUNCH_APP2: Int = 18

val APPCOMMAND_BASS_DOWN: Int = 19

val APPCOMMAND_BASS_BOOST: Int = 20

val APPCOMMAND_BASS_UP: Int = 21

val APPCOMMAND_TREBLE_DOWN: Int = 22

val APPCOMMAND_TREBLE_UP: Int = 23

val APPCOMMAND_MICROPHONE_VOLUME_MUTE: Int = 24

val APPCOMMAND_MICROPHONE_VOLUME_DOWN: Int = 25

val APPCOMMAND_MICROPHONE_VOLUME_UP: Int = 26

val APPCOMMAND_HELP: Int = 27

val APPCOMMAND_FIND: Int = 28

val APPCOMMAND_NEW: Int = 29

val APPCOMMAND_OPEN: Int = 30

val APPCOMMAND_CLOSE: Int = 31

val APPCOMMAND_SAVE: Int = 32

val APPCOMMAND_PRINT: Int = 33

val APPCOMMAND_UNDO: Int = 34

val APPCOMMAND_REDO: Int = 35

val APPCOMMAND_COPY: Int = 36

val APPCOMMAND_CUT: Int = 37

val APPCOMMAND_PASTE: Int = 38

val APPCOMMAND_REPLY_TO_MAIL: Int = 39

val APPCOMMAND_FORWARD_MAIL: Int = 40

val APPCOMMAND_SEND_MAIL: Int = 41

val APPCOMMAND_SPELL_CHECK: Int = 42

val APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE: Int = 43

val APPCOMMAND_MIC_ON_OFF_TOGGLE: Int = 44

val APPCOMMAND_CORRECTION_LIST: Int = 45

val APPCOMMAND_MEDIA_PLAY: Int = 46

val APPCOMMAND_MEDIA_PAUSE: Int = 47

val APPCOMMAND_MEDIA_RECORD: Int = 48

val APPCOMMAND_MEDIA_FAST_FORWARD: Int = 49

val APPCOMMAND_MEDIA_REWIND: Int = 50

val APPCOMMAND_MEDIA_CHANNEL_UP: Int = 51

val APPCOMMAND_MEDIA_CHANNEL_DOWN: Int = 52

val FAPPCOMMAND_MOUSE: Int = 32768

val FAPPCOMMAND_KEY: Int = 0

val FAPPCOMMAND_OEM: Int = 4096

val FAPPCOMMAND_MASK: Int = 61440

val LLKHF_EXTENDED: Int = 1

val LLKHF_INJECTED: Int = 16

val LLKHF_ALTDOWN: Int = 32

val LLKHF_UP: Int = 128

val LLMHF_INJECTED: Int = 1

val HKL_PREV: Int = 0

val HKL_NEXT: Int = 1

val KLF_ACTIVATE: Int = 1

val KLF_SUBSTITUTE_OK: Int = 2

val KLF_REORDER: Int = 8

val KLF_REPLACELANG: Int = 16

val KLF_NOTELLSHELL: Int = 128

val KLF_SETFORPROCESS: Int = 256

val KLF_SHIFTLOCK: Int = 65536

val KLF_RESET: Int = 1073741824

val INPUTLANGCHANGE_SYSCHARSET: Int = 1

val INPUTLANGCHANGE_FORWARD: Int = 2

val INPUTLANGCHANGE_BACKWARD: Int = 4

val KL_NAMELENGTH: Int = 9

val GMMP_USE_DISPLAY_POINTS: Int = 1

val GMMP_USE_HIGH_RESOLUTION_POINTS: Int = 2

val DESKTOP_READOBJECTS: Int = 1

val DESKTOP_CREATEWINDOW: Int = 2

val DESKTOP_CREATEMENU: Int = 4

val DESKTOP_HOOKCONTROL: Int = 8

val DESKTOP_JOURNALRECORD: Int = 16

val DESKTOP_JOURNALPLAYBACK: Int = 32

val DESKTOP_ENUMERATE: Int = 64

val DESKTOP_WRITEOBJECTS: Int = 128

val DESKTOP_SWITCHDESKTOP: Int = 256

val DF_ALLOWOTHERACCOUNTHOOK: Int = 1

val WINSTA_ENUMDESKTOPS: Int = 1

val WINSTA_READATTRIBUTES: Int = 2

val WINSTA_ACCESSCLIPBOARD: Int = 4

val WINSTA_CREATEDESKTOP: Int = 8

val WINSTA_WRITEATTRIBUTES: Int = 16

val WINSTA_ACCESSGLOBALATOMS: Int = 32

val WINSTA_EXITWINDOWS: Int = 64

val WINSTA_ENUMERATE: Int = 256

val WINSTA_READSCREEN: Int = 512

val WINSTA_ALL_ACCESS: Int = 895

val CWF_CREATE_ONLY: Int = 1

val WSF_VISIBLE: Int = 1

val UOI_FLAGS: Int = 1

val UOI_NAME: Int = 2

val UOI_TYPE: Int = 3

val UOI_USER_SID: Int = 4

val GWL_STYLE: Int = -16

val GWL_EXSTYLE: Int = -20

val GWL_ID: Int = -12

val GWLP_WNDPROC: Int = -4

val GWLP_HINSTANCE: Int = -6

val GWLP_HWNDPARENT: Int = -8

val GWLP_USERDATA: Int = -21

val GWLP_ID: Int = -12

val GCL_CBWNDEXTRA: Int = -18

val GCL_CBCLSEXTRA: Int = -20

val GCL_STYLE: Int = -26

val GCW_ATOM: Int = -32

val GCLP_MENUNAME: Int = -8

val GCLP_HBRBACKGROUND: Int = -10

val GCLP_HCURSOR: Int = -12

val GCLP_HICON: Int = -14

val GCLP_HMODULE: Int = -16

val GCLP_WNDPROC: Int = -24

val GCLP_HICONSM: Int = -34

val WM_NULL: Int = 0

val WM_CREATE: Int = 1

val WM_DESTROY: Int = 2

val WM_MOVE: Int = 3

val WM_SIZE: Int = 5

val WM_ACTIVATE: Int = 6

val WA_INACTIVE: Int = 0

val WA_ACTIVE: Int = 1

val WA_CLICKACTIVE: Int = 2

val WM_SETFOCUS: Int = 7

val WM_KILLFOCUS: Int = 8

val WM_ENABLE: Int = 10

val WM_SETREDRAW: Int = 11

val WM_SETTEXT: Int = 12

val WM_GETTEXT: Int = 13

val WM_GETTEXTLENGTH: Int = 14

val WM_PAINT: Int = 15

val WM_CLOSE: Int = 16

val WM_QUERYENDSESSION: Int = 17

val WM_QUERYOPEN: Int = 19

val WM_ENDSESSION: Int = 22

val WM_QUIT: Int = 18

val WM_ERASEBKGND: Int = 20

val WM_SYSCOLORCHANGE: Int = 21

val WM_SHOWWINDOW: Int = 24

val WM_WININICHANGE: Int = 26

val WM_SETTINGCHANGE: Int = 26

val WM_DEVMODECHANGE: Int = 27

val WM_ACTIVATEAPP: Int = 28

val WM_FONTCHANGE: Int = 29

val WM_TIMECHANGE: Int = 30

val WM_CANCELMODE: Int = 31

val WM_SETCURSOR: Int = 32

val WM_MOUSEACTIVATE: Int = 33

val WM_CHILDACTIVATE: Int = 34

val WM_QUEUESYNC: Int = 35

val WM_GETMINMAXINFO: Int = 36

val WM_PAINTICON: Int = 38

val WM_ICONERASEBKGND: Int = 39

val WM_NEXTDLGCTL: Int = 40

val WM_SPOOLERSTATUS: Int = 42

val WM_DRAWITEM: Int = 43

val WM_MEASUREITEM: Int = 44

val WM_DELETEITEM: Int = 45

val WM_VKEYTOITEM: Int = 46

val WM_CHARTOITEM: Int = 47

val WM_SETFONT: Int = 48

val WM_GETFONT: Int = 49

val WM_SETHOTKEY: Int = 50

val WM_GETHOTKEY: Int = 51

val WM_QUERYDRAGICON: Int = 55

val WM_COMPAREITEM: Int = 57

val WM_GETOBJECT: Int = 61

val WM_COMPACTING: Int = 65

val WM_COMMNOTIFY: Int = 68

val WM_WINDOWPOSCHANGING: Int = 70

val WM_WINDOWPOSCHANGED: Int = 71

val WM_POWER: Int = 72

val PWR_OK: Int = 1

val PWR_FAIL: Int = -1

val PWR_SUSPENDREQUEST: Int = 1

val PWR_SUSPENDRESUME: Int = 2

val PWR_CRITICALRESUME: Int = 3

val WM_COPYDATA: Int = 74

val WM_CANCELJOURNAL: Int = 75

val WM_NOTIFY: Int = 78

val WM_INPUTLANGCHANGEREQUEST: Int = 80

val WM_INPUTLANGCHANGE: Int = 81

val WM_TCARD: Int = 82

val WM_HELP: Int = 83

val WM_USERCHANGED: Int = 84

val WM_NOTIFYFORMAT: Int = 85

val NFR_ANSI: Int = 1

val NFR_UNICODE: Int = 2

val NF_QUERY: Int = 3

val NF_REQUERY: Int = 4

val WM_CONTEXTMENU: Int = 123

val WM_STYLECHANGING: Int = 124

val WM_STYLECHANGED: Int = 125

val WM_DISPLAYCHANGE: Int = 126

val WM_GETICON: Int = 127

val WM_SETICON: Int = 128

val WM_NCCREATE: Int = 129

val WM_NCDESTROY: Int = 130

val WM_NCCALCSIZE: Int = 131

val WM_NCHITTEST: Int = 132

val WM_NCPAINT: Int = 133

val WM_NCACTIVATE: Int = 134

val WM_GETDLGCODE: Int = 135

val WM_SYNCPAINT: Int = 136

val WM_NCMOUSEMOVE: Int = 160

val WM_NCLBUTTONDOWN: Int = 161

val WM_NCLBUTTONUP: Int = 162

val WM_NCLBUTTONDBLCLK: Int = 163

val WM_NCRBUTTONDOWN: Int = 164

val WM_NCRBUTTONUP: Int = 165

val WM_NCRBUTTONDBLCLK: Int = 166

val WM_NCMBUTTONDOWN: Int = 167

val WM_NCMBUTTONUP: Int = 168

val WM_NCMBUTTONDBLCLK: Int = 169

val WM_NCXBUTTONDOWN: Int = 171

val WM_NCXBUTTONUP: Int = 172

val WM_NCXBUTTONDBLCLK: Int = 173

val WM_INPUT_DEVICE_CHANGE: Int = 254

val WM_INPUT: Int = 255

val WM_KEYFIRST: Int = 256

val WM_KEYDOWN: Int = 256

val WM_KEYUP: Int = 257

val WM_CHAR: Int = 258

val WM_DEADCHAR: Int = 259

val WM_SYSKEYDOWN: Int = 260

val WM_SYSKEYUP: Int = 261

val WM_SYSCHAR: Int = 262

val WM_SYSDEADCHAR: Int = 263

val WM_UNICHAR: Int = 265

val WM_KEYLAST: Int = 265

val UNICODE_NOCHAR: Int = 65535

val WM_IME_STARTCOMPOSITION: Int = 269

val WM_IME_ENDCOMPOSITION: Int = 270

val WM_IME_COMPOSITION: Int = 271

val WM_IME_KEYLAST: Int = 271

val WM_INITDIALOG: Int = 272

val WM_COMMAND: Int = 273

val WM_SYSCOMMAND: Int = 274

val WM_TIMER: Int = 275

val WM_HSCROLL: Int = 276

val WM_VSCROLL: Int = 277

val WM_INITMENU: Int = 278

val WM_INITMENUPOPUP: Int = 279

val WM_MENUSELECT: Int = 287

val WM_MENUCHAR: Int = 288

val WM_ENTERIDLE: Int = 289

val WM_MENURBUTTONUP: Int = 290

val WM_MENUDRAG: Int = 291

val WM_MENUGETOBJECT: Int = 292

val WM_UNINITMENUPOPUP: Int = 293

val WM_MENUCOMMAND: Int = 294

val WM_CHANGEUISTATE: Int = 295

val WM_UPDATEUISTATE: Int = 296

val WM_QUERYUISTATE: Int = 297

val UIS_SET: Int = 1

val UIS_CLEAR: Int = 2

val UIS_INITIALIZE: Int = 3

val UISF_HIDEFOCUS: Int = 1

val UISF_HIDEACCEL: Int = 2

val UISF_ACTIVE: Int = 4

val WM_CTLCOLORMSGBOX: Int = 306

val WM_CTLCOLOREDIT: Int = 307

val WM_CTLCOLORLISTBOX: Int = 308

val WM_CTLCOLORBTN: Int = 309

val WM_CTLCOLORDLG: Int = 310

val WM_CTLCOLORSCROLLBAR: Int = 311

val WM_CTLCOLORSTATIC: Int = 312

val MN_GETHMENU: Int = 481

val WM_MOUSEFIRST: Int = 512

val WM_MOUSEMOVE: Int = 512

val WM_LBUTTONDOWN: Int = 513

val WM_LBUTTONUP: Int = 514

val WM_LBUTTONDBLCLK: Int = 515

val WM_RBUTTONDOWN: Int = 516

val WM_RBUTTONUP: Int = 517

val WM_RBUTTONDBLCLK: Int = 518

val WM_MBUTTONDOWN: Int = 519

val WM_MBUTTONUP: Int = 520

val WM_MBUTTONDBLCLK: Int = 521

val WM_MOUSEWHEEL: Int = 522

val WM_XBUTTONDOWN: Int = 523

val WM_XBUTTONUP: Int = 524

val WM_XBUTTONDBLCLK: Int = 525

val WM_MOUSELAST: Int = 525

val WHEEL_DELTA: Int = 120

val WHEEL_PAGESCROLL: Int = -1

val XBUTTON1: Int = 1

val XBUTTON2: Int = 2

val WM_PARENTNOTIFY: Int = 528

val WM_ENTERMENULOOP: Int = 529

val WM_EXITMENULOOP: Int = 530

val WM_NEXTMENU: Int = 531

val WM_SIZING: Int = 532

val WM_CAPTURECHANGED: Int = 533

val WM_MOVING: Int = 534

val WM_POWERBROADCAST: Int = 536

val PBT_APMQUERYSUSPEND: Int = 0

val PBT_APMQUERYSTANDBY: Int = 1

val PBT_APMQUERYSUSPENDFAILED: Int = 2

val PBT_APMQUERYSTANDBYFAILED: Int = 3

val PBT_APMSUSPEND: Int = 4

val PBT_APMSTANDBY: Int = 5

val PBT_APMRESUMECRITICAL: Int = 6

val PBT_APMRESUMESUSPEND: Int = 7

val PBT_APMRESUMESTANDBY: Int = 8

val PBTF_APMRESUMEFROMFAILURE: Int = 1

val PBT_APMBATTERYLOW: Int = 9

val PBT_APMPOWERSTATUSCHANGE: Int = 10

val PBT_APMOEMEVENT: Int = 11

val PBT_APMRESUMEAUTOMATIC: Int = 18

val PBT_POWERSETTINGCHANGE: Int = 32787

val WM_DEVICECHANGE: Int = 537

val WM_MDICREATE: Int = 544

val WM_MDIDESTROY: Int = 545

val WM_MDIACTIVATE: Int = 546

val WM_MDIRESTORE: Int = 547

val WM_MDINEXT: Int = 548

val WM_MDIMAXIMIZE: Int = 549

val WM_MDITILE: Int = 550

val WM_MDICASCADE: Int = 551

val WM_MDIICONARRANGE: Int = 552

val WM_MDIGETACTIVE: Int = 553

val WM_MDISETMENU: Int = 560

val WM_ENTERSIZEMOVE: Int = 561

val WM_EXITSIZEMOVE: Int = 562

val WM_DROPFILES: Int = 563

val WM_MDIREFRESHMENU: Int = 564

val WM_IME_SETCONTEXT: Int = 641

val WM_IME_NOTIFY: Int = 642

val WM_IME_CONTROL: Int = 643

val WM_IME_COMPOSITIONFULL: Int = 644

val WM_IME_SELECT: Int = 645

val WM_IME_CHAR: Int = 646

val WM_IME_REQUEST: Int = 648

val WM_IME_KEYDOWN: Int = 656

val WM_IME_KEYUP: Int = 657

val WM_MOUSEHOVER: Int = 673

val WM_MOUSELEAVE: Int = 675

val WM_NCMOUSEHOVER: Int = 672

val WM_NCMOUSELEAVE: Int = 674

val WM_WTSSESSION_CHANGE: Int = 689

val WM_TABLET_FIRST: Int = 704

val WM_TABLET_LAST: Int = 735

val WM_CUT: Int = 768

val WM_COPY: Int = 769

val WM_PASTE: Int = 770

val WM_CLEAR: Int = 771

val WM_UNDO: Int = 772

val WM_RENDERFORMAT: Int = 773

val WM_RENDERALLFORMATS: Int = 774

val WM_DESTROYCLIPBOARD: Int = 775

val WM_DRAWCLIPBOARD: Int = 776

val WM_PAINTCLIPBOARD: Int = 777

val WM_VSCROLLCLIPBOARD: Int = 778

val WM_SIZECLIPBOARD: Int = 779

val WM_ASKCBFORMATNAME: Int = 780

val WM_CHANGECBCHAIN: Int = 781

val WM_HSCROLLCLIPBOARD: Int = 782

val WM_QUERYNEWPALETTE: Int = 783

val WM_PALETTEISCHANGING: Int = 784

val WM_PALETTECHANGED: Int = 785

val WM_HOTKEY: Int = 786

val WM_PRINT: Int = 791

val WM_PRINTCLIENT: Int = 792

val WM_APPCOMMAND: Int = 793

val WM_THEMECHANGED: Int = 794

val WM_CLIPBOARDUPDATE: Int = 797

val WM_HANDHELDFIRST: Int = 856

val WM_HANDHELDLAST: Int = 863

val WM_AFXFIRST: Int = 864

val WM_AFXLAST: Int = 895

val WM_PENWINFIRST: Int = 896

val WM_PENWINLAST: Int = 911

val WM_APP: Int = 32768

val WM_USER: Int = 1024

val WMSZ_LEFT: Int = 1

val WMSZ_RIGHT: Int = 2

val WMSZ_TOP: Int = 3

val WMSZ_TOPLEFT: Int = 4

val WMSZ_TOPRIGHT: Int = 5

val WMSZ_BOTTOM: Int = 6

val WMSZ_BOTTOMLEFT: Int = 7

val WMSZ_BOTTOMRIGHT: Int = 8

val HTERROR: Int = -2

val HTTRANSPARENT: Int = -1

val HTNOWHERE: Int = 0

val HTCLIENT: Int = 1

val HTCAPTION: Int = 2

val HTSYSMENU: Int = 3

val HTGROWBOX: Int = 4

val HTSIZE: Int = 4

val HTMENU: Int = 5

val HTHSCROLL: Int = 6

val HTVSCROLL: Int = 7

val HTMINBUTTON: Int = 8

val HTMAXBUTTON: Int = 9

val HTLEFT: Int = 10

val HTRIGHT: Int = 11

val HTTOP: Int = 12

val HTTOPLEFT: Int = 13

val HTTOPRIGHT: Int = 14

val HTBOTTOM: Int = 15

val HTBOTTOMLEFT: Int = 16

val HTBOTTOMRIGHT: Int = 17

val HTBORDER: Int = 18

val HTREDUCE: Int = 8

val HTZOOM: Int = 9

val HTSIZEFIRST: Int = 10

val HTSIZELAST: Int = 17

val HTOBJECT: Int = 19

val HTCLOSE: Int = 20

val HTHELP: Int = 21

val SMTO_NORMAL: Int = 0

val SMTO_BLOCK: Int = 1

val SMTO_ABORTIFHUNG: Int = 2

val SMTO_NOTIMEOUTIFNOTHUNG: Int = 8

val MA_ACTIVATE: Int = 1

val MA_ACTIVATEANDEAT: Int = 2

val MA_NOACTIVATE: Int = 3

val MA_NOACTIVATEANDEAT: Int = 4

val ICON_SMALL: Int = 0

val ICON_BIG: Int = 1

val ICON_SMALL2: Int = 2

val SIZE_RESTORED: Int = 0

val SIZE_MINIMIZED: Int = 1

val SIZE_MAXIMIZED: Int = 2

val SIZE_MAXSHOW: Int = 3

val SIZE_MAXHIDE: Int = 4

val SIZENORMAL: Int = 0

val SIZEICONIC: Int = 1

val SIZEFULLSCREEN: Int = 2

val SIZEZOOMSHOW: Int = 3

val SIZEZOOMHIDE: Int = 4

val WVR_ALIGNTOP: Int = 16

val WVR_ALIGNLEFT: Int = 32

val WVR_ALIGNBOTTOM: Int = 64

val WVR_ALIGNRIGHT: Int = 128

val WVR_HREDRAW: Int = 256

val WVR_VREDRAW: Int = 512

val WVR_REDRAW: Int = 768

val WVR_VALIDRECTS: Int = 1024

val MK_LBUTTON: Int = 1

val MK_RBUTTON: Int = 2

val MK_SHIFT: Int = 4

val MK_CONTROL: Int = 8

val MK_MBUTTON: Int = 16

val MK_XBUTTON1: Int = 32

val MK_XBUTTON2: Int = 64

val TME_HOVER: Int = 1

val TME_LEAVE: Int = 2

val TME_NONCLIENT: Int = 16

val TME_QUERY: Int = 1073741824

val TME_CANCEL: Int = -2147483648

val HOVER_DEFAULT: Int = -1

val WS_OVERLAPPED: Int = 0

val WS_POPUP: Int = -2147483648

val WS_CHILD: Int = 1073741824

val WS_MINIMIZE: Int = 536870912

val WS_VISIBLE: Int = 268435456

val WS_DISABLED: Int = 134217728

val WS_CLIPSIBLINGS: Int = 67108864

val WS_CLIPCHILDREN: Int = 33554432

val WS_MAXIMIZE: Int = 16777216

val WS_CAPTION: Int = 12582912

val WS_BORDER: Int = 8388608

val WS_DLGFRAME: Int = 4194304

val WS_VSCROLL: Int = 2097152

val WS_HSCROLL: Int = 1048576

val WS_SYSMENU: Int = 524288

val WS_THICKFRAME: Int = 262144

val WS_GROUP: Int = 131072

val WS_TABSTOP: Int = 65536

val WS_MINIMIZEBOX: Int = 131072

val WS_MAXIMIZEBOX: Int = 65536

val WS_TILED: Int = 0

val WS_ICONIC: Int = 536870912

val WS_SIZEBOX: Int = 262144

val WS_TILEDWINDOW: Int = 13565952

val WS_OVERLAPPEDWINDOW: Int = 13565952

val WS_POPUPWINDOW: Int = -2138570752

val WS_CHILDWINDOW: Int = 1073741824

val WS_EX_DLGMODALFRAME: Int = 1

val WS_EX_NOPARENTNOTIFY: Int = 4

val WS_EX_TOPMOST: Int = 8

val WS_EX_ACCEPTFILES: Int = 16

val WS_EX_TRANSPARENT: Int = 32

val WS_EX_MDICHILD: Int = 64

val WS_EX_TOOLWINDOW: Int = 128

val WS_EX_WINDOWEDGE: Int = 256

val WS_EX_CLIENTEDGE: Int = 512

val WS_EX_CONTEXTHELP: Int = 1024

val WS_EX_RIGHT: Int = 4096

val WS_EX_LEFT: Int = 0

val WS_EX_RTLREADING: Int = 8192

val WS_EX_LTRREADING: Int = 0

val WS_EX_LEFTSCROLLBAR: Int = 16384

val WS_EX_RIGHTSCROLLBAR: Int = 0

val WS_EX_CONTROLPARENT: Int = 65536

val WS_EX_STATICEDGE: Int = 131072

val WS_EX_APPWINDOW: Int = 262144

val WS_EX_OVERLAPPEDWINDOW: Int = 768

val WS_EX_PALETTEWINDOW: Int = 392

val WS_EX_LAYERED: Int = 524288

val WS_EX_NOINHERITLAYOUT: Int = 1048576

val WS_EX_LAYOUTRTL: Int = 4194304

val WS_EX_COMPOSITED: Int = 33554432

val WS_EX_NOACTIVATE: Int = 134217728

val CS_VREDRAW: Int = 1

val CS_HREDRAW: Int = 2

val CS_DBLCLKS: Int = 8

val CS_OWNDC: Int = 32

val CS_CLASSDC: Int = 64

val CS_PARENTDC: Int = 128

val CS_NOCLOSE: Int = 512

val CS_SAVEBITS: Int = 2048

val CS_BYTEALIGNCLIENT: Int = 4096

val CS_BYTEALIGNWINDOW: Int = 8192

val CS_GLOBALCLASS: Int = 16384

val CS_IME: Int = 65536

val CS_DROPSHADOW: Int = 131072

val PRF_CHECKVISIBLE: Int = 1

val PRF_NONCLIENT: Int = 2

val PRF_CLIENT: Int = 4

val PRF_ERASEBKGND: Int = 8

val PRF_CHILDREN: Int = 16

val PRF_OWNED: Int = 32

val BDR_RAISEDOUTER: Int = 1

val BDR_SUNKENOUTER: Int = 2

val BDR_RAISEDINNER: Int = 4

val BDR_SUNKENINNER: Int = 8

val BDR_OUTER: Int = 3

val BDR_INNER: Int = 12

val BDR_RAISED: Int = 5

val BDR_SUNKEN: Int = 10

val EDGE_RAISED: Int = 5

val EDGE_SUNKEN: Int = 10

val EDGE_ETCHED: Int = 6

val EDGE_BUMP: Int = 9

val BF_LEFT: Int = 1

val BF_TOP: Int = 2

val BF_RIGHT: Int = 4

val BF_BOTTOM: Int = 8

val BF_TOPLEFT: Int = 3

val BF_TOPRIGHT: Int = 6

val BF_BOTTOMLEFT: Int = 9

val BF_BOTTOMRIGHT: Int = 12

val BF_RECT: Int = 15

val BF_DIAGONAL: Int = 16

val BF_DIAGONAL_ENDTOPRIGHT: Int = 22

val BF_DIAGONAL_ENDTOPLEFT: Int = 19

val BF_DIAGONAL_ENDBOTTOMLEFT: Int = 25

val BF_DIAGONAL_ENDBOTTOMRIGHT: Int = 28

val BF_MIDDLE: Int = 2048

val BF_SOFT: Int = 4096

val BF_ADJUST: Int = 8192

val BF_FLAT: Int = 16384

val BF_MONO: Int = 32768

val DFC_CAPTION: Int = 1

val DFC_MENU: Int = 2

val DFC_SCROLL: Int = 3

val DFC_BUTTON: Int = 4

val DFC_POPUPMENU: Int = 5

val DFCS_CAPTIONCLOSE: Int = 0

val DFCS_CAPTIONMIN: Int = 1

val DFCS_CAPTIONMAX: Int = 2

val DFCS_CAPTIONRESTORE: Int = 3

val DFCS_CAPTIONHELP: Int = 4

val DFCS_MENUARROW: Int = 0

val DFCS_MENUCHECK: Int = 1

val DFCS_MENUBULLET: Int = 2

val DFCS_MENUARROWRIGHT: Int = 4

val DFCS_SCROLLUP: Int = 0

val DFCS_SCROLLDOWN: Int = 1

val DFCS_SCROLLLEFT: Int = 2

val DFCS_SCROLLRIGHT: Int = 3

val DFCS_SCROLLCOMBOBOX: Int = 5

val DFCS_SCROLLSIZEGRIP: Int = 8

val DFCS_SCROLLSIZEGRIPRIGHT: Int = 16

val DFCS_BUTTONCHECK: Int = 0

val DFCS_BUTTONRADIOIMAGE: Int = 1

val DFCS_BUTTONRADIOMASK: Int = 2

val DFCS_BUTTONRADIO: Int = 4

val DFCS_BUTTON3STATE: Int = 8

val DFCS_BUTTONPUSH: Int = 16

val DFCS_INACTIVE: Int = 256

val DFCS_PUSHED: Int = 512

val DFCS_CHECKED: Int = 1024

val DFCS_TRANSPARENT: Int = 2048

val DFCS_HOT: Int = 4096

val DFCS_ADJUSTRECT: Int = 8192

val DFCS_FLAT: Int = 16384

val DFCS_MONO: Int = 32768

val DC_ACTIVE: Int = 1

val DC_SMALLCAP: Int = 2

val DC_ICON: Int = 4

val DC_TEXT: Int = 8

val DC_INBUTTON: Int = 16

val DC_GRADIENT: Int = 32

val DC_BUTTONS: Int = 4096

val IDANI_OPEN: Int = 1

val IDANI_CAPTION: Int = 3

val CF_TEXT: Int = 1

val CF_BITMAP: Int = 2

val CF_METAFILEPICT: Int = 3

val CF_SYLK: Int = 4

val CF_DIF: Int = 5

val CF_TIFF: Int = 6

val CF_OEMTEXT: Int = 7

val CF_DIB: Int = 8

val CF_PALETTE: Int = 9

val CF_PENDATA: Int = 10

val CF_RIFF: Int = 11

val CF_WAVE: Int = 12

val CF_UNICODETEXT: Int = 13

val CF_ENHMETAFILE: Int = 14

val CF_HDROP: Int = 15

val CF_LOCALE: Int = 16

val CF_DIBV5: Int = 17

val CF_MAX: Int = 18

val CF_OWNERDISPLAY: Int = 128

val CF_DSPTEXT: Int = 129

val CF_DSPBITMAP: Int = 130

val CF_DSPMETAFILEPICT: Int = 131

val CF_DSPENHMETAFILE: Int = 142

val CF_PRIVATEFIRST: Int = 512

val CF_PRIVATELAST: Int = 767

val CF_GDIOBJFIRST: Int = 768

val CF_GDIOBJLAST: Int = 1023

val FVIRTKEY: Int = 1

val FNOINVERT: Int = 2

val FSHIFT: Int = 4

val FCONTROL: Int = 8

val FALT: Int = 16

val WPF_SETMINPOSITION: Int = 1

val WPF_RESTORETOMAXIMIZED: Int = 2

val WPF_ASYNCWINDOWPLACEMENT: Int = 4

val ODT_MENU: Int = 1

val ODT_LISTBOX: Int = 2

val ODT_COMBOBOX: Int = 3

val ODT_BUTTON: Int = 4

val ODT_STATIC: Int = 5

val ODA_DRAWENTIRE: Int = 1

val ODA_SELECT: Int = 2

val ODA_FOCUS: Int = 4

val ODS_SELECTED: Int = 1

val ODS_GRAYED: Int = 2

val ODS_DISABLED: Int = 4

val ODS_CHECKED: Int = 8

val ODS_FOCUS: Int = 16

val ODS_DEFAULT: Int = 32

val ODS_COMBOBOXEDIT: Int = 4096

val ODS_HOTLIGHT: Int = 64

val ODS_INACTIVE: Int = 128

val ODS_NOACCEL: Int = 256

val ODS_NOFOCUSRECT: Int = 512

val PM_NOREMOVE: Int = 0

val PM_REMOVE: Int = 1

val PM_NOYIELD: Int = 2

val PM_QS_INPUT: Int = 67567616

val PM_QS_POSTMESSAGE: Int = 9961472

val PM_QS_PAINT: Int = 2097152

val PM_QS_SENDMESSAGE: Int = 4194304

val MOD_ALT: Int = 1

val MOD_CONTROL: Int = 2

val MOD_SHIFT: Int = 4

val MOD_WIN: Int = 8

val IDHOT_SNAPWINDOW: Int = -1

val IDHOT_SNAPDESKTOP: Int = -2

val ENDSESSION_CLOSEAPP: Int = 1

val ENDSESSION_CRITICAL: Int = 1073741824

val ENDSESSION_LOGOFF: Int = -2147483648

val EWX_LOGOFF: Int = 0

val EWX_SHUTDOWN: Int = 1

val EWX_REBOOT: Int = 2

val EWX_FORCE: Int = 4

val EWX_POWEROFF: Int = 8

val EWX_FORCEIFHUNG: Int = 16

val EWX_QUICKRESOLVE: Int = 32

val EWX_HYBRID_SHUTDOWN: Int = 4194304

val EWX_BOOTOPTIONS: Int = 16777216

val BSM_ALLCOMPONENTS: Int = 0

val BSM_VXDS: Int = 1

val BSM_NETDRIVER: Int = 2

val BSM_INSTALLABLEDRIVERS: Int = 4

val BSM_APPLICATIONS: Int = 8

val BSM_ALLDESKTOPS: Int = 16

val BSF_QUERY: Int = 1

val BSF_IGNORECURRENTTASK: Int = 2

val BSF_FLUSHDISK: Int = 4

val BSF_NOHANG: Int = 8

val BSF_POSTMESSAGE: Int = 16

val BSF_FORCEIFHUNG: Int = 32

val BSF_NOTIMEOUTIFNOTHUNG: Int = 64

val BSF_ALLOWSFW: Int = 128

val BSF_SENDNOTIFYMESSAGE: Int = 256

val BSF_RETURNHDESK: Int = 512

val BSF_LUID: Int = 1024

val BROADCAST_QUERY_DENY: Int = 1112363332

val DEVICE_NOTIFY_WINDOW_HANDLE: Int = 0

val DEVICE_NOTIFY_SERVICE_HANDLE: Int = 1

val DEVICE_NOTIFY_ALL_INTERFACE_CLASSES: Int = 4

val CW_USEDEFAULT: Int = -2147483648

val ISMEX_NOSEND: Int = 0

val ISMEX_SEND: Int = 1

val ISMEX_NOTIFY: Int = 2

val ISMEX_CALLBACK: Int = 4

val ISMEX_REPLIED: Int = 8

val PW_CLIENTONLY: Int = 1

val LWA_COLORKEY: Int = 1

val LWA_ALPHA: Int = 2

val ULW_COLORKEY: Int = 1

val ULW_ALPHA: Int = 2

val ULW_OPAQUE: Int = 4

val ULW_EX_NORESIZE: Int = 8

val FLASHW_STOP: Int = 0

val FLASHW_CAPTION: Int = 1

val FLASHW_TRAY: Int = 2

val FLASHW_ALL: Int = 3

val FLASHW_TIMER: Int = 4

val FLASHW_TIMERNOFG: Int = 12

val SWP_NOSIZE: Int = 1

val SWP_NOMOVE: Int = 2

val SWP_NOZORDER: Int = 4

val SWP_NOREDRAW: Int = 8

val SWP_NOACTIVATE: Int = 16

val SWP_FRAMECHANGED: Int = 32

val SWP_SHOWWINDOW: Int = 64

val SWP_HIDEWINDOW: Int = 128

val SWP_NOCOPYBITS: Int = 256

val SWP_NOOWNERZORDER: Int = 512

val SWP_NOSENDCHANGING: Int = 1024

val SWP_DRAWFRAME: Int = 32

val SWP_NOREPOSITION: Int = 512

val SWP_DEFERERASE: Int = 8192

val SWP_ASYNCWINDOWPOS: Int = 16384

val DLGWINDOWEXTRA: Int = 30

val KEYEVENTF_EXTENDEDKEY: Int = 1

val KEYEVENTF_KEYUP: Int = 2

val KEYEVENTF_UNICODE: Int = 4

val KEYEVENTF_SCANCODE: Int = 8

val MOUSEEVENTF_MOVE: Int = 1

val MOUSEEVENTF_LEFTDOWN: Int = 2

val MOUSEEVENTF_LEFTUP: Int = 4

val MOUSEEVENTF_RIGHTDOWN: Int = 8

val MOUSEEVENTF_RIGHTUP: Int = 16

val MOUSEEVENTF_MIDDLEDOWN: Int = 32

val MOUSEEVENTF_MIDDLEUP: Int = 64

val MOUSEEVENTF_XDOWN: Int = 128

val MOUSEEVENTF_XUP: Int = 256

val MOUSEEVENTF_WHEEL: Int = 2048

val MOUSEEVENTF_VIRTUALDESK: Int = 16384

val MOUSEEVENTF_ABSOLUTE: Int = 32768

val INPUT_MOUSE: Int = 0

val INPUT_KEYBOARD: Int = 1

val INPUT_HARDWARE: Int = 2

val MAPVK_VK_TO_VSC: Int = 0

val MAPVK_VSC_TO_VK: Int = 1

val MAPVK_VK_TO_CHAR: Int = 2

val MAPVK_VSC_TO_VK_EX: Int = 3

val MWMO_WAITALL: Int = 1

val MWMO_ALERTABLE: Int = 2

val MWMO_INPUTAVAILABLE: Int = 4

val QS_KEY: Int = 1

val QS_MOUSEMOVE: Int = 2

val QS_MOUSEBUTTON: Int = 4

val QS_POSTMESSAGE: Int = 8

val QS_TIMER: Int = 16

val QS_PAINT: Int = 32

val QS_SENDMESSAGE: Int = 64

val QS_HOTKEY: Int = 128

val QS_ALLPOSTMESSAGE: Int = 256

val QS_RAWINPUT: Int = 1024

val QS_MOUSE: Int = 6

val QS_INPUT: Int = 1031

val QS_ALLEVENTS: Int = 1215

val QS_ALLINPUT: Int = 1279

val USER_TIMER_MAXIMUM: Int = 2147483647

val USER_TIMER_MINIMUM: Int = 10

val SM_CXSCREEN: Int = 0

val SM_CYSCREEN: Int = 1

val SM_CXVSCROLL: Int = 2

val SM_CYHSCROLL: Int = 3

val SM_CYCAPTION: Int = 4

val SM_CXBORDER: Int = 5

val SM_CYBORDER: Int = 6

val SM_CXDLGFRAME: Int = 7

val SM_CYDLGFRAME: Int = 8

val SM_CYVTHUMB: Int = 9

val SM_CXHTHUMB: Int = 10

val SM_CXICON: Int = 11

val SM_CYICON: Int = 12

val SM_CXCURSOR: Int = 13

val SM_CYCURSOR: Int = 14

val SM_CYMENU: Int = 15

val SM_CXFULLSCREEN: Int = 16

val SM_CYFULLSCREEN: Int = 17

val SM_CYKANJIWINDOW: Int = 18

val SM_MOUSEPRESENT: Int = 19

val SM_CYVSCROLL: Int = 20

val SM_CXHSCROLL: Int = 21

val SM_DEBUG: Int = 22

val SM_SWAPBUTTON: Int = 23

val SM_RESERVED1: Int = 24

val SM_RESERVED2: Int = 25

val SM_RESERVED3: Int = 26

val SM_RESERVED4: Int = 27

val SM_CXMIN: Int = 28

val SM_CYMIN: Int = 29

val SM_CXSIZE: Int = 30

val SM_CYSIZE: Int = 31

val SM_CXFRAME: Int = 32

val SM_CYFRAME: Int = 33

val SM_CXMINTRACK: Int = 34

val SM_CYMINTRACK: Int = 35

val SM_CXDOUBLECLK: Int = 36

val SM_CYDOUBLECLK: Int = 37

val SM_CXICONSPACING: Int = 38

val SM_CYICONSPACING: Int = 39

val SM_MENUDROPALIGNMENT: Int = 40

val SM_PENWINDOWS: Int = 41

val SM_DBCSENABLED: Int = 42

val SM_CMOUSEBUTTONS: Int = 43

val SM_CXFIXEDFRAME: Int = 7

val SM_CYFIXEDFRAME: Int = 8

val SM_CXSIZEFRAME: Int = 32

val SM_CYSIZEFRAME: Int = 33

val SM_SECURE: Int = 44

val SM_CXEDGE: Int = 45

val SM_CYEDGE: Int = 46

val SM_CXMINSPACING: Int = 47

val SM_CYMINSPACING: Int = 48

val SM_CXSMICON: Int = 49

val SM_CYSMICON: Int = 50

val SM_CYSMCAPTION: Int = 51

val SM_CXSMSIZE: Int = 52

val SM_CYSMSIZE: Int = 53

val SM_CXMENUSIZE: Int = 54

val SM_CYMENUSIZE: Int = 55

val SM_ARRANGE: Int = 56

val SM_CXMINIMIZED: Int = 57

val SM_CYMINIMIZED: Int = 58

val SM_CXMAXTRACK: Int = 59

val SM_CYMAXTRACK: Int = 60

val SM_CXMAXIMIZED: Int = 61

val SM_CYMAXIMIZED: Int = 62

val SM_NETWORK: Int = 63

val SM_CLEANBOOT: Int = 67

val SM_CXDRAG: Int = 68

val SM_CYDRAG: Int = 69

val SM_SHOWSOUNDS: Int = 70

val SM_CXMENUCHECK: Int = 71

val SM_CYMENUCHECK: Int = 72

val SM_SLOWMACHINE: Int = 73

val SM_MIDEASTENABLED: Int = 74

val SM_MOUSEWHEELPRESENT: Int = 75

val SM_XVIRTUALSCREEN: Int = 76

val SM_YVIRTUALSCREEN: Int = 77

val SM_CXVIRTUALSCREEN: Int = 78

val SM_CYVIRTUALSCREEN: Int = 79

val SM_CMONITORS: Int = 80

val SM_SAMEDISPLAYFORMAT: Int = 81

val SM_IMMENABLED: Int = 82

val SM_CXFOCUSBORDER: Int = 83

val SM_CYFOCUSBORDER: Int = 84

val SM_TABLETPC: Int = 86

val SM_MEDIACENTER: Int = 87

val SM_STARTER: Int = 88

val SM_SERVERR2: Int = 89

val SM_CMETRICS: Int = 97

val SM_REMOTESESSION: Int = 4096

val SM_SHUTTINGDOWN: Int = 8192

val SM_REMOTECONTROL: Int = 8193

val SM_CARETBLINKINGENABLED: Int = 8194

val PMB_ACTIVE: Int = 1

val MNC_IGNORE: Int = 0

val MNC_CLOSE: Int = 1

val MNC_EXECUTE: Int = 2

val MNC_SELECT: Int = 3

val MNS_NOCHECK: Int = -2147483648

val MNS_MODELESS: Int = 1073741824

val MNS_DRAGDROP: Int = 536870912

val MNS_AUTODISMISS: Int = 268435456

val MNS_NOTIFYBYPOS: Int = 134217728

val MNS_CHECKORBMP: Int = 67108864

val MIM_MAXHEIGHT: Int = 1

val MIM_BACKGROUND: Int = 2

val MIM_HELPID: Int = 4

val MIM_MENUDATA: Int = 8

val MIM_STYLE: Int = 16

val MIM_APPLYTOSUBMENUS: Int = -2147483648

val MND_CONTINUE: Int = 0

val MND_ENDMENU: Int = 1

val MNGOF_TOPGAP: Int = 1

val MNGOF_BOTTOMGAP: Int = 2

val MNGO_NOINTERFACE: Int = 0

val MNGO_NOERROR: Int = 1

val MIIM_STATE: Int = 1

val MIIM_ID: Int = 2

val MIIM_SUBMENU: Int = 4

val MIIM_CHECKMARKS: Int = 8

val MIIM_TYPE: Int = 16

val MIIM_DATA: Int = 32

val MIIM_STRING: Int = 64

val MIIM_BITMAP: Int = 128

val MIIM_FTYPE: Int = 256

val GMDI_USEDISABLED: Int = 1

val GMDI_GOINTOPOPUPS: Int = 2

val TPM_LEFTBUTTON: Int = 0

val TPM_RIGHTBUTTON: Int = 2

val TPM_LEFTALIGN: Int = 0

val TPM_CENTERALIGN: Int = 4

val TPM_RIGHTALIGN: Int = 8

val TPM_TOPALIGN: Int = 0

val TPM_VCENTERALIGN: Int = 16

val TPM_BOTTOMALIGN: Int = 32

val TPM_HORIZONTAL: Int = 0

val TPM_VERTICAL: Int = 64

val TPM_NONOTIFY: Int = 128

val TPM_RETURNCMD: Int = 256

val TPM_RECURSE: Int = 1

val TPM_HORPOSANIMATION: Int = 1024

val TPM_HORNEGANIMATION: Int = 2048

val TPM_VERPOSANIMATION: Int = 4096

val TPM_VERNEGANIMATION: Int = 8192

val TPM_NOANIMATION: Int = 16384

val TPM_LAYOUTRTL: Int = 32768

val DOF_EXECUTABLE: Int = 32769

val DOF_DOCUMENT: Int = 32770

val DOF_DIRECTORY: Int = 32771

val DOF_MULTIPLE: Int = 32772

val DOF_PROGMAN: Int = 1

val DOF_SHELLDATA: Int = 2

val DO_DROPFILE: Int = 1162627398

val DO_PRINTFILE: Int = 1414419024

val DT_TOP: Int = 0

val DT_LEFT: Int = 0

val DT_CENTER: Int = 1

val DT_RIGHT: Int = 2

val DT_VCENTER: Int = 4

val DT_BOTTOM: Int = 8

val DT_WORDBREAK: Int = 16

val DT_SINGLELINE: Int = 32

val DT_EXPANDTABS: Int = 64

val DT_TABSTOP: Int = 128

val DT_NOCLIP: Int = 256

val DT_EXTERNALLEADING: Int = 512

val DT_CALCRECT: Int = 1024

val DT_NOPREFIX: Int = 2048

val DT_INTERNAL: Int = 4096

val DT_EDITCONTROL: Int = 8192

val DT_PATH_ELLIPSIS: Int = 16384

val DT_END_ELLIPSIS: Int = 32768

val DT_MODIFYSTRING: Int = 65536

val DT_RTLREADING: Int = 131072

val DT_WORD_ELLIPSIS: Int = 262144

val DT_NOFULLWIDTHCHARBREAK: Int = 524288

val DT_HIDEPREFIX: Int = 1048576

val DT_PREFIXONLY: Int = 2097152

val DST_COMPLEX: Int = 0

val DST_TEXT: Int = 1

val DST_PREFIXTEXT: Int = 2

val DST_ICON: Int = 3

val DST_BITMAP: Int = 4

val DSS_NORMAL: Int = 0

val DSS_UNION: Int = 16

val DSS_DISABLED: Int = 32

val DSS_MONO: Int = 128

val DSS_HIDEPREFIX: Int = 512

val DSS_PREFIXONLY: Int = 1024

val DSS_RIGHT: Int = 32768

val ASFW_ANY: DWORD = -1

val LSFW_LOCK: Int = 1

val LSFW_UNLOCK: Int = 2

val DCX_WINDOW: Int = 1

val DCX_CACHE: Int = 2

val DCX_NORESETATTRS: Int = 4

val DCX_CLIPCHILDREN: Int = 8

val DCX_CLIPSIBLINGS: Int = 16

val DCX_PARENTCLIP: Int = 32

val DCX_EXCLUDERGN: Int = 64

val DCX_INTERSECTRGN: Int = 128

val DCX_EXCLUDEUPDATE: Int = 256

val DCX_INTERSECTUPDATE: Int = 512

val DCX_LOCKWINDOWUPDATE: Int = 1024

val DCX_VALIDATE: Int = 2097152

val RDW_INVALIDATE: Int = 1

val RDW_INTERNALPAINT: Int = 2

val RDW_ERASE: Int = 4

val RDW_VALIDATE: Int = 8

val RDW_NOINTERNALPAINT: Int = 16

val RDW_NOERASE: Int = 32

val RDW_NOCHILDREN: Int = 64

val RDW_ALLCHILDREN: Int = 128

val RDW_UPDATENOW: Int = 256

val RDW_ERASENOW: Int = 512

val RDW_FRAME: Int = 1024

val RDW_NOFRAME: Int = 2048

val SW_SCROLLCHILDREN: Int = 1

val SW_INVALIDATE: Int = 2

val SW_ERASE: Int = 4

val SW_SMOOTHSCROLL: Int = 16

val ESB_ENABLE_BOTH: Int = 0

val ESB_DISABLE_BOTH: Int = 3

val ESB_DISABLE_LEFT: Int = 1

val ESB_DISABLE_RIGHT: Int = 2

val ESB_DISABLE_UP: Int = 1

val ESB_DISABLE_DOWN: Int = 2

val ESB_DISABLE_LTUP: Int = 1

val ESB_DISABLE_RTDN: Int = 2

val HELPINFO_WINDOW: Int = 1

val HELPINFO_MENUITEM: Int = 2

val MB_OK: Int = 0

val MB_OKCANCEL: Int = 1

val MB_ABORTRETRYIGNORE: Int = 2

val MB_YESNOCANCEL: Int = 3

val MB_YESNO: Int = 4

val MB_RETRYCANCEL: Int = 5

val MB_CANCELTRYCONTINUE: Int = 6

val MB_ICONHAND: Int = 16

val MB_ICONQUESTION: Int = 32

val MB_ICONEXCLAMATION: Int = 48

val MB_ICONASTERISK: Int = 64

val MB_USERICON: Int = 128

val MB_ICONWARNING: Int = 48

val MB_ICONERROR: Int = 16

val MB_ICONINFORMATION: Int = 64

val MB_ICONSTOP: Int = 16

val MB_DEFBUTTON1: Int = 0

val MB_DEFBUTTON2: Int = 256

val MB_DEFBUTTON3: Int = 512

val MB_DEFBUTTON4: Int = 768

val MB_APPLMODAL: Int = 0

val MB_SYSTEMMODAL: Int = 4096

val MB_TASKMODAL: Int = 8192

val MB_HELP: Int = 16384

val MB_NOFOCUS: Int = 32768

val MB_SETFOREGROUND: Int = 65536

val MB_DEFAULT_DESKTOP_ONLY: Int = 131072

val MB_TOPMOST: Int = 262144

val MB_RIGHT: Int = 524288

val MB_RTLREADING: Int = 1048576

val MB_SERVICE_NOTIFICATION: Int = 2097152

val MB_SERVICE_NOTIFICATION_NT3X: Int = 262144

val MB_TYPEMASK: Int = 15

val MB_ICONMASK: Int = 240

val MB_DEFMASK: Int = 3840

val MB_MODEMASK: Int = 12288

val MB_MISCMASK: Int = 49152

val CWP_ALL: Int = 0

val CWP_SKIPINVISIBLE: Int = 1

val CWP_SKIPDISABLED: Int = 2

val CWP_SKIPTRANSPARENT: Int = 4

val CTLCOLOR_MSGBOX: Int = 0

val CTLCOLOR_EDIT: Int = 1

val CTLCOLOR_LISTBOX: Int = 2

val CTLCOLOR_BTN: Int = 3

val CTLCOLOR_DLG: Int = 4

val CTLCOLOR_SCROLLBAR: Int = 5

val CTLCOLOR_STATIC: Int = 6

val CTLCOLOR_MAX: Int = 7

val COLOR_SCROLLBAR: Int = 0

val COLOR_BACKGROUND: Int = 1

val COLOR_ACTIVECAPTION: Int = 2

val COLOR_INACTIVECAPTION: Int = 3

val COLOR_MENU: Int = 4

val COLOR_WINDOW: Int = 5

val COLOR_WINDOWFRAME: Int = 6

val COLOR_MENUTEXT: Int = 7

val COLOR_WINDOWTEXT: Int = 8

val COLOR_CAPTIONTEXT: Int = 9

val COLOR_ACTIVEBORDER: Int = 10

val COLOR_INACTIVEBORDER: Int = 11

val COLOR_APPWORKSPACE: Int = 12

val COLOR_HIGHLIGHT: Int = 13

val COLOR_HIGHLIGHTTEXT: Int = 14

val COLOR_BTNFACE: Int = 15

val COLOR_BTNSHADOW: Int = 16

val COLOR_GRAYTEXT: Int = 17

val COLOR_BTNTEXT: Int = 18

val COLOR_INACTIVECAPTIONTEXT: Int = 19

val COLOR_BTNHIGHLIGHT: Int = 20

val COLOR_3DDKSHADOW: Int = 21

val COLOR_3DLIGHT: Int = 22

val COLOR_INFOTEXT: Int = 23

val COLOR_INFOBK: Int = 24

val COLOR_HOTLIGHT: Int = 26

val COLOR_GRADIENTACTIVECAPTION: Int = 27

val COLOR_GRADIENTINACTIVECAPTION: Int = 28

val COLOR_MENUHILIGHT: Int = 29

val COLOR_MENUBAR: Int = 30

val COLOR_DESKTOP: Int = 1

val COLOR_3DFACE: Int = 15

val COLOR_3DSHADOW: Int = 16

val COLOR_3DHIGHLIGHT: Int = 20

val COLOR_3DHILIGHT: Int = 20

val COLOR_BTNHILIGHT: Int = 20

val GW_HWNDFIRST: Int = 0

val GW_HWNDLAST: Int = 1

val GW_HWNDNEXT: Int = 2

val GW_HWNDPREV: Int = 3

val GW_OWNER: Int = 4

val GW_CHILD: Int = 5

val GW_ENABLEDPOPUP: Int = 6

val GW_MAX: Int = 6

val MF_INSERT: Int = 0

val MF_CHANGE: Int = 128

val MF_APPEND: Int = 256

val MF_DELETE: Int = 512

val MF_REMOVE: Int = 4096

val MF_BYCOMMAND: Int = 0

val MF_BYPOSITION: Int = 1024

val MF_SEPARATOR: Int = 2048

val MF_ENABLED: Int = 0

val MF_GRAYED: Int = 1

val MF_DISABLED: Int = 2

val MF_UNCHECKED: Int = 0

val MF_CHECKED: Int = 8

val MF_USECHECKBITMAPS: Int = 512

val MF_STRING: Int = 0

val MF_BITMAP: Int = 4

val MF_OWNERDRAW: Int = 256

val MF_POPUP: Int = 16

val MF_MENUBARBREAK: Int = 32

val MF_MENUBREAK: Int = 64

val MF_UNHILITE: Int = 0

val MF_HILITE: Int = 128

val MF_DEFAULT: Int = 4096

val MF_SYSMENU: Int = 8192

val MF_HELP: Int = 16384

val MF_RIGHTJUSTIFY: Int = 16384

val MF_MOUSESELECT: Int = 32768

val MF_END: Int = 128

val MFT_STRING: Int = 0

val MFT_BITMAP: Int = 4

val MFT_MENUBARBREAK: Int = 32

val MFT_MENUBREAK: Int = 64

val MFT_OWNERDRAW: Int = 256

val MFT_RADIOCHECK: Int = 512

val MFT_SEPARATOR: Int = 2048

val MFT_RIGHTORDER: Int = 8192

val MFT_RIGHTJUSTIFY: Int = 16384

val MFS_GRAYED: Int = 3

val MFS_DISABLED: Int = 3

val MFS_CHECKED: Int = 8

val MFS_HILITE: Int = 128

val MFS_ENABLED: Int = 0

val MFS_UNCHECKED: Int = 0

val MFS_UNHILITE: Int = 0

val MFS_DEFAULT: Int = 4096

val SC_SIZE: Int = 61440

val SC_MOVE: Int = 61456

val SC_MINIMIZE: Int = 61472

val SC_MAXIMIZE: Int = 61488

val SC_NEXTWINDOW: Int = 61504

val SC_PREVWINDOW: Int = 61520

val SC_CLOSE: Int = 61536

val SC_VSCROLL: Int = 61552

val SC_HSCROLL: Int = 61568

val SC_MOUSEMENU: Int = 61584

val SC_KEYMENU: Int = 61696

val SC_ARRANGE: Int = 61712

val SC_RESTORE: Int = 61728

val SC_TASKLIST: Int = 61744

val SC_SCREENSAVE: Int = 61760

val SC_HOTKEY: Int = 61776

val SC_DEFAULT: Int = 61792

val SC_MONITORPOWER: Int = 61808

val SC_CONTEXTHELP: Int = 61824

val SC_SEPARATOR: Int = 61455

val SC_ICON: Int = 61472

val SC_ZOOM: Int = 61488

val IMAGE_BITMAP: Int = 0

val IMAGE_ICON: Int = 1

val IMAGE_CURSOR: Int = 2

val IMAGE_ENHMETAFILE: Int = 3

val LR_DEFAULTCOLOR: Int = 0

val LR_MONOCHROME: Int = 1

val LR_COLOR: Int = 2

val LR_COPYRETURNORG: Int = 4

val LR_COPYDELETEORG: Int = 8

val LR_LOADFROMFILE: Int = 16

val LR_LOADTRANSPARENT: Int = 32

val LR_DEFAULTSIZE: Int = 64

val LR_VGACOLOR: Int = 128

val LR_LOADMAP3DCOLORS: Int = 4096

val LR_CREATEDIBSECTION: Int = 8192

val LR_COPYFROMRESOURCE: Int = 16384

val LR_SHARED: Int = 32768

val DI_MASK: Int = 1

val DI_IMAGE: Int = 2

val DI_NORMAL: Int = 3

val DI_COMPAT: Int = 4

val DI_DEFAULTSIZE: Int = 8

val DI_NOMIRROR: Int = 16

val RES_ICON: Int = 1

val RES_CURSOR: Int = 2

val ORD_LANGDRIVER: Int = 1

val IDOK: Int = 1

val IDCANCEL: Int = 2

val IDABORT: Int = 3

val IDRETRY: Int = 4

val IDIGNORE: Int = 5

val IDYES: Int = 6

val IDNO: Int = 7

val IDCLOSE: Int = 8

val IDHELP: Int = 9

val IDTRYAGAIN: Int = 10

val IDCONTINUE: Int = 11

val IDTIMEOUT: Int = 32000

val ES_LEFT: Int = 0

val ES_CENTER: Int = 1

val ES_RIGHT: Int = 2

val ES_MULTILINE: Int = 4

val ES_UPPERCASE: Int = 8

val ES_LOWERCASE: Int = 16

val ES_PASSWORD: Int = 32

val ES_AUTOVSCROLL: Int = 64

val ES_AUTOHSCROLL: Int = 128

val ES_NOHIDESEL: Int = 256

val ES_OEMCONVERT: Int = 1024

val ES_READONLY: Int = 2048

val ES_WANTRETURN: Int = 4096

val ES_NUMBER: Int = 8192

val EN_SETFOCUS: Int = 256

val EN_KILLFOCUS: Int = 512

val EN_CHANGE: Int = 768

val EN_UPDATE: Int = 1024

val EN_ERRSPACE: Int = 1280

val EN_MAXTEXT: Int = 1281

val EN_HSCROLL: Int = 1537

val EN_VSCROLL: Int = 1538

val EN_ALIGN_LTR_EC: Int = 1792

val EN_ALIGN_RTL_EC: Int = 1793

val EC_LEFTMARGIN: Int = 1

val EC_RIGHTMARGIN: Int = 2

val EC_USEFONTINFO: Int = 65535

val EMSIS_COMPOSITIONSTRING: Int = 1

val EIMES_GETCOMPSTRATONCE: Int = 1

val EIMES_CANCELCOMPSTRINFOCUS: Int = 2

val EIMES_COMPLETECOMPSTRKILLFOCUS: Int = 4

val EM_GETSEL: Int = 176

val EM_SETSEL: Int = 177

val EM_GETRECT: Int = 178

val EM_SETRECT: Int = 179

val EM_SETRECTNP: Int = 180

val EM_SCROLL: Int = 181

val EM_LINESCROLL: Int = 182

val EM_SCROLLCARET: Int = 183

val EM_GETMODIFY: Int = 184

val EM_SETMODIFY: Int = 185

val EM_GETLINECOUNT: Int = 186

val EM_LINEINDEX: Int = 187

val EM_SETHANDLE: Int = 188

val EM_GETHANDLE: Int = 189

val EM_GETTHUMB: Int = 190

val EM_LINELENGTH: Int = 193

val EM_REPLACESEL: Int = 194

val EM_GETLINE: Int = 196

val EM_LIMITTEXT: Int = 197

val EM_CANUNDO: Int = 198

val EM_UNDO: Int = 199

val EM_FMTLINES: Int = 200

val EM_LINEFROMCHAR: Int = 201

val EM_SETTABSTOPS: Int = 203

val EM_SETPASSWORDCHAR: Int = 204

val EM_EMPTYUNDOBUFFER: Int = 205

val EM_GETFIRSTVISIBLELINE: Int = 206

val EM_SETREADONLY: Int = 207

val EM_SETWORDBREAKPROC: Int = 208

val EM_GETWORDBREAKPROC: Int = 209

val EM_GETPASSWORDCHAR: Int = 210

val EM_SETMARGINS: Int = 211

val EM_GETMARGINS: Int = 212

val EM_SETLIMITTEXT: Int = 197

val EM_GETLIMITTEXT: Int = 213

val EM_POSFROMCHAR: Int = 214

val EM_CHARFROMPOS: Int = 215

val EM_SETIMESTATUS: Int = 216

val EM_GETIMESTATUS: Int = 217

val WB_LEFT: Int = 0

val WB_RIGHT: Int = 1

val WB_ISDELIMITER: Int = 2

val BS_PUSHBUTTON: Int = 0

val BS_DEFPUSHBUTTON: Int = 1

val BS_CHECKBOX: Int = 2

val BS_AUTOCHECKBOX: Int = 3

val BS_RADIOBUTTON: Int = 4

val BS_3STATE: Int = 5

val BS_AUTO3STATE: Int = 6

val BS_GROUPBOX: Int = 7

val BS_USERBUTTON: Int = 8

val BS_AUTORADIOBUTTON: Int = 9

val BS_PUSHBOX: Int = 10

val BS_OWNERDRAW: Int = 11

val BS_TYPEMASK: Int = 15

val BS_LEFTTEXT: Int = 32

val BS_TEXT: Int = 0

val BS_ICON: Int = 64

val BS_BITMAP: Int = 128

val BS_LEFT: Int = 256

val BS_RIGHT: Int = 512

val BS_CENTER: Int = 768

val BS_TOP: Int = 1024

val BS_BOTTOM: Int = 2048

val BS_VCENTER: Int = 3072

val BS_PUSHLIKE: Int = 4096

val BS_MULTILINE: Int = 8192

val BS_NOTIFY: Int = 16384

val BS_FLAT: Int = 32768

val BS_RIGHTBUTTON: Int = 32

val BN_CLICKED: Int = 0

val BN_PAINT: Int = 1

val BN_HILITE: Int = 2

val BN_UNHILITE: Int = 3

val BN_DISABLE: Int = 4

val BN_DOUBLECLICKED: Int = 5

val BN_PUSHED: Int = 2

val BN_UNPUSHED: Int = 3

val BN_DBLCLK: Int = 5

val BN_SETFOCUS: Int = 6

val BN_KILLFOCUS: Int = 7

val BM_GETCHECK: Int = 240

val BM_SETCHECK: Int = 241

val BM_GETSTATE: Int = 242

val BM_SETSTATE: Int = 243

val BM_SETSTYLE: Int = 244

val BM_CLICK: Int = 245

val BM_GETIMAGE: Int = 246

val BM_SETIMAGE: Int = 247

val BST_UNCHECKED: Int = 0

val BST_CHECKED: Int = 1

val BST_INDETERMINATE: Int = 2

val BST_PUSHED: Int = 4

val BST_FOCUS: Int = 8

val SS_LEFT: Int = 0

val SS_CENTER: Int = 1

val SS_RIGHT: Int = 2

val SS_ICON: Int = 3

val SS_BLACKRECT: Int = 4

val SS_GRAYRECT: Int = 5

val SS_WHITERECT: Int = 6

val SS_BLACKFRAME: Int = 7

val SS_GRAYFRAME: Int = 8

val SS_WHITEFRAME: Int = 9

val SS_USERITEM: Int = 10

val SS_SIMPLE: Int = 11

val SS_LEFTNOWORDWRAP: Int = 12

val SS_OWNERDRAW: Int = 13

val SS_BITMAP: Int = 14

val SS_ENHMETAFILE: Int = 15

val SS_ETCHEDHORZ: Int = 16

val SS_ETCHEDVERT: Int = 17

val SS_ETCHEDFRAME: Int = 18

val SS_TYPEMASK: Int = 31

val SS_REALSIZECONTROL: Int = 64

val SS_NOPREFIX: Int = 128

val SS_NOTIFY: Int = 256

val SS_CENTERIMAGE: Int = 512

val SS_RIGHTJUST: Int = 1024

val SS_REALSIZEIMAGE: Int = 2048

val SS_SUNKEN: Int = 4096

val SS_EDITCONTROL: Int = 8192

val SS_ENDELLIPSIS: Int = 16384

val SS_PATHELLIPSIS: Int = 32768

val SS_WORDELLIPSIS: Int = 49152

val SS_ELLIPSISMASK: Int = 49152

val STM_SETICON: Int = 368

val STM_GETICON: Int = 369

val STM_SETIMAGE: Int = 370

val STM_GETIMAGE: Int = 371

val STN_CLICKED: Int = 0

val STN_DBLCLK: Int = 1

val STN_ENABLE: Int = 2

val STN_DISABLE: Int = 3

val STM_MSGMAX: Int = 372

val DWLP_MSGRESULT: Int = 0

val DWLP_DLGPROC: Long = 8

val DWLP_USER: Long = 16

val DDL_READWRITE: Int = 0

val DDL_READONLY: Int = 1

val DDL_HIDDEN: Int = 2

val DDL_SYSTEM: Int = 4

val DDL_DIRECTORY: Int = 16

val DDL_ARCHIVE: Int = 32

val DDL_POSTMSGS: Int = 8192

val DDL_DRIVES: Int = 16384

val DDL_EXCLUSIVE: Int = 32768

val DS_ABSALIGN: Int = 1

val DS_SYSMODAL: Int = 2

val DS_LOCALEDIT: Int = 32

val DS_SETFONT: Int = 64

val DS_MODALFRAME: Int = 128

val DS_NOIDLEMSG: Int = 256

val DS_SETFOREGROUND: Int = 512

val DS_3DLOOK: Int = 4

val DS_FIXEDSYS: Int = 8

val DS_NOFAILCREATE: Int = 16

val DS_CONTROL: Int = 1024

val DS_CENTER: Int = 2048

val DS_CENTERMOUSE: Int = 4096

val DS_CONTEXTHELP: Int = 8192

val DS_SHELLFONT: Int = 72

val DM_GETDEFID: Int = 1024

val DM_SETDEFID: Int = 1025

val DM_REPOSITION: Int = 1026

val DC_HASDEFID: Int = 21323

val DLGC_WANTARROWS: Int = 1

val DLGC_WANTTAB: Int = 2

val DLGC_WANTALLKEYS: Int = 4

val DLGC_WANTMESSAGE: Int = 4

val DLGC_HASSETSEL: Int = 8

val DLGC_DEFPUSHBUTTON: Int = 16

val DLGC_UNDEFPUSHBUTTON: Int = 32

val DLGC_RADIOBUTTON: Int = 64

val DLGC_WANTCHARS: Int = 128

val DLGC_STATIC: Int = 256

val DLGC_BUTTON: Int = 8192

val LB_CTLCODE: Int = 0

val LB_OKAY: Int = 0

val LB_ERR: Int = -1

val LB_ERRSPACE: Int = -2

val LBN_ERRSPACE: Int = -2

val LBN_SELCHANGE: Int = 1

val LBN_DBLCLK: Int = 2

val LBN_SELCANCEL: Int = 3

val LBN_SETFOCUS: Int = 4

val LBN_KILLFOCUS: Int = 5

val LB_ADDSTRING: Int = 384

val LB_INSERTSTRING: Int = 385

val LB_DELETESTRING: Int = 386

val LB_SELITEMRANGEEX: Int = 387

val LB_RESETCONTENT: Int = 388

val LB_SETSEL: Int = 389

val LB_SETCURSEL: Int = 390

val LB_GETSEL: Int = 391

val LB_GETCURSEL: Int = 392

val LB_GETTEXT: Int = 393

val LB_GETTEXTLEN: Int = 394

val LB_GETCOUNT: Int = 395

val LB_SELECTSTRING: Int = 396

val LB_DIR: Int = 397

val LB_GETTOPINDEX: Int = 398

val LB_FINDSTRING: Int = 399

val LB_GETSELCOUNT: Int = 400

val LB_GETSELITEMS: Int = 401

val LB_SETTABSTOPS: Int = 402

val LB_GETHORIZONTALEXTENT: Int = 403

val LB_SETHORIZONTALEXTENT: Int = 404

val LB_SETCOLUMNWIDTH: Int = 405

val LB_ADDFILE: Int = 406

val LB_SETTOPINDEX: Int = 407

val LB_GETITEMRECT: Int = 408

val LB_GETITEMDATA: Int = 409

val LB_SETITEMDATA: Int = 410

val LB_SELITEMRANGE: Int = 411

val LB_SETANCHORINDEX: Int = 412

val LB_GETANCHORINDEX: Int = 413

val LB_SETCARETINDEX: Int = 414

val LB_GETCARETINDEX: Int = 415

val LB_SETITEMHEIGHT: Int = 416

val LB_GETITEMHEIGHT: Int = 417

val LB_FINDSTRINGEXACT: Int = 418

val LB_SETLOCALE: Int = 421

val LB_GETLOCALE: Int = 422

val LB_SETCOUNT: Int = 423

val LB_INITSTORAGE: Int = 424

val LB_ITEMFROMPOINT: Int = 425

val LB_GETLISTBOXINFO: Int = 434

val LB_MSGMAX: Int = 435

val LBS_NOTIFY: Int = 1

val LBS_SORT: Int = 2

val LBS_NOREDRAW: Int = 4

val LBS_MULTIPLESEL: Int = 8

val LBS_OWNERDRAWFIXED: Int = 16

val LBS_OWNERDRAWVARIABLE: Int = 32

val LBS_HASSTRINGS: Int = 64

val LBS_USETABSTOPS: Int = 128

val LBS_NOINTEGRALHEIGHT: Int = 256

val LBS_MULTICOLUMN: Int = 512

val LBS_WANTKEYBOARDINPUT: Int = 1024

val LBS_EXTENDEDSEL: Int = 2048

val LBS_DISABLENOSCROLL: Int = 4096

val LBS_NODATA: Int = 8192

val LBS_NOSEL: Int = 16384

val LBS_COMBOBOX: Int = 32768

val LBS_STANDARD: Int = 10485763

val CB_OKAY: Int = 0

val CB_ERR: Int = -1

val CB_ERRSPACE: Int = -2

val CBN_ERRSPACE: Int = -1

val CBN_SELCHANGE: Int = 1

val CBN_DBLCLK: Int = 2

val CBN_SETFOCUS: Int = 3

val CBN_KILLFOCUS: Int = 4

val CBN_EDITCHANGE: Int = 5

val CBN_EDITUPDATE: Int = 6

val CBN_DROPDOWN: Int = 7

val CBN_CLOSEUP: Int = 8

val CBN_SELENDOK: Int = 9

val CBN_SELENDCANCEL: Int = 10

val CBS_SIMPLE: Int = 1

val CBS_DROPDOWN: Int = 2

val CBS_DROPDOWNLIST: Int = 3

val CBS_OWNERDRAWFIXED: Int = 16

val CBS_OWNERDRAWVARIABLE: Int = 32

val CBS_AUTOHSCROLL: Int = 64

val CBS_OEMCONVERT: Int = 128

val CBS_SORT: Int = 256

val CBS_HASSTRINGS: Int = 512

val CBS_NOINTEGRALHEIGHT: Int = 1024

val CBS_DISABLENOSCROLL: Int = 2048

val CBS_UPPERCASE: Int = 8192

val CBS_LOWERCASE: Int = 16384

val CB_GETEDITSEL: Int = 320

val CB_LIMITTEXT: Int = 321

val CB_SETEDITSEL: Int = 322

val CB_ADDSTRING: Int = 323

val CB_DELETESTRING: Int = 324

val CB_DIR: Int = 325

val CB_GETCOUNT: Int = 326

val CB_GETCURSEL: Int = 327

val CB_GETLBTEXT: Int = 328

val CB_GETLBTEXTLEN: Int = 329

val CB_INSERTSTRING: Int = 330

val CB_RESETCONTENT: Int = 331

val CB_FINDSTRING: Int = 332

val CB_SELECTSTRING: Int = 333

val CB_SETCURSEL: Int = 334

val CB_SHOWDROPDOWN: Int = 335

val CB_GETITEMDATA: Int = 336

val CB_SETITEMDATA: Int = 337

val CB_GETDROPPEDCONTROLRECT: Int = 338

val CB_SETITEMHEIGHT: Int = 339

val CB_GETITEMHEIGHT: Int = 340

val CB_SETEXTENDEDUI: Int = 341

val CB_GETEXTENDEDUI: Int = 342

val CB_GETDROPPEDSTATE: Int = 343

val CB_FINDSTRINGEXACT: Int = 344

val CB_SETLOCALE: Int = 345

val CB_GETLOCALE: Int = 346

val CB_GETTOPINDEX: Int = 347

val CB_SETTOPINDEX: Int = 348

val CB_GETHORIZONTALEXTENT: Int = 349

val CB_SETHORIZONTALEXTENT: Int = 350

val CB_GETDROPPEDWIDTH: Int = 351

val CB_SETDROPPEDWIDTH: Int = 352

val CB_INITSTORAGE: Int = 353

val CB_GETCOMBOBOXINFO: Int = 356

val CB_MSGMAX: Int = 357

val SBS_HORZ: Int = 0

val SBS_VERT: Int = 1

val SBS_TOPALIGN: Int = 2

val SBS_LEFTALIGN: Int = 2

val SBS_BOTTOMALIGN: Int = 4

val SBS_RIGHTALIGN: Int = 4

val SBS_SIZEBOXTOPLEFTALIGN: Int = 2

val SBS_SIZEBOXBOTTOMRIGHTALIGN: Int = 4

val SBS_SIZEBOX: Int = 8

val SBS_SIZEGRIP: Int = 16

val SBM_SETPOS: Int = 224

val SBM_GETPOS: Int = 225

val SBM_SETRANGE: Int = 226

val SBM_SETRANGEREDRAW: Int = 230

val SBM_GETRANGE: Int = 227

val SBM_ENABLE_ARROWS: Int = 228

val SBM_SETSCROLLINFO: Int = 233

val SBM_GETSCROLLINFO: Int = 234

val SBM_GETSCROLLBARINFO: Int = 235

val SIF_RANGE: Int = 1

val SIF_PAGE: Int = 2

val SIF_POS: Int = 4

val SIF_DISABLENOSCROLL: Int = 8

val SIF_TRACKPOS: Int = 16

val SIF_ALL: Int = 23

val MDIS_ALLCHILDSTYLES: Int = 1

val MDITILE_VERTICAL: Int = 0

val MDITILE_HORIZONTAL: Int = 1

val MDITILE_SKIPDISABLED: Int = 2

val MDITILE_ZORDER: Int = 4

val HELP_CONTEXT: Int = 1

val HELP_QUIT: Int = 2

val HELP_INDEX: Int = 3

val HELP_CONTENTS: Int = 3

val HELP_HELPONHELP: Int = 4

val HELP_SETINDEX: Int = 5

val HELP_SETCONTENTS: Int = 5

val HELP_CONTEXTPOPUP: Int = 8

val HELP_FORCEFILE: Int = 9

val HELP_KEY: Int = 257

val HELP_COMMAND: Int = 258

val HELP_PARTIALKEY: Int = 261

val HELP_MULTIKEY: Int = 513

val HELP_SETWINPOS: Int = 515

val HELP_CONTEXTMENU: Int = 10

val HELP_FINDER: Int = 11

val HELP_WM_HELP: Int = 12

val HELP_SETPOPUP_POS: Int = 13

val HELP_TCARD: Int = 32768

val HELP_TCARD_DATA: Int = 16

val HELP_TCARD_OTHER_CALLER: Int = 17

val IDH_NO_HELP: Int = 28440

val IDH_MISSING_CONTEXT: Int = 28441

val IDH_GENERIC_HELP_BUTTON: Int = 28442

val IDH_OK: Int = 28443

val IDH_CANCEL: Int = 28444

val IDH_HELP: Int = 28445

val GR_GDIOBJECTS: Int = 0

val GR_USEROBJECTS: Int = 1

val SPI_GETBEEP: Int = 1

val SPI_SETBEEP: Int = 2

val SPI_GETMOUSE: Int = 3

val SPI_SETMOUSE: Int = 4

val SPI_GETBORDER: Int = 5

val SPI_SETBORDER: Int = 6

val SPI_GETKEYBOARDSPEED: Int = 10

val SPI_SETKEYBOARDSPEED: Int = 11

val SPI_LANGDRIVER: Int = 12

val SPI_ICONHORIZONTALSPACING: Int = 13

val SPI_GETSCREENSAVETIMEOUT: Int = 14

val SPI_SETSCREENSAVETIMEOUT: Int = 15

val SPI_GETSCREENSAVEACTIVE: Int = 16

val SPI_SETSCREENSAVEACTIVE: Int = 17

val SPI_GETGRIDGRANULARITY: Int = 18

val SPI_SETGRIDGRANULARITY: Int = 19

val SPI_SETDESKWALLPAPER: Int = 20

val SPI_SETDESKPATTERN: Int = 21

val SPI_GETKEYBOARDDELAY: Int = 22

val SPI_SETKEYBOARDDELAY: Int = 23

val SPI_ICONVERTICALSPACING: Int = 24

val SPI_GETICONTITLEWRAP: Int = 25

val SPI_SETICONTITLEWRAP: Int = 26

val SPI_GETMENUDROPALIGNMENT: Int = 27

val SPI_SETMENUDROPALIGNMENT: Int = 28

val SPI_SETDOUBLECLKWIDTH: Int = 29

val SPI_SETDOUBLECLKHEIGHT: Int = 30

val SPI_GETICONTITLELOGFONT: Int = 31

val SPI_SETDOUBLECLICKTIME: Int = 32

val SPI_SETMOUSEBUTTONSWAP: Int = 33

val SPI_SETICONTITLELOGFONT: Int = 34

val SPI_GETFASTTASKSWITCH: Int = 35

val SPI_SETFASTTASKSWITCH: Int = 36

val SPI_SETDRAGFULLWINDOWS: Int = 37

val SPI_GETDRAGFULLWINDOWS: Int = 38

val SPI_GETNONCLIENTMETRICS: Int = 41

val SPI_SETNONCLIENTMETRICS: Int = 42

val SPI_GETMINIMIZEDMETRICS: Int = 43

val SPI_SETMINIMIZEDMETRICS: Int = 44

val SPI_GETICONMETRICS: Int = 45

val SPI_SETICONMETRICS: Int = 46

val SPI_SETWORKAREA: Int = 47

val SPI_GETWORKAREA: Int = 48

val SPI_SETPENWINDOWS: Int = 49

val SPI_GETHIGHCONTRAST: Int = 66

val SPI_SETHIGHCONTRAST: Int = 67

val SPI_GETKEYBOARDPREF: Int = 68

val SPI_SETKEYBOARDPREF: Int = 69

val SPI_GETSCREENREADER: Int = 70

val SPI_SETSCREENREADER: Int = 71

val SPI_GETANIMATION: Int = 72

val SPI_SETANIMATION: Int = 73

val SPI_GETFONTSMOOTHING: Int = 74

val SPI_SETFONTSMOOTHING: Int = 75

val SPI_SETDRAGWIDTH: Int = 76

val SPI_SETDRAGHEIGHT: Int = 77

val SPI_SETHANDHELD: Int = 78

val SPI_GETLOWPOWERTIMEOUT: Int = 79

val SPI_GETPOWEROFFTIMEOUT: Int = 80

val SPI_SETLOWPOWERTIMEOUT: Int = 81

val SPI_SETPOWEROFFTIMEOUT: Int = 82

val SPI_GETLOWPOWERACTIVE: Int = 83

val SPI_GETPOWEROFFACTIVE: Int = 84

val SPI_SETLOWPOWERACTIVE: Int = 85

val SPI_SETPOWEROFFACTIVE: Int = 86

val SPI_SETCURSORS: Int = 87

val SPI_SETICONS: Int = 88

val SPI_GETDEFAULTINPUTLANG: Int = 89

val SPI_SETDEFAULTINPUTLANG: Int = 90

val SPI_SETLANGTOGGLE: Int = 91

val SPI_GETWINDOWSEXTENSION: Int = 92

val SPI_SETMOUSETRAILS: Int = 93

val SPI_GETMOUSETRAILS: Int = 94

val SPI_SETSCREENSAVERRUNNING: Int = 97

val SPI_SCREENSAVERRUNNING: Int = 97

val SPI_GETFILTERKEYS: Int = 50

val SPI_SETFILTERKEYS: Int = 51

val SPI_GETTOGGLEKEYS: Int = 52

val SPI_SETTOGGLEKEYS: Int = 53

val SPI_GETMOUSEKEYS: Int = 54

val SPI_SETMOUSEKEYS: Int = 55

val SPI_GETSHOWSOUNDS: Int = 56

val SPI_SETSHOWSOUNDS: Int = 57

val SPI_GETSTICKYKEYS: Int = 58

val SPI_SETSTICKYKEYS: Int = 59

val SPI_GETACCESSTIMEOUT: Int = 60

val SPI_SETACCESSTIMEOUT: Int = 61

val SPI_GETSERIALKEYS: Int = 62

val SPI_SETSERIALKEYS: Int = 63

val SPI_GETSOUNDSENTRY: Int = 64

val SPI_SETSOUNDSENTRY: Int = 65

val SPI_GETSNAPTODEFBUTTON: Int = 95

val SPI_SETSNAPTODEFBUTTON: Int = 96

val SPI_GETMOUSEHOVERWIDTH: Int = 98

val SPI_SETMOUSEHOVERWIDTH: Int = 99

val SPI_GETMOUSEHOVERHEIGHT: Int = 100

val SPI_SETMOUSEHOVERHEIGHT: Int = 101

val SPI_GETMOUSEHOVERTIME: Int = 102

val SPI_SETMOUSEHOVERTIME: Int = 103

val SPI_GETWHEELSCROLLLINES: Int = 104

val SPI_SETWHEELSCROLLLINES: Int = 105

val SPI_GETMENUSHOWDELAY: Int = 106

val SPI_SETMENUSHOWDELAY: Int = 107

val SPI_GETSHOWIMEUI: Int = 110

val SPI_SETSHOWIMEUI: Int = 111

val SPI_GETMOUSESPEED: Int = 112

val SPI_SETMOUSESPEED: Int = 113

val SPI_GETSCREENSAVERRUNNING: Int = 114

val SPI_GETDESKWALLPAPER: Int = 115

val SPI_GETACTIVEWINDOWTRACKING: Int = 4096

val SPI_SETACTIVEWINDOWTRACKING: Int = 4097

val SPI_GETMENUANIMATION: Int = 4098

val SPI_SETMENUANIMATION: Int = 4099

val SPI_GETCOMBOBOXANIMATION: Int = 4100

val SPI_SETCOMBOBOXANIMATION: Int = 4101

val SPI_GETLISTBOXSMOOTHSCROLLING: Int = 4102

val SPI_SETLISTBOXSMOOTHSCROLLING: Int = 4103

val SPI_GETGRADIENTCAPTIONS: Int = 4104

val SPI_SETGRADIENTCAPTIONS: Int = 4105

val SPI_GETKEYBOARDCUES: Int = 4106

val SPI_SETKEYBOARDCUES: Int = 4107

val SPI_GETMENUUNDERLINES: Int = 4106

val SPI_SETMENUUNDERLINES: Int = 4107

val SPI_GETACTIVEWNDTRKZORDER: Int = 4108

val SPI_SETACTIVEWNDTRKZORDER: Int = 4109

val SPI_GETHOTTRACKING: Int = 4110

val SPI_SETHOTTRACKING: Int = 4111

val SPI_GETMENUFADE: Int = 4114

val SPI_SETMENUFADE: Int = 4115

val SPI_GETSELECTIONFADE: Int = 4116

val SPI_SETSELECTIONFADE: Int = 4117

val SPI_GETTOOLTIPANIMATION: Int = 4118

val SPI_SETTOOLTIPANIMATION: Int = 4119

val SPI_GETTOOLTIPFADE: Int = 4120

val SPI_SETTOOLTIPFADE: Int = 4121

val SPI_GETCURSORSHADOW: Int = 4122

val SPI_SETCURSORSHADOW: Int = 4123

val SPI_GETMOUSESONAR: Int = 4124

val SPI_SETMOUSESONAR: Int = 4125

val SPI_GETMOUSECLICKLOCK: Int = 4126

val SPI_SETMOUSECLICKLOCK: Int = 4127

val SPI_GETMOUSEVANISH: Int = 4128

val SPI_SETMOUSEVANISH: Int = 4129

val SPI_GETFLATMENU: Int = 4130

val SPI_SETFLATMENU: Int = 4131

val SPI_GETDROPSHADOW: Int = 4132

val SPI_SETDROPSHADOW: Int = 4133

val SPI_GETBLOCKSENDINPUTRESETS: Int = 4134

val SPI_SETBLOCKSENDINPUTRESETS: Int = 4135

val SPI_GETUIEFFECTS: Int = 4158

val SPI_SETUIEFFECTS: Int = 4159

val SPI_GETFOREGROUNDLOCKTIMEOUT: Int = 8192

val SPI_SETFOREGROUNDLOCKTIMEOUT: Int = 8193

val SPI_GETACTIVEWNDTRKTIMEOUT: Int = 8194

val SPI_SETACTIVEWNDTRKTIMEOUT: Int = 8195

val SPI_GETFOREGROUNDFLASHCOUNT: Int = 8196

val SPI_SETFOREGROUNDFLASHCOUNT: Int = 8197

val SPI_GETCARETWIDTH: Int = 8198

val SPI_SETCARETWIDTH: Int = 8199

val SPI_GETMOUSECLICKLOCKTIME: Int = 8200

val SPI_SETMOUSECLICKLOCKTIME: Int = 8201

val SPI_GETFONTSMOOTHINGTYPE: Int = 8202

val SPI_SETFONTSMOOTHINGTYPE: Int = 8203

val FE_FONTSMOOTHINGSTANDARD: Int = 1

val FE_FONTSMOOTHINGCLEARTYPE: Int = 2

val FE_FONTSMOOTHINGDOCKING: Int = 32768

val SPI_GETFONTSMOOTHINGCONTRAST: Int = 8204

val SPI_SETFONTSMOOTHINGCONTRAST: Int = 8205

val SPI_GETFOCUSBORDERWIDTH: Int = 8206

val SPI_SETFOCUSBORDERWIDTH: Int = 8207

val SPI_GETFOCUSBORDERHEIGHT: Int = 8208

val SPI_SETFOCUSBORDERHEIGHT: Int = 8209

val SPI_GETFONTSMOOTHINGORIENTATION: Int = 8210

val SPI_SETFONTSMOOTHINGORIENTATION: Int = 8211

val FE_FONTSMOOTHINGORIENTATIONBGR: Int = 0

val FE_FONTSMOOTHINGORIENTATIONRGB: Int = 1

val SPIF_UPDATEINIFILE: Int = 1

val SPIF_SENDWININICHANGE: Int = 2

val SPIF_SENDCHANGE: Int = 2

val METRICS_USEDEFAULT: Int = -1

val ARW_BOTTOMLEFT: Int = 0

val ARW_BOTTOMRIGHT: Int = 1

val ARW_TOPLEFT: Int = 2

val ARW_TOPRIGHT: Int = 3

val ARW_STARTMASK: Int = 3

val ARW_STARTRIGHT: Int = 1

val ARW_STARTTOP: Int = 2

val ARW_LEFT: Int = 0

val ARW_RIGHT: Int = 0

val ARW_UP: Int = 4

val ARW_DOWN: Int = 4

val ARW_HIDE: Int = 8

val SERKF_SERIALKEYSON: Int = 1

val SERKF_AVAILABLE: Int = 2

val SERKF_INDICATOR: Int = 4

val HCF_HIGHCONTRASTON: Int = 1

val HCF_AVAILABLE: Int = 2

val HCF_HOTKEYACTIVE: Int = 4

val HCF_CONFIRMHOTKEY: Int = 8

val HCF_HOTKEYSOUND: Int = 16

val HCF_INDICATOR: Int = 32

val HCF_HOTKEYAVAILABLE: Int = 64

val HCF_LOGONDESKTOP: Int = 256

val HCF_DEFAULTDESKTOP: Int = 512

val CDS_UPDATEREGISTRY: Int = 1

val CDS_TEST: Int = 2

val CDS_FULLSCREEN: Int = 4

val CDS_GLOBAL: Int = 8

val CDS_SET_PRIMARY: Int = 16

val CDS_VIDEOPARAMETERS: Int = 32

val CDS_RESET: Int = 1073741824

val CDS_RESET_EX: Int = 536870912

val CDS_NORESET: Int = 268435456

val DISP_CHANGE_SUCCESSFUL: Int = 0

val DISP_CHANGE_RESTART: Int = 1

val DISP_CHANGE_FAILED: Int = -1

val DISP_CHANGE_BADMODE: Int = -2

val DISP_CHANGE_NOTUPDATED: Int = -3

val DISP_CHANGE_BADFLAGS: Int = -4

val DISP_CHANGE_BADPARAM: Int = -5

val DISP_CHANGE_BADDUALVIEW: Int = -6

val ENUM_CURRENT_SETTINGS: DWORD = -1

val ENUM_REGISTRY_SETTINGS: DWORD = -2

val EDS_RAWMODE: Int = 2

val EDD_GET_DEVICE_INTERFACE_NAME: Int = 1

val FKF_FILTERKEYSON: Int = 1

val FKF_AVAILABLE: Int = 2

val FKF_HOTKEYACTIVE: Int = 4

val FKF_CONFIRMHOTKEY: Int = 8

val FKF_HOTKEYSOUND: Int = 16

val FKF_INDICATOR: Int = 32

val FKF_CLICKON: Int = 64

val SKF_STICKYKEYSON: Int = 1

val SKF_AVAILABLE: Int = 2

val SKF_HOTKEYACTIVE: Int = 4

val SKF_CONFIRMHOTKEY: Int = 8

val SKF_HOTKEYSOUND: Int = 16

val SKF_INDICATOR: Int = 32

val SKF_AUDIBLEFEEDBACK: Int = 64

val SKF_TRISTATE: Int = 128

val SKF_TWOKEYSOFF: Int = 256

val SKF_LALTLATCHED: Int = 268435456

val SKF_LCTLLATCHED: Int = 67108864

val SKF_LSHIFTLATCHED: Int = 16777216

val SKF_RALTLATCHED: Int = 536870912

val SKF_RCTLLATCHED: Int = 134217728

val SKF_RSHIFTLATCHED: Int = 33554432

val SKF_LWINLATCHED: Int = 1073741824

val SKF_RWINLATCHED: Int = -2147483648

val SKF_LALTLOCKED: Int = 1048576

val SKF_LCTLLOCKED: Int = 262144

val SKF_LSHIFTLOCKED: Int = 65536

val SKF_RALTLOCKED: Int = 2097152

val SKF_RCTLLOCKED: Int = 524288

val SKF_RSHIFTLOCKED: Int = 131072

val SKF_LWINLOCKED: Int = 4194304

val SKF_RWINLOCKED: Int = 8388608

val MKF_MOUSEKEYSON: Int = 1

val MKF_AVAILABLE: Int = 2

val MKF_HOTKEYACTIVE: Int = 4

val MKF_CONFIRMHOTKEY: Int = 8

val MKF_HOTKEYSOUND: Int = 16

val MKF_INDICATOR: Int = 32

val MKF_MODIFIERS: Int = 64

val MKF_REPLACENUMBERS: Int = 128

val MKF_LEFTBUTTONSEL: Int = 268435456

val MKF_RIGHTBUTTONSEL: Int = 536870912

val MKF_LEFTBUTTONDOWN: Int = 16777216

val MKF_RIGHTBUTTONDOWN: Int = 33554432

val MKF_MOUSEMODE: Int = -2147483648

val ATF_TIMEOUTON: Int = 1

val ATF_ONOFFFEEDBACK: Int = 2

val SSGF_NONE: Int = 0

val SSGF_DISPLAY: Int = 3

val SSTF_NONE: Int = 0

val SSTF_CHARS: Int = 1

val SSTF_BORDER: Int = 2

val SSTF_DISPLAY: Int = 3

val SSWF_NONE: Int = 0

val SSWF_TITLE: Int = 1

val SSWF_WINDOW: Int = 2

val SSWF_DISPLAY: Int = 3

val SSWF_CUSTOM: Int = 4

val SSF_SOUNDSENTRYON: Int = 1

val SSF_AVAILABLE: Int = 2

val SSF_INDICATOR: Int = 4

val TKF_TOGGLEKEYSON: Int = 1

val TKF_AVAILABLE: Int = 2

val TKF_HOTKEYACTIVE: Int = 4

val TKF_CONFIRMHOTKEY: Int = 8

val TKF_HOTKEYSOUND: Int = 16

val TKF_INDICATOR: Int = 32

val SLE_ERROR: Int = 1

val SLE_MINORERROR: Int = 2

val SLE_WARNING: Int = 3

val MONITOR_DEFAULTTONULL: Int = 0

val MONITOR_DEFAULTTOPRIMARY: Int = 1

val MONITOR_DEFAULTTONEAREST: Int = 2

val MONITORINFOF_PRIMARY: Int = 1

val WINEVENT_OUTOFCONTEXT: Int = 0

val WINEVENT_SKIPOWNTHREAD: Int = 1

val WINEVENT_SKIPOWNPROCESS: Int = 2

val WINEVENT_INCONTEXT: Int = 4

val CHILDID_SELF: Int = 0

val INDEXID_OBJECT: Int = 0

val INDEXID_CONTAINER: Int = 0

val OBJID_WINDOW: LONG = 0

val OBJID_SYSMENU: LONG = -1

val OBJID_TITLEBAR: LONG = -2

val OBJID_MENU: LONG = -3

val OBJID_CLIENT: LONG = -4

val OBJID_VSCROLL: LONG = -5

val OBJID_HSCROLL: LONG = -6

val OBJID_SIZEGRIP: LONG = -7

val OBJID_CARET: LONG = -8

val OBJID_CURSOR: LONG = -9

val OBJID_ALERT: LONG = -10

val OBJID_SOUND: LONG = -11

val OBJID_QUERYCLASSNAMEIDX: LONG = -12

val OBJID_NATIVEOM: LONG = -16

val EVENT_MIN: Int = 1

val EVENT_MAX: Int = 2147483647

val EVENT_SYSTEM_SOUND: Int = 1

val EVENT_SYSTEM_ALERT: Int = 2

val EVENT_SYSTEM_FOREGROUND: Int = 3

val EVENT_SYSTEM_MENUSTART: Int = 4

val EVENT_SYSTEM_MENUEND: Int = 5

val EVENT_SYSTEM_MENUPOPUPSTART: Int = 6

val EVENT_SYSTEM_MENUPOPUPEND: Int = 7

val EVENT_SYSTEM_CAPTURESTART: Int = 8

val EVENT_SYSTEM_CAPTUREEND: Int = 9

val EVENT_SYSTEM_MOVESIZESTART: Int = 10

val EVENT_SYSTEM_MOVESIZEEND: Int = 11

val EVENT_SYSTEM_CONTEXTHELPSTART: Int = 12

val EVENT_SYSTEM_CONTEXTHELPEND: Int = 13

val EVENT_SYSTEM_DRAGDROPSTART: Int = 14

val EVENT_SYSTEM_DRAGDROPEND: Int = 15

val EVENT_SYSTEM_DIALOGSTART: Int = 16

val EVENT_SYSTEM_DIALOGEND: Int = 17

val EVENT_SYSTEM_SCROLLINGSTART: Int = 18

val EVENT_SYSTEM_SCROLLINGEND: Int = 19

val EVENT_SYSTEM_SWITCHSTART: Int = 20

val EVENT_SYSTEM_SWITCHEND: Int = 21

val EVENT_SYSTEM_MINIMIZESTART: Int = 22

val EVENT_SYSTEM_MINIMIZEEND: Int = 23

val EVENT_CONSOLE_CARET: Int = 16385

val EVENT_CONSOLE_UPDATE_REGION: Int = 16386

val EVENT_CONSOLE_UPDATE_SIMPLE: Int = 16387

val EVENT_CONSOLE_UPDATE_SCROLL: Int = 16388

val EVENT_CONSOLE_LAYOUT: Int = 16389

val EVENT_CONSOLE_START_APPLICATION: Int = 16390

val EVENT_CONSOLE_END_APPLICATION: Int = 16391

val CONSOLE_APPLICATION_16BIT: Int = 0

val CONSOLE_CARET_SELECTION: Int = 1

val CONSOLE_CARET_VISIBLE: Int = 2

val EVENT_OBJECT_CREATE: Int = 32768

val EVENT_OBJECT_DESTROY: Int = 32769

val EVENT_OBJECT_SHOW: Int = 32770

val EVENT_OBJECT_HIDE: Int = 32771

val EVENT_OBJECT_REORDER: Int = 32772

val EVENT_OBJECT_FOCUS: Int = 32773

val EVENT_OBJECT_SELECTION: Int = 32774

val EVENT_OBJECT_SELECTIONADD: Int = 32775

val EVENT_OBJECT_SELECTIONREMOVE: Int = 32776

val EVENT_OBJECT_SELECTIONWITHIN: Int = 32777

val EVENT_OBJECT_STATECHANGE: Int = 32778

val EVENT_OBJECT_LOCATIONCHANGE: Int = 32779

val EVENT_OBJECT_NAMECHANGE: Int = 32780

val EVENT_OBJECT_DESCRIPTIONCHANGE: Int = 32781

val EVENT_OBJECT_VALUECHANGE: Int = 32782

val EVENT_OBJECT_PARENTCHANGE: Int = 32783

val EVENT_OBJECT_HELPCHANGE: Int = 32784

val EVENT_OBJECT_DEFACTIONCHANGE: Int = 32785

val EVENT_OBJECT_ACCELERATORCHANGE: Int = 32786

val SOUND_SYSTEM_STARTUP: Int = 1

val SOUND_SYSTEM_SHUTDOWN: Int = 2

val SOUND_SYSTEM_BEEP: Int = 3

val SOUND_SYSTEM_ERROR: Int = 4

val SOUND_SYSTEM_QUESTION: Int = 5

val SOUND_SYSTEM_WARNING: Int = 6

val SOUND_SYSTEM_INFORMATION: Int = 7

val SOUND_SYSTEM_MAXIMIZE: Int = 8

val SOUND_SYSTEM_MINIMIZE: Int = 9

val SOUND_SYSTEM_RESTOREUP: Int = 10

val SOUND_SYSTEM_RESTOREDOWN: Int = 11

val SOUND_SYSTEM_APPSTART: Int = 12

val SOUND_SYSTEM_FAULT: Int = 13

val SOUND_SYSTEM_APPEND: Int = 14

val SOUND_SYSTEM_MENUCOMMAND: Int = 15

val SOUND_SYSTEM_MENUPOPUP: Int = 16

val CSOUND_SYSTEM: Int = 16

val ALERT_SYSTEM_INFORMATIONAL: Int = 1

val ALERT_SYSTEM_WARNING: Int = 2

val ALERT_SYSTEM_ERROR: Int = 3

val ALERT_SYSTEM_QUERY: Int = 4

val ALERT_SYSTEM_CRITICAL: Int = 5

val CALERT_SYSTEM: Int = 6

val GUI_CARETBLINKING: Int = 1

val GUI_INMOVESIZE: Int = 2

val GUI_INMENUMODE: Int = 4

val GUI_SYSTEMMENUMODE: Int = 8

val GUI_POPUPMENUMODE: Int = 16

val GUI_16BITTASK: Int = 0

val STATE_SYSTEM_UNAVAILABLE: Int = 1

val STATE_SYSTEM_SELECTED: Int = 2

val STATE_SYSTEM_FOCUSED: Int = 4

val STATE_SYSTEM_PRESSED: Int = 8

val STATE_SYSTEM_CHECKED: Int = 16

val STATE_SYSTEM_MIXED: Int = 32

val STATE_SYSTEM_INDETERMINATE: Int = 32

val STATE_SYSTEM_READONLY: Int = 64

val STATE_SYSTEM_HOTTRACKED: Int = 128

val STATE_SYSTEM_DEFAULT: Int = 256

val STATE_SYSTEM_EXPANDED: Int = 512

val STATE_SYSTEM_COLLAPSED: Int = 1024

val STATE_SYSTEM_BUSY: Int = 2048

val STATE_SYSTEM_FLOATING: Int = 4096

val STATE_SYSTEM_MARQUEED: Int = 8192

val STATE_SYSTEM_ANIMATED: Int = 16384

val STATE_SYSTEM_INVISIBLE: Int = 32768

val STATE_SYSTEM_OFFSCREEN: Int = 65536

val STATE_SYSTEM_SIZEABLE: Int = 131072

val STATE_SYSTEM_MOVEABLE: Int = 262144

val STATE_SYSTEM_SELFVOICING: Int = 524288

val STATE_SYSTEM_FOCUSABLE: Int = 1048576

val STATE_SYSTEM_SELECTABLE: Int = 2097152

val STATE_SYSTEM_LINKED: Int = 4194304

val STATE_SYSTEM_TRAVERSED: Int = 8388608

val STATE_SYSTEM_MULTISELECTABLE: Int = 16777216

val STATE_SYSTEM_EXTSELECTABLE: Int = 33554432

val STATE_SYSTEM_ALERT_LOW: Int = 67108864

val STATE_SYSTEM_ALERT_MEDIUM: Int = 134217728

val STATE_SYSTEM_ALERT_HIGH: Int = 268435456

val STATE_SYSTEM_PROTECTED: Int = 536870912

val STATE_SYSTEM_VALID: Int = 1073741823

val CCHILDREN_TITLEBAR: Int = 5

val CCHILDREN_SCROLLBAR: Int = 5

val CURSOR_SHOWING: Int = 1

val WS_ACTIVECAPTION: Int = 1

val GA_PARENT: Int = 1

val GA_ROOT: Int = 2

val GA_ROOTOWNER: Int = 3

val RIM_INPUT: Int = 0

val RIM_INPUTSINK: Int = 1

val RIM_TYPEMOUSE: Int = 0

val RIM_TYPEKEYBOARD: Int = 1

val RIM_TYPEHID: Int = 2

val RI_MOUSE_LEFT_BUTTON_DOWN: Int = 1

val RI_MOUSE_LEFT_BUTTON_UP: Int = 2

val RI_MOUSE_RIGHT_BUTTON_DOWN: Int = 4

val RI_MOUSE_RIGHT_BUTTON_UP: Int = 8

val RI_MOUSE_MIDDLE_BUTTON_DOWN: Int = 16

val RI_MOUSE_MIDDLE_BUTTON_UP: Int = 32

val RI_MOUSE_BUTTON_4_DOWN: Int = 64

val RI_MOUSE_BUTTON_4_UP: Int = 128

val RI_MOUSE_BUTTON_5_DOWN: Int = 256

val RI_MOUSE_BUTTON_5_UP: Int = 512

val RI_MOUSE_WHEEL: Int = 1024

val RI_MOUSE_BUTTON_1_DOWN: Int = 1

val RI_MOUSE_BUTTON_1_UP: Int = 2

val RI_MOUSE_BUTTON_2_DOWN: Int = 4

val RI_MOUSE_BUTTON_2_UP: Int = 8

val RI_MOUSE_BUTTON_3_DOWN: Int = 16

val RI_MOUSE_BUTTON_3_UP: Int = 32

val MOUSE_MOVE_RELATIVE: Int = 0

val MOUSE_MOVE_ABSOLUTE: Int = 1

val MOUSE_VIRTUAL_DESKTOP: Int = 2

val MOUSE_ATTRIBUTES_CHANGED: Int = 4

val KEYBOARD_OVERRUN_MAKE_CODE: Int = 255

val RI_KEY_MAKE: Int = 0

val RI_KEY_BREAK: Int = 1

val RI_KEY_E0: Int = 2

val RI_KEY_E1: Int = 4

val RI_KEY_TERMSRV_SET_LED: Int = 8

val RI_KEY_TERMSRV_SHADOW: Int = 16

val RID_INPUT: Int = 268435459

val RID_HEADER: Int = 268435461

val RIDI_PREPARSEDDATA: Int = 536870917

val RIDI_DEVICENAME: Int = 536870919

val RIDI_DEVICEINFO: Int = 536870923

val RIDEV_REMOVE: Int = 1

val RIDEV_EXCLUDE: Int = 16

val RIDEV_PAGEONLY: Int = 32

val RIDEV_NOLEGACY: Int = 48

val RIDEV_INPUTSINK: Int = 256

val RIDEV_CAPTUREMOUSE: Int = 512

val RIDEV_NOHOTKEYS: Int = 512

val RIDEV_APPKEYS: Int = 1024

val RIDEV_EXINPUTSINK: Int = 4096

val RIDEV_DEVNOTIFY: Int = 8192

val RIDEV_EXMODEMASK: Int = 240

val GIDC_ARRIVAL: Int = 1

val GIDC_REMOVAL: Int = 2

val MAX_STR_BLOCKREASON: Int = 256

val MAX_LEADBYTES: Int = 12

val MAX_DEFAULTCHAR: Int = 2

val HIGH_SURROGATE_START: Int = 55296

val HIGH_SURROGATE_END: Int = 56319

val LOW_SURROGATE_START: Int = 56320

val LOW_SURROGATE_END: Int = 57343

val MB_PRECOMPOSED: Int = 1

val MB_COMPOSITE: Int = 2

val MB_USEGLYPHCHARS: Int = 4

val MB_ERR_INVALID_CHARS: Int = 8

val WC_DISCARDNS: Int = 16

val WC_SEPCHARS: Int = 32

val WC_DEFAULTCHAR: Int = 64

val WC_COMPOSITECHECK: Int = 512

val WC_NO_BEST_FIT_CHARS: Int = 1024

val CT_CTYPE1: Int = 1

val CT_CTYPE2: Int = 2

val CT_CTYPE3: Int = 4

val C1_UPPER: Int = 1

val C1_LOWER: Int = 2

val C1_DIGIT: Int = 4

val C1_SPACE: Int = 8

val C1_PUNCT: Int = 16

val C1_CNTRL: Int = 32

val C1_BLANK: Int = 64

val C1_XDIGIT: Int = 128

val C1_ALPHA: Int = 256

val C1_DEFINED: Int = 512

val C2_LEFTTORIGHT: Int = 1

val C2_RIGHTTOLEFT: Int = 2

val C2_EUROPENUMBER: Int = 3

val C2_EUROPESEPARATOR: Int = 4

val C2_EUROPETERMINATOR: Int = 5

val C2_ARABICNUMBER: Int = 6

val C2_COMMONSEPARATOR: Int = 7

val C2_BLOCKSEPARATOR: Int = 8

val C2_SEGMENTSEPARATOR: Int = 9

val C2_WHITESPACE: Int = 10

val C2_OTHERNEUTRAL: Int = 11

val C2_NOTAPPLICABLE: Int = 0

val C3_NONSPACING: Int = 1

val C3_DIACRITIC: Int = 2

val C3_VOWELMARK: Int = 4

val C3_SYMBOL: Int = 8

val C3_KATAKANA: Int = 16

val C3_HIRAGANA: Int = 32

val C3_HALFWIDTH: Int = 64

val C3_FULLWIDTH: Int = 128

val C3_IDEOGRAPH: Int = 256

val C3_KASHIDA: Int = 512

val C3_LEXICAL: Int = 1024

val C3_HIGHSURROGATE: Int = 2048

val C3_LOWSURROGATE: Int = 4096

val C3_ALPHA: Int = 32768

val C3_NOTAPPLICABLE: Int = 0

val NORM_IGNORECASE: Int = 1

val NORM_IGNORENONSPACE: Int = 2

val NORM_IGNORESYMBOLS: Int = 4

val LINGUISTIC_IGNORECASE: Int = 16

val LINGUISTIC_IGNOREDIACRITIC: Int = 32

val NORM_IGNOREKANATYPE: Int = 65536

val NORM_IGNOREWIDTH: Int = 131072

val NORM_LINGUISTIC_CASING: Int = 134217728

val MAP_FOLDCZONE: Int = 16

val MAP_PRECOMPOSED: Int = 32

val MAP_COMPOSITE: Int = 64

val MAP_FOLDDIGITS: Int = 128

val MAP_EXPAND_LIGATURES: Int = 8192

val LCMAP_LOWERCASE: Int = 256

val LCMAP_UPPERCASE: Int = 512

val LCMAP_SORTKEY: Int = 1024

val LCMAP_BYTEREV: Int = 2048

val LCMAP_HIRAGANA: Int = 1048576

val LCMAP_KATAKANA: Int = 2097152

val LCMAP_HALFWIDTH: Int = 4194304

val LCMAP_FULLWIDTH: Int = 8388608

val LCMAP_LINGUISTIC_CASING: Int = 16777216

val LCMAP_SIMPLIFIED_CHINESE: Int = 33554432

val LCMAP_TRADITIONAL_CHINESE: Int = 67108864

val FIND_STARTSWITH: Int = 1048576

val FIND_ENDSWITH: Int = 2097152

val FIND_FROMSTART: Int = 4194304

val FIND_FROMEND: Int = 8388608

val LGRPID_INSTALLED: Int = 1

val LGRPID_SUPPORTED: Int = 2

val LCID_INSTALLED: Int = 1

val LCID_SUPPORTED: Int = 2

val LCID_ALTERNATE_SORTS: Int = 4

val CP_INSTALLED: Int = 1

val CP_SUPPORTED: Int = 2

val SORT_STRINGSORT: Int = 4096

val CSTR_LESS_THAN: Int = 1

val CSTR_EQUAL: Int = 2

val CSTR_GREATER_THAN: Int = 3

val CP_ACP: Int = 0

val CP_OEMCP: Int = 1

val CP_MACCP: Int = 2

val CP_THREAD_ACP: Int = 3

val CP_SYMBOL: Int = 42

val CP_UTF7: Int = 65000

val CP_UTF8: Int = 65001

val CTRY_DEFAULT: Int = 0

val CTRY_ALBANIA: Int = 355

val CTRY_ALGERIA: Int = 213

val CTRY_ARGENTINA: Int = 54

val CTRY_ARMENIA: Int = 374

val CTRY_AUSTRALIA: Int = 61

val CTRY_AUSTRIA: Int = 43

val CTRY_AZERBAIJAN: Int = 994

val CTRY_BAHRAIN: Int = 973

val CTRY_BELARUS: Int = 375

val CTRY_BELGIUM: Int = 32

val CTRY_BELIZE: Int = 501

val CTRY_BOLIVIA: Int = 591

val CTRY_BRAZIL: Int = 55

val CTRY_BRUNEI_DARUSSALAM: Int = 673

val CTRY_BULGARIA: Int = 359

val CTRY_CANADA: Int = 2

val CTRY_CARIBBEAN: Int = 1

val CTRY_CHILE: Int = 56

val CTRY_COLOMBIA: Int = 57

val CTRY_COSTA_RICA: Int = 506

val CTRY_CROATIA: Int = 385

val CTRY_CZECH: Int = 420

val CTRY_DENMARK: Int = 45

val CTRY_DOMINICAN_REPUBLIC: Int = 1

val CTRY_ECUADOR: Int = 593

val CTRY_EGYPT: Int = 20

val CTRY_EL_SALVADOR: Int = 503

val CTRY_ESTONIA: Int = 372

val CTRY_FAEROE_ISLANDS: Int = 298

val CTRY_FINLAND: Int = 358

val CTRY_FRANCE: Int = 33

val CTRY_GEORGIA: Int = 995

val CTRY_GERMANY: Int = 49

val CTRY_GREECE: Int = 30

val CTRY_GUATEMALA: Int = 502

val CTRY_HONDURAS: Int = 504

val CTRY_HONG_KONG: Int = 852

val CTRY_HUNGARY: Int = 36

val CTRY_ICELAND: Int = 354

val CTRY_INDIA: Int = 91

val CTRY_INDONESIA: Int = 62

val CTRY_IRAN: Int = 981

val CTRY_IRAQ: Int = 964

val CTRY_IRELAND: Int = 353

val CTRY_ISRAEL: Int = 972

val CTRY_ITALY: Int = 39

val CTRY_JAMAICA: Int = 1

val CTRY_JAPAN: Int = 81

val CTRY_JORDAN: Int = 962

val CTRY_KAZAKSTAN: Int = 7

val CTRY_KENYA: Int = 254

val CTRY_KUWAIT: Int = 965

val CTRY_KYRGYZSTAN: Int = 996

val CTRY_LATVIA: Int = 371

val CTRY_LEBANON: Int = 961

val CTRY_LIBYA: Int = 218

val CTRY_LIECHTENSTEIN: Int = 41

val CTRY_LITHUANIA: Int = 370

val CTRY_LUXEMBOURG: Int = 352

val CTRY_MACAU: Int = 853

val CTRY_MACEDONIA: Int = 389

val CTRY_MALAYSIA: Int = 60

val CTRY_MALDIVES: Int = 960

val CTRY_MEXICO: Int = 52

val CTRY_MONACO: Int = 33

val CTRY_MONGOLIA: Int = 976

val CTRY_MOROCCO: Int = 212

val CTRY_NETHERLANDS: Int = 31

val CTRY_NEW_ZEALAND: Int = 64

val CTRY_NICARAGUA: Int = 505

val CTRY_NORWAY: Int = 47

val CTRY_OMAN: Int = 968

val CTRY_PAKISTAN: Int = 92

val CTRY_PANAMA: Int = 507

val CTRY_PARAGUAY: Int = 595

val CTRY_PERU: Int = 51

val CTRY_PHILIPPINES: Int = 63

val CTRY_POLAND: Int = 48

val CTRY_PORTUGAL: Int = 351

val CTRY_PRCHINA: Int = 86

val CTRY_PUERTO_RICO: Int = 1

val CTRY_QATAR: Int = 974

val CTRY_ROMANIA: Int = 40

val CTRY_RUSSIA: Int = 7

val CTRY_SAUDI_ARABIA: Int = 966

val CTRY_SERBIA: Int = 381

val CTRY_SINGAPORE: Int = 65

val CTRY_SLOVAK: Int = 421

val CTRY_SLOVENIA: Int = 386

val CTRY_SOUTH_AFRICA: Int = 27

val CTRY_SOUTH_KOREA: Int = 82

val CTRY_SPAIN: Int = 34

val CTRY_SWEDEN: Int = 46

val CTRY_SWITZERLAND: Int = 41

val CTRY_SYRIA: Int = 963

val CTRY_TAIWAN: Int = 886

val CTRY_TATARSTAN: Int = 7

val CTRY_THAILAND: Int = 66

val CTRY_TRINIDAD_Y_TOBAGO: Int = 1

val CTRY_TUNISIA: Int = 216

val CTRY_TURKEY: Int = 90

val CTRY_UAE: Int = 971

val CTRY_UKRAINE: Int = 380

val CTRY_UNITED_KINGDOM: Int = 44

val CTRY_UNITED_STATES: Int = 1

val CTRY_URUGUAY: Int = 598

val CTRY_UZBEKISTAN: Int = 7

val CTRY_VENEZUELA: Int = 58

val CTRY_VIET_NAM: Int = 84

val CTRY_YEMEN: Int = 967

val CTRY_ZIMBABWE: Int = 263

val LOCALE_SLOCALIZEDDISPLAYNAME: Int = 2

val LOCALE_RETURN_NUMBER: Int = 536870912

val LOCALE_USE_CP_ACP: Int = 1073741824

val LOCALE_NOUSEROVERRIDE: Int = -2147483648

val LOCALE_SENGLISHLANGUAGENAME: Int = 4097

val LOCALE_SNATIVELANGUAGENAME: Int = 4

val LOCALE_SLOCALIZEDCOUNTRYNAME: Int = 6

val LOCALE_SENGLISHCOUNTRYNAME: Int = 4098

val LOCALE_SNATIVECOUNTRYNAME: Int = 8

val LOCALE_SLANGUAGE: Int = 2

val LOCALE_SENGLANGUAGE: Int = 4097

val LOCALE_SNATIVELANGNAME: Int = 4

val LOCALE_SCOUNTRY: Int = 6

val LOCALE_SENGCOUNTRY: Int = 4098

val LOCALE_SNATIVECTRYNAME: Int = 8

val LOCALE_ILANGUAGE: Int = 1

val LOCALE_SABBREVLANGNAME: Int = 3

val LOCALE_ICOUNTRY: Int = 5

val LOCALE_SABBREVCTRYNAME: Int = 7

val LOCALE_IGEOID: Int = 91

val LOCALE_IDEFAULTLANGUAGE: Int = 9

val LOCALE_IDEFAULTCOUNTRY: Int = 10

val LOCALE_IDEFAULTCODEPAGE: Int = 11

val LOCALE_IDEFAULTANSICODEPAGE: Int = 4100

val LOCALE_IDEFAULTMACCODEPAGE: Int = 4113

val LOCALE_SLIST: Int = 12

val LOCALE_IMEASURE: Int = 13

val LOCALE_SDECIMAL: Int = 14

val LOCALE_STHOUSAND: Int = 15

val LOCALE_SGROUPING: Int = 16

val LOCALE_IDIGITS: Int = 17

val LOCALE_ILZERO: Int = 18

val LOCALE_INEGNUMBER: Int = 4112

val LOCALE_SNATIVEDIGITS: Int = 19

val LOCALE_SCURRENCY: Int = 20

val LOCALE_SINTLSYMBOL: Int = 21

val LOCALE_SMONDECIMALSEP: Int = 22

val LOCALE_SMONTHOUSANDSEP: Int = 23

val LOCALE_SMONGROUPING: Int = 24

val LOCALE_ICURRDIGITS: Int = 25

val LOCALE_IINTLCURRDIGITS: Int = 26

val LOCALE_ICURRENCY: Int = 27

val LOCALE_INEGCURR: Int = 28

val LOCALE_SDATE: Int = 29

val LOCALE_STIME: Int = 30

val LOCALE_SSHORTDATE: Int = 31

val LOCALE_SLONGDATE: Int = 32

val LOCALE_STIMEFORMAT: Int = 4099

val LOCALE_IDATE: Int = 33

val LOCALE_ILDATE: Int = 34

val LOCALE_ITIME: Int = 35

val LOCALE_ITIMEMARKPOSN: Int = 4101

val LOCALE_ICENTURY: Int = 36

val LOCALE_ITLZERO: Int = 37

val LOCALE_IDAYLZERO: Int = 38

val LOCALE_IMONLZERO: Int = 39

val LOCALE_S1159: Int = 40

val LOCALE_S2359: Int = 41

val LOCALE_ICALENDARTYPE: Int = 4105

val LOCALE_IOPTIONALCALENDAR: Int = 4107

val LOCALE_IFIRSTDAYOFWEEK: Int = 4108

val LOCALE_IFIRSTWEEKOFYEAR: Int = 4109

val LOCALE_SDAYNAME1: Int = 42

val LOCALE_SDAYNAME2: Int = 43

val LOCALE_SDAYNAME3: Int = 44

val LOCALE_SDAYNAME4: Int = 45

val LOCALE_SDAYNAME5: Int = 46

val LOCALE_SDAYNAME6: Int = 47

val LOCALE_SDAYNAME7: Int = 48

val LOCALE_SABBREVDAYNAME1: Int = 49

val LOCALE_SABBREVDAYNAME2: Int = 50

val LOCALE_SABBREVDAYNAME3: Int = 51

val LOCALE_SABBREVDAYNAME4: Int = 52

val LOCALE_SABBREVDAYNAME5: Int = 53

val LOCALE_SABBREVDAYNAME6: Int = 54

val LOCALE_SABBREVDAYNAME7: Int = 55

val LOCALE_SMONTHNAME1: Int = 56

val LOCALE_SMONTHNAME2: Int = 57

val LOCALE_SMONTHNAME3: Int = 58

val LOCALE_SMONTHNAME4: Int = 59

val LOCALE_SMONTHNAME5: Int = 60

val LOCALE_SMONTHNAME6: Int = 61

val LOCALE_SMONTHNAME7: Int = 62

val LOCALE_SMONTHNAME8: Int = 63

val LOCALE_SMONTHNAME9: Int = 64

val LOCALE_SMONTHNAME10: Int = 65

val LOCALE_SMONTHNAME11: Int = 66

val LOCALE_SMONTHNAME12: Int = 67

val LOCALE_SMONTHNAME13: Int = 4110

val LOCALE_SABBREVMONTHNAME1: Int = 68

val LOCALE_SABBREVMONTHNAME2: Int = 69

val LOCALE_SABBREVMONTHNAME3: Int = 70

val LOCALE_SABBREVMONTHNAME4: Int = 71

val LOCALE_SABBREVMONTHNAME5: Int = 72

val LOCALE_SABBREVMONTHNAME6: Int = 73

val LOCALE_SABBREVMONTHNAME7: Int = 74

val LOCALE_SABBREVMONTHNAME8: Int = 75

val LOCALE_SABBREVMONTHNAME9: Int = 76

val LOCALE_SABBREVMONTHNAME10: Int = 77

val LOCALE_SABBREVMONTHNAME11: Int = 78

val LOCALE_SABBREVMONTHNAME12: Int = 79

val LOCALE_SABBREVMONTHNAME13: Int = 4111

val LOCALE_SPOSITIVESIGN: Int = 80

val LOCALE_SNEGATIVESIGN: Int = 81

val LOCALE_IPOSSIGNPOSN: Int = 82

val LOCALE_INEGSIGNPOSN: Int = 83

val LOCALE_IPOSSYMPRECEDES: Int = 84

val LOCALE_IPOSSEPBYSPACE: Int = 85

val LOCALE_INEGSYMPRECEDES: Int = 86

val LOCALE_INEGSEPBYSPACE: Int = 87

val LOCALE_FONTSIGNATURE: Int = 88

val LOCALE_SISO639LANGNAME: Int = 89

val LOCALE_SISO3166CTRYNAME: Int = 90

val LOCALE_IDEFAULTEBCDICCODEPAGE: Int = 4114

val LOCALE_IPAPERSIZE: Int = 4106

val LOCALE_SENGCURRNAME: Int = 4103

val LOCALE_SNATIVECURRNAME: Int = 4104

val LOCALE_SYEARMONTH: Int = 4102

val LOCALE_SSORTNAME: Int = 4115

val LOCALE_IDIGITSUBSTITUTION: Int = 4116

val TIME_NOMINUTESORSECONDS: Int = 1

val TIME_NOSECONDS: Int = 2

val TIME_NOTIMEMARKER: Int = 4

val TIME_FORCE24HOURFORMAT: Int = 8

val DATE_SHORTDATE: Int = 1

val DATE_LONGDATE: Int = 2

val DATE_USE_ALT_CALENDAR: Int = 4

val DATE_YEARMONTH: Int = 8

val DATE_LTRREADING: Int = 16

val DATE_RTLREADING: Int = 32

val CAL_NOUSEROVERRIDE: Int = -2147483648

val CAL_USE_CP_ACP: Int = 1073741824

val CAL_RETURN_NUMBER: Int = 536870912

val CAL_ICALINTVALUE: Int = 1

val CAL_SCALNAME: Int = 2

val CAL_IYEAROFFSETRANGE: Int = 3

val CAL_SERASTRING: Int = 4

val CAL_SSHORTDATE: Int = 5

val CAL_SLONGDATE: Int = 6

val CAL_SDAYNAME1: Int = 7

val CAL_SDAYNAME2: Int = 8

val CAL_SDAYNAME3: Int = 9

val CAL_SDAYNAME4: Int = 10

val CAL_SDAYNAME5: Int = 11

val CAL_SDAYNAME6: Int = 12

val CAL_SDAYNAME7: Int = 13

val CAL_SABBREVDAYNAME1: Int = 14

val CAL_SABBREVDAYNAME2: Int = 15

val CAL_SABBREVDAYNAME3: Int = 16

val CAL_SABBREVDAYNAME4: Int = 17

val CAL_SABBREVDAYNAME5: Int = 18

val CAL_SABBREVDAYNAME6: Int = 19

val CAL_SABBREVDAYNAME7: Int = 20

val CAL_SMONTHNAME1: Int = 21

val CAL_SMONTHNAME2: Int = 22

val CAL_SMONTHNAME3: Int = 23

val CAL_SMONTHNAME4: Int = 24

val CAL_SMONTHNAME5: Int = 25

val CAL_SMONTHNAME6: Int = 26

val CAL_SMONTHNAME7: Int = 27

val CAL_SMONTHNAME8: Int = 28

val CAL_SMONTHNAME9: Int = 29

val CAL_SMONTHNAME10: Int = 30

val CAL_SMONTHNAME11: Int = 31

val CAL_SMONTHNAME12: Int = 32

val CAL_SMONTHNAME13: Int = 33

val CAL_SABBREVMONTHNAME1: Int = 34

val CAL_SABBREVMONTHNAME2: Int = 35

val CAL_SABBREVMONTHNAME3: Int = 36

val CAL_SABBREVMONTHNAME4: Int = 37

val CAL_SABBREVMONTHNAME5: Int = 38

val CAL_SABBREVMONTHNAME6: Int = 39

val CAL_SABBREVMONTHNAME7: Int = 40

val CAL_SABBREVMONTHNAME8: Int = 41

val CAL_SABBREVMONTHNAME9: Int = 42

val CAL_SABBREVMONTHNAME10: Int = 43

val CAL_SABBREVMONTHNAME11: Int = 44

val CAL_SABBREVMONTHNAME12: Int = 45

val CAL_SABBREVMONTHNAME13: Int = 46

val CAL_SYEARMONTH: Int = 47

val CAL_ITWODIGITYEARMAX: Int = 48

val ENUM_ALL_CALENDARS: Int = -1

val CAL_GREGORIAN: Int = 1

val CAL_GREGORIAN_US: Int = 2

val CAL_JAPAN: Int = 3

val CAL_TAIWAN: Int = 4

val CAL_KOREA: Int = 5

val CAL_HIJRI: Int = 6

val CAL_THAI: Int = 7

val CAL_HEBREW: Int = 8

val CAL_GREGORIAN_ME_FRENCH: Int = 9

val CAL_GREGORIAN_ARABIC: Int = 10

val CAL_GREGORIAN_XLIT_ENGLISH: Int = 11

val CAL_GREGORIAN_XLIT_FRENCH: Int = 12

val CAL_UMALQURA: Int = 23

val LGRPID_WESTERN_EUROPE: Int = 1

val LGRPID_CENTRAL_EUROPE: Int = 2

val LGRPID_BALTIC: Int = 3

val LGRPID_GREEK: Int = 4

val LGRPID_CYRILLIC: Int = 5

val LGRPID_TURKIC: Int = 6

val LGRPID_TURKISH: Int = 6

val LGRPID_JAPANESE: Int = 7

val LGRPID_KOREAN: Int = 8

val LGRPID_TRADITIONAL_CHINESE: Int = 9

val LGRPID_SIMPLIFIED_CHINESE: Int = 10

val LGRPID_THAI: Int = 11

val LGRPID_HEBREW: Int = 12

val LGRPID_ARABIC: Int = 13

val LGRPID_VIETNAMESE: Int = 14

val LGRPID_INDIC: Int = 15

val LGRPID_GEORGIAN: Int = 16

val LGRPID_ARMENIAN: Int = 17

val GEOID_NOT_AVAILABLE: Int = -1

val RIGHT_ALT_PRESSED: Int = 1

val LEFT_ALT_PRESSED: Int = 2

val RIGHT_CTRL_PRESSED: Int = 4

val LEFT_CTRL_PRESSED: Int = 8

val SHIFT_PRESSED: Int = 16

val NUMLOCK_ON: Int = 32

val SCROLLLOCK_ON: Int = 64

val CAPSLOCK_ON: Int = 128

val ENHANCED_KEY: Int = 256

val NLS_DBCSCHAR: Int = 65536

val NLS_ALPHANUMERIC: Int = 0

val NLS_KATAKANA: Int = 131072

val NLS_HIRAGANA: Int = 262144

val NLS_ROMAN: Int = 4194304

val NLS_IME_CONVERSION: Int = 8388608

val NLS_IME_DISABLE: Int = 536870912

val FROM_LEFT_1ST_BUTTON_PRESSED: Int = 1

val RIGHTMOST_BUTTON_PRESSED: Int = 2

val FROM_LEFT_2ND_BUTTON_PRESSED: Int = 4

val FROM_LEFT_3RD_BUTTON_PRESSED: Int = 8

val FROM_LEFT_4TH_BUTTON_PRESSED: Int = 16

val MOUSE_MOVED: Int = 1

val DOUBLE_CLICK: Int = 2

val MOUSE_WHEELED: Int = 4

val KEY_EVENT: Int = 1

val MOUSE_EVENT: Int = 2

val WINDOW_BUFFER_SIZE_EVENT: Int = 4

val MENU_EVENT: Int = 8

val FOCUS_EVENT: Int = 16

val FOREGROUND_BLUE: Int = 1

val FOREGROUND_GREEN: Int = 2

val FOREGROUND_RED: Int = 4

val FOREGROUND_INTENSITY: Int = 8

val BACKGROUND_BLUE: Int = 16

val BACKGROUND_GREEN: Int = 32

val BACKGROUND_RED: Int = 64

val BACKGROUND_INTENSITY: Int = 128

val COMMON_LVB_LEADING_BYTE: Int = 256

val COMMON_LVB_TRAILING_BYTE: Int = 512

val COMMON_LVB_GRID_HORIZONTAL: Int = 1024

val COMMON_LVB_GRID_LVERTICAL: Int = 2048

val COMMON_LVB_GRID_RVERTICAL: Int = 4096

val COMMON_LVB_REVERSE_VIDEO: Int = 16384

val COMMON_LVB_UNDERSCORE: Int = 32768

val COMMON_LVB_SBCSDBCS: Int = 768

val CONSOLE_NO_SELECTION: Int = 0

val CONSOLE_SELECTION_IN_PROGRESS: Int = 1

val CONSOLE_SELECTION_NOT_EMPTY: Int = 2

val CONSOLE_MOUSE_SELECTION: Int = 4

val CONSOLE_MOUSE_DOWN: Int = 8

val CTRL_C_EVENT: Int = 0

val CTRL_BREAK_EVENT: Int = 1

val CTRL_CLOSE_EVENT: Int = 2

val CTRL_LOGOFF_EVENT: Int = 5

val CTRL_SHUTDOWN_EVENT: Int = 6

val ENABLE_PROCESSED_INPUT: Int = 1

val ENABLE_LINE_INPUT: Int = 2

val ENABLE_ECHO_INPUT: Int = 4

val ENABLE_WINDOW_INPUT: Int = 8

val ENABLE_MOUSE_INPUT: Int = 16

val ENABLE_INSERT_MODE: Int = 32

val ENABLE_QUICK_EDIT_MODE: Int = 64

val ENABLE_EXTENDED_FLAGS: Int = 128

val ENABLE_AUTO_POSITION: Int = 256

val ENABLE_PROCESSED_OUTPUT: Int = 1

val ENABLE_WRAP_AT_EOL_OUTPUT: Int = 2

val ATTACH_PARENT_PROCESS: DWORD = -1

val CONSOLE_TEXTMODE_BUFFER: Int = 1

val CONSOLE_FULLSCREEN: Int = 1

val CONSOLE_FULLSCREEN_HARDWARE: Int = 2

val CONSOLE_FULLSCREEN_MODE: Int = 1

val CONSOLE_WINDOWED_MODE: Int = 2

val VS_VERSION_INFO: Int = 1

val VS_USER_DEFINED: Int = 100

val VS_FFI_SIGNATURE: Int = -17890115

val VS_FFI_STRUCVERSION: Int = 65536

val VS_FFI_FILEFLAGSMASK: Int = 63

val VS_FF_DEBUG: Int = 1

val VS_FF_PRERELEASE: Int = 2

val VS_FF_PATCHED: Int = 4

val VS_FF_PRIVATEBUILD: Int = 8

val VS_FF_INFOINFERRED: Int = 16

val VS_FF_SPECIALBUILD: Int = 32

val VOS_UNKNOWN: Int = 0

val VOS_DOS: Int = 65536

val VOS_OS216: Int = 131072

val VOS_OS232: Int = 196608

val VOS_NT: Int = 262144

val VOS_WINCE: Int = 327680

val VOS__BASE: Int = 0

val VOS__WINDOWS16: Int = 1

val VOS__PM16: Int = 2

val VOS__PM32: Int = 3

val VOS__WINDOWS32: Int = 4

val VOS_DOS_WINDOWS16: Int = 65537

val VOS_DOS_WINDOWS32: Int = 65540

val VOS_OS216_PM16: Int = 131074

val VOS_OS232_PM32: Int = 196611

val VOS_NT_WINDOWS32: Int = 262148

val VFT_UNKNOWN: Int = 0

val VFT_APP: Int = 1

val VFT_DLL: Int = 2

val VFT_DRV: Int = 3

val VFT_FONT: Int = 4

val VFT_VXD: Int = 5

val VFT_STATIC_LIB: Int = 7

val VFT2_UNKNOWN: Int = 0

val VFT2_DRV_PRINTER: Int = 1

val VFT2_DRV_KEYBOARD: Int = 2

val VFT2_DRV_LANGUAGE: Int = 3

val VFT2_DRV_DISPLAY: Int = 4

val VFT2_DRV_MOUSE: Int = 5

val VFT2_DRV_NETWORK: Int = 6

val VFT2_DRV_SYSTEM: Int = 7

val VFT2_DRV_INSTALLABLE: Int = 8

val VFT2_DRV_SOUND: Int = 9

val VFT2_DRV_COMM: Int = 10

val VFT2_DRV_INPUTMETHOD: Int = 11

val VFT2_DRV_VERSIONED_PRINTER: Int = 12

val VFT2_FONT_RASTER: Int = 1

val VFT2_FONT_VECTOR: Int = 2

val VFT2_FONT_TRUETYPE: Int = 3

val VFFF_ISSHAREDFILE: Int = 1

val VFF_CURNEDEST: Int = 1

val VFF_FILEINUSE: Int = 2

val VFF_BUFFTOOSMALL: Int = 4

val VIFF_FORCEINSTALL: Int = 1

val VIFF_DONTDELETEOLD: Int = 2

val VIF_TEMPFILE: Int = 1

val VIF_MISMATCH: Int = 2

val VIF_SRCOLD: Int = 4

val VIF_DIFFLANG: Int = 8

val VIF_DIFFCODEPG: Int = 16

val VIF_DIFFTYPE: Int = 32

val VIF_WRITEPROT: Int = 64

val VIF_FILEINUSE: Int = 128

val VIF_OUTOFSPACE: Int = 256

val VIF_ACCESSVIOLATION: Int = 512

val VIF_SHARINGVIOLATION: Int = 1024

val VIF_CANNOTCREATE: Int = 2048

val VIF_CANNOTDELETE: Int = 4096

val VIF_CANNOTRENAME: Int = 8192

val VIF_CANNOTDELETECUR: Int = 16384

val VIF_OUTOFMEMORY: Int = 32768

val VIF_CANNOTREADSRC: Int = 65536

val VIF_CANNOTREADDST: Int = 131072

val VIF_BUFFTOOSMALL: Int = 262144

val VIF_CANNOTLOADLZ32: Int = 524288

val VIF_CANNOTLOADCABINET: Int = 1048576

val RRF_RT_REG_NONE: Int = 1

val RRF_RT_REG_SZ: Int = 2

val RRF_RT_REG_EXPAND_SZ: Int = 4

val RRF_RT_REG_BINARY: Int = 8

val RRF_RT_REG_DWORD: Int = 16

val RRF_RT_REG_MULTI_SZ: Int = 32

val RRF_RT_REG_QWORD: Int = 64

val RRF_RT_DWORD: Int = 24

val RRF_RT_QWORD: Int = 72

val RRF_RT_ANY: Int = 65535

val RRF_NOEXPAND: Int = 268435456

val RRF_ZEROONFAILURE: Int = 536870912

val REG_SECURE_CONNECTION: Int = 1

val PROVIDER_KEEPS_VALUE_LENGTH: Int = 1

val REASON_SWINSTALL: Int = 196610

val REASON_HWINSTALL: Int = 65538

val REASON_SERVICEHANG: Int = 196613

val REASON_UNSTABLE: Int = 327686

val REASON_SWHWRECONF: Int = 196612

val REASON_OTHER: Int = 0

val REASON_UNKNOWN: Int = 255

val REASON_LEGACY_API: Int = -2147024896

val REASON_PLANNED_FLAG: Int = -2147483648

val MAX_SHUTDOWN_TIMEOUT: Int = 315360000

val RESOURCE_CONNECTED: Int = 1

val RESOURCE_GLOBALNET: Int = 2

val RESOURCE_REMEMBERED: Int = 3

val RESOURCE_RECENT: Int = 4

val RESOURCE_CONTEXT: Int = 5

val RESOURCETYPE_ANY: Int = 0

val RESOURCETYPE_DISK: Int = 1

val RESOURCETYPE_PRINT: Int = 2

val RESOURCETYPE_RESERVED: Int = 8

val RESOURCETYPE_UNKNOWN: Int = -1

val RESOURCEUSAGE_CONNECTABLE: Int = 1

val RESOURCEUSAGE_CONTAINER: Int = 2

val RESOURCEUSAGE_NOLOCALDEVICE: Int = 4

val RESOURCEUSAGE_SIBLING: Int = 8

val RESOURCEUSAGE_ATTACHED: Int = 16

val RESOURCEUSAGE_ALL: Int = 19

val RESOURCEUSAGE_RESERVED: Int = -2147483648

val RESOURCEDISPLAYTYPE_GENERIC: Int = 0

val RESOURCEDISPLAYTYPE_DOMAIN: Int = 1

val RESOURCEDISPLAYTYPE_SERVER: Int = 2

val RESOURCEDISPLAYTYPE_SHARE: Int = 3

val RESOURCEDISPLAYTYPE_FILE: Int = 4

val RESOURCEDISPLAYTYPE_GROUP: Int = 5

val RESOURCEDISPLAYTYPE_NETWORK: Int = 6

val RESOURCEDISPLAYTYPE_ROOT: Int = 7

val RESOURCEDISPLAYTYPE_SHAREADMIN: Int = 8

val RESOURCEDISPLAYTYPE_DIRECTORY: Int = 9

val RESOURCEDISPLAYTYPE_TREE: Int = 10

val RESOURCEDISPLAYTYPE_NDSCONTAINER: Int = 11

val NETPROPERTY_PERSISTENT: Int = 1

val CONNECT_UPDATE_PROFILE: Int = 1

val CONNECT_UPDATE_RECENT: Int = 2

val CONNECT_TEMPORARY: Int = 4

val CONNECT_INTERACTIVE: Int = 8

val CONNECT_PROMPT: Int = 16

val CONNECT_NEED_DRIVE: Int = 32

val CONNECT_REFCOUNT: Int = 64

val CONNECT_REDIRECT: Int = 128

val CONNECT_LOCALDRIVE: Int = 256

val CONNECT_CURRENT_MEDIA: Int = 512

val CONNECT_DEFERRED: Int = 1024

val CONNECT_RESERVED: Int = -16777216

val CONNECT_COMMANDLINE: Int = 2048

val CONNECT_CMD_SAVECRED: Int = 4096

val CONNDLG_RO_PATH: Int = 1

val CONNDLG_CONN_POINT: Int = 2

val CONNDLG_USE_MRU: Int = 4

val CONNDLG_HIDE_BOX: Int = 8

val CONNDLG_PERSIST: Int = 16

val CONNDLG_NOT_PERSIST: Int = 32

val DISC_UPDATE_PROFILE: Int = 1

val DISC_NO_FORCE: Int = 64

val UNIVERSAL_NAME_INFO_LEVEL: Int = 1

val REMOTE_NAME_INFO_LEVEL: Int = 2

val WNFMT_MULTILINE: Int = 1

val WNFMT_ABBREVIATED: Int = 2

val WNFMT_INENUM: Int = 16

val WNFMT_CONNECTION: Int = 32

val NETINFO_DLL16: Int = 1

val NETINFO_DISKRED: Int = 4

val NETINFO_PRINTERRED: Int = 8

val RP_LOGON: Int = 1

val RP_INIFILE: Int = 2

val PP_DISPLAYERRORS: Int = 1

val WN_SUCCESS: Int = 0

val WN_NO_ERROR: Int = 0

val WN_NOT_SUPPORTED: Int = 50

val WN_CANCEL: Int = 1223

val WN_RETRY: Int = 1237

val WN_NET_ERROR: Int = 59

val WN_MORE_DATA: Int = 234

val WN_BAD_POINTER: Int = 487

val WN_BAD_VALUE: Int = 87

val WN_BAD_USER: Int = 2202

val WN_BAD_PASSWORD: Int = 86

val WN_ACCESS_DENIED: Int = 5

val WN_FUNCTION_BUSY: Int = 170

val WN_WINDOWS_ERROR: Int = 59

val WN_OUT_OF_MEMORY: Int = 8

val WN_NO_NETWORK: Int = 1222

val WN_EXTENDED_ERROR: Int = 1208

val WN_BAD_LEVEL: Int = 124

val WN_BAD_HANDLE: Int = 6

val WN_NOT_INITIALIZING: Int = 1247

val WN_NO_MORE_DEVICES: Int = 1248

val WN_NOT_CONNECTED: Int = 2250

val WN_OPEN_FILES: Int = 2401

val WN_DEVICE_IN_USE: Int = 2404

val WN_BAD_NETNAME: Int = 67

val WN_BAD_LOCALNAME: Int = 1200

val WN_ALREADY_CONNECTED: Int = 85

val WN_DEVICE_ERROR: Int = 31

val WN_CONNECTION_CLOSED: Int = 1201

val WN_NO_NET_OR_BAD_PATH: Int = 1203

val WN_BAD_PROVIDER: Int = 1204

val WN_CANNOT_OPEN_PROFILE: Int = 1205

val WN_BAD_PROFILE: Int = 1206

val WN_BAD_DEV_TYPE: Int = 66

val WN_DEVICE_ALREADY_REMEMBERED: Int = 1202

val WN_CONNECTED_OTHER_PASSWORD: Int = 2108

val WN_CONNECTED_OTHER_PASSWORD_DEFAULT: Int = 2109

val WN_NO_MORE_ENTRIES: Int = 259

val WN_NOT_CONTAINER: Int = 1207

val WN_NOT_AUTHENTICATED: Int = 1244

val WN_NOT_LOGGED_ON: Int = 1245

val WN_NOT_VALIDATED: Int = 1311

val WNCON_FORNETCARD: Int = 1

val WNCON_NOTROUTED: Int = 2

val WNCON_SLOWLINK: Int = 4

val WNCON_DYNAMIC: Int = 8

val PERF_DATA_VERSION: Int = 1

val PERF_DATA_REVISION: Int = 1

val PERF_NO_INSTANCES: Int = -1

val PERF_SIZE_DWORD: Int = 0

val PERF_SIZE_LARGE: Int = 256

val PERF_SIZE_ZERO: Int = 512

val PERF_SIZE_VARIABLE_LEN: Int = 768

val PERF_TYPE_NUMBER: Int = 0

val PERF_TYPE_COUNTER: Int = 1024

val PERF_TYPE_TEXT: Int = 2048

val PERF_TYPE_ZERO: Int = 3072

val PERF_NUMBER_HEX: Int = 0

val PERF_NUMBER_DECIMAL: Int = 65536

val PERF_NUMBER_DEC_1000: Int = 131072

val PERF_COUNTER_VALUE: Int = 0

val PERF_COUNTER_RATE: Int = 65536

val PERF_COUNTER_FRACTION: Int = 131072

val PERF_COUNTER_BASE: Int = 196608

val PERF_COUNTER_ELAPSED: Int = 262144

val PERF_COUNTER_QUEUELEN: Int = 327680

val PERF_COUNTER_HISTOGRAM: Int = 393216

val PERF_COUNTER_PRECISION: Int = 458752

val PERF_TEXT_UNICODE: Int = 0

val PERF_TEXT_ASCII: Int = 65536

val PERF_TIMER_TICK: Int = 0

val PERF_TIMER_100NS: Int = 1048576

val PERF_OBJECT_TIMER: Int = 2097152

val PERF_DELTA_COUNTER: Int = 4194304

val PERF_DELTA_BASE: Int = 8388608

val PERF_INVERSE_COUNTER: Int = 16777216

val PERF_MULTI_COUNTER: Int = 33554432

val PERF_DISPLAY_NO_SUFFIX: Int = 0

val PERF_DISPLAY_PER_SEC: Int = 268435456

val PERF_DISPLAY_PERCENT: Int = 536870912

val PERF_DISPLAY_SECONDS: Int = 805306368

val PERF_DISPLAY_NOSHOW: Int = 1073741824

val PERF_COUNTER_COUNTER: Int = 272696320

val PERF_COUNTER_TIMER: Int = 541132032

val PERF_COUNTER_QUEUELEN_TYPE: Int = 4523008

val PERF_COUNTER_LARGE_QUEUELEN_TYPE: Int = 4523264

val PERF_COUNTER_100NS_QUEUELEN_TYPE: Int = 5571840

val PERF_COUNTER_OBJ_TIME_QUEUELEN_TYPE: Int = 6620416

val PERF_COUNTER_BULK_COUNT: Int = 272696576

val PERF_COUNTER_TEXT: Int = 2816

val PERF_COUNTER_RAWCOUNT: Int = 65536

val PERF_COUNTER_LARGE_RAWCOUNT: Int = 65792

val PERF_COUNTER_RAWCOUNT_HEX: Int = 0

val PERF_COUNTER_LARGE_RAWCOUNT_HEX: Int = 256

val PERF_SAMPLE_FRACTION: Int = 549585920

val PERF_SAMPLE_COUNTER: Int = 4260864

val PERF_COUNTER_NODATA: Int = 1073742336

val PERF_COUNTER_TIMER_INV: Int = 557909248

val PERF_SAMPLE_BASE: Int = 1073939457

val PERF_AVERAGE_TIMER: Int = 805438464

val PERF_AVERAGE_BASE: Int = 1073939458

val PERF_AVERAGE_BULK: Int = 1073874176

val PERF_OBJ_TIME_TIMER: Int = 543229184

val PERF_100NSEC_TIMER: Int = 542180608

val PERF_100NSEC_TIMER_INV: Int = 558957824

val PERF_COUNTER_MULTI_TIMER: Int = 574686464

val PERF_COUNTER_MULTI_TIMER_INV: Int = 591463680

val PERF_COUNTER_MULTI_BASE: Int = 1107494144

val PERF_100NSEC_MULTI_TIMER: Int = 575735040

val PERF_100NSEC_MULTI_TIMER_INV: Int = 592512256

val PERF_RAW_FRACTION: Int = 537003008

val PERF_LARGE_RAW_FRACTION: Int = 537003264

val PERF_RAW_BASE: Int = 1073939459

val PERF_LARGE_RAW_BASE: Int = 1073939712

val PERF_ELAPSED_TIME: Int = 807666944

val PERF_COUNTER_HISTOGRAM_TYPE: Int = -2147483648

val PERF_COUNTER_DELTA: Int = 4195328

val PERF_COUNTER_LARGE_DELTA: Int = 4195584

val PERF_PRECISION_SYSTEM_TIMER: Int = 541525248

val PERF_PRECISION_100NS_TIMER: Int = 542573824

val PERF_PRECISION_OBJECT_TIMER: Int = 543622400

val PERF_PRECISION_TIMESTAMP: Int = 1073939712

val PERF_DETAIL_NOVICE: Int = 100

val PERF_DETAIL_ADVANCED: Int = 200

val PERF_DETAIL_EXPERT: Int = 300

val PERF_DETAIL_WIZARD: Int = 400

val PERF_NO_UNIQUE_ID: Int = -1

val PERF_QUERY_OBJECTS: LONG = -2147483648

val PERF_QUERY_GLOBAL: LONG = -2147483647

val PERF_QUERY_COSTLY: LONG = -2147483646

val MAX_PERF_OBJECTS_IN_QUERY_FUNCTION: Int = 64

val WINPERF_LOG_NONE: Int = 0

val WINPERF_LOG_USER: Int = 1

val WINPERF_LOG_DEBUG: Int = 2

val WINPERF_LOG_VERBOSE: Int = 3

val IOCPARM_MASK: Int = 127

val IOC_VOID: Int = 536870912

val IOC_OUT: Int = 1073741824

val IOC_IN: Int = -2147483648

val IOC_INOUT: Int = -1073741824

val FIONREAD: Int = 1074030207

val FIONBIO: Int = -2147195266

val FIOASYNC: Int = -2147195267

val SIOCSHIWAT: Int = -2147192064

val SIOCGHIWAT: Int = 1074033409

val SIOCSLOWAT: Int = -2147192062

val SIOCGLOWAT: Int = 1074033411

val SIOCATMARK: Int = 1074033415

val IPPROTO_IP: Int = 0

val IPPROTO_ICMP: Int = 1

val IPPROTO_IGMP: Int = 2

val IPPROTO_GGP: Int = 3

val IPPROTO_TCP: Int = 6

val IPPROTO_PUP: Int = 12

val IPPROTO_UDP: Int = 17

val IPPROTO_IDP: Int = 22

val IPPROTO_ND: Int = 77

val IPPROTO_RAW: Int = 255

val IPPROTO_MAX: Int = 256

val IPPORT_ECHO: Int = 7

val IPPORT_DISCARD: Int = 9

val IPPORT_SYSTAT: Int = 11

val IPPORT_DAYTIME: Int = 13

val IPPORT_NETSTAT: Int = 15

val IPPORT_FTP: Int = 21

val IPPORT_TELNET: Int = 23

val IPPORT_SMTP: Int = 25

val IPPORT_TIMESERVER: Int = 37

val IPPORT_NAMESERVER: Int = 42

val IPPORT_WHOIS: Int = 43

val IPPORT_MTP: Int = 57

val IPPORT_TFTP: Int = 69

val IPPORT_RJE: Int = 77

val IPPORT_FINGER: Int = 79

val IPPORT_TTYLINK: Int = 87

val IPPORT_SUPDUP: Int = 95

val IPPORT_EXECSERVER: Int = 512

val IPPORT_LOGINSERVER: Int = 513

val IPPORT_CMDSERVER: Int = 514

val IPPORT_EFSSERVER: Int = 520

val IPPORT_BIFFUDP: Int = 512

val IPPORT_WHOSERVER: Int = 513

val IPPORT_ROUTESERVER: Int = 520

val IPPORT_RESERVED: Int = 1024

val IMPLINK_IP: Int = 155

val IMPLINK_LOWEXPER: Int = 156

val IMPLINK_HIGHEXPER: Int = 158

val IN_CLASSA_NET: Int = -16777216

val IN_CLASSA_NSHIFT: Int = 24

val IN_CLASSA_HOST: Int = 16777215

val IN_CLASSA_MAX: Int = 128

val IN_CLASSB_NET: Int = -65536

val IN_CLASSB_NSHIFT: Int = 16

val IN_CLASSB_HOST: Int = 65535

val IN_CLASSB_MAX: Int = 65536

val IN_CLASSC_NET: Int = -256

val IN_CLASSC_NSHIFT: Int = 8

val IN_CLASSC_HOST: Int = 255

val INADDR_ANY: u_long = 0

val INADDR_LOOPBACK: Int = 2130706433

val INADDR_BROADCAST: u_long = -1

val INADDR_NONE: Int = -1

val IP_OPTIONS: Int = 1

val IP_MULTICAST_IF: Int = 2

val IP_MULTICAST_TTL: Int = 3

val IP_MULTICAST_LOOP: Int = 4

val IP_ADD_MEMBERSHIP: Int = 5

val IP_DROP_MEMBERSHIP: Int = 6

val IP_TTL: Int = 7

val IP_TOS: Int = 8

val IP_DONTFRAGMENT: Int = 9

val IP_DEFAULT_MULTICAST_TTL: Int = 1

val IP_DEFAULT_MULTICAST_LOOP: Int = 1

val IP_MAX_MEMBERSHIPS: Int = 20

val SOCK_STREAM: Int = 1

val SOCK_DGRAM: Int = 2

val SOCK_RAW: Int = 3

val SOCK_RDM: Int = 4

val SOCK_SEQPACKET: Int = 5

val SO_DEBUG: Int = 1

val SO_ACCEPTCONN: Int = 2

val SO_REUSEADDR: Int = 4

val SO_KEEPALIVE: Int = 8

val SO_DONTROUTE: Int = 16

val SO_BROADCAST: Int = 32

val SO_USELOOPBACK: Int = 64

val SO_LINGER: Int = 128

val SO_OOBINLINE: Int = 256

val SO_DONTLINGER: u_int = -129

val SO_SNDBUF: Int = 4097

val SO_RCVBUF: Int = 4098

val SO_SNDLOWAT: Int = 4099

val SO_RCVLOWAT: Int = 4100

val SO_SNDTIMEO: Int = 4101

val SO_RCVTIMEO: Int = 4102

val SO_ERROR: Int = 4103

val SO_TYPE: Int = 4104

val SO_CONNDATA: Int = 28672

val SO_CONNOPT: Int = 28673

val SO_DISCDATA: Int = 28674

val SO_DISCOPT: Int = 28675

val SO_CONNDATALEN: Int = 28676

val SO_CONNOPTLEN: Int = 28677

val SO_DISCDATALEN: Int = 28678

val SO_DISCOPTLEN: Int = 28679

val SO_OPENTYPE: Int = 28680

val SO_SYNCHRONOUS_ALERT: Int = 16

val SO_SYNCHRONOUS_NONALERT: Int = 32

val SO_MAXDG: Int = 28681

val SO_MAXPATHDG: Int = 28682

val SO_UPDATE_ACCEPT_CONTEXT: Int = 28683

val SO_CONNECT_TIME: Int = 28684

val TCP_NODELAY: Int = 1

val TCP_BSDURGENT: Int = 28672

val AF_UNSPEC: Int = 0

val AF_UNIX: Int = 1

val AF_INET: Int = 2

val AF_IMPLINK: Int = 3

val AF_PUP: Int = 4

val AF_CHAOS: Int = 5

val AF_IPX: Int = 6

val AF_NS: Int = 6

val AF_ISO: Int = 7

val AF_OSI: Int = 7

val AF_ECMA: Int = 8

val AF_DATAKIT: Int = 9

val AF_CCITT: Int = 10

val AF_SNA: Int = 11

val AF_DECnet: Int = 12

val AF_DLI: Int = 13

val AF_LAT: Int = 14

val AF_HYLINK: Int = 15

val AF_APPLETALK: Int = 16

val AF_NETBIOS: Int = 17

val AF_VOICEVIEW: Int = 18

val AF_FIREFOX: Int = 19

val AF_UNKNOWN1: Int = 20

val AF_BAN: Int = 21

val AF_MAX: Int = 22

val PF_UNSPEC: Int = 0

val PF_UNIX: Int = 1

val PF_INET: Int = 2

val PF_IMPLINK: Int = 3

val PF_PUP: Int = 4

val PF_CHAOS: Int = 5

val PF_NS: Int = 6

val PF_IPX: Int = 6

val PF_ISO: Int = 7

val PF_OSI: Int = 7

val PF_ECMA: Int = 8

val PF_DATAKIT: Int = 9

val PF_CCITT: Int = 10

val PF_SNA: Int = 11

val PF_DECnet: Int = 12

val PF_DLI: Int = 13

val PF_LAT: Int = 14

val PF_HYLINK: Int = 15

val PF_APPLETALK: Int = 16

val PF_VOICEVIEW: Int = 18

val PF_FIREFOX: Int = 19

val PF_UNKNOWN1: Int = 20

val PF_BAN: Int = 21

val PF_MAX: Int = 22

val SOL_SOCKET: Int = 65535

val SOMAXCONN: Int = 5

val MSG_OOB: Int = 1

val MSG_PEEK: Int = 2

val MSG_DONTROUTE: Int = 4

val MSG_MAXIOVLEN: Int = 16

val MSG_PARTIAL: Int = 32768

val MAXGETHOSTSTRUCT: Int = 1024

val FD_READ: Int = 1

val FD_WRITE: Int = 2

val FD_OOB: Int = 4

val FD_ACCEPT: Int = 8

val FD_CONNECT: Int = 16

val FD_CLOSE: Int = 32

val TF_DISCONNECT: Int = 1

val TF_REUSE_SOCKET: Int = 2

val TF_WRITE_BEHIND: Int = 4

val ALG_CLASS_ANY: Int = 0

val ALG_CLASS_SIGNATURE: Int = 8192

val ALG_CLASS_MSG_ENCRYPT: Int = 16384

val ALG_CLASS_DATA_ENCRYPT: Int = 24576

val ALG_CLASS_HASH: Int = 32768

val ALG_CLASS_KEY_EXCHANGE: Int = 40960

val ALG_CLASS_ALL: Int = 57344

val ALG_TYPE_ANY: Int = 0

val ALG_TYPE_DSS: Int = 512

val ALG_TYPE_RSA: Int = 1024

val ALG_TYPE_BLOCK: Int = 1536

val ALG_TYPE_STREAM: Int = 2048

val ALG_TYPE_DH: Int = 2560

val ALG_TYPE_SECURECHANNEL: Int = 3072

val ALG_SID_ANY: Int = 0

val ALG_SID_RSA_ANY: Int = 0

val ALG_SID_RSA_PKCS: Int = 1

val ALG_SID_RSA_MSATWORK: Int = 2

val ALG_SID_RSA_ENTRUST: Int = 3

val ALG_SID_RSA_PGP: Int = 4

val ALG_SID_DSS_ANY: Int = 0

val ALG_SID_DSS_PKCS: Int = 1

val ALG_SID_DSS_DMS: Int = 2

val ALG_SID_DES: Int = 1

val ALG_SID_3DES: Int = 3

val ALG_SID_DESX: Int = 4

val ALG_SID_IDEA: Int = 5

val ALG_SID_CAST: Int = 6

val ALG_SID_SAFERSK64: Int = 7

val ALG_SID_SAFERSK128: Int = 8

val ALG_SID_3DES_112: Int = 9

val ALG_SID_SKIPJACK: Int = 10

val ALG_SID_TEK: Int = 11

val ALG_SID_CYLINK_MEK: Int = 12

val ALG_SID_RC5: Int = 13

val ALG_SID_AES_128: Int = 14

val ALG_SID_AES_192: Int = 15

val ALG_SID_AES_256: Int = 16

val ALG_SID_AES: Int = 17

val CRYPT_MODE_CBCI: Int = 6

val CRYPT_MODE_CFBP: Int = 7

val CRYPT_MODE_OFBP: Int = 8

val CRYPT_MODE_CBCOFM: Int = 9

val CRYPT_MODE_CBCOFMI: Int = 10

val ALG_SID_RC2: Int = 2

val ALG_SID_RC4: Int = 1

val ALG_SID_SEAL: Int = 2

val ALG_SID_DH_SANDF: Int = 1

val ALG_SID_DH_EPHEM: Int = 2

val ALG_SID_AGREED_KEY_ANY: Int = 3

val ALG_SID_KEA: Int = 4

val ALG_SID_MD2: Int = 1

val ALG_SID_MD4: Int = 2

val ALG_SID_MD5: Int = 3

val ALG_SID_SHA: Int = 4

val ALG_SID_SHA1: Int = 4

val ALG_SID_MAC: Int = 5

val ALG_SID_RIPEMD: Int = 6

val ALG_SID_RIPEMD160: Int = 7

val ALG_SID_SSL3SHAMD5: Int = 8

val ALG_SID_HMAC: Int = 9

val ALG_SID_TLS1PRF: Int = 10

val ALG_SID_HASH_REPLACE_OWF: Int = 11

val ALG_SID_SHA_256: Int = 12

val ALG_SID_SHA_384: Int = 13

val ALG_SID_SHA_512: Int = 14

val ALG_SID_SSL3_MASTER: Int = 1

val ALG_SID_SCHANNEL_MASTER_HASH: Int = 2

val ALG_SID_SCHANNEL_MAC_KEY: Int = 3

val ALG_SID_PCT1_MASTER: Int = 4

val ALG_SID_SSL2_MASTER: Int = 5

val ALG_SID_TLS1_MASTER: Int = 6

val ALG_SID_SCHANNEL_ENC_KEY: Int = 7

val ALG_SID_EXAMPLE: Int = 80

val CALG_MD2: Int = 32769

val CALG_MD4: Int = 32770

val CALG_MD5: Int = 32771

val CALG_SHA: Int = 32772

val CALG_SHA1: Int = 32772

val CALG_MAC: Int = 32773

val CALG_RSA_SIGN: Int = 9216

val CALG_DSS_SIGN: Int = 8704

val CALG_NO_SIGN: Int = 8192

val CALG_RSA_KEYX: Int = 41984

val CALG_DES: Int = 26113

val CALG_3DES_112: Int = 26121

val CALG_3DES: Int = 26115

val CALG_DESX: Int = 26116

val CALG_RC2: Int = 26114

val CALG_RC4: Int = 26625

val CALG_SEAL: Int = 26626

val CALG_DH_SF: Int = 43521

val CALG_DH_EPHEM: Int = 43522

val CALG_AGREEDKEY_ANY: Int = 43523

val CALG_KEA_KEYX: Int = 43524

val CALG_HUGHES_MD5: Int = 40963

val CALG_SKIPJACK: Int = 26122

val CALG_TEK: Int = 26123

val CALG_CYLINK_MEK: Int = 26124

val CALG_SSL3_SHAMD5: Int = 32776

val CALG_SSL3_MASTER: Int = 19457

val CALG_SCHANNEL_MASTER_HASH: Int = 19458

val CALG_SCHANNEL_MAC_KEY: Int = 19459

val CALG_SCHANNEL_ENC_KEY: Int = 19463

val CALG_PCT1_MASTER: Int = 19460

val CALG_SSL2_MASTER: Int = 19461

val CALG_TLS1_MASTER: Int = 19462

val CALG_RC5: Int = 26125

val CALG_HMAC: Int = 32777

val CALG_TLS1PRF: Int = 32778

val CALG_HASH_REPLACE_OWF: Int = 32779

val CALG_AES_128: Int = 26126

val CALG_AES_192: Int = 26127

val CALG_AES_256: Int = 26128

val CALG_AES: Int = 26129

val CALG_SHA_256: Int = 32780

val CALG_SHA_384: Int = 32781

val CALG_SHA_512: Int = 32782

val CRYPT_VERIFYCONTEXT: Int = -268435456

val CRYPT_NEWKEYSET: Int = 8

val CRYPT_DELETEKEYSET: Int = 16

val CRYPT_MACHINE_KEYSET: Int = 32

val CRYPT_SILENT: Int = 64

val CRYPT_EXPORTABLE: Int = 1

val CRYPT_USER_PROTECTED: Int = 2

val CRYPT_CREATE_SALT: Int = 4

val CRYPT_UPDATE_KEY: Int = 8

val CRYPT_NO_SALT: Int = 16

val CRYPT_PREGEN: Int = 64

val CRYPT_RECIPIENT: Int = 16

val CRYPT_INITIATOR: Int = 64

val CRYPT_ONLINE: Int = 128

val CRYPT_SF: Int = 256

val CRYPT_CREATE_IV: Int = 512

val CRYPT_KEK: Int = 1024

val CRYPT_DATA_KEY: Int = 2048

val CRYPT_VOLATILE: Int = 4096

val CRYPT_SGCKEY: Int = 8192

val CRYPT_ARCHIVABLE: Int = 16384

val CRYPT_USER_PROTECTED_STRONG: Int = 1048576

val RSA1024BIT_KEY: Int = 67108864

val CRYPT_SERVER: Int = 1024

val KEY_LENGTH_MASK: Int = -65536

val CRYPT_Y_ONLY: Int = 1

val CRYPT_SSL2_FALLBACK: Int = 2

val CRYPT_DESTROYKEY: Int = 4

val CRYPT_DECRYPT_RSA_NO_PADDING_CHECK: Int = 32

val CRYPT_OAEP: Int = 64

val CRYPT_BLOB_VER3: Int = 128

val CRYPT_IPSEC_HMAC_KEY: Int = 256

val CRYPT_SECRETDIGEST: Int = 1

val CRYPT_OWF_REPL_LM_HASH: Int = 1

val CRYPT_LITTLE_ENDIAN: Int = 1

val CRYPT_NOHASHOID: Int = 1

val CRYPT_TYPE2_FORMAT: Int = 2

val CRYPT_X931_FORMAT: Int = 4

val CRYPT_MACHINE_DEFAULT: Int = 1

val CRYPT_USER_DEFAULT: Int = 2

val CRYPT_DELETE_DEFAULT: Int = 4

val SIMPLEBLOB: Int = 1

val PUBLICKEYBLOB: Int = 6

val PRIVATEKEYBLOB: Int = 7

val PLAINTEXTKEYBLOB: Int = 8

val OPAQUEKEYBLOB: Int = 9

val PUBLICKEYBLOBEX: Int = 10

val SYMMETRICWRAPKEYBLOB: Int = 11

val KEYSTATEBLOB: Int = 12

val AT_KEYEXCHANGE: Int = 1

val AT_SIGNATURE: Int = 2

val CRYPT_USERDATA: Int = 1

val KP_IV: Int = 1

val KP_SALT: Int = 2

val KP_PADDING: Int = 3

val KP_MODE: Int = 4

val KP_MODE_BITS: Int = 5

val KP_PERMISSIONS: Int = 6

val KP_ALGID: Int = 7

val KP_BLOCKLEN: Int = 8

val KP_KEYLEN: Int = 9

val KP_SALT_EX: Int = 10

val KP_P: Int = 11

val KP_G: Int = 12

val KP_Q: Int = 13

val KP_X: Int = 14

val KP_Y: Int = 15

val KP_RA: Int = 16

val KP_RB: Int = 17

val KP_INFO: Int = 18

val KP_EFFECTIVE_KEYLEN: Int = 19

val KP_SCHANNEL_ALG: Int = 20

val KP_CLIENT_RANDOM: Int = 21

val KP_SERVER_RANDOM: Int = 22

val KP_RP: Int = 23

val KP_PRECOMP_MD5: Int = 24

val KP_PRECOMP_SHA: Int = 25

val KP_CERTIFICATE: Int = 26

val KP_CLEAR_KEY: Int = 27

val KP_PUB_EX_LEN: Int = 28

val KP_PUB_EX_VAL: Int = 29

val KP_KEYVAL: Int = 30

val KP_ADMIN_PIN: Int = 31

val KP_KEYEXCHANGE_PIN: Int = 32

val KP_SIGNATURE_PIN: Int = 33

val KP_PREHASH: Int = 34

val KP_ROUNDS: Int = 35

val KP_OAEP_PARAMS: Int = 36

val KP_CMS_KEY_INFO: Int = 37

val KP_CMS_DH_KEY_INFO: Int = 38

val KP_PUB_PARAMS: Int = 39

val KP_VERIFY_PARAMS: Int = 40

val KP_HIGHEST_VERSION: Int = 41

val KP_GET_USE_COUNT: Int = 42

val KP_PIN_ID: Int = 43

val KP_PIN_INFO: Int = 44

val PKCS5_PADDING: Int = 1

val RANDOM_PADDING: Int = 2

val ZERO_PADDING: Int = 3

val CRYPT_MODE_CBC: Int = 1

val CRYPT_MODE_ECB: Int = 2

val CRYPT_MODE_OFB: Int = 3

val CRYPT_MODE_CFB: Int = 4

val CRYPT_MODE_CTS: Int = 5

val CRYPT_ENCRYPT: Int = 1

val CRYPT_DECRYPT: Int = 2

val CRYPT_EXPORT: Int = 4

val CRYPT_READ: Int = 8

val CRYPT_WRITE: Int = 16

val CRYPT_MAC: Int = 32

val CRYPT_EXPORT_KEY: Int = 64

val CRYPT_IMPORT_KEY: Int = 128

val CRYPT_ARCHIVE: Int = 256

val HP_ALGID: Int = 1

val HP_HASHVAL: Int = 2

val HP_HASHSIZE: Int = 4

val HP_HMAC_INFO: Int = 5

val HP_TLS1PRF_LABEL: Int = 6

val HP_TLS1PRF_SEED: Int = 7

val CRYPT_FAILED: Int = 0

val CRYPT_SUCCEED: Int = 1

val PP_ENUMALGS: Int = 1

val PP_ENUMCONTAINERS: Int = 2

val PP_IMPTYPE: Int = 3

val PP_NAME: Int = 4

val PP_VERSION: Int = 5

val PP_CONTAINER: Int = 6

val PP_CHANGE_PASSWORD: Int = 7

val PP_KEYSET_SEC_DESCR: Int = 8

val PP_CERTCHAIN: Int = 9

val PP_KEY_TYPE_SUBTYPE: Int = 10

val PP_PROVTYPE: Int = 16

val PP_KEYSTORAGE: Int = 17

val PP_APPLI_CERT: Int = 18

val PP_SYM_KEYSIZE: Int = 19

val PP_SESSION_KEYSIZE: Int = 20

val PP_UI_PROMPT: Int = 21

val PP_ENUMALGS_EX: Int = 22

val PP_ENUMMANDROOTS: Int = 25

val PP_ENUMELECTROOTS: Int = 26

val PP_KEYSET_TYPE: Int = 27

val PP_ADMIN_PIN: Int = 31

val PP_KEYEXCHANGE_PIN: Int = 32

val PP_SIGNATURE_PIN: Int = 33

val PP_SIG_KEYSIZE_INC: Int = 34

val PP_KEYX_KEYSIZE_INC: Int = 35

val PP_UNIQUE_CONTAINER: Int = 36

val PP_SGC_INFO: Int = 37

val PP_USE_HARDWARE_RNG: Int = 38

val PP_KEYSPEC: Int = 39

val PP_ENUMEX_SIGNING_PROT: Int = 40

val PP_CRYPT_COUNT_KEY_USE: Int = 41

val CRYPT_FIRST: Int = 1

val CRYPT_NEXT: Int = 2

val CRYPT_SGC_ENUM: Int = 4

val CRYPT_IMPL_HARDWARE: Int = 1

val CRYPT_IMPL_SOFTWARE: Int = 2

val CRYPT_IMPL_MIXED: Int = 3

val CRYPT_IMPL_UNKNOWN: Int = 4

val CRYPT_IMPL_REMOVABLE: Int = 8

val CRYPT_SEC_DESCR: Int = 1

val CRYPT_PSTORE: Int = 2

val CRYPT_UI_PROMPT: Int = 4

val CRYPT_FLAG_PCT1: Int = 1

val CRYPT_FLAG_SSL2: Int = 2

val CRYPT_FLAG_SSL3: Int = 4

val CRYPT_FLAG_TLS1: Int = 8

val CRYPT_FLAG_IPSEC: Int = 16

val CRYPT_FLAG_SIGNING: Int = 32

val CRYPT_SGC: Int = 1

val CRYPT_FASTSGC: Int = 2

val PP_CLIENT_HWND: Int = 1

val PP_CONTEXT_INFO: Int = 11

val PP_KEYEXCHANGE_KEYSIZE: Int = 12

val PP_SIGNATURE_KEYSIZE: Int = 13

val PP_KEYEXCHANGE_ALG: Int = 14

val PP_SIGNATURE_ALG: Int = 15

val PP_DELETEKEY: Int = 24

val PROV_RSA_FULL: Int = 1

val PROV_RSA_SIG: Int = 2

val PROV_DSS: Int = 3

val PROV_FORTEZZA: Int = 4

val PROV_MS_EXCHANGE: Int = 5

val PROV_SSL: Int = 6

val PROV_STT_MER: Int = 7

val PROV_STT_ACQ: Int = 8

val PROV_STT_BRND: Int = 9

val PROV_STT_ROOT: Int = 10

val PROV_STT_ISS: Int = 11

val PROV_RSA_SCHANNEL: Int = 12

val PROV_DSS_DH: Int = 13

val PROV_EC_ECDSA_SIG: Int = 14

val PROV_EC_ECNRA_SIG: Int = 15

val PROV_EC_ECDSA_FULL: Int = 16

val PROV_EC_ECNRA_FULL: Int = 17

val PROV_DH_SCHANNEL: Int = 18

val PROV_SPYRUS_LYNKS: Int = 20

val PROV_RNG: Int = 21

val PROV_INTEL_SEC: Int = 22

val PROV_REPLACE_OWF: Int = 23

val PROV_RSA_AES: Int = 24

val MAXUIDLEN: Int = 64

val cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT: Int = 20

val cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT: Int = 86400

val CUR_BLOB_VERSION: Int = 2

val SCHANNEL_MAC_KEY: Int = 0

val SCHANNEL_ENC_KEY: Int = 1

val INTERNATIONAL_USAGE: Int = 1

val CERT_RDN_ANY_TYPE: Int = 0

val CERT_RDN_ENCODED_BLOB: Int = 1

val CERT_RDN_OCTET_STRING: Int = 2

val CERT_RDN_NUMERIC_STRING: Int = 3

val CERT_RDN_PRINTABLE_STRING: Int = 4

val CERT_RDN_TELETEX_STRING: Int = 5

val CERT_RDN_T61_STRING: Int = 5

val CERT_RDN_VIDEOTEX_STRING: Int = 6

val CERT_RDN_IA5_STRING: Int = 7

val CERT_RDN_GRAPHIC_STRING: Int = 8

val CERT_RDN_VISIBLE_STRING: Int = 9

val CERT_RDN_ISO646_STRING: Int = 9

val CERT_RDN_GENERAL_STRING: Int = 10

val CERT_RDN_UNIVERSAL_STRING: Int = 11

val CERT_RDN_INT4_STRING: Int = 11

val CERT_RDN_BMP_STRING: Int = 12

val CERT_RDN_UNICODE_STRING: Int = 12

val CERT_RDN_UTF8_STRING: Int = 13

val CERT_RDN_TYPE_MASK: Int = 255

val CERT_RDN_FLAGS_MASK: Int = -16777216

val CERT_RDN_ENABLE_T61_UNICODE_FLAG: Int = -2147483648

val CERT_RDN_ENABLE_UTF8_UNICODE_FLAG: Int = 536870912

val CERT_RDN_FORCE_UTF8_UNICODE_FLAG: Int = 268435456

val CERT_RDN_DISABLE_CHECK_TYPE_FLAG: Int = 1073741824

val CERT_RDN_DISABLE_IE4_UTF8_FLAG: Int = 16777216

val CERT_RDN_ENABLE_PUNYCODE_FLAG: Int = 33554432

val CRYPT_ECC_PRIVATE_KEY_INFO_v1: Int = 1

val CERT_V1: Int = 0

val CERT_V2: Int = 1

val CERT_V3: Int = 2

val CERT_INFO_VERSION_FLAG: Int = 1

val CERT_INFO_SERIAL_NUMBER_FLAG: Int = 2

val CERT_INFO_SIGNATURE_ALGORITHM_FLAG: Int = 3

val CERT_INFO_ISSUER_FLAG: Int = 4

val CERT_INFO_NOT_BEFORE_FLAG: Int = 5

val CERT_INFO_NOT_AFTER_FLAG: Int = 6

val CERT_INFO_SUBJECT_FLAG: Int = 7

val CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG: Int = 8

val CERT_INFO_ISSUER_UNIQUE_ID_FLAG: Int = 9

val CERT_INFO_SUBJECT_UNIQUE_ID_FLAG: Int = 10

val CERT_INFO_EXTENSION_FLAG: Int = 11

val CRL_V1: Int = 0

val CRL_V2: Int = 1

val CERT_BUNDLE_CERTIFICATE: Int = 0

val CERT_BUNDLE_CRL: Int = 1

val CERT_REQUEST_V1: Int = 0

val CERT_KEYGEN_REQUEST_V1: Int = 0

val CTL_V1: Int = 0

val CERT_ENCODING_TYPE_MASK: Int = 65535

val CMSG_ENCODING_TYPE_MASK: Int = -65536

val CRYPT_ASN_ENCODING: Int = 1

val CRYPT_NDR_ENCODING: Int = 2

val X509_ASN_ENCODING: Int = 1

val X509_NDR_ENCODING: Int = 2

val PKCS_7_ASN_ENCODING: Int = 65536

val PKCS_7_NDR_ENCODING: Int = 131072

val CRYPT_FORMAT_STR_MULTI_LINE: Int = 1

val CRYPT_FORMAT_STR_NO_HEX: Int = 16

val CRYPT_FORMAT_SIMPLE: Int = 1

val CRYPT_FORMAT_X509: Int = 2

val CRYPT_FORMAT_OID: Int = 4

val CRYPT_FORMAT_RDN_SEMICOLON: Int = 256

val CRYPT_FORMAT_RDN_CRLF: Int = 512

val CRYPT_FORMAT_RDN_UNQUOTE: Int = 1024

val CRYPT_FORMAT_RDN_REVERSE: Int = 2048

val CRYPT_FORMAT_COMMA: Int = 4096

val CRYPT_FORMAT_SEMICOLON: Int = 256

val CRYPT_FORMAT_CRLF: Int = 512

val CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG: Int = 8

val CRYPT_ENCODE_ALLOC_FLAG: Int = 32768

val CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG: Int = -2147483648

val CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG: Int = 536870912

val CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG: Int = 268435456

val CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG: Int = 1073741824

val CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG: Int = 65536

val CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG: Int = 131072

val CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG: Int = 262144

val CRYPT_ENCODE_ENABLE_IA5CONVERSION_FLAG: Int = 393216

val CRYPT_DECODE_NOCOPY_FLAG: Int = 1

val CRYPT_DECODE_TO_BE_SIGNED_FLAG: Int = 2

val CRYPT_DECODE_SHARE_OID_STRING_FLAG: Int = 4

val CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG: Int = 8

val CRYPT_DECODE_ALLOC_FLAG: Int = 32768

val CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG: Int = 16777216

val CRYPT_DECODE_ENABLE_PUNYCODE_FLAG: Int = 33554432

val CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG: Int = 67108864

val CRYPT_DECODE_ENABLE_IA5CONVERSION_FLAG: Int = 100663296

val CRYPT_ENCODE_DECODE_NONE: Int = 0

val CERT_ROOT_PROGRAM_FLAG_ORG: Int = 128

val CERT_ROOT_PROGRAM_FLAG_LSC: Int = 64

val CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO: Int = 32

val CERT_ROOT_PROGRAM_FLAG_OU: Int = 16

val CERT_ROOT_PROGRAM_FLAG_ADDRESS: Int = 8

val CERT_UNICODE_RDN_ERR_INDEX_MASK: Int = 1023

val CERT_UNICODE_RDN_ERR_INDEX_SHIFT: Int = 22

val CERT_UNICODE_ATTR_ERR_INDEX_MASK: Int = 63

val CERT_UNICODE_ATTR_ERR_INDEX_SHIFT: Int = 16

val CERT_UNICODE_VALUE_ERR_INDEX_MASK: Int = 65535

val CERT_UNICODE_VALUE_ERR_INDEX_SHIFT: Int = 0

val CERT_ENCIPHER_ONLY_KEY_USAGE: Int = 1

val CERT_OFFLINE_CRL_SIGN_KEY_USAGE: Int = 2

val CERT_KEY_CERT_SIGN_KEY_USAGE: Int = 4

val CERT_KEY_AGREEMENT_KEY_USAGE: Int = 8

val CERT_DATA_ENCIPHERMENT_KEY_USAGE: Int = 16

val CERT_KEY_ENCIPHERMENT_KEY_USAGE: Int = 32

val CERT_NON_REPUDIATION_KEY_USAGE: Int = 64

val CERT_DIGITAL_SIGNATURE_KEY_USAGE: Int = 128

val CERT_DECIPHER_ONLY_KEY_USAGE: Int = 128

val CERT_ALT_NAME_OTHER_NAME: Int = 1

val CERT_ALT_NAME_RFC822_NAME: Int = 2

val CERT_ALT_NAME_DNS_NAME: Int = 3

val CERT_ALT_NAME_X400_ADDRESS: Int = 4

val CERT_ALT_NAME_DIRECTORY_NAME: Int = 5

val CERT_ALT_NAME_EDI_PARTY_NAME: Int = 6

val CERT_ALT_NAME_URL: Int = 7

val CERT_ALT_NAME_IP_ADDRESS: Int = 8

val CERT_ALT_NAME_REGISTERED_ID: Int = 9

val CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK: Int = 255

val CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT: Int = 16

val CERT_ALT_NAME_VALUE_ERR_INDEX_MASK: Int = 65535

val CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT: Int = 0

val CERT_CA_SUBJECT_FLAG: Int = 128

val CERT_END_ENTITY_SUBJECT_FLAG: Int = 64

val CRL_REASON_UNSPECIFIED: Int = 0

val CRL_REASON_KEY_COMPROMISE: Int = 1

val CRL_REASON_CA_COMPROMISE: Int = 2

val CRL_REASON_AFFILIATION_CHANGED: Int = 3

val CRL_REASON_SUPERSEDED: Int = 4

val CRL_REASON_CESSATION_OF_OPERATION: Int = 5

val CRL_REASON_CERTIFICATE_HOLD: Int = 6

val CRL_REASON_REMOVE_FROM_CRL: Int = 8

val CRL_DIST_POINT_NO_NAME: Int = 0

val CRL_DIST_POINT_FULL_NAME: Int = 1

val CRL_DIST_POINT_ISSUER_RDN_NAME: Int = 2

val CRL_REASON_UNUSED_FLAG: Int = 128

val CRL_REASON_KEY_COMPROMISE_FLAG: Int = 64

val CRL_REASON_CA_COMPROMISE_FLAG: Int = 32

val CRL_REASON_AFFILIATION_CHANGED_FLAG: Int = 16

val CRL_REASON_SUPERSEDED_FLAG: Int = 8

val CRL_REASON_CESSATION_OF_OPERATION_FLAG: Int = 4

val CRL_REASON_CERTIFICATE_HOLD_FLAG: Int = 2

val CRL_DIST_POINT_ERR_INDEX_MASK: Int = 127

val CRL_DIST_POINT_ERR_INDEX_SHIFT: Int = 24

val CRL_DIST_POINT_ERR_CRL_ISSUER_BIT: Int = -2147483648

val CROSS_CERT_DIST_POINT_ERR_INDEX_MASK: Int = 255

val CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT: Int = 24

val CERT_EXCLUDED_SUBTREE_BIT: Int = -2147483648

val SORTED_CTL_EXT_FLAGS_OFFSET: Int = 0

val SORTED_CTL_EXT_COUNT_OFFSET: Int = 4

val SORTED_CTL_EXT_MAX_COLLISION_OFFSET: Int = 8

val SORTED_CTL_EXT_HASH_BUCKET_OFFSET: Int = 12

val SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG: Int = 1

val CERT_DSS_R_LEN: Int = 20

val CERT_DSS_S_LEN: Int = 20

val CERT_DSS_SIGNATURE_LEN: Int = 40

val CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN: Int = 48

val CRYPT_X942_COUNTER_BYTE_LENGTH: Int = 4

val CRYPT_X942_KEY_LENGTH_BYTE_LENGTH: Int = 4

val CRYPT_X942_PUB_INFO_BYTE_LENGTH: Int = 64

val CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH: Int = 4

val CRYPT_RC2_40BIT_VERSION: Int = 160

val CRYPT_RC2_56BIT_VERSION: Int = 52

val CRYPT_RC2_64BIT_VERSION: Int = 120

val CRYPT_RC2_128BIT_VERSION: Int = 58

val PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC: Int = 1

val NETSCAPE_SIGN_CA_CERT_TYPE: Int = 1

val NETSCAPE_SMIME_CA_CERT_TYPE: Int = 2

val NETSCAPE_SSL_CA_CERT_TYPE: Int = 4

val NETSCAPE_SIGN_CERT_TYPE: Int = 16

val NETSCAPE_SMIME_CERT_TYPE: Int = 32

val NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE: Int = 64

val NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE: Int = 128

val CMC_TAGGED_CERT_REQUEST_CHOICE: Int = 1

val CMC_OTHER_INFO_NO_CHOICE: Int = 0

val CMC_OTHER_INFO_FAIL_CHOICE: Int = 1

val CMC_OTHER_INFO_PEND_CHOICE: Int = 2

val CMC_STATUS_SUCCESS: Int = 0

val CMC_STATUS_FAILED: Int = 2

val CMC_STATUS_PENDING: Int = 3

val CMC_STATUS_NO_SUPPORT: Int = 4

val CMC_STATUS_CONFIRM_REQUIRED: Int = 5

val CMC_FAIL_BAD_ALG: Int = 0

val CMC_FAIL_BAD_MESSAGE_CHECK: Int = 1

val CMC_FAIL_BAD_REQUEST: Int = 2

val CMC_FAIL_BAD_TIME: Int = 3

val CMC_FAIL_BAD_CERT_ID: Int = 4

val CMC_FAIL_UNSUPORTED_EXT: Int = 5

val CMC_FAIL_MUST_ARCHIVE_KEYS: Int = 6

val CMC_FAIL_BAD_IDENTITY: Int = 7

val CMC_FAIL_POP_REQUIRED: Int = 8

val CMC_FAIL_POP_FAILED: Int = 9

val CMC_FAIL_NO_KEY_REUSE: Int = 10

val CMC_FAIL_INTERNAL_CA_ERROR: Int = 11

val CMC_FAIL_TRY_LATER: Int = 12

val CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE: Int = 1

val CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE: Int = 2

val CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE: Int = 0

val CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE: Int = 1

val CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE: Int = 2

val CERT_LOGOTYPE_DIRECT_INFO_CHOICE: Int = 1

val CERT_LOGOTYPE_INDIRECT_INFO_CHOICE: Int = 2

val CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE: Int = 1

val CERT_BIOMETRIC_OID_DATA_CHOICE: Int = 2

val CERT_BIOMETRIC_PICTURE_TYPE: Int = 0

val CERT_BIOMETRIC_SIGNATURE_TYPE: Int = 1

val OCSP_REQUEST_V1: Int = 0

val OCSP_SUCCESSFUL_RESPONSE: Int = 0

val OCSP_MALFORMED_REQUEST_RESPONSE: Int = 1

val OCSP_INTERNAL_ERROR_RESPONSE: Int = 2

val OCSP_TRY_LATER_RESPONSE: Int = 3

val OCSP_SIG_REQUIRED_RESPONSE: Int = 5

val OCSP_UNAUTHORIZED_RESPONSE: Int = 6

val OCSP_BASIC_GOOD_CERT_STATUS: Int = 0

val OCSP_BASIC_REVOKED_CERT_STATUS: Int = 1

val OCSP_BASIC_UNKNOWN_CERT_STATUS: Int = 2

val OCSP_BASIC_RESPONSE_V1: Int = 0

val OCSP_BASIC_BY_NAME_RESPONDER_ID: Int = 1

val OCSP_BASIC_BY_KEY_RESPONDER_ID: Int = 2

val CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG: Int = 1

val CRYPT_GET_INSTALLED_OID_FUNC_FLAG: Int = 1

val CRYPT_REGISTER_FIRST_INDEX: Int = 0

val CRYPT_REGISTER_LAST_INDEX: Int = -1

val CRYPT_MATCH_ANY_ENCODING_TYPE: Int = -1

val CALG_OID_INFO_CNG_ONLY: Int = -1

val CALG_OID_INFO_PARAMETERS: Int = -2

val CRYPT_HASH_ALG_OID_GROUP_ID: Int = 1

val CRYPT_ENCRYPT_ALG_OID_GROUP_ID: Int = 2

val CRYPT_PUBKEY_ALG_OID_GROUP_ID: Int = 3

val CRYPT_SIGN_ALG_OID_GROUP_ID: Int = 4

val CRYPT_RDN_ATTR_OID_GROUP_ID: Int = 5

val CRYPT_EXT_OR_ATTR_OID_GROUP_ID: Int = 6

val CRYPT_ENHKEY_USAGE_OID_GROUP_ID: Int = 7

val CRYPT_POLICY_OID_GROUP_ID: Int = 8

val CRYPT_TEMPLATE_OID_GROUP_ID: Int = 9

val CRYPT_KDF_OID_GROUP_ID: Int = 10

val CRYPT_LAST_OID_GROUP_ID: Int = 10

val CRYPT_FIRST_ALG_OID_GROUP_ID: Int = 1

val CRYPT_LAST_ALG_OID_GROUP_ID: Int = 4

val CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG: Int = 1

val CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG: Int = 2

val CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG: Int = 4

val CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG: Int = 1073741824

val CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG: Int = -2147483648

val CRYPT_OID_INFO_OID_KEY: Int = 1

val CRYPT_OID_INFO_NAME_KEY: Int = 2

val CRYPT_OID_INFO_ALGID_KEY: Int = 3

val CRYPT_OID_INFO_SIGN_KEY: Int = 4

val CRYPT_OID_INFO_CNG_ALGID_KEY: Int = 5

val CRYPT_OID_INFO_CNG_SIGN_KEY: Int = 6

val CRYPT_OID_INFO_OID_KEY_FLAGS_MASK: Int = -65536

val CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG: Int = -2147483648

val CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG: Int = 1073741824

val CRYPT_OID_DISABLE_SEARCH_DS_FLAG: Int = -2147483648

val CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK: Int = 268369920

val CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT: Int = 16

val CRYPT_INSTALL_OID_INFO_BEFORE_FLAG: Int = 1

val CRYPT_LOCALIZED_NAME_ENCODING_TYPE: Int = 0

val CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE: Int = 1

val CERT_STRONG_SIGN_OID_INFO_CHOICE: Int = 2

val CERT_STRONG_SIGN_ENABLE_CRL_CHECK: Int = 1

val CERT_STRONG_SIGN_ENABLE_OCSP_CHECK: Int = 2

val CMSG_DATA: Int = 1

val CMSG_SIGNED: Int = 2

val CMSG_ENVELOPED: Int = 3

val CMSG_SIGNED_AND_ENVELOPED: Int = 4

val CMSG_HASHED: Int = 5

val CMSG_ENCRYPTED: Int = 6

val CMSG_ALL_FLAGS: Int = -1

val CMSG_DATA_FLAG: Int = 2

val CMSG_SIGNED_FLAG: Int = 4

val CMSG_ENVELOPED_FLAG: Int = 8

val CMSG_SIGNED_AND_ENVELOPED_FLAG: Int = 16

val CMSG_HASHED_FLAG: Int = 32

val CMSG_ENCRYPTED_FLAG: Int = 64

val CERT_ID_ISSUER_SERIAL_NUMBER: Int = 1

val CERT_ID_KEY_IDENTIFIER: Int = 2

val CERT_ID_SHA1_HASH: Int = 3

val CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE: Int = 1

val CMSG_KEY_AGREE_STATIC_KEY_CHOICE: Int = 2

val CMSG_MAIL_LIST_HANDLE_KEY_CHOICE: Int = 1

val CMSG_KEY_TRANS_RECIPIENT: Int = 1

val CMSG_KEY_AGREE_RECIPIENT: Int = 2

val CMSG_MAIL_LIST_RECIPIENT: Int = 3

val CMSG_RC4_NO_SALT_FLAG: Int = 1073741824

val CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG: Int = -2147483648

val CMSG_INDEFINITE_LENGTH: Int = -1

val CMSG_BARE_CONTENT_FLAG: Int = 1

val CMSG_LENGTH_ONLY_FLAG: Int = 2

val CMSG_DETACHED_FLAG: Int = 4

val CMSG_AUTHENTICATED_ATTRIBUTES_FLAG: Int = 8

val CMSG_CONTENTS_OCTETS_FLAG: Int = 16

val CMSG_MAX_LENGTH_FLAG: Int = 32

val CMSG_CMS_ENCAPSULATED_CONTENT_FLAG: Int = 64

val CMSG_CRYPT_RELEASE_CONTEXT_FLAG: Int = 32768

val CMSG_TYPE_PARAM: Int = 1

val CMSG_CONTENT_PARAM: Int = 2

val CMSG_BARE_CONTENT_PARAM: Int = 3

val CMSG_INNER_CONTENT_TYPE_PARAM: Int = 4

val CMSG_SIGNER_COUNT_PARAM: Int = 5

val CMSG_SIGNER_INFO_PARAM: Int = 6

val CMSG_SIGNER_CERT_INFO_PARAM: Int = 7

val CMSG_SIGNER_HASH_ALGORITHM_PARAM: Int = 8

val CMSG_SIGNER_AUTH_ATTR_PARAM: Int = 9

val CMSG_SIGNER_UNAUTH_ATTR_PARAM: Int = 10

val CMSG_CERT_COUNT_PARAM: Int = 11

val CMSG_CERT_PARAM: Int = 12

val CMSG_CRL_COUNT_PARAM: Int = 13

val CMSG_CRL_PARAM: Int = 14

val CMSG_ENVELOPE_ALGORITHM_PARAM: Int = 15

val CMSG_RECIPIENT_COUNT_PARAM: Int = 17

val CMSG_RECIPIENT_INDEX_PARAM: Int = 18

val CMSG_RECIPIENT_INFO_PARAM: Int = 19

val CMSG_HASH_ALGORITHM_PARAM: Int = 20

val CMSG_HASH_DATA_PARAM: Int = 21

val CMSG_COMPUTED_HASH_PARAM: Int = 22

val CMSG_ENCRYPT_PARAM: Int = 26

val CMSG_ENCRYPTED_DIGEST: Int = 27

val CMSG_ENCODED_SIGNER: Int = 28

val CMSG_ENCODED_MESSAGE: Int = 29

val CMSG_VERSION_PARAM: Int = 30

val CMSG_ATTR_CERT_COUNT_PARAM: Int = 31

val CMSG_ATTR_CERT_PARAM: Int = 32

val CMSG_CMS_RECIPIENT_COUNT_PARAM: Int = 33

val CMSG_CMS_RECIPIENT_INDEX_PARAM: Int = 34

val CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM: Int = 35

val CMSG_CMS_RECIPIENT_INFO_PARAM: Int = 36

val CMSG_UNPROTECTED_ATTR_PARAM: Int = 37

val CMSG_SIGNER_CERT_ID_PARAM: Int = 38

val CMSG_CMS_SIGNER_INFO_PARAM: Int = 39

val CMSG_SIGNED_DATA_V1: Int = 1

val CMSG_SIGNED_DATA_V3: Int = 3

val CMSG_SIGNED_DATA_PKCS_1_5_VERSION: Int = 1

val CMSG_SIGNED_DATA_CMS_VERSION: Int = 3

val CMSG_SIGNER_INFO_V1: Int = 1

val CMSG_SIGNER_INFO_V3: Int = 3

val CMSG_SIGNER_INFO_PKCS_1_5_VERSION: Int = 1

val CMSG_SIGNER_INFO_CMS_VERSION: Int = 3

val CMSG_HASHED_DATA_V0: Int = 0

val CMSG_HASHED_DATA_V2: Int = 2

val CMSG_HASHED_DATA_PKCS_1_5_VERSION: Int = 0

val CMSG_HASHED_DATA_CMS_VERSION: Int = 2

val CMSG_ENVELOPED_DATA_V0: Int = 0

val CMSG_ENVELOPED_DATA_V2: Int = 2

val CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION: Int = 0

val CMSG_ENVELOPED_DATA_CMS_VERSION: Int = 2

val CMSG_KEY_AGREE_ORIGINATOR_CERT: Int = 1

val CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY: Int = 2

val CMSG_ENVELOPED_RECIPIENT_V0: Int = 0

val CMSG_ENVELOPED_RECIPIENT_V2: Int = 2

val CMSG_ENVELOPED_RECIPIENT_V3: Int = 3

val CMSG_ENVELOPED_RECIPIENT_V4: Int = 4

val CMSG_KEY_TRANS_PKCS_1_5_VERSION: Int = 0

val CMSG_KEY_TRANS_CMS_VERSION: Int = 2

val CMSG_KEY_AGREE_VERSION: Int = 3

val CMSG_MAIL_LIST_VERSION: Int = 4

val CMSG_CTRL_VERIFY_SIGNATURE: Int = 1

val CMSG_CTRL_DECRYPT: Int = 2

val CMSG_CTRL_VERIFY_HASH: Int = 5

val CMSG_CTRL_ADD_SIGNER: Int = 6

val CMSG_CTRL_DEL_SIGNER: Int = 7

val CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR: Int = 8

val CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR: Int = 9

val CMSG_CTRL_ADD_CERT: Int = 10

val CMSG_CTRL_DEL_CERT: Int = 11

val CMSG_CTRL_ADD_CRL: Int = 12

val CMSG_CTRL_DEL_CRL: Int = 13

val CMSG_CTRL_ADD_ATTR_CERT: Int = 14

val CMSG_CTRL_DEL_ATTR_CERT: Int = 15

val CMSG_CTRL_KEY_TRANS_DECRYPT: Int = 16

val CMSG_CTRL_KEY_AGREE_DECRYPT: Int = 17

val CMSG_CTRL_MAIL_LIST_DECRYPT: Int = 18

val CMSG_CTRL_VERIFY_SIGNATURE_EX: Int = 19

val CMSG_CTRL_ADD_CMS_SIGNER_INFO: Int = 20

val CMSG_CTRL_ENABLE_STRONG_SIGNATURE: Int = 21

val CMSG_VERIFY_SIGNER_PUBKEY: Int = 1

val CMSG_VERIFY_SIGNER_CERT: Int = 2

val CMSG_VERIFY_SIGNER_CHAIN: Int = 3

val CMSG_VERIFY_SIGNER_NULL: Int = 4

val CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG: Int = 1

val CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG: Int = 1

val CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG: Int = 1

val CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG: Int = 2

val CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG: Int = 32768

val CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG: Int = 1

val CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG: Int = 2

val CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG: Int = 1

val CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG: Int = 2

val CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG: Int = 4

val CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG: Int = 8

val CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG: Int = 16

val CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG: Int = 32

val CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG: Int = 1

val CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG: Int = 2

val CERT_KEY_PROV_HANDLE_PROP_ID: Int = 1

val CERT_KEY_PROV_INFO_PROP_ID: Int = 2

val CERT_SHA1_HASH_PROP_ID: Int = 3

val CERT_MD5_HASH_PROP_ID: Int = 4

val CERT_HASH_PROP_ID: Int = 3

val CERT_KEY_CONTEXT_PROP_ID: Int = 5

val CERT_KEY_SPEC_PROP_ID: Int = 6

val CERT_IE30_RESERVED_PROP_ID: Int = 7

val CERT_PUBKEY_HASH_RESERVED_PROP_ID: Int = 8

val CERT_ENHKEY_USAGE_PROP_ID: Int = 9

val CERT_CTL_USAGE_PROP_ID: Int = 9

val CERT_NEXT_UPDATE_LOCATION_PROP_ID: Int = 10

val CERT_FRIENDLY_NAME_PROP_ID: Int = 11

val CERT_PVK_FILE_PROP_ID: Int = 12

val CERT_DESCRIPTION_PROP_ID: Int = 13

val CERT_ACCESS_STATE_PROP_ID: Int = 14

val CERT_SIGNATURE_HASH_PROP_ID: Int = 15

val CERT_SMART_CARD_DATA_PROP_ID: Int = 16

val CERT_EFS_PROP_ID: Int = 17

val CERT_FORTEZZA_DATA_PROP_ID: Int = 18

val CERT_ARCHIVED_PROP_ID: Int = 19

val CERT_KEY_IDENTIFIER_PROP_ID: Int = 20

val CERT_AUTO_ENROLL_PROP_ID: Int = 21

val CERT_PUBKEY_ALG_PARA_PROP_ID: Int = 22

val CERT_CROSS_CERT_DIST_POINTS_PROP_ID: Int = 23

val CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID: Int = 24

val CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID: Int = 25

val CERT_ENROLLMENT_PROP_ID: Int = 26

val CERT_DATE_STAMP_PROP_ID: Int = 27

val CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID: Int = 28

val CERT_SUBJECT_NAME_MD5_HASH_PROP_ID: Int = 29

val CERT_EXTENDED_ERROR_INFO_PROP_ID: Int = 30

val CERT_RENEWAL_PROP_ID: Int = 64

val CERT_ARCHIVED_KEY_HASH_PROP_ID: Int = 65

val CERT_AUTO_ENROLL_RETRY_PROP_ID: Int = 66

val CERT_AIA_URL_RETRIEVED_PROP_ID: Int = 67

val CERT_AUTHORITY_INFO_ACCESS_PROP_ID: Int = 68

val CERT_BACKED_UP_PROP_ID: Int = 69

val CERT_OCSP_RESPONSE_PROP_ID: Int = 70

val CERT_REQUEST_ORIGINATOR_PROP_ID: Int = 71

val CERT_SOURCE_LOCATION_PROP_ID: Int = 72

val CERT_SOURCE_URL_PROP_ID: Int = 73

val CERT_NEW_KEY_PROP_ID: Int = 74

val CERT_OCSP_CACHE_PREFIX_PROP_ID: Int = 75

val CERT_SMART_CARD_ROOT_INFO_PROP_ID: Int = 76

val CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID: Int = 77

val CERT_NCRYPT_KEY_HANDLE_PROP_ID: Int = 78

val CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID: Int = 79

val CERT_SUBJECT_INFO_ACCESS_PROP_ID: Int = 80

val CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: Int = 81

val CERT_CA_DISABLE_CRL_PROP_ID: Int = 82

val CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID: Int = 83

val CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID: Int = 84

val CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID: Int = 85

val CERT_SUBJECT_DISABLE_CRL_PROP_ID: Int = 86

val CERT_CEP_PROP_ID: Int = 87

val CERT_SIGN_HASH_CNG_ALG_PROP_ID: Int = 89

val CERT_SCARD_PIN_ID_PROP_ID: Int = 90

val CERT_SCARD_PIN_INFO_PROP_ID: Int = 91

val CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID: Int = 92

val CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: Int = 93

val CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID: Int = 94

val CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID: Int = 95

val CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID: Int = 96

val CERT_NO_EXPIRE_NOTIFICATION_PROP_ID: Int = 97

val CERT_AUTH_ROOT_SHA256_HASH_PROP_ID: Int = 98

val CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID: Int = 99

val CERT_HCRYPTPROV_TRANSFER_PROP_ID: Int = 100

val CERT_SMART_CARD_READER_PROP_ID: Int = 101

val CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID: Int = 102

val CERT_KEY_REPAIR_ATTEMPTED_PROP_ID: Int = 103

val CERT_DISALLOWED_FILETIME_PROP_ID: Int = 104

val CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID: Int = 105

val CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID: Int = 106

val CERT_FIRST_RESERVED_PROP_ID: Int = 107

val CERT_LAST_RESERVED_PROP_ID: Int = 32767

val CERT_FIRST_USER_PROP_ID: Int = 32768

val CERT_LAST_USER_PROP_ID: Int = 65535

val CERT_ACCESS_STATE_WRITE_PERSIST_FLAG: Int = 1

val CERT_ACCESS_STATE_SYSTEM_STORE_FLAG: Int = 2

val CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG: Int = 4

val CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG: Int = 8

val CERT_ACCESS_STATE_SHARED_USER_FLAG: Int = 16

val CERT_SET_KEY_PROV_HANDLE_PROP_ID: Int = 1

val CERT_SET_KEY_CONTEXT_PROP_ID: Int = 1

val CERT_NCRYPT_KEY_SPEC: Int = -1

val CERT_STORE_SIGNATURE_FLAG: Int = 1

val CERT_STORE_TIME_VALIDITY_FLAG: Int = 2

val CERT_STORE_REVOCATION_FLAG: Int = 4

val CERT_STORE_NO_CRL_FLAG: Int = 65536

val CERT_STORE_NO_ISSUER_FLAG: Int = 131072

val CERT_STORE_BASE_CRL_FLAG: Int = 256

val CERT_STORE_DELTA_CRL_FLAG: Int = 512

val CERT_STORE_NO_CRYPT_RELEASE_FLAG: Int = 1

val CERT_STORE_SET_LOCALIZED_NAME_FLAG: Int = 2

val CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG: Int = 4

val CERT_STORE_DELETE_FLAG: Int = 16

val CERT_STORE_UNSAFE_PHYSICAL_FLAG: Int = 32

val CERT_STORE_SHARE_STORE_FLAG: Int = 64

val CERT_STORE_SHARE_CONTEXT_FLAG: Int = 128

val CERT_STORE_MANIFOLD_FLAG: Int = 256

val CERT_STORE_ENUM_ARCHIVED_FLAG: Int = 512

val CERT_STORE_UPDATE_KEYID_FLAG: Int = 1024

val CERT_STORE_BACKUP_RESTORE_FLAG: Int = 2048

val CERT_STORE_READONLY_FLAG: Int = 32768

val CERT_STORE_OPEN_EXISTING_FLAG: Int = 16384

val CERT_STORE_CREATE_NEW_FLAG: Int = 8192

val CERT_STORE_MAXIMUM_ALLOWED_FLAG: Int = 4096

val CERT_SYSTEM_STORE_MASK: Int = -65536

val CERT_SYSTEM_STORE_RELOCATE_FLAG: Int = -2147483648

val CERT_SYSTEM_STORE_DEFER_READ_FLAG: Int = 536870912

val CERT_SYSTEM_STORE_UNPROTECTED_FLAG: Int = 1073741824

val CERT_SYSTEM_STORE_LOCATION_MASK: Int = 16711680

val CERT_SYSTEM_STORE_LOCATION_SHIFT: Int = 16

val CERT_SYSTEM_STORE_CURRENT_USER_ID: Int = 1

val CERT_SYSTEM_STORE_LOCAL_MACHINE_ID: Int = 2

val CERT_SYSTEM_STORE_CURRENT_SERVICE_ID: Int = 4

val CERT_SYSTEM_STORE_SERVICES_ID: Int = 5

val CERT_SYSTEM_STORE_USERS_ID: Int = 6

val CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID: Int = 7

val CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID: Int = 8

val CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID: Int = 9

val CERT_SYSTEM_STORE_CURRENT_USER: Int = 65536

val CERT_SYSTEM_STORE_LOCAL_MACHINE: Int = 131072

val CERT_SYSTEM_STORE_CURRENT_SERVICE: Int = 262144

val CERT_SYSTEM_STORE_SERVICES: Int = 327680

val CERT_SYSTEM_STORE_USERS: Int = 393216

val CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY: Int = 458752

val CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY: Int = 524288

val CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE: Int = 589824

val CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG: Int = 1

val CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG: Int = 2

val CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG: Int = 4

val CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG: Int = 8

val CERT_PROT_ROOT_ONLY_LM_GPT_FLAG: Int = 8

val CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG: Int = 16

val CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG: Int = 32

val CERT_PROT_ROOT_DISABLE_PEER_TRUST: Int = 65536

val CERT_TRUST_PUB_ALLOW_TRUST_MASK: Int = 3

val CERT_TRUST_PUB_ALLOW_END_USER_TRUST: Int = 0

val CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST: Int = 1

val CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST: Int = 2

val CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG: Int = 256

val CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG: Int = 512

val CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG: Int = 1

val CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG: Int = 2

val CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG: Int = 4

val CERT_REGISTRY_STORE_REMOTE_FLAG: Int = 65536

val CERT_REGISTRY_STORE_SERIALIZED_FLAG: Int = 131072

val CERT_REGISTRY_STORE_CLIENT_GPT_FLAG: Int = -2147483648

val CERT_REGISTRY_STORE_LM_GPT_FLAG: Int = 16777216

val CERT_REGISTRY_STORE_ROAMING_FLAG: Int = 262144

val CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG: Int = 524288

val CERT_REGISTRY_STORE_EXTERNAL_FLAG: Int = 1048576

val CERT_FILE_STORE_COMMIT_ENABLE_FLAG: Int = 65536

val CERT_LDAP_STORE_SIGN_FLAG: Int = 65536

val CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG: Int = 131072

val CERT_LDAP_STORE_OPENED_FLAG: Int = 262144

val CERT_LDAP_STORE_UNBIND_FLAG: Int = 524288

val CERT_STORE_PROV_EXTERNAL_FLAG: Int = 1

val CERT_STORE_PROV_DELETED_FLAG: Int = 2

val CERT_STORE_PROV_NO_PERSIST_FLAG: Int = 4

val CERT_STORE_PROV_SYSTEM_STORE_FLAG: Int = 8

val CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG: Int = 16

val CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG: Int = 32

val CERT_STORE_PROV_SHARED_USER_FLAG: Int = 64

val CERT_STORE_PROV_CLOSE_FUNC: Int = 0

val CERT_STORE_PROV_READ_CERT_FUNC: Int = 1

val CERT_STORE_PROV_WRITE_CERT_FUNC: Int = 2

val CERT_STORE_PROV_DELETE_CERT_FUNC: Int = 3

val CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC: Int = 4

val CERT_STORE_PROV_READ_CRL_FUNC: Int = 5

val CERT_STORE_PROV_WRITE_CRL_FUNC: Int = 6

val CERT_STORE_PROV_DELETE_CRL_FUNC: Int = 7

val CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC: Int = 8

val CERT_STORE_PROV_READ_CTL_FUNC: Int = 9

val CERT_STORE_PROV_WRITE_CTL_FUNC: Int = 10

val CERT_STORE_PROV_DELETE_CTL_FUNC: Int = 11

val CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC: Int = 12

val CERT_STORE_PROV_CONTROL_FUNC: Int = 13

val CERT_STORE_PROV_FIND_CERT_FUNC: Int = 14

val CERT_STORE_PROV_FREE_FIND_CERT_FUNC: Int = 15

val CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC: Int = 16

val CERT_STORE_PROV_FIND_CRL_FUNC: Int = 17

val CERT_STORE_PROV_FREE_FIND_CRL_FUNC: Int = 18

val CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC: Int = 19

val CERT_STORE_PROV_FIND_CTL_FUNC: Int = 20

val CERT_STORE_PROV_FREE_FIND_CTL_FUNC: Int = 21

val CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC: Int = 22

val CERT_STORE_PROV_WRITE_ADD_FLAG: Int = 1

val CERT_STORE_SAVE_AS_STORE: Int = 1

val CERT_STORE_SAVE_AS_PKCS7: Int = 2

val CERT_STORE_SAVE_AS_PKCS12: Int = 3

val CERT_STORE_SAVE_TO_FILE: Int = 1

val CERT_STORE_SAVE_TO_MEMORY: Int = 2

val CERT_STORE_SAVE_TO_FILENAME_A: Int = 3

val CERT_STORE_SAVE_TO_FILENAME_W: Int = 4

val CERT_STORE_SAVE_TO_FILENAME: Int = 4

val CERT_CLOSE_STORE_FORCE_FLAG: Int = 1

val CERT_CLOSE_STORE_CHECK_FLAG: Int = 2

val CERT_COMPARE_MASK: Int = 65535

val CERT_COMPARE_SHIFT: Int = 16

val CERT_COMPARE_ANY: Int = 0

val CERT_COMPARE_SHA1_HASH: Int = 1

val CERT_COMPARE_NAME: Int = 2

val CERT_COMPARE_ATTR: Int = 3

val CERT_COMPARE_MD5_HASH: Int = 4

val CERT_COMPARE_PROPERTY: Int = 5

val CERT_COMPARE_PUBLIC_KEY: Int = 6

val CERT_COMPARE_HASH: Int = 1

val CERT_COMPARE_NAME_STR_A: Int = 7

val CERT_COMPARE_NAME_STR_W: Int = 8

val CERT_COMPARE_KEY_SPEC: Int = 9

val CERT_COMPARE_ENHKEY_USAGE: Int = 10

val CERT_COMPARE_CTL_USAGE: Int = 10

val CERT_COMPARE_SUBJECT_CERT: Int = 11

val CERT_COMPARE_ISSUER_OF: Int = 12

val CERT_COMPARE_EXISTING: Int = 13

val CERT_COMPARE_SIGNATURE_HASH: Int = 14

val CERT_COMPARE_KEY_IDENTIFIER: Int = 15

val CERT_COMPARE_CERT_ID: Int = 16

val CERT_COMPARE_CROSS_CERT_DIST_POINTS: Int = 17

val CERT_COMPARE_PUBKEY_MD5_HASH: Int = 18

val CERT_COMPARE_SUBJECT_INFO_ACCESS: Int = 19

val CERT_COMPARE_HASH_STR: Int = 20

val CERT_COMPARE_HAS_PRIVATE_KEY: Int = 21

val CERT_FIND_ANY: Int = 0

val CERT_FIND_SHA1_HASH: Int = 65536

val CERT_FIND_MD5_HASH: Int = 262144

val CERT_FIND_SIGNATURE_HASH: Int = 917504

val CERT_FIND_KEY_IDENTIFIER: Int = 983040

val CERT_FIND_HASH: Int = 65536

val CERT_FIND_PROPERTY: Int = 327680

val CERT_FIND_PUBLIC_KEY: Int = 393216

val CERT_FIND_SUBJECT_NAME: Int = 131079

val CERT_FIND_SUBJECT_ATTR: Int = 196615

val CERT_FIND_ISSUER_NAME: Int = 131076

val CERT_FIND_ISSUER_ATTR: Int = 196612

val CERT_FIND_SUBJECT_STR_A: Int = 458759

val CERT_FIND_SUBJECT_STR_W: Int = 524295

val CERT_FIND_SUBJECT_STR: Int = 524295

val CERT_FIND_ISSUER_STR_A: Int = 458756

val CERT_FIND_ISSUER_STR_W: Int = 524292

val CERT_FIND_ISSUER_STR: Int = 524292

val CERT_FIND_KEY_SPEC: Int = 589824

val CERT_FIND_ENHKEY_USAGE: Int = 655360

val CERT_FIND_CTL_USAGE: Int = 655360

val CERT_FIND_SUBJECT_CERT: Int = 720896

val CERT_FIND_ISSUER_OF: Int = 786432

val CERT_FIND_EXISTING: Int = 851968

val CERT_FIND_CERT_ID: Int = 1048576

val CERT_FIND_CROSS_CERT_DIST_POINTS: Int = 1114112

val CERT_FIND_PUBKEY_MD5_HASH: Int = 1179648

val CERT_FIND_SUBJECT_INFO_ACCESS: Int = 1245184

val CERT_FIND_HASH_STR: Int = 1310720

val CERT_FIND_HAS_PRIVATE_KEY: Int = 1376256

val CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG: Int = 1

val CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG: Int = 2

val CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG: Int = 4

val CERT_FIND_NO_ENHKEY_USAGE_FLAG: Int = 8

val CERT_FIND_OR_ENHKEY_USAGE_FLAG: Int = 16

val CERT_FIND_VALID_ENHKEY_USAGE_FLAG: Int = 32

val CERT_FIND_OPTIONAL_CTL_USAGE_FLAG: Int = 1

val CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG: Int = 2

val CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG: Int = 4

val CERT_FIND_NO_CTL_USAGE_FLAG: Int = 8

val CERT_FIND_OR_CTL_USAGE_FLAG: Int = 16

val CERT_FIND_VALID_CTL_USAGE_FLAG: Int = 32

val CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG: Int = 1073741824

val CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG: Int = -2147483648

val CTL_ENTRY_FROM_PROP_CHAIN_FLAG: Int = 1

val CRL_FIND_ANY: Int = 0

val CRL_FIND_ISSUED_BY: Int = 1

val CRL_FIND_EXISTING: Int = 2

val CRL_FIND_ISSUED_FOR: Int = 3

val CRL_FIND_ISSUED_BY_AKI_FLAG: Int = 1

val CRL_FIND_ISSUED_BY_SIGNATURE_FLAG: Int = 2

val CRL_FIND_ISSUED_BY_DELTA_FLAG: Int = 4

val CRL_FIND_ISSUED_BY_BASE_FLAG: Int = 8

val CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG: Int = 16

val CERT_STORE_ADD_NEW: Int = 1

val CERT_STORE_ADD_USE_EXISTING: Int = 2

val CERT_STORE_ADD_REPLACE_EXISTING: Int = 3

val CERT_STORE_ADD_ALWAYS: Int = 4

val CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES: Int = 5

val CERT_STORE_ADD_NEWER: Int = 6

val CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES: Int = 7

val CERT_STORE_CERTIFICATE_CONTEXT: Int = 1

val CERT_STORE_CRL_CONTEXT: Int = 2

val CERT_STORE_CTL_CONTEXT: Int = 3

val CERT_STORE_ALL_CONTEXT_FLAG: Int = -1

val CERT_STORE_CERTIFICATE_CONTEXT_FLAG: Int = 2

val CERT_STORE_CRL_CONTEXT_FLAG: Int = 4

val CERT_STORE_CTL_CONTEXT_FLAG: Int = 8

val CTL_ANY_SUBJECT_TYPE: Int = 1

val CTL_CERT_SUBJECT_TYPE: Int = 2

val CTL_FIND_ANY: Int = 0

val CTL_FIND_SHA1_HASH: Int = 1

val CTL_FIND_MD5_HASH: Int = 2

val CTL_FIND_USAGE: Int = 3

val CTL_FIND_SUBJECT: Int = 4

val CTL_FIND_EXISTING: Int = 5

val CTL_FIND_SAME_USAGE_FLAG: Int = 1

val CTL_FIND_NO_LIST_ID_CBDATA: Int = -1

val CERT_STORE_CTRL_RESYNC: Int = 1

val CERT_STORE_CTRL_NOTIFY_CHANGE: Int = 2

val CERT_STORE_CTRL_COMMIT: Int = 3

val CERT_STORE_CTRL_AUTO_RESYNC: Int = 4

val CERT_STORE_CTRL_CANCEL_NOTIFY: Int = 5

val CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG: Int = 1

val CERT_STORE_CTRL_COMMIT_FORCE_FLAG: Int = 1

val CERT_STORE_CTRL_COMMIT_CLEAR_FLAG: Int = 2

val CERT_STORE_LOCALIZED_NAME_PROP_ID: Int = 4096

val CERT_CREATE_CONTEXT_NOCOPY_FLAG: Int = 1

val CERT_CREATE_CONTEXT_SORTED_FLAG: Int = 2

val CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG: Int = 4

val CERT_CREATE_CONTEXT_NO_ENTRY_FLAG: Int = 8

val CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG: Int = 1

val CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG: Int = 2

val CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG: Int = 4

val CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG: Int = 8

val CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG: Int = 1

val CMSG_TRUSTED_SIGNER_FLAG: Int = 1

val CMSG_SIGNER_ONLY_FLAG: Int = 2

val CMSG_USE_SIGNER_INDEX_FLAG: Int = 4

val CMSG_CMS_ENCAPSULATED_CTL_FLAG: Int = 32768

val CMSG_ENCODE_SORTED_CTL_FLAG: Int = 1

val CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG: Int = 2

val CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG: Int = 1

val CERT_VERIFY_TRUSTED_SIGNERS_FLAG: Int = 2

val CERT_VERIFY_NO_TIME_CHECK_FLAG: Int = 4

val CERT_VERIFY_ALLOW_MORE_USAGE_FLAG: Int = 8

val CERT_VERIFY_UPDATED_CTL_FLAG: Int = 1

val CERT_CONTEXT_REVOCATION_TYPE: Int = 1

val CERT_VERIFY_REV_CHAIN_FLAG: Int = 1

val CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION: Int = 2

val CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG: Int = 4

val CERT_VERIFY_REV_SERVER_OCSP_FLAG: Int = 8

val CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG: Int = 16

val CERT_UNICODE_IS_RDN_ATTRS_FLAG: Int = 1

val CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG: Int = 2

val CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB: Int = 1

val CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT: Int = 2

val CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL: Int = 3

val CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE: Int = 4

val CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY: Int = 1

val CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT: Int = 2

val CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN: Int = 3

val CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL: Int = 4

val CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG: Int = 1

val CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG: Int = 2

val CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG: Int = 4

val CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG: Int = 1

val CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG: Int = 2

val CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID: Int = 1

val CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID: Int = 2

val CRYPT_ACQUIRE_CACHE_FLAG: Int = 1

val CRYPT_ACQUIRE_USE_PROV_INFO_FLAG: Int = 2

val CRYPT_ACQUIRE_COMPARE_KEY_FLAG: Int = 4

val CRYPT_ACQUIRE_NO_HEALING: Int = 8

val CRYPT_ACQUIRE_SILENT_FLAG: Int = 64

val CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG: Int = 128

val CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK: Int = 458752

val CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG: Int = 65536

val CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG: Int = 131072

val CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG: Int = 262144

val CRYPT_FIND_USER_KEYSET_FLAG: Int = 1

val CRYPT_FIND_MACHINE_KEYSET_FLAG: Int = 2

val CRYPT_FIND_SILENT_KEYSET_FLAG: Int = 64

val CRYPT_DELETE_KEYSET: Int = 16

val CERT_SIMPLE_NAME_STR: Int = 1

val CERT_OID_NAME_STR: Int = 2

val CERT_X500_NAME_STR: Int = 3

val CERT_XML_NAME_STR: Int = 4

val CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG: Int = 65536

val CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG: Int = 131072

val CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG: Int = 262144

val CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG: Int = 524288

val CERT_NAME_STR_FORWARD_FLAG: Int = 16777216

val CERT_NAME_STR_REVERSE_FLAG: Int = 33554432

val CERT_NAME_STR_COMMA_FLAG: Int = 67108864

val CERT_NAME_STR_CRLF_FLAG: Int = 134217728

val CERT_NAME_STR_NO_QUOTING_FLAG: Int = 268435456

val CERT_NAME_STR_NO_PLUS_FLAG: Int = 536870912

val CERT_NAME_STR_SEMICOLON_FLAG: Int = 1073741824

val CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG: Int = 1048576

val CERT_NAME_STR_ENABLE_PUNYCODE_FLAG: Int = 2097152

val CERT_NAME_EMAIL_TYPE: Int = 1

val CERT_NAME_RDN_TYPE: Int = 2

val CERT_NAME_ATTR_TYPE: Int = 3

val CERT_NAME_SIMPLE_DISPLAY_TYPE: Int = 4

val CERT_NAME_FRIENDLY_DISPLAY_TYPE: Int = 5

val CERT_NAME_DNS_TYPE: Int = 6

val CERT_NAME_URL_TYPE: Int = 7

val CERT_NAME_UPN_TYPE: Int = 8

val CERT_NAME_ISSUER_FLAG: Int = 1

val CERT_NAME_DISABLE_IE4_UTF8_FLAG: Int = 65536

val CERT_NAME_SEARCH_ALL_NAMES_FLAG: Int = 2

val CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG: Int = 1

val CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG: Int = 2

val CRYPT_MESSAGE_KEYID_SIGNER_FLAG: Int = 4

val CRYPT_MESSAGE_SILENT_KEYSET_FLAG: Int = 64

val CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG: Int = 4

val CERT_QUERY_OBJECT_FILE: Int = 1

val CERT_QUERY_OBJECT_BLOB: Int = 2

val CERT_QUERY_CONTENT_CERT: Int = 1

val CERT_QUERY_CONTENT_CTL: Int = 2

val CERT_QUERY_CONTENT_CRL: Int = 3

val CERT_QUERY_CONTENT_SERIALIZED_STORE: Int = 4

val CERT_QUERY_CONTENT_SERIALIZED_CERT: Int = 5

val CERT_QUERY_CONTENT_SERIALIZED_CTL: Int = 6

val CERT_QUERY_CONTENT_SERIALIZED_CRL: Int = 7

val CERT_QUERY_CONTENT_PKCS7_SIGNED: Int = 8

val CERT_QUERY_CONTENT_PKCS7_UNSIGNED: Int = 9

val CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED: Int = 10

val CERT_QUERY_CONTENT_PKCS10: Int = 11

val CERT_QUERY_CONTENT_PFX: Int = 12

val CERT_QUERY_CONTENT_CERT_PAIR: Int = 13

val CERT_QUERY_CONTENT_PFX_AND_LOAD: Int = 14

val CERT_QUERY_CONTENT_FLAG_CERT: Int = 2

val CERT_QUERY_CONTENT_FLAG_CTL: Int = 4

val CERT_QUERY_CONTENT_FLAG_CRL: Int = 8

val CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE: Int = 16

val CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT: Int = 32

val CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL: Int = 64

val CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL: Int = 128

val CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED: Int = 256

val CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED: Int = 512

val CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED: Int = 1024

val CERT_QUERY_CONTENT_FLAG_PKCS10: Int = 2048

val CERT_QUERY_CONTENT_FLAG_PFX: Int = 4096

val CERT_QUERY_CONTENT_FLAG_CERT_PAIR: Int = 8192

val CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD: Int = 16384

val CERT_QUERY_CONTENT_FLAG_ALL: Int = 16382

val CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT: Int = 818

val CERT_QUERY_FORMAT_BINARY: Int = 1

val CERT_QUERY_FORMAT_BASE64_ENCODED: Int = 2

val CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED: Int = 3

val CERT_QUERY_FORMAT_FLAG_BINARY: Int = 2

val CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED: Int = 4

val CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED: Int = 8

val CERT_QUERY_FORMAT_FLAG_ALL: Int = 14

val CRYPT_RETRIEVE_MULTIPLE_OBJECTS: Int = 1

val CRYPT_CACHE_ONLY_RETRIEVAL: Int = 2

val CRYPT_WIRE_ONLY_RETRIEVAL: Int = 4

val CRYPT_DONT_CACHE_RESULT: Int = 8

val CRYPT_ASYNC_RETRIEVAL: Int = 16

val CRYPT_VERIFY_CONTEXT_SIGNATURE: Int = 32

val CRYPT_VERIFY_DATA_HASH: Int = 64

val CRYPT_KEEP_TIME_VALID: Int = 128

val CRYPT_DONT_VERIFY_SIGNATURE: Int = 256

val CRYPT_DONT_CHECK_TIME_VALIDITY: Int = 512

val CRYPT_CHECK_FRESHNESS_TIME_VALIDITY: Int = 1024

val CRYPT_ACCUMULATIVE_TIMEOUT: Int = 2048

val CRYPT_STICKY_CACHE_RETRIEVAL: Int = 4096

val CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL: Int = 8192

val CRYPT_OFFLINE_CHECK_RETRIEVAL: Int = 16384

val CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE: Int = 32768

val CRYPT_LDAP_SIGN_RETRIEVAL: Int = 65536

val CRYPT_NO_AUTH_RETRIEVAL: Int = 131072

val CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL: Int = 262144

val CRYPT_AIA_RETRIEVAL: Int = 524288

val CRYPT_HTTP_POST_RETRIEVAL: Int = 1048576

val CRYPT_PROXY_CACHE_RETRIEVAL: Int = 2097152

val CRYPT_NOT_MODIFIED_RETRIEVAL: Int = 4194304

val CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL: Int = 8388608

val CRYPT_OCSP_ONLY_RETRIEVAL: Int = 16777216

val CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL: Int = 33554432

val CRYPT_RANDOM_QUERY_STRING_RETRIEVAL: Int = 67108864

val CRYPTNET_URL_CACHE_PRE_FETCH_NONE: Int = 0

val CRYPTNET_URL_CACHE_PRE_FETCH_BLOB: Int = 1

val CRYPTNET_URL_CACHE_PRE_FETCH_CRL: Int = 2

val CRYPTNET_URL_CACHE_PRE_FETCH_OCSP: Int = 3

val CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB: Int = 5

val CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB: Int = 6

val CRYPTNET_URL_CACHE_DEFAULT_FLUSH: Int = 0

val CRYPTNET_URL_CACHE_DISABLE_FLUSH: Int = -1

val CRYPTNET_URL_CACHE_RESPONSE_NONE: Int = 0

val CRYPTNET_URL_CACHE_RESPONSE_HTTP: Int = 1

val CRYPTNET_URL_CACHE_RESPONSE_VALIDATED: Int = 32768

val CRYPT_GET_URL_FROM_PROPERTY: Int = 1

val CRYPT_GET_URL_FROM_EXTENSION: Int = 2

val CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE: Int = 4

val CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE: Int = 8

val CERT_CREATE_SELFSIGN_NO_SIGN: Int = 1

val CERT_CREATE_SELFSIGN_NO_KEY_INFO: Int = 2

val CRYPT_KEYID_DELETE_FLAG: Int = 16

val CRYPT_KEYID_MACHINE_FLAG: Int = 32

val CRYPT_KEYID_SET_NEW_FLAG: Int = 8192

val CRYPT_KEYID_ALLOC_FLAG: Int = 32768

val CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_DEFAULT: Int = 104857600

val CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT: Int = 5

val CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT: Int = 3

val CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT: Int = 100000

val CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT: Int = 10

val CERT_CHAIN_OCSP_VALIDITY_SECONDS_DEFAULT: Int = 43200

val CERT_CHAIN_ENABLE_MD2_MD4_FLAG: Int = 1

val CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG: Int = 2

val CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG: Int = 4

val CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG: Int = 8

val CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT: Int = 1023

val CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE: Int = -1

val CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_DEFAULT: Long = 129067776000000000

val CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_DEFAULT: Int = 600

val CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT: Int = 15000

val CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT: Int = 14400

val CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT: Int = 120

val CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT: Int = 60

val CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT: Int = 500

val CRYPTNET_OCSP_AFTER_CRL_DISABLE: Int = -1

val CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_DEFAULT: Int = 2419200

val CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_DEFAULT: Int = 3600

val CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_DEFAULT: Int = 1209600

val CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_DEFAULT: Int = 1209600

val CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT: Int = 10

val CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT: Int = 20

val CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT: Int = 3600

val CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT: Int = 10

val CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT: Int = 14400

val CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT: Int = 1800

val CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_DEFAULT: Int = 1800

val CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_DEFAULT: Int = 600

val CRYPTNET_PRE_FETCH_TRIGGER_DISABLE: Int = -1

val CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT: Int = 30

val CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_DEFAULT: Int = 300

val CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT: Int = 15000

val CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT: Int = 20000

val CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT: Int = 50

val CRYPTNET_CRL_BEFORE_OCSP_ENABLE: Int = -1

val CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL: Int = 2

val CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL: Int = 4

val CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_DEFAULT: Int = 168

val CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT: Int = 12

val CERT_CHAIN_CACHE_END_CERT: Int = 1

val CERT_CHAIN_THREAD_STORE_SYNC: Int = 2

val CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL: Int = 4

val CERT_CHAIN_USE_LOCAL_MACHINE_STORE: Int = 8

val CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE: Int = 16

val CERT_CHAIN_ENABLE_SHARE_STORE: Int = 32

val CERT_TRUST_NO_ERROR: Int = 0

val CERT_TRUST_IS_NOT_TIME_VALID: Int = 1

val CERT_TRUST_IS_NOT_TIME_NESTED: Int = 2

val CERT_TRUST_IS_REVOKED: Int = 4

val CERT_TRUST_IS_NOT_SIGNATURE_VALID: Int = 8

val CERT_TRUST_IS_NOT_VALID_FOR_USAGE: Int = 16

val CERT_TRUST_IS_UNTRUSTED_ROOT: Int = 32

val CERT_TRUST_REVOCATION_STATUS_UNKNOWN: Int = 64

val CERT_TRUST_IS_CYCLIC: Int = 128

val CERT_TRUST_INVALID_EXTENSION: Int = 256

val CERT_TRUST_INVALID_POLICY_CONSTRAINTS: Int = 512

val CERT_TRUST_INVALID_BASIC_CONSTRAINTS: Int = 1024

val CERT_TRUST_INVALID_NAME_CONSTRAINTS: Int = 2048

val CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT: Int = 4096

val CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT: Int = 8192

val CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT: Int = 16384

val CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT: Int = 32768

val CERT_TRUST_IS_PARTIAL_CHAIN: Int = 65536

val CERT_TRUST_CTL_IS_NOT_TIME_VALID: Int = 131072

val CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID: Int = 262144

val CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE: Int = 524288

val CERT_TRUST_IS_OFFLINE_REVOCATION: Int = 16777216

val CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY: Int = 33554432

val CERT_TRUST_IS_EXPLICIT_DISTRUST: Int = 67108864

val CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT: Int = 134217728

val CERT_TRUST_HAS_WEAK_SIGNATURE: Int = 1048576

val CERT_TRUST_HAS_EXACT_MATCH_ISSUER: Int = 1

val CERT_TRUST_HAS_KEY_MATCH_ISSUER: Int = 2

val CERT_TRUST_HAS_NAME_MATCH_ISSUER: Int = 4

val CERT_TRUST_IS_SELF_SIGNED: Int = 8

val CERT_TRUST_AUTO_UPDATE_CA_REVOCATION: Int = 16

val CERT_TRUST_AUTO_UPDATE_END_REVOCATION: Int = 32

val CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL: Int = 64

val CERT_TRUST_HAS_PREFERRED_ISSUER: Int = 256

val CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY: Int = 512

val CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS: Int = 1024

val CERT_TRUST_IS_PEER_TRUSTED: Int = 2048

val CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED: Int = 4096

val CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE: Int = 8192

val CERT_TRUST_IS_COMPLEX_CHAIN: Int = 65536

val USAGE_MATCH_TYPE_AND: Int = 0

val USAGE_MATCH_TYPE_OR: Int = 1

val CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG: Int = 1

val CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING: Int = 64

val CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS: Int = 128

val CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE: Int = 256

val CERT_CHAIN_TIMESTAMP_TIME: Int = 512

val CERT_CHAIN_ENABLE_PEER_TRUST: Int = 1024

val CERT_CHAIN_DISABLE_MY_PEER_TRUST: Int = 2048

val CERT_CHAIN_DISABLE_MD2_MD4: Int = 4096

val CERT_CHAIN_REVOCATION_CHECK_END_CERT: Int = 268435456

val CERT_CHAIN_REVOCATION_CHECK_CHAIN: Int = 536870912

val CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT: Int = 1073741824

val CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY: Int = -2147483648

val CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT: Int = 134217728

val CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT: Int = 67108864

val CERT_CHAIN_FIND_BY_ISSUER: Int = 1

val CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG: Int = 1

val CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG: Int = 2

val CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG: Int = 4

val CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG: Int = 8

val CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG: Int = 16384

val CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG: Int = 32768

val CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG: Int = 1

val CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG: Int = 2

val CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG: Int = 4

val CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG: Int = 8

val CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS: Int = 7

val CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG: Int = 16

val CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG: Int = 32

val CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG: Int = 64

val CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG: Int = 128

val CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG: Int = 256

val CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG: Int = 512

val CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG: Int = 1024

val CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG: Int = 2048

val CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS: Int = 3840

val CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG: Int = 4096

val CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG: Int = 8192

val CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG: Int = 16384

val CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG: Int = 32768

val AUTHTYPE_CLIENT: Int = 1

val AUTHTYPE_SERVER: Int = 2

val BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG: Int = -2147483648

val BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG: Int = 1073741824

val MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG: Int = 65536

val MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG: Int = 131072

val CRYPT_STRING_BASE64HEADER: Int = 0

val CRYPT_STRING_BASE64: Int = 1

val CRYPT_STRING_BINARY: Int = 2

val CRYPT_STRING_BASE64REQUESTHEADER: Int = 3

val CRYPT_STRING_HEX: Int = 4

val CRYPT_STRING_HEXASCII: Int = 5

val CRYPT_STRING_BASE64_ANY: Int = 6

val CRYPT_STRING_ANY: Int = 7

val CRYPT_STRING_HEX_ANY: Int = 8

val CRYPT_STRING_BASE64X509CRLHEADER: Int = 9

val CRYPT_STRING_HEXADDR: Int = 10

val CRYPT_STRING_HEXASCIIADDR: Int = 11

val CRYPT_STRING_HEXRAW: Int = 12

val CRYPT_STRING_HASHDATA: Int = 268435456

val CRYPT_STRING_STRICT: Int = 536870912

val CRYPT_STRING_NOCRLF: Int = 1073741824

val CRYPT_STRING_NOCR: Int = -2147483648

val PKCS12_IMPORT_SILENT: Int = 64

val CRYPT_USER_KEYSET: Int = 4096

val PKCS12_PREFER_CNG_KSP: Int = 256

val PKCS12_ALWAYS_CNG_KSP: Int = 512

val PKCS12_ALLOW_OVERWRITE_KEY: Int = 16384

val PKCS12_NO_PERSIST_KEY: Int = 32768

val PKCS12_IMPORT_RESERVED_MASK: Int = -65536

val PKCS12_OBJECT_LOCATOR_ALL_IMPORT_FLAGS: Int = 33360

val REPORT_NO_PRIVATE_KEY: Int = 1

val REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY: Int = 2

val EXPORT_PRIVATE_KEYS: Int = 4

val PKCS12_INCLUDE_EXTENDED_PROPERTIES: Int = 16

val PKCS12_PROTECT_TO_DOMAIN_SIDS: Int = 32

val PKCS12_EXPORT_SILENT: Int = 64

val PKCS12_EXPORT_RESERVED_MASK: Int = -65536

val MAX_SID_SIZE: Int = 256

val FILE_DEVICE_BEEP: Int = 1

val FILE_DEVICE_CD_ROM: Int = 2

val FILE_DEVICE_CD_ROM_FILE_SYSTEM: Int = 3

val FILE_DEVICE_CONTROLLER: Int = 4

val FILE_DEVICE_DATALINK: Int = 5

val FILE_DEVICE_DFS: Int = 6

val FILE_DEVICE_DISK: Int = 7

val FILE_DEVICE_DISK_FILE_SYSTEM: Int = 8

val FILE_DEVICE_FILE_SYSTEM: Int = 9

val FILE_DEVICE_INPORT_PORT: Int = 10

val FILE_DEVICE_KEYBOARD: Int = 11

val FILE_DEVICE_MAILSLOT: Int = 12

val FILE_DEVICE_MIDI_IN: Int = 13

val FILE_DEVICE_MIDI_OUT: Int = 14

val FILE_DEVICE_MOUSE: Int = 15

val FILE_DEVICE_MULTI_UNC_PROVIDER: Int = 16

val FILE_DEVICE_NAMED_PIPE: Int = 17

val FILE_DEVICE_NETWORK: Int = 18

val FILE_DEVICE_NETWORK_BROWSER: Int = 19

val FILE_DEVICE_NETWORK_FILE_SYSTEM: Int = 20

val FILE_DEVICE_NULL: Int = 21

val FILE_DEVICE_PARALLEL_PORT: Int = 22

val FILE_DEVICE_PHYSICAL_NETCARD: Int = 23

val FILE_DEVICE_PRINTER: Int = 24

val FILE_DEVICE_SCANNER: Int = 25

val FILE_DEVICE_SERIAL_MOUSE_PORT: Int = 26

val FILE_DEVICE_SERIAL_PORT: Int = 27

val FILE_DEVICE_SCREEN: Int = 28

val FILE_DEVICE_SOUND: Int = 29

val FILE_DEVICE_STREAMS: Int = 30

val FILE_DEVICE_TAPE: Int = 31

val FILE_DEVICE_TAPE_FILE_SYSTEM: Int = 32

val FILE_DEVICE_TRANSPORT: Int = 33

val FILE_DEVICE_UNKNOWN: Int = 34

val FILE_DEVICE_VIDEO: Int = 35

val FILE_DEVICE_VIRTUAL_DISK: Int = 36

val FILE_DEVICE_WAVE_IN: Int = 37

val FILE_DEVICE_WAVE_OUT: Int = 38

val FILE_DEVICE_8042_PORT: Int = 39

val FILE_DEVICE_NETWORK_REDIRECTOR: Int = 40

val FILE_DEVICE_BATTERY: Int = 41

val FILE_DEVICE_BUS_EXTENDER: Int = 42

val FILE_DEVICE_MODEM: Int = 43

val FILE_DEVICE_VDM: Int = 44

val FILE_DEVICE_MASS_STORAGE: Int = 45

val FILE_DEVICE_SMB: Int = 46

val FILE_DEVICE_KS: Int = 47

val FILE_DEVICE_CHANGER: Int = 48

val FILE_DEVICE_SMARTCARD: Int = 49

val FILE_DEVICE_ACPI: Int = 50

val FILE_DEVICE_DVD: Int = 51

val FILE_DEVICE_FULLSCREEN_VIDEO: Int = 52

val FILE_DEVICE_DFS_FILE_SYSTEM: Int = 53

val FILE_DEVICE_DFS_VOLUME: Int = 54

val FILE_DEVICE_SERENUM: Int = 55

val FILE_DEVICE_TERMSRV: Int = 56

val FILE_DEVICE_KSEC: Int = 57

val FILE_DEVICE_FIPS: Int = 58

val FILE_DEVICE_INFINIBAND: Int = 59

val METHOD_BUFFERED: Int = 0

val METHOD_IN_DIRECT: Int = 1

val METHOD_OUT_DIRECT: Int = 2

val METHOD_NEITHER: Int = 3

val METHOD_DIRECT_TO_HARDWARE: Int = 1

val METHOD_DIRECT_FROM_HARDWARE: Int = 2

val FILE_ANY_ACCESS: Int = 0

val FILE_SPECIAL_ACCESS: Int = 0

val FILE_READ_ACCESS: Int = 1

val FILE_WRITE_ACCESS: Int = 2

val IOCTL_STORAGE_BASE: Int = 45

val IOCTL_STORAGE_CHECK_VERIFY: Int = 2967552

val IOCTL_STORAGE_CHECK_VERIFY2: Int = 2951168

val IOCTL_STORAGE_MEDIA_REMOVAL: Int = 2967556

val IOCTL_STORAGE_EJECT_MEDIA: Int = 2967560

val IOCTL_STORAGE_LOAD_MEDIA: Int = 2967564

val IOCTL_STORAGE_LOAD_MEDIA2: Int = 2951180

val IOCTL_STORAGE_RESERVE: Int = 2967568

val IOCTL_STORAGE_RELEASE: Int = 2967572

val IOCTL_STORAGE_FIND_NEW_DEVICES: Int = 2967576

val IOCTL_STORAGE_EJECTION_CONTROL: Int = 2951488

val IOCTL_STORAGE_MCN_CONTROL: Int = 2951492

val IOCTL_STORAGE_GET_MEDIA_TYPES: Int = 2952192

val IOCTL_STORAGE_GET_MEDIA_TYPES_EX: Int = 2952196

val IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER: Int = 2952208

val IOCTL_STORAGE_GET_HOTPLUG_INFO: Int = 2952212

val IOCTL_STORAGE_SET_HOTPLUG_INFO: Int = 3001368

val IOCTL_STORAGE_RESET_BUS: Int = 2969600

val IOCTL_STORAGE_RESET_DEVICE: Int = 2969604

val IOCTL_STORAGE_BREAK_RESERVATION: Int = 2969620

val IOCTL_STORAGE_GET_DEVICE_NUMBER: Int = 2953344

val IOCTL_STORAGE_PREDICT_FAILURE: Int = 2953472

val IOCTL_STORAGE_READ_CAPACITY: Int = 2969920

val OBSOLETE_IOCTL_STORAGE_RESET_BUS: Int = 3002368

val OBSOLETE_IOCTL_STORAGE_RESET_DEVICE: Int = 3002372

val RECOVERED_WRITES_VALID: Int = 1

val UNRECOVERED_WRITES_VALID: Int = 2

val RECOVERED_READS_VALID: Int = 4

val UNRECOVERED_READS_VALID: Int = 8

val WRITE_COMPRESSION_INFO_VALID: Int = 16

val READ_COMPRESSION_INFO_VALID: Int = 32

val TAPE_RETURN_STATISTICS: Int = 0

val TAPE_RETURN_ENV_INFO: Int = 1

val TAPE_RESET_STATISTICS: Int = 2

val MEDIA_ERASEABLE: Int = 1

val MEDIA_WRITE_ONCE: Int = 2

val MEDIA_READ_ONLY: Int = 4

val MEDIA_READ_WRITE: Int = 8

val MEDIA_WRITE_PROTECTED: Int = 256

val MEDIA_CURRENTLY_MOUNTED: Int = -2147483648

val IOCTL_DISK_BASE: Int = 7

val IOCTL_DISK_GET_DRIVE_GEOMETRY: Int = 458752

val IOCTL_DISK_GET_PARTITION_INFO: Int = 475140

val IOCTL_DISK_SET_PARTITION_INFO: Int = 507912

val IOCTL_DISK_GET_DRIVE_LAYOUT: Int = 475148

val IOCTL_DISK_SET_DRIVE_LAYOUT: Int = 507920

val IOCTL_DISK_VERIFY: Int = 458772

val IOCTL_DISK_FORMAT_TRACKS: Int = 507928

val IOCTL_DISK_REASSIGN_BLOCKS: Int = 507932

val IOCTL_DISK_PERFORMANCE: Int = 458784

val IOCTL_DISK_IS_WRITABLE: Int = 458788

val IOCTL_DISK_LOGGING: Int = 458792

val IOCTL_DISK_FORMAT_TRACKS_EX: Int = 507948

val IOCTL_DISK_HISTOGRAM_STRUCTURE: Int = 458800

val IOCTL_DISK_HISTOGRAM_DATA: Int = 458804

val IOCTL_DISK_HISTOGRAM_RESET: Int = 458808

val IOCTL_DISK_REQUEST_STRUCTURE: Int = 458812

val IOCTL_DISK_REQUEST_DATA: Int = 458816

val IOCTL_DISK_PERFORMANCE_OFF: Int = 458848

val IOCTL_DISK_CONTROLLER_NUMBER: Int = 458820

val SMART_GET_VERSION: Int = 475264

val SMART_SEND_DRIVE_COMMAND: Int = 508036

val SMART_RCV_DRIVE_DATA: Int = 508040

val IOCTL_DISK_GET_PARTITION_INFO_EX: Int = 458824

val IOCTL_DISK_SET_PARTITION_INFO_EX: Int = 507980

val IOCTL_DISK_GET_DRIVE_LAYOUT_EX: Int = 458832

val IOCTL_DISK_SET_DRIVE_LAYOUT_EX: Int = 507988

val IOCTL_DISK_CREATE_DISK: Int = 507992

val IOCTL_DISK_GET_LENGTH_INFO: Int = 475228

val IOCTL_DISK_GET_DRIVE_GEOMETRY_EX: Int = 458912

val IOCTL_DISK_REASSIGN_BLOCKS_EX: Int = 508068

val IOCTL_DISK_UPDATE_DRIVE_SIZE: Int = 508104

val IOCTL_DISK_GROW_PARTITION: Int = 508112

val IOCTL_DISK_GET_CACHE_INFORMATION: Int = 475348

val IOCTL_DISK_SET_CACHE_INFORMATION: Int = 508120

val OBSOLETE_DISK_GET_WRITE_CACHE_STATE: Int = 475356

val IOCTL_DISK_DELETE_DRIVE_LAYOUT: Int = 508160

val IOCTL_DISK_UPDATE_PROPERTIES: Int = 459072

val IOCTL_DISK_RESET_SNAPSHOT_INFO: Int = 508432

val IOCTL_DISK_FORMAT_DRIVE: Int = 508876

val IOCTL_DISK_SENSE_DEVICE: Int = 459744

val IOCTL_DISK_CHECK_VERIFY: Int = 477184

val IOCTL_DISK_MEDIA_REMOVAL: Int = 477188

val IOCTL_DISK_EJECT_MEDIA: Int = 477192

val IOCTL_DISK_LOAD_MEDIA: Int = 477196

val IOCTL_DISK_RESERVE: Int = 477200

val IOCTL_DISK_RELEASE: Int = 477204

val IOCTL_DISK_FIND_NEW_DEVICES: Int = 477208

val IOCTL_DISK_GET_MEDIA_TYPES: Int = 461824

val IOCTL_STORAGE_QUERY_PROPERTY: Int = 2954240

val PARTITION_ENTRY_UNUSED: Int = 0

val PARTITION_FAT_12: Int = 1

val PARTITION_XENIX_1: Int = 2

val PARTITION_XENIX_2: Int = 3

val PARTITION_FAT_16: Int = 4

val PARTITION_EXTENDED: Int = 5

val PARTITION_HUGE: Int = 6

val PARTITION_IFS: Int = 7

val PARTITION_OS2BOOTMGR: Int = 10

val PARTITION_FAT32: Int = 11

val PARTITION_FAT32_XINT13: Int = 12

val PARTITION_XINT13: Int = 14

val PARTITION_XINT13_EXTENDED: Int = 15

val PARTITION_PREP: Int = 65

val PARTITION_LDM: Int = 66

val PARTITION_UNIX: Int = 99

val VALID_NTFT: Int = 192

val PARTITION_NTFT: Int = 128

val GPT_ATTRIBUTE_PLATFORM_REQUIRED: Int = 1

val GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER: Long = -9223372036854775807 - 1

val GPT_BASIC_DATA_ATTRIBUTE_HIDDEN: Long = 4611686018427387904

val GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY: Long = 2305843009213693952

val GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY: Long = 1152921504606846976

val HIST_NO_OF_BUCKETS: Int = 24

val HISTOGRAM_BUCKET_SIZE: Long = 8

val DISK_HISTOGRAM_SIZE: Long = 72

val DISK_LOGGING_START: Int = 0

val DISK_LOGGING_STOP: Int = 1

val DISK_LOGGING_DUMP: Int = 2

val DISK_BINNING: Int = 3

val CAP_ATA_ID_CMD: Int = 1

val CAP_ATAPI_ID_CMD: Int = 2

val CAP_SMART_CMD: Int = 4

val ATAPI_ID_CMD: Int = 161

val ID_CMD: Int = 236

val SMART_CMD: Int = 176

val SMART_CYL_LOW: Int = 79

val SMART_CYL_HI: Int = 194

val SMART_NO_ERROR: Int = 0

val SMART_IDE_ERROR: Int = 1

val SMART_INVALID_FLAG: Int = 2

val SMART_INVALID_COMMAND: Int = 3

val SMART_INVALID_BUFFER: Int = 4

val SMART_INVALID_DRIVE: Int = 5

val SMART_INVALID_IOCTL: Int = 6

val SMART_ERROR_NO_MEM: Int = 7

val SMART_INVALID_REGISTER: Int = 8

val SMART_NOT_SUPPORTED: Int = 9

val SMART_NO_IDE_DEVICE: Int = 10

val SMART_OFFLINE_ROUTINE_OFFLINE: Int = 0

val SMART_SHORT_SELFTEST_OFFLINE: Int = 1

val SMART_EXTENDED_SELFTEST_OFFLINE: Int = 2

val SMART_ABORT_OFFLINE_SELFTEST: Int = 127

val SMART_SHORT_SELFTEST_CAPTIVE: Int = 129

val SMART_EXTENDED_SELFTEST_CAPTIVE: Int = 130

val READ_ATTRIBUTE_BUFFER_SIZE: Int = 512

val IDENTIFY_BUFFER_SIZE: Int = 512

val READ_THRESHOLD_BUFFER_SIZE: Int = 512

val SMART_LOG_SECTOR_SIZE: Int = 512

val READ_ATTRIBUTES: Int = 208

val READ_THRESHOLDS: Int = 209

val ENABLE_DISABLE_AUTOSAVE: Int = 210

val SAVE_ATTRIBUTE_VALUES: Int = 211

val EXECUTE_OFFLINE_DIAGS: Int = 212

val SMART_READ_LOG: Int = 213

val SMART_WRITE_LOG: Int = 214

val ENABLE_SMART: Int = 216

val DISABLE_SMART: Int = 217

val RETURN_SMART_STATUS: Int = 218

val ENABLE_DISABLE_AUTO_OFFLINE: Int = 219

val IOCTL_CHANGER_BASE: Int = 48

val IOCTL_CHANGER_GET_PARAMETERS: Int = 3162112

val IOCTL_CHANGER_GET_STATUS: Int = 3162116

val IOCTL_CHANGER_GET_PRODUCT_DATA: Int = 3162120

val IOCTL_CHANGER_SET_ACCESS: Int = 3194896

val IOCTL_CHANGER_GET_ELEMENT_STATUS: Int = 3194900

val IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS: Int = 3162136

val IOCTL_CHANGER_SET_POSITION: Int = 3162140

val IOCTL_CHANGER_EXCHANGE_MEDIUM: Int = 3162144

val IOCTL_CHANGER_MOVE_MEDIUM: Int = 3162148

val IOCTL_CHANGER_REINITIALIZE_TRANSPORT: Int = 3162152

val IOCTL_CHANGER_QUERY_VOLUME_TAGS: Int = 3194924

val MAX_VOLUME_ID_SIZE: Int = 36

val MAX_VOLUME_TEMPLATE_SIZE: Int = 40

val VENDOR_ID_LENGTH: Int = 8

val PRODUCT_ID_LENGTH: Int = 16

val REVISION_LENGTH: Int = 4

val SERIAL_NUMBER_LENGTH: Int = 32

val CHANGER_BAR_CODE_SCANNER_INSTALLED: Int = 1

val CHANGER_INIT_ELEM_STAT_WITH_RANGE: Int = 2

val CHANGER_CLOSE_IEPORT: Int = 4

val CHANGER_OPEN_IEPORT: Int = 8

val CHANGER_STATUS_NON_VOLATILE: Int = 16

val CHANGER_EXCHANGE_MEDIA: Int = 32

val CHANGER_CLEANER_SLOT: Int = 64

val CHANGER_LOCK_UNLOCK: Int = 128

val CHANGER_CARTRIDGE_MAGAZINE: Int = 256

val CHANGER_MEDIUM_FLIP: Int = 512

val CHANGER_POSITION_TO_ELEMENT: Int = 1024

val CHANGER_REPORT_IEPORT_STATE: Int = 2048

val CHANGER_STORAGE_DRIVE: Int = 4096

val CHANGER_STORAGE_IEPORT: Int = 8192

val CHANGER_STORAGE_SLOT: Int = 16384

val CHANGER_STORAGE_TRANSPORT: Int = 32768

val CHANGER_DRIVE_CLEANING_REQUIRED: Int = 65536

val CHANGER_PREDISMOUNT_EJECT_REQUIRED: Int = 131072

val CHANGER_CLEANER_ACCESS_NOT_VALID: Int = 262144

val CHANGER_PREMOUNT_EJECT_REQUIRED: Int = 524288

val CHANGER_VOLUME_IDENTIFICATION: Int = 1048576

val CHANGER_VOLUME_SEARCH: Int = 2097152

val CHANGER_VOLUME_ASSERT: Int = 4194304

val CHANGER_VOLUME_REPLACE: Int = 8388608

val CHANGER_VOLUME_UNDEFINE: Int = 16777216

val CHANGER_SERIAL_NUMBER_VALID: Int = 67108864

val CHANGER_DEVICE_REINITIALIZE_CAPABLE: Int = 134217728

val CHANGER_KEYPAD_ENABLE_DISABLE: Int = 268435456

val CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS: Int = 536870912

val CHANGER_RESERVED_BIT: Int = -2147483648

val CHANGER_PREDISMOUNT_ALIGN_TO_SLOT: Int = -2147483647

val CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE: Int = -2147483646

val CHANGER_CLEANER_AUTODISMOUNT: Int = -2147483644

val CHANGER_TRUE_EXCHANGE_CAPABLE: Int = -2147483640

val CHANGER_SLOTS_USE_TRAYS: Int = -2147483632

val CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR: Int = -2147483616

val CHANGER_CLEANER_OPS_NOT_SUPPORTED: Int = -2147483584

val CHANGER_IEPORT_USER_CONTROL_OPEN: Int = -2147483520

val CHANGER_IEPORT_USER_CONTROL_CLOSE: Int = -2147483392

val CHANGER_MOVE_EXTENDS_IEPORT: Int = -2147483136

val CHANGER_MOVE_RETRACTS_IEPORT: Int = -2147482624

val CHANGER_TO_TRANSPORT: Int = 1

val CHANGER_TO_SLOT: Int = 2

val CHANGER_TO_IEPORT: Int = 4

val CHANGER_TO_DRIVE: Int = 8

val LOCK_UNLOCK_IEPORT: Int = 1

val LOCK_UNLOCK_DOOR: Int = 2

val LOCK_UNLOCK_KEYPAD: Int = 4

val LOCK_ELEMENT: Int = 0

val UNLOCK_ELEMENT: Int = 1

val EXTEND_IEPORT: Int = 2

val RETRACT_IEPORT: Int = 3

val ELEMENT_STATUS_FULL: Int = 1

val ELEMENT_STATUS_IMPEXP: Int = 2

val ELEMENT_STATUS_EXCEPT: Int = 4

val ELEMENT_STATUS_ACCESS: Int = 8

val ELEMENT_STATUS_EXENAB: Int = 16

val ELEMENT_STATUS_INENAB: Int = 32

val ELEMENT_STATUS_PRODUCT_DATA: Int = 64

val ELEMENT_STATUS_LUN_VALID: Int = 4096

val ELEMENT_STATUS_ID_VALID: Int = 8192

val ELEMENT_STATUS_NOT_BUS: Int = 32768

val ELEMENT_STATUS_INVERT: Int = 4194304

val ELEMENT_STATUS_SVALID: Int = 8388608

val ELEMENT_STATUS_PVOLTAG: Int = 268435456

val ELEMENT_STATUS_AVOLTAG: Int = 536870912

val ERROR_LABEL_UNREADABLE: Int = 1

val ERROR_LABEL_QUESTIONABLE: Int = 2

val ERROR_SLOT_NOT_PRESENT: Int = 4

val ERROR_DRIVE_NOT_INSTALLED: Int = 8

val ERROR_TRAY_MALFUNCTION: Int = 16

val ERROR_INIT_STATUS_NEEDED: Int = 17

val ERROR_UNHANDLED_ERROR: Int = -1

val SEARCH_ALL: Int = 0

val SEARCH_PRIMARY: Int = 1

val SEARCH_ALTERNATE: Int = 2

val SEARCH_ALL_NO_SEQ: Int = 4

val SEARCH_PRI_NO_SEQ: Int = 5

val SEARCH_ALT_NO_SEQ: Int = 6

val ASSERT_PRIMARY: Int = 8

val ASSERT_ALTERNATE: Int = 9

val REPLACE_PRIMARY: Int = 10

val REPLACE_ALTERNATE: Int = 11

val UNDEFINE_PRIMARY: Int = 12

val UNDEFINE_ALTERNATE: Int = 13

val IOCTL_SERIAL_LSRMST_INSERT: Int = 1769596

val IOCTL_SERENUM_EXPOSE_HARDWARE: Int = 3604992

val IOCTL_SERENUM_REMOVE_HARDWARE: Int = 3604996

val IOCTL_SERENUM_PORT_DESC: Int = 3605000

val IOCTL_SERENUM_GET_PORT_NAME: Int = 3605004

val SERIAL_LSRMST_ESCAPE: BYTE = 0

val SERIAL_LSRMST_LSR_DATA: BYTE = 1

val SERIAL_LSRMST_LSR_NODATA: BYTE = 2

val SERIAL_LSRMST_MST: BYTE = 3

val SERIAL_IOC_FCR_FIFO_ENABLE: DWORD = 1

val SERIAL_IOC_FCR_RCVR_RESET: DWORD = 2

val SERIAL_IOC_FCR_XMIT_RESET: DWORD = 4

val SERIAL_IOC_FCR_DMA_MODE: DWORD = 8

val SERIAL_IOC_FCR_RES1: DWORD = 16

val SERIAL_IOC_FCR_RES2: DWORD = 32

val SERIAL_IOC_FCR_RCVR_TRIGGER_LSB: DWORD = 64

val SERIAL_IOC_FCR_RCVR_TRIGGER_MSB: DWORD = 128

val SERIAL_IOC_MCR_DTR: DWORD = 1

val SERIAL_IOC_MCR_RTS: DWORD = 2

val SERIAL_IOC_MCR_OUT1: DWORD = 4

val SERIAL_IOC_MCR_OUT2: DWORD = 8

val SERIAL_IOC_MCR_LOOP: DWORD = 16

val FSCTL_REQUEST_OPLOCK_LEVEL_1: Int = 589824

val FSCTL_REQUEST_OPLOCK_LEVEL_2: Int = 589828

val FSCTL_REQUEST_BATCH_OPLOCK: Int = 589832

val FSCTL_OPLOCK_BREAK_ACKNOWLEDGE: Int = 589836

val FSCTL_OPBATCH_ACK_CLOSE_PENDING: Int = 589840

val FSCTL_OPLOCK_BREAK_NOTIFY: Int = 589844

val FSCTL_LOCK_VOLUME: Int = 589848

val FSCTL_UNLOCK_VOLUME: Int = 589852

val FSCTL_DISMOUNT_VOLUME: Int = 589856

val FSCTL_IS_VOLUME_MOUNTED: Int = 589864

val FSCTL_IS_PATHNAME_VALID: Int = 589868

val FSCTL_MARK_VOLUME_DIRTY: Int = 589872

val FSCTL_QUERY_RETRIEVAL_POINTERS: Int = 589883

val FSCTL_GET_COMPRESSION: Int = 589884

val FSCTL_SET_COMPRESSION: Int = 639040

val FSCTL_MARK_AS_SYSTEM_HIVE: Int = 589903

val FSCTL_OPLOCK_BREAK_ACK_NO_2: Int = 589904

val FSCTL_INVALIDATE_VOLUMES: Int = 589908

val FSCTL_QUERY_FAT_BPB: Int = 589912

val FSCTL_REQUEST_FILTER_OPLOCK: Int = 589916

val FSCTL_FILESYSTEM_GET_STATISTICS: Int = 589920

val FSCTL_GET_NTFS_VOLUME_DATA: Int = 589924

val FSCTL_GET_NTFS_FILE_RECORD: Int = 589928

val FSCTL_GET_VOLUME_BITMAP: Int = 589935

val FSCTL_GET_RETRIEVAL_POINTERS: Int = 589939

val FSCTL_MOVE_FILE: Int = 589940

val FSCTL_IS_VOLUME_DIRTY: Int = 589944

val FSCTL_ALLOW_EXTENDED_DASD_IO: Int = 589955

val FSCTL_FIND_FILES_BY_SID: Int = 589967

val FSCTL_SET_OBJECT_ID: Int = 589976

val FSCTL_GET_OBJECT_ID: Int = 589980

val FSCTL_DELETE_OBJECT_ID: Int = 589984

val FSCTL_SET_REPARSE_POINT: Int = 589988

val FSCTL_GET_REPARSE_POINT: Int = 589992

val FSCTL_DELETE_REPARSE_POINT: Int = 589996

val FSCTL_ENUM_USN_DATA: Int = 590003

val FSCTL_SECURITY_ID_CHECK: Int = 606391

val FSCTL_READ_USN_JOURNAL: Int = 590011

val FSCTL_SET_OBJECT_ID_EXTENDED: Int = 590012

val FSCTL_CREATE_OR_GET_OBJECT_ID: Int = 590016

val FSCTL_SET_SPARSE: Int = 590020

val FSCTL_SET_ZERO_DATA: Int = 622792

val FSCTL_QUERY_ALLOCATED_RANGES: Int = 606415

val FSCTL_SET_ENCRYPTION: Int = 590039

val FSCTL_ENCRYPTION_FSCTL_IO: Int = 590043

val FSCTL_WRITE_RAW_ENCRYPTED: Int = 590047

val FSCTL_READ_RAW_ENCRYPTED: Int = 590051

val FSCTL_CREATE_USN_JOURNAL: Int = 590055

val FSCTL_READ_FILE_USN_DATA: Int = 590059

val FSCTL_WRITE_USN_CLOSE_RECORD: Int = 590063

val FSCTL_EXTEND_VOLUME: Int = 590064

val FSCTL_QUERY_USN_JOURNAL: Int = 590068

val FSCTL_DELETE_USN_JOURNAL: Int = 590072

val FSCTL_MARK_HANDLE: Int = 590076

val FSCTL_SIS_COPYFILE: Int = 590080

val FSCTL_SIS_LINK_FILES: Int = 639236

val FSCTL_HSM_MSG: Int = 639240

val FSCTL_HSM_DATA: Int = 639251

val FSCTL_RECALL_FILE: Int = 590103

val FSCTL_READ_FROM_PLEX: Int = 606494

val FSCTL_FILE_PREFETCH: Int = 590112

val USN_PAGE_SIZE: Int = 4096

val USN_REASON_DATA_OVERWRITE: Int = 1

val USN_REASON_DATA_EXTEND: Int = 2

val USN_REASON_DATA_TRUNCATION: Int = 4

val USN_REASON_NAMED_DATA_OVERWRITE: Int = 16

val USN_REASON_NAMED_DATA_EXTEND: Int = 32

val USN_REASON_NAMED_DATA_TRUNCATION: Int = 64

val USN_REASON_FILE_CREATE: Int = 256

val USN_REASON_FILE_DELETE: Int = 512

val USN_REASON_EA_CHANGE: Int = 1024

val USN_REASON_SECURITY_CHANGE: Int = 2048

val USN_REASON_RENAME_OLD_NAME: Int = 4096

val USN_REASON_RENAME_NEW_NAME: Int = 8192

val USN_REASON_INDEXABLE_CHANGE: Int = 16384

val USN_REASON_BASIC_INFO_CHANGE: Int = 32768

val USN_REASON_HARD_LINK_CHANGE: Int = 65536

val USN_REASON_COMPRESSION_CHANGE: Int = 131072

val USN_REASON_ENCRYPTION_CHANGE: Int = 262144

val USN_REASON_OBJECT_ID_CHANGE: Int = 524288

val USN_REASON_REPARSE_POINT_CHANGE: Int = 1048576

val USN_REASON_STREAM_CHANGE: Int = 2097152

val USN_REASON_CLOSE: Int = -2147483648

val USN_DELETE_FLAG_DELETE: Int = 1

val USN_DELETE_FLAG_NOTIFY: Int = 2

val USN_DELETE_VALID_FLAGS: Int = 3

val USN_SOURCE_DATA_MANAGEMENT: Int = 1

val USN_SOURCE_AUXILIARY_DATA: Int = 2

val USN_SOURCE_REPLICATION_MANAGEMENT: Int = 4

val MARK_HANDLE_PROTECT_CLUSTERS: Int = 1

val MARK_HANDLE_TXF_SYSTEM_LOG: Int = 4

val MARK_HANDLE_NOT_TXF_SYSTEM_LOG: Int = 8

val MARK_HANDLE_REALTIME: Int = 32

val MARK_HANDLE_NOT_REALTIME: Int = 64

val VOLUME_IS_DIRTY: Int = 1

val VOLUME_UPGRADE_SCHEDULED: Int = 2

val FILE_PREFETCH_TYPE_FOR_CREATE: Int = 1

val FILESYSTEM_STATISTICS_TYPE_NTFS: Int = 1

val FILESYSTEM_STATISTICS_TYPE_FAT: Int = 2

val FILE_SET_ENCRYPTION: Int = 1

val FILE_CLEAR_ENCRYPTION: Int = 2

val STREAM_SET_ENCRYPTION: Int = 3

val STREAM_CLEAR_ENCRYPTION: Int = 4

val MAXIMUM_ENCRYPTION_VALUE: Int = 4

val ENCRYPTION_FORMAT_DEFAULT: Int = 1

val COMPRESSION_FORMAT_SPARSE: Int = 16384

val COPYFILE_SIS_LINK: Int = 1

val COPYFILE_SIS_REPLACE: Int = 2

val COPYFILE_SIS_FLAGS: Int = 3

val IOCTL_VOLUME_BASE: DWORD = 86

val IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS: Int = 5636096

val IOCTL_VOLUME_SUPPORTS_ONLINE_OFFLINE: Int = 5636100

val IOCTL_VOLUME_ONLINE: Int = 5685256

val IOCTL_VOLUME_OFFLINE: Int = 5685260

val IOCTL_VOLUME_IS_OFFLINE: Int = 5636112

val IOCTL_VOLUME_IS_IO_CAPABLE: Int = 5636116

val IOCTL_VOLUME_QUERY_FAILOVER_SET: Int = 5636120

val IOCTL_VOLUME_QUERY_VOLUME_NUMBER: Int = 5636124

val IOCTL_VOLUME_LOGICAL_TO_PHYSICAL: Int = 5636128

val IOCTL_VOLUME_PHYSICAL_TO_LOGICAL: Int = 5636132

val IOCTL_VOLUME_IS_CLUSTERED: Int = 5636144

val IOCTL_VOLUME_GET_GPT_ATTRIBUTES: Int = 5636152

val SCARD_ATR_LENGTH: Int = 33

val SCARD_PROTOCOL_UNDEFINED: Int = 0

val SCARD_PROTOCOL_T0: Int = 1

val SCARD_PROTOCOL_T1: Int = 2

val SCARD_PROTOCOL_RAW: Int = 65536

val SCARD_PROTOCOL_Tx: Int = 3

val SCARD_PROTOCOL_DEFAULT: Int = -2147483648

val SCARD_PROTOCOL_OPTIMAL: Int = 0

val SCARD_POWER_DOWN: Int = 0

val SCARD_COLD_RESET: Int = 1

val SCARD_WARM_RESET: Int = 2

val IOCTL_SMARTCARD_POWER: Int = 3211268

val IOCTL_SMARTCARD_GET_ATTRIBUTE: Int = 3211272

val IOCTL_SMARTCARD_SET_ATTRIBUTE: Int = 3211276

val IOCTL_SMARTCARD_CONFISCATE: Int = 3211280

val IOCTL_SMARTCARD_TRANSMIT: Int = 3211284

val IOCTL_SMARTCARD_EJECT: Int = 3211288

val IOCTL_SMARTCARD_SWALLOW: Int = 3211292

val IOCTL_SMARTCARD_IS_PRESENT: Int = 3211304

val IOCTL_SMARTCARD_IS_ABSENT: Int = 3211308

val IOCTL_SMARTCARD_SET_PROTOCOL: Int = 3211312

val IOCTL_SMARTCARD_GET_STATE: Int = 3211320

val IOCTL_SMARTCARD_GET_LAST_ERROR: Int = 3211324

val IOCTL_SMARTCARD_GET_PERF_CNTR: Int = 3211328

val MAXIMUM_ATTR_STRING_LENGTH: Int = 32

val MAXIMUM_SMARTCARD_READERS: Int = 10

val SCARD_CLASS_VENDOR_INFO: Int = 1

val SCARD_CLASS_COMMUNICATIONS: Int = 2

val SCARD_CLASS_PROTOCOL: Int = 3

val SCARD_CLASS_POWER_MGMT: Int = 4

val SCARD_CLASS_SECURITY: Int = 5

val SCARD_CLASS_MECHANICAL: Int = 6

val SCARD_CLASS_VENDOR_DEFINED: Int = 7

val SCARD_CLASS_IFD_PROTOCOL: Int = 8

val SCARD_CLASS_ICC_STATE: Int = 9

val SCARD_CLASS_PERF: Int = 32766

val SCARD_CLASS_SYSTEM: Int = 32767

val SCARD_ATTR_VENDOR_NAME: Int = 65792

val SCARD_ATTR_VENDOR_IFD_TYPE: Int = 65793

val SCARD_ATTR_VENDOR_IFD_VERSION: Int = 65794

val SCARD_ATTR_VENDOR_IFD_SERIAL_NO: Int = 65795

val SCARD_ATTR_CHANNEL_ID: Int = 131344

val SCARD_ATTR_PROTOCOL_TYPES: Int = 196896

val SCARD_ATTR_DEFAULT_CLK: Int = 196897

val SCARD_ATTR_MAX_CLK: Int = 196898

val SCARD_ATTR_DEFAULT_DATA_RATE: Int = 196899

val SCARD_ATTR_MAX_DATA_RATE: Int = 196900

val SCARD_ATTR_MAX_IFSD: Int = 196901

val SCARD_ATTR_POWER_MGMT_SUPPORT: Int = 262449

val SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE: Int = 328000

val SCARD_ATTR_USER_AUTH_INPUT_DEVICE: Int = 328002

val SCARD_ATTR_CHARACTERISTICS: Int = 393552

val SCARD_ATTR_CURRENT_PROTOCOL_TYPE: Int = 524801

val SCARD_ATTR_CURRENT_CLK: Int = 524802

val SCARD_ATTR_CURRENT_F: Int = 524803

val SCARD_ATTR_CURRENT_D: Int = 524804

val SCARD_ATTR_CURRENT_N: Int = 524805

val SCARD_ATTR_CURRENT_W: Int = 524806

val SCARD_ATTR_CURRENT_IFSC: Int = 524807

val SCARD_ATTR_CURRENT_IFSD: Int = 524808

val SCARD_ATTR_CURRENT_BWT: Int = 524809

val SCARD_ATTR_CURRENT_CWT: Int = 524810

val SCARD_ATTR_CURRENT_EBC_ENCODING: Int = 524811

val SCARD_ATTR_EXTENDED_BWT: Int = 524812

val SCARD_ATTR_ICC_PRESENCE: Int = 590592

val SCARD_ATTR_ICC_INTERFACE_STATUS: Int = 590593

val SCARD_ATTR_CURRENT_IO_STATE: Int = 590594

val SCARD_ATTR_ATR_STRING: Int = 590595

val SCARD_ATTR_ICC_TYPE_PER_ATR: Int = 590596

val SCARD_ATTR_ESC_RESET: Int = 499712

val SCARD_ATTR_ESC_CANCEL: Int = 499715

val SCARD_ATTR_ESC_AUTHREQUEST: Int = 499717

val SCARD_ATTR_MAXINPUT: Int = 499719

val SCARD_ATTR_DEVICE_UNIT: Int = 2147418113

val SCARD_ATTR_DEVICE_IN_USE: Int = 2147418114

val SCARD_ATTR_DEVICE_FRIENDLY_NAME_A: Int = 2147418115

val SCARD_ATTR_DEVICE_SYSTEM_NAME_A: Int = 2147418116

val SCARD_ATTR_DEVICE_FRIENDLY_NAME_W: Int = 2147418117

val SCARD_ATTR_DEVICE_SYSTEM_NAME_W: Int = 2147418118

val SCARD_ATTR_SUPRESS_T1_IFS_REQUEST: Int = 2147418119

val SCARD_PERF_NUM_TRANSMISSIONS: Int = 2147352577

val SCARD_PERF_BYTES_TRANSMITTED: Int = 2147352578

val SCARD_PERF_TRANSMISSION_TIME: Int = 2147352579

val SCARD_ATTR_DEVICE_FRIENDLY_NAME: Int = 2147418117

val SCARD_ATTR_DEVICE_SYSTEM_NAME: Int = 2147418118

val SCARD_T0_HEADER_LENGTH: Int = 7

val SCARD_T0_CMD_LENGTH: Int = 5

val SCARD_T1_PROLOGUE_LENGTH: Int = 3

val SCARD_T1_EPILOGUE_LENGTH: Int = 2

val SCARD_T1_MAX_IFS: Int = 254

val SCARD_UNKNOWN: Int = 0

val SCARD_ABSENT: Int = 1

val SCARD_PRESENT: Int = 2

val SCARD_SWALLOWED: Int = 3

val SCARD_POWERED: Int = 4

val SCARD_NEGOTIABLE: Int = 5

val SCARD_SPECIFIC: Int = 6

val SCARD_READER_SWALLOWS: Int = 1

val SCARD_READER_EJECTS: Int = 2

val SCARD_READER_CONFISCATES: Int = 4

val SCARD_READER_TYPE_SERIAL: Int = 1

val SCARD_READER_TYPE_PARALELL: Int = 2

val SCARD_READER_TYPE_KEYBOARD: Int = 4

val SCARD_READER_TYPE_SCSI: Int = 8

val SCARD_READER_TYPE_IDE: Int = 16

val SCARD_READER_TYPE_USB: Int = 32

val SCARD_READER_TYPE_PCMCIA: Int = 64

val SCARD_READER_TYPE_VENDOR: Int = 240

val SCARD_AUTOALLOCATE: DWORD = -1

val SCARD_SCOPE_USER: Int = 0

val SCARD_SCOPE_TERMINAL: Int = 1

val SCARD_SCOPE_SYSTEM: Int = 2

val SCARD_PROVIDER_PRIMARY: Int = 1

val SCARD_PROVIDER_CSP: Int = 2

val SCARD_STATE_UNAWARE: Int = 0

val SCARD_STATE_IGNORE: Int = 1

val SCARD_STATE_CHANGED: Int = 2

val SCARD_STATE_UNKNOWN: Int = 4

val SCARD_STATE_UNAVAILABLE: Int = 8

val SCARD_STATE_EMPTY: Int = 16

val SCARD_STATE_PRESENT: Int = 32

val SCARD_STATE_ATRMATCH: Int = 64

val SCARD_STATE_EXCLUSIVE: Int = 128

val SCARD_STATE_INUSE: Int = 256

val SCARD_STATE_MUTE: Int = 512

val SCARD_STATE_UNPOWERED: Int = 1024

val SCARD_SHARE_EXCLUSIVE: Int = 1

val SCARD_SHARE_SHARED: Int = 2

val SCARD_SHARE_DIRECT: Int = 3

val SCARD_LEAVE_CARD: Int = 0

val SCARD_RESET_CARD: Int = 1

val SCARD_UNPOWER_CARD: Int = 2

val SCARD_EJECT_CARD: Int = 3

val SC_DLG_MINIMAL_UI: Int = 1

val SC_DLG_NO_UI: Int = 2

val SC_DLG_FORCE_UI: Int = 4

val SCERR_NOCARDNAME: Int = 16384

val SCERR_NOGUIDS: Int = 32768

val DSPRINT_PUBLISH: Int = 1

val DSPRINT_UPDATE: Int = 2

val DSPRINT_UNPUBLISH: Int = 4

val DSPRINT_REPUBLISH: Int = 8

val DSPRINT_PENDING: Int = -2147483648

val PRINTER_CONTROL_PAUSE: Int = 1

val PRINTER_CONTROL_RESUME: Int = 2

val PRINTER_CONTROL_PURGE: Int = 3

val PRINTER_CONTROL_SET_STATUS: Int = 4

val PRINTER_STATUS_PAUSED: Int = 1

val PRINTER_STATUS_ERROR: Int = 2

val PRINTER_STATUS_PENDING_DELETION: Int = 4

val PRINTER_STATUS_PAPER_JAM: Int = 8

val PRINTER_STATUS_PAPER_OUT: Int = 16

val PRINTER_STATUS_MANUAL_FEED: Int = 32

val PRINTER_STATUS_PAPER_PROBLEM: Int = 64

val PRINTER_STATUS_OFFLINE: Int = 128

val PRINTER_STATUS_IO_ACTIVE: Int = 256

val PRINTER_STATUS_BUSY: Int = 512

val PRINTER_STATUS_PRINTING: Int = 1024

val PRINTER_STATUS_OUTPUT_BIN_FULL: Int = 2048

val PRINTER_STATUS_NOT_AVAILABLE: Int = 4096

val PRINTER_STATUS_WAITING: Int = 8192

val PRINTER_STATUS_PROCESSING: Int = 16384

val PRINTER_STATUS_INITIALIZING: Int = 32768

val PRINTER_STATUS_WARMING_UP: Int = 65536

val PRINTER_STATUS_TONER_LOW: Int = 131072

val PRINTER_STATUS_NO_TONER: Int = 262144

val PRINTER_STATUS_PAGE_PUNT: Int = 524288

val PRINTER_STATUS_USER_INTERVENTION: Int = 1048576

val PRINTER_STATUS_OUT_OF_MEMORY: Int = 2097152

val PRINTER_STATUS_DOOR_OPEN: Int = 4194304

val PRINTER_STATUS_SERVER_UNKNOWN: Int = 8388608

val PRINTER_STATUS_POWER_SAVE: Int = 16777216

val PRINTER_ATTRIBUTE_QUEUED: Int = 1

val PRINTER_ATTRIBUTE_DIRECT: Int = 2

val PRINTER_ATTRIBUTE_DEFAULT: Int = 4

val PRINTER_ATTRIBUTE_SHARED: Int = 8

val PRINTER_ATTRIBUTE_NETWORK: Int = 16

val PRINTER_ATTRIBUTE_HIDDEN: Int = 32

val PRINTER_ATTRIBUTE_LOCAL: Int = 64

val PRINTER_ATTRIBUTE_ENABLE_DEVQ: Int = 128

val PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS: Int = 256

val PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST: Int = 512

val PRINTER_ATTRIBUTE_WORK_OFFLINE: Int = 1024

val PRINTER_ATTRIBUTE_ENABLE_BIDI: Int = 2048

val PRINTER_ATTRIBUTE_RAW_ONLY: Int = 4096

val PRINTER_ATTRIBUTE_PUBLISHED: Int = 8192

val PRINTER_ATTRIBUTE_FAX: Int = 16384

val PRINTER_ATTRIBUTE_TS: Int = 32768

val NO_PRIORITY: Int = 0

val MAX_PRIORITY: Int = 99

val MIN_PRIORITY: Int = 1

val DEF_PRIORITY: Int = 1

val JOB_CONTROL_PAUSE: Int = 1

val JOB_CONTROL_RESUME: Int = 2

val JOB_CONTROL_CANCEL: Int = 3

val JOB_CONTROL_RESTART: Int = 4

val JOB_CONTROL_DELETE: Int = 5

val JOB_CONTROL_SENT_TO_PRINTER: Int = 6

val JOB_CONTROL_LAST_PAGE_EJECTED: Int = 7

val JOB_STATUS_PAUSED: Int = 1

val JOB_STATUS_ERROR: Int = 2

val JOB_STATUS_DELETING: Int = 4

val JOB_STATUS_SPOOLING: Int = 8

val JOB_STATUS_PRINTING: Int = 16

val JOB_STATUS_OFFLINE: Int = 32

val JOB_STATUS_PAPEROUT: Int = 64

val JOB_STATUS_PRINTED: Int = 128

val JOB_STATUS_DELETED: Int = 256

val JOB_STATUS_BLOCKED_DEVQ: Int = 512

val JOB_STATUS_USER_INTERVENTION: Int = 1024

val JOB_STATUS_RESTART: Int = 2048

val JOB_STATUS_COMPLETE: Int = 4096

val JOB_POSITION_UNSPECIFIED: Int = 0

val DRIVER_KERNELMODE: Int = 1

val DRIVER_USERMODE: Int = 2

val DPD_DELETE_UNUSED_FILES: Int = 1

val DPD_DELETE_SPECIFIC_VERSION: Int = 2

val DPD_DELETE_ALL_FILES: Int = 4

val APD_STRICT_UPGRADE: Int = 1

val APD_STRICT_DOWNGRADE: Int = 2

val APD_COPY_ALL_FILES: Int = 4

val APD_COPY_NEW_FILES: Int = 8

val APD_COPY_FROM_DIRECTORY: Int = 16

val DI_CHANNEL: Int = 1

val DI_READ_SPOOL_JOB: Int = 3

val DI_MEMORYMAP_WRITE: Int = 1

val FORM_USER: Int = 0

val FORM_BUILTIN: Int = 1

val FORM_PRINTER: Int = 2

val NORMAL_PRINT: Int = 0

val REVERSE_PRINT: Int = 1

val PORT_TYPE_WRITE: Int = 1

val PORT_TYPE_READ: Int = 2

val PORT_TYPE_REDIRECTED: Int = 4

val PORT_TYPE_NET_ATTACHED: Int = 8

val PORT_STATUS_TYPE_ERROR: Int = 1

val PORT_STATUS_TYPE_WARNING: Int = 2

val PORT_STATUS_TYPE_INFO: Int = 3

val PORT_STATUS_OFFLINE: Int = 1

val PORT_STATUS_PAPER_JAM: Int = 2

val PORT_STATUS_PAPER_OUT: Int = 3

val PORT_STATUS_OUTPUT_BIN_FULL: Int = 4

val PORT_STATUS_PAPER_PROBLEM: Int = 5

val PORT_STATUS_NO_TONER: Int = 6

val PORT_STATUS_DOOR_OPEN: Int = 7

val PORT_STATUS_USER_INTERVENTION: Int = 8

val PORT_STATUS_OUT_OF_MEMORY: Int = 9

val PORT_STATUS_TONER_LOW: Int = 10

val PORT_STATUS_WARMING_UP: Int = 11

val PORT_STATUS_POWER_SAVE: Int = 12

val PRINTER_ENUM_DEFAULT: Int = 1

val PRINTER_ENUM_LOCAL: Int = 2

val PRINTER_ENUM_CONNECTIONS: Int = 4

val PRINTER_ENUM_FAVORITE: Int = 4

val PRINTER_ENUM_NAME: Int = 8

val PRINTER_ENUM_REMOTE: Int = 16

val PRINTER_ENUM_SHARED: Int = 32

val PRINTER_ENUM_NETWORK: Int = 64

val PRINTER_ENUM_EXPAND: Int = 16384

val PRINTER_ENUM_CONTAINER: Int = 32768

val PRINTER_ENUM_ICONMASK: Int = 16711680

val PRINTER_ENUM_ICON1: Int = 65536

val PRINTER_ENUM_ICON2: Int = 131072

val PRINTER_ENUM_ICON3: Int = 262144

val PRINTER_ENUM_ICON4: Int = 524288

val PRINTER_ENUM_ICON5: Int = 1048576

val PRINTER_ENUM_ICON6: Int = 2097152

val PRINTER_ENUM_ICON7: Int = 4194304

val PRINTER_ENUM_ICON8: Int = 8388608

val PRINTER_ENUM_HIDE: Int = 16777216

val SPOOL_FILE_PERSISTENT: Int = 1

val SPOOL_FILE_TEMPORARY: Int = 2

val PRINTER_NOTIFY_TYPE: Int = 0

val JOB_NOTIFY_TYPE: Int = 1

val PRINTER_NOTIFY_FIELD_SERVER_NAME: Int = 0

val PRINTER_NOTIFY_FIELD_PRINTER_NAME: Int = 1

val PRINTER_NOTIFY_FIELD_SHARE_NAME: Int = 2

val PRINTER_NOTIFY_FIELD_PORT_NAME: Int = 3

val PRINTER_NOTIFY_FIELD_DRIVER_NAME: Int = 4

val PRINTER_NOTIFY_FIELD_COMMENT: Int = 5

val PRINTER_NOTIFY_FIELD_LOCATION: Int = 6

val PRINTER_NOTIFY_FIELD_DEVMODE: Int = 7

val PRINTER_NOTIFY_FIELD_SEPFILE: Int = 8

val PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR: Int = 9

val PRINTER_NOTIFY_FIELD_PARAMETERS: Int = 10

val PRINTER_NOTIFY_FIELD_DATATYPE: Int = 11

val PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR: Int = 12

val PRINTER_NOTIFY_FIELD_ATTRIBUTES: Int = 13

val PRINTER_NOTIFY_FIELD_PRIORITY: Int = 14

val PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY: Int = 15

val PRINTER_NOTIFY_FIELD_START_TIME: Int = 16

val PRINTER_NOTIFY_FIELD_UNTIL_TIME: Int = 17

val PRINTER_NOTIFY_FIELD_STATUS: Int = 18

val PRINTER_NOTIFY_FIELD_STATUS_STRING: Int = 19

val PRINTER_NOTIFY_FIELD_CJOBS: Int = 20

val PRINTER_NOTIFY_FIELD_AVERAGE_PPM: Int = 21

val PRINTER_NOTIFY_FIELD_TOTAL_PAGES: Int = 22

val PRINTER_NOTIFY_FIELD_PAGES_PRINTED: Int = 23

val PRINTER_NOTIFY_FIELD_TOTAL_BYTES: Int = 24

val PRINTER_NOTIFY_FIELD_BYTES_PRINTED: Int = 25

val PRINTER_NOTIFY_FIELD_OBJECT_GUID: Int = 26

val JOB_NOTIFY_FIELD_PRINTER_NAME: Int = 0

val JOB_NOTIFY_FIELD_MACHINE_NAME: Int = 1

val JOB_NOTIFY_FIELD_PORT_NAME: Int = 2

val JOB_NOTIFY_FIELD_USER_NAME: Int = 3

val JOB_NOTIFY_FIELD_NOTIFY_NAME: Int = 4

val JOB_NOTIFY_FIELD_DATATYPE: Int = 5

val JOB_NOTIFY_FIELD_PRINT_PROCESSOR: Int = 6

val JOB_NOTIFY_FIELD_PARAMETERS: Int = 7

val JOB_NOTIFY_FIELD_DRIVER_NAME: Int = 8

val JOB_NOTIFY_FIELD_DEVMODE: Int = 9

val JOB_NOTIFY_FIELD_STATUS: Int = 10

val JOB_NOTIFY_FIELD_STATUS_STRING: Int = 11

val JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR: Int = 12

val JOB_NOTIFY_FIELD_DOCUMENT: Int = 13

val JOB_NOTIFY_FIELD_PRIORITY: Int = 14

val JOB_NOTIFY_FIELD_POSITION: Int = 15

val JOB_NOTIFY_FIELD_SUBMITTED: Int = 16

val JOB_NOTIFY_FIELD_START_TIME: Int = 17

val JOB_NOTIFY_FIELD_UNTIL_TIME: Int = 18

val JOB_NOTIFY_FIELD_TIME: Int = 19

val JOB_NOTIFY_FIELD_TOTAL_PAGES: Int = 20

val JOB_NOTIFY_FIELD_PAGES_PRINTED: Int = 21

val JOB_NOTIFY_FIELD_TOTAL_BYTES: Int = 22

val JOB_NOTIFY_FIELD_BYTES_PRINTED: Int = 23

val PRINTER_NOTIFY_OPTIONS_REFRESH: Int = 1

val PRINTER_NOTIFY_INFO_DISCARDED: Int = 1

val BIDI_ACCESS_ADMINISTRATOR: Int = 1

val BIDI_ACCESS_USER: Int = 2

val ERROR_BIDI_STATUS_OK: Int = 0

val ERROR_BIDI_NOT_SUPPORTED: Int = 50

val ERROR_BIDI_ERROR_BASE: Int = 13000

val ERROR_BIDI_STATUS_WARNING: Int = 13001

val ERROR_BIDI_SCHEMA_READ_ONLY: Int = 13002

val ERROR_BIDI_SERVER_OFFLINE: Int = 13003

val ERROR_BIDI_DEVICE_OFFLINE: Int = 13004

val ERROR_BIDI_SCHEMA_NOT_SUPPORTED: Int = 13005

val PRINTER_CHANGE_ADD_PRINTER: Int = 1

val PRINTER_CHANGE_SET_PRINTER: Int = 2

val PRINTER_CHANGE_DELETE_PRINTER: Int = 4

val PRINTER_CHANGE_FAILED_CONNECTION_PRINTER: Int = 8

val PRINTER_CHANGE_PRINTER: Int = 255

val PRINTER_CHANGE_ADD_JOB: Int = 256

val PRINTER_CHANGE_SET_JOB: Int = 512

val PRINTER_CHANGE_DELETE_JOB: Int = 1024

val PRINTER_CHANGE_WRITE_JOB: Int = 2048

val PRINTER_CHANGE_JOB: Int = 65280

val PRINTER_CHANGE_ADD_FORM: Int = 65536

val PRINTER_CHANGE_SET_FORM: Int = 131072

val PRINTER_CHANGE_DELETE_FORM: Int = 262144

val PRINTER_CHANGE_FORM: Int = 458752

val PRINTER_CHANGE_ADD_PORT: Int = 1048576

val PRINTER_CHANGE_CONFIGURE_PORT: Int = 2097152

val PRINTER_CHANGE_DELETE_PORT: Int = 4194304

val PRINTER_CHANGE_PORT: Int = 7340032

val PRINTER_CHANGE_ADD_PRINT_PROCESSOR: Int = 16777216

val PRINTER_CHANGE_DELETE_PRINT_PROCESSOR: Int = 67108864

val PRINTER_CHANGE_PRINT_PROCESSOR: Int = 117440512

val PRINTER_CHANGE_ADD_PRINTER_DRIVER: Int = 268435456

val PRINTER_CHANGE_SET_PRINTER_DRIVER: Int = 536870912

val PRINTER_CHANGE_DELETE_PRINTER_DRIVER: Int = 1073741824

val PRINTER_CHANGE_PRINTER_DRIVER: Int = 1879048192

val PRINTER_CHANGE_TIMEOUT: Int = -2147483648

val PRINTER_CHANGE_ALL: Int = 2004353023

val PRINTER_ERROR_INFORMATION: Int = -2147483648

val PRINTER_ERROR_WARNING: Int = 1073741824

val PRINTER_ERROR_SEVERE: Int = 536870912

val PRINTER_ERROR_OUTOFPAPER: Int = 1

val PRINTER_ERROR_JAM: Int = 2

val PRINTER_ERROR_OUTOFTONER: Int = 4

val SERVER_ACCESS_ADMINISTER: Int = 1

val SERVER_ACCESS_ENUMERATE: Int = 2

val PRINTER_ACCESS_ADMINISTER: Int = 4

val PRINTER_ACCESS_USE: Int = 8

val JOB_ACCESS_ADMINISTER: Int = 16

val JOB_ACCESS_READ: Int = 32

val SERVER_ALL_ACCESS: Int = 983043

val SERVER_READ: Int = 131074

val SERVER_WRITE: Int = 131075

val SERVER_EXECUTE: Int = 131074

val PRINTER_ALL_ACCESS: Int = 983052

val PRINTER_READ: Int = 131080

val PRINTER_WRITE: Int = 131080

val PRINTER_EXECUTE: Int = 131080

val JOB_ALL_ACCESS: Int = 983088

val JOB_READ: Int = 131104

val JOB_WRITE: Int = 131088

val JOB_EXECUTE: Int = 131088

val SC_GROUP_IDENTIFIERW: Short = 43

val SC_GROUP_IDENTIFIERA: Int = 43

val SC_GROUP_IDENTIFIER: Short = 43

val SERVICE_NO_CHANGE: Int = -1

val SERVICE_ACTIVE: Int = 1

val SERVICE_INACTIVE: Int = 2

val SERVICE_STATE_ALL: Int = 3

val SERVICE_CONTROL_STOP: Int = 1

val SERVICE_CONTROL_PAUSE: Int = 2

val SERVICE_CONTROL_CONTINUE: Int = 3

val SERVICE_CONTROL_INTERROGATE: Int = 4

val SERVICE_CONTROL_SHUTDOWN: Int = 5

val SERVICE_CONTROL_PARAMCHANGE: Int = 6

val SERVICE_CONTROL_NETBINDADD: Int = 7

val SERVICE_CONTROL_NETBINDREMOVE: Int = 8

val SERVICE_CONTROL_NETBINDENABLE: Int = 9

val SERVICE_CONTROL_NETBINDDISABLE: Int = 10

val SERVICE_CONTROL_DEVICEEVENT: Int = 11

val SERVICE_CONTROL_HARDWAREPROFILECHANGE: Int = 12

val SERVICE_CONTROL_POWEREVENT: Int = 13

val SERVICE_CONTROL_SESSIONCHANGE: Int = 14

val SERVICE_STOPPED: Int = 1

val SERVICE_START_PENDING: Int = 2

val SERVICE_STOP_PENDING: Int = 3

val SERVICE_RUNNING: Int = 4

val SERVICE_CONTINUE_PENDING: Int = 5

val SERVICE_PAUSE_PENDING: Int = 6

val SERVICE_PAUSED: Int = 7

val SERVICE_ACCEPT_STOP: Int = 1

val SERVICE_ACCEPT_PAUSE_CONTINUE: Int = 2

val SERVICE_ACCEPT_SHUTDOWN: Int = 4

val SERVICE_ACCEPT_PARAMCHANGE: Int = 8

val SERVICE_ACCEPT_NETBINDCHANGE: Int = 16

val SERVICE_ACCEPT_HARDWAREPROFILECHANGE: Int = 32

val SERVICE_ACCEPT_POWEREVENT: Int = 64

val SERVICE_ACCEPT_SESSIONCHANGE: Int = 128

val SC_MANAGER_CONNECT: Int = 1

val SC_MANAGER_CREATE_SERVICE: Int = 2

val SC_MANAGER_ENUMERATE_SERVICE: Int = 4

val SC_MANAGER_LOCK: Int = 8

val SC_MANAGER_QUERY_LOCK_STATUS: Int = 16

val SC_MANAGER_MODIFY_BOOT_CONFIG: Int = 32

val SC_MANAGER_ALL_ACCESS: Int = 983103

val SERVICE_QUERY_CONFIG: Int = 1

val SERVICE_CHANGE_CONFIG: Int = 2

val SERVICE_QUERY_STATUS: Int = 4

val SERVICE_ENUMERATE_DEPENDENTS: Int = 8

val SERVICE_START: Int = 16

val SERVICE_STOP: Int = 32

val SERVICE_PAUSE_CONTINUE: Int = 64

val SERVICE_INTERROGATE: Int = 128

val SERVICE_USER_DEFINED_CONTROL: Int = 256

val SERVICE_ALL_ACCESS: Int = 983551

val SERVICE_RUNS_IN_SYSTEM_PROCESS: Int = 1

val SERVICE_CONFIG_DESCRIPTION: Int = 1

val SERVICE_CONFIG_FAILURE_ACTIONS: Int = 2

class _GROUP_AFFINITY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Mask: KAFFINITY
        get() = memberAt<KAFFINITYVar>(0).value
        set(value) { memberAt<KAFFINITYVar>(0).value = value }
    
    var Group: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    val Reserved: CArrayPointer<WORDVar>
        get() = arrayMemberAt(10)
    
}

class _FLOAT128(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var LowPart: Long
        get() = memberAt<LongVar>(0).value
        set(value) { memberAt<LongVar>(0).value = value }
    
    var HighPart: Long
        get() = memberAt<LongVar>(8).value
        set(value) { memberAt<LongVar>(8).value = value }
    
}

class _LARGE_INTEGER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    val u: anonymousStruct1
        get() = memberAt(0)
    
    var QuadPart: LONGLONG
        get() = memberAt<LONGLONGVar>(0).value
        set(value) { memberAt<LONGLONGVar>(0).value = value }
    
}

class anonymousStruct1(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var LowPart: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var HighPart: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
}

class anonymousStruct2(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var LowPart: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var HighPart: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
}

class _ULARGE_INTEGER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    val u: anonymousStruct3
        get() = memberAt(0)
    
    var QuadPart: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
}

class anonymousStruct3(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var LowPart: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var HighPart: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class anonymousStruct4(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var LowPart: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var HighPart: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _LUID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var LowPart: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var HighPart: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
}

class _LIST_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Flink: CPointer<_LIST_ENTRY>?
        get() = memberAt<CPointerVar<_LIST_ENTRY>>(0).value
        set(value) { memberAt<CPointerVar<_LIST_ENTRY>>(0).value = value }
    
    var Blink: CPointer<_LIST_ENTRY>?
        get() = memberAt<CPointerVar<_LIST_ENTRY>>(8).value
        set(value) { memberAt<CPointerVar<_LIST_ENTRY>>(8).value = value }
    
}

class _SINGLE_LIST_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var Next: CPointer<_SINGLE_LIST_ENTRY>?
        get() = memberAt<CPointerVar<_SINGLE_LIST_ENTRY>>(0).value
        set(value) { memberAt<CPointerVar<_SINGLE_LIST_ENTRY>>(0).value = value }
    
}

class LIST_ENTRY32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Flink: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Blink: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class LIST_ENTRY64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Flink: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var Blink: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
}

class _OBJECTID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val Lineage: GUID
        get() = memberAt(0)
    
    var Uniquifier: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _GUID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var Data1: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var Data2: Short
        get() = memberAt<ShortVar>(4).value
        set(value) { memberAt<ShortVar>(4).value = value }
    
    var Data3: Short
        get() = memberAt<ShortVar>(6).value
        set(value) { memberAt<ShortVar>(6).value = value }
    
    val Data4: CArrayPointer<ByteVar>
        get() = arrayMemberAt(8)
    
}

class _EXCEPTION_RECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(152, 8)
    
    var ExceptionCode: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ExceptionFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ExceptionRecord: CPointer<_EXCEPTION_RECORD>?
        get() = memberAt<CPointerVar<_EXCEPTION_RECORD>>(8).value
        set(value) { memberAt<CPointerVar<_EXCEPTION_RECORD>>(8).value = value }
    
    var ExceptionAddress: PVOID?
        get() = memberAt<PVOIDVar>(16).value
        set(value) { memberAt<PVOIDVar>(16).value = value }
    
    var NumberParameters: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val ExceptionInformation: CArrayPointer<ULONG_PTRVar>
        get() = arrayMemberAt(32)
    
}

class _CONTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1232, 16)
    
    var P1Home: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
    var P2Home: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
    var P3Home: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
    var P4Home: DWORD64
        get() = memberAt<DWORD64Var>(24).value
        set(value) { memberAt<DWORD64Var>(24).value = value }
    
    var P5Home: DWORD64
        get() = memberAt<DWORD64Var>(32).value
        set(value) { memberAt<DWORD64Var>(32).value = value }
    
    var P6Home: DWORD64
        get() = memberAt<DWORD64Var>(40).value
        set(value) { memberAt<DWORD64Var>(40).value = value }
    
    var ContextFlags: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var MxCsr: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var SegCs: WORD
        get() = memberAt<WORDVar>(56).value
        set(value) { memberAt<WORDVar>(56).value = value }
    
    var SegDs: WORD
        get() = memberAt<WORDVar>(58).value
        set(value) { memberAt<WORDVar>(58).value = value }
    
    var SegEs: WORD
        get() = memberAt<WORDVar>(60).value
        set(value) { memberAt<WORDVar>(60).value = value }
    
    var SegFs: WORD
        get() = memberAt<WORDVar>(62).value
        set(value) { memberAt<WORDVar>(62).value = value }
    
    var SegGs: WORD
        get() = memberAt<WORDVar>(64).value
        set(value) { memberAt<WORDVar>(64).value = value }
    
    var SegSs: WORD
        get() = memberAt<WORDVar>(66).value
        set(value) { memberAt<WORDVar>(66).value = value }
    
    var EFlags: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    var Dr0: DWORD64
        get() = memberAt<DWORD64Var>(72).value
        set(value) { memberAt<DWORD64Var>(72).value = value }
    
    var Dr1: DWORD64
        get() = memberAt<DWORD64Var>(80).value
        set(value) { memberAt<DWORD64Var>(80).value = value }
    
    var Dr2: DWORD64
        get() = memberAt<DWORD64Var>(88).value
        set(value) { memberAt<DWORD64Var>(88).value = value }
    
    var Dr3: DWORD64
        get() = memberAt<DWORD64Var>(96).value
        set(value) { memberAt<DWORD64Var>(96).value = value }
    
    var Dr6: DWORD64
        get() = memberAt<DWORD64Var>(104).value
        set(value) { memberAt<DWORD64Var>(104).value = value }
    
    var Dr7: DWORD64
        get() = memberAt<DWORD64Var>(112).value
        set(value) { memberAt<DWORD64Var>(112).value = value }
    
    var Rax: DWORD64
        get() = memberAt<DWORD64Var>(120).value
        set(value) { memberAt<DWORD64Var>(120).value = value }
    
    var Rcx: DWORD64
        get() = memberAt<DWORD64Var>(128).value
        set(value) { memberAt<DWORD64Var>(128).value = value }
    
    var Rdx: DWORD64
        get() = memberAt<DWORD64Var>(136).value
        set(value) { memberAt<DWORD64Var>(136).value = value }
    
    var Rbx: DWORD64
        get() = memberAt<DWORD64Var>(144).value
        set(value) { memberAt<DWORD64Var>(144).value = value }
    
    var Rsp: DWORD64
        get() = memberAt<DWORD64Var>(152).value
        set(value) { memberAt<DWORD64Var>(152).value = value }
    
    var Rbp: DWORD64
        get() = memberAt<DWORD64Var>(160).value
        set(value) { memberAt<DWORD64Var>(160).value = value }
    
    var Rsi: DWORD64
        get() = memberAt<DWORD64Var>(168).value
        set(value) { memberAt<DWORD64Var>(168).value = value }
    
    var Rdi: DWORD64
        get() = memberAt<DWORD64Var>(176).value
        set(value) { memberAt<DWORD64Var>(176).value = value }
    
    var R8: DWORD64
        get() = memberAt<DWORD64Var>(184).value
        set(value) { memberAt<DWORD64Var>(184).value = value }
    
    var R9: DWORD64
        get() = memberAt<DWORD64Var>(192).value
        set(value) { memberAt<DWORD64Var>(192).value = value }
    
    var R10: DWORD64
        get() = memberAt<DWORD64Var>(200).value
        set(value) { memberAt<DWORD64Var>(200).value = value }
    
    var R11: DWORD64
        get() = memberAt<DWORD64Var>(208).value
        set(value) { memberAt<DWORD64Var>(208).value = value }
    
    var R12: DWORD64
        get() = memberAt<DWORD64Var>(216).value
        set(value) { memberAt<DWORD64Var>(216).value = value }
    
    var R13: DWORD64
        get() = memberAt<DWORD64Var>(224).value
        set(value) { memberAt<DWORD64Var>(224).value = value }
    
    var R14: DWORD64
        get() = memberAt<DWORD64Var>(232).value
        set(value) { memberAt<DWORD64Var>(232).value = value }
    
    var R15: DWORD64
        get() = memberAt<DWORD64Var>(240).value
        set(value) { memberAt<DWORD64Var>(240).value = value }
    
    var Rip: DWORD64
        get() = memberAt<DWORD64Var>(248).value
        set(value) { memberAt<DWORD64Var>(248).value = value }
    
    val VectorRegister: CArrayPointer<M128A>
        get() = arrayMemberAt(768)
    
    var VectorControl: DWORD64
        get() = memberAt<DWORD64Var>(1184).value
        set(value) { memberAt<DWORD64Var>(1184).value = value }
    
    var DebugControl: DWORD64
        get() = memberAt<DWORD64Var>(1192).value
        set(value) { memberAt<DWORD64Var>(1192).value = value }
    
    var LastBranchToRip: DWORD64
        get() = memberAt<DWORD64Var>(1200).value
        set(value) { memberAt<DWORD64Var>(1200).value = value }
    
    var LastBranchFromRip: DWORD64
        get() = memberAt<DWORD64Var>(1208).value
        set(value) { memberAt<DWORD64Var>(1208).value = value }
    
    var LastExceptionToRip: DWORD64
        get() = memberAt<DWORD64Var>(1216).value
        set(value) { memberAt<DWORD64Var>(1216).value = value }
    
    var LastExceptionFromRip: DWORD64
        get() = memberAt<DWORD64Var>(1224).value
        set(value) { memberAt<DWORD64Var>(1224).value = value }
    
}

class _M128A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 16)
    
    var Low: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var High: LONGLONG
        get() = memberAt<LONGLONGVar>(8).value
        set(value) { memberAt<LONGLONGVar>(8).value = value }
    
}

class _XSAVE_FORMAT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(512, 16)
    
    var ControlWord: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var StatusWord: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var TagWord: BYTE
        get() = memberAt<BYTEVar>(4).value
        set(value) { memberAt<BYTEVar>(4).value = value }
    
    var Reserved1: BYTE
        get() = memberAt<BYTEVar>(5).value
        set(value) { memberAt<BYTEVar>(5).value = value }
    
    var ErrorOpcode: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var ErrorOffset: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ErrorSelector: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var Reserved2: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var DataOffset: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var DataSelector: WORD
        get() = memberAt<WORDVar>(20).value
        set(value) { memberAt<WORDVar>(20).value = value }
    
    var Reserved3: WORD
        get() = memberAt<WORDVar>(22).value
        set(value) { memberAt<WORDVar>(22).value = value }
    
    var MxCsr: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var MxCsr_Mask: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    val FloatRegisters: CArrayPointer<M128A>
        get() = arrayMemberAt(32)
    
    val XmmRegisters: CArrayPointer<M128A>
        get() = arrayMemberAt(160)
    
    val Reserved4: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(416)
    
}

class _XSAVE_AREA_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var Mask: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
    val Reserved: CArrayPointer<DWORD64Var>
        get() = arrayMemberAt(8)
    
}

class _XSAVE_AREA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(576, 16)
    
    val LegacyState: XSAVE_FORMAT
        get() = memberAt(0)
    
    val Header: XSAVE_AREA_HEADER
        get() = memberAt(512)
    
}

class _XSTATE_CONTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var Mask: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
    var Length: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Reserved1: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var Area: PXSAVE_AREA?
        get() = memberAt<PXSAVE_AREAVar>(16).value
        set(value) { memberAt<PXSAVE_AREAVar>(16).value = value }
    
    var Buffer: PVOID?
        get() = memberAt<PVOIDVar>(24).value
        set(value) { memberAt<PVOIDVar>(24).value = value }
    
}

class _SCOPE_TABLE_AMD64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val ScopeRecord: CArrayPointer<anonymousStruct5>
        get() = arrayMemberAt(4)
    
}

class anonymousStruct5(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var BeginAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var EndAddress: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var HandlerAddress: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var JumpTarget: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class _XMM_SAVE_AREA32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(512, 16)
    
    var ControlWord: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var StatusWord: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var TagWord: BYTE
        get() = memberAt<BYTEVar>(4).value
        set(value) { memberAt<BYTEVar>(4).value = value }
    
    var Reserved1: BYTE
        get() = memberAt<BYTEVar>(5).value
        set(value) { memberAt<BYTEVar>(5).value = value }
    
    var ErrorOpcode: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var ErrorOffset: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ErrorSelector: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var Reserved2: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var DataOffset: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var DataSelector: WORD
        get() = memberAt<WORDVar>(20).value
        set(value) { memberAt<WORDVar>(20).value = value }
    
    var Reserved3: WORD
        get() = memberAt<WORDVar>(22).value
        set(value) { memberAt<WORDVar>(22).value = value }
    
    var MxCsr: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var MxCsr_Mask: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    val FloatRegisters: CArrayPointer<M128A>
        get() = arrayMemberAt(32)
    
    val XmmRegisters: CArrayPointer<M128A>
        get() = arrayMemberAt(160)
    
    val Reserved4: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(416)
    
}

class anonymousStruct6(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(512, 16)
    
    val FltSave: XMM_SAVE_AREA32
        get() = memberAt(0)
    
    val FloatSave: XMM_SAVE_AREA32
        get() = memberAt(0)
    
}

class anonymousStruct7(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(416, 16)
    
    val Header: CArrayPointer<M128A>
        get() = arrayMemberAt(0)
    
    val Legacy: CArrayPointer<M128A>
        get() = arrayMemberAt(32)
    
    val Xmm0: M128A
        get() = memberAt(160)
    
    val Xmm1: M128A
        get() = memberAt(176)
    
    val Xmm2: M128A
        get() = memberAt(192)
    
    val Xmm3: M128A
        get() = memberAt(208)
    
    val Xmm4: M128A
        get() = memberAt(224)
    
    val Xmm5: M128A
        get() = memberAt(240)
    
    val Xmm6: M128A
        get() = memberAt(256)
    
    val Xmm7: M128A
        get() = memberAt(272)
    
    val Xmm8: M128A
        get() = memberAt(288)
    
    val Xmm9: M128A
        get() = memberAt(304)
    
    val Xmm10: M128A
        get() = memberAt(320)
    
    val Xmm11: M128A
        get() = memberAt(336)
    
    val Xmm12: M128A
        get() = memberAt(352)
    
    val Xmm13: M128A
        get() = memberAt(368)
    
    val Xmm14: M128A
        get() = memberAt(384)
    
    val Xmm15: M128A
        get() = memberAt(400)
    
}

class _RUNTIME_FUNCTION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var BeginAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var EndAddress: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var UnwindData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _LDT_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var LimitLow: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var BaseLow: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    val HighWord: anonymousStruct8
        get() = memberAt(4)
    
}

class anonymousStruct8(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    val Bytes: anonymousStruct9
        get() = memberAt(0)
    
    val Bits: anonymousStruct10
        get() = memberAt(0)
    
}

class anonymousStruct9(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 1)
    
    var BaseMid: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var Flags1: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var Flags2: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var BaseHi: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
}

class anonymousStruct10(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var BaseMid: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(1).value
        set(value) { memberAt<DWORDVar>(1).value = value }
    
    var LimitHi: DWORD
        get() = memberAt<DWORDVar>(2).value
        set(value) { memberAt<DWORDVar>(2).value = value }
    
    var BaseHi: DWORD
        get() = memberAt<DWORDVar>(3).value
        set(value) { memberAt<DWORDVar>(3).value = value }
    
}

class _EXCEPTION_RECORD32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 4)
    
    var ExceptionCode: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ExceptionFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ExceptionRecord: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ExceptionAddress: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var NumberParameters: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val ExceptionInformation: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(20)
    
}

class _EXCEPTION_RECORD64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(152, 8)
    
    var ExceptionCode: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ExceptionFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ExceptionRecord: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
    var ExceptionAddress: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
    var NumberParameters: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var __unusedAlignment: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    val ExceptionInformation: CArrayPointer<DWORD64Var>
        get() = arrayMemberAt(32)
    
}

class _EXCEPTION_POINTERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var ExceptionRecord: PEXCEPTION_RECORD?
        get() = memberAt<PEXCEPTION_RECORDVar>(0).value
        set(value) { memberAt<PEXCEPTION_RECORDVar>(0).value = value }
    
    var ContextRecord: PCONTEXT?
        get() = memberAt<PCONTEXTVar>(8).value
        set(value) { memberAt<PCONTEXTVar>(8).value = value }
    
}

class _UNWIND_HISTORY_TABLE_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var ImageBase: ULONG64
        get() = memberAt<ULONG64Var>(0).value
        set(value) { memberAt<ULONG64Var>(0).value = value }
    
    var FunctionEntry: PRUNTIME_FUNCTION?
        get() = memberAt<PRUNTIME_FUNCTIONVar>(8).value
        set(value) { memberAt<PRUNTIME_FUNCTIONVar>(8).value = value }
    
}

class _UNWIND_HISTORY_TABLE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(216, 8)
    
    var Count: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    var Search: UCHAR
        get() = memberAt<UCHARVar>(4).value
        set(value) { memberAt<UCHARVar>(4).value = value }
    
    var LowAddress: ULONG64
        get() = memberAt<ULONG64Var>(8).value
        set(value) { memberAt<ULONG64Var>(8).value = value }
    
    var HighAddress: ULONG64
        get() = memberAt<ULONG64Var>(16).value
        set(value) { memberAt<ULONG64Var>(16).value = value }
    
    val Entry: CArrayPointer<UNWIND_HISTORY_TABLE_ENTRY>
        get() = arrayMemberAt(24)
    
}

class _DISPATCHER_CONTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var ControlPc: ULONG64
        get() = memberAt<ULONG64Var>(0).value
        set(value) { memberAt<ULONG64Var>(0).value = value }
    
    var ImageBase: ULONG64
        get() = memberAt<ULONG64Var>(8).value
        set(value) { memberAt<ULONG64Var>(8).value = value }
    
    var FunctionEntry: PRUNTIME_FUNCTION?
        get() = memberAt<PRUNTIME_FUNCTIONVar>(16).value
        set(value) { memberAt<PRUNTIME_FUNCTIONVar>(16).value = value }
    
    var EstablisherFrame: ULONG64
        get() = memberAt<ULONG64Var>(24).value
        set(value) { memberAt<ULONG64Var>(24).value = value }
    
    var TargetIp: ULONG64
        get() = memberAt<ULONG64Var>(32).value
        set(value) { memberAt<ULONG64Var>(32).value = value }
    
    var ContextRecord: PCONTEXT?
        get() = memberAt<PCONTEXTVar>(40).value
        set(value) { memberAt<PCONTEXTVar>(40).value = value }
    
    var LanguageHandler: PEXCEPTION_ROUTINE?
        get() = memberAt<PEXCEPTION_ROUTINEVar>(48).value
        set(value) { memberAt<PEXCEPTION_ROUTINEVar>(48).value = value }
    
    var HandlerData: PVOID?
        get() = memberAt<PVOIDVar>(56).value
        set(value) { memberAt<PVOIDVar>(56).value = value }
    
    var HistoryTable: PUNWIND_HISTORY_TABLE?
        get() = memberAt<PUNWIND_HISTORY_TABLEVar>(64).value
        set(value) { memberAt<PUNWIND_HISTORY_TABLEVar>(64).value = value }
    
    var ScopeIndex: ULONG
        get() = memberAt<ULONGVar>(72).value
        set(value) { memberAt<ULONGVar>(72).value = value }
    
    var Fill0: ULONG
        get() = memberAt<ULONGVar>(76).value
        set(value) { memberAt<ULONGVar>(76).value = value }
    
}

class _KNONVOLATILE_CONTEXT_POINTERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(256, 8)
    
    val FloatingContext: CArrayPointer<PM128AVar>
        get() = arrayMemberAt(0)
    
    val IntegerContext: CArrayPointer<PULONG64Var>
        get() = arrayMemberAt(128)
    
}

class _GENERIC_MAPPING(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var GenericRead: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(0).value
        set(value) { memberAt<ACCESS_MASKVar>(0).value = value }
    
    var GenericWrite: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var GenericExecute: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(8).value
        set(value) { memberAt<ACCESS_MASKVar>(8).value = value }
    
    var GenericAll: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(12).value
        set(value) { memberAt<ACCESS_MASKVar>(12).value = value }
    
}

class _LUID_AND_ATTRIBUTES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Luid: LUID
        get() = memberAt(0)
    
    var Attributes: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _SID_IDENTIFIER_AUTHORITY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(6, 1)
    
    val Value: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
}

class _SID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var Revision: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var SubAuthorityCount: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    val IdentifierAuthority: SID_IDENTIFIER_AUTHORITY
        get() = memberAt(2)
    
    val SubAuthority: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(8)
    
}

class _SID_AND_ATTRIBUTES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Sid: PSID?
        get() = memberAt<PSIDVar>(0).value
        set(value) { memberAt<PSIDVar>(0).value = value }
    
    var Attributes: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _SID_AND_ATTRIBUTES_HASH(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(272, 8)
    
    var SidCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var SidAttr: PSID_AND_ATTRIBUTES?
        get() = memberAt<PSID_AND_ATTRIBUTESVar>(8).value
        set(value) { memberAt<PSID_AND_ATTRIBUTESVar>(8).value = value }
    
    val Hash: CArrayPointer<SID_HASH_ENTRYVar>
        get() = arrayMemberAt(16)
    
}

class _ACL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    var AclRevision: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var Sbz1: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var AclSize: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var AceCount: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Sbz2: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
}

class _ACE_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var AceType: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var AceFlags: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var AceSize: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
}

class _ACCESS_ALLOWED_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _ACCESS_DENIED_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _SYSTEM_AUDIT_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _SYSTEM_ALARM_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _SYSTEM_RESOURCE_ATTRIBUTE_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _SYSTEM_SCOPED_POLICY_ID_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _SYSTEM_MANDATORY_LABEL_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _ACCESS_ALLOWED_OBJECT_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ObjectType: GUID
        get() = memberAt(12)
    
    val InheritedObjectType: GUID
        get() = memberAt(28)
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class _ACCESS_DENIED_OBJECT_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ObjectType: GUID
        get() = memberAt(12)
    
    val InheritedObjectType: GUID
        get() = memberAt(28)
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class _SYSTEM_AUDIT_OBJECT_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ObjectType: GUID
        get() = memberAt(12)
    
    val InheritedObjectType: GUID
        get() = memberAt(28)
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class _SYSTEM_ALARM_OBJECT_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ObjectType: GUID
        get() = memberAt(12)
    
    val InheritedObjectType: GUID
        get() = memberAt(28)
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class _ACCESS_ALLOWED_CALLBACK_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _ACCESS_DENIED_CALLBACK_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _SYSTEM_AUDIT_CALLBACK_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _SYSTEM_ALARM_CALLBACK_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ObjectType: GUID
        get() = memberAt(12)
    
    val InheritedObjectType: GUID
        get() = memberAt(28)
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class _ACCESS_DENIED_CALLBACK_OBJECT_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ObjectType: GUID
        get() = memberAt(12)
    
    val InheritedObjectType: GUID
        get() = memberAt(28)
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ObjectType: GUID
        get() = memberAt(12)
    
    val InheritedObjectType: GUID
        get() = memberAt(28)
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class _SYSTEM_ALARM_CALLBACK_OBJECT_ACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val Header: ACE_HEADER
        get() = memberAt(0)
    
    var Mask: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(4).value
        set(value) { memberAt<ACCESS_MASKVar>(4).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ObjectType: GUID
        get() = memberAt(12)
    
    val InheritedObjectType: GUID
        get() = memberAt(28)
    
    var SidStart: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class _ACL_REVISION_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var AclRevision: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _ACL_SIZE_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var AceCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var AclBytesInUse: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var AclBytesFree: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _SECURITY_DESCRIPTOR_RELATIVE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var Revision: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var Sbz1: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var Control: SECURITY_DESCRIPTOR_CONTROL
        get() = memberAt<SECURITY_DESCRIPTOR_CONTROLVar>(2).value
        set(value) { memberAt<SECURITY_DESCRIPTOR_CONTROLVar>(2).value = value }
    
    var Owner: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Group: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Sacl: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var Dacl: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _SECURITY_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var Revision: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var Sbz1: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var Control: SECURITY_DESCRIPTOR_CONTROL
        get() = memberAt<SECURITY_DESCRIPTOR_CONTROLVar>(2).value
        set(value) { memberAt<SECURITY_DESCRIPTOR_CONTROLVar>(2).value = value }
    
    var Owner: PSID?
        get() = memberAt<PSIDVar>(8).value
        set(value) { memberAt<PSIDVar>(8).value = value }
    
    var Group: PSID?
        get() = memberAt<PSIDVar>(16).value
        set(value) { memberAt<PSIDVar>(16).value = value }
    
    var Sacl: PACL?
        get() = memberAt<PACLVar>(24).value
        set(value) { memberAt<PACLVar>(24).value = value }
    
    var Dacl: PACL?
        get() = memberAt<PACLVar>(32).value
        set(value) { memberAt<PACLVar>(32).value = value }
    
}

class _OBJECT_TYPE_LIST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Level: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Sbz: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var ObjectType: CPointer<GUID>?
        get() = memberAt<CPointerVar<GUID>>(8).value
        set(value) { memberAt<CPointerVar<GUID>>(8).value = value }
    
}

class _PRIVILEGE_SET(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var PrivilegeCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Control: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val Privilege: CArrayPointer<LUID_AND_ATTRIBUTES>
        get() = arrayMemberAt(8)
    
}

class _ACCESS_REASONS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(128, 4)
    
    val Data: CArrayPointer<ACCESS_REASONVar>
        get() = arrayMemberAt(0)
    
}

class _SE_SECURITY_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var SecurityDescriptor: PSECURITY_DESCRIPTOR?
        get() = memberAt<PSECURITY_DESCRIPTORVar>(8).value
        set(value) { memberAt<PSECURITY_DESCRIPTORVar>(8).value = value }
    
}

class _SE_ACCESS_REQUEST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var SeSecurityDescriptor: PSE_SECURITY_DESCRIPTOR?
        get() = memberAt<PSE_SECURITY_DESCRIPTORVar>(8).value
        set(value) { memberAt<PSE_SECURITY_DESCRIPTORVar>(8).value = value }
    
    var DesiredAccess: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(16).value
        set(value) { memberAt<ACCESS_MASKVar>(16).value = value }
    
    var PreviouslyGrantedAccess: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(20).value
        set(value) { memberAt<ACCESS_MASKVar>(20).value = value }
    
    var PrincipalSelfSid: PSID?
        get() = memberAt<PSIDVar>(24).value
        set(value) { memberAt<PSIDVar>(24).value = value }
    
    var GenericMapping: PGENERIC_MAPPING?
        get() = memberAt<PGENERIC_MAPPINGVar>(32).value
        set(value) { memberAt<PGENERIC_MAPPINGVar>(32).value = value }
    
    var ObjectTypeListCount: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var ObjectTypeList: POBJECT_TYPE_LIST?
        get() = memberAt<POBJECT_TYPE_LISTVar>(48).value
        set(value) { memberAt<POBJECT_TYPE_LISTVar>(48).value = value }
    
}

class _SE_ACCESS_REPLY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ResultListCount: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var GrantedAccess: PACCESS_MASK?
        get() = memberAt<PACCESS_MASKVar>(8).value
        set(value) { memberAt<PACCESS_MASKVar>(8).value = value }
    
    var AccessStatus: PDWORD?
        get() = memberAt<PDWORDVar>(16).value
        set(value) { memberAt<PDWORDVar>(16).value = value }
    
    var AccessReason: PACCESS_REASONS?
        get() = memberAt<PACCESS_REASONSVar>(24).value
        set(value) { memberAt<PACCESS_REASONSVar>(24).value = value }
    
    var Privileges: CPointer<PPRIVILEGE_SETVar>?
        get() = memberAt<CPointerVar<PPRIVILEGE_SETVar>>(32).value
        set(value) { memberAt<CPointerVar<PPRIVILEGE_SETVar>>(32).value = value }
    
}

class _TOKEN_USER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val User: SID_AND_ATTRIBUTES
        get() = memberAt(0)
    
}

class _TOKEN_GROUPS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var GroupCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Groups: CArrayPointer<SID_AND_ATTRIBUTES>
        get() = arrayMemberAt(8)
    
}

class _TOKEN_PRIVILEGES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var PrivilegeCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Privileges: CArrayPointer<LUID_AND_ATTRIBUTES>
        get() = arrayMemberAt(4)
    
}

class _TOKEN_OWNER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var Owner: PSID?
        get() = memberAt<PSIDVar>(0).value
        set(value) { memberAt<PSIDVar>(0).value = value }
    
}

class _TOKEN_PRIMARY_GROUP(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var PrimaryGroup: PSID?
        get() = memberAt<PSIDVar>(0).value
        set(value) { memberAt<PSIDVar>(0).value = value }
    
}

class _TOKEN_DEFAULT_DACL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var DefaultDacl: PACL?
        get() = memberAt<PACLVar>(0).value
        set(value) { memberAt<PACLVar>(0).value = value }
    
}

class _TOKEN_USER_CLAIMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var UserClaims: PCLAIMS_BLOB?
        get() = memberAt<PCLAIMS_BLOBVar>(0).value
        set(value) { memberAt<PCLAIMS_BLOBVar>(0).value = value }
    
}

class _TOKEN_DEVICE_CLAIMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var DeviceClaims: PCLAIMS_BLOB?
        get() = memberAt<PCLAIMS_BLOBVar>(0).value
        set(value) { memberAt<PCLAIMS_BLOBVar>(0).value = value }
    
}

class _TOKEN_GROUPS_AND_PRIVILEGES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var SidCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var SidLength: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Sids: PSID_AND_ATTRIBUTES?
        get() = memberAt<PSID_AND_ATTRIBUTESVar>(8).value
        set(value) { memberAt<PSID_AND_ATTRIBUTESVar>(8).value = value }
    
    var RestrictedSidCount: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var RestrictedSidLength: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var RestrictedSids: PSID_AND_ATTRIBUTES?
        get() = memberAt<PSID_AND_ATTRIBUTESVar>(24).value
        set(value) { memberAt<PSID_AND_ATTRIBUTESVar>(24).value = value }
    
    var PrivilegeCount: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var PrivilegeLength: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var Privileges: PLUID_AND_ATTRIBUTES?
        get() = memberAt<PLUID_AND_ATTRIBUTESVar>(40).value
        set(value) { memberAt<PLUID_AND_ATTRIBUTESVar>(40).value = value }
    
    val AuthenticationId: LUID
        get() = memberAt(48)
    
}

class _TOKEN_LINKED_TOKEN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var LinkedToken: HANDLE?
        get() = memberAt<HANDLEVar>(0).value
        set(value) { memberAt<HANDLEVar>(0).value = value }
    
}

class _TOKEN_ELEVATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var TokenIsElevated: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _TOKEN_MANDATORY_LABEL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val Label: SID_AND_ATTRIBUTES
        get() = memberAt(0)
    
}

class _TOKEN_MANDATORY_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Policy: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _TOKEN_ACCESS_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    var SidHash: PSID_AND_ATTRIBUTES_HASH?
        get() = memberAt<PSID_AND_ATTRIBUTES_HASHVar>(0).value
        set(value) { memberAt<PSID_AND_ATTRIBUTES_HASHVar>(0).value = value }
    
    var RestrictedSidHash: PSID_AND_ATTRIBUTES_HASH?
        get() = memberAt<PSID_AND_ATTRIBUTES_HASHVar>(8).value
        set(value) { memberAt<PSID_AND_ATTRIBUTES_HASHVar>(8).value = value }
    
    var Privileges: PTOKEN_PRIVILEGES?
        get() = memberAt<PTOKEN_PRIVILEGESVar>(16).value
        set(value) { memberAt<PTOKEN_PRIVILEGESVar>(16).value = value }
    
    val AuthenticationId: LUID
        get() = memberAt(24)
    
    var TokenType: TOKEN_TYPE
        get() = memberAt<TOKEN_TYPEVar>(32).value
        set(value) { memberAt<TOKEN_TYPEVar>(32).value = value }
    
    var ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL
        get() = memberAt<SECURITY_IMPERSONATION_LEVELVar>(36).value
        set(value) { memberAt<SECURITY_IMPERSONATION_LEVELVar>(36).value = value }
    
    val MandatoryPolicy: TOKEN_MANDATORY_POLICY
        get() = memberAt(40)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var AppContainerNumber: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var PackageSid: PSID?
        get() = memberAt<PSIDVar>(56).value
        set(value) { memberAt<PSIDVar>(56).value = value }
    
    var CapabilitiesHash: PSID_AND_ATTRIBUTES_HASH?
        get() = memberAt<PSID_AND_ATTRIBUTES_HASHVar>(64).value
        set(value) { memberAt<PSID_AND_ATTRIBUTES_HASHVar>(64).value = value }
    
}

class _TOKEN_AUDIT_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(29, 1)
    
    val PerUserPolicy: CArrayPointer<UCHARVar>
        get() = arrayMemberAt(0)
    
}

class _TOKEN_SOURCE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val SourceName: CArrayPointer<CHARVar>
        get() = arrayMemberAt(0)
    
    val SourceIdentifier: LUID
        get() = memberAt(8)
    
}

class _TOKEN_STATISTICS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    val TokenId: LUID
        get() = memberAt(0)
    
    val AuthenticationId: LUID
        get() = memberAt(8)
    
    val ExpirationTime: LARGE_INTEGER
        get() = memberAt(16)
    
    var TokenType: TOKEN_TYPE
        get() = memberAt<TOKEN_TYPEVar>(24).value
        set(value) { memberAt<TOKEN_TYPEVar>(24).value = value }
    
    var ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL
        get() = memberAt<SECURITY_IMPERSONATION_LEVELVar>(28).value
        set(value) { memberAt<SECURITY_IMPERSONATION_LEVELVar>(28).value = value }
    
    var DynamicCharged: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var DynamicAvailable: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var GroupCount: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var PrivilegeCount: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    val ModifiedId: LUID
        get() = memberAt(48)
    
}

class _TOKEN_CONTROL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    val TokenId: LUID
        get() = memberAt(0)
    
    val AuthenticationId: LUID
        get() = memberAt(8)
    
    val ModifiedId: LUID
        get() = memberAt(16)
    
    val TokenSource: TOKEN_SOURCE
        get() = memberAt(24)
    
}

class _TOKEN_ORIGIN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    val OriginatingLogonSession: LUID
        get() = memberAt(0)
    
}

class _TOKEN_APPCONTAINER_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var TokenAppContainer: PSID?
        get() = memberAt<PSIDVar>(0).value
        set(value) { memberAt<PSIDVar>(0).value = value }
    
}

class _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Version: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
    var Name: PWSTR?
        get() = memberAt<PWSTRVar>(8).value
        set(value) { memberAt<PWSTRVar>(8).value = value }
    
}

class _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pValue: PVOID?
        get() = memberAt<PVOIDVar>(0).value
        set(value) { memberAt<PVOIDVar>(0).value = value }
    
    var ValueLength: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _CLAIM_SECURITY_ATTRIBUTE_V1(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var Name: PWSTR?
        get() = memberAt<PWSTRVar>(0).value
        set(value) { memberAt<PWSTRVar>(0).value = value }
    
    var ValueType: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var Reserved: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var ValueCount: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val Values: anonymousStruct11
        get() = memberAt(24)
    
}

class anonymousStruct11(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pInt64: PLONG64?
        get() = memberAt<PLONG64Var>(0).value
        set(value) { memberAt<PLONG64Var>(0).value = value }
    
    var pUint64: PDWORD64?
        get() = memberAt<PDWORD64Var>(0).value
        set(value) { memberAt<PDWORD64Var>(0).value = value }
    
    var ppString: CPointer<PWSTRVar>?
        get() = memberAt<CPointerVar<PWSTRVar>>(0).value
        set(value) { memberAt<CPointerVar<PWSTRVar>>(0).value = value }
    
    var pFqbn: PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE?
        get() = memberAt<PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUEVar>(0).value
        set(value) { memberAt<PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUEVar>(0).value = value }
    
    var pOctetString: PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE?
        get() = memberAt<PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUEVar>(0).value
        set(value) { memberAt<PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUEVar>(0).value = value }
    
}

class _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var Name: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ValueType: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Reserved: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ValueCount: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    val Values: anonymousStruct12
        get() = memberAt(16)
    
}

class anonymousStruct12(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    val pInt64: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(0)
    
    val pUint64: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(0)
    
    val ppString: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(0)
    
    val pFqbn: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(0)
    
    val pOctetString: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(0)
    
}

class _CLAIM_SECURITY_ATTRIBUTES_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Version: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Reserved: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var AttributeCount: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val Attribute: anonymousStruct13
        get() = memberAt(8)
    
}

class anonymousStruct13(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pAttributeV1: PCLAIM_SECURITY_ATTRIBUTE_V1?
        get() = memberAt<PCLAIM_SECURITY_ATTRIBUTE_V1Var>(0).value
        set(value) { memberAt<PCLAIM_SECURITY_ATTRIBUTE_V1Var>(0).value = value }
    
}

class _SECURITY_QUALITY_OF_SERVICE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var Length: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL
        get() = memberAt<SECURITY_IMPERSONATION_LEVELVar>(4).value
        set(value) { memberAt<SECURITY_IMPERSONATION_LEVELVar>(4).value = value }
    
    var ContextTrackingMode: SECURITY_CONTEXT_TRACKING_MODE
        get() = memberAt<SECURITY_CONTEXT_TRACKING_MODEVar>(8).value
        set(value) { memberAt<SECURITY_CONTEXT_TRACKING_MODEVar>(8).value = value }
    
    var EffectiveOnly: BOOLEAN
        get() = memberAt<BOOLEANVar>(9).value
        set(value) { memberAt<BOOLEANVar>(9).value = value }
    
}

class _SE_IMPERSONATION_STATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Token: PACCESS_TOKEN?
        get() = memberAt<PACCESS_TOKENVar>(0).value
        set(value) { memberAt<PACCESS_TOKENVar>(0).value = value }
    
    var CopyOnOpen: BOOLEAN
        get() = memberAt<BOOLEANVar>(8).value
        set(value) { memberAt<BOOLEANVar>(8).value = value }
    
    var EffectiveOnly: BOOLEAN
        get() = memberAt<BOOLEANVar>(9).value
        set(value) { memberAt<BOOLEANVar>(9).value = value }
    
    var Level: SECURITY_IMPERSONATION_LEVEL
        get() = memberAt<SECURITY_IMPERSONATION_LEVELVar>(12).value
        set(value) { memberAt<SECURITY_IMPERSONATION_LEVELVar>(12).value = value }
    
}

class _SECURITY_CAPABILITIES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var AppContainerSid: PSID?
        get() = memberAt<PSIDVar>(0).value
        set(value) { memberAt<PSIDVar>(0).value = value }
    
    var Capabilities: PSID_AND_ATTRIBUTES?
        get() = memberAt<PSID_AND_ATTRIBUTESVar>(8).value
        set(value) { memberAt<PSID_AND_ATTRIBUTESVar>(8).value = value }
    
    var CapabilityCount: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var Reserved: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class _JOB_SET_ARRAY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var JobHandle: HANDLE?
        get() = memberAt<HANDLEVar>(0).value
        set(value) { memberAt<HANDLEVar>(0).value = value }
    
    var MemberLevel: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class _EXCEPTION_REGISTRATION_RECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
}

class anonymousStruct14(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var Next: CPointer<_EXCEPTION_REGISTRATION_RECORD>?
        get() = memberAt<CPointerVar<_EXCEPTION_REGISTRATION_RECORD>>(0).value
        set(value) { memberAt<CPointerVar<_EXCEPTION_REGISTRATION_RECORD>>(0).value = value }
    
    var prev: CPointer<_EXCEPTION_REGISTRATION_RECORD>?
        get() = memberAt<CPointerVar<_EXCEPTION_REGISTRATION_RECORD>>(0).value
        set(value) { memberAt<CPointerVar<_EXCEPTION_REGISTRATION_RECORD>>(0).value = value }
    
}

class _NT_TIB(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var ExceptionList: CPointer<_EXCEPTION_REGISTRATION_RECORD>?
        get() = memberAt<CPointerVar<_EXCEPTION_REGISTRATION_RECORD>>(0).value
        set(value) { memberAt<CPointerVar<_EXCEPTION_REGISTRATION_RECORD>>(0).value = value }
    
    var StackBase: PVOID?
        get() = memberAt<PVOIDVar>(8).value
        set(value) { memberAt<PVOIDVar>(8).value = value }
    
    var StackLimit: PVOID?
        get() = memberAt<PVOIDVar>(16).value
        set(value) { memberAt<PVOIDVar>(16).value = value }
    
    var SubSystemTib: PVOID?
        get() = memberAt<PVOIDVar>(24).value
        set(value) { memberAt<PVOIDVar>(24).value = value }
    
    var ArbitraryUserPointer: PVOID?
        get() = memberAt<PVOIDVar>(40).value
        set(value) { memberAt<PVOIDVar>(40).value = value }
    
    var Self: CPointer<_NT_TIB>?
        get() = memberAt<CPointerVar<_NT_TIB>>(48).value
        set(value) { memberAt<CPointerVar<_NT_TIB>>(48).value = value }
    
}

class anonymousStruct15(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var FiberData: PVOID?
        get() = memberAt<PVOIDVar>(0).value
        set(value) { memberAt<PVOIDVar>(0).value = value }
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _NT_TIB32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var ExceptionList: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var StackBase: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var StackLimit: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var SubSystemTib: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var ArbitraryUserPointer: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var Self: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class anonymousStruct16(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var FiberData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _NT_TIB64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var ExceptionList: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
    var StackBase: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
    var StackLimit: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
    var SubSystemTib: DWORD64
        get() = memberAt<DWORD64Var>(24).value
        set(value) { memberAt<DWORD64Var>(24).value = value }
    
    var ArbitraryUserPointer: DWORD64
        get() = memberAt<DWORD64Var>(40).value
        set(value) { memberAt<DWORD64Var>(40).value = value }
    
    var Self: DWORD64
        get() = memberAt<DWORD64Var>(48).value
        set(value) { memberAt<DWORD64Var>(48).value = value }
    
}

class anonymousStruct17(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var FiberData: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _UMS_CREATE_THREAD_ATTRIBUTES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var UmsVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var UmsContext: PVOID?
        get() = memberAt<PVOIDVar>(8).value
        set(value) { memberAt<PVOIDVar>(8).value = value }
    
    var UmsCompletionList: PVOID?
        get() = memberAt<PVOIDVar>(16).value
        set(value) { memberAt<PVOIDVar>(16).value = value }
    
}

class _QUOTA_LIMITS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var PagedPoolLimit: SIZE_T
        get() = memberAt<SIZE_TVar>(0).value
        set(value) { memberAt<SIZE_TVar>(0).value = value }
    
    var NonPagedPoolLimit: SIZE_T
        get() = memberAt<SIZE_TVar>(8).value
        set(value) { memberAt<SIZE_TVar>(8).value = value }
    
    var MinimumWorkingSetSize: SIZE_T
        get() = memberAt<SIZE_TVar>(16).value
        set(value) { memberAt<SIZE_TVar>(16).value = value }
    
    var MaximumWorkingSetSize: SIZE_T
        get() = memberAt<SIZE_TVar>(24).value
        set(value) { memberAt<SIZE_TVar>(24).value = value }
    
    var PagefileLimit: SIZE_T
        get() = memberAt<SIZE_TVar>(32).value
        set(value) { memberAt<SIZE_TVar>(32).value = value }
    
    val TimeLimit: LARGE_INTEGER
        get() = memberAt(40)
    
}

class _RATE_QUOTA_LIMIT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var RateData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct18(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var RatePercent: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _QUOTA_LIMITS_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 8)
    
    var PagedPoolLimit: SIZE_T
        get() = memberAt<SIZE_TVar>(0).value
        set(value) { memberAt<SIZE_TVar>(0).value = value }
    
    var NonPagedPoolLimit: SIZE_T
        get() = memberAt<SIZE_TVar>(8).value
        set(value) { memberAt<SIZE_TVar>(8).value = value }
    
    var MinimumWorkingSetSize: SIZE_T
        get() = memberAt<SIZE_TVar>(16).value
        set(value) { memberAt<SIZE_TVar>(16).value = value }
    
    var MaximumWorkingSetSize: SIZE_T
        get() = memberAt<SIZE_TVar>(24).value
        set(value) { memberAt<SIZE_TVar>(24).value = value }
    
    var PagefileLimit: SIZE_T
        get() = memberAt<SIZE_TVar>(32).value
        set(value) { memberAt<SIZE_TVar>(32).value = value }
    
    val TimeLimit: LARGE_INTEGER
        get() = memberAt(40)
    
    var WorkingSetLimit: SIZE_T
        get() = memberAt<SIZE_TVar>(48).value
        set(value) { memberAt<SIZE_TVar>(48).value = value }
    
    var Reserved2: SIZE_T
        get() = memberAt<SIZE_TVar>(56).value
        set(value) { memberAt<SIZE_TVar>(56).value = value }
    
    var Reserved3: SIZE_T
        get() = memberAt<SIZE_TVar>(64).value
        set(value) { memberAt<SIZE_TVar>(64).value = value }
    
    var Reserved4: SIZE_T
        get() = memberAt<SIZE_TVar>(72).value
        set(value) { memberAt<SIZE_TVar>(72).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    val CpuRateLimit: RATE_QUOTA_LIMIT
        get() = memberAt(84)
    
}

class _IO_COUNTERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var ReadOperationCount: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var WriteOperationCount: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
    var OtherOperationCount: ULONGLONG
        get() = memberAt<ULONGLONGVar>(16).value
        set(value) { memberAt<ULONGLONGVar>(16).value = value }
    
    var ReadTransferCount: ULONGLONG
        get() = memberAt<ULONGLONGVar>(24).value
        set(value) { memberAt<ULONGLONGVar>(24).value = value }
    
    var WriteTransferCount: ULONGLONG
        get() = memberAt<ULONGLONGVar>(32).value
        set(value) { memberAt<ULONGLONGVar>(32).value = value }
    
    var OtherTransferCount: ULONGLONG
        get() = memberAt<ULONGLONGVar>(40).value
        set(value) { memberAt<ULONGLONGVar>(40).value = value }
    
}

class _PROCESS_MITIGATION_ASLR_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
}

class anonymousStruct19(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct20(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var EnableBottomUpRandomization: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _PROCESS_MITIGATION_DEP_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Permanent: BOOLEAN
        get() = memberAt<BOOLEANVar>(4).value
        set(value) { memberAt<BOOLEANVar>(4).value = value }
    
}

class anonymousStruct21(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct22(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Enable: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
}

class anonymousStruct23(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct24(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var RaiseExceptionOnInvalidHandleReference: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
}

class anonymousStruct25(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct26(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var DisallowWin32kSystemCalls: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
}

class anonymousStruct27(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct28(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var DisableExtensionPoints: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val TotalUserTime: LARGE_INTEGER
        get() = memberAt(0)
    
    val TotalKernelTime: LARGE_INTEGER
        get() = memberAt(8)
    
    val ThisPeriodTotalUserTime: LARGE_INTEGER
        get() = memberAt(16)
    
    val ThisPeriodTotalKernelTime: LARGE_INTEGER
        get() = memberAt(24)
    
    var TotalPageFaultCount: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var TotalProcesses: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var ActiveProcesses: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var TotalTerminatedProcesses: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class _JOBOBJECT_BASIC_LIMIT_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    val PerProcessUserTimeLimit: LARGE_INTEGER
        get() = memberAt(0)
    
    val PerJobUserTimeLimit: LARGE_INTEGER
        get() = memberAt(8)
    
    var LimitFlags: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var MinimumWorkingSetSize: SIZE_T
        get() = memberAt<SIZE_TVar>(24).value
        set(value) { memberAt<SIZE_TVar>(24).value = value }
    
    var MaximumWorkingSetSize: SIZE_T
        get() = memberAt<SIZE_TVar>(32).value
        set(value) { memberAt<SIZE_TVar>(32).value = value }
    
    var ActiveProcessLimit: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var Affinity: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(48).value
        set(value) { memberAt<ULONG_PTRVar>(48).value = value }
    
    var PriorityClass: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var SchedulingClass: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
}

class _JOBOBJECT_EXTENDED_LIMIT_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(144, 8)
    
    val BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION
        get() = memberAt(0)
    
    val IoInfo: IO_COUNTERS
        get() = memberAt(64)
    
    var ProcessMemoryLimit: SIZE_T
        get() = memberAt<SIZE_TVar>(112).value
        set(value) { memberAt<SIZE_TVar>(112).value = value }
    
    var JobMemoryLimit: SIZE_T
        get() = memberAt<SIZE_TVar>(120).value
        set(value) { memberAt<SIZE_TVar>(120).value = value }
    
    var PeakProcessMemoryUsed: SIZE_T
        get() = memberAt<SIZE_TVar>(128).value
        set(value) { memberAt<SIZE_TVar>(128).value = value }
    
    var PeakJobMemoryUsed: SIZE_T
        get() = memberAt<SIZE_TVar>(136).value
        set(value) { memberAt<SIZE_TVar>(136).value = value }
    
}

class _JOBOBJECT_BASIC_PROCESS_ID_LIST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var NumberOfAssignedProcesses: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var NumberOfProcessIdsInList: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val ProcessIdList: CArrayPointer<ULONG_PTRVar>
        get() = arrayMemberAt(8)
    
}

class _JOBOBJECT_BASIC_UI_RESTRICTIONS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var UIRestrictionsClass: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _JOBOBJECT_SECURITY_LIMIT_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var SecurityLimitFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var JobToken: HANDLE?
        get() = memberAt<HANDLEVar>(8).value
        set(value) { memberAt<HANDLEVar>(8).value = value }
    
    var SidsToDisable: PTOKEN_GROUPS?
        get() = memberAt<PTOKEN_GROUPSVar>(16).value
        set(value) { memberAt<PTOKEN_GROUPSVar>(16).value = value }
    
    var PrivilegesToDelete: PTOKEN_PRIVILEGES?
        get() = memberAt<PTOKEN_PRIVILEGESVar>(24).value
        set(value) { memberAt<PTOKEN_PRIVILEGESVar>(24).value = value }
    
    var RestrictedSids: PTOKEN_GROUPS?
        get() = memberAt<PTOKEN_GROUPSVar>(32).value
        set(value) { memberAt<PTOKEN_GROUPSVar>(32).value = value }
    
}

class _JOBOBJECT_END_OF_JOB_TIME_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var EndOfJobTimeAction: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _JOBOBJECT_ASSOCIATE_COMPLETION_PORT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var CompletionKey: PVOID?
        get() = memberAt<PVOIDVar>(0).value
        set(value) { memberAt<PVOIDVar>(0).value = value }
    
    var CompletionPort: HANDLE?
        get() = memberAt<HANDLEVar>(8).value
        set(value) { memberAt<HANDLEVar>(8).value = value }
    
}

class _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 8)
    
    val BasicInfo: JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
        get() = memberAt(0)
    
    val IoInfo: IO_COUNTERS
        get() = memberAt(48)
    
}

class _JOBOBJECT_JOBSET_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var MemberLevel: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var IoReadBytesLimit: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
    var IoWriteBytesLimit: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
    val PerJobUserTimeLimit: LARGE_INTEGER
        get() = memberAt(16)
    
    var JobMemoryLimit: DWORD64
        get() = memberAt<DWORD64Var>(24).value
        set(value) { memberAt<DWORD64Var>(24).value = value }
    
    var RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE
        get() = memberAt<JOBOBJECT_RATE_CONTROL_TOLERANCEVar>(32).value
        set(value) { memberAt<JOBOBJECT_RATE_CONTROL_TOLERANCEVar>(32).value = value }
    
    var RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
        get() = memberAt<JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVALVar>(36).value
        set(value) { memberAt<JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVALVar>(36).value = value }
    
    var LimitFlags: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
}

class _JOBOBJECT_LIMIT_VIOLATION_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var LimitFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ViolationLimitFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var IoReadBytes: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
    var IoReadBytesLimit: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
    var IoWriteBytes: DWORD64
        get() = memberAt<DWORD64Var>(24).value
        set(value) { memberAt<DWORD64Var>(24).value = value }
    
    var IoWriteBytesLimit: DWORD64
        get() = memberAt<DWORD64Var>(32).value
        set(value) { memberAt<DWORD64Var>(32).value = value }
    
    val PerJobUserTime: LARGE_INTEGER
        get() = memberAt(40)
    
    val PerJobUserTimeLimit: LARGE_INTEGER
        get() = memberAt(48)
    
    var JobMemory: DWORD64
        get() = memberAt<DWORD64Var>(56).value
        set(value) { memberAt<DWORD64Var>(56).value = value }
    
    var JobMemoryLimit: DWORD64
        get() = memberAt<DWORD64Var>(64).value
        set(value) { memberAt<DWORD64Var>(64).value = value }
    
    var RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE
        get() = memberAt<JOBOBJECT_RATE_CONTROL_TOLERANCEVar>(72).value
        set(value) { memberAt<JOBOBJECT_RATE_CONTROL_TOLERANCEVar>(72).value = value }
    
    var RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
        get() = memberAt<JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVALVar>(76).value
        set(value) { memberAt<JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVALVar>(76).value = value }
    
}

class _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var ControlFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct29(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var CpuRate: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Weight: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _CACHE_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var Level: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var Associativity: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var LineSize: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Type: PROCESSOR_CACHE_TYPE
        get() = memberAt<PROCESSOR_CACHE_TYPEVar>(8).value
        set(value) { memberAt<PROCESSOR_CACHE_TYPEVar>(8).value = value }
    
}

class _SYSTEM_LOGICAL_PROCESSOR_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var ProcessorMask: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(0).value
        set(value) { memberAt<ULONG_PTRVar>(0).value = value }
    
    var Relationship: LOGICAL_PROCESSOR_RELATIONSHIP
        get() = memberAt<LOGICAL_PROCESSOR_RELATIONSHIPVar>(8).value
        set(value) { memberAt<LOGICAL_PROCESSOR_RELATIONSHIPVar>(8).value = value }
    
}

class anonymousStruct30(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val ProcessorCore: anonymousStruct31
        get() = memberAt(0)
    
    val NumaNode: anonymousStruct32
        get() = memberAt(0)
    
    val Cache: CACHE_DESCRIPTOR
        get() = memberAt(0)
    
    val Reserved: CArrayPointer<ULONGLONGVar>
        get() = arrayMemberAt(0)
    
}

class anonymousStruct31(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    var Flags: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
}

class anonymousStruct32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var NodeNumber: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _PROCESSOR_RELATIONSHIP(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var Flags: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    val Reserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(1)
    
    var GroupCount: WORD
        get() = memberAt<WORDVar>(22).value
        set(value) { memberAt<WORDVar>(22).value = value }
    
    val GroupMask: CArrayPointer<GROUP_AFFINITY>
        get() = arrayMemberAt(24)
    
}

class _NUMA_NODE_RELATIONSHIP(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var NodeNumber: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Reserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
    val GroupMask: GROUP_AFFINITY
        get() = memberAt(24)
    
}

class _CACHE_RELATIONSHIP(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var Level: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var Associativity: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var LineSize: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var CacheSize: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Type: PROCESSOR_CACHE_TYPE
        get() = memberAt<PROCESSOR_CACHE_TYPEVar>(8).value
        set(value) { memberAt<PROCESSOR_CACHE_TYPEVar>(8).value = value }
    
    val Reserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(12)
    
    val GroupMask: GROUP_AFFINITY
        get() = memberAt(32)
    
}

class _PROCESSOR_GROUP_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var MaximumProcessorCount: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var ActiveProcessorCount: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    val Reserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(2)
    
    var ActiveProcessorMask: KAFFINITY
        get() = memberAt<KAFFINITYVar>(40).value
        set(value) { memberAt<KAFFINITYVar>(40).value = value }
    
}

class _GROUP_RELATIONSHIP(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    var MaximumGroupCount: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var ActiveGroupCount: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    val Reserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
    val GroupInfo: CArrayPointer<PROCESSOR_GROUP_INFO>
        get() = arrayMemberAt(24)
    
}

class _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var Relationship: LOGICAL_PROCESSOR_RELATIONSHIP
        get() = memberAt<LOGICAL_PROCESSOR_RELATIONSHIPVar>(0).value
        set(value) { memberAt<LOGICAL_PROCESSOR_RELATIONSHIPVar>(0).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class anonymousStruct33(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    val Processor: PROCESSOR_RELATIONSHIP
        get() = memberAt(0)
    
    val NumaNode: NUMA_NODE_RELATIONSHIP
        get() = memberAt(0)
    
    val Cache: CACHE_RELATIONSHIP
        get() = memberAt(0)
    
    val Group: GROUP_RELATIONSHIP
        get() = memberAt(0)
    
}

class _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var CycleTime: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
}

class _XSTATE_FEATURE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Offset: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _XSTATE_CONFIGURATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(536, 8)
    
    var EnabledFeatures: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
    var EnabledVolatileFeatures: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var OptimizedSave: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    val Features: CArrayPointer<XSTATE_FEATURE>
        get() = arrayMemberAt(24)
    
}

class _MEMORY_BASIC_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var BaseAddress: PVOID?
        get() = memberAt<PVOIDVar>(0).value
        set(value) { memberAt<PVOIDVar>(0).value = value }
    
    var AllocationBase: PVOID?
        get() = memberAt<PVOIDVar>(8).value
        set(value) { memberAt<PVOIDVar>(8).value = value }
    
    var AllocationProtect: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var RegionSize: SIZE_T
        get() = memberAt<SIZE_TVar>(24).value
        set(value) { memberAt<SIZE_TVar>(24).value = value }
    
    var State: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var Protect: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
}

class _MEMORY_BASIC_INFORMATION32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var BaseAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var AllocationBase: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var AllocationProtect: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var RegionSize: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var State: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var Protect: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _MEMORY_BASIC_INFORMATION64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 16)
    
    var BaseAddress: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var AllocationBase: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
    var AllocationProtect: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var __alignment1: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var RegionSize: ULONGLONG
        get() = memberAt<ULONGLONGVar>(24).value
        set(value) { memberAt<ULONGLONGVar>(24).value = value }
    
    var State: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var Protect: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var __alignment2: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class FILE_ID_128(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var LowPart: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var HighPart: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
}

class _FILE_NOTIFY_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var NextEntryOffset: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Action: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var FileNameLength: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val FileName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(12)
    
}

class _FILE_SEGMENT_ELEMENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var Buffer: PVOID64?
        get() = memberAt<PVOID64Var>(0).value
        set(value) { memberAt<PVOID64Var>(0).value = value }
    
    var Alignment: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
}

class _REPARSE_GUID_DATA_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var ReparseTag: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ReparseDataLength: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Reserved: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    val ReparseGuid: GUID
        get() = memberAt(8)
    
    val GenericReparseBuffer: anonymousStruct34
        get() = memberAt(24)
    
}

class anonymousStruct34(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    val DataBuffer: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
}

class CM_Power_Data_s(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 4)
    
    var PD_Size: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var PD_MostRecentPowerState: DEVICE_POWER_STATE
        get() = memberAt<DEVICE_POWER_STATEVar>(4).value
        set(value) { memberAt<DEVICE_POWER_STATEVar>(4).value = value }
    
    var PD_Capabilities: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var PD_D1Latency: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var PD_D2Latency: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var PD_D3Latency: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    val PD_PowerStateMapping: CArrayPointer<DEVICE_POWER_STATEVar>
        get() = arrayMemberAt(24)
    
    var PD_DeepestSystemWake: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(52).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(52).value = value }
    
}

class _POWER_USER_PRESENCE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var UserPresence: POWER_USER_PRESENCE_TYPE
        get() = memberAt<POWER_USER_PRESENCE_TYPEVar>(0).value
        set(value) { memberAt<POWER_USER_PRESENCE_TYPEVar>(0).value = value }
    
}

class _POWER_SESSION_CONNECT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(2, 1)
    
    var Connected: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
    var Console: BOOLEAN
        get() = memberAt<BOOLEANVar>(1).value
        set(value) { memberAt<BOOLEANVar>(1).value = value }
    
}

class _POWER_SESSION_TIMEOUTS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var InputTimeout: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var DisplayTimeout: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _POWER_SESSION_RIT_STATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Active: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
    var LastInputTime: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _POWER_SESSION_WINLOGON(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var SessionId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Console: BOOLEAN
        get() = memberAt<BOOLEANVar>(4).value
        set(value) { memberAt<BOOLEANVar>(4).value = value }
    
    var Locked: BOOLEAN
        get() = memberAt<BOOLEANVar>(5).value
        set(value) { memberAt<BOOLEANVar>(5).value = value }
    
}

class _POWER_IDLE_RESILIENCY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var CoalescingTimeout: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var IdleResiliencyPeriod: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _POWER_MONITOR_INVOCATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var On: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
    var Console: BOOLEAN
        get() = memberAt<BOOLEANVar>(1).value
        set(value) { memberAt<BOOLEANVar>(1).value = value }
    
    var RequestReason: POWER_MONITOR_REQUEST_REASON
        get() = memberAt<POWER_MONITOR_REQUEST_REASON.Var>(4).value
        set(value) { memberAt<POWER_MONITOR_REQUEST_REASON.Var>(4).value = value }
    
}

class _RESUME_PERFORMANCE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var PostTimeMs: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var TotalResumeTimeMs: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
    var ResumeCompleteTimestamp: ULONGLONG
        get() = memberAt<ULONGLONGVar>(16).value
        set(value) { memberAt<ULONGLONGVar>(16).value = value }
    
}

class SET_POWER_SETTING_VALUE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Guid: GUID
        get() = memberAt(4)
    
    var PowerCondition: SYSTEM_POWER_CONDITION
        get() = memberAt<SYSTEM_POWER_CONDITION.Var>(20).value
        set(value) { memberAt<SYSTEM_POWER_CONDITION.Var>(20).value = value }
    
    var DataLength: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val Data: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
}

class NOTIFY_USER_POWER_SETTING(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val Guid: GUID
        get() = memberAt(0)
    
}

class _APPLICATIONLAUNCH_SETTING_VALUE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val ActivationTime: LARGE_INTEGER
        get() = memberAt(0)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ButtonInstanceID: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class _POWER_PLATFORM_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    var AoAc: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
}

class BATTERY_REPORTING_SCALE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Granularity: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Capacity: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class PPM_WMI_LEGACY_PERFSTATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var Frequency: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var PercentFrequency: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class PPM_WMI_IDLE_STATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var Latency: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Power: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var TimeCheck: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var PromotePercent: BYTE
        get() = memberAt<BYTEVar>(12).value
        set(value) { memberAt<BYTEVar>(12).value = value }
    
    var DemotePercent: BYTE
        get() = memberAt<BYTEVar>(13).value
        set(value) { memberAt<BYTEVar>(13).value = value }
    
    var StateType: BYTE
        get() = memberAt<BYTEVar>(14).value
        set(value) { memberAt<BYTEVar>(14).value = value }
    
    var Reserved: BYTE
        get() = memberAt<BYTEVar>(15).value
        set(value) { memberAt<BYTEVar>(15).value = value }
    
    var StateFlags: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var Context: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var IdleHandler: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var Reserved1: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class PPM_WMI_IDLE_STATES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var TargetState: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var OldState: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var TargetProcessors: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
    val State: CArrayPointer<PPM_WMI_IDLE_STATE>
        get() = arrayMemberAt(24)
    
}

class PPM_WMI_IDLE_STATES_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var TargetState: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var OldState: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var TargetProcessors: PVOID?
        get() = memberAt<PVOIDVar>(16).value
        set(value) { memberAt<PVOIDVar>(16).value = value }
    
    val State: CArrayPointer<PPM_WMI_IDLE_STATE>
        get() = arrayMemberAt(24)
    
}

class PPM_WMI_PERF_STATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var Frequency: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Power: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var PercentFrequency: BYTE
        get() = memberAt<BYTEVar>(8).value
        set(value) { memberAt<BYTEVar>(8).value = value }
    
    var IncreaseLevel: BYTE
        get() = memberAt<BYTEVar>(9).value
        set(value) { memberAt<BYTEVar>(9).value = value }
    
    var DecreaseLevel: BYTE
        get() = memberAt<BYTEVar>(10).value
        set(value) { memberAt<BYTEVar>(10).value = value }
    
    var Type: BYTE
        get() = memberAt<BYTEVar>(11).value
        set(value) { memberAt<BYTEVar>(11).value = value }
    
    var IncreaseTime: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var DecreaseTime: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var Control: DWORD64
        get() = memberAt<DWORD64Var>(24).value
        set(value) { memberAt<DWORD64Var>(24).value = value }
    
    var Status: DWORD64
        get() = memberAt<DWORD64Var>(32).value
        set(value) { memberAt<DWORD64Var>(32).value = value }
    
    var HitCount: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var Reserved1: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var Reserved2: DWORD64
        get() = memberAt<DWORD64Var>(48).value
        set(value) { memberAt<DWORD64Var>(48).value = value }
    
    var Reserved3: DWORD64
        get() = memberAt<DWORD64Var>(56).value
        set(value) { memberAt<DWORD64Var>(56).value = value }
    
}

class PPM_WMI_PERF_STATES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(144, 8)
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var MaxFrequency: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var CurrentState: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var MaxPerfState: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var MinPerfState: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var LowestPerfState: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var ThermalConstraint: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var BusyAdjThreshold: BYTE
        get() = memberAt<BYTEVar>(28).value
        set(value) { memberAt<BYTEVar>(28).value = value }
    
    var PolicyType: BYTE
        get() = memberAt<BYTEVar>(29).value
        set(value) { memberAt<BYTEVar>(29).value = value }
    
    var Type: BYTE
        get() = memberAt<BYTEVar>(30).value
        set(value) { memberAt<BYTEVar>(30).value = value }
    
    var Reserved: BYTE
        get() = memberAt<BYTEVar>(31).value
        set(value) { memberAt<BYTEVar>(31).value = value }
    
    var TimerInterval: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var TargetProcessors: DWORD64
        get() = memberAt<DWORD64Var>(40).value
        set(value) { memberAt<DWORD64Var>(40).value = value }
    
    var PStateHandler: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var PStateContext: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var TStateHandler: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var TStateContext: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var FeedbackHandler: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var Reserved1: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    var Reserved2: DWORD64
        get() = memberAt<DWORD64Var>(72).value
        set(value) { memberAt<DWORD64Var>(72).value = value }
    
    val State: CArrayPointer<PPM_WMI_PERF_STATE>
        get() = arrayMemberAt(80)
    
}

class PPM_WMI_PERF_STATES_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(144, 8)
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var MaxFrequency: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var CurrentState: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var MaxPerfState: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var MinPerfState: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var LowestPerfState: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var ThermalConstraint: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var BusyAdjThreshold: BYTE
        get() = memberAt<BYTEVar>(28).value
        set(value) { memberAt<BYTEVar>(28).value = value }
    
    var PolicyType: BYTE
        get() = memberAt<BYTEVar>(29).value
        set(value) { memberAt<BYTEVar>(29).value = value }
    
    var Type: BYTE
        get() = memberAt<BYTEVar>(30).value
        set(value) { memberAt<BYTEVar>(30).value = value }
    
    var Reserved: BYTE
        get() = memberAt<BYTEVar>(31).value
        set(value) { memberAt<BYTEVar>(31).value = value }
    
    var TimerInterval: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var TargetProcessors: PVOID?
        get() = memberAt<PVOIDVar>(40).value
        set(value) { memberAt<PVOIDVar>(40).value = value }
    
    var PStateHandler: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var PStateContext: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var TStateHandler: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var TStateContext: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var FeedbackHandler: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var Reserved1: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    var Reserved2: DWORD64
        get() = memberAt<DWORD64Var>(72).value
        set(value) { memberAt<DWORD64Var>(72).value = value }
    
    val State: CArrayPointer<PPM_WMI_PERF_STATE>
        get() = arrayMemberAt(80)
    
}

class PPM_IDLE_STATE_ACCOUNTING(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var IdleTransitions: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var FailedTransitions: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var InvalidBucketIndex: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var TotalTime: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
    val IdleTimeBuckets: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(24)
    
}

class PPM_IDLE_ACCOUNTING(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    var StateCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var TotalTransitions: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ResetCount: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var StartTime: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
    val State: CArrayPointer<PPM_IDLE_STATE_ACCOUNTING>
        get() = arrayMemberAt(24)
    
}

class PPM_IDLE_STATE_BUCKET_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var TotalTimeUs: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
    var MinTimeUs: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var MaxTimeUs: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class PPM_IDLE_STATE_ACCOUNTING_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(416, 8)
    
    var TotalTime: DWORD64
        get() = memberAt<DWORD64Var>(0).value
        set(value) { memberAt<DWORD64Var>(0).value = value }
    
    var IdleTransitions: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var FailedTransitions: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var InvalidBucketIndex: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var MinTimeUs: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var MaxTimeUs: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var CancelledTransitions: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    val IdleTimeBuckets: CArrayPointer<PPM_IDLE_STATE_BUCKET_EX>
        get() = arrayMemberAt(32)
    
}

class PPM_IDLE_ACCOUNTING_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(440, 8)
    
    var StateCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var TotalTransitions: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ResetCount: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var AbortCount: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var StartTime: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
    val State: CArrayPointer<PPM_IDLE_STATE_ACCOUNTING_EX>
        get() = arrayMemberAt(24)
    
}

class PPM_PERFSTATE_EVENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var State: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Status: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Latency: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Speed: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var Processor: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class PPM_PERFSTATE_DOMAIN_EVENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var State: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Latency: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Speed: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Processors: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
}

class PPM_IDLESTATE_EVENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var NewState: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var OldState: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Processors: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
}

class PPM_THERMALCHANGE_EVENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var ThermalConstraint: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Processors: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
}

class PPM_THERMAL_POLICY_EVENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Mode: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var Processors: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
}

class POWER_ACTION_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var Action: POWER_ACTION
        get() = memberAt<POWER_ACTIONVar>(0).value
        set(value) { memberAt<POWER_ACTIONVar>(0).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var EventCode: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class PROCESSOR_IDLESTATE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var TimeCheck: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var DemotePercent: BYTE
        get() = memberAt<BYTEVar>(4).value
        set(value) { memberAt<BYTEVar>(4).value = value }
    
    var PromotePercent: BYTE
        get() = memberAt<BYTEVar>(5).value
        set(value) { memberAt<BYTEVar>(5).value = value }
    
    val Spare: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(6)
    
}

class SYSTEM_POWER_LEVEL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var Enable: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
    val Spare: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(1)
    
    var BatteryLevel: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val PowerPolicy: POWER_ACTION_POLICY
        get() = memberAt(8)
    
    var MinSystemState: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(20).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(20).value = value }
    
}

class _SYSTEM_POWER_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(232, 4)
    
    var Revision: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val PowerButton: POWER_ACTION_POLICY
        get() = memberAt(4)
    
    val SleepButton: POWER_ACTION_POLICY
        get() = memberAt(16)
    
    val LidClose: POWER_ACTION_POLICY
        get() = memberAt(28)
    
    var LidOpenWake: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(40).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(40).value = value }
    
    var Reserved: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    val Idle: POWER_ACTION_POLICY
        get() = memberAt(48)
    
    var IdleTimeout: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var IdleSensitivity: BYTE
        get() = memberAt<BYTEVar>(64).value
        set(value) { memberAt<BYTEVar>(64).value = value }
    
    var DynamicThrottle: BYTE
        get() = memberAt<BYTEVar>(65).value
        set(value) { memberAt<BYTEVar>(65).value = value }
    
    val Spare2: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(66)
    
    var MinSleep: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(68).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(68).value = value }
    
    var MaxSleep: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(72).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(72).value = value }
    
    var ReducedLatencySleep: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(76).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(76).value = value }
    
    var WinLogonFlags: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var Spare3: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var DozeS4Timeout: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var BroadcastCapacityResolution: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    val DischargePolicy: CArrayPointer<SYSTEM_POWER_LEVEL>
        get() = arrayMemberAt(96)
    
    var VideoTimeout: DWORD
        get() = memberAt<DWORDVar>(192).value
        set(value) { memberAt<DWORDVar>(192).value = value }
    
    var VideoDimDisplay: BOOLEAN
        get() = memberAt<BOOLEANVar>(196).value
        set(value) { memberAt<BOOLEANVar>(196).value = value }
    
    val VideoReserved: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(200)
    
    var SpindownTimeout: DWORD
        get() = memberAt<DWORDVar>(212).value
        set(value) { memberAt<DWORDVar>(212).value = value }
    
    var OptimizeForPower: BOOLEAN
        get() = memberAt<BOOLEANVar>(216).value
        set(value) { memberAt<BOOLEANVar>(216).value = value }
    
    var FanThrottleTolerance: BYTE
        get() = memberAt<BYTEVar>(217).value
        set(value) { memberAt<BYTEVar>(217).value = value }
    
    var ForcedThrottle: BYTE
        get() = memberAt<BYTEVar>(218).value
        set(value) { memberAt<BYTEVar>(218).value = value }
    
    var MinThrottle: BYTE
        get() = memberAt<BYTEVar>(219).value
        set(value) { memberAt<BYTEVar>(219).value = value }
    
    val OverThrottled: POWER_ACTION_POLICY
        get() = memberAt(220)
    
}

class PROCESSOR_IDLESTATE_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var Revision: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    val Flags: anonymousStruct35
        get() = memberAt(2)
    
    var PolicyCount: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val Policy: CArrayPointer<PROCESSOR_IDLESTATE_INFO>
        get() = arrayMemberAt(8)
    
}

class anonymousStruct35(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(2, 2)
    
    var AsWORD: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
}

class anonymousStruct36(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(2, 2)
    
    var AllowScaling: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
}

class _PROCESSOR_POWER_POLICY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var TimeCheck: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var DemoteLimit: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var PromoteLimit: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var DemotePercent: BYTE
        get() = memberAt<BYTEVar>(12).value
        set(value) { memberAt<BYTEVar>(12).value = value }
    
    var PromotePercent: BYTE
        get() = memberAt<BYTEVar>(13).value
        set(value) { memberAt<BYTEVar>(13).value = value }
    
    val Spare: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(14)
    
    var AllowDemotion: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _PROCESSOR_POWER_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(76, 4)
    
    var Revision: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var DynamicThrottle: BYTE
        get() = memberAt<BYTEVar>(4).value
        set(value) { memberAt<BYTEVar>(4).value = value }
    
    val Spare: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(5)
    
    var DisableCStates: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var PolicyCount: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    val Policy: CArrayPointer<PROCESSOR_POWER_POLICY_INFO>
        get() = arrayMemberAt(16)
    
}

class PROCESSOR_PERFSTATE_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var Revision: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var MaxThrottle: BYTE
        get() = memberAt<BYTEVar>(4).value
        set(value) { memberAt<BYTEVar>(4).value = value }
    
    var MinThrottle: BYTE
        get() = memberAt<BYTEVar>(5).value
        set(value) { memberAt<BYTEVar>(5).value = value }
    
    var BusyAdjThreshold: BYTE
        get() = memberAt<BYTEVar>(6).value
        set(value) { memberAt<BYTEVar>(6).value = value }
    
    var TimeCheck: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var IncreaseTime: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var DecreaseTime: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var IncreasePercent: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var DecreasePercent: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class anonymousStruct37(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    var Spare: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    val Flags: anonymousStruct38
        get() = memberAt(0)
    
}

class anonymousStruct38(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    var AsBYTE: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
}

class anonymousStruct39(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    var NoDomainAccounting: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
}

class _ADMINISTRATOR_POWER_POLICY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var MinSleep: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(0).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(0).value = value }
    
    var MaxSleep: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(4).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(4).value = value }
    
    var MinVideoTimeout: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var MaxVideoTimeout: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var MinSpindownTimeout: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var MaxSpindownTimeout: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class SYSTEM_POWER_CAPABILITIES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(76, 4)
    
    var PowerButtonPresent: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
    var SleepButtonPresent: BOOLEAN
        get() = memberAt<BOOLEANVar>(1).value
        set(value) { memberAt<BOOLEANVar>(1).value = value }
    
    var LidPresent: BOOLEAN
        get() = memberAt<BOOLEANVar>(2).value
        set(value) { memberAt<BOOLEANVar>(2).value = value }
    
    var SystemS1: BOOLEAN
        get() = memberAt<BOOLEANVar>(3).value
        set(value) { memberAt<BOOLEANVar>(3).value = value }
    
    var SystemS2: BOOLEAN
        get() = memberAt<BOOLEANVar>(4).value
        set(value) { memberAt<BOOLEANVar>(4).value = value }
    
    var SystemS3: BOOLEAN
        get() = memberAt<BOOLEANVar>(5).value
        set(value) { memberAt<BOOLEANVar>(5).value = value }
    
    var SystemS4: BOOLEAN
        get() = memberAt<BOOLEANVar>(6).value
        set(value) { memberAt<BOOLEANVar>(6).value = value }
    
    var SystemS5: BOOLEAN
        get() = memberAt<BOOLEANVar>(7).value
        set(value) { memberAt<BOOLEANVar>(7).value = value }
    
    var HiberFilePresent: BOOLEAN
        get() = memberAt<BOOLEANVar>(8).value
        set(value) { memberAt<BOOLEANVar>(8).value = value }
    
    var FullWake: BOOLEAN
        get() = memberAt<BOOLEANVar>(9).value
        set(value) { memberAt<BOOLEANVar>(9).value = value }
    
    var VideoDimPresent: BOOLEAN
        get() = memberAt<BOOLEANVar>(10).value
        set(value) { memberAt<BOOLEANVar>(10).value = value }
    
    var ApmPresent: BOOLEAN
        get() = memberAt<BOOLEANVar>(11).value
        set(value) { memberAt<BOOLEANVar>(11).value = value }
    
    var UpsPresent: BOOLEAN
        get() = memberAt<BOOLEANVar>(12).value
        set(value) { memberAt<BOOLEANVar>(12).value = value }
    
    var ThermalControl: BOOLEAN
        get() = memberAt<BOOLEANVar>(13).value
        set(value) { memberAt<BOOLEANVar>(13).value = value }
    
    var ProcessorThrottle: BOOLEAN
        get() = memberAt<BOOLEANVar>(14).value
        set(value) { memberAt<BOOLEANVar>(14).value = value }
    
    var ProcessorMinThrottle: BYTE
        get() = memberAt<BYTEVar>(15).value
        set(value) { memberAt<BYTEVar>(15).value = value }
    
    var ProcessorMaxThrottle: BYTE
        get() = memberAt<BYTEVar>(16).value
        set(value) { memberAt<BYTEVar>(16).value = value }
    
    var FastSystemS4: BOOLEAN
        get() = memberAt<BOOLEANVar>(17).value
        set(value) { memberAt<BOOLEANVar>(17).value = value }
    
    val spare2: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(18)
    
    var DiskSpinDown: BOOLEAN
        get() = memberAt<BOOLEANVar>(21).value
        set(value) { memberAt<BOOLEANVar>(21).value = value }
    
    val spare3: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(22)
    
    var SystemBatteriesPresent: BOOLEAN
        get() = memberAt<BOOLEANVar>(30).value
        set(value) { memberAt<BOOLEANVar>(30).value = value }
    
    var BatteriesAreShortTerm: BOOLEAN
        get() = memberAt<BOOLEANVar>(31).value
        set(value) { memberAt<BOOLEANVar>(31).value = value }
    
    val BatteryScale: CArrayPointer<BATTERY_REPORTING_SCALE>
        get() = arrayMemberAt(32)
    
    var AcOnLineWake: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(56).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(56).value = value }
    
    var SoftLidWake: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(60).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(60).value = value }
    
    var RtcWake: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(64).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(64).value = value }
    
    var MinDeviceWakeState: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(68).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(68).value = value }
    
    var DefaultLowLatencyWake: SYSTEM_POWER_STATE
        get() = memberAt<SYSTEM_POWER_STATEVar>(72).value
        set(value) { memberAt<SYSTEM_POWER_STATEVar>(72).value = value }
    
}

class SYSTEM_BATTERY_STATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var AcOnLine: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
    var BatteryPresent: BOOLEAN
        get() = memberAt<BOOLEANVar>(1).value
        set(value) { memberAt<BOOLEANVar>(1).value = value }
    
    var Charging: BOOLEAN
        get() = memberAt<BOOLEANVar>(2).value
        set(value) { memberAt<BOOLEANVar>(2).value = value }
    
    var Discharging: BOOLEAN
        get() = memberAt<BOOLEANVar>(3).value
        set(value) { memberAt<BOOLEANVar>(3).value = value }
    
    val Spare1: CArrayPointer<BOOLEANVar>
        get() = arrayMemberAt(4)
    
    var MaxCapacity: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var RemainingCapacity: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var Rate: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var EstimatedTime: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var DefaultAlert1: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var DefaultAlert2: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class _IMAGE_DOS_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 2)
    
    var e_magic: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var e_cblp: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var e_cp: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var e_crlc: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var e_cparhdr: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var e_minalloc: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var e_maxalloc: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var e_ss: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var e_sp: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
    var e_csum: WORD
        get() = memberAt<WORDVar>(18).value
        set(value) { memberAt<WORDVar>(18).value = value }
    
    var e_ip: WORD
        get() = memberAt<WORDVar>(20).value
        set(value) { memberAt<WORDVar>(20).value = value }
    
    var e_cs: WORD
        get() = memberAt<WORDVar>(22).value
        set(value) { memberAt<WORDVar>(22).value = value }
    
    var e_lfarlc: WORD
        get() = memberAt<WORDVar>(24).value
        set(value) { memberAt<WORDVar>(24).value = value }
    
    var e_ovno: WORD
        get() = memberAt<WORDVar>(26).value
        set(value) { memberAt<WORDVar>(26).value = value }
    
    val e_res: CArrayPointer<WORDVar>
        get() = arrayMemberAt(28)
    
    var e_oemid: WORD
        get() = memberAt<WORDVar>(36).value
        set(value) { memberAt<WORDVar>(36).value = value }
    
    var e_oeminfo: WORD
        get() = memberAt<WORDVar>(38).value
        set(value) { memberAt<WORDVar>(38).value = value }
    
    val e_res2: CArrayPointer<WORDVar>
        get() = arrayMemberAt(40)
    
    var e_lfanew: LONG
        get() = memberAt<LONGVar>(60).value
        set(value) { memberAt<LONGVar>(60).value = value }
    
}

class _IMAGE_OS2_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 2)
    
    var ne_magic: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var ne_ver: CHAR
        get() = memberAt<CHARVar>(2).value
        set(value) { memberAt<CHARVar>(2).value = value }
    
    var ne_rev: CHAR
        get() = memberAt<CHARVar>(3).value
        set(value) { memberAt<CHARVar>(3).value = value }
    
    var ne_enttab: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var ne_cbenttab: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var ne_crc: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var ne_flags: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var ne_autodata: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var ne_heap: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
    var ne_stack: WORD
        get() = memberAt<WORDVar>(18).value
        set(value) { memberAt<WORDVar>(18).value = value }
    
    var ne_csip: LONG
        get() = memberAt<LONGVar>(20).value
        set(value) { memberAt<LONGVar>(20).value = value }
    
    var ne_sssp: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var ne_cseg: WORD
        get() = memberAt<WORDVar>(28).value
        set(value) { memberAt<WORDVar>(28).value = value }
    
    var ne_cmod: WORD
        get() = memberAt<WORDVar>(30).value
        set(value) { memberAt<WORDVar>(30).value = value }
    
    var ne_cbnrestab: WORD
        get() = memberAt<WORDVar>(32).value
        set(value) { memberAt<WORDVar>(32).value = value }
    
    var ne_segtab: WORD
        get() = memberAt<WORDVar>(34).value
        set(value) { memberAt<WORDVar>(34).value = value }
    
    var ne_rsrctab: WORD
        get() = memberAt<WORDVar>(36).value
        set(value) { memberAt<WORDVar>(36).value = value }
    
    var ne_restab: WORD
        get() = memberAt<WORDVar>(38).value
        set(value) { memberAt<WORDVar>(38).value = value }
    
    var ne_modtab: WORD
        get() = memberAt<WORDVar>(40).value
        set(value) { memberAt<WORDVar>(40).value = value }
    
    var ne_imptab: WORD
        get() = memberAt<WORDVar>(42).value
        set(value) { memberAt<WORDVar>(42).value = value }
    
    var ne_nrestab: LONG
        get() = memberAt<LONGVar>(44).value
        set(value) { memberAt<LONGVar>(44).value = value }
    
    var ne_cmovent: WORD
        get() = memberAt<WORDVar>(48).value
        set(value) { memberAt<WORDVar>(48).value = value }
    
    var ne_align: WORD
        get() = memberAt<WORDVar>(50).value
        set(value) { memberAt<WORDVar>(50).value = value }
    
    var ne_cres: WORD
        get() = memberAt<WORDVar>(52).value
        set(value) { memberAt<WORDVar>(52).value = value }
    
    var ne_exetyp: BYTE
        get() = memberAt<BYTEVar>(54).value
        set(value) { memberAt<BYTEVar>(54).value = value }
    
    var ne_flagsothers: BYTE
        get() = memberAt<BYTEVar>(55).value
        set(value) { memberAt<BYTEVar>(55).value = value }
    
    var ne_pretthunks: WORD
        get() = memberAt<WORDVar>(56).value
        set(value) { memberAt<WORDVar>(56).value = value }
    
    var ne_psegrefbytes: WORD
        get() = memberAt<WORDVar>(58).value
        set(value) { memberAt<WORDVar>(58).value = value }
    
    var ne_swaparea: WORD
        get() = memberAt<WORDVar>(60).value
        set(value) { memberAt<WORDVar>(60).value = value }
    
    var ne_expver: WORD
        get() = memberAt<WORDVar>(62).value
        set(value) { memberAt<WORDVar>(62).value = value }
    
}

class _IMAGE_VXD_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(196, 2)
    
    var e32_magic: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var e32_border: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var e32_worder: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
    var e32_level: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var e32_cpu: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var e32_os: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var e32_ver: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var e32_mflags: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var e32_mpages: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var e32_startobj: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var e32_eip: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var e32_stackobj: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var e32_esp: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var e32_pagesize: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var e32_lastpagesize: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var e32_fixupsize: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var e32_fixupsum: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var e32_ldrsize: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var e32_ldrsum: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var e32_objtab: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var e32_objcnt: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    var e32_objmap: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
    var e32_itermap: DWORD
        get() = memberAt<DWORDVar>(76).value
        set(value) { memberAt<DWORDVar>(76).value = value }
    
    var e32_rsrctab: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var e32_rsrccnt: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var e32_restab: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var e32_enttab: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    var e32_dirtab: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var e32_dircnt: DWORD
        get() = memberAt<DWORDVar>(100).value
        set(value) { memberAt<DWORDVar>(100).value = value }
    
    var e32_fpagetab: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var e32_frectab: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    var e32_impmod: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var e32_impmodcnt: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
    var e32_impproc: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
    var e32_pagesum: DWORD
        get() = memberAt<DWORDVar>(124).value
        set(value) { memberAt<DWORDVar>(124).value = value }
    
    var e32_datapage: DWORD
        get() = memberAt<DWORDVar>(128).value
        set(value) { memberAt<DWORDVar>(128).value = value }
    
    var e32_preload: DWORD
        get() = memberAt<DWORDVar>(132).value
        set(value) { memberAt<DWORDVar>(132).value = value }
    
    var e32_nrestab: DWORD
        get() = memberAt<DWORDVar>(136).value
        set(value) { memberAt<DWORDVar>(136).value = value }
    
    var e32_cbnrestab: DWORD
        get() = memberAt<DWORDVar>(140).value
        set(value) { memberAt<DWORDVar>(140).value = value }
    
    var e32_nressum: DWORD
        get() = memberAt<DWORDVar>(144).value
        set(value) { memberAt<DWORDVar>(144).value = value }
    
    var e32_autodata: DWORD
        get() = memberAt<DWORDVar>(148).value
        set(value) { memberAt<DWORDVar>(148).value = value }
    
    var e32_debuginfo: DWORD
        get() = memberAt<DWORDVar>(152).value
        set(value) { memberAt<DWORDVar>(152).value = value }
    
    var e32_debuglen: DWORD
        get() = memberAt<DWORDVar>(156).value
        set(value) { memberAt<DWORDVar>(156).value = value }
    
    var e32_instpreload: DWORD
        get() = memberAt<DWORDVar>(160).value
        set(value) { memberAt<DWORDVar>(160).value = value }
    
    var e32_instdemand: DWORD
        get() = memberAt<DWORDVar>(164).value
        set(value) { memberAt<DWORDVar>(164).value = value }
    
    var e32_heapsize: DWORD
        get() = memberAt<DWORDVar>(168).value
        set(value) { memberAt<DWORDVar>(168).value = value }
    
    val e32_res3: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(172)
    
    var e32_winresoff: DWORD
        get() = memberAt<DWORDVar>(184).value
        set(value) { memberAt<DWORDVar>(184).value = value }
    
    var e32_winreslen: DWORD
        get() = memberAt<DWORDVar>(188).value
        set(value) { memberAt<DWORDVar>(188).value = value }
    
    var e32_devid: WORD
        get() = memberAt<WORDVar>(192).value
        set(value) { memberAt<WORDVar>(192).value = value }
    
    var e32_ddkver: WORD
        get() = memberAt<WORDVar>(194).value
        set(value) { memberAt<WORDVar>(194).value = value }
    
}

class _IMAGE_FILE_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var Machine: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var NumberOfSections: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var PointerToSymbolTable: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var NumberOfSymbols: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var SizeOfOptionalHeader: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
    var Characteristics: WORD
        get() = memberAt<WORDVar>(18).value
        set(value) { memberAt<WORDVar>(18).value = value }
    
}

class _IMAGE_DATA_DIRECTORY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var VirtualAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _IMAGE_OPTIONAL_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(224, 4)
    
    var Magic: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var MajorLinkerVersion: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var MinorLinkerVersion: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
    var SizeOfCode: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var SizeOfInitializedData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var SizeOfUninitializedData: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var AddressOfEntryPoint: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var BaseOfCode: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var BaseOfData: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var ImageBase: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var SectionAlignment: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var FileAlignment: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var MajorOperatingSystemVersion: WORD
        get() = memberAt<WORDVar>(40).value
        set(value) { memberAt<WORDVar>(40).value = value }
    
    var MinorOperatingSystemVersion: WORD
        get() = memberAt<WORDVar>(42).value
        set(value) { memberAt<WORDVar>(42).value = value }
    
    var MajorImageVersion: WORD
        get() = memberAt<WORDVar>(44).value
        set(value) { memberAt<WORDVar>(44).value = value }
    
    var MinorImageVersion: WORD
        get() = memberAt<WORDVar>(46).value
        set(value) { memberAt<WORDVar>(46).value = value }
    
    var MajorSubsystemVersion: WORD
        get() = memberAt<WORDVar>(48).value
        set(value) { memberAt<WORDVar>(48).value = value }
    
    var MinorSubsystemVersion: WORD
        get() = memberAt<WORDVar>(50).value
        set(value) { memberAt<WORDVar>(50).value = value }
    
    var Win32VersionValue: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var SizeOfImage: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var SizeOfHeaders: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var CheckSum: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var Subsystem: WORD
        get() = memberAt<WORDVar>(68).value
        set(value) { memberAt<WORDVar>(68).value = value }
    
    var DllCharacteristics: WORD
        get() = memberAt<WORDVar>(70).value
        set(value) { memberAt<WORDVar>(70).value = value }
    
    var SizeOfStackReserve: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
    var SizeOfStackCommit: DWORD
        get() = memberAt<DWORDVar>(76).value
        set(value) { memberAt<DWORDVar>(76).value = value }
    
    var SizeOfHeapReserve: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var SizeOfHeapCommit: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var LoaderFlags: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var NumberOfRvaAndSizes: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    val DataDirectory: CArrayPointer<IMAGE_DATA_DIRECTORY>
        get() = arrayMemberAt(96)
    
}

class _IMAGE_ROM_OPTIONAL_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 4)
    
    var Magic: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var MajorLinkerVersion: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var MinorLinkerVersion: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
    var SizeOfCode: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var SizeOfInitializedData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var SizeOfUninitializedData: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var AddressOfEntryPoint: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var BaseOfCode: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var BaseOfData: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var BaseOfBss: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var GprMask: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    val CprMask: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(36)
    
    var GpValue: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
}

class _IMAGE_OPTIONAL_HEADER64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(240, 4)
    
    var Magic: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var MajorLinkerVersion: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var MinorLinkerVersion: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
    var SizeOfCode: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var SizeOfInitializedData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var SizeOfUninitializedData: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var AddressOfEntryPoint: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var BaseOfCode: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var ImageBase: ULONGLONG
        get() = memberAt<ULONGLONGVar>(24).value
        set(value) { memberAt<ULONGLONGVar>(24).value = value }
    
    var SectionAlignment: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var FileAlignment: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var MajorOperatingSystemVersion: WORD
        get() = memberAt<WORDVar>(40).value
        set(value) { memberAt<WORDVar>(40).value = value }
    
    var MinorOperatingSystemVersion: WORD
        get() = memberAt<WORDVar>(42).value
        set(value) { memberAt<WORDVar>(42).value = value }
    
    var MajorImageVersion: WORD
        get() = memberAt<WORDVar>(44).value
        set(value) { memberAt<WORDVar>(44).value = value }
    
    var MinorImageVersion: WORD
        get() = memberAt<WORDVar>(46).value
        set(value) { memberAt<WORDVar>(46).value = value }
    
    var MajorSubsystemVersion: WORD
        get() = memberAt<WORDVar>(48).value
        set(value) { memberAt<WORDVar>(48).value = value }
    
    var MinorSubsystemVersion: WORD
        get() = memberAt<WORDVar>(50).value
        set(value) { memberAt<WORDVar>(50).value = value }
    
    var Win32VersionValue: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var SizeOfImage: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var SizeOfHeaders: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var CheckSum: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var Subsystem: WORD
        get() = memberAt<WORDVar>(68).value
        set(value) { memberAt<WORDVar>(68).value = value }
    
    var DllCharacteristics: WORD
        get() = memberAt<WORDVar>(70).value
        set(value) { memberAt<WORDVar>(70).value = value }
    
    var SizeOfStackReserve: ULONGLONG
        get() = memberAt<ULONGLONGVar>(72).value
        set(value) { memberAt<ULONGLONGVar>(72).value = value }
    
    var SizeOfStackCommit: ULONGLONG
        get() = memberAt<ULONGLONGVar>(80).value
        set(value) { memberAt<ULONGLONGVar>(80).value = value }
    
    var SizeOfHeapReserve: ULONGLONG
        get() = memberAt<ULONGLONGVar>(88).value
        set(value) { memberAt<ULONGLONGVar>(88).value = value }
    
    var SizeOfHeapCommit: ULONGLONG
        get() = memberAt<ULONGLONGVar>(96).value
        set(value) { memberAt<ULONGLONGVar>(96).value = value }
    
    var LoaderFlags: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var NumberOfRvaAndSizes: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    val DataDirectory: CArrayPointer<IMAGE_DATA_DIRECTORY>
        get() = arrayMemberAt(112)
    
}

class _IMAGE_NT_HEADERS64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(264, 4)
    
    var Signature: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val FileHeader: IMAGE_FILE_HEADER
        get() = memberAt(4)
    
    val OptionalHeader: IMAGE_OPTIONAL_HEADER64
        get() = memberAt(24)
    
}

class _IMAGE_NT_HEADERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(248, 4)
    
    var Signature: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val FileHeader: IMAGE_FILE_HEADER
        get() = memberAt(4)
    
    val OptionalHeader: IMAGE_OPTIONAL_HEADER32
        get() = memberAt(24)
    
}

class _IMAGE_ROM_HEADERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(76, 4)
    
    val FileHeader: IMAGE_FILE_HEADER
        get() = memberAt(0)
    
    val OptionalHeader: IMAGE_ROM_OPTIONAL_HEADER
        get() = memberAt(20)
    
}

class ANON_OBJECT_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var Sig1: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Sig2: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var Version: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Machine: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ClassID: CLSID
        get() = memberAt(12)
    
    var SizeOfData: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class ANON_OBJECT_HEADER_V2(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(44, 4)
    
    var Sig1: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Sig2: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var Version: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Machine: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ClassID: CLSID
        get() = memberAt(12)
    
    var SizeOfData: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var MetaDataSize: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var MetaDataOffset: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
}

class ANON_OBJECT_HEADER_BIGOBJ(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 4)
    
    var Sig1: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Sig2: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var Version: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Machine: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val ClassID: CLSID
        get() = memberAt(12)
    
    var SizeOfData: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var MetaDataSize: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var MetaDataOffset: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var NumberOfSections: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var PointerToSymbolTable: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var NumberOfSymbols: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
}

class _IMAGE_SECTION_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    val Name: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
    val Misc: anonymousStruct40
        get() = memberAt(8)
    
    var VirtualAddress: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var SizeOfRawData: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var PointerToRawData: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var PointerToRelocations: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var PointerToLinenumbers: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var NumberOfRelocations: WORD
        get() = memberAt<WORDVar>(32).value
        set(value) { memberAt<WORDVar>(32).value = value }
    
    var NumberOfLinenumbers: WORD
        get() = memberAt<WORDVar>(34).value
        set(value) { memberAt<WORDVar>(34).value = value }
    
    var Characteristics: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class anonymousStruct40(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var PhysicalAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var VirtualSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _IMAGE_SYMBOL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(18, 2)
    
    val N: anonymousStruct41
        get() = memberAt(0)
    
    var Value: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var SectionNumber: SHORT
        get() = memberAt<SHORTVar>(12).value
        set(value) { memberAt<SHORTVar>(12).value = value }
    
    var Type: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var StorageClass: BYTE
        get() = memberAt<BYTEVar>(16).value
        set(value) { memberAt<BYTEVar>(16).value = value }
    
    var NumberOfAuxSymbols: BYTE
        get() = memberAt<BYTEVar>(17).value
        set(value) { memberAt<BYTEVar>(17).value = value }
    
}

class anonymousStruct41(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    val ShortName: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
    val Name: anonymousStruct42
        get() = memberAt(0)
    
    val LongName: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(0)
    
}

class anonymousStruct42(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    var Short: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Long: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _IMAGE_SYMBOL_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 2)
    
    val N: anonymousStruct43
        get() = memberAt(0)
    
    var Value: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var SectionNumber: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var Type: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
    var StorageClass: BYTE
        get() = memberAt<BYTEVar>(18).value
        set(value) { memberAt<BYTEVar>(18).value = value }
    
    var NumberOfAuxSymbols: BYTE
        get() = memberAt<BYTEVar>(19).value
        set(value) { memberAt<BYTEVar>(19).value = value }
    
}

class anonymousStruct43(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    val ShortName: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
    val Name: anonymousStruct44
        get() = memberAt(0)
    
    val LongName: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(0)
    
}

class anonymousStruct44(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    var Short: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Long: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class IMAGE_AUX_SYMBOL_TOKEN_DEF(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(18, 2)
    
    var bAuxType: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var bReserved: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var SymbolTableIndex: DWORD
        get() = memberAt<DWORDVar>(2).value
        set(value) { memberAt<DWORDVar>(2).value = value }
    
    val rgbReserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(6)
    
}

class _IMAGE_AUX_SYMBOL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(18, 2)
    
    val Sym: anonymousStruct45
        get() = memberAt(0)
    
    val File: anonymousStruct46
        get() = memberAt(0)
    
    val Section: anonymousStruct47
        get() = memberAt(0)
    
    val TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF
        get() = memberAt(0)
    
    val CRC: anonymousStruct48
        get() = memberAt(0)
    
}

class anonymousStruct45(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(18, 2)
    
    var TagIndex: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Misc: anonymousStruct49
        get() = memberAt(4)
    
    val FcnAry: anonymousStruct50
        get() = memberAt(8)
    
    var TvIndex: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
}

class anonymousStruct49(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    val LnSz: anonymousStruct51
        get() = memberAt(0)
    
    var TotalSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct51(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var Linenumber: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Size: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
}

class anonymousStruct50(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    val Function: anonymousStruct52
        get() = memberAt(0)
    
    val Array: anonymousStruct53
        get() = memberAt(0)
    
}

class anonymousStruct52(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    var PointerToLinenumber: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var PointerToNextFunction: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class anonymousStruct53(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    val Dimension: CArrayPointer<WORDVar>
        get() = arrayMemberAt(0)
    
}

class anonymousStruct46(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(18, 1)
    
    val Name: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
}

class anonymousStruct47(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 2)
    
    var Length: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var NumberOfRelocations: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var NumberOfLinenumbers: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var CheckSum: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Number: SHORT
        get() = memberAt<SHORTVar>(12).value
        set(value) { memberAt<SHORTVar>(12).value = value }
    
    var Selection: BYTE
        get() = memberAt<BYTEVar>(14).value
        set(value) { memberAt<BYTEVar>(14).value = value }
    
}

class anonymousStruct48(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(18, 2)
    
    var crc: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rgbReserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
}

class _IMAGE_AUX_SYMBOL_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 2)
    
    val Sym: anonymousStruct54
        get() = memberAt(0)
    
    val File: anonymousStruct55
        get() = memberAt(0)
    
    val Section: anonymousStruct56
        get() = memberAt(0)
    
    val CRC: anonymousStruct57
        get() = memberAt(0)
    
}

class anonymousStruct54(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 2)
    
    var WeakDefaultSymIndex: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var WeakSearchType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val rgbReserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(8)
    
}

class anonymousStruct55(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 1)
    
    val Name: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
}

class anonymousStruct56(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 2)
    
    var Length: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var NumberOfRelocations: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var NumberOfLinenumbers: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var CheckSum: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Number: SHORT
        get() = memberAt<SHORTVar>(12).value
        set(value) { memberAt<SHORTVar>(12).value = value }
    
    var Selection: BYTE
        get() = memberAt<BYTEVar>(14).value
        set(value) { memberAt<BYTEVar>(14).value = value }
    
    var bReserved: BYTE
        get() = memberAt<BYTEVar>(15).value
        set(value) { memberAt<BYTEVar>(15).value = value }
    
    var HighNumber: SHORT
        get() = memberAt<SHORTVar>(16).value
        set(value) { memberAt<SHORTVar>(16).value = value }
    
    val rgbReserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(18)
    
}

class anonymousStruct57(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 2)
    
    var crc: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rgbReserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
}

class anonymousStruct58(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 2)
    
    val TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF
        get() = memberAt(0)
    
    val rgbReserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(18)
    
}

class _IMAGE_RELOCATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(10, 2)
    
    var SymbolTableIndex: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Type: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
}

class anonymousStruct59(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var VirtualAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var RelocCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _IMAGE_LINENUMBER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(6, 2)
    
    val Type: anonymousStruct60
        get() = memberAt(0)
    
    var Linenumber: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
}

class anonymousStruct60(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var SymbolTableIndex: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var VirtualAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _IMAGE_BASE_RELOCATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var VirtualAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var SizeOfBlock: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _IMAGE_ARCHIVE_MEMBER_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(60, 1)
    
    val Name: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
    val Date: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(16)
    
    val UserID: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
    val GroupID: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(34)
    
    val Mode: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(40)
    
    val Size: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(48)
    
    val EndHeader: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(58)
    
}

class _IMAGE_EXPORT_DIRECTORY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var Characteristics: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var MajorVersion: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var MinorVersion: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var Name: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var Base: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var NumberOfFunctions: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var NumberOfNames: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var AddressOfFunctions: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var AddressOfNames: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var AddressOfNameOrdinals: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class _IMAGE_IMPORT_BY_NAME(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var Hint: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    val Name: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(2)
    
}

class _IMAGE_THUNK_DATA64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    val u1: anonymousStruct61
        get() = memberAt(0)
    
}

class anonymousStruct61(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var ForwarderString: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var Function: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var Ordinal: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var AddressOfData: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
}

class _IMAGE_THUNK_DATA32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    val u1: anonymousStruct62
        get() = memberAt(0)
    
}

class anonymousStruct62(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var ForwarderString: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Function: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Ordinal: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var AddressOfData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _IMAGE_TLS_DIRECTORY64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var StartAddressOfRawData: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var EndAddressOfRawData: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
    var AddressOfIndex: ULONGLONG
        get() = memberAt<ULONGLONGVar>(16).value
        set(value) { memberAt<ULONGLONGVar>(16).value = value }
    
    var AddressOfCallBacks: ULONGLONG
        get() = memberAt<ULONGLONGVar>(24).value
        set(value) { memberAt<ULONGLONGVar>(24).value = value }
    
    var SizeOfZeroFill: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var Characteristics: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class _IMAGE_TLS_DIRECTORY32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var StartAddressOfRawData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var EndAddressOfRawData: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var AddressOfIndex: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var AddressOfCallBacks: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var SizeOfZeroFill: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var Characteristics: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class _IMAGE_IMPORT_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ForwarderChain: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Name: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var FirstThunk: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class anonymousStruct63(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Characteristics: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var OriginalFirstThunk: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _IMAGE_BOUND_IMPORT_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var OffsetModuleName: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var NumberOfModuleForwarderRefs: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
}

class _IMAGE_BOUND_FORWARDER_REF(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var OffsetModuleName: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Reserved: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
}

class _IMAGE_DELAYLOAD_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val Attributes: anonymousStruct64
        get() = memberAt(0)
    
    var DllNameRVA: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ModuleHandleRVA: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ImportAddressTableRVA: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var ImportNameTableRVA: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var BoundImportAddressTableRVA: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var UnloadInformationTableRVA: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class anonymousStruct64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var AllAttributes: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct65(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var RvaBased: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _IMAGE_RESOURCE_DIRECTORY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var Characteristics: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var MajorVersion: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var MinorVersion: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var NumberOfNamedEntries: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var NumberOfIdEntries: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
}

class _IMAGE_RESOURCE_DIRECTORY_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
}

class anonymousStruct66(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Name: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Id: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
}

class anonymousStruct67(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var NameOffset: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _IMAGE_RESOURCE_DIRECTORY_STRING(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var Length: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    val NameString: CArrayPointer<CHARVar>
        get() = arrayMemberAt(2)
    
}

class _IMAGE_RESOURCE_DIR_STRING_U(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var Length: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    val NameString: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(2)
    
}

class _IMAGE_RESOURCE_DATA_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var OffsetToData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var CodePage: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Reserved: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class IMAGE_LOAD_CONFIG_DIRECTORY32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 4)
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var MajorVersion: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var MinorVersion: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var GlobalFlagsClear: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var GlobalFlagsSet: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var CriticalSectionDefaultTimeout: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var DeCommitFreeBlockThreshold: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var DeCommitTotalFreeThreshold: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var LockPrefixTable: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var MaximumAllocationSize: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var VirtualMemoryThreshold: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var ProcessHeapFlags: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var ProcessAffinityMask: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var CSDVersion: WORD
        get() = memberAt<WORDVar>(52).value
        set(value) { memberAt<WORDVar>(52).value = value }
    
    var Reserved1: WORD
        get() = memberAt<WORDVar>(54).value
        set(value) { memberAt<WORDVar>(54).value = value }
    
    var EditList: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var SecurityCookie: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var SEHandlerTable: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var SEHandlerCount: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
}

class IMAGE_LOAD_CONFIG_DIRECTORY64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(112, 4)
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var MajorVersion: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var MinorVersion: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var GlobalFlagsClear: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var GlobalFlagsSet: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var CriticalSectionDefaultTimeout: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var DeCommitFreeBlockThreshold: ULONGLONG
        get() = memberAt<ULONGLONGVar>(24).value
        set(value) { memberAt<ULONGLONGVar>(24).value = value }
    
    var DeCommitTotalFreeThreshold: ULONGLONG
        get() = memberAt<ULONGLONGVar>(32).value
        set(value) { memberAt<ULONGLONGVar>(32).value = value }
    
    var LockPrefixTable: ULONGLONG
        get() = memberAt<ULONGLONGVar>(40).value
        set(value) { memberAt<ULONGLONGVar>(40).value = value }
    
    var MaximumAllocationSize: ULONGLONG
        get() = memberAt<ULONGLONGVar>(48).value
        set(value) { memberAt<ULONGLONGVar>(48).value = value }
    
    var VirtualMemoryThreshold: ULONGLONG
        get() = memberAt<ULONGLONGVar>(56).value
        set(value) { memberAt<ULONGLONGVar>(56).value = value }
    
    var ProcessAffinityMask: ULONGLONG
        get() = memberAt<ULONGLONGVar>(64).value
        set(value) { memberAt<ULONGLONGVar>(64).value = value }
    
    var ProcessHeapFlags: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
    var CSDVersion: WORD
        get() = memberAt<WORDVar>(76).value
        set(value) { memberAt<WORDVar>(76).value = value }
    
    var Reserved1: WORD
        get() = memberAt<WORDVar>(78).value
        set(value) { memberAt<WORDVar>(78).value = value }
    
    var EditList: ULONGLONG
        get() = memberAt<ULONGLONGVar>(80).value
        set(value) { memberAt<ULONGLONGVar>(80).value = value }
    
    var SecurityCookie: ULONGLONG
        get() = memberAt<ULONGLONGVar>(88).value
        set(value) { memberAt<ULONGLONGVar>(88).value = value }
    
    var SEHandlerTable: ULONGLONG
        get() = memberAt<ULONGLONGVar>(96).value
        set(value) { memberAt<ULONGLONGVar>(96).value = value }
    
    var SEHandlerCount: ULONGLONG
        get() = memberAt<ULONGLONGVar>(104).value
        set(value) { memberAt<ULONGLONGVar>(104).value = value }
    
}

class _IMAGE_CE_RUNTIME_FUNCTION_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var FuncStart: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var PrologLen: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var FuncLen: DWORD
        get() = memberAt<DWORDVar>(5).value
        set(value) { memberAt<DWORDVar>(5).value = value }
    
}

class _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var BeginAddress: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var EndAddress: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
    var ExceptionHandler: ULONGLONG
        get() = memberAt<ULONGLONGVar>(16).value
        set(value) { memberAt<ULONGLONGVar>(16).value = value }
    
    var HandlerData: ULONGLONG
        get() = memberAt<ULONGLONGVar>(24).value
        set(value) { memberAt<ULONGLONGVar>(24).value = value }
    
    var PrologEndAddress: ULONGLONG
        get() = memberAt<ULONGLONGVar>(32).value
        set(value) { memberAt<ULONGLONGVar>(32).value = value }
    
}

class _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var BeginAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var EndAddress: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ExceptionHandler: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var HandlerData: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var PrologEndAddress: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var BeginAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct68(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var UnwindData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct69(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Flag: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Reg: DWORD
        get() = memberAt<DWORDVar>(2).value
        set(value) { memberAt<DWORDVar>(2).value = value }
    
}

class _IMAGE_RUNTIME_FUNCTION_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var BeginAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var EndAddress: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class anonymousStruct70(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var UnwindInfoAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var UnwindData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _IMAGE_DEBUG_DIRECTORY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var Characteristics: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var MajorVersion: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var MinorVersion: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var SizeOfData: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var AddressOfRawData: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var PointerToRawData: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _IMAGE_COFF_SYMBOLS_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var NumberOfSymbols: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var LvaToFirstSymbol: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var NumberOfLinenumbers: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var LvaToFirstLinenumber: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var RvaToFirstByteOfCode: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var RvaToLastByteOfCode: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var RvaToFirstByteOfData: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var RvaToLastByteOfData: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class _FPO_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var ulOffStart: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cbProcSize: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var cdwLocals: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var cdwParams: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var cbProlog: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var cbRegs: WORD
        get() = memberAt<WORDVar>(15).value
        set(value) { memberAt<WORDVar>(15).value = value }
    
}

class _IMAGE_DEBUG_MISC(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var DataType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Length: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Unicode: BOOLEAN
        get() = memberAt<BOOLEANVar>(8).value
        set(value) { memberAt<BOOLEANVar>(8).value = value }
    
    val Reserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(9)
    
    val Data: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(12)
    
}

class _IMAGE_FUNCTION_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var StartingAddress: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var EndingAddress: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var EndOfPrologue: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _IMAGE_FUNCTION_ENTRY64(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var StartingAddress: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var EndingAddress: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
}

class anonymousStruct71(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var EndOfPrologue: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var UnwindInfoAddress: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
}

class _IMAGE_SEPARATE_DEBUG_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    var Signature: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Flags: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var Machine: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Characteristics: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var CheckSum: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var ImageBase: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var SizeOfImage: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var NumberOfSections: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var ExportedNamesSize: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var DebugDirectorySize: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var SectionAlignment: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    val Reserved: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(40)
    
}

class _NON_PAGED_DEBUG_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var Signature: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Flags: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Machine: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var Characteristics: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var CheckSum: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var SizeOfImage: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var ImageBase: ULONGLONG
        get() = memberAt<ULONGLONGVar>(24).value
        set(value) { memberAt<ULONGLONGVar>(24).value = value }
    
}

class _ImageArchitectureHeader(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var AmaskValue: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var AmaskShift: Int
        get() = memberAt<IntVar>(1).value
        set(value) { memberAt<IntVar>(1).value = value }
    
    var Adummy2: Int
        get() = memberAt<IntVar>(2).value
        set(value) { memberAt<IntVar>(2).value = value }
    
    var FirstEntryRVA: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _ImageArchitectureEntry(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var FixupInstRVA: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var NewInst: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class IMPORT_OBJECT_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var Sig1: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Sig2: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var Version: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Machine: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var TimeDateStamp: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var SizeOfData: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var Type: WORD
        get() = memberAt<WORDVar>(18).value
        set(value) { memberAt<WORDVar>(18).value = value }
    
}

class anonymousStruct72(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(2, 2)
    
    var Ordinal: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Hint: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
}

class IMAGE_COR20_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 4)
    
    var cb: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var MajorRuntimeVersion: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var MinorRuntimeVersion: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    val MetaData: IMAGE_DATA_DIRECTORY
        get() = memberAt(8)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val Resources: IMAGE_DATA_DIRECTORY
        get() = memberAt(24)
    
    val StrongNameSignature: IMAGE_DATA_DIRECTORY
        get() = memberAt(32)
    
    val CodeManagerTable: IMAGE_DATA_DIRECTORY
        get() = memberAt(40)
    
    val VTableFixups: IMAGE_DATA_DIRECTORY
        get() = memberAt(48)
    
    val ExportAddressTableJumps: IMAGE_DATA_DIRECTORY
        get() = memberAt(56)
    
    val ManagedNativeHeader: IMAGE_DATA_DIRECTORY
        get() = memberAt(64)
    
}

class anonymousStruct73(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var EntryPointToken: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var EntryPointRVA: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _SLIST_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 16)
    
    var Next: CPointer<_SLIST_ENTRY>?
        get() = memberAt<CPointerVar<_SLIST_ENTRY>>(0).value
        set(value) { memberAt<CPointerVar<_SLIST_ENTRY>>(0).value = value }
    
}

class _SLIST_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 16)
    
    val Header8: anonymousStruct74
        get() = memberAt(0)
    
    val HeaderX64: anonymousStruct75
        get() = memberAt(0)
    
}

class anonymousStruct74(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Depth: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var Sequence: ULONGLONG
        get() = memberAt<ULONGLONGVar>(2).value
        set(value) { memberAt<ULONGLONGVar>(2).value = value }
    
    var HeaderType: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
}

class anonymousStruct75(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Depth: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var Sequence: ULONGLONG
        get() = memberAt<ULONGLONGVar>(2).value
        set(value) { memberAt<ULONGLONGVar>(2).value = value }
    
    var HeaderType: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
}

class anonymousStruct76(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Alignment: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
    var Region: ULONGLONG
        get() = memberAt<ULONGLONGVar>(8).value
        set(value) { memberAt<ULONGLONGVar>(8).value = value }
    
}

class _RTL_RUN_ONCE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var Ptr: PVOID?
        get() = memberAt<PVOIDVar>(0).value
        set(value) { memberAt<PVOIDVar>(0).value = value }
    
}

class _RTL_BARRIER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var Reserved1: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Reserved2: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val Reserved3: CArrayPointer<ULONG_PTRVar>
        get() = arrayMemberAt(8)
    
    var Reserved4: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var Reserved5: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class _MESSAGE_RESOURCE_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(6, 2)
    
    var Length: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Flags: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    val Text: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
}

class _MESSAGE_RESOURCE_BLOCK(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var LowId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var HighId: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var OffsetToEntries: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _MESSAGE_RESOURCE_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var NumberOfBlocks: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Blocks: CArrayPointer<MESSAGE_RESOURCE_BLOCK>
        get() = arrayMemberAt(4)
    
}

class _OSVERSIONINFOA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(148, 4)
    
    var dwOSVersionInfoSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMajorVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwMinorVersion: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwBuildNumber: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwPlatformId: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val szCSDVersion: CArrayPointer<CHARVar>
        get() = arrayMemberAt(20)
    
}

class _OSVERSIONINFOW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(276, 4)
    
    var dwOSVersionInfoSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMajorVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwMinorVersion: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwBuildNumber: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwPlatformId: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val szCSDVersion: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(20)
    
}

class _OSVERSIONINFOEXA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(156, 4)
    
    var dwOSVersionInfoSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMajorVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwMinorVersion: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwBuildNumber: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwPlatformId: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val szCSDVersion: CArrayPointer<CHARVar>
        get() = arrayMemberAt(20)
    
    var wServicePackMajor: WORD
        get() = memberAt<WORDVar>(148).value
        set(value) { memberAt<WORDVar>(148).value = value }
    
    var wServicePackMinor: WORD
        get() = memberAt<WORDVar>(150).value
        set(value) { memberAt<WORDVar>(150).value = value }
    
    var wSuiteMask: WORD
        get() = memberAt<WORDVar>(152).value
        set(value) { memberAt<WORDVar>(152).value = value }
    
    var wProductType: BYTE
        get() = memberAt<BYTEVar>(154).value
        set(value) { memberAt<BYTEVar>(154).value = value }
    
    var wReserved: BYTE
        get() = memberAt<BYTEVar>(155).value
        set(value) { memberAt<BYTEVar>(155).value = value }
    
}

class _OSVERSIONINFOEXW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(284, 4)
    
    var dwOSVersionInfoSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMajorVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwMinorVersion: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwBuildNumber: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwPlatformId: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val szCSDVersion: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(20)
    
    var wServicePackMajor: WORD
        get() = memberAt<WORDVar>(276).value
        set(value) { memberAt<WORDVar>(276).value = value }
    
    var wServicePackMinor: WORD
        get() = memberAt<WORDVar>(278).value
        set(value) { memberAt<WORDVar>(278).value = value }
    
    var wSuiteMask: WORD
        get() = memberAt<WORDVar>(280).value
        set(value) { memberAt<WORDVar>(280).value = value }
    
    var wProductType: BYTE
        get() = memberAt<BYTEVar>(282).value
        set(value) { memberAt<BYTEVar>(282).value = value }
    
    var wReserved: BYTE
        get() = memberAt<BYTEVar>(283).value
        set(value) { memberAt<BYTEVar>(283).value = value }
    
}

class _RTL_CRITICAL_SECTION_DEBUG(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var Type: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var CreatorBackTraceIndex: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var CriticalSection: CPointer<_RTL_CRITICAL_SECTION>?
        get() = memberAt<CPointerVar<_RTL_CRITICAL_SECTION>>(8).value
        set(value) { memberAt<CPointerVar<_RTL_CRITICAL_SECTION>>(8).value = value }
    
    val ProcessLocksList: LIST_ENTRY
        get() = memberAt(16)
    
    var EntryCount: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var ContentionCount: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var CreatorBackTraceIndexHigh: WORD
        get() = memberAt<WORDVar>(44).value
        set(value) { memberAt<WORDVar>(44).value = value }
    
    var SpareWORD: WORD
        get() = memberAt<WORDVar>(46).value
        set(value) { memberAt<WORDVar>(46).value = value }
    
}

class _RTL_CRITICAL_SECTION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var DebugInfo: PRTL_CRITICAL_SECTION_DEBUG?
        get() = memberAt<PRTL_CRITICAL_SECTION_DEBUGVar>(0).value
        set(value) { memberAt<PRTL_CRITICAL_SECTION_DEBUGVar>(0).value = value }
    
    var LockCount: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var RecursionCount: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var OwningThread: HANDLE?
        get() = memberAt<HANDLEVar>(16).value
        set(value) { memberAt<HANDLEVar>(16).value = value }
    
    var LockSemaphore: HANDLE?
        get() = memberAt<HANDLEVar>(24).value
        set(value) { memberAt<HANDLEVar>(24).value = value }
    
    var SpinCount: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(32).value
        set(value) { memberAt<ULONG_PTRVar>(32).value = value }
    
}

class _RTL_SRWLOCK(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var Ptr: PVOID?
        get() = memberAt<PVOIDVar>(0).value
        set(value) { memberAt<PVOIDVar>(0).value = value }
    
}

class _RTL_CONDITION_VARIABLE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var Ptr: PVOID?
        get() = memberAt<PVOIDVar>(0).value
        set(value) { memberAt<PVOIDVar>(0).value = value }
    
}

class _ACTIVATION_CONTEXT_QUERY_INDEX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var ulAssemblyIndex: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ulFileIndexInAssembly: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _ASSEMBLY_FILE_DETAILED_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var ulFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ulFilenameLength: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ulPathLength: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var lpFileName: PCWSTR?
        get() = memberAt<PCWSTRVar>(16).value
        set(value) { memberAt<PCWSTRVar>(16).value = value }
    
    var lpFilePath: PCWSTR?
        get() = memberAt<PCWSTRVar>(24).value
        set(value) { memberAt<PCWSTRVar>(24).value = value }
    
}

class _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(104, 8)
    
    var ulFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ulEncodedAssemblyIdentityLength: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ulManifestPathType: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ulManifestPathLength: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    val liManifestLastWriteTime: LARGE_INTEGER
        get() = memberAt(16)
    
    var ulPolicyPathType: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var ulPolicyPathLength: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    val liPolicyLastWriteTime: LARGE_INTEGER
        get() = memberAt(32)
    
    var ulMetadataSatelliteRosterIndex: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var ulManifestVersionMajor: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var ulManifestVersionMinor: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var ulPolicyVersionMajor: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var ulPolicyVersionMinor: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var ulAssemblyDirectoryNameLength: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var lpAssemblyEncodedAssemblyIdentity: PCWSTR?
        get() = memberAt<PCWSTRVar>(64).value
        set(value) { memberAt<PCWSTRVar>(64).value = value }
    
    var lpAssemblyManifestPath: PCWSTR?
        get() = memberAt<PCWSTRVar>(72).value
        set(value) { memberAt<PCWSTRVar>(72).value = value }
    
    var lpAssemblyPolicyPath: PCWSTR?
        get() = memberAt<PCWSTRVar>(80).value
        set(value) { memberAt<PCWSTRVar>(80).value = value }
    
    var lpAssemblyDirectoryName: PCWSTR?
        get() = memberAt<PCWSTRVar>(88).value
        set(value) { memberAt<PCWSTRVar>(88).value = value }
    
    var ulFileCount: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
}

class _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var ulFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var RunLevel: ACTCTX_REQUESTED_RUN_LEVEL
        get() = memberAt<ACTCTX_REQUESTED_RUN_LEVELVar>(4).value
        set(value) { memberAt<ACTCTX_REQUESTED_RUN_LEVELVar>(4).value = value }
    
    var UiAccess: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _COMPATIBILITY_CONTEXT_ELEMENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val Id: GUID
        get() = memberAt(0)
    
    var Type: ACTCTX_COMPATIBILITY_ELEMENT_TYPE
        get() = memberAt<ACTCTX_COMPATIBILITY_ELEMENT_TYPEVar>(16).value
        set(value) { memberAt<ACTCTX_COMPATIBILITY_ELEMENT_TYPEVar>(16).value = value }
    
}

class _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
}

class _SUPPORTED_OS_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 2)
    
    var OsCount: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var MitigationExist: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    val OsList: CArrayPointer<WORDVar>
        get() = arrayMemberAt(4)
    
}

class _ACTIVATION_CONTEXT_DETAILED_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ulFormatVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ulAssemblyCount: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ulRootManifestPathType: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var ulRootManifestPathChars: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var ulRootConfigurationPathType: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var ulRootConfigurationPathChars: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var ulAppDirPathType: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var ulAppDirPathChars: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var lpRootManifestPath: PCWSTR?
        get() = memberAt<PCWSTRVar>(40).value
        set(value) { memberAt<PCWSTRVar>(40).value = value }
    
    var lpRootConfigurationPath: PCWSTR?
        get() = memberAt<PCWSTRVar>(48).value
        set(value) { memberAt<PCWSTRVar>(48).value = value }
    
    var lpAppDirPath: PCWSTR?
        get() = memberAt<PCWSTRVar>(56).value
        set(value) { memberAt<PCWSTRVar>(56).value = value }
    
}

class _RTL_VERIFIER_THUNK_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var ThunkName: PCHAR?
        get() = memberAt<PCHARVar>(0).value
        set(value) { memberAt<PCHARVar>(0).value = value }
    
    var ThunkOldAddress: PVOID?
        get() = memberAt<PVOIDVar>(8).value
        set(value) { memberAt<PVOIDVar>(8).value = value }
    
    var ThunkNewAddress: PVOID?
        get() = memberAt<PVOIDVar>(16).value
        set(value) { memberAt<PVOIDVar>(16).value = value }
    
}

class _RTL_VERIFIER_DLL_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var DllName: PWCHAR?
        get() = memberAt<PWCHARVar>(0).value
        set(value) { memberAt<PWCHARVar>(0).value = value }
    
    var DllFlags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var DllAddress: PVOID?
        get() = memberAt<PVOIDVar>(16).value
        set(value) { memberAt<PVOIDVar>(16).value = value }
    
    var DllThunks: PRTL_VERIFIER_THUNK_DESCRIPTOR?
        get() = memberAt<PRTL_VERIFIER_THUNK_DESCRIPTORVar>(24).value
        set(value) { memberAt<PRTL_VERIFIER_THUNK_DESCRIPTORVar>(24).value = value }
    
}

class _RTL_VERIFIER_PROVIDER_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var Length: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ProviderDlls: PRTL_VERIFIER_DLL_DESCRIPTOR?
        get() = memberAt<PRTL_VERIFIER_DLL_DESCRIPTORVar>(8).value
        set(value) { memberAt<PRTL_VERIFIER_DLL_DESCRIPTORVar>(8).value = value }
    
    var ProviderDllLoadCallback: RTL_VERIFIER_DLL_LOAD_CALLBACK?
        get() = memberAt<RTL_VERIFIER_DLL_LOAD_CALLBACKVar>(16).value
        set(value) { memberAt<RTL_VERIFIER_DLL_LOAD_CALLBACKVar>(16).value = value }
    
    var ProviderDllUnloadCallback: RTL_VERIFIER_DLL_UNLOAD_CALLBACK?
        get() = memberAt<RTL_VERIFIER_DLL_UNLOAD_CALLBACKVar>(24).value
        set(value) { memberAt<RTL_VERIFIER_DLL_UNLOAD_CALLBACKVar>(24).value = value }
    
    var VerifierImage: PWSTR?
        get() = memberAt<PWSTRVar>(32).value
        set(value) { memberAt<PWSTRVar>(32).value = value }
    
    var VerifierFlags: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var VerifierDebug: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var RtlpGetStackTraceAddress: PVOID?
        get() = memberAt<PVOIDVar>(48).value
        set(value) { memberAt<PVOIDVar>(48).value = value }
    
    var RtlpDebugPageHeapCreate: PVOID?
        get() = memberAt<PVOIDVar>(56).value
        set(value) { memberAt<PVOIDVar>(56).value = value }
    
    var RtlpDebugPageHeapDestroy: PVOID?
        get() = memberAt<PVOIDVar>(64).value
        set(value) { memberAt<PVOIDVar>(64).value = value }
    
    var ProviderNtdllHeapFreeCallback: RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK?
        get() = memberAt<RTL_VERIFIER_NTDLLHEAPFREE_CALLBACKVar>(72).value
        set(value) { memberAt<RTL_VERIFIER_NTDLLHEAPFREE_CALLBACKVar>(72).value = value }
    
}

class _HARDWARE_COUNTER_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Type: HARDWARE_COUNTER_TYPE
        get() = memberAt<HARDWARE_COUNTER_TYPEVar>(0).value
        set(value) { memberAt<HARDWARE_COUNTER_TYPEVar>(0).value = value }
    
    var Reserved: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Value: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
}

class _PERFORMANCE_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(288, 8)
    
    var Size: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Version: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var HwCountersCount: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
    var ContextSwitchCount: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var WaitReasonBitMap: DWORD64
        get() = memberAt<DWORD64Var>(8).value
        set(value) { memberAt<DWORD64Var>(8).value = value }
    
    var CycleTime: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
    var RetryCount: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var Reserved: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    val HwCounters: CArrayPointer<HARDWARE_COUNTER_DATA>
        get() = arrayMemberAt(32)
    
}

class _EVENTLOGRECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 4)
    
    var Length: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Reserved: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var RecordNumber: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var TimeGenerated: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var TimeWritten: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var EventID: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var EventType: WORD
        get() = memberAt<WORDVar>(24).value
        set(value) { memberAt<WORDVar>(24).value = value }
    
    var NumStrings: WORD
        get() = memberAt<WORDVar>(26).value
        set(value) { memberAt<WORDVar>(26).value = value }
    
    var EventCategory: WORD
        get() = memberAt<WORDVar>(28).value
        set(value) { memberAt<WORDVar>(28).value = value }
    
    var ReservedFlags: WORD
        get() = memberAt<WORDVar>(30).value
        set(value) { memberAt<WORDVar>(30).value = value }
    
    var ClosingRecordNumber: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var StringOffset: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var UserSidLength: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var UserSidOffset: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var DataLength: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var DataOffset: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
}

class _EVENTSFORLOGFILE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(520, 4)
    
}

class _PACKEDEVENTINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
}

class _TAPE_ERASE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Immediate: BOOLEAN
        get() = memberAt<BOOLEANVar>(4).value
        set(value) { memberAt<BOOLEANVar>(4).value = value }
    
}

class _TAPE_PREPARE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Operation: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Immediate: BOOLEAN
        get() = memberAt<BOOLEANVar>(4).value
        set(value) { memberAt<BOOLEANVar>(4).value = value }
    
}

class _TAPE_WRITE_MARKS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Immediate: BOOLEAN
        get() = memberAt<BOOLEANVar>(8).value
        set(value) { memberAt<BOOLEANVar>(8).value = value }
    
}

class _TAPE_GET_POSITION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Partition: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val Offset: LARGE_INTEGER
        get() = memberAt(8)
    
}

class _TAPE_SET_POSITION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var Method: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Partition: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val Offset: LARGE_INTEGER
        get() = memberAt(8)
    
    var Immediate: BOOLEAN
        get() = memberAt<BOOLEANVar>(16).value
        set(value) { memberAt<BOOLEANVar>(16).value = value }
    
}

class _TAPE_GET_DRIVE_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var ECC: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
    var Compression: BOOLEAN
        get() = memberAt<BOOLEANVar>(1).value
        set(value) { memberAt<BOOLEANVar>(1).value = value }
    
    var DataPadding: BOOLEAN
        get() = memberAt<BOOLEANVar>(2).value
        set(value) { memberAt<BOOLEANVar>(2).value = value }
    
    var ReportSetmarks: BOOLEAN
        get() = memberAt<BOOLEANVar>(3).value
        set(value) { memberAt<BOOLEANVar>(3).value = value }
    
    var DefaultBlockSize: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var MaximumBlockSize: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var MinimumBlockSize: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var MaximumPartitionCount: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var FeaturesLow: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var FeaturesHigh: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var EOTWarningZoneSize: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class _TAPE_SET_DRIVE_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var ECC: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
    var Compression: BOOLEAN
        get() = memberAt<BOOLEANVar>(1).value
        set(value) { memberAt<BOOLEANVar>(1).value = value }
    
    var DataPadding: BOOLEAN
        get() = memberAt<BOOLEANVar>(2).value
        set(value) { memberAt<BOOLEANVar>(2).value = value }
    
    var ReportSetmarks: BOOLEAN
        get() = memberAt<BOOLEANVar>(3).value
        set(value) { memberAt<BOOLEANVar>(3).value = value }
    
    var EOTWarningZoneSize: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _TAPE_GET_MEDIA_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val Capacity: LARGE_INTEGER
        get() = memberAt(0)
    
    val Remaining: LARGE_INTEGER
        get() = memberAt(8)
    
    var BlockSize: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var PartitionCount: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var WriteProtected: BOOLEAN
        get() = memberAt<BOOLEANVar>(24).value
        set(value) { memberAt<BOOLEANVar>(24).value = value }
    
}

class _TAPE_SET_MEDIA_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var BlockSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _TAPE_CREATE_PARTITION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var Method: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _TAPE_WMI_OPERATIONS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Method: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var DataBufferSize: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var DataBuffer: PVOID?
        get() = memberAt<PVOIDVar>(8).value
        set(value) { memberAt<PVOIDVar>(8).value = value }
    
}

class _TP_CALLBACK_INSTANCE(override val rawPtr: NativePtr) : COpaque

class _TP_POOL(override val rawPtr: NativePtr) : COpaque

class _TP_POOL_STACK_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var StackReserve: SIZE_T
        get() = memberAt<SIZE_TVar>(0).value
        set(value) { memberAt<SIZE_TVar>(0).value = value }
    
    var StackCommit: SIZE_T
        get() = memberAt<SIZE_TVar>(8).value
        set(value) { memberAt<SIZE_TVar>(8).value = value }
    
}

class _TP_CLEANUP_GROUP(override val rawPtr: NativePtr) : COpaque

class _TP_CALLBACK_ENVIRON_V1(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var Version: TP_VERSION
        get() = memberAt<TP_VERSIONVar>(0).value
        set(value) { memberAt<TP_VERSIONVar>(0).value = value }
    
    var Pool: PTP_POOL?
        get() = memberAt<PTP_POOLVar>(8).value
        set(value) { memberAt<PTP_POOLVar>(8).value = value }
    
    var CleanupGroup: PTP_CLEANUP_GROUP?
        get() = memberAt<PTP_CLEANUP_GROUPVar>(16).value
        set(value) { memberAt<PTP_CLEANUP_GROUPVar>(16).value = value }
    
    var CleanupGroupCancelCallback: PTP_CLEANUP_GROUP_CANCEL_CALLBACK?
        get() = memberAt<PTP_CLEANUP_GROUP_CANCEL_CALLBACKVar>(24).value
        set(value) { memberAt<PTP_CLEANUP_GROUP_CANCEL_CALLBACKVar>(24).value = value }
    
    var RaceDll: PVOID?
        get() = memberAt<PVOIDVar>(32).value
        set(value) { memberAt<PVOIDVar>(32).value = value }
    
    var ActivationContext: CPointer<_ACTIVATION_CONTEXT>?
        get() = memberAt<CPointerVar<_ACTIVATION_CONTEXT>>(40).value
        set(value) { memberAt<CPointerVar<_ACTIVATION_CONTEXT>>(40).value = value }
    
    var FinalizationCallback: PTP_SIMPLE_CALLBACK?
        get() = memberAt<PTP_SIMPLE_CALLBACKVar>(48).value
        set(value) { memberAt<PTP_SIMPLE_CALLBACKVar>(48).value = value }
    
    val u: anonymousStruct77
        get() = memberAt(56)
    
}

class _ACTIVATION_CONTEXT(override val rawPtr: NativePtr) : COpaque

class anonymousStruct77(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val s: anonymousStruct78
        get() = memberAt(0)
    
}

class anonymousStruct78(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var LongFunction: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _TP_WORK(override val rawPtr: NativePtr) : COpaque

class _TP_TIMER(override val rawPtr: NativePtr) : COpaque

class _TP_WAIT(override val rawPtr: NativePtr) : COpaque

class _TP_IO(override val rawPtr: NativePtr) : COpaque

class _TEB(override val rawPtr: NativePtr) : COpaque

class _TRANSACTION_BASIC_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val TransactionId: GUID
        get() = memberAt(0)
    
    var State: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var Outcome: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class _TRANSACTIONMANAGER_BASIC_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    val TmIdentity: GUID
        get() = memberAt(0)
    
    val VirtualClock: LARGE_INTEGER
        get() = memberAt(16)
    
}

class _TRANSACTIONMANAGER_LOG_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val LogIdentity: GUID
        get() = memberAt(0)
    
}

class _TRANSACTIONMANAGER_LOGPATH_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var LogPathLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val LogPath: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(4)
    
}

class _TRANSACTIONMANAGER_RECOVERY_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var LastRecoveredLsn: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
}

class _TRANSACTIONMANAGER_OLDEST_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val OldestTransactionGuid: GUID
        get() = memberAt(0)
    
}

class _TRANSACTION_PROPERTIES_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var IsolationLevel: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var IsolationFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val Timeout: LARGE_INTEGER
        get() = memberAt(8)
    
    var Outcome: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var DescriptionLength: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    val Description: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(24)
    
}

class _TRANSACTION_BIND_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var TmHandle: HANDLE?
        get() = memberAt<HANDLEVar>(0).value
        set(value) { memberAt<HANDLEVar>(0).value = value }
    
}

class _TRANSACTION_ENLISTMENT_PAIR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val EnlistmentId: GUID
        get() = memberAt(0)
    
    val ResourceManagerId: GUID
        get() = memberAt(16)
    
}

class _TRANSACTION_ENLISTMENTS_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    var NumberOfEnlistments: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val EnlistmentPair: CArrayPointer<TRANSACTION_ENLISTMENT_PAIR>
        get() = arrayMemberAt(4)
    
}

class _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val SuperiorEnlistmentPair: TRANSACTION_ENLISTMENT_PAIR
        get() = memberAt(0)
    
}

class _RESOURCEMANAGER_BASIC_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val ResourceManagerId: GUID
        get() = memberAt(0)
    
    var DescriptionLength: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val Description: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(20)
    
}

class _RESOURCEMANAGER_COMPLETION_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var IoCompletionPortHandle: HANDLE?
        get() = memberAt<HANDLEVar>(0).value
        set(value) { memberAt<HANDLEVar>(0).value = value }
    
    var CompletionKey: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(8).value
        set(value) { memberAt<ULONG_PTRVar>(8).value = value }
    
}

class _ENLISTMENT_BASIC_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val EnlistmentId: GUID
        get() = memberAt(0)
    
    val TransactionId: GUID
        get() = memberAt(16)
    
    val ResourceManagerId: GUID
        get() = memberAt(32)
    
}

class _ENLISTMENT_CRM_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val CrmTransactionManagerId: GUID
        get() = memberAt(0)
    
    val CrmResourceManagerId: GUID
        get() = memberAt(16)
    
    val CrmEnlistmentId: GUID
        get() = memberAt(32)
    
}

class _TRANSACTION_LIST_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val UOW: GUID
        get() = memberAt(0)
    
}

class _TRANSACTION_LIST_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var NumberOfTransactions: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val TransactionInformation: CArrayPointer<TRANSACTION_LIST_ENTRY>
        get() = arrayMemberAt(4)
    
}

class _KTMOBJECT_CURSOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    val LastQuery: GUID
        get() = memberAt(0)
    
    var ObjectIdCount: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val ObjectIds: CArrayPointer<GUID>
        get() = arrayMemberAt(20)
    
}

class _WOW64_FLOATING_SAVE_AREA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(112, 4)
    
    var ControlWord: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var StatusWord: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var TagWord: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ErrorOffset: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var ErrorSelector: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var DataOffset: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var DataSelector: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val RegisterArea: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
    var Cr0NpxState: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
}

class _WOW64_CONTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(716, 4)
    
    var ContextFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Dr0: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Dr1: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Dr2: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var Dr3: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var Dr6: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var Dr7: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val FloatSave: WOW64_FLOATING_SAVE_AREA
        get() = memberAt(28)
    
    var SegGs: DWORD
        get() = memberAt<DWORDVar>(140).value
        set(value) { memberAt<DWORDVar>(140).value = value }
    
    var SegFs: DWORD
        get() = memberAt<DWORDVar>(144).value
        set(value) { memberAt<DWORDVar>(144).value = value }
    
    var SegEs: DWORD
        get() = memberAt<DWORDVar>(148).value
        set(value) { memberAt<DWORDVar>(148).value = value }
    
    var SegDs: DWORD
        get() = memberAt<DWORDVar>(152).value
        set(value) { memberAt<DWORDVar>(152).value = value }
    
    var Edi: DWORD
        get() = memberAt<DWORDVar>(156).value
        set(value) { memberAt<DWORDVar>(156).value = value }
    
    var Esi: DWORD
        get() = memberAt<DWORDVar>(160).value
        set(value) { memberAt<DWORDVar>(160).value = value }
    
    var Ebx: DWORD
        get() = memberAt<DWORDVar>(164).value
        set(value) { memberAt<DWORDVar>(164).value = value }
    
    var Edx: DWORD
        get() = memberAt<DWORDVar>(168).value
        set(value) { memberAt<DWORDVar>(168).value = value }
    
    var Ecx: DWORD
        get() = memberAt<DWORDVar>(172).value
        set(value) { memberAt<DWORDVar>(172).value = value }
    
    var Eax: DWORD
        get() = memberAt<DWORDVar>(176).value
        set(value) { memberAt<DWORDVar>(176).value = value }
    
    var Ebp: DWORD
        get() = memberAt<DWORDVar>(180).value
        set(value) { memberAt<DWORDVar>(180).value = value }
    
    var Eip: DWORD
        get() = memberAt<DWORDVar>(184).value
        set(value) { memberAt<DWORDVar>(184).value = value }
    
    var SegCs: DWORD
        get() = memberAt<DWORDVar>(188).value
        set(value) { memberAt<DWORDVar>(188).value = value }
    
    var EFlags: DWORD
        get() = memberAt<DWORDVar>(192).value
        set(value) { memberAt<DWORDVar>(192).value = value }
    
    var Esp: DWORD
        get() = memberAt<DWORDVar>(196).value
        set(value) { memberAt<DWORDVar>(196).value = value }
    
    var SegSs: DWORD
        get() = memberAt<DWORDVar>(200).value
        set(value) { memberAt<DWORDVar>(200).value = value }
    
    val ExtendedRegisters: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(204)
    
}

class _WOW64_LDT_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var LimitLow: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var BaseLow: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    val HighWord: anonymousStruct79
        get() = memberAt(4)
    
}

class anonymousStruct79(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    val Bytes: anonymousStruct80
        get() = memberAt(0)
    
    val Bits: anonymousStruct81
        get() = memberAt(0)
    
}

class anonymousStruct80(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 1)
    
    var BaseMid: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var Flags1: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var Flags2: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var BaseHi: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
}

class anonymousStruct81(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var BaseMid: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(1).value
        set(value) { memberAt<DWORDVar>(1).value = value }
    
    var LimitHi: DWORD
        get() = memberAt<DWORDVar>(2).value
        set(value) { memberAt<DWORDVar>(2).value = value }
    
    var BaseHi: DWORD
        get() = memberAt<DWORDVar>(3).value
        set(value) { memberAt<DWORDVar>(3).value = value }
    
}

class _WOW64_DESCRIPTOR_TABLE_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var Selector: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Descriptor: WOW64_LDT_ENTRY
        get() = memberAt(4)
    
}

class HWND__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HHOOK__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HACCEL__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HBITMAP__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HBRUSH__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HCOLORSPACE__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HDC__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HGLRC__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HDESK__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HENHMETAFILE__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HFONT__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HICON__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HMENU__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HPALETTE__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HPEN__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HMONITOR__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HWINEVENTHOOK__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class HUMPD__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class tagRECT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var left: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var top: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var right: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var bottom: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
}

class _RECTL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var left: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var top: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var right: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var bottom: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
}

class tagPOINT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var x: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var y: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
}

class _POINTL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var x: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var y: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
}

class tagSIZE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cx: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var cy: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
}

class tagPOINTS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var x: SHORT
        get() = memberAt<SHORTVar>(0).value
        set(value) { memberAt<SHORTVar>(0).value = value }
    
    var y: SHORT
        get() = memberAt<SHORTVar>(2).value
        set(value) { memberAt<SHORTVar>(2).value = value }
    
}

class _COMMPROP(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 4)
    
    var wPacketLength: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var wPacketVersion: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var dwServiceMask: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwReserved1: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwMaxTxQueue: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwMaxRxQueue: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwMaxBaud: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var dwProvSubType: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var dwProvCapabilities: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var dwSettableParams: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var dwSettableBaud: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var wSettableData: WORD
        get() = memberAt<WORDVar>(40).value
        set(value) { memberAt<WORDVar>(40).value = value }
    
    var wSettableStopParity: WORD
        get() = memberAt<WORDVar>(42).value
        set(value) { memberAt<WORDVar>(42).value = value }
    
    var dwCurrentTxQueue: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var dwCurrentRxQueue: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var dwProvSpec1: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var dwProvSpec2: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    val wcProvChar: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(60)
    
}

class _COMSTAT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var fCtsHold: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cbInQue: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var cbOutQue: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _DCB(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var DCBlength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var BaudRate: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var fBinary: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var fOutX: DWORD
        get() = memberAt<DWORDVar>(9).value
        set(value) { memberAt<DWORDVar>(9).value = value }
    
    var wReserved: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var XonLim: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var XoffLim: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
    var ByteSize: BYTE
        get() = memberAt<BYTEVar>(18).value
        set(value) { memberAt<BYTEVar>(18).value = value }
    
    var Parity: BYTE
        get() = memberAt<BYTEVar>(19).value
        set(value) { memberAt<BYTEVar>(19).value = value }
    
    var StopBits: BYTE
        get() = memberAt<BYTEVar>(20).value
        set(value) { memberAt<BYTEVar>(20).value = value }
    
    var XonChar: Byte
        get() = memberAt<ByteVar>(21).value
        set(value) { memberAt<ByteVar>(21).value = value }
    
    var XoffChar: Byte
        get() = memberAt<ByteVar>(22).value
        set(value) { memberAt<ByteVar>(22).value = value }
    
    var ErrorChar: Byte
        get() = memberAt<ByteVar>(23).value
        set(value) { memberAt<ByteVar>(23).value = value }
    
    var EofChar: Byte
        get() = memberAt<ByteVar>(24).value
        set(value) { memberAt<ByteVar>(24).value = value }
    
    var EvtChar: Byte
        get() = memberAt<ByteVar>(25).value
        set(value) { memberAt<ByteVar>(25).value = value }
    
    var wReserved1: WORD
        get() = memberAt<WORDVar>(26).value
        set(value) { memberAt<WORDVar>(26).value = value }
    
}

class _COMMTIMEOUTS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var ReadIntervalTimeout: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ReadTotalTimeoutMultiplier: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ReadTotalTimeoutConstant: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var WriteTotalTimeoutMultiplier: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var WriteTotalTimeoutConstant: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _COMMCONFIG(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(52, 4)
    
    var dwSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var wVersion: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var wReserved: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    val dcb: DCB
        get() = memberAt(8)
    
    var dwProviderSubType: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var dwProviderOffset: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var dwProviderSize: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    val wcProviderData: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(48)
    
}

class _MEMORYSTATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var dwLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMemoryLoad: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwTotalPhys: SIZE_T
        get() = memberAt<SIZE_TVar>(8).value
        set(value) { memberAt<SIZE_TVar>(8).value = value }
    
    var dwAvailPhys: SIZE_T
        get() = memberAt<SIZE_TVar>(16).value
        set(value) { memberAt<SIZE_TVar>(16).value = value }
    
    var dwTotalPageFile: SIZE_T
        get() = memberAt<SIZE_TVar>(24).value
        set(value) { memberAt<SIZE_TVar>(24).value = value }
    
    var dwAvailPageFile: SIZE_T
        get() = memberAt<SIZE_TVar>(32).value
        set(value) { memberAt<SIZE_TVar>(32).value = value }
    
    var dwTotalVirtual: SIZE_T
        get() = memberAt<SIZE_TVar>(40).value
        set(value) { memberAt<SIZE_TVar>(40).value = value }
    
    var dwAvailVirtual: SIZE_T
        get() = memberAt<SIZE_TVar>(48).value
        set(value) { memberAt<SIZE_TVar>(48).value = value }
    
}

class _JIT_DEBUG_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwProcessorArchitecture: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwThreadID: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwReserved0: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var lpExceptionAddress: ULONG64
        get() = memberAt<ULONG64Var>(16).value
        set(value) { memberAt<ULONG64Var>(16).value = value }
    
    var lpExceptionRecord: ULONG64
        get() = memberAt<ULONG64Var>(24).value
        set(value) { memberAt<ULONG64Var>(24).value = value }
    
    var lpContextRecord: ULONG64
        get() = memberAt<ULONG64Var>(32).value
        set(value) { memberAt<ULONG64Var>(32).value = value }
    
}

class _OFSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(136, 2)
    
    var cBytes: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var fFixedDisk: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var nErrCode: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var Reserved1: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Reserved2: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    val szPathName: CArrayPointer<CHARVar>
        get() = arrayMemberAt(8)
    
}

class HINSTANCE__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class _OVERLAPPED(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var Internal: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(0).value
        set(value) { memberAt<ULONG_PTRVar>(0).value = value }
    
    var InternalHigh: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(8).value
        set(value) { memberAt<ULONG_PTRVar>(8).value = value }
    
    var hEvent: HANDLE?
        get() = memberAt<HANDLEVar>(24).value
        set(value) { memberAt<HANDLEVar>(24).value = value }
    
}

class _FILETIME(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var dwLowDateTime: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwHighDateTime: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _SECURITY_ATTRIBUTES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var nLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpSecurityDescriptor: LPVOID?
        get() = memberAt<LPVOIDVar>(8).value
        set(value) { memberAt<LPVOIDVar>(8).value = value }
    
    var bInheritHandle: WINBOOL
        get() = memberAt<WINBOOLVar>(16).value
        set(value) { memberAt<WINBOOLVar>(16).value = value }
    
}

class _WIN32_STREAM_ID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwStreamId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwStreamAttributes: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val Size: LARGE_INTEGER
        get() = memberAt(8)
    
    var dwStreamNameSize: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val cStreamName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(20)
    
}

class _STARTUPINFOA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(104, 8)
    
    var cb: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpReserved: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var lpDesktop: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var lpTitle: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var dwX: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var dwY: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var dwXSize: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var dwYSize: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var dwXCountChars: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var dwYCountChars: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var dwFillAttribute: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var wShowWindow: WORD
        get() = memberAt<WORDVar>(64).value
        set(value) { memberAt<WORDVar>(64).value = value }
    
    var cbReserved2: WORD
        get() = memberAt<WORDVar>(66).value
        set(value) { memberAt<WORDVar>(66).value = value }
    
    var lpReserved2: LPBYTE?
        get() = memberAt<LPBYTEVar>(72).value
        set(value) { memberAt<LPBYTEVar>(72).value = value }
    
    var hStdInput: HANDLE?
        get() = memberAt<HANDLEVar>(80).value
        set(value) { memberAt<HANDLEVar>(80).value = value }
    
    var hStdOutput: HANDLE?
        get() = memberAt<HANDLEVar>(88).value
        set(value) { memberAt<HANDLEVar>(88).value = value }
    
    var hStdError: HANDLE?
        get() = memberAt<HANDLEVar>(96).value
        set(value) { memberAt<HANDLEVar>(96).value = value }
    
}

class HRSRC__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class _WIN32_FIND_STREAM_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(600, 8)
    
    val StreamSize: LARGE_INTEGER
        get() = memberAt(0)
    
    val cStreamName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(8)
    
}

class _EVENTLOG_FULL_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var dwFull: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _PROCESS_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var hProcess: HANDLE?
        get() = memberAt<HANDLEVar>(0).value
        set(value) { memberAt<HANDLEVar>(0).value = value }
    
    var hThread: HANDLE?
        get() = memberAt<HANDLEVar>(8).value
        set(value) { memberAt<HANDLEVar>(8).value = value }
    
    var dwProcessId: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwThreadId: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class _STARTUPINFOW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(104, 8)
    
    var cb: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpReserved: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var lpDesktop: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var lpTitle: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var dwX: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var dwY: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var dwXSize: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var dwYSize: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var dwXCountChars: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var dwYCountChars: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var dwFillAttribute: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var wShowWindow: WORD
        get() = memberAt<WORDVar>(64).value
        set(value) { memberAt<WORDVar>(64).value = value }
    
    var cbReserved2: WORD
        get() = memberAt<WORDVar>(66).value
        set(value) { memberAt<WORDVar>(66).value = value }
    
    var lpReserved2: LPBYTE?
        get() = memberAt<LPBYTEVar>(72).value
        set(value) { memberAt<LPBYTEVar>(72).value = value }
    
    var hStdInput: HANDLE?
        get() = memberAt<HANDLEVar>(80).value
        set(value) { memberAt<HANDLEVar>(80).value = value }
    
    var hStdOutput: HANDLE?
        get() = memberAt<HANDLEVar>(88).value
        set(value) { memberAt<HANDLEVar>(88).value = value }
    
    var hStdError: HANDLE?
        get() = memberAt<HANDLEVar>(96).value
        set(value) { memberAt<HANDLEVar>(96).value = value }
    
}

class tagHW_PROFILE_INFOA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(124, 4)
    
    var dwDockInfo: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val szHwProfileGuid: CArrayPointer<CHARVar>
        get() = arrayMemberAt(4)
    
    val szHwProfileName: CArrayPointer<CHARVar>
        get() = arrayMemberAt(43)
    
}

class tagHW_PROFILE_INFOW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(244, 4)
    
    var dwDockInfo: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val szHwProfileGuid: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(4)
    
    val szHwProfileName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(82)
    
}

class _SYSTEM_POWER_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var ACLineStatus: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var BatteryFlag: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var BatteryLifePercent: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var Reserved1: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
    var BatteryLifeTime: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var BatteryFullLifeTime: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class tagACTCTXA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var lpSource: LPCSTR?
        get() = memberAt<LPCSTRVar>(8).value
        set(value) { memberAt<LPCSTRVar>(8).value = value }
    
    var wProcessorArchitecture: USHORT
        get() = memberAt<USHORTVar>(16).value
        set(value) { memberAt<USHORTVar>(16).value = value }
    
    var wLangId: LANGID
        get() = memberAt<LANGIDVar>(18).value
        set(value) { memberAt<LANGIDVar>(18).value = value }
    
    var lpAssemblyDirectory: LPCSTR?
        get() = memberAt<LPCSTRVar>(24).value
        set(value) { memberAt<LPCSTRVar>(24).value = value }
    
    var lpResourceName: LPCSTR?
        get() = memberAt<LPCSTRVar>(32).value
        set(value) { memberAt<LPCSTRVar>(32).value = value }
    
    var lpApplicationName: LPCSTR?
        get() = memberAt<LPCSTRVar>(40).value
        set(value) { memberAt<LPCSTRVar>(40).value = value }
    
    var hModule: HMODULE?
        get() = memberAt<HMODULEVar>(48).value
        set(value) { memberAt<HMODULEVar>(48).value = value }
    
}

class tagACTCTXW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var lpSource: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(8).value
        set(value) { memberAt<LPCWSTRVar>(8).value = value }
    
    var wProcessorArchitecture: USHORT
        get() = memberAt<USHORTVar>(16).value
        set(value) { memberAt<USHORTVar>(16).value = value }
    
    var wLangId: LANGID
        get() = memberAt<LANGIDVar>(18).value
        set(value) { memberAt<LANGIDVar>(18).value = value }
    
    var lpAssemblyDirectory: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(24).value
        set(value) { memberAt<LPCWSTRVar>(24).value = value }
    
    var lpResourceName: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(32).value
        set(value) { memberAt<LPCWSTRVar>(32).value = value }
    
    var lpApplicationName: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(40).value
        set(value) { memberAt<LPCWSTRVar>(40).value = value }
    
    var hModule: HMODULE?
        get() = memberAt<HMODULEVar>(48).value
        set(value) { memberAt<HMODULEVar>(48).value = value }
    
}

class tagACTCTX_SECTION_KEYED_DATA_2600(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    var cbSize: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    var ulDataFormatVersion: ULONG
        get() = memberAt<ULONGVar>(4).value
        set(value) { memberAt<ULONGVar>(4).value = value }
    
    var lpData: PVOID?
        get() = memberAt<PVOIDVar>(8).value
        set(value) { memberAt<PVOIDVar>(8).value = value }
    
    var ulLength: ULONG
        get() = memberAt<ULONGVar>(16).value
        set(value) { memberAt<ULONGVar>(16).value = value }
    
    var lpSectionGlobalData: PVOID?
        get() = memberAt<PVOIDVar>(24).value
        set(value) { memberAt<PVOIDVar>(24).value = value }
    
    var ulSectionGlobalDataLength: ULONG
        get() = memberAt<ULONGVar>(32).value
        set(value) { memberAt<ULONGVar>(32).value = value }
    
    var lpSectionBase: PVOID?
        get() = memberAt<PVOIDVar>(40).value
        set(value) { memberAt<PVOIDVar>(40).value = value }
    
    var ulSectionTotalLength: ULONG
        get() = memberAt<ULONGVar>(48).value
        set(value) { memberAt<ULONGVar>(48).value = value }
    
    var hActCtx: HANDLE?
        get() = memberAt<HANDLEVar>(56).value
        set(value) { memberAt<HANDLEVar>(56).value = value }
    
    var ulAssemblyRosterIndex: ULONG
        get() = memberAt<ULONGVar>(64).value
        set(value) { memberAt<ULONGVar>(64).value = value }
    
}

class tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var lpInformation: PVOID?
        get() = memberAt<PVOIDVar>(0).value
        set(value) { memberAt<PVOIDVar>(0).value = value }
    
    var lpSectionBase: PVOID?
        get() = memberAt<PVOIDVar>(8).value
        set(value) { memberAt<PVOIDVar>(8).value = value }
    
    var ulSectionLength: ULONG
        get() = memberAt<ULONGVar>(16).value
        set(value) { memberAt<ULONGVar>(16).value = value }
    
    var lpSectionGlobalDataBase: PVOID?
        get() = memberAt<PVOIDVar>(24).value
        set(value) { memberAt<PVOIDVar>(24).value = value }
    
    var ulSectionGlobalDataLength: ULONG
        get() = memberAt<ULONGVar>(32).value
        set(value) { memberAt<ULONGVar>(32).value = value }
    
}

class tagACTCTX_SECTION_KEYED_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(112, 8)
    
    var cbSize: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    var ulDataFormatVersion: ULONG
        get() = memberAt<ULONGVar>(4).value
        set(value) { memberAt<ULONGVar>(4).value = value }
    
    var lpData: PVOID?
        get() = memberAt<PVOIDVar>(8).value
        set(value) { memberAt<PVOIDVar>(8).value = value }
    
    var ulLength: ULONG
        get() = memberAt<ULONGVar>(16).value
        set(value) { memberAt<ULONGVar>(16).value = value }
    
    var lpSectionGlobalData: PVOID?
        get() = memberAt<PVOIDVar>(24).value
        set(value) { memberAt<PVOIDVar>(24).value = value }
    
    var ulSectionGlobalDataLength: ULONG
        get() = memberAt<ULONGVar>(32).value
        set(value) { memberAt<ULONGVar>(32).value = value }
    
    var lpSectionBase: PVOID?
        get() = memberAt<PVOIDVar>(40).value
        set(value) { memberAt<PVOIDVar>(40).value = value }
    
    var ulSectionTotalLength: ULONG
        get() = memberAt<ULONGVar>(48).value
        set(value) { memberAt<ULONGVar>(48).value = value }
    
    var hActCtx: HANDLE?
        get() = memberAt<HANDLEVar>(56).value
        set(value) { memberAt<HANDLEVar>(56).value = value }
    
    var ulAssemblyRosterIndex: ULONG
        get() = memberAt<ULONGVar>(64).value
        set(value) { memberAt<ULONGVar>(64).value = value }
    
    var ulFlags: ULONG
        get() = memberAt<ULONGVar>(68).value
        set(value) { memberAt<ULONGVar>(68).value = value }
    
    val AssemblyMetadata: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
        get() = memberAt(72)
    
}

class _ACTIVATION_CONTEXT_BASIC_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var hActCtx: HANDLE?
        get() = memberAt<HANDLEVar>(0).value
        set(value) { memberAt<HANDLEVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _DRAWPATRECT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val ptPosition: POINT
        get() = memberAt(0)
    
    val ptSize: POINT
        get() = memberAt(8)
    
    var wStyle: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
    var wPattern: WORD
        get() = memberAt<WORDVar>(18).value
        set(value) { memberAt<WORDVar>(18).value = value }
    
}

class _PSINJECTDATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var DataBytes: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var InjectionPoint: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var PageNumber: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
}

class _PSFEATURE_OUTPUT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var bPageIndependent: WINBOOL
        get() = memberAt<WINBOOLVar>(0).value
        set(value) { memberAt<WINBOOLVar>(0).value = value }
    
    var bSetPageDevice: WINBOOL
        get() = memberAt<WINBOOLVar>(4).value
        set(value) { memberAt<WINBOOLVar>(4).value = value }
    
}

class _PSFEATURE_CUSTPAPER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var lOrientation: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var lWidth: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var lHeight: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var lWidthOffset: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var lHeightOffset: LONG
        get() = memberAt<LONGVar>(16).value
        set(value) { memberAt<LONGVar>(16).value = value }
    
}

class tagXFORM(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var eM11: FLOAT
        get() = memberAt<FLOATVar>(0).value
        set(value) { memberAt<FLOATVar>(0).value = value }
    
    var eM12: FLOAT
        get() = memberAt<FLOATVar>(4).value
        set(value) { memberAt<FLOATVar>(4).value = value }
    
    var eM21: FLOAT
        get() = memberAt<FLOATVar>(8).value
        set(value) { memberAt<FLOATVar>(8).value = value }
    
    var eM22: FLOAT
        get() = memberAt<FLOATVar>(12).value
        set(value) { memberAt<FLOATVar>(12).value = value }
    
    var eDx: FLOAT
        get() = memberAt<FLOATVar>(16).value
        set(value) { memberAt<FLOATVar>(16).value = value }
    
    var eDy: FLOAT
        get() = memberAt<FLOATVar>(20).value
        set(value) { memberAt<FLOATVar>(20).value = value }
    
}

class tagBITMAP(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var bmType: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var bmWidth: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var bmHeight: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var bmWidthBytes: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var bmPlanes: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
    var bmBitsPixel: WORD
        get() = memberAt<WORDVar>(18).value
        set(value) { memberAt<WORDVar>(18).value = value }
    
    var bmBits: LPVOID?
        get() = memberAt<LPVOIDVar>(24).value
        set(value) { memberAt<LPVOIDVar>(24).value = value }
    
}

class tagRGBTRIPLE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(3, 1)
    
    var rgbtBlue: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var rgbtGreen: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var rgbtRed: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
}

class tagRGBQUAD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 1)
    
    var rgbBlue: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var rgbGreen: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var rgbRed: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var rgbReserved: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
}

class tagCIEXYZ(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var ciexyzX: FXPT2DOT30
        get() = memberAt<FXPT2DOT30Var>(0).value
        set(value) { memberAt<FXPT2DOT30Var>(0).value = value }
    
    var ciexyzY: FXPT2DOT30
        get() = memberAt<FXPT2DOT30Var>(4).value
        set(value) { memberAt<FXPT2DOT30Var>(4).value = value }
    
    var ciexyzZ: FXPT2DOT30
        get() = memberAt<FXPT2DOT30Var>(8).value
        set(value) { memberAt<FXPT2DOT30Var>(8).value = value }
    
}

class tagICEXYZTRIPLE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    val ciexyzRed: CIEXYZ
        get() = memberAt(0)
    
    val ciexyzGreen: CIEXYZ
        get() = memberAt(12)
    
    val ciexyzBlue: CIEXYZ
        get() = memberAt(24)
    
}

class tagLOGCOLORSPACEA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(328, 4)
    
    var lcsSignature: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lcsVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var lcsSize: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var lcsCSType: LCSCSTYPE
        get() = memberAt<LCSCSTYPEVar>(12).value
        set(value) { memberAt<LCSCSTYPEVar>(12).value = value }
    
    var lcsIntent: LCSGAMUTMATCH
        get() = memberAt<LCSGAMUTMATCHVar>(16).value
        set(value) { memberAt<LCSGAMUTMATCHVar>(16).value = value }
    
    val lcsEndpoints: CIEXYZTRIPLE
        get() = memberAt(20)
    
    var lcsGammaRed: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var lcsGammaGreen: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var lcsGammaBlue: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    val lcsFilename: CArrayPointer<CHARVar>
        get() = arrayMemberAt(68)
    
}

class tagLOGCOLORSPACEW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(588, 4)
    
    var lcsSignature: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lcsVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var lcsSize: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var lcsCSType: LCSCSTYPE
        get() = memberAt<LCSCSTYPEVar>(12).value
        set(value) { memberAt<LCSCSTYPEVar>(12).value = value }
    
    var lcsIntent: LCSGAMUTMATCH
        get() = memberAt<LCSGAMUTMATCHVar>(16).value
        set(value) { memberAt<LCSGAMUTMATCHVar>(16).value = value }
    
    val lcsEndpoints: CIEXYZTRIPLE
        get() = memberAt(20)
    
    var lcsGammaRed: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var lcsGammaGreen: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var lcsGammaBlue: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    val lcsFilename: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(68)
    
}

class tagBITMAPCOREHEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var bcSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var bcWidth: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var bcHeight: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var bcPlanes: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var bcBitCount: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
}

class tagBITMAPINFOHEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var biSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var biWidth: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var biHeight: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var biPlanes: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var biBitCount: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var biCompression: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var biSizeImage: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var biXPelsPerMeter: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var biYPelsPerMeter: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var biClrUsed: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var biClrImportant: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class BITMAPV4HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(108, 4)
    
    var bV4Size: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var bV4Width: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var bV4Height: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var bV4Planes: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var bV4BitCount: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var bV4V4Compression: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var bV4SizeImage: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var bV4XPelsPerMeter: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var bV4YPelsPerMeter: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var bV4ClrUsed: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var bV4ClrImportant: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var bV4RedMask: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var bV4GreenMask: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var bV4BlueMask: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var bV4AlphaMask: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var bV4CSType: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    val bV4Endpoints: CIEXYZTRIPLE
        get() = memberAt(60)
    
    var bV4GammaRed: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var bV4GammaGreen: DWORD
        get() = memberAt<DWORDVar>(100).value
        set(value) { memberAt<DWORDVar>(100).value = value }
    
    var bV4GammaBlue: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
}

class BITMAPV5HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(124, 4)
    
    var bV5Size: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var bV5Width: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var bV5Height: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var bV5Planes: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var bV5BitCount: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var bV5Compression: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var bV5SizeImage: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var bV5XPelsPerMeter: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var bV5YPelsPerMeter: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var bV5ClrUsed: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var bV5ClrImportant: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var bV5RedMask: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var bV5GreenMask: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var bV5BlueMask: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var bV5AlphaMask: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var bV5CSType: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    val bV5Endpoints: CIEXYZTRIPLE
        get() = memberAt(60)
    
    var bV5GammaRed: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var bV5GammaGreen: DWORD
        get() = memberAt<DWORDVar>(100).value
        set(value) { memberAt<DWORDVar>(100).value = value }
    
    var bV5GammaBlue: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var bV5Intent: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    var bV5ProfileData: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var bV5ProfileSize: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
    var bV5Reserved: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
}

class tagBITMAPINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(44, 4)
    
    val bmiHeader: BITMAPINFOHEADER
        get() = memberAt(0)
    
    val bmiColors: CArrayPointer<RGBQUAD>
        get() = arrayMemberAt(40)
    
}

class tagBITMAPCOREINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val bmciHeader: BITMAPCOREHEADER
        get() = memberAt(0)
    
    val bmciColors: CArrayPointer<RGBTRIPLE>
        get() = arrayMemberAt(12)
    
}

class tagBITMAPFILEHEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(14, 2)
    
    var bfType: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var bfSize: DWORD
        get() = memberAt<DWORDVar>(2).value
        set(value) { memberAt<DWORDVar>(2).value = value }
    
    var bfReserved1: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var bfReserved2: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var bfOffBits: DWORD
        get() = memberAt<DWORDVar>(10).value
        set(value) { memberAt<DWORDVar>(10).value = value }
    
}

class tagFONTSIGNATURE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val fsUsb: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(0)
    
    val fsCsb: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(16)
    
}

class tagCHARSETINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var ciCharset: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var ciACP: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    val fs: FONTSIGNATURE
        get() = memberAt(8)
    
}

class tagLOCALESIGNATURE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val lsUsb: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(0)
    
    val lsCsbDefault: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(16)
    
    val lsCsbSupported: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(24)
    
}

class tagHANDLETABLE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    val objectHandle: CArrayPointer<HGDIOBJVar>
        get() = arrayMemberAt(0)
    
}

class tagMETARECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var rdSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rdFunction: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    val rdParm: CArrayPointer<WORDVar>
        get() = arrayMemberAt(6)
    
}

class tagMETAFILEPICT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var mm: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var xExt: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var yExt: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var hMF: HMETAFILE?
        get() = memberAt<HMETAFILEVar>(16).value
        set(value) { memberAt<HMETAFILEVar>(16).value = value }
    
}

class HMETAFILE__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class tagMETAHEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(18, 2)
    
    var mtType: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var mtHeaderSize: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var mtVersion: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var mtSize: DWORD
        get() = memberAt<DWORDVar>(6).value
        set(value) { memberAt<DWORDVar>(6).value = value }
    
    var mtNoObjects: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var mtMaxRecord: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var mtNoParameters: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
}

class tagENHMETARECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var iType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var nSize: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val dParm: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(8)
    
}

class tagENHMETAHEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(108, 4)
    
    var iType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var nSize: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    val rclFrame: RECTL
        get() = memberAt(24)
    
    var dSignature: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var nVersion: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var nBytes: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var nRecords: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var nHandles: WORD
        get() = memberAt<WORDVar>(56).value
        set(value) { memberAt<WORDVar>(56).value = value }
    
    var sReserved: WORD
        get() = memberAt<WORDVar>(58).value
        set(value) { memberAt<WORDVar>(58).value = value }
    
    var nDescription: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var offDescription: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var nPalEntries: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    val szlDevice: SIZEL
        get() = memberAt(72)
    
    val szlMillimeters: SIZEL
        get() = memberAt(80)
    
    var cbPixelFormat: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var offPixelFormat: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    var bOpenGL: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    val szlMicrometers: SIZEL
        get() = memberAt(100)
    
}

class tagTEXTMETRICA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 4)
    
    var tmHeight: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var tmAscent: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var tmDescent: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var tmInternalLeading: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var tmExternalLeading: LONG
        get() = memberAt<LONGVar>(16).value
        set(value) { memberAt<LONGVar>(16).value = value }
    
    var tmAveCharWidth: LONG
        get() = memberAt<LONGVar>(20).value
        set(value) { memberAt<LONGVar>(20).value = value }
    
    var tmMaxCharWidth: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var tmWeight: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var tmOverhang: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var tmDigitizedAspectX: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var tmDigitizedAspectY: LONG
        get() = memberAt<LONGVar>(40).value
        set(value) { memberAt<LONGVar>(40).value = value }
    
    var tmFirstChar: BYTE
        get() = memberAt<BYTEVar>(44).value
        set(value) { memberAt<BYTEVar>(44).value = value }
    
    var tmLastChar: BYTE
        get() = memberAt<BYTEVar>(45).value
        set(value) { memberAt<BYTEVar>(45).value = value }
    
    var tmDefaultChar: BYTE
        get() = memberAt<BYTEVar>(46).value
        set(value) { memberAt<BYTEVar>(46).value = value }
    
    var tmBreakChar: BYTE
        get() = memberAt<BYTEVar>(47).value
        set(value) { memberAt<BYTEVar>(47).value = value }
    
    var tmItalic: BYTE
        get() = memberAt<BYTEVar>(48).value
        set(value) { memberAt<BYTEVar>(48).value = value }
    
    var tmUnderlined: BYTE
        get() = memberAt<BYTEVar>(49).value
        set(value) { memberAt<BYTEVar>(49).value = value }
    
    var tmStruckOut: BYTE
        get() = memberAt<BYTEVar>(50).value
        set(value) { memberAt<BYTEVar>(50).value = value }
    
    var tmPitchAndFamily: BYTE
        get() = memberAt<BYTEVar>(51).value
        set(value) { memberAt<BYTEVar>(51).value = value }
    
    var tmCharSet: BYTE
        get() = memberAt<BYTEVar>(52).value
        set(value) { memberAt<BYTEVar>(52).value = value }
    
}

class tagTEXTMETRICW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(60, 4)
    
    var tmHeight: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var tmAscent: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var tmDescent: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var tmInternalLeading: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var tmExternalLeading: LONG
        get() = memberAt<LONGVar>(16).value
        set(value) { memberAt<LONGVar>(16).value = value }
    
    var tmAveCharWidth: LONG
        get() = memberAt<LONGVar>(20).value
        set(value) { memberAt<LONGVar>(20).value = value }
    
    var tmMaxCharWidth: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var tmWeight: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var tmOverhang: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var tmDigitizedAspectX: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var tmDigitizedAspectY: LONG
        get() = memberAt<LONGVar>(40).value
        set(value) { memberAt<LONGVar>(40).value = value }
    
    var tmFirstChar: WCHAR
        get() = memberAt<WCHARVar>(44).value
        set(value) { memberAt<WCHARVar>(44).value = value }
    
    var tmLastChar: WCHAR
        get() = memberAt<WCHARVar>(46).value
        set(value) { memberAt<WCHARVar>(46).value = value }
    
    var tmDefaultChar: WCHAR
        get() = memberAt<WCHARVar>(48).value
        set(value) { memberAt<WCHARVar>(48).value = value }
    
    var tmBreakChar: WCHAR
        get() = memberAt<WCHARVar>(50).value
        set(value) { memberAt<WCHARVar>(50).value = value }
    
    var tmItalic: BYTE
        get() = memberAt<BYTEVar>(52).value
        set(value) { memberAt<BYTEVar>(52).value = value }
    
    var tmUnderlined: BYTE
        get() = memberAt<BYTEVar>(53).value
        set(value) { memberAt<BYTEVar>(53).value = value }
    
    var tmStruckOut: BYTE
        get() = memberAt<BYTEVar>(54).value
        set(value) { memberAt<BYTEVar>(54).value = value }
    
    var tmPitchAndFamily: BYTE
        get() = memberAt<BYTEVar>(55).value
        set(value) { memberAt<BYTEVar>(55).value = value }
    
    var tmCharSet: BYTE
        get() = memberAt<BYTEVar>(56).value
        set(value) { memberAt<BYTEVar>(56).value = value }
    
}

class tagNEWTEXTMETRICA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 4)
    
    var tmHeight: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var tmAscent: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var tmDescent: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var tmInternalLeading: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var tmExternalLeading: LONG
        get() = memberAt<LONGVar>(16).value
        set(value) { memberAt<LONGVar>(16).value = value }
    
    var tmAveCharWidth: LONG
        get() = memberAt<LONGVar>(20).value
        set(value) { memberAt<LONGVar>(20).value = value }
    
    var tmMaxCharWidth: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var tmWeight: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var tmOverhang: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var tmDigitizedAspectX: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var tmDigitizedAspectY: LONG
        get() = memberAt<LONGVar>(40).value
        set(value) { memberAt<LONGVar>(40).value = value }
    
    var tmFirstChar: BYTE
        get() = memberAt<BYTEVar>(44).value
        set(value) { memberAt<BYTEVar>(44).value = value }
    
    var tmLastChar: BYTE
        get() = memberAt<BYTEVar>(45).value
        set(value) { memberAt<BYTEVar>(45).value = value }
    
    var tmDefaultChar: BYTE
        get() = memberAt<BYTEVar>(46).value
        set(value) { memberAt<BYTEVar>(46).value = value }
    
    var tmBreakChar: BYTE
        get() = memberAt<BYTEVar>(47).value
        set(value) { memberAt<BYTEVar>(47).value = value }
    
    var tmItalic: BYTE
        get() = memberAt<BYTEVar>(48).value
        set(value) { memberAt<BYTEVar>(48).value = value }
    
    var tmUnderlined: BYTE
        get() = memberAt<BYTEVar>(49).value
        set(value) { memberAt<BYTEVar>(49).value = value }
    
    var tmStruckOut: BYTE
        get() = memberAt<BYTEVar>(50).value
        set(value) { memberAt<BYTEVar>(50).value = value }
    
    var tmPitchAndFamily: BYTE
        get() = memberAt<BYTEVar>(51).value
        set(value) { memberAt<BYTEVar>(51).value = value }
    
    var tmCharSet: BYTE
        get() = memberAt<BYTEVar>(52).value
        set(value) { memberAt<BYTEVar>(52).value = value }
    
    var ntmFlags: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var ntmSizeEM: UINT
        get() = memberAt<UINTVar>(60).value
        set(value) { memberAt<UINTVar>(60).value = value }
    
    var ntmCellHeight: UINT
        get() = memberAt<UINTVar>(64).value
        set(value) { memberAt<UINTVar>(64).value = value }
    
    var ntmAvgWidth: UINT
        get() = memberAt<UINTVar>(68).value
        set(value) { memberAt<UINTVar>(68).value = value }
    
}

class tagNEWTEXTMETRICW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(76, 4)
    
    var tmHeight: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var tmAscent: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var tmDescent: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var tmInternalLeading: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var tmExternalLeading: LONG
        get() = memberAt<LONGVar>(16).value
        set(value) { memberAt<LONGVar>(16).value = value }
    
    var tmAveCharWidth: LONG
        get() = memberAt<LONGVar>(20).value
        set(value) { memberAt<LONGVar>(20).value = value }
    
    var tmMaxCharWidth: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var tmWeight: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var tmOverhang: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var tmDigitizedAspectX: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var tmDigitizedAspectY: LONG
        get() = memberAt<LONGVar>(40).value
        set(value) { memberAt<LONGVar>(40).value = value }
    
    var tmFirstChar: WCHAR
        get() = memberAt<WCHARVar>(44).value
        set(value) { memberAt<WCHARVar>(44).value = value }
    
    var tmLastChar: WCHAR
        get() = memberAt<WCHARVar>(46).value
        set(value) { memberAt<WCHARVar>(46).value = value }
    
    var tmDefaultChar: WCHAR
        get() = memberAt<WCHARVar>(48).value
        set(value) { memberAt<WCHARVar>(48).value = value }
    
    var tmBreakChar: WCHAR
        get() = memberAt<WCHARVar>(50).value
        set(value) { memberAt<WCHARVar>(50).value = value }
    
    var tmItalic: BYTE
        get() = memberAt<BYTEVar>(52).value
        set(value) { memberAt<BYTEVar>(52).value = value }
    
    var tmUnderlined: BYTE
        get() = memberAt<BYTEVar>(53).value
        set(value) { memberAt<BYTEVar>(53).value = value }
    
    var tmStruckOut: BYTE
        get() = memberAt<BYTEVar>(54).value
        set(value) { memberAt<BYTEVar>(54).value = value }
    
    var tmPitchAndFamily: BYTE
        get() = memberAt<BYTEVar>(55).value
        set(value) { memberAt<BYTEVar>(55).value = value }
    
    var tmCharSet: BYTE
        get() = memberAt<BYTEVar>(56).value
        set(value) { memberAt<BYTEVar>(56).value = value }
    
    var ntmFlags: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var ntmSizeEM: UINT
        get() = memberAt<UINTVar>(64).value
        set(value) { memberAt<UINTVar>(64).value = value }
    
    var ntmCellHeight: UINT
        get() = memberAt<UINTVar>(68).value
        set(value) { memberAt<UINTVar>(68).value = value }
    
    var ntmAvgWidth: UINT
        get() = memberAt<UINTVar>(72).value
        set(value) { memberAt<UINTVar>(72).value = value }
    
}

class tagNEWTEXTMETRICEXA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 4)
    
    val ntmTm: NEWTEXTMETRICA
        get() = memberAt(0)
    
    val ntmFontSig: FONTSIGNATURE
        get() = memberAt(72)
    
}

class tagNEWTEXTMETRICEXW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(100, 4)
    
    val ntmTm: NEWTEXTMETRICW
        get() = memberAt(0)
    
    val ntmFontSig: FONTSIGNATURE
        get() = memberAt(76)
    
}

class tagPELARRAY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var paXCount: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var paYCount: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var paXExt: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var paYExt: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var paRGBs: BYTE
        get() = memberAt<BYTEVar>(16).value
        set(value) { memberAt<BYTEVar>(16).value = value }
    
}

class tagLOGBRUSH(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var lbStyle: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var lbColor: COLORREF
        get() = memberAt<COLORREFVar>(4).value
        set(value) { memberAt<COLORREFVar>(4).value = value }
    
    var lbHatch: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(8).value
        set(value) { memberAt<ULONG_PTRVar>(8).value = value }
    
}

class tagLOGBRUSH32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var lbStyle: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var lbColor: COLORREF
        get() = memberAt<COLORREFVar>(4).value
        set(value) { memberAt<COLORREFVar>(4).value = value }
    
    var lbHatch: ULONG
        get() = memberAt<ULONGVar>(8).value
        set(value) { memberAt<ULONGVar>(8).value = value }
    
}

class tagLOGPEN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var lopnStyle: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    val lopnWidth: POINT
        get() = memberAt(4)
    
    var lopnColor: COLORREF
        get() = memberAt<COLORREFVar>(12).value
        set(value) { memberAt<COLORREFVar>(12).value = value }
    
}

class tagEXTLOGPEN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var elpPenStyle: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var elpWidth: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var elpBrushStyle: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var elpColor: COLORREF
        get() = memberAt<COLORREFVar>(12).value
        set(value) { memberAt<COLORREFVar>(12).value = value }
    
    var elpHatch: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(16).value
        set(value) { memberAt<ULONG_PTRVar>(16).value = value }
    
    var elpNumEntries: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val elpStyleEntry: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(28)
    
}

class tagEXTLOGPEN32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var elpPenStyle: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var elpWidth: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var elpBrushStyle: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var elpColor: COLORREF
        get() = memberAt<COLORREFVar>(12).value
        set(value) { memberAt<COLORREFVar>(12).value = value }
    
    var elpHatch: ULONG
        get() = memberAt<ULONGVar>(16).value
        set(value) { memberAt<ULONGVar>(16).value = value }
    
    var elpNumEntries: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    val elpStyleEntry: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(24)
    
}

class tagPALETTEENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 1)
    
    var peRed: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var peGreen: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var peBlue: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var peFlags: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
}

class tagLOGPALETTE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    var palVersion: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var palNumEntries: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    val palPalEntry: CArrayPointer<PALETTEENTRY>
        get() = arrayMemberAt(4)
    
}

class tagLOGFONTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(60, 4)
    
    var lfHeight: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var lfWidth: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var lfEscapement: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var lfOrientation: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var lfWeight: LONG
        get() = memberAt<LONGVar>(16).value
        set(value) { memberAt<LONGVar>(16).value = value }
    
    var lfItalic: BYTE
        get() = memberAt<BYTEVar>(20).value
        set(value) { memberAt<BYTEVar>(20).value = value }
    
    var lfUnderline: BYTE
        get() = memberAt<BYTEVar>(21).value
        set(value) { memberAt<BYTEVar>(21).value = value }
    
    var lfStrikeOut: BYTE
        get() = memberAt<BYTEVar>(22).value
        set(value) { memberAt<BYTEVar>(22).value = value }
    
    var lfCharSet: BYTE
        get() = memberAt<BYTEVar>(23).value
        set(value) { memberAt<BYTEVar>(23).value = value }
    
    var lfOutPrecision: BYTE
        get() = memberAt<BYTEVar>(24).value
        set(value) { memberAt<BYTEVar>(24).value = value }
    
    var lfClipPrecision: BYTE
        get() = memberAt<BYTEVar>(25).value
        set(value) { memberAt<BYTEVar>(25).value = value }
    
    var lfQuality: BYTE
        get() = memberAt<BYTEVar>(26).value
        set(value) { memberAt<BYTEVar>(26).value = value }
    
    var lfPitchAndFamily: BYTE
        get() = memberAt<BYTEVar>(27).value
        set(value) { memberAt<BYTEVar>(27).value = value }
    
    val lfFaceName: CArrayPointer<CHARVar>
        get() = arrayMemberAt(28)
    
}

class tagLOGFONTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(92, 4)
    
    var lfHeight: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var lfWidth: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var lfEscapement: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var lfOrientation: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var lfWeight: LONG
        get() = memberAt<LONGVar>(16).value
        set(value) { memberAt<LONGVar>(16).value = value }
    
    var lfItalic: BYTE
        get() = memberAt<BYTEVar>(20).value
        set(value) { memberAt<BYTEVar>(20).value = value }
    
    var lfUnderline: BYTE
        get() = memberAt<BYTEVar>(21).value
        set(value) { memberAt<BYTEVar>(21).value = value }
    
    var lfStrikeOut: BYTE
        get() = memberAt<BYTEVar>(22).value
        set(value) { memberAt<BYTEVar>(22).value = value }
    
    var lfCharSet: BYTE
        get() = memberAt<BYTEVar>(23).value
        set(value) { memberAt<BYTEVar>(23).value = value }
    
    var lfOutPrecision: BYTE
        get() = memberAt<BYTEVar>(24).value
        set(value) { memberAt<BYTEVar>(24).value = value }
    
    var lfClipPrecision: BYTE
        get() = memberAt<BYTEVar>(25).value
        set(value) { memberAt<BYTEVar>(25).value = value }
    
    var lfQuality: BYTE
        get() = memberAt<BYTEVar>(26).value
        set(value) { memberAt<BYTEVar>(26).value = value }
    
    var lfPitchAndFamily: BYTE
        get() = memberAt<BYTEVar>(27).value
        set(value) { memberAt<BYTEVar>(27).value = value }
    
    val lfFaceName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(28)
    
}

class tagENUMLOGFONTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(156, 4)
    
    val elfLogFont: LOGFONTA
        get() = memberAt(0)
    
    val elfFullName: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(60)
    
    val elfStyle: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(124)
    
}

class tagENUMLOGFONTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(284, 4)
    
    val elfLogFont: LOGFONTW
        get() = memberAt(0)
    
    val elfFullName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(92)
    
    val elfStyle: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(220)
    
}

class tagENUMLOGFONTEXA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(188, 4)
    
    val elfLogFont: LOGFONTA
        get() = memberAt(0)
    
    val elfFullName: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(60)
    
    val elfStyle: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(124)
    
    val elfScript: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(156)
    
}

class tagENUMLOGFONTEXW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(348, 4)
    
    val elfLogFont: LOGFONTW
        get() = memberAt(0)
    
    val elfFullName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(92)
    
    val elfStyle: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(220)
    
    val elfScript: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(284)
    
}

class tagPANOSE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(10, 1)
    
    var bFamilyType: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var bSerifStyle: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var bWeight: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var bProportion: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
    var bContrast: BYTE
        get() = memberAt<BYTEVar>(4).value
        set(value) { memberAt<BYTEVar>(4).value = value }
    
    var bStrokeVariation: BYTE
        get() = memberAt<BYTEVar>(5).value
        set(value) { memberAt<BYTEVar>(5).value = value }
    
    var bArmStyle: BYTE
        get() = memberAt<BYTEVar>(6).value
        set(value) { memberAt<BYTEVar>(6).value = value }
    
    var bLetterform: BYTE
        get() = memberAt<BYTEVar>(7).value
        set(value) { memberAt<BYTEVar>(7).value = value }
    
    var bMidline: BYTE
        get() = memberAt<BYTEVar>(8).value
        set(value) { memberAt<BYTEVar>(8).value = value }
    
    var bXHeight: BYTE
        get() = memberAt<BYTEVar>(9).value
        set(value) { memberAt<BYTEVar>(9).value = value }
    
}

class tagEXTLOGFONTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(192, 4)
    
    val elfLogFont: LOGFONTA
        get() = memberAt(0)
    
    val elfFullName: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(60)
    
    val elfStyle: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(124)
    
    var elfVersion: DWORD
        get() = memberAt<DWORDVar>(156).value
        set(value) { memberAt<DWORDVar>(156).value = value }
    
    var elfStyleSize: DWORD
        get() = memberAt<DWORDVar>(160).value
        set(value) { memberAt<DWORDVar>(160).value = value }
    
    var elfMatch: DWORD
        get() = memberAt<DWORDVar>(164).value
        set(value) { memberAt<DWORDVar>(164).value = value }
    
    var elfReserved: DWORD
        get() = memberAt<DWORDVar>(168).value
        set(value) { memberAt<DWORDVar>(168).value = value }
    
    val elfVendorId: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(172)
    
    var elfCulture: DWORD
        get() = memberAt<DWORDVar>(176).value
        set(value) { memberAt<DWORDVar>(176).value = value }
    
    val elfPanose: PANOSE
        get() = memberAt(180)
    
}

class tagEXTLOGFONTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(320, 4)
    
    val elfLogFont: LOGFONTW
        get() = memberAt(0)
    
    val elfFullName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(92)
    
    val elfStyle: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(220)
    
    var elfVersion: DWORD
        get() = memberAt<DWORDVar>(284).value
        set(value) { memberAt<DWORDVar>(284).value = value }
    
    var elfStyleSize: DWORD
        get() = memberAt<DWORDVar>(288).value
        set(value) { memberAt<DWORDVar>(288).value = value }
    
    var elfMatch: DWORD
        get() = memberAt<DWORDVar>(292).value
        set(value) { memberAt<DWORDVar>(292).value = value }
    
    var elfReserved: DWORD
        get() = memberAt<DWORDVar>(296).value
        set(value) { memberAt<DWORDVar>(296).value = value }
    
    val elfVendorId: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(300)
    
    var elfCulture: DWORD
        get() = memberAt<DWORDVar>(304).value
        set(value) { memberAt<DWORDVar>(304).value = value }
    
    val elfPanose: PANOSE
        get() = memberAt(308)
    
}

class _devicemodeA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(156, 4)
    
    val dmDeviceName: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
    var dmSpecVersion: WORD
        get() = memberAt<WORDVar>(32).value
        set(value) { memberAt<WORDVar>(32).value = value }
    
    var dmDriverVersion: WORD
        get() = memberAt<WORDVar>(34).value
        set(value) { memberAt<WORDVar>(34).value = value }
    
    var dmSize: WORD
        get() = memberAt<WORDVar>(36).value
        set(value) { memberAt<WORDVar>(36).value = value }
    
    var dmDriverExtra: WORD
        get() = memberAt<WORDVar>(38).value
        set(value) { memberAt<WORDVar>(38).value = value }
    
    var dmFields: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var dmColor: Short
        get() = memberAt<ShortVar>(60).value
        set(value) { memberAt<ShortVar>(60).value = value }
    
    var dmDuplex: Short
        get() = memberAt<ShortVar>(62).value
        set(value) { memberAt<ShortVar>(62).value = value }
    
    var dmYResolution: Short
        get() = memberAt<ShortVar>(64).value
        set(value) { memberAt<ShortVar>(64).value = value }
    
    var dmTTOption: Short
        get() = memberAt<ShortVar>(66).value
        set(value) { memberAt<ShortVar>(66).value = value }
    
    var dmCollate: Short
        get() = memberAt<ShortVar>(68).value
        set(value) { memberAt<ShortVar>(68).value = value }
    
    val dmFormName: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(70)
    
    var dmLogPixels: WORD
        get() = memberAt<WORDVar>(102).value
        set(value) { memberAt<WORDVar>(102).value = value }
    
    var dmBitsPerPel: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var dmPelsWidth: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    var dmPelsHeight: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var dmDisplayFrequency: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
    var dmICMMethod: DWORD
        get() = memberAt<DWORDVar>(124).value
        set(value) { memberAt<DWORDVar>(124).value = value }
    
    var dmICMIntent: DWORD
        get() = memberAt<DWORDVar>(128).value
        set(value) { memberAt<DWORDVar>(128).value = value }
    
    var dmMediaType: DWORD
        get() = memberAt<DWORDVar>(132).value
        set(value) { memberAt<DWORDVar>(132).value = value }
    
    var dmDitherType: DWORD
        get() = memberAt<DWORDVar>(136).value
        set(value) { memberAt<DWORDVar>(136).value = value }
    
    var dmReserved1: DWORD
        get() = memberAt<DWORDVar>(140).value
        set(value) { memberAt<DWORDVar>(140).value = value }
    
    var dmReserved2: DWORD
        get() = memberAt<DWORDVar>(144).value
        set(value) { memberAt<DWORDVar>(144).value = value }
    
    var dmPanningWidth: DWORD
        get() = memberAt<DWORDVar>(148).value
        set(value) { memberAt<DWORDVar>(148).value = value }
    
    var dmPanningHeight: DWORD
        get() = memberAt<DWORDVar>(152).value
        set(value) { memberAt<DWORDVar>(152).value = value }
    
}

class anonymousStruct82(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
}

class anonymousStruct83(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 2)
    
    var dmOrientation: Short
        get() = memberAt<ShortVar>(0).value
        set(value) { memberAt<ShortVar>(0).value = value }
    
    var dmPaperSize: Short
        get() = memberAt<ShortVar>(2).value
        set(value) { memberAt<ShortVar>(2).value = value }
    
    var dmPaperLength: Short
        get() = memberAt<ShortVar>(4).value
        set(value) { memberAt<ShortVar>(4).value = value }
    
    var dmPaperWidth: Short
        get() = memberAt<ShortVar>(6).value
        set(value) { memberAt<ShortVar>(6).value = value }
    
    var dmScale: Short
        get() = memberAt<ShortVar>(8).value
        set(value) { memberAt<ShortVar>(8).value = value }
    
    var dmCopies: Short
        get() = memberAt<ShortVar>(10).value
        set(value) { memberAt<ShortVar>(10).value = value }
    
    var dmDefaultSource: Short
        get() = memberAt<ShortVar>(12).value
        set(value) { memberAt<ShortVar>(12).value = value }
    
    var dmPrintQuality: Short
        get() = memberAt<ShortVar>(14).value
        set(value) { memberAt<ShortVar>(14).value = value }
    
}

class _devicemodeW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(220, 4)
    
    val dmDeviceName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(0)
    
    var dmSpecVersion: WORD
        get() = memberAt<WORDVar>(64).value
        set(value) { memberAt<WORDVar>(64).value = value }
    
    var dmDriverVersion: WORD
        get() = memberAt<WORDVar>(66).value
        set(value) { memberAt<WORDVar>(66).value = value }
    
    var dmSize: WORD
        get() = memberAt<WORDVar>(68).value
        set(value) { memberAt<WORDVar>(68).value = value }
    
    var dmDriverExtra: WORD
        get() = memberAt<WORDVar>(70).value
        set(value) { memberAt<WORDVar>(70).value = value }
    
    var dmFields: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
    var dmColor: Short
        get() = memberAt<ShortVar>(92).value
        set(value) { memberAt<ShortVar>(92).value = value }
    
    var dmDuplex: Short
        get() = memberAt<ShortVar>(94).value
        set(value) { memberAt<ShortVar>(94).value = value }
    
    var dmYResolution: Short
        get() = memberAt<ShortVar>(96).value
        set(value) { memberAt<ShortVar>(96).value = value }
    
    var dmTTOption: Short
        get() = memberAt<ShortVar>(98).value
        set(value) { memberAt<ShortVar>(98).value = value }
    
    var dmCollate: Short
        get() = memberAt<ShortVar>(100).value
        set(value) { memberAt<ShortVar>(100).value = value }
    
    val dmFormName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(102)
    
    var dmLogPixels: WORD
        get() = memberAt<WORDVar>(166).value
        set(value) { memberAt<WORDVar>(166).value = value }
    
    var dmBitsPerPel: DWORD
        get() = memberAt<DWORDVar>(168).value
        set(value) { memberAt<DWORDVar>(168).value = value }
    
    var dmPelsWidth: DWORD
        get() = memberAt<DWORDVar>(172).value
        set(value) { memberAt<DWORDVar>(172).value = value }
    
    var dmPelsHeight: DWORD
        get() = memberAt<DWORDVar>(176).value
        set(value) { memberAt<DWORDVar>(176).value = value }
    
    var dmDisplayFrequency: DWORD
        get() = memberAt<DWORDVar>(184).value
        set(value) { memberAt<DWORDVar>(184).value = value }
    
    var dmICMMethod: DWORD
        get() = memberAt<DWORDVar>(188).value
        set(value) { memberAt<DWORDVar>(188).value = value }
    
    var dmICMIntent: DWORD
        get() = memberAt<DWORDVar>(192).value
        set(value) { memberAt<DWORDVar>(192).value = value }
    
    var dmMediaType: DWORD
        get() = memberAt<DWORDVar>(196).value
        set(value) { memberAt<DWORDVar>(196).value = value }
    
    var dmDitherType: DWORD
        get() = memberAt<DWORDVar>(200).value
        set(value) { memberAt<DWORDVar>(200).value = value }
    
    var dmReserved1: DWORD
        get() = memberAt<DWORDVar>(204).value
        set(value) { memberAt<DWORDVar>(204).value = value }
    
    var dmReserved2: DWORD
        get() = memberAt<DWORDVar>(208).value
        set(value) { memberAt<DWORDVar>(208).value = value }
    
    var dmPanningWidth: DWORD
        get() = memberAt<DWORDVar>(212).value
        set(value) { memberAt<DWORDVar>(212).value = value }
    
    var dmPanningHeight: DWORD
        get() = memberAt<DWORDVar>(216).value
        set(value) { memberAt<DWORDVar>(216).value = value }
    
}

class anonymousStruct84(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
}

class anonymousStruct85(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 2)
    
    var dmOrientation: Short
        get() = memberAt<ShortVar>(0).value
        set(value) { memberAt<ShortVar>(0).value = value }
    
    var dmPaperSize: Short
        get() = memberAt<ShortVar>(2).value
        set(value) { memberAt<ShortVar>(2).value = value }
    
    var dmPaperLength: Short
        get() = memberAt<ShortVar>(4).value
        set(value) { memberAt<ShortVar>(4).value = value }
    
    var dmPaperWidth: Short
        get() = memberAt<ShortVar>(6).value
        set(value) { memberAt<ShortVar>(6).value = value }
    
    var dmScale: Short
        get() = memberAt<ShortVar>(8).value
        set(value) { memberAt<ShortVar>(8).value = value }
    
    var dmCopies: Short
        get() = memberAt<ShortVar>(10).value
        set(value) { memberAt<ShortVar>(10).value = value }
    
    var dmDefaultSource: Short
        get() = memberAt<ShortVar>(12).value
        set(value) { memberAt<ShortVar>(12).value = value }
    
    var dmPrintQuality: Short
        get() = memberAt<ShortVar>(14).value
        set(value) { memberAt<ShortVar>(14).value = value }
    
}

class _DISPLAY_DEVICEA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(424, 4)
    
    var cb: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val DeviceName: CArrayPointer<CHARVar>
        get() = arrayMemberAt(4)
    
    val DeviceString: CArrayPointer<CHARVar>
        get() = arrayMemberAt(36)
    
    var StateFlags: DWORD
        get() = memberAt<DWORDVar>(164).value
        set(value) { memberAt<DWORDVar>(164).value = value }
    
    val DeviceID: CArrayPointer<CHARVar>
        get() = arrayMemberAt(168)
    
    val DeviceKey: CArrayPointer<CHARVar>
        get() = arrayMemberAt(296)
    
}

class _DISPLAY_DEVICEW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(840, 4)
    
    var cb: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val DeviceName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(4)
    
    val DeviceString: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(68)
    
    var StateFlags: DWORD
        get() = memberAt<DWORDVar>(324).value
        set(value) { memberAt<DWORDVar>(324).value = value }
    
    val DeviceID: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(328)
    
    val DeviceKey: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(584)
    
}

class _RGNDATAHEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var dwSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var iType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var nCount: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var nRgnSize: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    val rcBound: RECT
        get() = memberAt(16)
    
}

class _RGNDATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    val rdh: RGNDATAHEADER
        get() = memberAt(0)
    
    val Buffer: CArrayPointer<ByteVar>
        get() = arrayMemberAt(32)
    
}

class _ABC(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var abcA: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var abcB: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var abcC: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
}

class _ABCFLOAT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var abcfA: FLOAT
        get() = memberAt<FLOATVar>(0).value
        set(value) { memberAt<FLOATVar>(0).value = value }
    
    var abcfB: FLOAT
        get() = memberAt<FLOATVar>(4).value
        set(value) { memberAt<FLOATVar>(4).value = value }
    
    var abcfC: FLOAT
        get() = memberAt<FLOATVar>(8).value
        set(value) { memberAt<FLOATVar>(8).value = value }
    
}

class _OUTLINETEXTMETRICA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(232, 8)
    
    var otmSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    val otmTextMetrics: TEXTMETRICA
        get() = memberAt(4)
    
    var otmFiller: BYTE
        get() = memberAt<BYTEVar>(60).value
        set(value) { memberAt<BYTEVar>(60).value = value }
    
    val otmPanoseNumber: PANOSE
        get() = memberAt(61)
    
    var otmfsSelection: UINT
        get() = memberAt<UINTVar>(72).value
        set(value) { memberAt<UINTVar>(72).value = value }
    
    var otmfsType: UINT
        get() = memberAt<UINTVar>(76).value
        set(value) { memberAt<UINTVar>(76).value = value }
    
    var otmsCharSlopeRise: Int
        get() = memberAt<IntVar>(80).value
        set(value) { memberAt<IntVar>(80).value = value }
    
    var otmsCharSlopeRun: Int
        get() = memberAt<IntVar>(84).value
        set(value) { memberAt<IntVar>(84).value = value }
    
    var otmItalicAngle: Int
        get() = memberAt<IntVar>(88).value
        set(value) { memberAt<IntVar>(88).value = value }
    
    var otmEMSquare: UINT
        get() = memberAt<UINTVar>(92).value
        set(value) { memberAt<UINTVar>(92).value = value }
    
    var otmAscent: Int
        get() = memberAt<IntVar>(96).value
        set(value) { memberAt<IntVar>(96).value = value }
    
    var otmDescent: Int
        get() = memberAt<IntVar>(100).value
        set(value) { memberAt<IntVar>(100).value = value }
    
    var otmLineGap: UINT
        get() = memberAt<UINTVar>(104).value
        set(value) { memberAt<UINTVar>(104).value = value }
    
    var otmsCapEmHeight: UINT
        get() = memberAt<UINTVar>(108).value
        set(value) { memberAt<UINTVar>(108).value = value }
    
    var otmsXHeight: UINT
        get() = memberAt<UINTVar>(112).value
        set(value) { memberAt<UINTVar>(112).value = value }
    
    val otmrcFontBox: RECT
        get() = memberAt(116)
    
    var otmMacAscent: Int
        get() = memberAt<IntVar>(132).value
        set(value) { memberAt<IntVar>(132).value = value }
    
    var otmMacDescent: Int
        get() = memberAt<IntVar>(136).value
        set(value) { memberAt<IntVar>(136).value = value }
    
    var otmMacLineGap: UINT
        get() = memberAt<UINTVar>(140).value
        set(value) { memberAt<UINTVar>(140).value = value }
    
    var otmusMinimumPPEM: UINT
        get() = memberAt<UINTVar>(144).value
        set(value) { memberAt<UINTVar>(144).value = value }
    
    val otmptSubscriptSize: POINT
        get() = memberAt(148)
    
    val otmptSubscriptOffset: POINT
        get() = memberAt(156)
    
    val otmptSuperscriptSize: POINT
        get() = memberAt(164)
    
    val otmptSuperscriptOffset: POINT
        get() = memberAt(172)
    
    var otmsStrikeoutSize: UINT
        get() = memberAt<UINTVar>(180).value
        set(value) { memberAt<UINTVar>(180).value = value }
    
    var otmsStrikeoutPosition: Int
        get() = memberAt<IntVar>(184).value
        set(value) { memberAt<IntVar>(184).value = value }
    
    var otmsUnderscoreSize: Int
        get() = memberAt<IntVar>(188).value
        set(value) { memberAt<IntVar>(188).value = value }
    
    var otmsUnderscorePosition: Int
        get() = memberAt<IntVar>(192).value
        set(value) { memberAt<IntVar>(192).value = value }
    
    var otmpFamilyName: PSTR?
        get() = memberAt<PSTRVar>(200).value
        set(value) { memberAt<PSTRVar>(200).value = value }
    
    var otmpFaceName: PSTR?
        get() = memberAt<PSTRVar>(208).value
        set(value) { memberAt<PSTRVar>(208).value = value }
    
    var otmpStyleName: PSTR?
        get() = memberAt<PSTRVar>(216).value
        set(value) { memberAt<PSTRVar>(216).value = value }
    
    var otmpFullName: PSTR?
        get() = memberAt<PSTRVar>(224).value
        set(value) { memberAt<PSTRVar>(224).value = value }
    
}

class _OUTLINETEXTMETRICW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(232, 8)
    
    var otmSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    val otmTextMetrics: TEXTMETRICW
        get() = memberAt(4)
    
    var otmFiller: BYTE
        get() = memberAt<BYTEVar>(64).value
        set(value) { memberAt<BYTEVar>(64).value = value }
    
    val otmPanoseNumber: PANOSE
        get() = memberAt(65)
    
    var otmfsSelection: UINT
        get() = memberAt<UINTVar>(76).value
        set(value) { memberAt<UINTVar>(76).value = value }
    
    var otmfsType: UINT
        get() = memberAt<UINTVar>(80).value
        set(value) { memberAt<UINTVar>(80).value = value }
    
    var otmsCharSlopeRise: Int
        get() = memberAt<IntVar>(84).value
        set(value) { memberAt<IntVar>(84).value = value }
    
    var otmsCharSlopeRun: Int
        get() = memberAt<IntVar>(88).value
        set(value) { memberAt<IntVar>(88).value = value }
    
    var otmItalicAngle: Int
        get() = memberAt<IntVar>(92).value
        set(value) { memberAt<IntVar>(92).value = value }
    
    var otmEMSquare: UINT
        get() = memberAt<UINTVar>(96).value
        set(value) { memberAt<UINTVar>(96).value = value }
    
    var otmAscent: Int
        get() = memberAt<IntVar>(100).value
        set(value) { memberAt<IntVar>(100).value = value }
    
    var otmDescent: Int
        get() = memberAt<IntVar>(104).value
        set(value) { memberAt<IntVar>(104).value = value }
    
    var otmLineGap: UINT
        get() = memberAt<UINTVar>(108).value
        set(value) { memberAt<UINTVar>(108).value = value }
    
    var otmsCapEmHeight: UINT
        get() = memberAt<UINTVar>(112).value
        set(value) { memberAt<UINTVar>(112).value = value }
    
    var otmsXHeight: UINT
        get() = memberAt<UINTVar>(116).value
        set(value) { memberAt<UINTVar>(116).value = value }
    
    val otmrcFontBox: RECT
        get() = memberAt(120)
    
    var otmMacAscent: Int
        get() = memberAt<IntVar>(136).value
        set(value) { memberAt<IntVar>(136).value = value }
    
    var otmMacDescent: Int
        get() = memberAt<IntVar>(140).value
        set(value) { memberAt<IntVar>(140).value = value }
    
    var otmMacLineGap: UINT
        get() = memberAt<UINTVar>(144).value
        set(value) { memberAt<UINTVar>(144).value = value }
    
    var otmusMinimumPPEM: UINT
        get() = memberAt<UINTVar>(148).value
        set(value) { memberAt<UINTVar>(148).value = value }
    
    val otmptSubscriptSize: POINT
        get() = memberAt(152)
    
    val otmptSubscriptOffset: POINT
        get() = memberAt(160)
    
    val otmptSuperscriptSize: POINT
        get() = memberAt(168)
    
    val otmptSuperscriptOffset: POINT
        get() = memberAt(176)
    
    var otmsStrikeoutSize: UINT
        get() = memberAt<UINTVar>(184).value
        set(value) { memberAt<UINTVar>(184).value = value }
    
    var otmsStrikeoutPosition: Int
        get() = memberAt<IntVar>(188).value
        set(value) { memberAt<IntVar>(188).value = value }
    
    var otmsUnderscoreSize: Int
        get() = memberAt<IntVar>(192).value
        set(value) { memberAt<IntVar>(192).value = value }
    
    var otmsUnderscorePosition: Int
        get() = memberAt<IntVar>(196).value
        set(value) { memberAt<IntVar>(196).value = value }
    
    var otmpFamilyName: PSTR?
        get() = memberAt<PSTRVar>(200).value
        set(value) { memberAt<PSTRVar>(200).value = value }
    
    var otmpFaceName: PSTR?
        get() = memberAt<PSTRVar>(208).value
        set(value) { memberAt<PSTRVar>(208).value = value }
    
    var otmpStyleName: PSTR?
        get() = memberAt<PSTRVar>(216).value
        set(value) { memberAt<PSTRVar>(216).value = value }
    
    var otmpFullName: PSTR?
        get() = memberAt<PSTRVar>(224).value
        set(value) { memberAt<PSTRVar>(224).value = value }
    
}

class tagPOLYTEXTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var x: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var n: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var lpstr: LPCSTR?
        get() = memberAt<LPCSTRVar>(16).value
        set(value) { memberAt<LPCSTRVar>(16).value = value }
    
    var uiFlags: UINT
        get() = memberAt<UINTVar>(24).value
        set(value) { memberAt<UINTVar>(24).value = value }
    
    val rcl: RECT
        get() = memberAt(28)
    
    var pdx: CPointer<IntVar>?
        get() = memberAt<CPointerVar<IntVar>>(48).value
        set(value) { memberAt<CPointerVar<IntVar>>(48).value = value }
    
}

class tagPOLYTEXTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var x: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var n: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var lpstr: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(16).value
        set(value) { memberAt<LPCWSTRVar>(16).value = value }
    
    var uiFlags: UINT
        get() = memberAt<UINTVar>(24).value
        set(value) { memberAt<UINTVar>(24).value = value }
    
    val rcl: RECT
        get() = memberAt(28)
    
    var pdx: CPointer<IntVar>?
        get() = memberAt<CPointerVar<IntVar>>(48).value
        set(value) { memberAt<CPointerVar<IntVar>>(48).value = value }
    
}

class _FIXED(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var fract: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var value: Short
        get() = memberAt<ShortVar>(2).value
        set(value) { memberAt<ShortVar>(2).value = value }
    
}

class _MAT2(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 2)
    
    val eM11: FIXED
        get() = memberAt(0)
    
    val eM12: FIXED
        get() = memberAt(4)
    
    val eM21: FIXED
        get() = memberAt(8)
    
    val eM22: FIXED
        get() = memberAt(12)
    
}

class _GLYPHMETRICS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var gmBlackBoxX: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var gmBlackBoxY: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    val gmptGlyphOrigin: POINT
        get() = memberAt(8)
    
    var gmCellIncX: Short
        get() = memberAt<ShortVar>(16).value
        set(value) { memberAt<ShortVar>(16).value = value }
    
    var gmCellIncY: Short
        get() = memberAt<ShortVar>(18).value
        set(value) { memberAt<ShortVar>(18).value = value }
    
}

class tagPOINTFX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    val x: FIXED
        get() = memberAt(0)
    
    val y: FIXED
        get() = memberAt(4)
    
}

class tagTTPOLYCURVE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 2)
    
    var wType: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var cpfx: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    val apfx: CArrayPointer<POINTFX>
        get() = arrayMemberAt(4)
    
}

class tagTTPOLYGONHEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var cb: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val pfxStart: POINTFX
        get() = memberAt(8)
    
}

class tagGCP_RESULTSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var lStructSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpOutString: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var lpOrder: CPointer<UINTVar>?
        get() = memberAt<CPointerVar<UINTVar>>(16).value
        set(value) { memberAt<CPointerVar<UINTVar>>(16).value = value }
    
    var lpDx: CPointer<IntVar>?
        get() = memberAt<CPointerVar<IntVar>>(24).value
        set(value) { memberAt<CPointerVar<IntVar>>(24).value = value }
    
    var lpCaretPos: CPointer<IntVar>?
        get() = memberAt<CPointerVar<IntVar>>(32).value
        set(value) { memberAt<CPointerVar<IntVar>>(32).value = value }
    
    var lpClass: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var lpGlyphs: LPWSTR?
        get() = memberAt<LPWSTRVar>(48).value
        set(value) { memberAt<LPWSTRVar>(48).value = value }
    
    var nGlyphs: UINT
        get() = memberAt<UINTVar>(56).value
        set(value) { memberAt<UINTVar>(56).value = value }
    
    var nMaxFit: Int
        get() = memberAt<IntVar>(60).value
        set(value) { memberAt<IntVar>(60).value = value }
    
}

class tagGCP_RESULTSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var lStructSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpOutString: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var lpOrder: CPointer<UINTVar>?
        get() = memberAt<CPointerVar<UINTVar>>(16).value
        set(value) { memberAt<CPointerVar<UINTVar>>(16).value = value }
    
    var lpDx: CPointer<IntVar>?
        get() = memberAt<CPointerVar<IntVar>>(24).value
        set(value) { memberAt<CPointerVar<IntVar>>(24).value = value }
    
    var lpCaretPos: CPointer<IntVar>?
        get() = memberAt<CPointerVar<IntVar>>(32).value
        set(value) { memberAt<CPointerVar<IntVar>>(32).value = value }
    
    var lpClass: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var lpGlyphs: LPWSTR?
        get() = memberAt<LPWSTRVar>(48).value
        set(value) { memberAt<LPWSTRVar>(48).value = value }
    
    var nGlyphs: UINT
        get() = memberAt<UINTVar>(56).value
        set(value) { memberAt<UINTVar>(56).value = value }
    
    var nMaxFit: Int
        get() = memberAt<IntVar>(60).value
        set(value) { memberAt<IntVar>(60).value = value }
    
}

class _RASTERIZER_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(6, 2)
    
    var nSize: Short
        get() = memberAt<ShortVar>(0).value
        set(value) { memberAt<ShortVar>(0).value = value }
    
    var wFlags: Short
        get() = memberAt<ShortVar>(2).value
        set(value) { memberAt<ShortVar>(2).value = value }
    
    var nLanguageID: Short
        get() = memberAt<ShortVar>(4).value
        set(value) { memberAt<ShortVar>(4).value = value }
    
}

class tagPIXELFORMATDESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var nSize: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var nVersion: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var iPixelType: BYTE
        get() = memberAt<BYTEVar>(8).value
        set(value) { memberAt<BYTEVar>(8).value = value }
    
    var cColorBits: BYTE
        get() = memberAt<BYTEVar>(9).value
        set(value) { memberAt<BYTEVar>(9).value = value }
    
    var cRedBits: BYTE
        get() = memberAt<BYTEVar>(10).value
        set(value) { memberAt<BYTEVar>(10).value = value }
    
    var cRedShift: BYTE
        get() = memberAt<BYTEVar>(11).value
        set(value) { memberAt<BYTEVar>(11).value = value }
    
    var cGreenBits: BYTE
        get() = memberAt<BYTEVar>(12).value
        set(value) { memberAt<BYTEVar>(12).value = value }
    
    var cGreenShift: BYTE
        get() = memberAt<BYTEVar>(13).value
        set(value) { memberAt<BYTEVar>(13).value = value }
    
    var cBlueBits: BYTE
        get() = memberAt<BYTEVar>(14).value
        set(value) { memberAt<BYTEVar>(14).value = value }
    
    var cBlueShift: BYTE
        get() = memberAt<BYTEVar>(15).value
        set(value) { memberAt<BYTEVar>(15).value = value }
    
    var cAlphaBits: BYTE
        get() = memberAt<BYTEVar>(16).value
        set(value) { memberAt<BYTEVar>(16).value = value }
    
    var cAlphaShift: BYTE
        get() = memberAt<BYTEVar>(17).value
        set(value) { memberAt<BYTEVar>(17).value = value }
    
    var cAccumBits: BYTE
        get() = memberAt<BYTEVar>(18).value
        set(value) { memberAt<BYTEVar>(18).value = value }
    
    var cAccumRedBits: BYTE
        get() = memberAt<BYTEVar>(19).value
        set(value) { memberAt<BYTEVar>(19).value = value }
    
    var cAccumGreenBits: BYTE
        get() = memberAt<BYTEVar>(20).value
        set(value) { memberAt<BYTEVar>(20).value = value }
    
    var cAccumBlueBits: BYTE
        get() = memberAt<BYTEVar>(21).value
        set(value) { memberAt<BYTEVar>(21).value = value }
    
    var cAccumAlphaBits: BYTE
        get() = memberAt<BYTEVar>(22).value
        set(value) { memberAt<BYTEVar>(22).value = value }
    
    var cDepthBits: BYTE
        get() = memberAt<BYTEVar>(23).value
        set(value) { memberAt<BYTEVar>(23).value = value }
    
    var cStencilBits: BYTE
        get() = memberAt<BYTEVar>(24).value
        set(value) { memberAt<BYTEVar>(24).value = value }
    
    var cAuxBuffers: BYTE
        get() = memberAt<BYTEVar>(25).value
        set(value) { memberAt<BYTEVar>(25).value = value }
    
    var iLayerType: BYTE
        get() = memberAt<BYTEVar>(26).value
        set(value) { memberAt<BYTEVar>(26).value = value }
    
    var bReserved: BYTE
        get() = memberAt<BYTEVar>(27).value
        set(value) { memberAt<BYTEVar>(27).value = value }
    
    var dwLayerMask: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var dwVisibleMask: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var dwDamageMask: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class HRGN__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class tagWCRANGE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var wcLow: WCHAR
        get() = memberAt<WCHARVar>(0).value
        set(value) { memberAt<WCHARVar>(0).value = value }
    
    var cGlyphs: USHORT
        get() = memberAt<USHORTVar>(2).value
        set(value) { memberAt<USHORTVar>(2).value = value }
    
}

class tagGLYPHSET(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var cbThis: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var flAccel: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var cGlyphsSupported: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var cRanges: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    val ranges: CArrayPointer<WCRANGE>
        get() = arrayMemberAt(16)
    
}

class tagDESIGNVECTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 4)
    
    var dvReserved: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dvNumAxes: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val dvValues: CArrayPointer<LONGVar>
        get() = arrayMemberAt(8)
    
}

class tagAXISINFOA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var axMinValue: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var axMaxValue: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    val axAxisName: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(8)
    
}

class tagAXISINFOW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var axMinValue: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var axMaxValue: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    val axAxisName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(8)
    
}

class tagAXESLISTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(392, 4)
    
    var axlReserved: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var axlNumAxes: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val axlAxisInfo: CArrayPointer<AXISINFOA>
        get() = arrayMemberAt(8)
    
}

class tagAXESLISTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(648, 4)
    
    var axlReserved: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var axlNumAxes: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val axlAxisInfo: CArrayPointer<AXISINFOW>
        get() = arrayMemberAt(8)
    
}

class tagENUMLOGFONTEXDVA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(260, 4)
    
    val elfEnumLogfontEx: ENUMLOGFONTEXA
        get() = memberAt(0)
    
    val elfDesignVector: DESIGNVECTOR
        get() = memberAt(188)
    
}

class tagENUMLOGFONTEXDVW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(420, 4)
    
    val elfEnumLogfontEx: ENUMLOGFONTEXW
        get() = memberAt(0)
    
    val elfDesignVector: DESIGNVECTOR
        get() = memberAt(348)
    
}

class tagENUMTEXTMETRICA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(488, 4)
    
    val etmNewTextMetricEx: NEWTEXTMETRICEXA
        get() = memberAt(0)
    
    val etmAxesList: AXESLISTA
        get() = memberAt(96)
    
}

class tagENUMTEXTMETRICW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(748, 4)
    
    val etmNewTextMetricEx: NEWTEXTMETRICEXW
        get() = memberAt(0)
    
    val etmAxesList: AXESLISTW
        get() = memberAt(100)
    
}

class _TRIVERTEX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var x: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var y: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var Red: COLOR16
        get() = memberAt<COLOR16Var>(8).value
        set(value) { memberAt<COLOR16Var>(8).value = value }
    
    var Green: COLOR16
        get() = memberAt<COLOR16Var>(10).value
        set(value) { memberAt<COLOR16Var>(10).value = value }
    
    var Blue: COLOR16
        get() = memberAt<COLOR16Var>(12).value
        set(value) { memberAt<COLOR16Var>(12).value = value }
    
    var Alpha: COLOR16
        get() = memberAt<COLOR16Var>(14).value
        set(value) { memberAt<COLOR16Var>(14).value = value }
    
}

class _GRADIENT_TRIANGLE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var Vertex1: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    var Vertex2: ULONG
        get() = memberAt<ULONGVar>(4).value
        set(value) { memberAt<ULONGVar>(4).value = value }
    
    var Vertex3: ULONG
        get() = memberAt<ULONGVar>(8).value
        set(value) { memberAt<ULONGVar>(8).value = value }
    
}

class _GRADIENT_RECT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var UpperLeft: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    var LowerRight: ULONG
        get() = memberAt<ULONGVar>(4).value
        set(value) { memberAt<ULONGVar>(4).value = value }
    
}

class _BLENDFUNCTION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 1)
    
    var BlendOp: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var BlendFlags: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var SourceConstantAlpha: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var AlphaFormat: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
}

class tagDIBSECTION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(104, 8)
    
    val dsBm: BITMAP
        get() = memberAt(0)
    
    val dsBmih: BITMAPINFOHEADER
        get() = memberAt(32)
    
    val dsBitfields: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(72)
    
    var dshSection: HANDLE?
        get() = memberAt<HANDLEVar>(88).value
        set(value) { memberAt<HANDLEVar>(88).value = value }
    
    var dsOffset: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
}

class tagCOLORADJUSTMENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 2)
    
    var caSize: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var caFlags: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var caIlluminantIndex: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var caRedGamma: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var caGreenGamma: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var caBlueGamma: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var caReferenceBlack: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var caReferenceWhite: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var caContrast: SHORT
        get() = memberAt<SHORTVar>(16).value
        set(value) { memberAt<SHORTVar>(16).value = value }
    
    var caBrightness: SHORT
        get() = memberAt<SHORTVar>(18).value
        set(value) { memberAt<SHORTVar>(18).value = value }
    
    var caColorfulness: SHORT
        get() = memberAt<SHORTVar>(20).value
        set(value) { memberAt<SHORTVar>(20).value = value }
    
    var caRedGreenTint: SHORT
        get() = memberAt<SHORTVar>(22).value
        set(value) { memberAt<SHORTVar>(22).value = value }
    
}

class _DOCINFOA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var lpszDocName: LPCSTR?
        get() = memberAt<LPCSTRVar>(8).value
        set(value) { memberAt<LPCSTRVar>(8).value = value }
    
    var lpszOutput: LPCSTR?
        get() = memberAt<LPCSTRVar>(16).value
        set(value) { memberAt<LPCSTRVar>(16).value = value }
    
    var lpszDatatype: LPCSTR?
        get() = memberAt<LPCSTRVar>(24).value
        set(value) { memberAt<LPCSTRVar>(24).value = value }
    
    var fwType: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _DOCINFOW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var lpszDocName: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(8).value
        set(value) { memberAt<LPCWSTRVar>(8).value = value }
    
    var lpszOutput: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(16).value
        set(value) { memberAt<LPCWSTRVar>(16).value = value }
    
    var lpszDatatype: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(24).value
        set(value) { memberAt<LPCWSTRVar>(24).value = value }
    
    var fwType: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class tagKERNINGPAIR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var wFirst: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var wSecond: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var iKernAmount: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
}

class tagEMR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var iType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var nSize: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class tagEMRTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    val ptlReference: POINTL
        get() = memberAt(0)
    
    var nChars: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var offString: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var fOptions: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val rcl: RECTL
        get() = memberAt(20)
    
    var offDx: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class tagABORTPATH(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
}

class tagEMRSELECTCLIPPATH(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var iMode: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class tagEMRSETMITERLIMIT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var eMiterLimit: FLOAT
        get() = memberAt<FLOATVar>(8).value
        set(value) { memberAt<FLOATVar>(8).value = value }
    
}

class tagEMRRESTOREDC(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var iRelative: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
}

class tagEMRSETARCDIRECTION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var iArcDirection: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class tagEMRSETMAPPERFLAGS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class tagEMRSETTEXTCOLOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var crColor: COLORREF
        get() = memberAt<COLORREFVar>(8).value
        set(value) { memberAt<COLORREFVar>(8).value = value }
    
}

class tagEMRSELECTOBJECT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihObject: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class tagEMRSELECTPALETTE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihPal: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class tagEMRRESIZEPALETTE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihPal: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var cEntries: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class tagEMRSETPALETTEENTRIES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihPal: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var iStart: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var cEntries: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val aPalEntries: CArrayPointer<PALETTEENTRY>
        get() = arrayMemberAt(20)
    
}

class tagEMRSETCOLORADJUSTMENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val ColorAdjustment: COLORADJUSTMENT
        get() = memberAt(8)
    
}

class tagEMRGDICOMMENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val Data: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(12)
    
}

class tagEMREOF(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var nPalEntries: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var offPalEntries: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var nSizeLast: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class tagEMRLINETO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val ptl: POINTL
        get() = memberAt(8)
    
}

class tagEMROFFSETCLIPRGN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val ptlOffset: POINTL
        get() = memberAt(8)
    
}

class tagEMRFILLPATH(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
}

class tagEMREXCLUDECLIPRECT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclClip: RECTL
        get() = memberAt(8)
    
}

class tagEMRSETVIEWPORTORGEX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val ptlOrigin: POINTL
        get() = memberAt(8)
    
}

class tagEMRSETVIEWPORTEXTEX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val szlExtent: SIZEL
        get() = memberAt(8)
    
}

class tagEMRSCALEVIEWPORTEXTEX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var xNum: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var xDenom: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var yNum: LONG
        get() = memberAt<LONGVar>(16).value
        set(value) { memberAt<LONGVar>(16).value = value }
    
    var yDenom: LONG
        get() = memberAt<LONGVar>(20).value
        set(value) { memberAt<LONGVar>(20).value = value }
    
}

class tagEMRSETWORLDTRANSFORM(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val xform: XFORM
        get() = memberAt(8)
    
}

class tagEMRMODIFYWORLDTRANSFORM(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val xform: XFORM
        get() = memberAt(8)
    
    var iMode: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class tagEMRSETPIXELV(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val ptlPixel: POINTL
        get() = memberAt(8)
    
    var crColor: COLORREF
        get() = memberAt<COLORREFVar>(16).value
        set(value) { memberAt<COLORREFVar>(16).value = value }
    
}

class tagEMREXTFLOODFILL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val ptlStart: POINTL
        get() = memberAt(8)
    
    var crColor: COLORREF
        get() = memberAt<COLORREFVar>(16).value
        set(value) { memberAt<COLORREFVar>(16).value = value }
    
    var iMode: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class tagEMRELLIPSE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBox: RECTL
        get() = memberAt(8)
    
}

class tagEMRROUNDRECT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBox: RECTL
        get() = memberAt(8)
    
    val szlCorner: SIZEL
        get() = memberAt(24)
    
}

class tagEMRARC(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBox: RECTL
        get() = memberAt(8)
    
    val ptlStart: POINTL
        get() = memberAt(24)
    
    val ptlEnd: POINTL
        get() = memberAt(32)
    
}

class tagEMRANGLEARC(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val ptlCenter: POINTL
        get() = memberAt(8)
    
    var nRadius: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var eStartAngle: FLOAT
        get() = memberAt<FLOATVar>(20).value
        set(value) { memberAt<FLOATVar>(20).value = value }
    
    var eSweepAngle: FLOAT
        get() = memberAt<FLOATVar>(24).value
        set(value) { memberAt<FLOATVar>(24).value = value }
    
}

class tagEMRPOLYLINE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var cptl: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val aptl: CArrayPointer<POINTL>
        get() = arrayMemberAt(28)
    
}

class tagEMRPOLYLINE16(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var cpts: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val apts: CArrayPointer<POINTS>
        get() = arrayMemberAt(28)
    
}

class tagEMRPOLYDRAW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var cptl: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val aptl: CArrayPointer<POINTL>
        get() = arrayMemberAt(28)
    
    val abTypes: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(36)
    
}

class tagEMRPOLYDRAW16(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var cpts: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val apts: CArrayPointer<POINTS>
        get() = arrayMemberAt(28)
    
    val abTypes: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(32)
    
}

class tagEMRPOLYPOLYLINE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(44, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var nPolys: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var cptl: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    val aPolyCounts: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(32)
    
    val aptl: CArrayPointer<POINTL>
        get() = arrayMemberAt(36)
    
}

class tagEMRPOLYPOLYLINE16(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var nPolys: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var cpts: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    val aPolyCounts: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(32)
    
    val apts: CArrayPointer<POINTS>
        get() = arrayMemberAt(36)
    
}

class tagEMRINVERTRGN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var cbRgnData: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val RgnData: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
}

class tagEMRFILLRGN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var cbRgnData: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var ihBrush: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    val RgnData: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(32)
    
}

class tagEMRFRAMERGN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(44, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var cbRgnData: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var ihBrush: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    val szlStroke: SIZEL
        get() = memberAt(32)
    
    val RgnData: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(40)
    
}

class tagEMREXTSELECTCLIPRGN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var cbRgnData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var iMode: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    val RgnData: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(16)
    
}

class tagEMREXTTEXTOUTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(76, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var iGraphicsMode: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var exScale: FLOAT
        get() = memberAt<FLOATVar>(28).value
        set(value) { memberAt<FLOATVar>(28).value = value }
    
    var eyScale: FLOAT
        get() = memberAt<FLOATVar>(32).value
        set(value) { memberAt<FLOATVar>(32).value = value }
    
    val emrtext: EMRTEXT
        get() = memberAt(36)
    
}

class tagEMRPOLYTEXTOUTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var iGraphicsMode: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var exScale: FLOAT
        get() = memberAt<FLOATVar>(28).value
        set(value) { memberAt<FLOATVar>(28).value = value }
    
    var eyScale: FLOAT
        get() = memberAt<FLOATVar>(32).value
        set(value) { memberAt<FLOATVar>(32).value = value }
    
    var cStrings: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    val aemrtext: CArrayPointer<EMRTEXT>
        get() = arrayMemberAt(40)
    
}

class tagEMRBITBLT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(100, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var xDest: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var yDest: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var cxDest: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var cyDest: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var dwRop: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var xSrc: LONG
        get() = memberAt<LONGVar>(44).value
        set(value) { memberAt<LONGVar>(44).value = value }
    
    var ySrc: LONG
        get() = memberAt<LONGVar>(48).value
        set(value) { memberAt<LONGVar>(48).value = value }
    
    val xformSrc: XFORM
        get() = memberAt(52)
    
    var crBkColorSrc: COLORREF
        get() = memberAt<COLORREFVar>(76).value
        set(value) { memberAt<COLORREFVar>(76).value = value }
    
    var iUsageSrc: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var offBmiSrc: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var cbBmiSrc: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var offBitsSrc: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    var cbBitsSrc: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
}

class tagEMRSTRETCHBLT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(108, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var xDest: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var yDest: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var cxDest: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var cyDest: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var dwRop: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var xSrc: LONG
        get() = memberAt<LONGVar>(44).value
        set(value) { memberAt<LONGVar>(44).value = value }
    
    var ySrc: LONG
        get() = memberAt<LONGVar>(48).value
        set(value) { memberAt<LONGVar>(48).value = value }
    
    val xformSrc: XFORM
        get() = memberAt(52)
    
    var crBkColorSrc: COLORREF
        get() = memberAt<COLORREFVar>(76).value
        set(value) { memberAt<COLORREFVar>(76).value = value }
    
    var iUsageSrc: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var offBmiSrc: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var cbBmiSrc: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var offBitsSrc: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    var cbBitsSrc: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var cxSrc: LONG
        get() = memberAt<LONGVar>(100).value
        set(value) { memberAt<LONGVar>(100).value = value }
    
    var cySrc: LONG
        get() = memberAt<LONGVar>(104).value
        set(value) { memberAt<LONGVar>(104).value = value }
    
}

class tagEMRMASKBLT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(128, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var xDest: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var yDest: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var cxDest: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var cyDest: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var dwRop: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var xSrc: LONG
        get() = memberAt<LONGVar>(44).value
        set(value) { memberAt<LONGVar>(44).value = value }
    
    var ySrc: LONG
        get() = memberAt<LONGVar>(48).value
        set(value) { memberAt<LONGVar>(48).value = value }
    
    val xformSrc: XFORM
        get() = memberAt(52)
    
    var crBkColorSrc: COLORREF
        get() = memberAt<COLORREFVar>(76).value
        set(value) { memberAt<COLORREFVar>(76).value = value }
    
    var iUsageSrc: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var offBmiSrc: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var cbBmiSrc: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var offBitsSrc: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    var cbBitsSrc: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var xMask: LONG
        get() = memberAt<LONGVar>(100).value
        set(value) { memberAt<LONGVar>(100).value = value }
    
    var yMask: LONG
        get() = memberAt<LONGVar>(104).value
        set(value) { memberAt<LONGVar>(104).value = value }
    
    var iUsageMask: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    var offBmiMask: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var cbBmiMask: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
    var offBitsMask: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
    var cbBitsMask: DWORD
        get() = memberAt<DWORDVar>(124).value
        set(value) { memberAt<DWORDVar>(124).value = value }
    
}

class tagEMRPLGBLT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(140, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    val aptlDest: CArrayPointer<POINTL>
        get() = arrayMemberAt(24)
    
    var xSrc: LONG
        get() = memberAt<LONGVar>(48).value
        set(value) { memberAt<LONGVar>(48).value = value }
    
    var ySrc: LONG
        get() = memberAt<LONGVar>(52).value
        set(value) { memberAt<LONGVar>(52).value = value }
    
    var cxSrc: LONG
        get() = memberAt<LONGVar>(56).value
        set(value) { memberAt<LONGVar>(56).value = value }
    
    var cySrc: LONG
        get() = memberAt<LONGVar>(60).value
        set(value) { memberAt<LONGVar>(60).value = value }
    
    val xformSrc: XFORM
        get() = memberAt(64)
    
    var crBkColorSrc: COLORREF
        get() = memberAt<COLORREFVar>(88).value
        set(value) { memberAt<COLORREFVar>(88).value = value }
    
    var iUsageSrc: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    var offBmiSrc: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var cbBmiSrc: DWORD
        get() = memberAt<DWORDVar>(100).value
        set(value) { memberAt<DWORDVar>(100).value = value }
    
    var offBitsSrc: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var cbBitsSrc: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    var xMask: LONG
        get() = memberAt<LONGVar>(112).value
        set(value) { memberAt<LONGVar>(112).value = value }
    
    var yMask: LONG
        get() = memberAt<LONGVar>(116).value
        set(value) { memberAt<LONGVar>(116).value = value }
    
    var iUsageMask: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
    var offBmiMask: DWORD
        get() = memberAt<DWORDVar>(124).value
        set(value) { memberAt<DWORDVar>(124).value = value }
    
    var cbBmiMask: DWORD
        get() = memberAt<DWORDVar>(128).value
        set(value) { memberAt<DWORDVar>(128).value = value }
    
    var offBitsMask: DWORD
        get() = memberAt<DWORDVar>(132).value
        set(value) { memberAt<DWORDVar>(132).value = value }
    
    var cbBitsMask: DWORD
        get() = memberAt<DWORDVar>(136).value
        set(value) { memberAt<DWORDVar>(136).value = value }
    
}

class tagEMRSETDIBITSTODEVICE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(76, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var xDest: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var yDest: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var xSrc: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var ySrc: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var cxSrc: LONG
        get() = memberAt<LONGVar>(40).value
        set(value) { memberAt<LONGVar>(40).value = value }
    
    var cySrc: LONG
        get() = memberAt<LONGVar>(44).value
        set(value) { memberAt<LONGVar>(44).value = value }
    
    var offBmiSrc: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var cbBmiSrc: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var offBitsSrc: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var cbBitsSrc: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var iUsageSrc: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var iStartScan: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    var cScans: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
}

class tagEMRSTRETCHDIBITS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var xDest: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var yDest: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var xSrc: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var ySrc: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var cxSrc: LONG
        get() = memberAt<LONGVar>(40).value
        set(value) { memberAt<LONGVar>(40).value = value }
    
    var cySrc: LONG
        get() = memberAt<LONGVar>(44).value
        set(value) { memberAt<LONGVar>(44).value = value }
    
    var offBmiSrc: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var cbBmiSrc: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var offBitsSrc: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var cbBitsSrc: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var iUsageSrc: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var dwRop: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    var cxDest: LONG
        get() = memberAt<LONGVar>(72).value
        set(value) { memberAt<LONGVar>(72).value = value }
    
    var cyDest: LONG
        get() = memberAt<LONGVar>(76).value
        set(value) { memberAt<LONGVar>(76).value = value }
    
}

class tagEMREXTCREATEFONTINDIRECTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(332, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihFont: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val elfw: EXTLOGFONTW
        get() = memberAt(12)
    
}

class tagEMRCREATEPALETTE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihPal: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val lgpl: LOGPALETTE
        get() = memberAt(12)
    
}

class tagEMRCREATEPEN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihPen: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val lopn: LOGPEN
        get() = memberAt(12)
    
}

class tagEMREXTCREATEPEN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihPen: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var offBmi: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var cbBmi: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var offBits: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var cbBits: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val elp: EXTLOGPEN
        get() = memberAt(32)
    
}

class tagEMRCREATEBRUSHINDIRECT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihBrush: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val lb: LOGBRUSH32
        get() = memberAt(12)
    
}

class tagEMRCREATEMONOBRUSH(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihBrush: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var iUsage: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var offBmi: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var cbBmi: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var offBits: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var cbBits: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class tagEMRCREATEDIBPATTERNBRUSHPT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihBrush: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var iUsage: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var offBmi: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var cbBmi: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var offBits: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var cbBits: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class tagEMRFORMAT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var dSignature: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var nVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var offData: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class tagEMRGLSRECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val Data: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(12)
    
}

class tagEMRGLSBOUNDEDRECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val Data: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
}

class tagEMRPIXELFORMAT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val pfd: PIXELFORMATDESCRIPTOR
        get() = memberAt(8)
    
}

class tagEMRCREATECOLORSPACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(340, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihCS: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val lcs: LOGCOLORSPACEA
        get() = memberAt(12)
    
}

class tagEMRSETCOLORSPACE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihCS: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class tagEMREXTESCAPE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var iEscape: INT
        get() = memberAt<INTVar>(8).value
        set(value) { memberAt<INTVar>(8).value = value }
    
    var cbEscData: INT
        get() = memberAt<INTVar>(12).value
        set(value) { memberAt<INTVar>(12).value = value }
    
    val EscData: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(16)
    
}

class tagEMRNAMEDESCAPE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var iEscape: INT
        get() = memberAt<INTVar>(8).value
        set(value) { memberAt<INTVar>(8).value = value }
    
    var cbDriver: INT
        get() = memberAt<INTVar>(12).value
        set(value) { memberAt<INTVar>(12).value = value }
    
    var cbEscData: INT
        get() = memberAt<INTVar>(16).value
        set(value) { memberAt<INTVar>(16).value = value }
    
    val EscData: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(20)
    
}

class tagEMRSETICMPROFILE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var cbName: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val Data: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(20)
    
}

class tagEMRCREATECOLORSPACEW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(612, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihCS: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val lcs: LOGCOLORSPACEW
        get() = memberAt(12)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(600).value
        set(value) { memberAt<DWORDVar>(600).value = value }
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(604).value
        set(value) { memberAt<DWORDVar>(604).value = value }
    
    val Data: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(608)
    
}

class tagCOLORMATCHTOTARGET(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var dwAction: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var cbName: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    val Data: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(24)
    
}

class tagCOLORCORRECTPALETTE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    var ihPalette: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var nFirstEntry: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var nPalEntries: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var nReserved: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class tagEMRALPHABLEND(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(108, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var xDest: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var yDest: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var cxDest: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var cyDest: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var dwRop: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var xSrc: LONG
        get() = memberAt<LONGVar>(44).value
        set(value) { memberAt<LONGVar>(44).value = value }
    
    var ySrc: LONG
        get() = memberAt<LONGVar>(48).value
        set(value) { memberAt<LONGVar>(48).value = value }
    
    val xformSrc: XFORM
        get() = memberAt(52)
    
    var crBkColorSrc: COLORREF
        get() = memberAt<COLORREFVar>(76).value
        set(value) { memberAt<COLORREFVar>(76).value = value }
    
    var iUsageSrc: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var offBmiSrc: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var cbBmiSrc: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var offBitsSrc: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    var cbBitsSrc: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var cxSrc: LONG
        get() = memberAt<LONGVar>(100).value
        set(value) { memberAt<LONGVar>(100).value = value }
    
    var cySrc: LONG
        get() = memberAt<LONGVar>(104).value
        set(value) { memberAt<LONGVar>(104).value = value }
    
}

class tagEMRGRADIENTFILL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(52, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var nVer: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var nTri: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var ulMode: ULONG
        get() = memberAt<ULONGVar>(32).value
        set(value) { memberAt<ULONGVar>(32).value = value }
    
    val Ver: CArrayPointer<TRIVERTEX>
        get() = arrayMemberAt(36)
    
}

class tagEMRTRANSPARENTBLT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(108, 4)
    
    val emr: EMR
        get() = memberAt(0)
    
    val rclBounds: RECTL
        get() = memberAt(8)
    
    var xDest: LONG
        get() = memberAt<LONGVar>(24).value
        set(value) { memberAt<LONGVar>(24).value = value }
    
    var yDest: LONG
        get() = memberAt<LONGVar>(28).value
        set(value) { memberAt<LONGVar>(28).value = value }
    
    var cxDest: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    var cyDest: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var dwRop: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var xSrc: LONG
        get() = memberAt<LONGVar>(44).value
        set(value) { memberAt<LONGVar>(44).value = value }
    
    var ySrc: LONG
        get() = memberAt<LONGVar>(48).value
        set(value) { memberAt<LONGVar>(48).value = value }
    
    val xformSrc: XFORM
        get() = memberAt(52)
    
    var crBkColorSrc: COLORREF
        get() = memberAt<COLORREFVar>(76).value
        set(value) { memberAt<COLORREFVar>(76).value = value }
    
    var iUsageSrc: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var offBmiSrc: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var cbBmiSrc: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var offBitsSrc: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    var cbBitsSrc: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var cxSrc: LONG
        get() = memberAt<LONGVar>(100).value
        set(value) { memberAt<LONGVar>(100).value = value }
    
    var cySrc: LONG
        get() = memberAt<LONGVar>(104).value
        set(value) { memberAt<LONGVar>(104).value = value }
    
}

class _POINTFLOAT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var x: FLOAT
        get() = memberAt<FLOATVar>(0).value
        set(value) { memberAt<FLOATVar>(0).value = value }
    
    var y: FLOAT
        get() = memberAt<FLOATVar>(4).value
        set(value) { memberAt<FLOATVar>(4).value = value }
    
}

class _GLYPHMETRICSFLOAT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var gmfBlackBoxX: FLOAT
        get() = memberAt<FLOATVar>(0).value
        set(value) { memberAt<FLOATVar>(0).value = value }
    
    var gmfBlackBoxY: FLOAT
        get() = memberAt<FLOATVar>(4).value
        set(value) { memberAt<FLOATVar>(4).value = value }
    
    val gmfptGlyphOrigin: POINTFLOAT
        get() = memberAt(8)
    
    var gmfCellIncX: FLOAT
        get() = memberAt<FLOATVar>(16).value
        set(value) { memberAt<FLOATVar>(16).value = value }
    
    var gmfCellIncY: FLOAT
        get() = memberAt<FLOATVar>(20).value
        set(value) { memberAt<FLOATVar>(20).value = value }
    
}

class tagLAYERPLANEDESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var nSize: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var nVersion: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var iPixelType: BYTE
        get() = memberAt<BYTEVar>(8).value
        set(value) { memberAt<BYTEVar>(8).value = value }
    
    var cColorBits: BYTE
        get() = memberAt<BYTEVar>(9).value
        set(value) { memberAt<BYTEVar>(9).value = value }
    
    var cRedBits: BYTE
        get() = memberAt<BYTEVar>(10).value
        set(value) { memberAt<BYTEVar>(10).value = value }
    
    var cRedShift: BYTE
        get() = memberAt<BYTEVar>(11).value
        set(value) { memberAt<BYTEVar>(11).value = value }
    
    var cGreenBits: BYTE
        get() = memberAt<BYTEVar>(12).value
        set(value) { memberAt<BYTEVar>(12).value = value }
    
    var cGreenShift: BYTE
        get() = memberAt<BYTEVar>(13).value
        set(value) { memberAt<BYTEVar>(13).value = value }
    
    var cBlueBits: BYTE
        get() = memberAt<BYTEVar>(14).value
        set(value) { memberAt<BYTEVar>(14).value = value }
    
    var cBlueShift: BYTE
        get() = memberAt<BYTEVar>(15).value
        set(value) { memberAt<BYTEVar>(15).value = value }
    
    var cAlphaBits: BYTE
        get() = memberAt<BYTEVar>(16).value
        set(value) { memberAt<BYTEVar>(16).value = value }
    
    var cAlphaShift: BYTE
        get() = memberAt<BYTEVar>(17).value
        set(value) { memberAt<BYTEVar>(17).value = value }
    
    var cAccumBits: BYTE
        get() = memberAt<BYTEVar>(18).value
        set(value) { memberAt<BYTEVar>(18).value = value }
    
    var cAccumRedBits: BYTE
        get() = memberAt<BYTEVar>(19).value
        set(value) { memberAt<BYTEVar>(19).value = value }
    
    var cAccumGreenBits: BYTE
        get() = memberAt<BYTEVar>(20).value
        set(value) { memberAt<BYTEVar>(20).value = value }
    
    var cAccumBlueBits: BYTE
        get() = memberAt<BYTEVar>(21).value
        set(value) { memberAt<BYTEVar>(21).value = value }
    
    var cAccumAlphaBits: BYTE
        get() = memberAt<BYTEVar>(22).value
        set(value) { memberAt<BYTEVar>(22).value = value }
    
    var cDepthBits: BYTE
        get() = memberAt<BYTEVar>(23).value
        set(value) { memberAt<BYTEVar>(23).value = value }
    
    var cStencilBits: BYTE
        get() = memberAt<BYTEVar>(24).value
        set(value) { memberAt<BYTEVar>(24).value = value }
    
    var cAuxBuffers: BYTE
        get() = memberAt<BYTEVar>(25).value
        set(value) { memberAt<BYTEVar>(25).value = value }
    
    var iLayerPlane: BYTE
        get() = memberAt<BYTEVar>(26).value
        set(value) { memberAt<BYTEVar>(26).value = value }
    
    var bReserved: BYTE
        get() = memberAt<BYTEVar>(27).value
        set(value) { memberAt<BYTEVar>(27).value = value }
    
    var crTransparent: COLORREF
        get() = memberAt<COLORREFVar>(28).value
        set(value) { memberAt<COLORREFVar>(28).value = value }
    
}

class _WGLSWAP(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var hdc: HDC?
        get() = memberAt<HDCVar>(0).value
        set(value) { memberAt<HDCVar>(0).value = value }
    
    var uiFlags: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
}

class tagCBT_CREATEWNDA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var lpcs: CPointer<tagCREATESTRUCTA>?
        get() = memberAt<CPointerVar<tagCREATESTRUCTA>>(0).value
        set(value) { memberAt<CPointerVar<tagCREATESTRUCTA>>(0).value = value }
    
    var hwndInsertAfter: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
}

class tagCREATESTRUCTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var lpCreateParams: LPVOID?
        get() = memberAt<LPVOIDVar>(0).value
        set(value) { memberAt<LPVOIDVar>(0).value = value }
    
    var hInstance: HINSTANCE?
        get() = memberAt<HINSTANCEVar>(8).value
        set(value) { memberAt<HINSTANCEVar>(8).value = value }
    
    var hMenu: HMENU?
        get() = memberAt<HMENUVar>(16).value
        set(value) { memberAt<HMENUVar>(16).value = value }
    
    var hwndParent: HWND?
        get() = memberAt<HWNDVar>(24).value
        set(value) { memberAt<HWNDVar>(24).value = value }
    
    var cy: Int
        get() = memberAt<IntVar>(32).value
        set(value) { memberAt<IntVar>(32).value = value }
    
    var cx: Int
        get() = memberAt<IntVar>(36).value
        set(value) { memberAt<IntVar>(36).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(40).value
        set(value) { memberAt<IntVar>(40).value = value }
    
    var x: Int
        get() = memberAt<IntVar>(44).value
        set(value) { memberAt<IntVar>(44).value = value }
    
    var style: LONG
        get() = memberAt<LONGVar>(48).value
        set(value) { memberAt<LONGVar>(48).value = value }
    
    var lpszName: LPCSTR?
        get() = memberAt<LPCSTRVar>(56).value
        set(value) { memberAt<LPCSTRVar>(56).value = value }
    
    var lpszClass: LPCSTR?
        get() = memberAt<LPCSTRVar>(64).value
        set(value) { memberAt<LPCSTRVar>(64).value = value }
    
    var dwExStyle: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
}

class tagCBT_CREATEWNDW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var lpcs: CPointer<tagCREATESTRUCTW>?
        get() = memberAt<CPointerVar<tagCREATESTRUCTW>>(0).value
        set(value) { memberAt<CPointerVar<tagCREATESTRUCTW>>(0).value = value }
    
    var hwndInsertAfter: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
}

class tagCREATESTRUCTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var lpCreateParams: LPVOID?
        get() = memberAt<LPVOIDVar>(0).value
        set(value) { memberAt<LPVOIDVar>(0).value = value }
    
    var hInstance: HINSTANCE?
        get() = memberAt<HINSTANCEVar>(8).value
        set(value) { memberAt<HINSTANCEVar>(8).value = value }
    
    var hMenu: HMENU?
        get() = memberAt<HMENUVar>(16).value
        set(value) { memberAt<HMENUVar>(16).value = value }
    
    var hwndParent: HWND?
        get() = memberAt<HWNDVar>(24).value
        set(value) { memberAt<HWNDVar>(24).value = value }
    
    var cy: Int
        get() = memberAt<IntVar>(32).value
        set(value) { memberAt<IntVar>(32).value = value }
    
    var cx: Int
        get() = memberAt<IntVar>(36).value
        set(value) { memberAt<IntVar>(36).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(40).value
        set(value) { memberAt<IntVar>(40).value = value }
    
    var x: Int
        get() = memberAt<IntVar>(44).value
        set(value) { memberAt<IntVar>(44).value = value }
    
    var style: LONG
        get() = memberAt<LONGVar>(48).value
        set(value) { memberAt<LONGVar>(48).value = value }
    
    var lpszName: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(56).value
        set(value) { memberAt<LPCWSTRVar>(56).value = value }
    
    var lpszClass: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(64).value
        set(value) { memberAt<LPCWSTRVar>(64).value = value }
    
    var dwExStyle: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
}

class tagCBTACTIVATESTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var fMouse: WINBOOL
        get() = memberAt<WINBOOLVar>(0).value
        set(value) { memberAt<WINBOOLVar>(0).value = value }
    
    var hWndActive: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
}

class tagWTSSESSION_NOTIFICATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwSessionId: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class SHELLHOOKINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var hwnd: HWND?
        get() = memberAt<HWNDVar>(0).value
        set(value) { memberAt<HWNDVar>(0).value = value }
    
    val rc: RECT
        get() = memberAt(8)
    
}

class tagEVENTMSG(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var message: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var paramL: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var paramH: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var time: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var hwnd: HWND?
        get() = memberAt<HWNDVar>(16).value
        set(value) { memberAt<HWNDVar>(16).value = value }
    
}

class tagCWPSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var lParam: LPARAM
        get() = memberAt<LPARAMVar>(0).value
        set(value) { memberAt<LPARAMVar>(0).value = value }
    
    var wParam: WPARAM
        get() = memberAt<WPARAMVar>(8).value
        set(value) { memberAt<WPARAMVar>(8).value = value }
    
    var message: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
    var hwnd: HWND?
        get() = memberAt<HWNDVar>(24).value
        set(value) { memberAt<HWNDVar>(24).value = value }
    
}

class tagCWPRETSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var lResult: LRESULT
        get() = memberAt<LRESULTVar>(0).value
        set(value) { memberAt<LRESULTVar>(0).value = value }
    
    var lParam: LPARAM
        get() = memberAt<LPARAMVar>(8).value
        set(value) { memberAt<LPARAMVar>(8).value = value }
    
    var wParam: WPARAM
        get() = memberAt<WPARAMVar>(16).value
        set(value) { memberAt<WPARAMVar>(16).value = value }
    
    var message: UINT
        get() = memberAt<UINTVar>(24).value
        set(value) { memberAt<UINTVar>(24).value = value }
    
    var hwnd: HWND?
        get() = memberAt<HWNDVar>(32).value
        set(value) { memberAt<HWNDVar>(32).value = value }
    
}

class tagKBDLLHOOKSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var vkCode: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var scanCode: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var time: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwExtraInfo: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(16).value
        set(value) { memberAt<ULONG_PTRVar>(16).value = value }
    
}

class tagMSLLHOOKSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val pt: POINT
        get() = memberAt(0)
    
    var mouseData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var flags: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var time: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwExtraInfo: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(24).value
        set(value) { memberAt<ULONG_PTRVar>(24).value = value }
    
}

class tagDEBUGHOOKINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var idThread: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var idThreadInstaller: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var lParam: LPARAM
        get() = memberAt<LPARAMVar>(8).value
        set(value) { memberAt<LPARAMVar>(8).value = value }
    
    var wParam: WPARAM
        get() = memberAt<WPARAMVar>(16).value
        set(value) { memberAt<WPARAMVar>(16).value = value }
    
    var code: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
}

class tagMOUSEHOOKSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val pt: POINT
        get() = memberAt(0)
    
    var hwnd: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var wHitTestCode: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
    var dwExtraInfo: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(24).value
        set(value) { memberAt<ULONG_PTRVar>(24).value = value }
    
}

class tagMOUSEHOOKSTRUCTEX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    val __unnamed: MOUSEHOOKSTRUCT
        get() = memberAt(0)
    
    var mouseData: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class tagHARDWAREHOOKSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var hwnd: HWND?
        get() = memberAt<HWNDVar>(0).value
        set(value) { memberAt<HWNDVar>(0).value = value }
    
    var message: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var wParam: WPARAM
        get() = memberAt<WPARAMVar>(16).value
        set(value) { memberAt<WPARAMVar>(16).value = value }
    
    var lParam: LPARAM
        get() = memberAt<LPARAMVar>(24).value
        set(value) { memberAt<LPARAMVar>(24).value = value }
    
}

class HKL__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class tagMOUSEMOVEPOINT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var x: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var time: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwExtraInfo: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(16).value
        set(value) { memberAt<ULONG_PTRVar>(16).value = value }
    
}

class HWINSTA__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class tagUSEROBJECTFLAGS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var fInherit: WINBOOL
        get() = memberAt<WINBOOLVar>(0).value
        set(value) { memberAt<WINBOOLVar>(0).value = value }
    
    var fReserved: WINBOOL
        get() = memberAt<WINBOOLVar>(4).value
        set(value) { memberAt<WINBOOLVar>(4).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class tagWNDCLASSEXA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var style: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var lpfnWndProc: WNDPROC?
        get() = memberAt<WNDPROCVar>(8).value
        set(value) { memberAt<WNDPROCVar>(8).value = value }
    
    var cbClsExtra: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var cbWndExtra: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var hInstance: HINSTANCE?
        get() = memberAt<HINSTANCEVar>(24).value
        set(value) { memberAt<HINSTANCEVar>(24).value = value }
    
    var hIcon: HICON?
        get() = memberAt<HICONVar>(32).value
        set(value) { memberAt<HICONVar>(32).value = value }
    
    var hCursor: HCURSOR?
        get() = memberAt<HCURSORVar>(40).value
        set(value) { memberAt<HCURSORVar>(40).value = value }
    
    var hbrBackground: HBRUSH?
        get() = memberAt<HBRUSHVar>(48).value
        set(value) { memberAt<HBRUSHVar>(48).value = value }
    
    var lpszMenuName: LPCSTR?
        get() = memberAt<LPCSTRVar>(56).value
        set(value) { memberAt<LPCSTRVar>(56).value = value }
    
    var lpszClassName: LPCSTR?
        get() = memberAt<LPCSTRVar>(64).value
        set(value) { memberAt<LPCSTRVar>(64).value = value }
    
    var hIconSm: HICON?
        get() = memberAt<HICONVar>(72).value
        set(value) { memberAt<HICONVar>(72).value = value }
    
}

class tagWNDCLASSEXW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var style: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var lpfnWndProc: WNDPROC?
        get() = memberAt<WNDPROCVar>(8).value
        set(value) { memberAt<WNDPROCVar>(8).value = value }
    
    var cbClsExtra: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var cbWndExtra: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var hInstance: HINSTANCE?
        get() = memberAt<HINSTANCEVar>(24).value
        set(value) { memberAt<HINSTANCEVar>(24).value = value }
    
    var hIcon: HICON?
        get() = memberAt<HICONVar>(32).value
        set(value) { memberAt<HICONVar>(32).value = value }
    
    var hCursor: HCURSOR?
        get() = memberAt<HCURSORVar>(40).value
        set(value) { memberAt<HCURSORVar>(40).value = value }
    
    var hbrBackground: HBRUSH?
        get() = memberAt<HBRUSHVar>(48).value
        set(value) { memberAt<HBRUSHVar>(48).value = value }
    
    var lpszMenuName: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(56).value
        set(value) { memberAt<LPCWSTRVar>(56).value = value }
    
    var lpszClassName: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(64).value
        set(value) { memberAt<LPCWSTRVar>(64).value = value }
    
    var hIconSm: HICON?
        get() = memberAt<HICONVar>(72).value
        set(value) { memberAt<HICONVar>(72).value = value }
    
}

class tagWNDCLASSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    var style: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var lpfnWndProc: WNDPROC?
        get() = memberAt<WNDPROCVar>(8).value
        set(value) { memberAt<WNDPROCVar>(8).value = value }
    
    var cbClsExtra: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var cbWndExtra: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var hInstance: HINSTANCE?
        get() = memberAt<HINSTANCEVar>(24).value
        set(value) { memberAt<HINSTANCEVar>(24).value = value }
    
    var hIcon: HICON?
        get() = memberAt<HICONVar>(32).value
        set(value) { memberAt<HICONVar>(32).value = value }
    
    var hCursor: HCURSOR?
        get() = memberAt<HCURSORVar>(40).value
        set(value) { memberAt<HCURSORVar>(40).value = value }
    
    var hbrBackground: HBRUSH?
        get() = memberAt<HBRUSHVar>(48).value
        set(value) { memberAt<HBRUSHVar>(48).value = value }
    
    var lpszMenuName: LPCSTR?
        get() = memberAt<LPCSTRVar>(56).value
        set(value) { memberAt<LPCSTRVar>(56).value = value }
    
    var lpszClassName: LPCSTR?
        get() = memberAt<LPCSTRVar>(64).value
        set(value) { memberAt<LPCSTRVar>(64).value = value }
    
}

class tagWNDCLASSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    var style: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var lpfnWndProc: WNDPROC?
        get() = memberAt<WNDPROCVar>(8).value
        set(value) { memberAt<WNDPROCVar>(8).value = value }
    
    var cbClsExtra: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var cbWndExtra: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var hInstance: HINSTANCE?
        get() = memberAt<HINSTANCEVar>(24).value
        set(value) { memberAt<HINSTANCEVar>(24).value = value }
    
    var hIcon: HICON?
        get() = memberAt<HICONVar>(32).value
        set(value) { memberAt<HICONVar>(32).value = value }
    
    var hCursor: HCURSOR?
        get() = memberAt<HCURSORVar>(40).value
        set(value) { memberAt<HCURSORVar>(40).value = value }
    
    var hbrBackground: HBRUSH?
        get() = memberAt<HBRUSHVar>(48).value
        set(value) { memberAt<HBRUSHVar>(48).value = value }
    
    var lpszMenuName: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(56).value
        set(value) { memberAt<LPCWSTRVar>(56).value = value }
    
    var lpszClassName: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(64).value
        set(value) { memberAt<LPCWSTRVar>(64).value = value }
    
}

class tagMSG(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var hwnd: HWND?
        get() = memberAt<HWNDVar>(0).value
        set(value) { memberAt<HWNDVar>(0).value = value }
    
    var message: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var wParam: WPARAM
        get() = memberAt<WPARAMVar>(16).value
        set(value) { memberAt<WPARAMVar>(16).value = value }
    
    var lParam: LPARAM
        get() = memberAt<LPARAMVar>(24).value
        set(value) { memberAt<LPARAMVar>(24).value = value }
    
    var time: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    val pt: POINT
        get() = memberAt(36)
    
}

class tagMINMAXINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    val ptReserved: POINT
        get() = memberAt(0)
    
    val ptMaxSize: POINT
        get() = memberAt(8)
    
    val ptMaxPosition: POINT
        get() = memberAt(16)
    
    val ptMinTrackSize: POINT
        get() = memberAt(24)
    
    val ptMaxTrackSize: POINT
        get() = memberAt(32)
    
}

class tagCOPYDATASTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwData: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(0).value
        set(value) { memberAt<ULONG_PTRVar>(0).value = value }
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var lpData: PVOID?
        get() = memberAt<PVOIDVar>(16).value
        set(value) { memberAt<PVOIDVar>(16).value = value }
    
}

class tagMDINEXTMENU(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var hmenuIn: HMENU?
        get() = memberAt<HMENUVar>(0).value
        set(value) { memberAt<HMENUVar>(0).value = value }
    
    var hmenuNext: HMENU?
        get() = memberAt<HMENUVar>(8).value
        set(value) { memberAt<HMENUVar>(8).value = value }
    
    var hwndNext: HWND?
        get() = memberAt<HWNDVar>(16).value
        set(value) { memberAt<HWNDVar>(16).value = value }
    
}

class POWERBROADCAST_SETTING(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val PowerSetting: GUID
        get() = memberAt(0)
    
    var DataLength: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val Data: CArrayPointer<UCHARVar>
        get() = arrayMemberAt(20)
    
}

class tagWINDOWPOS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var hwnd: HWND?
        get() = memberAt<HWNDVar>(0).value
        set(value) { memberAt<HWNDVar>(0).value = value }
    
    var hwndInsertAfter: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var x: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var cx: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var cy: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
    var flags: UINT
        get() = memberAt<UINTVar>(32).value
        set(value) { memberAt<UINTVar>(32).value = value }
    
}

class tagNCCALCSIZE_PARAMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    val rgrc: CArrayPointer<RECT>
        get() = arrayMemberAt(0)
    
    var lppos: PWINDOWPOS?
        get() = memberAt<PWINDOWPOSVar>(48).value
        set(value) { memberAt<PWINDOWPOSVar>(48).value = value }
    
}

class tagTRACKMOUSEEVENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var hwndTrack: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var dwHoverTime: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class tagACCEL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(6, 2)
    
    var fVirt: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var key: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var cmd: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
}

class tagPAINTSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    var hdc: HDC?
        get() = memberAt<HDCVar>(0).value
        set(value) { memberAt<HDCVar>(0).value = value }
    
    var fErase: WINBOOL
        get() = memberAt<WINBOOLVar>(8).value
        set(value) { memberAt<WINBOOLVar>(8).value = value }
    
    val rcPaint: RECT
        get() = memberAt(12)
    
    var fRestore: WINBOOL
        get() = memberAt<WINBOOLVar>(28).value
        set(value) { memberAt<WINBOOLVar>(28).value = value }
    
    var fIncUpdate: WINBOOL
        get() = memberAt<WINBOOLVar>(32).value
        set(value) { memberAt<WINBOOLVar>(32).value = value }
    
    val rgbReserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(36)
    
}

class tagWINDOWPLACEMENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(44, 4)
    
    var length: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var flags: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var showCmd: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    val ptMinPosition: POINT
        get() = memberAt(12)
    
    val ptMaxPosition: POINT
        get() = memberAt(20)
    
    val rcNormalPosition: RECT
        get() = memberAt(28)
    
}

class tagNMHDR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var hwndFrom: HWND?
        get() = memberAt<HWNDVar>(0).value
        set(value) { memberAt<HWNDVar>(0).value = value }
    
    var idFrom: UINT_PTR
        get() = memberAt<UINT_PTRVar>(8).value
        set(value) { memberAt<UINT_PTRVar>(8).value = value }
    
    var code: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
}

class tagSTYLESTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var styleOld: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var styleNew: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class tagMEASUREITEMSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var CtlType: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var CtlID: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var itemID: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var itemWidth: UINT
        get() = memberAt<UINTVar>(12).value
        set(value) { memberAt<UINTVar>(12).value = value }
    
    var itemHeight: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
    var itemData: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(24).value
        set(value) { memberAt<ULONG_PTRVar>(24).value = value }
    
}

class tagDRAWITEMSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var CtlType: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var CtlID: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var itemID: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var itemAction: UINT
        get() = memberAt<UINTVar>(12).value
        set(value) { memberAt<UINTVar>(12).value = value }
    
    var itemState: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
    var hwndItem: HWND?
        get() = memberAt<HWNDVar>(24).value
        set(value) { memberAt<HWNDVar>(24).value = value }
    
    var hDC: HDC?
        get() = memberAt<HDCVar>(32).value
        set(value) { memberAt<HDCVar>(32).value = value }
    
    val rcItem: RECT
        get() = memberAt(40)
    
    var itemData: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(56).value
        set(value) { memberAt<ULONG_PTRVar>(56).value = value }
    
}

class tagDELETEITEMSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var CtlType: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var CtlID: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var itemID: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var hwndItem: HWND?
        get() = memberAt<HWNDVar>(16).value
        set(value) { memberAt<HWNDVar>(16).value = value }
    
    var itemData: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(24).value
        set(value) { memberAt<ULONG_PTRVar>(24).value = value }
    
}

class tagCOMPAREITEMSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var CtlType: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var CtlID: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var hwndItem: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var itemID1: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
    var itemData1: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(24).value
        set(value) { memberAt<ULONG_PTRVar>(24).value = value }
    
    var itemID2: UINT
        get() = memberAt<UINTVar>(32).value
        set(value) { memberAt<UINTVar>(32).value = value }
    
    var itemData2: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(40).value
        set(value) { memberAt<ULONG_PTRVar>(40).value = value }
    
    var dwLocaleId: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
}

class BSMINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var hdesk: HDESK?
        get() = memberAt<HDESKVar>(8).value
        set(value) { memberAt<HDESKVar>(8).value = value }
    
    var hwnd: HWND?
        get() = memberAt<HWNDVar>(16).value
        set(value) { memberAt<HWNDVar>(16).value = value }
    
    val luid: LUID
        get() = memberAt(24)
    
}

class tagUPDATELAYEREDWINDOWINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hdcDst: HDC?
        get() = memberAt<HDCVar>(8).value
        set(value) { memberAt<HDCVar>(8).value = value }
    
    var pptDst: CPointer<POINT>?
        get() = memberAt<CPointerVar<POINT>>(16).value
        set(value) { memberAt<CPointerVar<POINT>>(16).value = value }
    
    var psize: CPointer<SIZE>?
        get() = memberAt<CPointerVar<SIZE>>(24).value
        set(value) { memberAt<CPointerVar<SIZE>>(24).value = value }
    
    var hdcSrc: HDC?
        get() = memberAt<HDCVar>(32).value
        set(value) { memberAt<HDCVar>(32).value = value }
    
    var pptSrc: CPointer<POINT>?
        get() = memberAt<CPointerVar<POINT>>(40).value
        set(value) { memberAt<CPointerVar<POINT>>(40).value = value }
    
    var crKey: COLORREF
        get() = memberAt<COLORREFVar>(48).value
        set(value) { memberAt<COLORREFVar>(48).value = value }
    
    var pblend: CPointer<BLENDFUNCTION>?
        get() = memberAt<CPointerVar<BLENDFUNCTION>>(56).value
        set(value) { memberAt<CPointerVar<BLENDFUNCTION>>(56).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var prcDirty: CPointer<RECT>?
        get() = memberAt<CPointerVar<RECT>>(72).value
        set(value) { memberAt<CPointerVar<RECT>>(72).value = value }
    
}

class FLASHWINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var hwnd: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var uCount: UINT
        get() = memberAt<UINTVar>(20).value
        set(value) { memberAt<UINTVar>(20).value = value }
    
    var dwTimeout: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class DLGTEMPLATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(18, 2)
    
    var style: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwExtendedStyle: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var cdit: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var x: Short
        get() = memberAt<ShortVar>(10).value
        set(value) { memberAt<ShortVar>(10).value = value }
    
    var y: Short
        get() = memberAt<ShortVar>(12).value
        set(value) { memberAt<ShortVar>(12).value = value }
    
    var cx: Short
        get() = memberAt<ShortVar>(14).value
        set(value) { memberAt<ShortVar>(14).value = value }
    
    var cy: Short
        get() = memberAt<ShortVar>(16).value
        set(value) { memberAt<ShortVar>(16).value = value }
    
}

class DLGITEMTEMPLATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(18, 2)
    
    var style: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwExtendedStyle: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var x: Short
        get() = memberAt<ShortVar>(8).value
        set(value) { memberAt<ShortVar>(8).value = value }
    
    var y: Short
        get() = memberAt<ShortVar>(10).value
        set(value) { memberAt<ShortVar>(10).value = value }
    
    var cx: Short
        get() = memberAt<ShortVar>(12).value
        set(value) { memberAt<ShortVar>(12).value = value }
    
    var cy: Short
        get() = memberAt<ShortVar>(14).value
        set(value) { memberAt<ShortVar>(14).value = value }
    
    var id: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
}

class tagMOUSEINPUT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var dx: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var dy: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
    var mouseData: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var time: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwExtraInfo: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(24).value
        set(value) { memberAt<ULONG_PTRVar>(24).value = value }
    
}

class tagKEYBDINPUT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var wVk: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var wScan: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var time: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwExtraInfo: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(16).value
        set(value) { memberAt<ULONG_PTRVar>(16).value = value }
    
}

class tagHARDWAREINPUT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var uMsg: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var wParamL: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var wParamH: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
}

class tagINPUT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var type: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct86(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val mi: MOUSEINPUT
        get() = memberAt(0)
    
    val ki: KEYBDINPUT
        get() = memberAt(0)
    
    val hi: HARDWAREINPUT
        get() = memberAt(0)
    
}

class tagLASTINPUTINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwTime: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class tagTPMPARAMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    val rcExclude: RECT
        get() = memberAt(4)
    
}

class tagMENUINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var fMask: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwStyle: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var cyMax: UINT
        get() = memberAt<UINTVar>(12).value
        set(value) { memberAt<UINTVar>(12).value = value }
    
    var hbrBack: HBRUSH?
        get() = memberAt<HBRUSHVar>(16).value
        set(value) { memberAt<HBRUSHVar>(16).value = value }
    
    var dwContextHelpID: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var dwMenuData: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(32).value
        set(value) { memberAt<ULONG_PTRVar>(32).value = value }
    
}

class tagMENUGETOBJECTINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var uPos: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var hmenu: HMENU?
        get() = memberAt<HMENUVar>(8).value
        set(value) { memberAt<HMENUVar>(8).value = value }
    
    var riid: PVOID?
        get() = memberAt<PVOIDVar>(16).value
        set(value) { memberAt<PVOIDVar>(16).value = value }
    
    var pvObj: PVOID?
        get() = memberAt<PVOIDVar>(24).value
        set(value) { memberAt<PVOIDVar>(24).value = value }
    
}

class tagMENUITEMINFOA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var fMask: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var fType: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var fState: UINT
        get() = memberAt<UINTVar>(12).value
        set(value) { memberAt<UINTVar>(12).value = value }
    
    var wID: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
    var hSubMenu: HMENU?
        get() = memberAt<HMENUVar>(24).value
        set(value) { memberAt<HMENUVar>(24).value = value }
    
    var hbmpChecked: HBITMAP?
        get() = memberAt<HBITMAPVar>(32).value
        set(value) { memberAt<HBITMAPVar>(32).value = value }
    
    var hbmpUnchecked: HBITMAP?
        get() = memberAt<HBITMAPVar>(40).value
        set(value) { memberAt<HBITMAPVar>(40).value = value }
    
    var dwItemData: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(48).value
        set(value) { memberAt<ULONG_PTRVar>(48).value = value }
    
    var dwTypeData: LPSTR?
        get() = memberAt<LPSTRVar>(56).value
        set(value) { memberAt<LPSTRVar>(56).value = value }
    
    var cch: UINT
        get() = memberAt<UINTVar>(64).value
        set(value) { memberAt<UINTVar>(64).value = value }
    
    var hbmpItem: HBITMAP?
        get() = memberAt<HBITMAPVar>(72).value
        set(value) { memberAt<HBITMAPVar>(72).value = value }
    
}

class tagMENUITEMINFOW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var fMask: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var fType: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var fState: UINT
        get() = memberAt<UINTVar>(12).value
        set(value) { memberAt<UINTVar>(12).value = value }
    
    var wID: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
    var hSubMenu: HMENU?
        get() = memberAt<HMENUVar>(24).value
        set(value) { memberAt<HMENUVar>(24).value = value }
    
    var hbmpChecked: HBITMAP?
        get() = memberAt<HBITMAPVar>(32).value
        set(value) { memberAt<HBITMAPVar>(32).value = value }
    
    var hbmpUnchecked: HBITMAP?
        get() = memberAt<HBITMAPVar>(40).value
        set(value) { memberAt<HBITMAPVar>(40).value = value }
    
    var dwItemData: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(48).value
        set(value) { memberAt<ULONG_PTRVar>(48).value = value }
    
    var dwTypeData: LPWSTR?
        get() = memberAt<LPWSTRVar>(56).value
        set(value) { memberAt<LPWSTRVar>(56).value = value }
    
    var cch: UINT
        get() = memberAt<UINTVar>(64).value
        set(value) { memberAt<UINTVar>(64).value = value }
    
    var hbmpItem: HBITMAP?
        get() = memberAt<HBITMAPVar>(72).value
        set(value) { memberAt<HBITMAPVar>(72).value = value }
    
}

class tagDROPSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var hwndSource: HWND?
        get() = memberAt<HWNDVar>(0).value
        set(value) { memberAt<HWNDVar>(0).value = value }
    
    var hwndSink: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var wFmt: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwData: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(24).value
        set(value) { memberAt<ULONG_PTRVar>(24).value = value }
    
    val ptDrop: POINT
        get() = memberAt(32)
    
    var dwControlData: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
}

class tagDRAWTEXTPARAMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var iTabLength: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var iLeftMargin: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var iRightMargin: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var uiLengthDrawn: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
}

class tagHELPINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var iContextType: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var iCtrlId: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var hItemHandle: HANDLE?
        get() = memberAt<HANDLEVar>(16).value
        set(value) { memberAt<HANDLEVar>(16).value = value }
    
    var dwContextId: DWORD_PTR
        get() = memberAt<DWORD_PTRVar>(24).value
        set(value) { memberAt<DWORD_PTRVar>(24).value = value }
    
    val MousePos: POINT
        get() = memberAt(32)
    
}

class tagMSGBOXPARAMSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var hwndOwner: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var hInstance: HINSTANCE?
        get() = memberAt<HINSTANCEVar>(16).value
        set(value) { memberAt<HINSTANCEVar>(16).value = value }
    
    var lpszText: LPCSTR?
        get() = memberAt<LPCSTRVar>(24).value
        set(value) { memberAt<LPCSTRVar>(24).value = value }
    
    var lpszCaption: LPCSTR?
        get() = memberAt<LPCSTRVar>(32).value
        set(value) { memberAt<LPCSTRVar>(32).value = value }
    
    var dwStyle: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var lpszIcon: LPCSTR?
        get() = memberAt<LPCSTRVar>(48).value
        set(value) { memberAt<LPCSTRVar>(48).value = value }
    
    var dwContextHelpId: DWORD_PTR
        get() = memberAt<DWORD_PTRVar>(56).value
        set(value) { memberAt<DWORD_PTRVar>(56).value = value }
    
    var lpfnMsgBoxCallback: MSGBOXCALLBACK?
        get() = memberAt<MSGBOXCALLBACKVar>(64).value
        set(value) { memberAt<MSGBOXCALLBACKVar>(64).value = value }
    
    var dwLanguageId: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
}

class tagMSGBOXPARAMSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var hwndOwner: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var hInstance: HINSTANCE?
        get() = memberAt<HINSTANCEVar>(16).value
        set(value) { memberAt<HINSTANCEVar>(16).value = value }
    
    var lpszText: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(24).value
        set(value) { memberAt<LPCWSTRVar>(24).value = value }
    
    var lpszCaption: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(32).value
        set(value) { memberAt<LPCWSTRVar>(32).value = value }
    
    var dwStyle: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var lpszIcon: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(48).value
        set(value) { memberAt<LPCWSTRVar>(48).value = value }
    
    var dwContextHelpId: DWORD_PTR
        get() = memberAt<DWORD_PTRVar>(56).value
        set(value) { memberAt<DWORD_PTRVar>(56).value = value }
    
    var lpfnMsgBoxCallback: MSGBOXCALLBACK?
        get() = memberAt<MSGBOXCALLBACKVar>(64).value
        set(value) { memberAt<MSGBOXCALLBACKVar>(64).value = value }
    
    var dwLanguageId: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
}

class MENUITEMTEMPLATEHEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var versionNumber: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var offset: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
}

class MENUITEMTEMPLATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(6, 2)
    
    var mtOption: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var mtID: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    val mtString: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(4)
    
}

class _ICONINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var fIcon: WINBOOL
        get() = memberAt<WINBOOLVar>(0).value
        set(value) { memberAt<WINBOOLVar>(0).value = value }
    
    var xHotspot: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var yHotspot: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var hbmMask: HBITMAP?
        get() = memberAt<HBITMAPVar>(16).value
        set(value) { memberAt<HBITMAPVar>(16).value = value }
    
    var hbmColor: HBITMAP?
        get() = memberAt<HBITMAPVar>(24).value
        set(value) { memberAt<HBITMAPVar>(24).value = value }
    
}

class tagCURSORSHAPE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var xHotSpot: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var yHotSpot: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var cx: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var cy: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var cbWidth: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var Planes: BYTE
        get() = memberAt<BYTEVar>(20).value
        set(value) { memberAt<BYTEVar>(20).value = value }
    
    var BitsPixel: BYTE
        get() = memberAt<BYTEVar>(21).value
        set(value) { memberAt<BYTEVar>(21).value = value }
    
}

class tagSCROLLINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var fMask: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var nMin: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var nMax: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var nPage: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
    var nPos: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var nTrackPos: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
}

class tagMDICREATESTRUCTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var szClass: LPCSTR?
        get() = memberAt<LPCSTRVar>(0).value
        set(value) { memberAt<LPCSTRVar>(0).value = value }
    
    var szTitle: LPCSTR?
        get() = memberAt<LPCSTRVar>(8).value
        set(value) { memberAt<LPCSTRVar>(8).value = value }
    
    var hOwner: HANDLE?
        get() = memberAt<HANDLEVar>(16).value
        set(value) { memberAt<HANDLEVar>(16).value = value }
    
    var x: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
    var cx: Int
        get() = memberAt<IntVar>(32).value
        set(value) { memberAt<IntVar>(32).value = value }
    
    var cy: Int
        get() = memberAt<IntVar>(36).value
        set(value) { memberAt<IntVar>(36).value = value }
    
    var style: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var lParam: LPARAM
        get() = memberAt<LPARAMVar>(48).value
        set(value) { memberAt<LPARAMVar>(48).value = value }
    
}

class tagMDICREATESTRUCTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var szClass: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(0).value
        set(value) { memberAt<LPCWSTRVar>(0).value = value }
    
    var szTitle: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(8).value
        set(value) { memberAt<LPCWSTRVar>(8).value = value }
    
    var hOwner: HANDLE?
        get() = memberAt<HANDLEVar>(16).value
        set(value) { memberAt<HANDLEVar>(16).value = value }
    
    var x: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
    var cx: Int
        get() = memberAt<IntVar>(32).value
        set(value) { memberAt<IntVar>(32).value = value }
    
    var cy: Int
        get() = memberAt<IntVar>(36).value
        set(value) { memberAt<IntVar>(36).value = value }
    
    var style: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var lParam: LPARAM
        get() = memberAt<LPARAMVar>(48).value
        set(value) { memberAt<LPARAMVar>(48).value = value }
    
}

class tagCLIENTCREATESTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var hWindowMenu: HANDLE?
        get() = memberAt<HANDLEVar>(0).value
        set(value) { memberAt<HANDLEVar>(0).value = value }
    
    var idFirstChild: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
}

class tagMULTIKEYHELPA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var mkSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var mkKeylist: CHAR
        get() = memberAt<CHARVar>(4).value
        set(value) { memberAt<CHARVar>(4).value = value }
    
    val szKeyphrase: CArrayPointer<CHARVar>
        get() = arrayMemberAt(5)
    
}

class tagMULTIKEYHELPW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var mkSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var mkKeylist: WCHAR
        get() = memberAt<WCHARVar>(4).value
        set(value) { memberAt<WCHARVar>(4).value = value }
    
    val szKeyphrase: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(6)
    
}

class tagHELPWININFOA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var wStructSize: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var x: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var dx: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var dy: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var wMax: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    val rgchMember: CArrayPointer<CHARVar>
        get() = arrayMemberAt(24)
    
}

class tagHELPWININFOW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var wStructSize: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var x: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var y: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var dx: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var dy: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var wMax: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    val rgchMember: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(24)
    
}

class tagNONCLIENTMETRICSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(340, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var iBorderWidth: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var iScrollWidth: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var iScrollHeight: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var iCaptionWidth: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var iCaptionHeight: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    val lfCaptionFont: LOGFONTA
        get() = memberAt(24)
    
    var iSmCaptionWidth: Int
        get() = memberAt<IntVar>(84).value
        set(value) { memberAt<IntVar>(84).value = value }
    
    var iSmCaptionHeight: Int
        get() = memberAt<IntVar>(88).value
        set(value) { memberAt<IntVar>(88).value = value }
    
    val lfSmCaptionFont: LOGFONTA
        get() = memberAt(92)
    
    var iMenuWidth: Int
        get() = memberAt<IntVar>(152).value
        set(value) { memberAt<IntVar>(152).value = value }
    
    var iMenuHeight: Int
        get() = memberAt<IntVar>(156).value
        set(value) { memberAt<IntVar>(156).value = value }
    
    val lfMenuFont: LOGFONTA
        get() = memberAt(160)
    
    val lfStatusFont: LOGFONTA
        get() = memberAt(220)
    
    val lfMessageFont: LOGFONTA
        get() = memberAt(280)
    
}

class tagNONCLIENTMETRICSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(500, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var iBorderWidth: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var iScrollWidth: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var iScrollHeight: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var iCaptionWidth: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var iCaptionHeight: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    val lfCaptionFont: LOGFONTW
        get() = memberAt(24)
    
    var iSmCaptionWidth: Int
        get() = memberAt<IntVar>(116).value
        set(value) { memberAt<IntVar>(116).value = value }
    
    var iSmCaptionHeight: Int
        get() = memberAt<IntVar>(120).value
        set(value) { memberAt<IntVar>(120).value = value }
    
    val lfSmCaptionFont: LOGFONTW
        get() = memberAt(124)
    
    var iMenuWidth: Int
        get() = memberAt<IntVar>(216).value
        set(value) { memberAt<IntVar>(216).value = value }
    
    var iMenuHeight: Int
        get() = memberAt<IntVar>(220).value
        set(value) { memberAt<IntVar>(220).value = value }
    
    val lfMenuFont: LOGFONTW
        get() = memberAt(224)
    
    val lfStatusFont: LOGFONTW
        get() = memberAt(316)
    
    val lfMessageFont: LOGFONTW
        get() = memberAt(408)
    
}

class tagMINIMIZEDMETRICS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var iWidth: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var iHorzGap: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var iVertGap: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var iArrange: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
}

class tagICONMETRICSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(76, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var iHorzSpacing: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var iVertSpacing: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var iTitleWrap: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    val lfFont: LOGFONTA
        get() = memberAt(16)
    
}

class tagICONMETRICSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(108, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var iHorzSpacing: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var iVertSpacing: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var iTitleWrap: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    val lfFont: LOGFONTW
        get() = memberAt(16)
    
}

class tagANIMATIONINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var iMinAnimate: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
}

class tagSERIALKEYSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var lpszActivePort: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var lpszPort: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var iBaudRate: UINT
        get() = memberAt<UINTVar>(24).value
        set(value) { memberAt<UINTVar>(24).value = value }
    
    var iPortState: UINT
        get() = memberAt<UINTVar>(28).value
        set(value) { memberAt<UINTVar>(28).value = value }
    
    var iActive: UINT
        get() = memberAt<UINTVar>(32).value
        set(value) { memberAt<UINTVar>(32).value = value }
    
}

class tagSERIALKEYSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var lpszActivePort: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var lpszPort: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var iBaudRate: UINT
        get() = memberAt<UINTVar>(24).value
        set(value) { memberAt<UINTVar>(24).value = value }
    
    var iPortState: UINT
        get() = memberAt<UINTVar>(28).value
        set(value) { memberAt<UINTVar>(28).value = value }
    
    var iActive: UINT
        get() = memberAt<UINTVar>(32).value
        set(value) { memberAt<UINTVar>(32).value = value }
    
}

class tagHIGHCONTRASTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var lpszDefaultScheme: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
}

class tagHIGHCONTRASTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var lpszDefaultScheme: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
}

class tagFILTERKEYS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var iWaitMSec: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var iDelayMSec: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var iRepeatMSec: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var iBounceMSec: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class tagSTICKYKEYS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class tagMOUSEKEYS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var iMaxSpeed: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var iTimeToMaxSpeed: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var iCtrlSpeed: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwReserved1: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var dwReserved2: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class tagACCESSTIMEOUT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var iTimeOutMSec: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class tagSOUNDSENTRYA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var iFSTextEffect: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var iFSTextEffectMSec: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var iFSTextEffectColorBits: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var iFSGrafEffect: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var iFSGrafEffectMSec: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var iFSGrafEffectColor: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var iWindowsEffect: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var iWindowsEffectMSec: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var lpszWindowsEffectDLL: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var iWindowsEffectOrdinal: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
}

class tagSOUNDSENTRYW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var iFSTextEffect: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var iFSTextEffectMSec: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var iFSTextEffectColorBits: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var iFSGrafEffect: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var iFSGrafEffectMSec: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var iFSGrafEffectColor: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var iWindowsEffect: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var iWindowsEffectMSec: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var lpszWindowsEffectDLL: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var iWindowsEffectOrdinal: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
}

class tagTOGGLEKEYS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class tagMONITORINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rcMonitor: RECT
        get() = memberAt(4)
    
    val rcWork: RECT
        get() = memberAt(20)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class tagMONITORINFOEXA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 4)
    
    val szDevice: CArrayPointer<CHARVar>
        get() = arrayMemberAt(40)
    
}

class anonymousStruct87(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rcMonitor: RECT
        get() = memberAt(4)
    
    val rcWork: RECT
        get() = memberAt(20)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class tagMONITORINFOEXW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(104, 4)
    
    val szDevice: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(40)
    
}

class anonymousStruct88(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rcMonitor: RECT
        get() = memberAt(4)
    
    val rcWork: RECT
        get() = memberAt(20)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class tagGUITHREADINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var flags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var hwndActive: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var hwndFocus: HWND?
        get() = memberAt<HWNDVar>(16).value
        set(value) { memberAt<HWNDVar>(16).value = value }
    
    var hwndCapture: HWND?
        get() = memberAt<HWNDVar>(24).value
        set(value) { memberAt<HWNDVar>(24).value = value }
    
    var hwndMenuOwner: HWND?
        get() = memberAt<HWNDVar>(32).value
        set(value) { memberAt<HWNDVar>(32).value = value }
    
    var hwndMoveSize: HWND?
        get() = memberAt<HWNDVar>(40).value
        set(value) { memberAt<HWNDVar>(40).value = value }
    
    var hwndCaret: HWND?
        get() = memberAt<HWNDVar>(48).value
        set(value) { memberAt<HWNDVar>(48).value = value }
    
    val rcCaret: RECT
        get() = memberAt(56)
    
}

class tagCURSORINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var flags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var hCursor: HCURSOR?
        get() = memberAt<HCURSORVar>(8).value
        set(value) { memberAt<HCURSORVar>(8).value = value }
    
    val ptScreenPos: POINT
        get() = memberAt(16)
    
}

class tagWINDOWINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(60, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rcWindow: RECT
        get() = memberAt(4)
    
    val rcClient: RECT
        get() = memberAt(20)
    
    var dwStyle: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var dwExStyle: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var dwWindowStatus: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var cxWindowBorders: UINT
        get() = memberAt<UINTVar>(48).value
        set(value) { memberAt<UINTVar>(48).value = value }
    
    var cyWindowBorders: UINT
        get() = memberAt<UINTVar>(52).value
        set(value) { memberAt<UINTVar>(52).value = value }
    
    var atomWindowType: ATOM
        get() = memberAt<ATOMVar>(56).value
        set(value) { memberAt<ATOMVar>(56).value = value }
    
    var wCreatorVersion: WORD
        get() = memberAt<WORDVar>(58).value
        set(value) { memberAt<WORDVar>(58).value = value }
    
}

class tagTITLEBARINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(44, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rcTitleBar: RECT
        get() = memberAt(4)
    
    val rgstate: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(20)
    
}

class tagMENUBARINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rcBar: RECT
        get() = memberAt(4)
    
    var hMenu: HMENU?
        get() = memberAt<HMENUVar>(24).value
        set(value) { memberAt<HMENUVar>(24).value = value }
    
    var hwndMenu: HWND?
        get() = memberAt<HWNDVar>(32).value
        set(value) { memberAt<HWNDVar>(32).value = value }
    
    var fBarFocused: WINBOOL
        get() = memberAt<WINBOOLVar>(40).value
        set(value) { memberAt<WINBOOLVar>(40).value = value }
    
}

class tagSCROLLBARINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(60, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rcScrollBar: RECT
        get() = memberAt(4)
    
    var dxyLineButton: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var xyThumbTop: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var xyThumbBottom: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
    var reserved: Int
        get() = memberAt<IntVar>(32).value
        set(value) { memberAt<IntVar>(32).value = value }
    
    val rgstate: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(36)
    
}

class tagCOMBOBOXINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rcItem: RECT
        get() = memberAt(4)
    
    val rcButton: RECT
        get() = memberAt(20)
    
    var stateButton: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var hwndCombo: HWND?
        get() = memberAt<HWNDVar>(40).value
        set(value) { memberAt<HWNDVar>(40).value = value }
    
    var hwndItem: HWND?
        get() = memberAt<HWNDVar>(48).value
        set(value) { memberAt<HWNDVar>(48).value = value }
    
    var hwndList: HWND?
        get() = memberAt<HWNDVar>(56).value
        set(value) { memberAt<HWNDVar>(56).value = value }
    
}

class tagALTTABINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cItems: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var cColumns: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var cRows: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var iColFocus: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var iRowFocus: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var cxItem: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var cyItem: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
    val ptStart: POINT
        get() = memberAt(32)
    
}

class HRAWINPUT__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class tagRAWINPUTHEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwSize: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var hDevice: HANDLE?
        get() = memberAt<HANDLEVar>(8).value
        set(value) { memberAt<HANDLEVar>(8).value = value }
    
    var wParam: WPARAM
        get() = memberAt<WPARAMVar>(16).value
        set(value) { memberAt<WPARAMVar>(16).value = value }
    
}

class tagRAWMOUSE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var usFlags: USHORT
        get() = memberAt<USHORTVar>(0).value
        set(value) { memberAt<USHORTVar>(0).value = value }
    
    var ulRawButtons: ULONG
        get() = memberAt<ULONGVar>(8).value
        set(value) { memberAt<ULONGVar>(8).value = value }
    
    var lLastX: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var lLastY: LONG
        get() = memberAt<LONGVar>(16).value
        set(value) { memberAt<LONGVar>(16).value = value }
    
    var ulExtraInformation: ULONG
        get() = memberAt<ULONGVar>(20).value
        set(value) { memberAt<ULONGVar>(20).value = value }
    
}

class anonymousStruct89(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var ulButtons: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
}

class anonymousStruct90(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var usButtonFlags: USHORT
        get() = memberAt<USHORTVar>(0).value
        set(value) { memberAt<USHORTVar>(0).value = value }
    
    var usButtonData: USHORT
        get() = memberAt<USHORTVar>(2).value
        set(value) { memberAt<USHORTVar>(2).value = value }
    
}

class tagRAWKEYBOARD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var MakeCode: USHORT
        get() = memberAt<USHORTVar>(0).value
        set(value) { memberAt<USHORTVar>(0).value = value }
    
    var Flags: USHORT
        get() = memberAt<USHORTVar>(2).value
        set(value) { memberAt<USHORTVar>(2).value = value }
    
    var Reserved: USHORT
        get() = memberAt<USHORTVar>(4).value
        set(value) { memberAt<USHORTVar>(4).value = value }
    
    var VKey: USHORT
        get() = memberAt<USHORTVar>(6).value
        set(value) { memberAt<USHORTVar>(6).value = value }
    
    var Message: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var ExtraInformation: ULONG
        get() = memberAt<ULONGVar>(12).value
        set(value) { memberAt<ULONGVar>(12).value = value }
    
}

class tagRAWHID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var dwSizeHid: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwCount: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val bRawData: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(8)
    
}

class tagRAWINPUT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val header: RAWINPUTHEADER
        get() = memberAt(0)
    
    val data: anonymousStruct91
        get() = memberAt(24)
    
}

class anonymousStruct91(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val mouse: RAWMOUSE
        get() = memberAt(0)
    
    val keyboard: RAWKEYBOARD
        get() = memberAt(0)
    
    val hid: RAWHID
        get() = memberAt(0)
    
}

class tagRID_DEVICE_INFO_MOUSE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var dwId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwNumberOfButtons: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwSampleRate: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var fHasHorizontalWheel: WINBOOL
        get() = memberAt<WINBOOLVar>(12).value
        set(value) { memberAt<WINBOOLVar>(12).value = value }
    
}

class tagRID_DEVICE_INFO_KEYBOARD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwSubType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwKeyboardMode: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwNumberOfFunctionKeys: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwNumberOfIndicators: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwNumberOfKeysTotal: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class tagRID_DEVICE_INFO_HID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var dwVendorId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwProductId: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwVersionNumber: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var usUsagePage: USHORT
        get() = memberAt<USHORTVar>(12).value
        set(value) { memberAt<USHORTVar>(12).value = value }
    
    var usUsage: USHORT
        get() = memberAt<USHORTVar>(14).value
        set(value) { memberAt<USHORTVar>(14).value = value }
    
}

class tagRID_DEVICE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class anonymousStruct92(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val mouse: RID_DEVICE_INFO_MOUSE
        get() = memberAt(0)
    
    val keyboard: RID_DEVICE_INFO_KEYBOARD
        get() = memberAt(0)
    
    val hid: RID_DEVICE_INFO_HID
        get() = memberAt(0)
    
}

class tagRAWINPUTDEVICE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var usUsagePage: USHORT
        get() = memberAt<USHORTVar>(0).value
        set(value) { memberAt<USHORTVar>(0).value = value }
    
    var usUsage: USHORT
        get() = memberAt<USHORTVar>(2).value
        set(value) { memberAt<USHORTVar>(2).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var hwndTarget: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
}

class tagRAWINPUTDEVICELIST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var hDevice: HANDLE?
        get() = memberAt<HANDLEVar>(0).value
        set(value) { memberAt<HANDLEVar>(0).value = value }
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _cpinfo(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var MaxCharSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    val DefaultChar: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
    val LeadByte: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(6)
    
}

class _cpinfoexA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(284, 4)
    
    var MaxCharSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    val DefaultChar: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
    val LeadByte: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(6)
    
    var UnicodeDefaultChar: WCHAR
        get() = memberAt<WCHARVar>(18).value
        set(value) { memberAt<WCHARVar>(18).value = value }
    
    var CodePage: UINT
        get() = memberAt<UINTVar>(20).value
        set(value) { memberAt<UINTVar>(20).value = value }
    
    val CodePageName: CArrayPointer<CHARVar>
        get() = arrayMemberAt(24)
    
}

class _cpinfoexW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(544, 4)
    
    var MaxCharSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    val DefaultChar: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
    val LeadByte: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(6)
    
    var UnicodeDefaultChar: WCHAR
        get() = memberAt<WCHARVar>(18).value
        set(value) { memberAt<WCHARVar>(18).value = value }
    
    var CodePage: UINT
        get() = memberAt<UINTVar>(20).value
        set(value) { memberAt<UINTVar>(20).value = value }
    
    val CodePageName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(24)
    
}

class _numberfmtA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var NumDigits: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var LeadingZero: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var Grouping: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var lpDecimalSep: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var lpThousandSep: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var NegativeOrder: UINT
        get() = memberAt<UINTVar>(32).value
        set(value) { memberAt<UINTVar>(32).value = value }
    
}

class _numberfmtW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var NumDigits: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var LeadingZero: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var Grouping: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var lpDecimalSep: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var lpThousandSep: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var NegativeOrder: UINT
        get() = memberAt<UINTVar>(32).value
        set(value) { memberAt<UINTVar>(32).value = value }
    
}

class _currencyfmtA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var NumDigits: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var LeadingZero: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var Grouping: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var lpDecimalSep: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var lpThousandSep: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var NegativeOrder: UINT
        get() = memberAt<UINTVar>(32).value
        set(value) { memberAt<UINTVar>(32).value = value }
    
    var PositiveOrder: UINT
        get() = memberAt<UINTVar>(36).value
        set(value) { memberAt<UINTVar>(36).value = value }
    
    var lpCurrencySymbol: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
}

class _currencyfmtW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var NumDigits: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var LeadingZero: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var Grouping: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var lpDecimalSep: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var lpThousandSep: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var NegativeOrder: UINT
        get() = memberAt<UINTVar>(32).value
        set(value) { memberAt<UINTVar>(32).value = value }
    
    var PositiveOrder: UINT
        get() = memberAt<UINTVar>(36).value
        set(value) { memberAt<UINTVar>(36).value = value }
    
    var lpCurrencySymbol: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
}

class _nlsversioninfo(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var dwNLSVersionInfoSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwNLSVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwDefinedVersion: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _nlsversioninfoex(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var dwNLSVersionInfoSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwNLSVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwDefinedVersion: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwEffectiveId: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    val guidCustomVersion: GUID
        get() = memberAt(16)
    
}

class _FILEMUIINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 4)
    
    var dwSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwFileType: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val pChecksum: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(12)
    
    val pServiceChecksum: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
    var dwLanguageNameOffset: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var dwTypeIDMainSize: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var dwTypeIDMainOffset: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var dwTypeNameMainOffset: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var dwTypeIDMUISize: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var dwTypeIDMUIOffset: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var dwTypeNameMUIOffset: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    val abBuffer: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(72)
    
}

class _COORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var X: SHORT
        get() = memberAt<SHORTVar>(0).value
        set(value) { memberAt<SHORTVar>(0).value = value }
    
    var Y: SHORT
        get() = memberAt<SHORTVar>(2).value
        set(value) { memberAt<SHORTVar>(2).value = value }
    
}

class _SMALL_RECT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    var Left: SHORT
        get() = memberAt<SHORTVar>(0).value
        set(value) { memberAt<SHORTVar>(0).value = value }
    
    var Top: SHORT
        get() = memberAt<SHORTVar>(2).value
        set(value) { memberAt<SHORTVar>(2).value = value }
    
    var Right: SHORT
        get() = memberAt<SHORTVar>(4).value
        set(value) { memberAt<SHORTVar>(4).value = value }
    
    var Bottom: SHORT
        get() = memberAt<SHORTVar>(6).value
        set(value) { memberAt<SHORTVar>(6).value = value }
    
}

class _KEY_EVENT_RECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var bKeyDown: WINBOOL
        get() = memberAt<WINBOOLVar>(0).value
        set(value) { memberAt<WINBOOLVar>(0).value = value }
    
    var wRepeatCount: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var wVirtualKeyCode: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var wVirtualScanCode: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    val uChar: anonymousStruct93
        get() = memberAt(10)
    
    var dwControlKeyState: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class anonymousStruct93(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(2, 2)
    
    var UnicodeChar: WCHAR
        get() = memberAt<WCHARVar>(0).value
        set(value) { memberAt<WCHARVar>(0).value = value }
    
    var AsciiChar: CHAR
        get() = memberAt<CHARVar>(0).value
        set(value) { memberAt<CHARVar>(0).value = value }
    
}

class _MOUSE_EVENT_RECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val dwMousePosition: COORD
        get() = memberAt(0)
    
    var dwButtonState: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwControlKeyState: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwEventFlags: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class _WINDOW_BUFFER_SIZE_RECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    val dwSize: COORD
        get() = memberAt(0)
    
}

class _MENU_EVENT_RECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var dwCommandId: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
}

class _FOCUS_EVENT_RECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var bSetFocus: WINBOOL
        get() = memberAt<WINBOOLVar>(0).value
        set(value) { memberAt<WINBOOLVar>(0).value = value }
    
}

class _INPUT_RECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var EventType: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    val Event: anonymousStruct94
        get() = memberAt(4)
    
}

class anonymousStruct94(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val KeyEvent: KEY_EVENT_RECORD
        get() = memberAt(0)
    
    val MouseEvent: MOUSE_EVENT_RECORD
        get() = memberAt(0)
    
    val WindowBufferSizeEvent: WINDOW_BUFFER_SIZE_RECORD
        get() = memberAt(0)
    
    val MenuEvent: MENU_EVENT_RECORD
        get() = memberAt(0)
    
    val FocusEvent: FOCUS_EVENT_RECORD
        get() = memberAt(0)
    
}

class _CHAR_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    val Char: anonymousStruct95
        get() = memberAt(0)
    
    var Attributes: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
}

class anonymousStruct95(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(2, 2)
    
    var UnicodeChar: WCHAR
        get() = memberAt<WCHARVar>(0).value
        set(value) { memberAt<WCHARVar>(0).value = value }
    
    var AsciiChar: CHAR
        get() = memberAt<CHARVar>(0).value
        set(value) { memberAt<CHARVar>(0).value = value }
    
}

class _CONSOLE_SCREEN_BUFFER_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(22, 2)
    
    val dwSize: COORD
        get() = memberAt(0)
    
    val dwCursorPosition: COORD
        get() = memberAt(4)
    
    var wAttributes: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    val srWindow: SMALL_RECT
        get() = memberAt(10)
    
    val dwMaximumWindowSize: COORD
        get() = memberAt(18)
    
}

class _CONSOLE_CURSOR_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var dwSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var bVisible: WINBOOL
        get() = memberAt<WINBOOLVar>(4).value
        set(value) { memberAt<WINBOOLVar>(4).value = value }
    
}

class _CONSOLE_FONT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var nFont: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val dwFontSize: COORD
        get() = memberAt(4)
    
}

class _CONSOLE_SELECTION_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val dwSelectionAnchor: COORD
        get() = memberAt(4)
    
    val srSelection: SMALL_RECT
        get() = memberAt(8)
    
}

class _CONSOLE_FONT_INFOEX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(84, 4)
    
    var cbSize: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    var nFont: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val dwFontSize: COORD
        get() = memberAt(8)
    
    var FontFamily: UINT
        get() = memberAt<UINTVar>(12).value
        set(value) { memberAt<UINTVar>(12).value = value }
    
    var FontWeight: UINT
        get() = memberAt<UINTVar>(16).value
        set(value) { memberAt<UINTVar>(16).value = value }
    
    val FaceName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(20)
    
}

class _CONSOLE_HISTORY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var cbSize: UINT
        get() = memberAt<UINTVar>(0).value
        set(value) { memberAt<UINTVar>(0).value = value }
    
    var HistoryBufferSize: UINT
        get() = memberAt<UINTVar>(4).value
        set(value) { memberAt<UINTVar>(4).value = value }
    
    var NumberOfHistoryBuffers: UINT
        get() = memberAt<UINTVar>(8).value
        set(value) { memberAt<UINTVar>(8).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class _CONSOLE_READCONSOLE_CONTROL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var nLength: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    var nInitialChars: ULONG
        get() = memberAt<ULONGVar>(4).value
        set(value) { memberAt<ULONGVar>(4).value = value }
    
    var dwCtrlWakeupMask: ULONG
        get() = memberAt<ULONGVar>(8).value
        set(value) { memberAt<ULONGVar>(8).value = value }
    
    var dwControlKeyState: ULONG
        get() = memberAt<ULONGVar>(12).value
        set(value) { memberAt<ULONGVar>(12).value = value }
    
}

class _CONSOLE_SCREEN_BUFFER_INFOEX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 4)
    
    var cbSize: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    val dwSize: COORD
        get() = memberAt(4)
    
    val dwCursorPosition: COORD
        get() = memberAt(8)
    
    var wAttributes: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    val srWindow: SMALL_RECT
        get() = memberAt(14)
    
    val dwMaximumWindowSize: COORD
        get() = memberAt(22)
    
    var wPopupAttributes: WORD
        get() = memberAt<WORDVar>(26).value
        set(value) { memberAt<WORDVar>(26).value = value }
    
    var bFullscreenSupported: WINBOOL
        get() = memberAt<WINBOOLVar>(28).value
        set(value) { memberAt<WINBOOLVar>(28).value = value }
    
    val ColorTable: CArrayPointer<COLORREFVar>
        get() = arrayMemberAt(32)
    
}

class tagVS_FIXEDFILEINFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(52, 4)
    
    var dwSignature: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwStrucVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwFileVersionMS: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwFileVersionLS: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwProductVersionMS: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwProductVersionLS: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var dwFileFlagsMask: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var dwFileFlags: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var dwFileOS: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var dwFileType: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var dwFileSubtype: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var dwFileDateMS: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var dwFileDateLS: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
}

class val_context(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var valuelen: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var value_context: LPVOID?
        get() = memberAt<LPVOIDVar>(8).value
        set(value) { memberAt<LPVOIDVar>(8).value = value }
    
    var val_buff_ptr: LPVOID?
        get() = memberAt<LPVOIDVar>(16).value
        set(value) { memberAt<LPVOIDVar>(16).value = value }
    
}

class pvalueA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pv_valuename: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pv_valuelen: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var pv_value_context: LPVOID?
        get() = memberAt<LPVOIDVar>(16).value
        set(value) { memberAt<LPVOIDVar>(16).value = value }
    
    var pv_type: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class pvalueW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pv_valuename: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pv_valuelen: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var pv_value_context: LPVOID?
        get() = memberAt<LPVOIDVar>(16).value
        set(value) { memberAt<LPVOIDVar>(16).value = value }
    
    var pv_type: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class provider_info(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var pi_R0_1val: PQUERYHANDLER?
        get() = memberAt<PQUERYHANDLERVar>(0).value
        set(value) { memberAt<PQUERYHANDLERVar>(0).value = value }
    
    var pi_R0_allvals: PQUERYHANDLER?
        get() = memberAt<PQUERYHANDLERVar>(8).value
        set(value) { memberAt<PQUERYHANDLERVar>(8).value = value }
    
    var pi_R3_1val: PQUERYHANDLER?
        get() = memberAt<PQUERYHANDLERVar>(16).value
        set(value) { memberAt<PQUERYHANDLERVar>(16).value = value }
    
    var pi_R3_allvals: PQUERYHANDLER?
        get() = memberAt<PQUERYHANDLERVar>(24).value
        set(value) { memberAt<PQUERYHANDLERVar>(24).value = value }
    
    var pi_flags: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var pi_key_context: LPVOID?
        get() = memberAt<LPVOIDVar>(40).value
        set(value) { memberAt<LPVOIDVar>(40).value = value }
    
}

class value_entA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var ve_valuename: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var ve_valuelen: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ve_valueptr: DWORD_PTR
        get() = memberAt<DWORD_PTRVar>(16).value
        set(value) { memberAt<DWORD_PTRVar>(16).value = value }
    
    var ve_type: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class value_entW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var ve_valuename: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var ve_valuelen: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ve_valueptr: DWORD_PTR
        get() = memberAt<DWORD_PTRVar>(16).value
        set(value) { memberAt<DWORD_PTRVar>(16).value = value }
    
    var ve_type: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class HKEY__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class _NETRESOURCEA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var dwScope: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwDisplayType: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwUsage: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var lpLocalName: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var lpRemoteName: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var lpComment: LPSTR?
        get() = memberAt<LPSTRVar>(32).value
        set(value) { memberAt<LPSTRVar>(32).value = value }
    
    var lpProvider: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
}

class _NETRESOURCEW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var dwScope: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwDisplayType: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwUsage: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var lpLocalName: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var lpRemoteName: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var lpComment: LPWSTR?
        get() = memberAt<LPWSTRVar>(32).value
        set(value) { memberAt<LPWSTRVar>(32).value = value }
    
    var lpProvider: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
}

class _CONNECTDLGSTRUCTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cbStructure: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hwndOwner: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var lpConnRes: LPNETRESOURCEA?
        get() = memberAt<LPNETRESOURCEAVar>(16).value
        set(value) { memberAt<LPNETRESOURCEAVar>(16).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var dwDevNum: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class _CONNECTDLGSTRUCTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cbStructure: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hwndOwner: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var lpConnRes: LPNETRESOURCEW?
        get() = memberAt<LPNETRESOURCEWVar>(16).value
        set(value) { memberAt<LPNETRESOURCEWVar>(16).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var dwDevNum: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class _DISCDLGSTRUCTA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbStructure: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hwndOwner: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var lpLocalName: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var lpRemoteName: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _DISCDLGSTRUCTW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbStructure: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hwndOwner: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var lpLocalName: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var lpRemoteName: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _UNIVERSAL_NAME_INFOA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var lpUniversalName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _UNIVERSAL_NAME_INFOW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var lpUniversalName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
}

class _REMOTE_NAME_INFOA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var lpUniversalName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var lpConnectionName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var lpRemainingPath: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
}

class _REMOTE_NAME_INFOW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var lpUniversalName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var lpConnectionName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var lpRemainingPath: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
}

class _NETINFOSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbStructure: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwProviderVersion: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwStatus: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwCharacteristics: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwHandle: ULONG_PTR
        get() = memberAt<ULONG_PTRVar>(16).value
        set(value) { memberAt<ULONG_PTRVar>(16).value = value }
    
    var wNetType: WORD
        get() = memberAt<WORDVar>(24).value
        set(value) { memberAt<WORDVar>(24).value = value }
    
    var dwPrinters: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var dwDrives: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _NETCONNECTINFOSTRUCT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var cbStructure: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwSpeed: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwDelay: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwOptDataSize: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _PERF_DATA_BLOCK(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 8)
    
    val Signature: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(0)
    
    var LittleEndian: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var Revision: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var TotalByteLength: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var HeaderLength: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var NumObjectTypes: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var DefaultObject: LONG
        get() = memberAt<LONGVar>(32).value
        set(value) { memberAt<LONGVar>(32).value = value }
    
    val SystemTime: SYSTEMTIME
        get() = memberAt(36)
    
    val PerfTime: LARGE_INTEGER
        get() = memberAt(56)
    
    val PerfFreq: LARGE_INTEGER
        get() = memberAt(64)
    
    val PerfTime100nSec: LARGE_INTEGER
        get() = memberAt(72)
    
    var SystemNameLength: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var SystemNameOffset: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
}

class _SYSTEMTIME(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 2)
    
    var wYear: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var wMonth: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var wDayOfWeek: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var wDay: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var wHour: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var wMinute: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var wSecond: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var wMilliseconds: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
}

class _PERF_OBJECT_TYPE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var TotalByteLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var DefinitionLength: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var HeaderLength: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ObjectNameTitleIndex: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var ObjectNameTitle: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var ObjectHelpTitleIndex: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var ObjectHelpTitle: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var DetailLevel: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var NumCounters: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var DefaultCounter: LONG
        get() = memberAt<LONGVar>(36).value
        set(value) { memberAt<LONGVar>(36).value = value }
    
    var NumInstances: LONG
        get() = memberAt<LONGVar>(40).value
        set(value) { memberAt<LONGVar>(40).value = value }
    
    var CodePage: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    val PerfTime: LARGE_INTEGER
        get() = memberAt(48)
    
    val PerfFreq: LARGE_INTEGER
        get() = memberAt(56)
    
}

class _PERF_COUNTER_DEFINITION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var ByteLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var CounterNameTitleIndex: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var CounterNameTitle: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var CounterHelpTitleIndex: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var CounterHelpTitle: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var DefaultScale: LONG
        get() = memberAt<LONGVar>(20).value
        set(value) { memberAt<LONGVar>(20).value = value }
    
    var DetailLevel: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var CounterType: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var CounterSize: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var CounterOffset: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class _PERF_INSTANCE_DEFINITION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var ByteLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var ParentObjectTitleIndex: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ParentObjectInstance: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var UniqueID: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var NameOffset: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var NameLength: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class _PERF_COUNTER_BLOCK(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var ByteLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class sockaddr(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 2)
    
    var sa_family: u_short
        get() = memberAt<u_shortVar>(0).value
        set(value) { memberAt<u_shortVar>(0).value = value }
    
    val sa_data: CArrayPointer<ByteVar>
        get() = arrayMemberAt(2)
    
}

class in_addr(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    val S_un: anonymousStruct96
        get() = memberAt(0)
    
}

class anonymousStruct96(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    val S_un_b: anonymousStruct97
        get() = memberAt(0)
    
    val S_un_w: anonymousStruct98
        get() = memberAt(0)
    
    var S_addr: u_long
        get() = memberAt<u_longVar>(0).value
        set(value) { memberAt<u_longVar>(0).value = value }
    
}

class anonymousStruct97(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 1)
    
    var s_b1: u_char
        get() = memberAt<u_charVar>(0).value
        set(value) { memberAt<u_charVar>(0).value = value }
    
    var s_b2: u_char
        get() = memberAt<u_charVar>(1).value
        set(value) { memberAt<u_charVar>(1).value = value }
    
    var s_b3: u_char
        get() = memberAt<u_charVar>(2).value
        set(value) { memberAt<u_charVar>(2).value = value }
    
    var s_b4: u_char
        get() = memberAt<u_charVar>(3).value
        set(value) { memberAt<u_charVar>(3).value = value }
    
}

class anonymousStruct98(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var s_w1: u_short
        get() = memberAt<u_shortVar>(0).value
        set(value) { memberAt<u_shortVar>(0).value = value }
    
    var s_w2: u_short
        get() = memberAt<u_shortVar>(2).value
        set(value) { memberAt<u_shortVar>(2).value = value }
    
}

class fd_set(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(520, 8)
    
    var fd_count: u_int
        get() = memberAt<u_intVar>(0).value
        set(value) { memberAt<u_intVar>(0).value = value }
    
    val fd_array: CArrayPointer<SOCKETVar>
        get() = arrayMemberAt(8)
    
}

class timeval(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var tv_sec: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var tv_usec: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
}

class hostent(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var h_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var h_aliases: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value = value }
    
    var h_addrtype: Short
        get() = memberAt<ShortVar>(16).value
        set(value) { memberAt<ShortVar>(16).value = value }
    
    var h_length: Short
        get() = memberAt<ShortVar>(18).value
        set(value) { memberAt<ShortVar>(18).value = value }
    
    var h_addr_list: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(24).value = value }
    
}

class servent(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var s_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var s_aliases: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value = value }
    
    var s_proto: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
    var s_port: Short
        get() = memberAt<ShortVar>(24).value
        set(value) { memberAt<ShortVar>(24).value = value }
    
}

class protoent(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var p_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var p_aliases: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value = value }
    
    var p_proto: Short
        get() = memberAt<ShortVar>(16).value
        set(value) { memberAt<ShortVar>(16).value = value }
    
}

class WSAData(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(408, 8)
    
    var wVersion: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var wHighVersion: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var iMaxSockets: Short
        get() = memberAt<ShortVar>(4).value
        set(value) { memberAt<ShortVar>(4).value = value }
    
    var iMaxUdpDg: Short
        get() = memberAt<ShortVar>(6).value
        set(value) { memberAt<ShortVar>(6).value = value }
    
    var lpVendorInfo: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    val szDescription: CArrayPointer<ByteVar>
        get() = arrayMemberAt(16)
    
    val szSystemStatus: CArrayPointer<ByteVar>
        get() = arrayMemberAt(273)
    
}

class _TRANSMIT_FILE_BUFFERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var Head: LPVOID?
        get() = memberAt<LPVOIDVar>(0).value
        set(value) { memberAt<LPVOIDVar>(0).value = value }
    
    var HeadLength: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Tail: LPVOID?
        get() = memberAt<LPVOIDVar>(16).value
        set(value) { memberAt<LPVOIDVar>(16).value = value }
    
    var TailLength: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _CMS_KEY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Algid: ALG_ID
        get() = memberAt<ALG_IDVar>(4).value
        set(value) { memberAt<ALG_IDVar>(4).value = value }
    
    var pbOID: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(8).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(8).value = value }
    
    var cbOID: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _HMAC_Info(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var HashAlgid: ALG_ID
        get() = memberAt<ALG_IDVar>(0).value
        set(value) { memberAt<ALG_IDVar>(0).value = value }
    
    var pbInnerString: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(8).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(8).value = value }
    
    var cbInnerString: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var pbOuterString: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(24).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(24).value = value }
    
    var cbOuterString: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _SCHANNEL_ALG(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var dwUse: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Algid: ALG_ID
        get() = memberAt<ALG_IDVar>(4).value
        set(value) { memberAt<ALG_IDVar>(4).value = value }
    
    var cBits: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwReserved: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _PROV_ENUMALGS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var aiAlgid: ALG_ID
        get() = memberAt<ALG_IDVar>(0).value
        set(value) { memberAt<ALG_IDVar>(0).value = value }
    
    var dwBitLen: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwNameLen: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val szName: CArrayPointer<CHARVar>
        get() = arrayMemberAt(12)
    
}

class _PROV_ENUMALGS_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 4)
    
    var aiAlgid: ALG_ID
        get() = memberAt<ALG_IDVar>(0).value
        set(value) { memberAt<ALG_IDVar>(0).value = value }
    
    var dwDefaultLen: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwMinLen: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwMaxLen: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwProtocols: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwNameLen: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    val szName: CArrayPointer<CHARVar>
        get() = arrayMemberAt(24)
    
    var dwLongNameLen: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    val szLongName: CArrayPointer<CHARVar>
        get() = arrayMemberAt(48)
    
}

class _PUBLICKEYSTRUC(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var bType: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var bVersion: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var reserved: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var aiKeyAlg: ALG_ID
        get() = memberAt<ALG_IDVar>(4).value
        set(value) { memberAt<ALG_IDVar>(4).value = value }
    
}

class _RSAPUBKEY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var magic: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var bitlen: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var pubexp: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _PUBKEY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var magic: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var bitlen: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _DSSSEED(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var counter: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val seed: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
}

class _PUBKEYVER3(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var magic: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var bitlenP: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var bitlenQ: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var bitlenJ: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    val DSSSeed: DSSSEED
        get() = memberAt(16)
    
}

class _PRIVKEYVER3(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(44, 4)
    
    var magic: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var bitlenP: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var bitlenQ: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var bitlenJ: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var bitlenX: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val DSSSeed: DSSSEED
        get() = memberAt(20)
    
}

class _KEY_TYPE_SUBTYPE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Type: GUID
        get() = memberAt(4)
    
    val Subtype: GUID
        get() = memberAt(20)
    
}

class _CERT_FORTEZZA_DATA_PROP(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 4)
    
    val SerialNumber: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    var CertIndex: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    val CertLabel: CArrayPointer<ByteVar>
        get() = arrayMemberAt(12)
    
}

class _CRYPT_RC4_KEY_STATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(274, 1)
    
    val Key: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    val SBox: CArrayPointer<ByteVar>
        get() = arrayMemberAt(16)
    
    var i: Byte
        get() = memberAt<ByteVar>(272).value
        set(value) { memberAt<ByteVar>(272).value = value }
    
    var j: Byte
        get() = memberAt<ByteVar>(273).value
        set(value) { memberAt<ByteVar>(273).value = value }
    
}

class _CRYPT_DES_KEY_STATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 1)
    
    val Key: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    val IV: CArrayPointer<ByteVar>
        get() = arrayMemberAt(8)
    
    val Feedback: CArrayPointer<ByteVar>
        get() = arrayMemberAt(16)
    
}

class _CRYPT_3DES_KEY_STATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 1)
    
    val Key: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    val IV: CArrayPointer<ByteVar>
        get() = arrayMemberAt(24)
    
    val Feedback: CArrayPointer<ByteVar>
        get() = arrayMemberAt(32)
    
}

class _CRYPTOAPI_BLOB(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pbData: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(8).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(8).value = value }
    
}

class _CMS_DH_KEY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Algid: ALG_ID
        get() = memberAt<ALG_IDVar>(4).value
        set(value) { memberAt<ALG_IDVar>(4).value = value }
    
    var pszContentEncObjId: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    val PubInfo: CRYPT_DATA_BLOB
        get() = memberAt(16)
    
    var pReserved: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(32).value
        set(value) { memberAt<COpaquePointerVar>(32).value = value }
    
}

class _CRYPT_BIT_BLOB(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pbData: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(8).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(8).value = value }
    
    var cUnusedBits: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _CRYPT_ALGORITHM_IDENTIFIER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val Parameters: CRYPT_OBJID_BLOB
        get() = memberAt(8)
    
}

class _CRYPT_OBJID_TABLE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var dwAlgId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszObjId: LPCSTR?
        get() = memberAt<LPCSTRVar>(8).value
        set(value) { memberAt<LPCSTRVar>(8).value = value }
    
}

class _CRYPT_HASH_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(0)
    
    val Hash: CRYPT_HASH_BLOB
        get() = memberAt(24)
    
}

class _CERT_EXTENSION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var fCritical: WINBOOL
        get() = memberAt<WINBOOLVar>(8).value
        set(value) { memberAt<WINBOOLVar>(8).value = value }
    
    val Value: CRYPT_OBJID_BLOB
        get() = memberAt(16)
    
}

class _CRYPT_ATTRIBUTE_TYPE_VALUE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val Value: CRYPT_OBJID_BLOB
        get() = memberAt(8)
    
}

class _CRYPT_ATTRIBUTE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var cValue: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var rgValue: PCRYPT_ATTR_BLOB?
        get() = memberAt<PCRYPT_ATTR_BLOBVar>(16).value
        set(value) { memberAt<PCRYPT_ATTR_BLOBVar>(16).value = value }
    
}

class _CRYPT_ATTRIBUTES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cAttr: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgAttr: PCRYPT_ATTRIBUTE?
        get() = memberAt<PCRYPT_ATTRIBUTEVar>(8).value
        set(value) { memberAt<PCRYPT_ATTRIBUTEVar>(8).value = value }
    
}

class _CERT_RDN_ATTR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var dwValueType: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val Value: CERT_RDN_VALUE_BLOB
        get() = memberAt(16)
    
}

class _CERT_RDN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cRDNAttr: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgRDNAttr: PCERT_RDN_ATTR?
        get() = memberAt<PCERT_RDN_ATTRVar>(8).value
        set(value) { memberAt<PCERT_RDN_ATTRVar>(8).value = value }
    
}

class _CERT_NAME_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cRDN: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgRDN: PCERT_RDN?
        get() = memberAt<PCERT_RDNVar>(8).value
        set(value) { memberAt<PCERT_RDNVar>(8).value = value }
    
}

class _CERT_NAME_VALUE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwValueType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Value: CERT_RDN_VALUE_BLOB
        get() = memberAt(8)
    
}

class _CERT_PUBLIC_KEY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val Algorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(0)
    
    val PublicKey: CRYPT_BIT_BLOB
        get() = memberAt(24)
    
}

class _CRYPT_ECC_PRIVATE_KEY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val PrivateKey: CRYPT_DER_BLOB
        get() = memberAt(8)
    
    var szCurveOid: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    val PublicKey: CRYPT_BIT_BLOB
        get() = memberAt(32)
    
}

class _CRYPT_PRIVATE_KEY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Algorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
    val PrivateKey: CRYPT_DER_BLOB
        get() = memberAt(32)
    
    var pAttributes: PCRYPT_ATTRIBUTES?
        get() = memberAt<PCRYPT_ATTRIBUTESVar>(48).value
        set(value) { memberAt<PCRYPT_ATTRIBUTESVar>(48).value = value }
    
}

class _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    val EncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(0)
    
    val EncryptedPrivateKey: CRYPT_DATA_BLOB
        get() = memberAt(24)
    
}

class _CRYPT_PKCS8_IMPORT_PARAMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val PrivateKey: CRYPT_DIGEST_BLOB
        get() = memberAt(0)
    
    var pResolvehCryptProvFunc: PCRYPT_RESOLVE_HCRYPTPROV_FUNC?
        get() = memberAt<PCRYPT_RESOLVE_HCRYPTPROV_FUNCVar>(16).value
        set(value) { memberAt<PCRYPT_RESOLVE_HCRYPTPROV_FUNCVar>(16).value = value }
    
    var pVoidResolveFunc: LPVOID?
        get() = memberAt<LPVOIDVar>(24).value
        set(value) { memberAt<LPVOIDVar>(24).value = value }
    
    var pDecryptPrivateKeyFunc: PCRYPT_DECRYPT_PRIVATE_KEY_FUNC?
        get() = memberAt<PCRYPT_DECRYPT_PRIVATE_KEY_FUNCVar>(32).value
        set(value) { memberAt<PCRYPT_DECRYPT_PRIVATE_KEY_FUNCVar>(32).value = value }
    
    var pVoidDecryptFunc: LPVOID?
        get() = memberAt<LPVOIDVar>(40).value
        set(value) { memberAt<LPVOIDVar>(40).value = value }
    
}

class _CRYPT_PKCS8_EXPORT_PARAMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var hCryptProv: HCRYPTPROV
        get() = memberAt<HCRYPTPROVVar>(0).value
        set(value) { memberAt<HCRYPTPROVVar>(0).value = value }
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var pszPrivateKeyObjId: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var pEncryptPrivateKeyFunc: PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC?
        get() = memberAt<PCRYPT_ENCRYPT_PRIVATE_KEY_FUNCVar>(24).value
        set(value) { memberAt<PCRYPT_ENCRYPT_PRIVATE_KEY_FUNCVar>(24).value = value }
    
    var pVoidEncryptFunc: LPVOID?
        get() = memberAt<LPVOIDVar>(32).value
        set(value) { memberAt<LPVOIDVar>(32).value = value }
    
}

class _CERT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(208, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val SerialNumber: CRYPT_INTEGER_BLOB
        get() = memberAt(8)
    
    val SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(24)
    
    val Issuer: CERT_NAME_BLOB
        get() = memberAt(48)
    
    val NotBefore: FILETIME
        get() = memberAt(64)
    
    val NotAfter: FILETIME
        get() = memberAt(72)
    
    val Subject: CERT_NAME_BLOB
        get() = memberAt(80)
    
    val SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO
        get() = memberAt(96)
    
    val IssuerUniqueId: CRYPT_BIT_BLOB
        get() = memberAt(144)
    
    val SubjectUniqueId: CRYPT_BIT_BLOB
        get() = memberAt(168)
    
    var cExtension: DWORD
        get() = memberAt<DWORDVar>(192).value
        set(value) { memberAt<DWORDVar>(192).value = value }
    
    var rgExtension: PCERT_EXTENSION?
        get() = memberAt<PCERT_EXTENSIONVar>(200).value
        set(value) { memberAt<PCERT_EXTENSIONVar>(200).value = value }
    
}

class _CRL_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    val SerialNumber: CRYPT_INTEGER_BLOB
        get() = memberAt(0)
    
    val RevocationDate: FILETIME
        get() = memberAt(16)
    
    var cExtension: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var rgExtension: PCERT_EXTENSION?
        get() = memberAt<PCERT_EXTENSIONVar>(32).value
        set(value) { memberAt<PCERT_EXTENSIONVar>(32).value = value }
    
}

class _CRL_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
    val Issuer: CERT_NAME_BLOB
        get() = memberAt(32)
    
    val ThisUpdate: FILETIME
        get() = memberAt(48)
    
    val NextUpdate: FILETIME
        get() = memberAt(56)
    
    var cCRLEntry: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var rgCRLEntry: PCRL_ENTRY?
        get() = memberAt<PCRL_ENTRYVar>(72).value
        set(value) { memberAt<PCRL_ENTRYVar>(72).value = value }
    
    var cExtension: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var rgExtension: PCERT_EXTENSION?
        get() = memberAt<PCERT_EXTENSIONVar>(88).value
        set(value) { memberAt<PCERT_EXTENSIONVar>(88).value = value }
    
}

class _CERT_OR_CRL_BLOB(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var dwChoice: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cbEncoded: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var pbEncoded: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(8).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(8).value = value }
    
}

class _CERT_OR_CRL_BUNDLE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cItem: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgItem: PCERT_OR_CRL_BLOB?
        get() = memberAt<PCERT_OR_CRL_BLOBVar>(8).value
        set(value) { memberAt<PCERT_OR_CRL_BLOBVar>(8).value = value }
    
}

class _CERT_REQUEST_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Subject: CERT_NAME_BLOB
        get() = memberAt(8)
    
    val SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO
        get() = memberAt(24)
    
    var cAttribute: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
    var rgAttribute: PCRYPT_ATTRIBUTE?
        get() = memberAt<PCRYPT_ATTRIBUTEVar>(80).value
        set(value) { memberAt<PCRYPT_ATTRIBUTEVar>(80).value = value }
    
}

class _CERT_KEYGEN_REQUEST_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO
        get() = memberAt(8)
    
    var pwszChallengeString: LPWSTR?
        get() = memberAt<LPWSTRVar>(56).value
        set(value) { memberAt<LPWSTRVar>(56).value = value }
    
}

class _CERT_SIGNED_CONTENT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    val ToBeSigned: CRYPT_DER_BLOB
        get() = memberAt(0)
    
    val SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(16)
    
    val Signature: CRYPT_BIT_BLOB
        get() = memberAt(40)
    
}

class _CTL_USAGE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cUsageIdentifier: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgpszUsageIdentifier: CPointer<LPSTRVar>?
        get() = memberAt<CPointerVar<LPSTRVar>>(8).value
        set(value) { memberAt<CPointerVar<LPSTRVar>>(8).value = value }
    
}

class _CTL_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val SubjectIdentifier: CRYPT_DATA_BLOB
        get() = memberAt(0)
    
    var cAttribute: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgAttribute: PCRYPT_ATTRIBUTE?
        get() = memberAt<PCRYPT_ATTRIBUTEVar>(24).value
        set(value) { memberAt<PCRYPT_ATTRIBUTEVar>(24).value = value }
    
}

class _CTL_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(128, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val SubjectUsage: CTL_USAGE
        get() = memberAt(8)
    
    val ListIdentifier: CRYPT_DATA_BLOB
        get() = memberAt(24)
    
    val SequenceNumber: CRYPT_INTEGER_BLOB
        get() = memberAt(40)
    
    val ThisUpdate: FILETIME
        get() = memberAt(56)
    
    val NextUpdate: FILETIME
        get() = memberAt(64)
    
    val SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(72)
    
    var cCTLEntry: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var rgCTLEntry: PCTL_ENTRY?
        get() = memberAt<PCTL_ENTRYVar>(104).value
        set(value) { memberAt<PCTL_ENTRYVar>(104).value = value }
    
    var cExtension: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var rgExtension: PCERT_EXTENSION?
        get() = memberAt<PCERT_EXTENSIONVar>(120).value
        set(value) { memberAt<PCERT_EXTENSIONVar>(120).value = value }
    
}

class _CRYPT_TIME_STAMP_REQUEST_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var pszTimeStampAlgorithm: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pszContentType: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    val Content: CRYPT_OBJID_BLOB
        get() = memberAt(16)
    
    var cAttribute: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var rgAttribute: PCRYPT_ATTRIBUTE?
        get() = memberAt<PCRYPT_ATTRIBUTEVar>(40).value
        set(value) { memberAt<PCRYPT_ATTRIBUTEVar>(40).value = value }
    
}

class _CRYPT_ENROLLMENT_NAME_VALUE_PAIR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pwszName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pwszValue: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
}

class _CRYPT_CSP_PROVIDER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pwszProviderName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    val Signature: CRYPT_BIT_BLOB
        get() = memberAt(16)
    
}

class _CRYPT_ENCODE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pfnAlloc: PFN_CRYPT_ALLOC?
        get() = memberAt<PFN_CRYPT_ALLOCVar>(8).value
        set(value) { memberAt<PFN_CRYPT_ALLOCVar>(8).value = value }
    
    var pfnFree: PFN_CRYPT_FREE?
        get() = memberAt<PFN_CRYPT_FREEVar>(16).value
        set(value) { memberAt<PFN_CRYPT_FREEVar>(16).value = value }
    
}

class _CRYPT_DECODE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pfnAlloc: PFN_CRYPT_ALLOC?
        get() = memberAt<PFN_CRYPT_ALLOCVar>(8).value
        set(value) { memberAt<PFN_CRYPT_ALLOCVar>(8).value = value }
    
    var pfnFree: PFN_CRYPT_FREE?
        get() = memberAt<PFN_CRYPT_FREEVar>(16).value
        set(value) { memberAt<PFN_CRYPT_FREEVar>(16).value = value }
    
}

class _CERT_EXTENSIONS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cExtension: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgExtension: PCERT_EXTENSION?
        get() = memberAt<PCERT_EXTENSIONVar>(8).value
        set(value) { memberAt<PCERT_EXTENSIONVar>(8).value = value }
    
}

class _CERT_AUTHORITY_KEY_ID_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val KeyId: CRYPT_DATA_BLOB
        get() = memberAt(0)
    
    val CertIssuer: CERT_NAME_BLOB
        get() = memberAt(16)
    
    val CertSerialNumber: CRYPT_INTEGER_BLOB
        get() = memberAt(32)
    
}

class _CERT_PRIVATE_KEY_VALIDITY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val NotBefore: FILETIME
        get() = memberAt(0)
    
    val NotAfter: FILETIME
        get() = memberAt(8)
    
}

class _CERT_KEY_ATTRIBUTES_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val KeyId: CRYPT_DATA_BLOB
        get() = memberAt(0)
    
    val IntendedKeyUsage: CRYPT_BIT_BLOB
        get() = memberAt(16)
    
    var pPrivateKeyUsagePeriod: PCERT_PRIVATE_KEY_VALIDITY?
        get() = memberAt<PCERT_PRIVATE_KEY_VALIDITYVar>(40).value
        set(value) { memberAt<PCERT_PRIVATE_KEY_VALIDITYVar>(40).value = value }
    
}

class _CERT_POLICY_ID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cCertPolicyElementId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgpszCertPolicyElementId: CPointer<LPSTRVar>?
        get() = memberAt<CPointerVar<LPSTRVar>>(8).value
        set(value) { memberAt<CPointerVar<LPSTRVar>>(8).value = value }
    
}

class _CERT_KEY_USAGE_RESTRICTION_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cCertPolicyId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgCertPolicyId: PCERT_POLICY_ID?
        get() = memberAt<PCERT_POLICY_IDVar>(8).value
        set(value) { memberAt<PCERT_POLICY_IDVar>(8).value = value }
    
    val RestrictedKeyUsage: CRYPT_BIT_BLOB
        get() = memberAt(16)
    
}

class _CERT_OTHER_NAME(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val Value: CRYPT_OBJID_BLOB
        get() = memberAt(8)
    
}

class _CERT_ALT_NAME_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwAltNameChoice: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct99(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pOtherName: PCERT_OTHER_NAME?
        get() = memberAt<PCERT_OTHER_NAMEVar>(0).value
        set(value) { memberAt<PCERT_OTHER_NAMEVar>(0).value = value }
    
    var pwszRfc822Name: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pwszDNSName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    val DirectoryName: CERT_NAME_BLOB
        get() = memberAt(0)
    
    var pwszURL: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    val IPAddress: CRYPT_DATA_BLOB
        get() = memberAt(0)
    
    var pszRegisteredID: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _CERT_ALT_NAME_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cAltEntry: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgAltEntry: PCERT_ALT_NAME_ENTRY?
        get() = memberAt<PCERT_ALT_NAME_ENTRYVar>(8).value
        set(value) { memberAt<PCERT_ALT_NAME_ENTRYVar>(8).value = value }
    
}

class _CERT_BASIC_CONSTRAINTS_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val SubjectType: CRYPT_BIT_BLOB
        get() = memberAt(0)
    
    var fPathLenConstraint: WINBOOL
        get() = memberAt<WINBOOLVar>(24).value
        set(value) { memberAt<WINBOOLVar>(24).value = value }
    
    var dwPathLenConstraint: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var cSubtreesConstraint: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var rgSubtreesConstraint: CPointer<CERT_NAME_BLOB>?
        get() = memberAt<CPointerVar<CERT_NAME_BLOB>>(40).value
        set(value) { memberAt<CPointerVar<CERT_NAME_BLOB>>(40).value = value }
    
}

class _CERT_BASIC_CONSTRAINTS2_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var fCA: WINBOOL
        get() = memberAt<WINBOOLVar>(0).value
        set(value) { memberAt<WINBOOLVar>(0).value = value }
    
    var fPathLenConstraint: WINBOOL
        get() = memberAt<WINBOOLVar>(4).value
        set(value) { memberAt<WINBOOLVar>(4).value = value }
    
    var dwPathLenConstraint: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _CERT_POLICY_QUALIFIER_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszPolicyQualifierId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val Qualifier: CRYPT_OBJID_BLOB
        get() = memberAt(8)
    
}

class _CERT_POLICY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszPolicyIdentifier: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var cPolicyQualifier: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var rgPolicyQualifier: CPointer<CERT_POLICY_QUALIFIER_INFO>?
        get() = memberAt<CPointerVar<CERT_POLICY_QUALIFIER_INFO>>(16).value
        set(value) { memberAt<CPointerVar<CERT_POLICY_QUALIFIER_INFO>>(16).value = value }
    
}

class _CERT_POLICIES_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cPolicyInfo: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgPolicyInfo: CPointer<CERT_POLICY_INFO>?
        get() = memberAt<CPointerVar<CERT_POLICY_INFO>>(8).value
        set(value) { memberAt<CPointerVar<CERT_POLICY_INFO>>(8).value = value }
    
}

class _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszOrganization: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var cNoticeNumbers: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var rgNoticeNumbers: CPointer<IntVar>?
        get() = memberAt<CPointerVar<IntVar>>(16).value
        set(value) { memberAt<CPointerVar<IntVar>>(16).value = value }
    
}

class _CERT_POLICY_QUALIFIER_USER_NOTICE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pNoticeReference: CPointer<CERT_POLICY_QUALIFIER_NOTICE_REFERENCE>?
        get() = memberAt<CPointerVar<CERT_POLICY_QUALIFIER_NOTICE_REFERENCE>>(0).value
        set(value) { memberAt<CPointerVar<CERT_POLICY_QUALIFIER_NOTICE_REFERENCE>>(0).value = value }
    
    var pszDisplayText: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
}

class _CPS_URLS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszURL: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pAlgorithm: CPointer<CRYPT_ALGORITHM_IDENTIFIER>?
        get() = memberAt<CPointerVar<CRYPT_ALGORITHM_IDENTIFIER>>(8).value
        set(value) { memberAt<CPointerVar<CRYPT_ALGORITHM_IDENTIFIER>>(8).value = value }
    
    var pDigest: CPointer<CRYPT_DATA_BLOB>?
        get() = memberAt<CPointerVar<CRYPT_DATA_BLOB>>(16).value
        set(value) { memberAt<CPointerVar<CRYPT_DATA_BLOB>>(16).value = value }
    
}

class _CERT_POLICY95_QUALIFIER1(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var pszPracticesReference: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pszNoticeIdentifier: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pszNSINoticeIdentifier: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var cCPSURLs: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var rgCPSURLs: CPointer<CPS_URLS>?
        get() = memberAt<CPointerVar<CPS_URLS>>(32).value
        set(value) { memberAt<CPointerVar<CPS_URLS>>(32).value = value }
    
}

class _CERT_POLICY_MAPPING(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pszIssuerDomainPolicy: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pszSubjectDomainPolicy: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
}

class _CERT_POLICY_MAPPINGS_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cPolicyMapping: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgPolicyMapping: PCERT_POLICY_MAPPING?
        get() = memberAt<PCERT_POLICY_MAPPINGVar>(8).value
        set(value) { memberAt<PCERT_POLICY_MAPPINGVar>(8).value = value }
    
}

class _CERT_POLICY_CONSTRAINTS_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var fRequireExplicitPolicy: WINBOOL
        get() = memberAt<WINBOOLVar>(0).value
        set(value) { memberAt<WINBOOLVar>(0).value = value }
    
    var dwRequireExplicitPolicySkipCerts: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var fInhibitPolicyMapping: WINBOOL
        get() = memberAt<WINBOOLVar>(8).value
        set(value) { memberAt<WINBOOLVar>(8).value = value }
    
    var dwInhibitPolicyMappingSkipCerts: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var cValue: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var rgValue: PCRYPT_DER_BLOB?
        get() = memberAt<PCRYPT_DER_BLOBVar>(16).value
        set(value) { memberAt<PCRYPT_DER_BLOBVar>(16).value = value }
    
}

class _CRYPT_CONTENT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val Content: CRYPT_DER_BLOB
        get() = memberAt(8)
    
}

class _CRYPT_SEQUENCE_OF_ANY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cValue: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgValue: PCRYPT_DER_BLOB?
        get() = memberAt<PCRYPT_DER_BLOBVar>(8).value
        set(value) { memberAt<PCRYPT_DER_BLOBVar>(8).value = value }
    
}

class _CERT_AUTHORITY_KEY_ID2_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val KeyId: CRYPT_DATA_BLOB
        get() = memberAt(0)
    
    val AuthorityCertIssuer: CERT_ALT_NAME_INFO
        get() = memberAt(16)
    
    val AuthorityCertSerialNumber: CRYPT_INTEGER_BLOB
        get() = memberAt(32)
    
}

class _CERT_ACCESS_DESCRIPTION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pszAccessMethod: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val AccessLocation: CERT_ALT_NAME_ENTRY
        get() = memberAt(8)
    
}

class _CERT_AUTHORITY_INFO_ACCESS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cAccDescr: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgAccDescr: PCERT_ACCESS_DESCRIPTION?
        get() = memberAt<PCERT_ACCESS_DESCRIPTIONVar>(8).value
        set(value) { memberAt<PCERT_ACCESS_DESCRIPTIONVar>(8).value = value }
    
}

class _CRL_DIST_POINT_NAME(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwDistPointNameChoice: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct100(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val FullName: CERT_ALT_NAME_INFO
        get() = memberAt(0)
    
}

class _CRL_DIST_POINT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    val DistPointName: CRL_DIST_POINT_NAME
        get() = memberAt(0)
    
    val ReasonFlags: CRYPT_BIT_BLOB
        get() = memberAt(24)
    
    val CRLIssuer: CERT_ALT_NAME_INFO
        get() = memberAt(48)
    
}

class _CRL_DIST_POINTS_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cDistPoint: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgDistPoint: PCRL_DIST_POINT?
        get() = memberAt<PCRL_DIST_POINTVar>(8).value
        set(value) { memberAt<PCRL_DIST_POINTVar>(8).value = value }
    
}

class _CROSS_CERT_DIST_POINTS_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var dwSyncDeltaTime: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cDistPoint: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var rgDistPoint: PCERT_ALT_NAME_INFO?
        get() = memberAt<PCERT_ALT_NAME_INFOVar>(8).value
        set(value) { memberAt<PCERT_ALT_NAME_INFOVar>(8).value = value }
    
}

class _CERT_PAIR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val Forward: CERT_BLOB
        get() = memberAt(0)
    
    val Reverse: CERT_BLOB
        get() = memberAt(16)
    
}

class _CRL_ISSUING_DIST_POINT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    val DistPointName: CRL_DIST_POINT_NAME
        get() = memberAt(0)
    
    var fOnlyContainsUserCerts: WINBOOL
        get() = memberAt<WINBOOLVar>(24).value
        set(value) { memberAt<WINBOOLVar>(24).value = value }
    
    var fOnlyContainsCACerts: WINBOOL
        get() = memberAt<WINBOOLVar>(28).value
        set(value) { memberAt<WINBOOLVar>(28).value = value }
    
    val OnlySomeReasonFlags: CRYPT_BIT_BLOB
        get() = memberAt(32)
    
    var fIndirectCRL: WINBOOL
        get() = memberAt<WINBOOLVar>(56).value
        set(value) { memberAt<WINBOOLVar>(56).value = value }
    
}

class _CERT_GENERAL_SUBTREE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    val Base: CERT_ALT_NAME_ENTRY
        get() = memberAt(0)
    
    var dwMinimum: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var fMaximum: WINBOOL
        get() = memberAt<WINBOOLVar>(28).value
        set(value) { memberAt<WINBOOLVar>(28).value = value }
    
    var dwMaximum: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _CERT_NAME_CONSTRAINTS_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cPermittedSubtree: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgPermittedSubtree: PCERT_GENERAL_SUBTREE?
        get() = memberAt<PCERT_GENERAL_SUBTREEVar>(8).value
        set(value) { memberAt<PCERT_GENERAL_SUBTREEVar>(8).value = value }
    
    var cExcludedSubtree: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgExcludedSubtree: PCERT_GENERAL_SUBTREE?
        get() = memberAt<PCERT_GENERAL_SUBTREEVar>(24).value
        set(value) { memberAt<PCERT_GENERAL_SUBTREEVar>(24).value = value }
    
}

class _CERT_DSS_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val p: CRYPT_UINT_BLOB
        get() = memberAt(0)
    
    val q: CRYPT_UINT_BLOB
        get() = memberAt(16)
    
    val g: CRYPT_UINT_BLOB
        get() = memberAt(32)
    
}

class _CERT_DH_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val p: CRYPT_UINT_BLOB
        get() = memberAt(0)
    
    val g: CRYPT_UINT_BLOB
        get() = memberAt(16)
    
}

class _CERT_ECC_SIGNATURE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val r: CRYPT_UINT_BLOB
        get() = memberAt(0)
    
    val s: CRYPT_UINT_BLOB
        get() = memberAt(16)
    
}

class _CERT_X942_DH_VALIDATION_PARAMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val seed: CRYPT_BIT_BLOB
        get() = memberAt(0)
    
    var pgenCounter: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _CERT_X942_DH_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    val p: CRYPT_UINT_BLOB
        get() = memberAt(0)
    
    val g: CRYPT_UINT_BLOB
        get() = memberAt(16)
    
    val q: CRYPT_UINT_BLOB
        get() = memberAt(32)
    
    val j: CRYPT_UINT_BLOB
        get() = memberAt(48)
    
    var pValidationParams: PCERT_X942_DH_VALIDATION_PARAMS?
        get() = memberAt<PCERT_X942_DH_VALIDATION_PARAMSVar>(64).value
        set(value) { memberAt<PCERT_X942_DH_VALIDATION_PARAMSVar>(64).value = value }
    
}

class _CRYPT_X942_OTHER_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pszContentEncryptionObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val rgbCounter: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(8)
    
    val rgbKeyLength: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(12)
    
    val PubInfo: CRYPT_DATA_BLOB
        get() = memberAt(16)
    
}

class _CRYPT_ECC_CMS_SHARED_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val Algorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(0)
    
    val EntityUInfo: CRYPT_DATA_BLOB
        get() = memberAt(24)
    
    val rgbSuppPubInfo: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(40)
    
}

class _CRYPT_RC2_CBC_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var fIV: WINBOOL
        get() = memberAt<WINBOOLVar>(4).value
        set(value) { memberAt<WINBOOLVar>(4).value = value }
    
    val rgbIV: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(8)
    
}

class _CRYPT_SMIME_CAPABILITY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val Parameters: CRYPT_OBJID_BLOB
        get() = memberAt(8)
    
}

class _CRYPT_SMIME_CAPABILITIES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cCapability: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgCapability: PCRYPT_SMIME_CAPABILITY?
        get() = memberAt<PCRYPT_SMIME_CAPABILITYVar>(8).value
        set(value) { memberAt<PCRYPT_SMIME_CAPABILITYVar>(8).value = value }
    
}

class _CERT_QC_STATEMENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszStatementId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val StatementInfo: CRYPT_OBJID_BLOB
        get() = memberAt(8)
    
}

class _CERT_QC_STATEMENTS_EXT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cStatement: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgStatement: PCERT_QC_STATEMENT?
        get() = memberAt<PCERT_QC_STATEMENTVar>(8).value
        set(value) { memberAt<PCERT_QC_STATEMENTVar>(8).value = value }
    
}

class _CRYPT_MASK_GEN_ALGORITHM(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
}

class _CRYPT_RSA_SSA_PSS_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(0)
    
    val MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM
        get() = memberAt(24)
    
    var dwSaltLength: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var dwTrailerField: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
}

class _CRYPT_PSOURCE_ALGORITHM(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val EncodingParameters: CRYPT_DATA_BLOB
        get() = memberAt(8)
    
}

class _CRYPT_RSAES_OAEP_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(0)
    
    val MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM
        get() = memberAt(24)
    
    val PSourceAlgorithm: CRYPT_PSOURCE_ALGORITHM
        get() = memberAt(56)
    
}

class _CMC_TAGGED_ATTRIBUTE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var dwBodyPartID: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Attribute: CRYPT_ATTRIBUTE
        get() = memberAt(8)
    
}

class _CMC_TAGGED_CERT_REQUEST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwBodyPartID: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val SignedCertRequest: CRYPT_DER_BLOB
        get() = memberAt(8)
    
}

class _CMC_TAGGED_REQUEST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var dwTaggedRequestChoice: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct101(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pTaggedCertRequest: PCMC_TAGGED_CERT_REQUEST?
        get() = memberAt<PCMC_TAGGED_CERT_REQUESTVar>(0).value
        set(value) { memberAt<PCMC_TAGGED_CERT_REQUESTVar>(0).value = value }
    
}

class _CMC_TAGGED_CONTENT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwBodyPartID: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val EncodedContentInfo: CRYPT_DER_BLOB
        get() = memberAt(8)
    
}

class _CMC_TAGGED_OTHER_MSG(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var dwBodyPartID: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    val Value: CRYPT_OBJID_BLOB
        get() = memberAt(16)
    
}

class _CMC_DATA_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var cTaggedAttribute: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgTaggedAttribute: PCMC_TAGGED_ATTRIBUTE?
        get() = memberAt<PCMC_TAGGED_ATTRIBUTEVar>(8).value
        set(value) { memberAt<PCMC_TAGGED_ATTRIBUTEVar>(8).value = value }
    
    var cTaggedRequest: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgTaggedRequest: PCMC_TAGGED_REQUEST?
        get() = memberAt<PCMC_TAGGED_REQUESTVar>(24).value
        set(value) { memberAt<PCMC_TAGGED_REQUESTVar>(24).value = value }
    
    var cTaggedContentInfo: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var rgTaggedContentInfo: PCMC_TAGGED_CONTENT_INFO?
        get() = memberAt<PCMC_TAGGED_CONTENT_INFOVar>(40).value
        set(value) { memberAt<PCMC_TAGGED_CONTENT_INFOVar>(40).value = value }
    
    var cTaggedOtherMsg: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var rgTaggedOtherMsg: PCMC_TAGGED_OTHER_MSG?
        get() = memberAt<PCMC_TAGGED_OTHER_MSGVar>(56).value
        set(value) { memberAt<PCMC_TAGGED_OTHER_MSGVar>(56).value = value }
    
}

class _CMC_RESPONSE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cTaggedAttribute: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgTaggedAttribute: PCMC_TAGGED_ATTRIBUTE?
        get() = memberAt<PCMC_TAGGED_ATTRIBUTEVar>(8).value
        set(value) { memberAt<PCMC_TAGGED_ATTRIBUTEVar>(8).value = value }
    
    var cTaggedContentInfo: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgTaggedContentInfo: PCMC_TAGGED_CONTENT_INFO?
        get() = memberAt<PCMC_TAGGED_CONTENT_INFOVar>(24).value
        set(value) { memberAt<PCMC_TAGGED_CONTENT_INFOVar>(24).value = value }
    
    var cTaggedOtherMsg: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var rgTaggedOtherMsg: PCMC_TAGGED_OTHER_MSG?
        get() = memberAt<PCMC_TAGGED_OTHER_MSGVar>(40).value
        set(value) { memberAt<PCMC_TAGGED_OTHER_MSGVar>(40).value = value }
    
}

class _CMC_PEND_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    val PendToken: CRYPT_DATA_BLOB
        get() = memberAt(0)
    
    val PendTime: FILETIME
        get() = memberAt(16)
    
}

class _CMC_STATUS_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwStatus: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cBodyList: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var rgdwBodyList: CPointer<DWORDVar>?
        get() = memberAt<CPointerVar<DWORDVar>>(8).value
        set(value) { memberAt<CPointerVar<DWORDVar>>(8).value = value }
    
    var pwszStatusString: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var dwOtherInfoChoice: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class anonymousStruct102(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var dwFailInfo: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pPendInfo: PCMC_PEND_INFO?
        get() = memberAt<PCMC_PEND_INFOVar>(0).value
        set(value) { memberAt<PCMC_PEND_INFOVar>(0).value = value }
    
}

class _CMC_ADD_EXTENSIONS_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var dwCmcDataReference: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cCertReference: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var rgdwCertReference: CPointer<DWORDVar>?
        get() = memberAt<CPointerVar<DWORDVar>>(8).value
        set(value) { memberAt<CPointerVar<DWORDVar>>(8).value = value }
    
    var cExtension: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgExtension: PCERT_EXTENSION?
        get() = memberAt<PCERT_EXTENSIONVar>(24).value
        set(value) { memberAt<PCERT_EXTENSIONVar>(24).value = value }
    
}

class _CMC_ADD_ATTRIBUTES_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var dwCmcDataReference: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cCertReference: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var rgdwCertReference: CPointer<DWORDVar>?
        get() = memberAt<CPointerVar<DWORDVar>>(8).value
        set(value) { memberAt<CPointerVar<DWORDVar>>(8).value = value }
    
    var cAttribute: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgAttribute: PCRYPT_ATTRIBUTE?
        get() = memberAt<PCRYPT_ATTRIBUTEVar>(24).value
        set(value) { memberAt<PCRYPT_ATTRIBUTEVar>(24).value = value }
    
}

class _CERT_TEMPLATE_EXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var dwMajorVersion: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var fMinorVersion: WINBOOL
        get() = memberAt<WINBOOLVar>(12).value
        set(value) { memberAt<WINBOOLVar>(12).value = value }
    
    var dwMinorVersion: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _CERT_HASHED_URL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(0)
    
    val Hash: CRYPT_HASH_BLOB
        get() = memberAt(24)
    
    var pwszUrl: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
}

class _CERT_LOGOTYPE_DETAILS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pwszMimeType: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var cHashedUrl: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var rgHashedUrl: PCERT_HASHED_URL?
        get() = memberAt<PCERT_HASHED_URLVar>(16).value
        set(value) { memberAt<PCERT_HASHED_URLVar>(16).value = value }
    
}

class _CERT_LOGOTYPE_REFERENCE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cHashedUrl: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgHashedUrl: PCERT_HASHED_URL?
        get() = memberAt<PCERT_HASHED_URLVar>(8).value
        set(value) { memberAt<PCERT_HASHED_URLVar>(8).value = value }
    
}

class _CERT_LOGOTYPE_IMAGE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var dwLogotypeImageInfoChoice: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwFileSize: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwXSize: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwYSize: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwLogotypeImageResolutionChoice: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var pwszLanguage: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
}

class anonymousStruct103(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var dwNumBits: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwTableSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _CERT_LOGOTYPE_IMAGE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val LogotypeDetails: CERT_LOGOTYPE_DETAILS
        get() = memberAt(0)
    
    var pLogotypeImageInfo: PCERT_LOGOTYPE_IMAGE_INFO?
        get() = memberAt<PCERT_LOGOTYPE_IMAGE_INFOVar>(24).value
        set(value) { memberAt<PCERT_LOGOTYPE_IMAGE_INFOVar>(24).value = value }
    
}

class _CERT_LOGOTYPE_AUDIO_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwFileSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwPlayTime: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwChannels: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwSampleRate: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var pwszLanguage: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
}

class _CERT_LOGOTYPE_AUDIO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val LogotypeDetails: CERT_LOGOTYPE_DETAILS
        get() = memberAt(0)
    
    var pLogotypeAudioInfo: PCERT_LOGOTYPE_AUDIO_INFO?
        get() = memberAt<PCERT_LOGOTYPE_AUDIO_INFOVar>(24).value
        set(value) { memberAt<PCERT_LOGOTYPE_AUDIO_INFOVar>(24).value = value }
    
}

class _CERT_LOGOTYPE_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cLogotypeImage: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgLogotypeImage: PCERT_LOGOTYPE_IMAGE?
        get() = memberAt<PCERT_LOGOTYPE_IMAGEVar>(8).value
        set(value) { memberAt<PCERT_LOGOTYPE_IMAGEVar>(8).value = value }
    
    var cLogotypeAudio: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgLogotypeAudio: PCERT_LOGOTYPE_AUDIO?
        get() = memberAt<PCERT_LOGOTYPE_AUDIOVar>(24).value
        set(value) { memberAt<PCERT_LOGOTYPE_AUDIOVar>(24).value = value }
    
}

class _CERT_LOGOTYPE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var dwLogotypeInfoChoice: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct104(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pLogotypeDirectInfo: PCERT_LOGOTYPE_DATA?
        get() = memberAt<PCERT_LOGOTYPE_DATAVar>(0).value
        set(value) { memberAt<PCERT_LOGOTYPE_DATAVar>(0).value = value }
    
    var pLogotypeIndirectInfo: PCERT_LOGOTYPE_REFERENCE?
        get() = memberAt<PCERT_LOGOTYPE_REFERENCEVar>(0).value
        set(value) { memberAt<PCERT_LOGOTYPE_REFERENCEVar>(0).value = value }
    
}

class _CERT_OTHER_LOGOTYPE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    val LogotypeInfo: CERT_LOGOTYPE_INFO
        get() = memberAt(8)
    
}

class _CERT_LOGOTYPE_EXT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cCommunityLogo: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgCommunityLogo: PCERT_LOGOTYPE_INFO?
        get() = memberAt<PCERT_LOGOTYPE_INFOVar>(8).value
        set(value) { memberAt<PCERT_LOGOTYPE_INFOVar>(8).value = value }
    
    var pIssuerLogo: PCERT_LOGOTYPE_INFO?
        get() = memberAt<PCERT_LOGOTYPE_INFOVar>(16).value
        set(value) { memberAt<PCERT_LOGOTYPE_INFOVar>(16).value = value }
    
    var pSubjectLogo: PCERT_LOGOTYPE_INFO?
        get() = memberAt<PCERT_LOGOTYPE_INFOVar>(24).value
        set(value) { memberAt<PCERT_LOGOTYPE_INFOVar>(24).value = value }
    
    var cOtherLogo: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var rgOtherLogo: PCERT_OTHER_LOGOTYPE_INFO?
        get() = memberAt<PCERT_OTHER_LOGOTYPE_INFOVar>(40).value
        set(value) { memberAt<PCERT_OTHER_LOGOTYPE_INFOVar>(40).value = value }
    
}

class _CERT_BIOMETRIC_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var dwTypeOfBiometricDataChoice: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val HashedUrl: CERT_HASHED_URL
        get() = memberAt(16)
    
}

class anonymousStruct105(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var dwPredefined: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _CERT_BIOMETRIC_EXT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cBiometricData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgBiometricData: PCERT_BIOMETRIC_DATA?
        get() = memberAt<PCERT_BIOMETRIC_DATAVar>(8).value
        set(value) { memberAt<PCERT_BIOMETRIC_DATAVar>(8).value = value }
    
}

class _OCSP_SIGNATURE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    val SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(0)
    
    val Signature: CRYPT_BIT_BLOB
        get() = memberAt(24)
    
    var cCertEncoded: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var rgCertEncoded: PCERT_BLOB?
        get() = memberAt<PCERT_BLOBVar>(56).value
        set(value) { memberAt<PCERT_BLOBVar>(56).value = value }
    
}

class _OCSP_SIGNED_REQUEST_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    val ToBeSigned: CRYPT_DER_BLOB
        get() = memberAt(0)
    
    var pOptionalSignatureInfo: POCSP_SIGNATURE_INFO?
        get() = memberAt<POCSP_SIGNATURE_INFOVar>(16).value
        set(value) { memberAt<POCSP_SIGNATURE_INFOVar>(16).value = value }
    
}

class _OCSP_CERT_ID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(0)
    
    val IssuerNameHash: CRYPT_HASH_BLOB
        get() = memberAt(24)
    
    val IssuerKeyHash: CRYPT_HASH_BLOB
        get() = memberAt(40)
    
    val SerialNumber: CRYPT_INTEGER_BLOB
        get() = memberAt(56)
    
}

class _OCSP_REQUEST_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 8)
    
    val CertId: OCSP_CERT_ID
        get() = memberAt(0)
    
    var cExtension: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
    var rgExtension: PCERT_EXTENSION?
        get() = memberAt<PCERT_EXTENSIONVar>(80).value
        set(value) { memberAt<PCERT_EXTENSIONVar>(80).value = value }
    
}

class _OCSP_REQUEST_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pRequestorName: PCERT_ALT_NAME_ENTRY?
        get() = memberAt<PCERT_ALT_NAME_ENTRYVar>(8).value
        set(value) { memberAt<PCERT_ALT_NAME_ENTRYVar>(8).value = value }
    
    var cRequestEntry: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgRequestEntry: POCSP_REQUEST_ENTRY?
        get() = memberAt<POCSP_REQUEST_ENTRYVar>(24).value
        set(value) { memberAt<POCSP_REQUEST_ENTRYVar>(24).value = value }
    
    var cExtension: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var rgExtension: PCERT_EXTENSION?
        get() = memberAt<PCERT_EXTENSIONVar>(40).value
        set(value) { memberAt<PCERT_EXTENSIONVar>(40).value = value }
    
}

class _OCSP_RESPONSE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var dwStatus: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszObjId: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    val Value: CRYPT_OBJID_BLOB
        get() = memberAt(16)
    
}

class _OCSP_BASIC_SIGNED_RESPONSE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    val ToBeSigned: CRYPT_DER_BLOB
        get() = memberAt(0)
    
    val SignatureInfo: OCSP_SIGNATURE_INFO
        get() = memberAt(16)
    
}

class _OCSP_BASIC_REVOKED_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val RevocationDate: FILETIME
        get() = memberAt(0)
    
    var dwCrlReasonCode: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _OCSP_BASIC_RESPONSE_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(120, 8)
    
    val CertId: OCSP_CERT_ID
        get() = memberAt(0)
    
    var dwCertStatus: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
    val ThisUpdate: FILETIME
        get() = memberAt(88)
    
    val NextUpdate: FILETIME
        get() = memberAt(96)
    
    var cExtension: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var rgExtension: PCERT_EXTENSION?
        get() = memberAt<PCERT_EXTENSIONVar>(112).value
        set(value) { memberAt<PCERT_EXTENSIONVar>(112).value = value }
    
}

class anonymousStruct106(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pRevokedInfo: POCSP_BASIC_REVOKED_INFO?
        get() = memberAt<POCSP_BASIC_REVOKED_INFOVar>(0).value
        set(value) { memberAt<POCSP_BASIC_REVOKED_INFOVar>(0).value = value }
    
}

class _OCSP_BASIC_RESPONSE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwResponderIdChoice: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val ProducedAt: FILETIME
        get() = memberAt(24)
    
    var cResponseEntry: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var rgResponseEntry: POCSP_BASIC_RESPONSE_ENTRY?
        get() = memberAt<POCSP_BASIC_RESPONSE_ENTRYVar>(40).value
        set(value) { memberAt<POCSP_BASIC_RESPONSE_ENTRYVar>(40).value = value }
    
    var cExtension: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var rgExtension: PCERT_EXTENSION?
        get() = memberAt<PCERT_EXTENSIONVar>(56).value
        set(value) { memberAt<PCERT_EXTENSIONVar>(56).value = value }
    
}

class anonymousStruct107(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val ByNameResponderId: CERT_NAME_BLOB
        get() = memberAt(0)
    
    val ByKeyResponderId: CRYPT_HASH_BLOB
        get() = memberAt(0)
    
}

class _CRYPT_OID_FUNC_ENTRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pszOID: LPCSTR?
        get() = memberAt<LPCSTRVar>(0).value
        set(value) { memberAt<LPCSTRVar>(0).value = value }
    
    var pvFuncAddr: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(8).value
        set(value) { memberAt<COpaquePointerVar>(8).value = value }
    
}

class _CRYPT_OID_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszOID: LPCSTR?
        get() = memberAt<LPCSTRVar>(8).value
        set(value) { memberAt<LPCSTRVar>(8).value = value }
    
    var pwszName: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(16).value
        set(value) { memberAt<LPCWSTRVar>(16).value = value }
    
    var dwGroupId: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val ExtraInfo: CRYPT_DATA_BLOB
        get() = memberAt(32)
    
}

class anonymousStruct108(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var dwValue: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Algid: ALG_ID
        get() = memberAt<ALG_IDVar>(0).value
        set(value) { memberAt<ALG_IDVar>(0).value = value }
    
    var dwLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _CERT_STRONG_SIGN_SERIALIZED_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pwszCNGSignHashAlgids: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pwszCNGPubKeyMinBitLengths: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
}

class _CERT_STRONG_SIGN_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwInfoChoice: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class anonymousStruct109(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pvInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(0).value
        set(value) { memberAt<COpaquePointerVar>(0).value = value }
    
    var pSerializedInfo: PCERT_STRONG_SIGN_SERIALIZED_INFO?
        get() = memberAt<PCERT_STRONG_SIGN_SERIALIZED_INFOVar>(0).value
        set(value) { memberAt<PCERT_STRONG_SIGN_SERIALIZED_INFOVar>(0).value = value }
    
    var pszOID: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _CERT_ISSUER_SERIAL_NUMBER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val Issuer: CERT_NAME_BLOB
        get() = memberAt(0)
    
    val SerialNumber: CRYPT_INTEGER_BLOB
        get() = memberAt(16)
    
}

class _CERT_ID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwIdChoice: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct110(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val IssuerSerialNumber: CERT_ISSUER_SERIAL_NUMBER
        get() = memberAt(0)
    
    val KeyId: CRYPT_HASH_BLOB
        get() = memberAt(0)
    
    val HashId: CRYPT_HASH_BLOB
        get() = memberAt(0)
    
}

class _CMSG_SIGNER_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pCertInfo: PCERT_INFO?
        get() = memberAt<PCERT_INFOVar>(8).value
        set(value) { memberAt<PCERT_INFOVar>(8).value = value }
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(32)
    
    var pvHashAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(56).value
        set(value) { memberAt<COpaquePointerVar>(56).value = value }
    
    var cAuthAttr: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var rgAuthAttr: PCRYPT_ATTRIBUTE?
        get() = memberAt<PCRYPT_ATTRIBUTEVar>(72).value
        set(value) { memberAt<PCRYPT_ATTRIBUTEVar>(72).value = value }
    
    var cUnauthAttr: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var rgUnauthAttr: PCRYPT_ATTRIBUTE?
        get() = memberAt<PCRYPT_ATTRIBUTEVar>(88).value
        set(value) { memberAt<PCRYPT_ATTRIBUTEVar>(88).value = value }
    
}

class anonymousStruct111(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var hCryptProv: HCRYPTPROV
        get() = memberAt<HCRYPTPROVVar>(0).value
        set(value) { memberAt<HCRYPTPROVVar>(0).value = value }
    
    var hNCryptKey: NCRYPT_KEY_HANDLE
        get() = memberAt<NCRYPT_KEY_HANDLEVar>(0).value
        set(value) { memberAt<NCRYPT_KEY_HANDLEVar>(0).value = value }
    
}

class _CMSG_SIGNED_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cSigners: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var rgSigners: PCMSG_SIGNER_ENCODE_INFO?
        get() = memberAt<PCMSG_SIGNER_ENCODE_INFOVar>(8).value
        set(value) { memberAt<PCMSG_SIGNER_ENCODE_INFOVar>(8).value = value }
    
    var cCertEncoded: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgCertEncoded: PCERT_BLOB?
        get() = memberAt<PCERT_BLOBVar>(24).value
        set(value) { memberAt<PCERT_BLOBVar>(24).value = value }
    
    var cCrlEncoded: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var rgCrlEncoded: PCRL_BLOB?
        get() = memberAt<PCRL_BLOBVar>(40).value
        set(value) { memberAt<PCRL_BLOBVar>(40).value = value }
    
}

class _CMSG_RECIPIENT_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var dwRecipientChoice: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _CMSG_ENVELOPED_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hCryptProv: HCRYPTPROV_LEGACY
        get() = memberAt<HCRYPTPROV_LEGACYVar>(8).value
        set(value) { memberAt<HCRYPTPROV_LEGACYVar>(8).value = value }
    
    val ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(16)
    
    var pvEncryptionAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(40).value
        set(value) { memberAt<COpaquePointerVar>(40).value = value }
    
    var cRecipients: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var rgpRecipients: CPointer<PCERT_INFOVar>?
        get() = memberAt<CPointerVar<PCERT_INFOVar>>(56).value
        set(value) { memberAt<CPointerVar<PCERT_INFOVar>>(56).value = value }
    
}

class _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(112, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
    var pvKeyEncryptionAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(32).value
        set(value) { memberAt<COpaquePointerVar>(32).value = value }
    
    var hCryptProv: HCRYPTPROV_LEGACY
        get() = memberAt<HCRYPTPROV_LEGACYVar>(40).value
        set(value) { memberAt<HCRYPTPROV_LEGACYVar>(40).value = value }
    
    val RecipientPublicKey: CRYPT_BIT_BLOB
        get() = memberAt(48)
    
    val RecipientId: CERT_ID
        get() = memberAt(72)
    
}

class _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val RecipientPublicKey: CRYPT_BIT_BLOB
        get() = memberAt(8)
    
    val RecipientId: CERT_ID
        get() = memberAt(32)
    
    val Date: FILETIME
        get() = memberAt(72)
    
    var pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE?
        get() = memberAt<PCRYPT_ATTRIBUTE_TYPE_VALUEVar>(80).value
        set(value) { memberAt<PCRYPT_ATTRIBUTE_TYPE_VALUEVar>(80).value = value }
    
}

class _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(128, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
    var pvKeyEncryptionAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(32).value
        set(value) { memberAt<COpaquePointerVar>(32).value = value }
    
    val KeyWrapAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(40)
    
    var pvKeyWrapAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(64).value
        set(value) { memberAt<COpaquePointerVar>(64).value = value }
    
    var hCryptProv: HCRYPTPROV_LEGACY
        get() = memberAt<HCRYPTPROV_LEGACYVar>(72).value
        set(value) { memberAt<HCRYPTPROV_LEGACYVar>(72).value = value }
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var dwKeyChoice: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    val UserKeyingMaterial: CRYPT_DATA_BLOB
        get() = memberAt(96)
    
    var cRecipientEncryptedKeys: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var rgpRecipientEncryptedKeys: CPointer<PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFOVar>?
        get() = memberAt<CPointerVar<PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFOVar>>(120).value
        set(value) { memberAt<CPointerVar<PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFOVar>>(120).value = value }
    
}

class anonymousStruct112(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pEphemeralAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER?
        get() = memberAt<PCRYPT_ALGORITHM_IDENTIFIERVar>(0).value
        set(value) { memberAt<PCRYPT_ALGORITHM_IDENTIFIERVar>(0).value = value }
    
    var pSenderId: PCERT_ID?
        get() = memberAt<PCERT_IDVar>(0).value
        set(value) { memberAt<PCERT_IDVar>(0).value = value }
    
}

class _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
    var pvKeyEncryptionAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(32).value
        set(value) { memberAt<COpaquePointerVar>(32).value = value }
    
    var hCryptProv: HCRYPTPROV
        get() = memberAt<HCRYPTPROVVar>(40).value
        set(value) { memberAt<HCRYPTPROVVar>(40).value = value }
    
    var dwKeyChoice: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    val KeyId: CRYPT_DATA_BLOB
        get() = memberAt(64)
    
    val Date: FILETIME
        get() = memberAt(80)
    
    var pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE?
        get() = memberAt<PCRYPT_ATTRIBUTE_TYPE_VALUEVar>(88).value
        set(value) { memberAt<PCRYPT_ATTRIBUTE_TYPE_VALUEVar>(88).value = value }
    
}

class anonymousStruct113(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var hKeyEncryptionKey: HCRYPTKEY
        get() = memberAt<HCRYPTKEYVar>(0).value
        set(value) { memberAt<HCRYPTKEYVar>(0).value = value }
    
    var pvKeyEncryptionKey: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(0).value
        set(value) { memberAt<COpaquePointerVar>(0).value = value }
    
}

class anonymousStruct114(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pKeyTrans: PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO?
        get() = memberAt<PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFOVar>(0).value
        set(value) { memberAt<PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFOVar>(0).value = value }
    
    var pKeyAgree: PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO?
        get() = memberAt<PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFOVar>(0).value
        set(value) { memberAt<PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFOVar>(0).value = value }
    
    var pMailList: PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO?
        get() = memberAt<PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFOVar>(0).value
        set(value) { memberAt<PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFOVar>(0).value = value }
    
}

class _CMSG_RC2_AUX_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwBitLen: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _CMSG_SP3_COMPATIBLE_AUX_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _CMSG_RC4_AUX_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwBitLen: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(120, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val SignedInfo: CMSG_SIGNED_ENCODE_INFO
        get() = memberAt(8)
    
    val EnvelopedInfo: CMSG_ENVELOPED_ENCODE_INFO
        get() = memberAt(56)
    
}

class _CMSG_HASHED_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hCryptProv: HCRYPTPROV_LEGACY
        get() = memberAt<HCRYPTPROV_LEGACYVar>(8).value
        set(value) { memberAt<HCRYPTPROV_LEGACYVar>(8).value = value }
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(16)
    
    var pvHashAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(40).value
        set(value) { memberAt<COpaquePointerVar>(40).value = value }
    
}

class _CMSG_ENCRYPTED_ENCODE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
    var pvEncryptionAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(32).value
        set(value) { memberAt<COpaquePointerVar>(32).value = value }
    
}

class _CMSG_STREAM_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbContent: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pfnStreamOutput: PFN_CMSG_STREAM_OUTPUT?
        get() = memberAt<PFN_CMSG_STREAM_OUTPUTVar>(8).value
        set(value) { memberAt<PFN_CMSG_STREAM_OUTPUTVar>(8).value = value }
    
    var pvArg: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(16).value
        set(value) { memberAt<COpaquePointerVar>(16).value = value }
    
}

class _CMSG_SIGNER_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(136, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Issuer: CERT_NAME_BLOB
        get() = memberAt(8)
    
    val SerialNumber: CRYPT_INTEGER_BLOB
        get() = memberAt(24)
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(40)
    
    val HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(64)
    
    val EncryptedHash: CRYPT_DATA_BLOB
        get() = memberAt(88)
    
    val AuthAttrs: CRYPT_ATTRIBUTES
        get() = memberAt(104)
    
    val UnauthAttrs: CRYPT_ATTRIBUTES
        get() = memberAt(120)
    
}

class _CMSG_CMS_SIGNER_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(144, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val SignerId: CERT_ID
        get() = memberAt(8)
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(48)
    
    val HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(72)
    
    val EncryptedHash: CRYPT_DATA_BLOB
        get() = memberAt(96)
    
    val AuthAttrs: CRYPT_ATTRIBUTES
        get() = memberAt(112)
    
    val UnauthAttrs: CRYPT_ATTRIBUTES
        get() = memberAt(128)
    
}

class _CMSG_KEY_TRANS_RECIPIENT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val RecipientId: CERT_ID
        get() = memberAt(8)
    
    val KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(48)
    
    val EncryptedKey: CRYPT_DATA_BLOB
        get() = memberAt(72)
    
}

class _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    val RecipientId: CERT_ID
        get() = memberAt(0)
    
    val EncryptedKey: CRYPT_DATA_BLOB
        get() = memberAt(40)
    
    val Date: FILETIME
        get() = memberAt(56)
    
    var pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE?
        get() = memberAt<PCRYPT_ATTRIBUTE_TYPE_VALUEVar>(64).value
        set(value) { memberAt<PCRYPT_ATTRIBUTE_TYPE_VALUEVar>(64).value = value }
    
}

class _CMSG_KEY_AGREE_RECIPIENT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(112, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwOriginatorChoice: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val UserKeyingMaterial: CRYPT_DATA_BLOB
        get() = memberAt(56)
    
    val KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(72)
    
    var cRecipientEncryptedKeys: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var rgpRecipientEncryptedKeys: CPointer<PCMSG_RECIPIENT_ENCRYPTED_KEY_INFOVar>?
        get() = memberAt<CPointerVar<PCMSG_RECIPIENT_ENCRYPTED_KEY_INFOVar>>(104).value
        set(value) { memberAt<CPointerVar<PCMSG_RECIPIENT_ENCRYPTED_KEY_INFOVar>>(104).value = value }
    
}

class anonymousStruct115(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val OriginatorCertId: CERT_ID
        get() = memberAt(0)
    
    val OriginatorPublicKeyInfo: CERT_PUBLIC_KEY_INFO
        get() = memberAt(0)
    
}

class _CMSG_MAIL_LIST_RECIPIENT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val KeyId: CRYPT_DATA_BLOB
        get() = memberAt(8)
    
    val KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(24)
    
    val EncryptedKey: CRYPT_DATA_BLOB
        get() = memberAt(48)
    
    val Date: FILETIME
        get() = memberAt(64)
    
    var pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE?
        get() = memberAt<PCRYPT_ATTRIBUTE_TYPE_VALUEVar>(72).value
        set(value) { memberAt<PCRYPT_ATTRIBUTE_TYPE_VALUEVar>(72).value = value }
    
}

class _CMSG_CMS_RECIPIENT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var dwRecipientChoice: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class anonymousStruct116(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pKeyTrans: PCMSG_KEY_TRANS_RECIPIENT_INFO?
        get() = memberAt<PCMSG_KEY_TRANS_RECIPIENT_INFOVar>(0).value
        set(value) { memberAt<PCMSG_KEY_TRANS_RECIPIENT_INFOVar>(0).value = value }
    
    var pKeyAgree: PCMSG_KEY_AGREE_RECIPIENT_INFO?
        get() = memberAt<PCMSG_KEY_AGREE_RECIPIENT_INFOVar>(0).value
        set(value) { memberAt<PCMSG_KEY_AGREE_RECIPIENT_INFOVar>(0).value = value }
    
    var pMailList: PCMSG_MAIL_LIST_RECIPIENT_INFO?
        get() = memberAt<PCMSG_MAIL_LIST_RECIPIENT_INFOVar>(0).value
        set(value) { memberAt<PCMSG_MAIL_LIST_RECIPIENT_INFOVar>(0).value = value }
    
}

class _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hCryptProv: HCRYPTPROV_LEGACY
        get() = memberAt<HCRYPTPROV_LEGACYVar>(8).value
        set(value) { memberAt<HCRYPTPROV_LEGACYVar>(8).value = value }
    
    var dwSignerIndex: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwSignerType: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var pvSigner: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(24).value
        set(value) { memberAt<COpaquePointerVar>(24).value = value }
    
}

class _CMSG_CTRL_DECRYPT_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwRecipientIndex: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class anonymousStruct117(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var hCryptProv: HCRYPTPROV
        get() = memberAt<HCRYPTPROVVar>(0).value
        set(value) { memberAt<HCRYPTPROVVar>(0).value = value }
    
    var hNCryptKey: NCRYPT_KEY_HANDLE
        get() = memberAt<NCRYPT_KEY_HANDLEVar>(0).value
        set(value) { memberAt<NCRYPT_KEY_HANDLEVar>(0).value = value }
    
}

class _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var pKeyTrans: PCMSG_KEY_TRANS_RECIPIENT_INFO?
        get() = memberAt<PCMSG_KEY_TRANS_RECIPIENT_INFOVar>(24).value
        set(value) { memberAt<PCMSG_KEY_TRANS_RECIPIENT_INFOVar>(24).value = value }
    
    var dwRecipientIndex: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class anonymousStruct118(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var hCryptProv: HCRYPTPROV
        get() = memberAt<HCRYPTPROVVar>(0).value
        set(value) { memberAt<HCRYPTPROVVar>(0).value = value }
    
    var hNCryptKey: NCRYPT_KEY_HANDLE
        get() = memberAt<NCRYPT_KEY_HANDLEVar>(0).value
        set(value) { memberAt<NCRYPT_KEY_HANDLEVar>(0).value = value }
    
}

class _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var pKeyAgree: PCMSG_KEY_AGREE_RECIPIENT_INFO?
        get() = memberAt<PCMSG_KEY_AGREE_RECIPIENT_INFOVar>(24).value
        set(value) { memberAt<PCMSG_KEY_AGREE_RECIPIENT_INFOVar>(24).value = value }
    
    var dwRecipientIndex: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var dwRecipientEncryptedKeyIndex: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    val OriginatorPublicKey: CRYPT_BIT_BLOB
        get() = memberAt(40)
    
}

class anonymousStruct119(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var hCryptProv: HCRYPTPROV
        get() = memberAt<HCRYPTPROVVar>(0).value
        set(value) { memberAt<HCRYPTPROVVar>(0).value = value }
    
    var hNCryptKey: NCRYPT_KEY_HANDLE
        get() = memberAt<NCRYPT_KEY_HANDLEVar>(0).value
        set(value) { memberAt<NCRYPT_KEY_HANDLEVar>(0).value = value }
    
}

class _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hCryptProv: HCRYPTPROV
        get() = memberAt<HCRYPTPROVVar>(8).value
        set(value) { memberAt<HCRYPTPROVVar>(8).value = value }
    
    var pMailList: PCMSG_MAIL_LIST_RECIPIENT_INFO?
        get() = memberAt<PCMSG_MAIL_LIST_RECIPIENT_INFOVar>(16).value
        set(value) { memberAt<PCMSG_MAIL_LIST_RECIPIENT_INFOVar>(16).value = value }
    
    var dwRecipientIndex: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var dwKeyChoice: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class anonymousStruct120(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var hKeyEncryptionKey: HCRYPTKEY
        get() = memberAt<HCRYPTKEYVar>(0).value
        set(value) { memberAt<HCRYPTKEYVar>(0).value = value }
    
    var pvKeyEncryptionKey: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(0).value
        set(value) { memberAt<COpaquePointerVar>(0).value = value }
    
}

class _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwSignerIndex: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val blob: CRYPT_DATA_BLOB
        get() = memberAt(8)
    
}

class _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwSignerIndex: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwUnauthAttrIndex: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _CMSG_CONTENT_ENCRYPT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(128, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hCryptProv: HCRYPTPROV_LEGACY
        get() = memberAt<HCRYPTPROV_LEGACYVar>(8).value
        set(value) { memberAt<HCRYPTPROV_LEGACYVar>(8).value = value }
    
    val ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(16)
    
    var pvEncryptionAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(40).value
        set(value) { memberAt<COpaquePointerVar>(40).value = value }
    
    var cRecipients: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var rgCmsRecipients: PCMSG_RECIPIENT_ENCODE_INFO?
        get() = memberAt<PCMSG_RECIPIENT_ENCODE_INFOVar>(56).value
        set(value) { memberAt<PCMSG_RECIPIENT_ENCODE_INFOVar>(56).value = value }
    
    var pfnAlloc: PFN_CMSG_ALLOC?
        get() = memberAt<PFN_CMSG_ALLOCVar>(64).value
        set(value) { memberAt<PFN_CMSG_ALLOCVar>(64).value = value }
    
    var pfnFree: PFN_CMSG_FREE?
        get() = memberAt<PFN_CMSG_FREEVar>(72).value
        set(value) { memberAt<PFN_CMSG_FREEVar>(72).value = value }
    
    var dwEncryptFlags: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var fCNG: WINBOOL
        get() = memberAt<WINBOOLVar>(100).value
        set(value) { memberAt<WINBOOLVar>(100).value = value }
    
    var pbCNGContentEncryptKeyObject: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(104).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(104).value = value }
    
    var pbContentEncryptKey: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(112).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(112).value = value }
    
    var cbContentEncryptKey: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
}

class anonymousStruct121(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var hContentEncryptKey: HCRYPTKEY
        get() = memberAt<HCRYPTKEYVar>(0).value
        set(value) { memberAt<HCRYPTKEYVar>(0).value = value }
    
    var hCNGContentEncryptKey: BCRYPT_KEY_HANDLE?
        get() = memberAt<BCRYPT_KEY_HANDLEVar>(0).value
        set(value) { memberAt<BCRYPT_KEY_HANDLEVar>(0).value = value }
    
}

class _CMSG_KEY_TRANS_ENCRYPT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwRecipientIndex: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
    val EncryptedKey: CRYPT_DATA_BLOB
        get() = memberAt(32)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
}

class _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val EncryptedKey: CRYPT_DATA_BLOB
        get() = memberAt(8)
    
}

class _CMSG_KEY_AGREE_ENCRYPT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(128, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwRecipientIndex: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
    val UserKeyingMaterial: CRYPT_DATA_BLOB
        get() = memberAt(32)
    
    var dwOriginatorChoice: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var cKeyAgreeKeyEncryptInfo: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var rgpKeyAgreeKeyEncryptInfo: CPointer<PCMSG_KEY_AGREE_KEY_ENCRYPT_INFOVar>?
        get() = memberAt<CPointerVar<PCMSG_KEY_AGREE_KEY_ENCRYPT_INFOVar>>(112).value
        set(value) { memberAt<CPointerVar<PCMSG_KEY_AGREE_KEY_ENCRYPT_INFOVar>>(112).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
}

class anonymousStruct122(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val OriginatorCertId: CERT_ID
        get() = memberAt(0)
    
    val OriginatorPublicKeyInfo: CERT_PUBLIC_KEY_INFO
        get() = memberAt(0)
    
}

class _CMSG_MAIL_LIST_ENCRYPT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwRecipientIndex: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
    val EncryptedKey: CRYPT_DATA_BLOB
        get() = memberAt(32)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
}

class _CMSG_CNG_CONTENT_DECRYPT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(8)
    
    var pfnAlloc: PFN_CMSG_ALLOC?
        get() = memberAt<PFN_CMSG_ALLOCVar>(32).value
        set(value) { memberAt<PFN_CMSG_ALLOCVar>(32).value = value }
    
    var pfnFree: PFN_CMSG_FREE?
        get() = memberAt<PFN_CMSG_FREEVar>(40).value
        set(value) { memberAt<PFN_CMSG_FREEVar>(40).value = value }
    
    var hNCryptKey: NCRYPT_KEY_HANDLE
        get() = memberAt<NCRYPT_KEY_HANDLEVar>(48).value
        set(value) { memberAt<NCRYPT_KEY_HANDLEVar>(48).value = value }
    
    var pbContentEncryptKey: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(56).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(56).value = value }
    
    var cbContentEncryptKey: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var hCNGContentEncryptKey: BCRYPT_KEY_HANDLE?
        get() = memberAt<BCRYPT_KEY_HANDLEVar>(72).value
        set(value) { memberAt<BCRYPT_KEY_HANDLEVar>(72).value = value }
    
    var pbCNGContentEncryptKeyObject: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(80).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(80).value = value }
    
}

class _CERT_CONTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwCertEncodingType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pbCertEncoded: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(8).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(8).value = value }
    
    var cbCertEncoded: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var pCertInfo: PCERT_INFO?
        get() = memberAt<PCERT_INFOVar>(24).value
        set(value) { memberAt<PCERT_INFOVar>(24).value = value }
    
    var hCertStore: HCERTSTORE?
        get() = memberAt<HCERTSTOREVar>(32).value
        set(value) { memberAt<HCERTSTOREVar>(32).value = value }
    
}

class _CRL_CONTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwCertEncodingType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pbCrlEncoded: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(8).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(8).value = value }
    
    var cbCrlEncoded: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var pCrlInfo: PCRL_INFO?
        get() = memberAt<PCRL_INFOVar>(24).value
        set(value) { memberAt<PCRL_INFOVar>(24).value = value }
    
    var hCertStore: HCERTSTORE?
        get() = memberAt<HCERTSTOREVar>(32).value
        set(value) { memberAt<HCERTSTOREVar>(32).value = value }
    
}

class _CTL_CONTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var dwMsgAndCertEncodingType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pbCtlEncoded: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(8).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(8).value = value }
    
    var cbCtlEncoded: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var pCtlInfo: PCTL_INFO?
        get() = memberAt<PCTL_INFOVar>(24).value
        set(value) { memberAt<PCTL_INFOVar>(24).value = value }
    
    var hCertStore: HCERTSTORE?
        get() = memberAt<HCERTSTOREVar>(32).value
        set(value) { memberAt<HCERTSTOREVar>(32).value = value }
    
    var hCryptMsg: HCRYPTMSG?
        get() = memberAt<HCRYPTMSGVar>(40).value
        set(value) { memberAt<HCRYPTMSGVar>(40).value = value }
    
    var pbCtlContent: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(48).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(48).value = value }
    
    var cbCtlContent: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
}

class _CRYPT_KEY_PROV_PARAM(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwParam: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pbData: CPointer<BYTEVar>?
        get() = memberAt<CPointerVar<BYTEVar>>(8).value
        set(value) { memberAt<CPointerVar<BYTEVar>>(8).value = value }
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class _CRYPT_KEY_PROV_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var pwszContainerName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pwszProvName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var dwProvType: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var cProvParam: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var rgProvParam: PCRYPT_KEY_PROV_PARAM?
        get() = memberAt<PCRYPT_KEY_PROV_PARAMVar>(32).value
        set(value) { memberAt<PCRYPT_KEY_PROV_PARAMVar>(32).value = value }
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
}

class _CERT_KEY_CONTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class anonymousStruct123(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var hCryptProv: HCRYPTPROV
        get() = memberAt<HCRYPTPROVVar>(0).value
        set(value) { memberAt<HCRYPTPROVVar>(0).value = value }
    
    var hNCryptKey: NCRYPT_KEY_HANDLE
        get() = memberAt<NCRYPT_KEY_HANDLEVar>(0).value
        set(value) { memberAt<NCRYPT_KEY_HANDLEVar>(0).value = value }
    
}

class _ROOT_INFO_LUID(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var LowPart: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var HighPart: LONG
        get() = memberAt<LONGVar>(4).value
        set(value) { memberAt<LONGVar>(4).value = value }
    
}

class _CRYPT_SMART_CARD_ROOT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    val rgbCardID: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
    val luid: ROOT_INFO_LUID
        get() = memberAt(16)
    
}

class _CERT_SYSTEM_STORE_RELOCATE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
}

class anonymousStruct124(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var hKeyBase: HKEY?
        get() = memberAt<HKEYVar>(0).value
        set(value) { memberAt<HKEYVar>(0).value = value }
    
    var pvBase: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(0).value
        set(value) { memberAt<COpaquePointerVar>(0).value = value }
    
}

class _CERT_REGISTRY_STORE_CLIENT_GPT_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var hKeyBase: HKEY?
        get() = memberAt<HKEYVar>(0).value
        set(value) { memberAt<HKEYVar>(0).value = value }
    
    var pwszRegPath: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
}

class _CERT_REGISTRY_STORE_ROAMING_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var hKey: HKEY?
        get() = memberAt<HKEYVar>(0).value
        set(value) { memberAt<HKEYVar>(0).value = value }
    
    var pwszStoreDirectory: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
}

class _CERT_LDAP_STORE_OPENED_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pvLdapSessionHandle: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(0).value
        set(value) { memberAt<COpaquePointerVar>(0).value = value }
    
    var pwszLdapUrl: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(8).value
        set(value) { memberAt<LPCWSTRVar>(8).value = value }
    
}

class _CERT_STORE_PROV_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cStoreProvFunc: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var rgpvStoreProvFunc: CPointer<COpaquePointerVar>?
        get() = memberAt<CPointerVar<COpaquePointerVar>>(8).value
        set(value) { memberAt<CPointerVar<COpaquePointerVar>>(8).value = value }
    
    var hStoreProv: HCERTSTOREPROV?
        get() = memberAt<HCERTSTOREPROVVar>(16).value
        set(value) { memberAt<HCERTSTOREPROVVar>(16).value = value }
    
    var dwStoreProvFlags: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var hStoreProvFuncAddr2: HCRYPTOIDFUNCADDR?
        get() = memberAt<HCRYPTOIDFUNCADDRVar>(32).value
        set(value) { memberAt<HCRYPTOIDFUNCADDRVar>(32).value = value }
    
}

class _CERT_STORE_PROV_FIND_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMsgAndCertEncodingType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwFindFlags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwFindType: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var pvFindPara: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(16).value
        set(value) { memberAt<COpaquePointerVar>(16).value = value }
    
}

class _CRL_FIND_ISSUED_FOR_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pSubjectCert: PCCERT_CONTEXT?
        get() = memberAt<PCCERT_CONTEXTVar>(0).value
        set(value) { memberAt<PCCERT_CONTEXTVar>(0).value = value }
    
    var pIssuerCert: PCCERT_CONTEXT?
        get() = memberAt<PCCERT_CONTEXTVar>(8).value
        set(value) { memberAt<PCCERT_CONTEXTVar>(8).value = value }
    
}

class _CTL_ANY_SUBJECT_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    val SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(0)
    
    val SubjectIdentifier: CRYPT_DATA_BLOB
        get() = memberAt(24)
    
}

class _CTL_FIND_USAGE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val SubjectUsage: CTL_USAGE
        get() = memberAt(8)
    
    val ListIdentifier: CRYPT_DATA_BLOB
        get() = memberAt(24)
    
    var pSigner: PCERT_INFO?
        get() = memberAt<PCERT_INFOVar>(40).value
        set(value) { memberAt<PCERT_INFOVar>(40).value = value }
    
}

class _CTL_FIND_SUBJECT_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pUsagePara: PCTL_FIND_USAGE_PARA?
        get() = memberAt<PCTL_FIND_USAGE_PARAVar>(8).value
        set(value) { memberAt<PCTL_FIND_USAGE_PARAVar>(8).value = value }
    
    var dwSubjectType: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var pvSubject: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(24).value
        set(value) { memberAt<COpaquePointerVar>(24).value = value }
    
}

class _CERT_CREATE_CONTEXT_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pfnFree: PFN_CRYPT_FREE?
        get() = memberAt<PFN_CRYPT_FREEVar>(8).value
        set(value) { memberAt<PFN_CRYPT_FREEVar>(8).value = value }
    
    var pvFree: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(16).value
        set(value) { memberAt<COpaquePointerVar>(16).value = value }
    
    var pfnSort: PFN_CERT_CREATE_CONTEXT_SORT_FUNC?
        get() = memberAt<PFN_CERT_CREATE_CONTEXT_SORT_FUNCVar>(24).value
        set(value) { memberAt<PFN_CERT_CREATE_CONTEXT_SORT_FUNCVar>(24).value = value }
    
    var pvSort: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(32).value
        set(value) { memberAt<COpaquePointerVar>(32).value = value }
    
}

class _CERT_SYSTEM_STORE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _CERT_PHYSICAL_STORE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszOpenStoreProvider: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var dwOpenEncodingType: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwOpenFlags: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    val OpenParameters: CRYPT_DATA_BLOB
        get() = memberAt(24)
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var dwPriority: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
}

class _CTL_VERIFY_USAGE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val ListIdentifier: CRYPT_DATA_BLOB
        get() = memberAt(8)
    
    var cCtlStore: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var rghCtlStore: CPointer<HCERTSTOREVar>?
        get() = memberAt<CPointerVar<HCERTSTOREVar>>(32).value
        set(value) { memberAt<CPointerVar<HCERTSTOREVar>>(32).value = value }
    
    var cSignerStore: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var rghSignerStore: CPointer<HCERTSTOREVar>?
        get() = memberAt<CPointerVar<HCERTSTOREVar>>(48).value
        set(value) { memberAt<CPointerVar<HCERTSTOREVar>>(48).value = value }
    
}

class _CTL_VERIFY_USAGE_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwError: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ppCtl: CPointer<PCCTL_CONTEXTVar>?
        get() = memberAt<CPointerVar<PCCTL_CONTEXTVar>>(16).value
        set(value) { memberAt<CPointerVar<PCCTL_CONTEXTVar>>(16).value = value }
    
    var dwCtlEntryIndex: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var ppSigner: CPointer<PCCERT_CONTEXTVar>?
        get() = memberAt<CPointerVar<PCCERT_CONTEXTVar>>(32).value
        set(value) { memberAt<CPointerVar<PCCERT_CONTEXTVar>>(32).value = value }
    
    var dwSignerIndex: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
}

class _CERT_REVOCATION_CRL_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pBaseCrlContext: PCCRL_CONTEXT?
        get() = memberAt<PCCRL_CONTEXTVar>(8).value
        set(value) { memberAt<PCCRL_CONTEXTVar>(8).value = value }
    
    var pDeltaCrlContext: PCCRL_CONTEXT?
        get() = memberAt<PCCRL_CONTEXTVar>(16).value
        set(value) { memberAt<PCCRL_CONTEXTVar>(16).value = value }
    
    var pCrlEntry: PCRL_ENTRY?
        get() = memberAt<PCRL_ENTRYVar>(24).value
        set(value) { memberAt<PCRL_ENTRYVar>(24).value = value }
    
    var fDeltaCrlEntry: WINBOOL
        get() = memberAt<WINBOOLVar>(32).value
        set(value) { memberAt<WINBOOLVar>(32).value = value }
    
}

class _CERT_REVOCATION_CHAIN_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hChainEngine: HCERTCHAINENGINE?
        get() = memberAt<HCERTCHAINENGINEVar>(8).value
        set(value) { memberAt<HCERTCHAINENGINEVar>(8).value = value }
    
    var hAdditionalStore: HCERTSTORE?
        get() = memberAt<HCERTSTOREVar>(16).value
        set(value) { memberAt<HCERTSTOREVar>(16).value = value }
    
    var dwChainFlags: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var dwUrlRetrievalTimeout: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var pftCurrentTime: LPFILETIME?
        get() = memberAt<LPFILETIMEVar>(32).value
        set(value) { memberAt<LPFILETIMEVar>(32).value = value }
    
    var pftCacheResync: LPFILETIME?
        get() = memberAt<LPFILETIMEVar>(40).value
        set(value) { memberAt<LPFILETIMEVar>(40).value = value }
    
    var cbMaxUrlRetrievalByteCount: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
}

class _CERT_REVOCATION_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pIssuerCert: PCCERT_CONTEXT?
        get() = memberAt<PCCERT_CONTEXTVar>(8).value
        set(value) { memberAt<PCCERT_CONTEXTVar>(8).value = value }
    
    var cCertStore: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgCertStore: CPointer<HCERTSTOREVar>?
        get() = memberAt<CPointerVar<HCERTSTOREVar>>(24).value
        set(value) { memberAt<CPointerVar<HCERTSTOREVar>>(24).value = value }
    
    var hCrlStore: HCERTSTORE?
        get() = memberAt<HCERTSTOREVar>(32).value
        set(value) { memberAt<HCERTSTOREVar>(32).value = value }
    
    var pftTimeToUse: LPFILETIME?
        get() = memberAt<LPFILETIMEVar>(40).value
        set(value) { memberAt<LPFILETIMEVar>(40).value = value }
    
}

class _CERT_REVOCATION_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwIndex: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwError: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwReason: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var fHasFreshnessTime: WINBOOL
        get() = memberAt<WINBOOLVar>(16).value
        set(value) { memberAt<WINBOOLVar>(16).value = value }
    
    var dwFreshnessTime: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val CertSignHashCNGAlgPropData: CRYPT_DATA_BLOB
        get() = memberAt(0)
    
    val CertIssuerPubKeyBitLengthPropData: CRYPT_DATA_BLOB
        get() = memberAt(16)
    
}

class _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cOID: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgpszOID: CPointer<LPSTRVar>?
        get() = memberAt<CPointerVar<LPSTRVar>>(8).value
        set(value) { memberAt<CPointerVar<LPSTRVar>>(8).value = value }
    
}

class _CRYPT_SIGN_MESSAGE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(120, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMsgEncodingType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var pSigningCert: PCCERT_CONTEXT?
        get() = memberAt<PCCERT_CONTEXTVar>(8).value
        set(value) { memberAt<PCCERT_CONTEXTVar>(8).value = value }
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(16)
    
    var pvHashAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(40).value
        set(value) { memberAt<COpaquePointerVar>(40).value = value }
    
    var cMsgCert: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var rgpMsgCert: CPointer<PCCERT_CONTEXTVar>?
        get() = memberAt<CPointerVar<PCCERT_CONTEXTVar>>(56).value
        set(value) { memberAt<CPointerVar<PCCERT_CONTEXTVar>>(56).value = value }
    
    var cMsgCrl: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var rgpMsgCrl: CPointer<PCCRL_CONTEXTVar>?
        get() = memberAt<CPointerVar<PCCRL_CONTEXTVar>>(72).value
        set(value) { memberAt<CPointerVar<PCCRL_CONTEXTVar>>(72).value = value }
    
    var cAuthAttr: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var rgAuthAttr: PCRYPT_ATTRIBUTE?
        get() = memberAt<PCRYPT_ATTRIBUTEVar>(88).value
        set(value) { memberAt<PCRYPT_ATTRIBUTEVar>(88).value = value }
    
    var cUnauthAttr: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var rgUnauthAttr: PCRYPT_ATTRIBUTE?
        get() = memberAt<PCRYPT_ATTRIBUTEVar>(104).value
        set(value) { memberAt<PCRYPT_ATTRIBUTEVar>(104).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var dwInnerContentType: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
}

class _CRYPT_VERIFY_MESSAGE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMsgAndCertEncodingType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var hCryptProv: HCRYPTPROV_LEGACY
        get() = memberAt<HCRYPTPROV_LEGACYVar>(8).value
        set(value) { memberAt<HCRYPTPROV_LEGACYVar>(8).value = value }
    
    var pfnGetSignerCertificate: PFN_CRYPT_GET_SIGNER_CERTIFICATE?
        get() = memberAt<PFN_CRYPT_GET_SIGNER_CERTIFICATEVar>(16).value
        set(value) { memberAt<PFN_CRYPT_GET_SIGNER_CERTIFICATEVar>(16).value = value }
    
    var pvGetArg: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(24).value
        set(value) { memberAt<COpaquePointerVar>(24).value = value }
    
}

class _CRYPT_ENCRYPT_MESSAGE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMsgEncodingType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var hCryptProv: HCRYPTPROV_LEGACY
        get() = memberAt<HCRYPTPROV_LEGACYVar>(8).value
        set(value) { memberAt<HCRYPTPROV_LEGACYVar>(8).value = value }
    
    val ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(16)
    
    var pvEncryptionAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(40).value
        set(value) { memberAt<COpaquePointerVar>(40).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var dwInnerContentType: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
}

class _CRYPT_DECRYPT_MESSAGE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMsgAndCertEncodingType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var cCertStore: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var rghCertStore: CPointer<HCERTSTOREVar>?
        get() = memberAt<CPointerVar<HCERTSTOREVar>>(16).value
        set(value) { memberAt<CPointerVar<HCERTSTOREVar>>(16).value = value }
    
}

class _CRYPT_HASH_MESSAGE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMsgEncodingType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var hCryptProv: HCRYPTPROV_LEGACY
        get() = memberAt<HCRYPTPROV_LEGACYVar>(8).value
        set(value) { memberAt<HCRYPTPROV_LEGACYVar>(8).value = value }
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(16)
    
    var pvHashAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(40).value
        set(value) { memberAt<COpaquePointerVar>(40).value = value }
    
}

class _CRYPT_KEY_SIGN_MESSAGE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMsgAndCertEncodingType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    val HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(24)
    
    var pvHashAuxInfo: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(48).value
        set(value) { memberAt<COpaquePointerVar>(48).value = value }
    
    val PubKeyAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
        get() = memberAt(56)
    
}

class anonymousStruct125(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var hCryptProv: HCRYPTPROV
        get() = memberAt<HCRYPTPROVVar>(0).value
        set(value) { memberAt<HCRYPTPROVVar>(0).value = value }
    
    var hNCryptKey: NCRYPT_KEY_HANDLE
        get() = memberAt<NCRYPT_KEY_HANDLEVar>(0).value
        set(value) { memberAt<NCRYPT_KEY_HANDLEVar>(0).value = value }
    
}

class _CRYPT_KEY_VERIFY_MESSAGE_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwMsgEncodingType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var hCryptProv: HCRYPTPROV_LEGACY
        get() = memberAt<HCRYPTPROV_LEGACYVar>(8).value
        set(value) { memberAt<HCRYPTPROV_LEGACYVar>(8).value = value }
    
}

class _CERT_CHAIN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var cCerts: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var certs: PCERT_BLOB?
        get() = memberAt<PCERT_BLOBVar>(8).value
        set(value) { memberAt<PCERT_BLOBVar>(8).value = value }
    
    val keyLocatorInfo: CRYPT_KEY_PROV_INFO
        get() = memberAt(16)
    
}

class _CRYPT_BLOB_ARRAY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cBlob: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgBlob: PCRYPT_DATA_BLOB?
        get() = memberAt<PCRYPT_DATA_BLOBVar>(8).value
        set(value) { memberAt<PCRYPT_DATA_BLOBVar>(8).value = value }
    
}

class _CRYPT_CREDENTIALS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszCredentialsOid: LPCSTR?
        get() = memberAt<LPCSTRVar>(8).value
        set(value) { memberAt<LPCSTRVar>(8).value = value }
    
    var pvCredentials: LPVOID?
        get() = memberAt<LPVOIDVar>(16).value
        set(value) { memberAt<LPVOIDVar>(16).value = value }
    
}

class _CRYPT_PASSWORD_CREDENTIALSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszUsername: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pszPassword: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
}

class _CRYPT_PASSWORD_CREDENTIALSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszUsername: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pszPassword: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
}

class _CRYPTNET_URL_CACHE_PRE_FETCH_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwObjectType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwError: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwReserved: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    val ThisUpdateTime: FILETIME
        get() = memberAt(16)
    
    val NextUpdateTime: FILETIME
        get() = memberAt(24)
    
    val PublishTime: FILETIME
        get() = memberAt(32)
    
}

class _CRYPTNET_URL_CACHE_FLUSH_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwExemptSeconds: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val ExpireTime: FILETIME
        get() = memberAt(8)
    
}

class _CRYPTNET_URL_CACHE_RESPONSE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var wResponseType: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var wResponseFlags: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    val LastModifiedTime: FILETIME
        get() = memberAt(8)
    
    var dwMaxAge: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var pwszETag: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(24).value
        set(value) { memberAt<LPCWSTRVar>(24).value = value }
    
    var dwProxyId: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _CRYPT_RETRIEVE_AUX_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pLastSyncTime: CPointer<FILETIME>?
        get() = memberAt<CPointerVar<FILETIME>>(8).value
        set(value) { memberAt<CPointerVar<FILETIME>>(8).value = value }
    
    var dwMaxUrlRetrievalByteCount: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var pPreFetchInfo: PCRYPTNET_URL_CACHE_PRE_FETCH_INFO?
        get() = memberAt<PCRYPTNET_URL_CACHE_PRE_FETCH_INFOVar>(24).value
        set(value) { memberAt<PCRYPTNET_URL_CACHE_PRE_FETCH_INFOVar>(24).value = value }
    
    var pFlushInfo: PCRYPTNET_URL_CACHE_FLUSH_INFO?
        get() = memberAt<PCRYPTNET_URL_CACHE_FLUSH_INFOVar>(32).value
        set(value) { memberAt<PCRYPTNET_URL_CACHE_FLUSH_INFOVar>(32).value = value }
    
    var ppResponseInfo: CPointer<PCRYPTNET_URL_CACHE_RESPONSE_INFOVar>?
        get() = memberAt<CPointerVar<PCRYPTNET_URL_CACHE_RESPONSE_INFOVar>>(40).value
        set(value) { memberAt<CPointerVar<PCRYPTNET_URL_CACHE_RESPONSE_INFOVar>>(40).value = value }
    
    var pwszCacheFileNamePrefix: LPWSTR?
        get() = memberAt<LPWSTRVar>(48).value
        set(value) { memberAt<LPWSTRVar>(48).value = value }
    
    var pftCacheResync: LPFILETIME?
        get() = memberAt<LPFILETIMEVar>(56).value
        set(value) { memberAt<LPFILETIMEVar>(56).value = value }
    
    var fProxyCacheRetrieval: WINBOOL
        get() = memberAt<WINBOOLVar>(64).value
        set(value) { memberAt<WINBOOLVar>(64).value = value }
    
    var dwHttpStatusCode: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
}

class _CRYPT_ASYNC_RETRIEVAL_COMPLETION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pfnCompletion: PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC?
        get() = memberAt<PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNCVar>(0).value
        set(value) { memberAt<PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNCVar>(0).value = value }
    
    var pvCompletion: LPVOID?
        get() = memberAt<LPVOIDVar>(8).value
        set(value) { memberAt<LPVOIDVar>(8).value = value }
    
}

class _CRYPT_URL_ARRAY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cUrl: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var rgwszUrl: CPointer<LPWSTRVar>?
        get() = memberAt<CPointerVar<LPWSTRVar>>(8).value
        set(value) { memberAt<CPointerVar<LPWSTRVar>>(8).value = value }
    
}

class _CRYPT_URL_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwSyncDeltaTime: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var cGroup: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var rgcGroupEntry: CPointer<DWORDVar>?
        get() = memberAt<CPointerVar<DWORDVar>>(16).value
        set(value) { memberAt<CPointerVar<DWORDVar>>(16).value = value }
    
}

class _CERT_CRL_CONTEXT_PAIR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pCertContext: PCCERT_CONTEXT?
        get() = memberAt<PCCERT_CONTEXTVar>(0).value
        set(value) { memberAt<PCCERT_CONTEXTVar>(0).value = value }
    
    var pCrlContext: PCCRL_CONTEXT?
        get() = memberAt<PCCRL_CONTEXTVar>(8).value
        set(value) { memberAt<PCCRL_CONTEXTVar>(8).value = value }
    
}

class _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var iDeltaCrlIndicator: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var pftCacheResync: LPFILETIME?
        get() = memberAt<LPFILETIMEVar>(8).value
        set(value) { memberAt<LPFILETIMEVar>(8).value = value }
    
    var pLastSyncTime: LPFILETIME?
        get() = memberAt<LPFILETIMEVar>(16).value
        set(value) { memberAt<LPFILETIMEVar>(16).value = value }
    
    var pMaxAgeTime: LPFILETIME?
        get() = memberAt<LPFILETIMEVar>(24).value
        set(value) { memberAt<LPFILETIMEVar>(24).value = value }
    
    var pChainPara: PCERT_REVOCATION_CHAIN_PARA?
        get() = memberAt<PCERT_REVOCATION_CHAIN_PARAVar>(32).value
        set(value) { memberAt<PCERT_REVOCATION_CHAIN_PARAVar>(32).value = value }
    
    var pDeltaCrlIndicator: PCRYPT_INTEGER_BLOB?
        get() = memberAt<PCRYPT_INTEGER_BLOBVar>(40).value
        set(value) { memberAt<PCRYPT_INTEGER_BLOBVar>(40).value = value }
    
}

class _CERT_CHAIN_ENGINE_CONFIG(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hRestrictedRoot: HCERTSTORE?
        get() = memberAt<HCERTSTOREVar>(8).value
        set(value) { memberAt<HCERTSTOREVar>(8).value = value }
    
    var hRestrictedTrust: HCERTSTORE?
        get() = memberAt<HCERTSTOREVar>(16).value
        set(value) { memberAt<HCERTSTOREVar>(16).value = value }
    
    var hRestrictedOther: HCERTSTORE?
        get() = memberAt<HCERTSTOREVar>(24).value
        set(value) { memberAt<HCERTSTOREVar>(24).value = value }
    
    var cAdditionalStore: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var rghAdditionalStore: CPointer<HCERTSTOREVar>?
        get() = memberAt<CPointerVar<HCERTSTOREVar>>(40).value
        set(value) { memberAt<CPointerVar<HCERTSTOREVar>>(40).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var dwUrlRetrievalTimeout: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var MaximumCachedCertificates: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var CycleDetectionModulus: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
}

class _CERT_TRUST_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var dwErrorStatus: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwInfoStatus: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _CERT_REVOCATION_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwRevocationResult: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var pszRevocationOid: LPCSTR?
        get() = memberAt<LPCSTRVar>(8).value
        set(value) { memberAt<LPCSTRVar>(8).value = value }
    
    var pvOidSpecificInfo: LPVOID?
        get() = memberAt<LPVOIDVar>(16).value
        set(value) { memberAt<LPVOIDVar>(16).value = value }
    
    var fHasFreshnessTime: WINBOOL
        get() = memberAt<WINBOOLVar>(24).value
        set(value) { memberAt<WINBOOLVar>(24).value = value }
    
    var dwFreshnessTime: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var pCrlInfo: PCERT_REVOCATION_CRL_INFO?
        get() = memberAt<PCERT_REVOCATION_CRL_INFOVar>(32).value
        set(value) { memberAt<PCERT_REVOCATION_CRL_INFOVar>(32).value = value }
    
}

class _CERT_TRUST_LIST_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pCtlEntry: PCTL_ENTRY?
        get() = memberAt<PCTL_ENTRYVar>(8).value
        set(value) { memberAt<PCTL_ENTRYVar>(8).value = value }
    
    var pCtlContext: PCCTL_CONTEXT?
        get() = memberAt<PCCTL_CONTEXTVar>(16).value
        set(value) { memberAt<PCCTL_CONTEXTVar>(16).value = value }
    
}

class _CERT_CHAIN_ELEMENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pCertContext: PCCERT_CONTEXT?
        get() = memberAt<PCCERT_CONTEXTVar>(8).value
        set(value) { memberAt<PCCERT_CONTEXTVar>(8).value = value }
    
    val TrustStatus: CERT_TRUST_STATUS
        get() = memberAt(16)
    
    var pRevocationInfo: PCERT_REVOCATION_INFO?
        get() = memberAt<PCERT_REVOCATION_INFOVar>(24).value
        set(value) { memberAt<PCERT_REVOCATION_INFOVar>(24).value = value }
    
    var pIssuanceUsage: PCERT_ENHKEY_USAGE?
        get() = memberAt<PCERT_ENHKEY_USAGEVar>(32).value
        set(value) { memberAt<PCERT_ENHKEY_USAGEVar>(32).value = value }
    
    var pApplicationUsage: PCERT_ENHKEY_USAGE?
        get() = memberAt<PCERT_ENHKEY_USAGEVar>(40).value
        set(value) { memberAt<PCERT_ENHKEY_USAGEVar>(40).value = value }
    
    var pwszExtendedErrorInfo: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(48).value
        set(value) { memberAt<LPCWSTRVar>(48).value = value }
    
}

class _CERT_SIMPLE_CHAIN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val TrustStatus: CERT_TRUST_STATUS
        get() = memberAt(4)
    
    var cElement: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var rgpElement: CPointer<PCERT_CHAIN_ELEMENTVar>?
        get() = memberAt<CPointerVar<PCERT_CHAIN_ELEMENTVar>>(16).value
        set(value) { memberAt<CPointerVar<PCERT_CHAIN_ELEMENTVar>>(16).value = value }
    
    var pTrustListInfo: PCERT_TRUST_LIST_INFO?
        get() = memberAt<PCERT_TRUST_LIST_INFOVar>(24).value
        set(value) { memberAt<PCERT_TRUST_LIST_INFOVar>(24).value = value }
    
    var fHasRevocationFreshnessTime: WINBOOL
        get() = memberAt<WINBOOLVar>(32).value
        set(value) { memberAt<WINBOOLVar>(32).value = value }
    
    var dwRevocationFreshnessTime: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class _CERT_CHAIN_CONTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val TrustStatus: CERT_TRUST_STATUS
        get() = memberAt(4)
    
    var cChain: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var rgpChain: CPointer<PCERT_SIMPLE_CHAINVar>?
        get() = memberAt<CPointerVar<PCERT_SIMPLE_CHAINVar>>(16).value
        set(value) { memberAt<CPointerVar<PCERT_SIMPLE_CHAINVar>>(16).value = value }
    
    var cLowerQualityChainContext: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var rgpLowerQualityChainContext: CPointer<PCCERT_CHAIN_CONTEXTVar>?
        get() = memberAt<CPointerVar<PCCERT_CHAIN_CONTEXTVar>>(32).value
        set(value) { memberAt<CPointerVar<PCCERT_CHAIN_CONTEXTVar>>(32).value = value }
    
    var fHasRevocationFreshnessTime: WINBOOL
        get() = memberAt<WINBOOLVar>(40).value
        set(value) { memberAt<WINBOOLVar>(40).value = value }
    
    var dwRevocationFreshnessTime: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var dwCreateFlags: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    val ChainId: GUID
        get() = memberAt(52)
    
}

class _CERT_USAGE_MATCH(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Usage: CERT_ENHKEY_USAGE
        get() = memberAt(8)
    
}

class _CTL_USAGE_MATCH(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Usage: CTL_USAGE
        get() = memberAt(8)
    
}

class _CERT_CHAIN_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val RequestedUsage: CERT_USAGE_MATCH
        get() = memberAt(8)
    
}

class _CRL_REVOCATION_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pCrlEntry: PCRL_ENTRY?
        get() = memberAt<PCRL_ENTRYVar>(0).value
        set(value) { memberAt<PCRL_ENTRYVar>(0).value = value }
    
    var pCrlContext: PCCRL_CONTEXT?
        get() = memberAt<PCCRL_CONTEXTVar>(8).value
        set(value) { memberAt<PCCRL_CONTEXTVar>(8).value = value }
    
    var pCrlIssuerChain: PCCERT_CHAIN_CONTEXT?
        get() = memberAt<PCCERT_CHAIN_CONTEXTVar>(16).value
        set(value) { memberAt<PCCERT_CHAIN_CONTEXTVar>(16).value = value }
    
}

class _CERT_CHAIN_FIND_BY_ISSUER_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszUsageIdentifier: LPCSTR?
        get() = memberAt<LPCSTRVar>(8).value
        set(value) { memberAt<LPCSTRVar>(8).value = value }
    
    var dwKeySpec: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwAcquirePrivateKeyFlags: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var cIssuer: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var rgIssuer: CPointer<CERT_NAME_BLOB>?
        get() = memberAt<CPointerVar<CERT_NAME_BLOB>>(32).value
        set(value) { memberAt<CPointerVar<CERT_NAME_BLOB>>(32).value = value }
    
    var pfnFindCallback: PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK?
        get() = memberAt<PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACKVar>(40).value
        set(value) { memberAt<PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACKVar>(40).value = value }
    
    var pvFindArg: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(48).value
        set(value) { memberAt<COpaquePointerVar>(48).value = value }
    
}

class _CERT_CHAIN_POLICY_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var pvExtraPolicyPara: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(8).value
        set(value) { memberAt<COpaquePointerVar>(8).value = value }
    
}

class _CERT_CHAIN_POLICY_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwError: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var lChainIndex: LONG
        get() = memberAt<LONGVar>(8).value
        set(value) { memberAt<LONGVar>(8).value = value }
    
    var lElementIndex: LONG
        get() = memberAt<LONGVar>(12).value
        set(value) { memberAt<LONGVar>(12).value = value }
    
    var pvExtraPolicyStatus: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(16).value
        set(value) { memberAt<COpaquePointerVar>(16).value = value }
    
}

class _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwRegPolicySettings: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var pSignerInfo: PCMSG_SIGNER_INFO?
        get() = memberAt<PCMSG_SIGNER_INFOVar>(8).value
        set(value) { memberAt<PCMSG_SIGNER_INFOVar>(8).value = value }
    
}

class _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var fCommercial: WINBOOL
        get() = memberAt<WINBOOLVar>(4).value
        set(value) { memberAt<WINBOOLVar>(4).value = value }
    
}

class _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwRegPolicySettings: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var fCommercial: WINBOOL
        get() = memberAt<WINBOOLVar>(8).value
        set(value) { memberAt<WINBOOLVar>(8).value = value }
    
}

class _HTTPSPolicyCallbackData(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwAuthType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var fdwChecks: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var pwszServerName: CPointer<WCHARVar>?
        get() = memberAt<CPointerVar<WCHARVar>>(16).value
        set(value) { memberAt<CPointerVar<WCHARVar>>(16).value = value }
    
}

class anonymousStruct126(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var cbStruct: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _EV_EXTRA_CERT_CHAIN_POLICY_PARA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwRootProgramQualifierFlags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _EV_EXTRA_CERT_CHAIN_POLICY_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var cbSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwQualifiers: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwIssuanceUsageIndex: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _CRYPT_PKCS12_PBE_PARAMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var iIterations: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var cbSalt: ULONG
        get() = memberAt<ULONGVar>(4).value
        set(value) { memberAt<ULONGVar>(4).value = value }
    
}

class _CERTIFICATE_BLOB(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var dwCertEncodingType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var pbData: PBYTE?
        get() = memberAt<PBYTEVar>(8).value
        set(value) { memberAt<PBYTEVar>(8).value = value }
    
}

class _EFS_HASH_BLOB(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pbData: PBYTE?
        get() = memberAt<PBYTEVar>(8).value
        set(value) { memberAt<PBYTEVar>(8).value = value }
    
}

class _EFS_RPC_BLOB(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pbData: PBYTE?
        get() = memberAt<PBYTEVar>(8).value
        set(value) { memberAt<PBYTEVar>(8).value = value }
    
}

class _EFS_KEY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var dwVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Entropy: ULONG
        get() = memberAt<ULONGVar>(4).value
        set(value) { memberAt<ULONGVar>(4).value = value }
    
    var Algorithm: ALG_ID
        get() = memberAt<ALG_IDVar>(8).value
        set(value) { memberAt<ALG_IDVar>(8).value = value }
    
    var KeyLength: ULONG
        get() = memberAt<ULONGVar>(12).value
        set(value) { memberAt<ULONGVar>(12).value = value }
    
}

class _ENCRYPTION_CERTIFICATE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var cbTotalLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pUserSid: CPointer<SID>?
        get() = memberAt<CPointerVar<SID>>(8).value
        set(value) { memberAt<CPointerVar<SID>>(8).value = value }
    
    var pCertBlob: PEFS_CERTIFICATE_BLOB?
        get() = memberAt<PEFS_CERTIFICATE_BLOBVar>(16).value
        set(value) { memberAt<PEFS_CERTIFICATE_BLOBVar>(16).value = value }
    
}

class _ENCRYPTION_CERTIFICATE_HASH(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var cbTotalLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pUserSid: CPointer<SID>?
        get() = memberAt<CPointerVar<SID>>(8).value
        set(value) { memberAt<CPointerVar<SID>>(8).value = value }
    
    var pHash: PEFS_HASH_BLOB?
        get() = memberAt<PEFS_HASH_BLOBVar>(16).value
        set(value) { memberAt<PEFS_HASH_BLOBVar>(16).value = value }
    
    var lpDisplayInformation: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
}

class _ENCRYPTION_CERTIFICATE_HASH_LIST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var nCert_Hash: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pUsers: CPointer<PENCRYPTION_CERTIFICATE_HASHVar>?
        get() = memberAt<CPointerVar<PENCRYPTION_CERTIFICATE_HASHVar>>(8).value
        set(value) { memberAt<CPointerVar<PENCRYPTION_CERTIFICATE_HASHVar>>(8).value = value }
    
}

class _ENCRYPTION_CERTIFICATE_LIST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var nUsers: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pUsers: CPointer<PENCRYPTION_CERTIFICATEVar>?
        get() = memberAt<CPointerVar<PENCRYPTION_CERTIFICATEVar>>(8).value
        set(value) { memberAt<CPointerVar<PENCRYPTION_CERTIFICATEVar>>(8).value = value }
    
}

class _STORAGE_READ_CAPACITY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var Version: ULONG
        get() = memberAt<ULONGVar>(0).value
        set(value) { memberAt<ULONGVar>(0).value = value }
    
    var Size: ULONG
        get() = memberAt<ULONGVar>(4).value
        set(value) { memberAt<ULONGVar>(4).value = value }
    
    var BlockLength: ULONG
        get() = memberAt<ULONGVar>(8).value
        set(value) { memberAt<ULONGVar>(8).value = value }
    
    val NumberOfBlocks: LARGE_INTEGER
        get() = memberAt(16)
    
    val DiskLength: LARGE_INTEGER
        get() = memberAt(24)
    
}

class _STORAGE_HOTPLUG_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var MediaRemovable: BOOLEAN
        get() = memberAt<BOOLEANVar>(4).value
        set(value) { memberAt<BOOLEANVar>(4).value = value }
    
    var MediaHotplug: BOOLEAN
        get() = memberAt<BOOLEANVar>(5).value
        set(value) { memberAt<BOOLEANVar>(5).value = value }
    
    var DeviceHotplug: BOOLEAN
        get() = memberAt<BOOLEANVar>(6).value
        set(value) { memberAt<BOOLEANVar>(6).value = value }
    
    var WriteCacheEnableOverride: BOOLEAN
        get() = memberAt<BOOLEANVar>(7).value
        set(value) { memberAt<BOOLEANVar>(7).value = value }
    
}

class _STORAGE_DEVICE_NUMBER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var DeviceType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var DeviceNumber: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var PartitionNumber: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _STORAGE_BUS_RESET_REQUEST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    var PathId: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
}

class STORAGE_BREAK_RESERVATION_REQUEST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Length: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var _unused: BYTE
        get() = memberAt<BYTEVar>(4).value
        set(value) { memberAt<BYTEVar>(4).value = value }
    
    var PathId: BYTE
        get() = memberAt<BYTEVar>(5).value
        set(value) { memberAt<BYTEVar>(5).value = value }
    
    var TargetId: BYTE
        get() = memberAt<BYTEVar>(6).value
        set(value) { memberAt<BYTEVar>(6).value = value }
    
    var Lun: BYTE
        get() = memberAt<BYTEVar>(7).value
        set(value) { memberAt<BYTEVar>(7).value = value }
    
}

class _PREVENT_MEDIA_REMOVAL(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    var PreventMediaRemoval: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
}

class _CLASS_MEDIA_CHANGE_CONTEXT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var MediaChangeCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var NewState: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _TAPE_STATISTICS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val RecoveredWrites: LARGE_INTEGER
        get() = memberAt(8)
    
    val UnrecoveredWrites: LARGE_INTEGER
        get() = memberAt(16)
    
    val RecoveredReads: LARGE_INTEGER
        get() = memberAt(24)
    
    val UnrecoveredReads: LARGE_INTEGER
        get() = memberAt(32)
    
    var CompressionRatioReads: BYTE
        get() = memberAt<BYTEVar>(40).value
        set(value) { memberAt<BYTEVar>(40).value = value }
    
    var CompressionRatioWrites: BYTE
        get() = memberAt<BYTEVar>(41).value
        set(value) { memberAt<BYTEVar>(41).value = value }
    
}

class _TAPE_GET_STATISTICS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Operation: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _DEVICE_MEDIA_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val DeviceSpecific: anonymousStruct127
        get() = memberAt(0)
    
}

class anonymousStruct127(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val DiskInfo: anonymousStruct128
        get() = memberAt(0)
    
    val RemovableDiskInfo: anonymousStruct129
        get() = memberAt(0)
    
    val TapeInfo: anonymousStruct130
        get() = memberAt(0)
    
}

class anonymousStruct128(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val Cylinders: LARGE_INTEGER
        get() = memberAt(0)
    
    var MediaType: STORAGE_MEDIA_TYPE
        get() = memberAt<STORAGE_MEDIA_TYPEVar>(8).value
        set(value) { memberAt<STORAGE_MEDIA_TYPEVar>(8).value = value }
    
    var TracksPerCylinder: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var SectorsPerTrack: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var BytesPerSector: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var NumberMediaSides: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var MediaCharacteristics: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class anonymousStruct129(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val Cylinders: LARGE_INTEGER
        get() = memberAt(0)
    
    var MediaType: STORAGE_MEDIA_TYPE
        get() = memberAt<STORAGE_MEDIA_TYPEVar>(8).value
        set(value) { memberAt<STORAGE_MEDIA_TYPEVar>(8).value = value }
    
    var TracksPerCylinder: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var SectorsPerTrack: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var BytesPerSector: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var NumberMediaSides: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var MediaCharacteristics: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class anonymousStruct130(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var MediaType: STORAGE_MEDIA_TYPE
        get() = memberAt<STORAGE_MEDIA_TYPEVar>(0).value
        set(value) { memberAt<STORAGE_MEDIA_TYPEVar>(0).value = value }
    
    var MediaCharacteristics: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var CurrentBlockSize: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var BusType: STORAGE_BUS_TYPE
        get() = memberAt<STORAGE_BUS_TYPEVar>(12).value
        set(value) { memberAt<STORAGE_BUS_TYPEVar>(12).value = value }
    
    val BusSpecificData: anonymousStruct131
        get() = memberAt(16)
    
}

class anonymousStruct131(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(2, 1)
    
    val ScsiInformation: anonymousStruct132
        get() = memberAt(0)
    
}

class anonymousStruct132(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(2, 1)
    
    var MediumType: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var DensityCode: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
}

class _GET_MEDIA_TYPES(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var DeviceType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var MediaInfoCount: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val MediaInfo: CArrayPointer<DEVICE_MEDIA_INFO>
        get() = arrayMemberAt(8)
    
}

class _STORAGE_PREDICT_FAILURE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(516, 4)
    
    var PredictFailure: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val VendorSpecific: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
}

class _FORMAT_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    var MediaType: MEDIA_TYPE
        get() = memberAt<MEDIA_TYPEVar>(0).value
        set(value) { memberAt<MEDIA_TYPEVar>(0).value = value }
    
    var StartCylinderNumber: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var EndCylinderNumber: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var StartHeadNumber: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var EndHeadNumber: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _FORMAT_EX_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var MediaType: MEDIA_TYPE
        get() = memberAt<MEDIA_TYPEVar>(0).value
        set(value) { memberAt<MEDIA_TYPEVar>(0).value = value }
    
    var StartCylinderNumber: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var EndCylinderNumber: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var StartHeadNumber: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var EndHeadNumber: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var FormatGapLength: WORD
        get() = memberAt<WORDVar>(20).value
        set(value) { memberAt<WORDVar>(20).value = value }
    
    var SectorsPerTrack: WORD
        get() = memberAt<WORDVar>(22).value
        set(value) { memberAt<WORDVar>(22).value = value }
    
    val SectorNumber: CArrayPointer<WORDVar>
        get() = arrayMemberAt(24)
    
}

class _DISK_GEOMETRY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    val Cylinders: LARGE_INTEGER
        get() = memberAt(0)
    
    var MediaType: MEDIA_TYPE
        get() = memberAt<MEDIA_TYPEVar>(8).value
        set(value) { memberAt<MEDIA_TYPEVar>(8).value = value }
    
    var TracksPerCylinder: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var SectorsPerTrack: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var BytesPerSector: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
}

class _PARTITION_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    val StartingOffset: LARGE_INTEGER
        get() = memberAt(0)
    
    val PartitionLength: LARGE_INTEGER
        get() = memberAt(8)
    
    var HiddenSectors: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var PartitionNumber: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var PartitionType: BYTE
        get() = memberAt<BYTEVar>(24).value
        set(value) { memberAt<BYTEVar>(24).value = value }
    
    var BootIndicator: BOOLEAN
        get() = memberAt<BOOLEANVar>(25).value
        set(value) { memberAt<BOOLEANVar>(25).value = value }
    
    var RecognizedPartition: BOOLEAN
        get() = memberAt<BOOLEANVar>(26).value
        set(value) { memberAt<BOOLEANVar>(26).value = value }
    
    var RewritePartition: BOOLEAN
        get() = memberAt<BOOLEANVar>(27).value
        set(value) { memberAt<BOOLEANVar>(27).value = value }
    
}

class _SET_PARTITION_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    var PartitionType: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
}

class _DRIVE_LAYOUT_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var PartitionCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Signature: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val PartitionEntry: CArrayPointer<PARTITION_INFORMATION>
        get() = arrayMemberAt(8)
    
}

class _VERIFY_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val StartingOffset: LARGE_INTEGER
        get() = memberAt(0)
    
    var Length: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _REASSIGN_BLOCKS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Reserved: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Count: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    val BlockNumber: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(4)
    
}

class _REASSIGN_BLOCKS_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 1)
    
    var Reserved: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Count: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    val BlockNumber: CArrayPointer<LARGE_INTEGER>
        get() = arrayMemberAt(4)
    
}

class _PARTITION_INFORMATION_GPT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(112, 8)
    
    val PartitionType: GUID
        get() = memberAt(0)
    
    val PartitionId: GUID
        get() = memberAt(16)
    
    var Attributes: DWORD64
        get() = memberAt<DWORD64Var>(32).value
        set(value) { memberAt<DWORD64Var>(32).value = value }
    
    val Name: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(40)
    
}

class _PARTITION_INFORMATION_MBR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var PartitionType: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var BootIndicator: BOOLEAN
        get() = memberAt<BOOLEANVar>(1).value
        set(value) { memberAt<BOOLEANVar>(1).value = value }
    
    var RecognizedPartition: BOOLEAN
        get() = memberAt<BOOLEANVar>(2).value
        set(value) { memberAt<BOOLEANVar>(2).value = value }
    
    var HiddenSectors: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _SET_PARTITION_INFORMATION_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(120, 8)
    
    var PartitionStyle: PARTITION_STYLE
        get() = memberAt<PARTITION_STYLEVar>(0).value
        set(value) { memberAt<PARTITION_STYLEVar>(0).value = value }
    
}

class anonymousStruct133(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(112, 8)
    
    val Mbr: SET_PARTITION_INFORMATION_MBR
        get() = memberAt(0)
    
    val Gpt: SET_PARTITION_INFORMATION_GPT
        get() = memberAt(0)
    
}

class _CREATE_DISK_GPT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val DiskId: GUID
        get() = memberAt(0)
    
    var MaxPartitionCount: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _CREATE_DISK_MBR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Signature: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _CREATE_DISK(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var PartitionStyle: PARTITION_STYLE
        get() = memberAt<PARTITION_STYLEVar>(0).value
        set(value) { memberAt<PARTITION_STYLEVar>(0).value = value }
    
}

class anonymousStruct134(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val Mbr: CREATE_DISK_MBR
        get() = memberAt(0)
    
    val Gpt: CREATE_DISK_GPT
        get() = memberAt(0)
    
}

class _GET_LENGTH_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    val Length: LARGE_INTEGER
        get() = memberAt(0)
    
}

class _PARTITION_INFORMATION_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(144, 8)
    
    var PartitionStyle: PARTITION_STYLE
        get() = memberAt<PARTITION_STYLEVar>(0).value
        set(value) { memberAt<PARTITION_STYLEVar>(0).value = value }
    
    val StartingOffset: LARGE_INTEGER
        get() = memberAt(8)
    
    val PartitionLength: LARGE_INTEGER
        get() = memberAt(16)
    
    var PartitionNumber: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var RewritePartition: BOOLEAN
        get() = memberAt<BOOLEANVar>(28).value
        set(value) { memberAt<BOOLEANVar>(28).value = value }
    
}

class anonymousStruct135(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(112, 8)
    
    val Mbr: PARTITION_INFORMATION_MBR
        get() = memberAt(0)
    
    val Gpt: PARTITION_INFORMATION_GPT
        get() = memberAt(0)
    
}

class _DRIVE_LAYOUT_INFORMATION_GPT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    val DiskId: GUID
        get() = memberAt(0)
    
    val StartingUsableOffset: LARGE_INTEGER
        get() = memberAt(16)
    
    val UsableLength: LARGE_INTEGER
        get() = memberAt(24)
    
    var MaxPartitionCount: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _DRIVE_LAYOUT_INFORMATION_MBR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var Signature: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _DRIVE_LAYOUT_INFORMATION_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(192, 8)
    
    var PartitionStyle: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var PartitionCount: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val PartitionEntry: CArrayPointer<PARTITION_INFORMATION_EX>
        get() = arrayMemberAt(48)
    
}

class anonymousStruct136(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    val Mbr: DRIVE_LAYOUT_INFORMATION_MBR
        get() = memberAt(0)
    
    val Gpt: DRIVE_LAYOUT_INFORMATION_GPT
        get() = memberAt(0)
    
}

class _DISK_INT13_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var DriveSelect: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var MaxCylinders: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var SectorsPerTrack: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var MaxHeads: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var NumberDrives: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
}

class _DISK_EX_INT13_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var ExBufferSize: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var ExFlags: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var ExCylinders: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var ExHeads: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ExSectorsPerTrack: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var ExSectorsPerDrive: DWORD64
        get() = memberAt<DWORD64Var>(16).value
        set(value) { memberAt<DWORD64Var>(16).value = value }
    
    var ExSectorSize: WORD
        get() = memberAt<WORDVar>(24).value
        set(value) { memberAt<WORDVar>(24).value = value }
    
    var ExReserved: WORD
        get() = memberAt<WORDVar>(26).value
        set(value) { memberAt<WORDVar>(26).value = value }
    
}

class _DISK_DETECTION_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var SizeOfDetectInfo: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var DetectionType: DETECTION_TYPE
        get() = memberAt<DETECTION_TYPEVar>(4).value
        set(value) { memberAt<DETECTION_TYPEVar>(4).value = value }
    
}

class anonymousStruct137(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
}

class anonymousStruct138(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    val Int13: DISK_INT13_INFO
        get() = memberAt(0)
    
    val ExInt13: DISK_EX_INT13_INFO
        get() = memberAt(16)
    
}

class _DISK_PARTITION_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var SizeOfPartitionInfo: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var PartitionStyle: PARTITION_STYLE
        get() = memberAt<PARTITION_STYLEVar>(4).value
        set(value) { memberAt<PARTITION_STYLEVar>(4).value = value }
    
}

class anonymousStruct139(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val Mbr: anonymousStruct140
        get() = memberAt(0)
    
    val Gpt: anonymousStruct141
        get() = memberAt(0)
    
}

class anonymousStruct140(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Signature: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var CheckSum: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class anonymousStruct141(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val DiskId: GUID
        get() = memberAt(0)
    
}

class _DISK_GEOMETRY_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    val Geometry: DISK_GEOMETRY
        get() = memberAt(0)
    
    val DiskSize: LARGE_INTEGER
        get() = memberAt(24)
    
    val Data: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(32)
    
}

class _DISK_CONTROLLER_NUMBER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var ControllerNumber: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var DiskNumber: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _DISK_CACHE_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 4)
    
    var ParametersSavable: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
    var ReadCacheEnabled: BOOLEAN
        get() = memberAt<BOOLEANVar>(1).value
        set(value) { memberAt<BOOLEANVar>(1).value = value }
    
    var WriteCacheEnabled: BOOLEAN
        get() = memberAt<BOOLEANVar>(2).value
        set(value) { memberAt<BOOLEANVar>(2).value = value }
    
    var ReadRetentionPriority: DISK_CACHE_RETENTION_PRIORITY
        get() = memberAt<DISK_CACHE_RETENTION_PRIORITY.Var>(4).value
        set(value) { memberAt<DISK_CACHE_RETENTION_PRIORITY.Var>(4).value = value }
    
    var WriteRetentionPriority: DISK_CACHE_RETENTION_PRIORITY
        get() = memberAt<DISK_CACHE_RETENTION_PRIORITY.Var>(8).value
        set(value) { memberAt<DISK_CACHE_RETENTION_PRIORITY.Var>(8).value = value }
    
    var DisablePrefetchTransferLength: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var PrefetchScalar: BOOLEAN
        get() = memberAt<BOOLEANVar>(14).value
        set(value) { memberAt<BOOLEANVar>(14).value = value }
    
}

class anonymousStruct142(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(6, 2)
    
    val ScalarPrefetch: anonymousStruct143
        get() = memberAt(0)
    
    val BlockPrefetch: anonymousStruct144
        get() = memberAt(0)
    
}

class anonymousStruct143(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(6, 2)
    
    var Minimum: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Maximum: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var MaximumBlocks: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
}

class anonymousStruct144(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 2)
    
    var Minimum: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Maximum: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
}

class _DISK_GROW_PARTITION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var PartitionNumber: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val BytesToGrow: LARGE_INTEGER
        get() = memberAt(8)
    
}

class _HISTOGRAM_BUCKET(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Reads: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Writes: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _DISK_HISTOGRAM(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(72, 8)
    
    val DiskSize: LARGE_INTEGER
        get() = memberAt(0)
    
    val Start: LARGE_INTEGER
        get() = memberAt(8)
    
    val End: LARGE_INTEGER
        get() = memberAt(16)
    
    val Average: LARGE_INTEGER
        get() = memberAt(24)
    
    val AverageRead: LARGE_INTEGER
        get() = memberAt(32)
    
    val AverageWrite: LARGE_INTEGER
        get() = memberAt(40)
    
    var Granularity: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var ReadCount: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var WriteCount: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var Histogram: PHISTOGRAM_BUCKET?
        get() = memberAt<PHISTOGRAM_BUCKETVar>(64).value
        set(value) { memberAt<PHISTOGRAM_BUCKETVar>(64).value = value }
    
}

class _DISK_PERFORMANCE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 8)
    
    val BytesRead: LARGE_INTEGER
        get() = memberAt(0)
    
    val BytesWritten: LARGE_INTEGER
        get() = memberAt(8)
    
    val ReadTime: LARGE_INTEGER
        get() = memberAt(16)
    
    val WriteTime: LARGE_INTEGER
        get() = memberAt(24)
    
    val IdleTime: LARGE_INTEGER
        get() = memberAt(32)
    
    var ReadCount: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var WriteCount: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var QueueDepth: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var SplitCount: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    val QueryTime: LARGE_INTEGER
        get() = memberAt(56)
    
    var StorageDeviceNumber: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    val StorageManagerName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(68)
    
}

class _DISK_RECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    val ByteOffset: LARGE_INTEGER
        get() = memberAt(0)
    
    val StartTime: LARGE_INTEGER
        get() = memberAt(8)
    
    val EndTime: LARGE_INTEGER
        get() = memberAt(16)
    
    var VirtualAddress: PVOID?
        get() = memberAt<PVOIDVar>(24).value
        set(value) { memberAt<PVOIDVar>(24).value = value }
    
    var NumberOfBytes: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var DeviceNumber: BYTE
        get() = memberAt<BYTEVar>(36).value
        set(value) { memberAt<BYTEVar>(36).value = value }
    
    var ReadRequest: BOOLEAN
        get() = memberAt<BOOLEANVar>(37).value
        set(value) { memberAt<BOOLEANVar>(37).value = value }
    
}

class _DISK_LOGGING(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var Function: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var BufferAddress: PVOID?
        get() = memberAt<PVOIDVar>(8).value
        set(value) { memberAt<PVOIDVar>(8).value = value }
    
    var BufferSize: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _BIN_RANGE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val StartValue: LARGE_INTEGER
        get() = memberAt(0)
    
    val Length: LARGE_INTEGER
        get() = memberAt(8)
    
}

class _PERF_BIN(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var NumberOfBins: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var TypeOfBin: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val BinsRanges: CArrayPointer<BIN_RANGE>
        get() = arrayMemberAt(8)
    
}

class _BIN_COUNT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    val BinRange: BIN_RANGE
        get() = memberAt(0)
    
    var BinCount: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _BIN_RESULTS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var NumberOfBins: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val BinCounts: CArrayPointer<BIN_COUNT>
        get() = arrayMemberAt(8)
    
}

class _GETVERSIONINPARAMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 1)
    
    var bVersion: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var bRevision: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var bReserved: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var bIDEDeviceMap: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
    var fCapabilities: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val dwReserved: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(8)
    
}

class _IDEREGS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 1)
    
    var bFeaturesReg: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var bSectorCountReg: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var bSectorNumberReg: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var bCylLowReg: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
    var bCylHighReg: BYTE
        get() = memberAt<BYTEVar>(4).value
        set(value) { memberAt<BYTEVar>(4).value = value }
    
    var bDriveHeadReg: BYTE
        get() = memberAt<BYTEVar>(5).value
        set(value) { memberAt<BYTEVar>(5).value = value }
    
    var bCommandReg: BYTE
        get() = memberAt<BYTEVar>(6).value
        set(value) { memberAt<BYTEVar>(6).value = value }
    
    var bReserved: BYTE
        get() = memberAt<BYTEVar>(7).value
        set(value) { memberAt<BYTEVar>(7).value = value }
    
}

class _SENDCMDINPARAMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(33, 1)
    
    var cBufferSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val irDriveRegs: IDEREGS
        get() = memberAt(4)
    
    var bDriveNumber: BYTE
        get() = memberAt<BYTEVar>(12).value
        set(value) { memberAt<BYTEVar>(12).value = value }
    
    val bReserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(13)
    
    val dwReserved: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(16)
    
    val bBuffer: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(32)
    
}

class _DRIVERSTATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 1)
    
    var bDriverError: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var bIDEError: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    val bReserved: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(2)
    
    val dwReserved: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(4)
    
}

class _SENDCMDOUTPARAMS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(17, 1)
    
    var cBufferSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val DriverStatus: DRIVERSTATUS
        get() = memberAt(4)
    
    val bBuffer: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(16)
    
}

class _CHANGER_ELEMENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var ElementType: ELEMENT_TYPE
        get() = memberAt<ELEMENT_TYPEVar>(0).value
        set(value) { memberAt<ELEMENT_TYPEVar>(0).value = value }
    
    var ElementAddress: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _CHANGER_ELEMENT_LIST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Element: CHANGER_ELEMENT
        get() = memberAt(0)
    
    var NumberOfElements: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _GET_CHANGER_PARAMETERS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(60, 4)
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var NumberTransportElements: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var NumberStorageElements: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var NumberCleanerSlots: WORD
        get() = memberAt<WORDVar>(8).value
        set(value) { memberAt<WORDVar>(8).value = value }
    
    var NumberIEElements: WORD
        get() = memberAt<WORDVar>(10).value
        set(value) { memberAt<WORDVar>(10).value = value }
    
    var NumberDataTransferElements: WORD
        get() = memberAt<WORDVar>(12).value
        set(value) { memberAt<WORDVar>(12).value = value }
    
    var NumberOfDoors: WORD
        get() = memberAt<WORDVar>(14).value
        set(value) { memberAt<WORDVar>(14).value = value }
    
    var FirstSlotNumber: WORD
        get() = memberAt<WORDVar>(16).value
        set(value) { memberAt<WORDVar>(16).value = value }
    
    var FirstDriveNumber: WORD
        get() = memberAt<WORDVar>(18).value
        set(value) { memberAt<WORDVar>(18).value = value }
    
    var FirstTransportNumber: WORD
        get() = memberAt<WORDVar>(20).value
        set(value) { memberAt<WORDVar>(20).value = value }
    
    var FirstIEPortNumber: WORD
        get() = memberAt<WORDVar>(22).value
        set(value) { memberAt<WORDVar>(22).value = value }
    
    var FirstCleanerSlotAddress: WORD
        get() = memberAt<WORDVar>(24).value
        set(value) { memberAt<WORDVar>(24).value = value }
    
    var MagazineSize: WORD
        get() = memberAt<WORDVar>(26).value
        set(value) { memberAt<WORDVar>(26).value = value }
    
    var DriveCleanTimeout: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var Features0: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var Features1: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var MoveFromTransport: BYTE
        get() = memberAt<BYTEVar>(40).value
        set(value) { memberAt<BYTEVar>(40).value = value }
    
    var MoveFromSlot: BYTE
        get() = memberAt<BYTEVar>(41).value
        set(value) { memberAt<BYTEVar>(41).value = value }
    
    var MoveFromIePort: BYTE
        get() = memberAt<BYTEVar>(42).value
        set(value) { memberAt<BYTEVar>(42).value = value }
    
    var MoveFromDrive: BYTE
        get() = memberAt<BYTEVar>(43).value
        set(value) { memberAt<BYTEVar>(43).value = value }
    
    var ExchangeFromTransport: BYTE
        get() = memberAt<BYTEVar>(44).value
        set(value) { memberAt<BYTEVar>(44).value = value }
    
    var ExchangeFromSlot: BYTE
        get() = memberAt<BYTEVar>(45).value
        set(value) { memberAt<BYTEVar>(45).value = value }
    
    var ExchangeFromIePort: BYTE
        get() = memberAt<BYTEVar>(46).value
        set(value) { memberAt<BYTEVar>(46).value = value }
    
    var ExchangeFromDrive: BYTE
        get() = memberAt<BYTEVar>(47).value
        set(value) { memberAt<BYTEVar>(47).value = value }
    
    var LockUnlockCapabilities: BYTE
        get() = memberAt<BYTEVar>(48).value
        set(value) { memberAt<BYTEVar>(48).value = value }
    
    var PositionCapabilities: BYTE
        get() = memberAt<BYTEVar>(49).value
        set(value) { memberAt<BYTEVar>(49).value = value }
    
    val Reserved1: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(50)
    
    val Reserved2: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(52)
    
}

class _CHANGER_PRODUCT_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(61, 1)
    
    val VendorId: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
    val ProductId: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(8)
    
    val Revision: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(24)
    
    val SerialNumber: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
    var DeviceType: BYTE
        get() = memberAt<BYTEVar>(60).value
        set(value) { memberAt<BYTEVar>(60).value = value }
    
}

class _CHANGER_SET_ACCESS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    val Element: CHANGER_ELEMENT
        get() = memberAt(0)
    
    var Control: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _CHANGER_READ_ELEMENT_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val ElementList: CHANGER_ELEMENT_LIST
        get() = memberAt(0)
    
    var VolumeTagInfo: BOOLEAN
        get() = memberAt<BOOLEANVar>(12).value
        set(value) { memberAt<BOOLEANVar>(12).value = value }
    
}

class _CHANGER_ELEMENT_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(100, 4)
    
    val Element: CHANGER_ELEMENT
        get() = memberAt(0)
    
    val SrcElementAddress: CHANGER_ELEMENT
        get() = memberAt(8)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var ExceptionCode: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var TargetId: BYTE
        get() = memberAt<BYTEVar>(24).value
        set(value) { memberAt<BYTEVar>(24).value = value }
    
    var Lun: BYTE
        get() = memberAt<BYTEVar>(25).value
        set(value) { memberAt<BYTEVar>(25).value = value }
    
    var Reserved: WORD
        get() = memberAt<WORDVar>(26).value
        set(value) { memberAt<WORDVar>(26).value = value }
    
    val PrimaryVolumeID: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
    val AlternateVolumeID: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(64)
    
}

class _CHANGER_ELEMENT_STATUS_EX(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(156, 4)
    
    val Element: CHANGER_ELEMENT
        get() = memberAt(0)
    
    val SrcElementAddress: CHANGER_ELEMENT
        get() = memberAt(8)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var ExceptionCode: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var TargetId: BYTE
        get() = memberAt<BYTEVar>(24).value
        set(value) { memberAt<BYTEVar>(24).value = value }
    
    var Lun: BYTE
        get() = memberAt<BYTEVar>(25).value
        set(value) { memberAt<BYTEVar>(25).value = value }
    
    var Reserved: WORD
        get() = memberAt<WORDVar>(26).value
        set(value) { memberAt<WORDVar>(26).value = value }
    
    val PrimaryVolumeID: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
    val AlternateVolumeID: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(64)
    
    val VendorIdentification: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(100)
    
    val ProductIdentification: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(108)
    
    val SerialNumber: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(124)
    
}

class _CHANGER_INITIALIZE_ELEMENT_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val ElementList: CHANGER_ELEMENT_LIST
        get() = memberAt(0)
    
    var BarCodeScan: BOOLEAN
        get() = memberAt<BOOLEANVar>(12).value
        set(value) { memberAt<BOOLEANVar>(12).value = value }
    
}

class _CHANGER_SET_POSITION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(20, 4)
    
    val Transport: CHANGER_ELEMENT
        get() = memberAt(0)
    
    val Destination: CHANGER_ELEMENT
        get() = memberAt(8)
    
    var Flip: BOOLEAN
        get() = memberAt<BOOLEANVar>(16).value
        set(value) { memberAt<BOOLEANVar>(16).value = value }
    
}

class _CHANGER_EXCHANGE_MEDIUM(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    val Transport: CHANGER_ELEMENT
        get() = memberAt(0)
    
    val Source: CHANGER_ELEMENT
        get() = memberAt(8)
    
    val Destination1: CHANGER_ELEMENT
        get() = memberAt(16)
    
    val Destination2: CHANGER_ELEMENT
        get() = memberAt(24)
    
    var Flip1: BOOLEAN
        get() = memberAt<BOOLEANVar>(32).value
        set(value) { memberAt<BOOLEANVar>(32).value = value }
    
    var Flip2: BOOLEAN
        get() = memberAt<BOOLEANVar>(33).value
        set(value) { memberAt<BOOLEANVar>(33).value = value }
    
}

class _CHANGER_MOVE_MEDIUM(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    val Transport: CHANGER_ELEMENT
        get() = memberAt(0)
    
    val Source: CHANGER_ELEMENT
        get() = memberAt(8)
    
    val Destination: CHANGER_ELEMENT
        get() = memberAt(16)
    
    var Flip: BOOLEAN
        get() = memberAt<BOOLEANVar>(24).value
        set(value) { memberAt<BOOLEANVar>(24).value = value }
    
}

class _CHANGER_SEND_VOLUME_TAG_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(52, 4)
    
    val StartingElement: CHANGER_ELEMENT
        get() = memberAt(0)
    
    var ActionCode: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val VolumeIDTemplate: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(12)
    
}

class _READ_ELEMENT_ADDRESS_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(104, 4)
    
    var NumberOfElements: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val ElementStatus: CArrayPointer<CHANGER_ELEMENT_STATUS>
        get() = arrayMemberAt(4)
    
}

class _PATHNAME_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var PathNameLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Name: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(4)
    
}

class _FSCTL_QUERY_FAT_BPB_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 1)
    
    val First0x24BytesOfBootSector: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
}

class NTFS_VOLUME_DATA_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 8)
    
    val VolumeSerialNumber: LARGE_INTEGER
        get() = memberAt(0)
    
    val NumberSectors: LARGE_INTEGER
        get() = memberAt(8)
    
    val TotalClusters: LARGE_INTEGER
        get() = memberAt(16)
    
    val FreeClusters: LARGE_INTEGER
        get() = memberAt(24)
    
    val TotalReserved: LARGE_INTEGER
        get() = memberAt(32)
    
    var BytesPerSector: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var BytesPerCluster: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var BytesPerFileRecordSegment: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var ClustersPerFileRecordSegment: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    val MftValidDataLength: LARGE_INTEGER
        get() = memberAt(56)
    
    val MftStartLcn: LARGE_INTEGER
        get() = memberAt(64)
    
    val Mft2StartLcn: LARGE_INTEGER
        get() = memberAt(72)
    
    val MftZoneStart: LARGE_INTEGER
        get() = memberAt(80)
    
    val MftZoneEnd: LARGE_INTEGER
        get() = memberAt(88)
    
}

class NTFS_EXTENDED_VOLUME_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var ByteCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var MajorVersion: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var MinorVersion: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
}

class STARTING_LCN_INPUT_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    val StartingLcn: LARGE_INTEGER
        get() = memberAt(0)
    
}

class VOLUME_BITMAP_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    val StartingLcn: LARGE_INTEGER
        get() = memberAt(0)
    
    val BitmapSize: LARGE_INTEGER
        get() = memberAt(8)
    
    val Buffer: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(16)
    
}

class STARTING_VCN_INPUT_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    val StartingVcn: LARGE_INTEGER
        get() = memberAt(0)
    
}

class RETRIEVAL_POINTERS_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var ExtentCount: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val StartingVcn: LARGE_INTEGER
        get() = memberAt(8)
    
    val Extents: CArrayPointer<anonymousStruct145>
        get() = arrayMemberAt(16)
    
}

class anonymousStruct145(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val NextVcn: LARGE_INTEGER
        get() = memberAt(0)
    
    val Lcn: LARGE_INTEGER
        get() = memberAt(8)
    
}

class NTFS_FILE_RECORD_INPUT_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    val FileReferenceNumber: LARGE_INTEGER
        get() = memberAt(0)
    
}

class NTFS_FILE_RECORD_OUTPUT_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val FileReferenceNumber: LARGE_INTEGER
        get() = memberAt(0)
    
    var FileRecordLength: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val FileRecordBuffer: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(12)
    
}

class MOVE_FILE_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var FileHandle: HANDLE?
        get() = memberAt<HANDLEVar>(0).value
        set(value) { memberAt<HANDLEVar>(0).value = value }
    
    val StartingVcn: LARGE_INTEGER
        get() = memberAt(8)
    
    val StartingLcn: LARGE_INTEGER
        get() = memberAt(16)
    
    var ClusterCount: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _MOVE_FILE_DATA32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var FileHandle: UINT32
        get() = memberAt<UINT32Var>(0).value
        set(value) { memberAt<UINT32Var>(0).value = value }
    
    val StartingVcn: LARGE_INTEGER
        get() = memberAt(8)
    
    val StartingLcn: LARGE_INTEGER
        get() = memberAt(16)
    
    var ClusterCount: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class FIND_BY_SID_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var Restart: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Sid: SID
        get() = memberAt(4)
    
}

class FIND_BY_SID_OUTPUT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var NextEntryOffset: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var FileIndex: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var FileNameLength: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val FileName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(12)
    
}

class MFT_ENUM_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var StartFileReferenceNumber: DWORDLONG
        get() = memberAt<DWORDLONGVar>(0).value
        set(value) { memberAt<DWORDLONGVar>(0).value = value }
    
    var LowUsn: USN
        get() = memberAt<USNVar>(8).value
        set(value) { memberAt<USNVar>(8).value = value }
    
    var HighUsn: USN
        get() = memberAt<USNVar>(16).value
        set(value) { memberAt<USNVar>(16).value = value }
    
}

class CREATE_USN_JOURNAL_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var MaximumSize: DWORDLONG
        get() = memberAt<DWORDLONGVar>(0).value
        set(value) { memberAt<DWORDLONGVar>(0).value = value }
    
    var AllocationDelta: DWORDLONG
        get() = memberAt<DWORDLONGVar>(8).value
        set(value) { memberAt<DWORDLONGVar>(8).value = value }
    
}

class READ_USN_JOURNAL_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var StartUsn: USN
        get() = memberAt<USNVar>(0).value
        set(value) { memberAt<USNVar>(0).value = value }
    
    var ReasonMask: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var ReturnOnlyOnClose: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var Timeout: DWORDLONG
        get() = memberAt<DWORDLONGVar>(16).value
        set(value) { memberAt<DWORDLONGVar>(16).value = value }
    
    var BytesToWaitFor: DWORDLONG
        get() = memberAt<DWORDLONGVar>(24).value
        set(value) { memberAt<DWORDLONGVar>(24).value = value }
    
    var UsnJournalID: DWORDLONG
        get() = memberAt<DWORDLONGVar>(32).value
        set(value) { memberAt<DWORDLONGVar>(32).value = value }
    
}

class USN_RECORD(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var RecordLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var MajorVersion: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var MinorVersion: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
    var FileReferenceNumber: DWORDLONG
        get() = memberAt<DWORDLONGVar>(8).value
        set(value) { memberAt<DWORDLONGVar>(8).value = value }
    
    var ParentFileReferenceNumber: DWORDLONG
        get() = memberAt<DWORDLONGVar>(16).value
        set(value) { memberAt<DWORDLONGVar>(16).value = value }
    
    var Usn: USN
        get() = memberAt<USNVar>(24).value
        set(value) { memberAt<USNVar>(24).value = value }
    
    val TimeStamp: LARGE_INTEGER
        get() = memberAt(32)
    
    var Reason: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var SourceInfo: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var SecurityId: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var FileAttributes: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var FileNameLength: WORD
        get() = memberAt<WORDVar>(56).value
        set(value) { memberAt<WORDVar>(56).value = value }
    
    var FileNameOffset: WORD
        get() = memberAt<WORDVar>(58).value
        set(value) { memberAt<WORDVar>(58).value = value }
    
    val FileName: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(60)
    
}

class USN_JOURNAL_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var UsnJournalID: DWORDLONG
        get() = memberAt<DWORDLONGVar>(0).value
        set(value) { memberAt<DWORDLONGVar>(0).value = value }
    
    var FirstUsn: USN
        get() = memberAt<USNVar>(8).value
        set(value) { memberAt<USNVar>(8).value = value }
    
    var NextUsn: USN
        get() = memberAt<USNVar>(16).value
        set(value) { memberAt<USNVar>(16).value = value }
    
    var LowestValidUsn: USN
        get() = memberAt<USNVar>(24).value
        set(value) { memberAt<USNVar>(24).value = value }
    
    var MaxUsn: USN
        get() = memberAt<USNVar>(32).value
        set(value) { memberAt<USNVar>(32).value = value }
    
    var MaximumSize: DWORDLONG
        get() = memberAt<DWORDLONGVar>(40).value
        set(value) { memberAt<DWORDLONGVar>(40).value = value }
    
    var AllocationDelta: DWORDLONG
        get() = memberAt<DWORDLONGVar>(48).value
        set(value) { memberAt<DWORDLONGVar>(48).value = value }
    
}

class DELETE_USN_JOURNAL_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var UsnJournalID: DWORDLONG
        get() = memberAt<DWORDLONGVar>(0).value
        set(value) { memberAt<DWORDLONGVar>(0).value = value }
    
    var DeleteFlags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class MARK_HANDLE_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var UsnSourceInfo: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var VolumeHandle: HANDLE?
        get() = memberAt<HANDLEVar>(8).value
        set(value) { memberAt<HANDLEVar>(8).value = value }
    
    var HandleInfo: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class MARK_HANDLE_INFO32(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var UsnSourceInfo: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var VolumeHandle: UINT32
        get() = memberAt<UINT32Var>(4).value
        set(value) { memberAt<UINT32Var>(4).value = value }
    
    var HandleInfo: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class BULK_SECURITY_TEST_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var DesiredAccess: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(0).value
        set(value) { memberAt<ACCESS_MASKVar>(0).value = value }
    
    val SecurityIds: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(4)
    
}

class _FILE_PREFETCH(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Type: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    val Prefetch: CArrayPointer<DWORDLONGVar>
        get() = arrayMemberAt(8)
    
}

class _FILESYSTEM_STATISTICS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 4)
    
    var FileSystemType: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Version: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var SizeOfCompleteStructure: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var UserFileReads: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var UserFileReadBytes: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var UserDiskReads: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var UserFileWrites: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var UserFileWriteBytes: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var UserDiskWrites: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var MetaDataReads: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var MetaDataReadBytes: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
    var MetaDataDiskReads: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var MetaDataWrites: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    var MetaDataWriteBytes: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var MetaDataDiskWrites: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
}

class _FAT_STATISTICS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    var CreateHits: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var SuccessfulCreates: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var FailedCreates: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var NonCachedReads: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var NonCachedReadBytes: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var NonCachedWrites: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var NonCachedWriteBytes: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var NonCachedDiskReads: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var NonCachedDiskWrites: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _EXFAT_STATISTICS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    var CreateHits: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var SuccessfulCreates: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var FailedCreates: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var NonCachedReads: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var NonCachedReadBytes: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var NonCachedWrites: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var NonCachedWriteBytes: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var NonCachedDiskReads: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var NonCachedDiskWrites: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _NTFS_STATISTICS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(212, 4)
    
    var LogFileFullExceptions: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var OtherExceptions: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var MftReads: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var MftReadBytes: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var MftWrites: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var MftWriteBytes: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    val MftWritesUserLevel: anonymousStruct146
        get() = memberAt(24)
    
    var MftWritesFlushForLogFileFull: WORD
        get() = memberAt<WORDVar>(32).value
        set(value) { memberAt<WORDVar>(32).value = value }
    
    var MftWritesLazyWriter: WORD
        get() = memberAt<WORDVar>(34).value
        set(value) { memberAt<WORDVar>(34).value = value }
    
    var MftWritesUserRequest: WORD
        get() = memberAt<WORDVar>(36).value
        set(value) { memberAt<WORDVar>(36).value = value }
    
    var Mft2Writes: DWORD
        get() = memberAt<DWORDVar>(40).value
        set(value) { memberAt<DWORDVar>(40).value = value }
    
    var Mft2WriteBytes: DWORD
        get() = memberAt<DWORDVar>(44).value
        set(value) { memberAt<DWORDVar>(44).value = value }
    
    val Mft2WritesUserLevel: anonymousStruct147
        get() = memberAt(48)
    
    var Mft2WritesFlushForLogFileFull: WORD
        get() = memberAt<WORDVar>(56).value
        set(value) { memberAt<WORDVar>(56).value = value }
    
    var Mft2WritesLazyWriter: WORD
        get() = memberAt<WORDVar>(58).value
        set(value) { memberAt<WORDVar>(58).value = value }
    
    var Mft2WritesUserRequest: WORD
        get() = memberAt<WORDVar>(60).value
        set(value) { memberAt<WORDVar>(60).value = value }
    
    var RootIndexReads: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var RootIndexReadBytes: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    var RootIndexWrites: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
    var RootIndexWriteBytes: DWORD
        get() = memberAt<DWORDVar>(76).value
        set(value) { memberAt<DWORDVar>(76).value = value }
    
    var BitmapReads: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var BitmapReadBytes: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var BitmapWrites: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var BitmapWriteBytes: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
    var BitmapWritesFlushForLogFileFull: WORD
        get() = memberAt<WORDVar>(96).value
        set(value) { memberAt<WORDVar>(96).value = value }
    
    var BitmapWritesLazyWriter: WORD
        get() = memberAt<WORDVar>(98).value
        set(value) { memberAt<WORDVar>(98).value = value }
    
    var BitmapWritesUserRequest: WORD
        get() = memberAt<WORDVar>(100).value
        set(value) { memberAt<WORDVar>(100).value = value }
    
    val BitmapWritesUserLevel: anonymousStruct148
        get() = memberAt(102)
    
    var MftBitmapReads: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    var MftBitmapReadBytes: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var MftBitmapWrites: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
    var MftBitmapWriteBytes: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
    var MftBitmapWritesFlushForLogFileFull: WORD
        get() = memberAt<WORDVar>(124).value
        set(value) { memberAt<WORDVar>(124).value = value }
    
    var MftBitmapWritesLazyWriter: WORD
        get() = memberAt<WORDVar>(126).value
        set(value) { memberAt<WORDVar>(126).value = value }
    
    var MftBitmapWritesUserRequest: WORD
        get() = memberAt<WORDVar>(128).value
        set(value) { memberAt<WORDVar>(128).value = value }
    
    val MftBitmapWritesUserLevel: anonymousStruct149
        get() = memberAt(130)
    
    var UserIndexReads: DWORD
        get() = memberAt<DWORDVar>(140).value
        set(value) { memberAt<DWORDVar>(140).value = value }
    
    var UserIndexReadBytes: DWORD
        get() = memberAt<DWORDVar>(144).value
        set(value) { memberAt<DWORDVar>(144).value = value }
    
    var UserIndexWrites: DWORD
        get() = memberAt<DWORDVar>(148).value
        set(value) { memberAt<DWORDVar>(148).value = value }
    
    var UserIndexWriteBytes: DWORD
        get() = memberAt<DWORDVar>(152).value
        set(value) { memberAt<DWORDVar>(152).value = value }
    
    var LogFileReads: DWORD
        get() = memberAt<DWORDVar>(156).value
        set(value) { memberAt<DWORDVar>(156).value = value }
    
    var LogFileReadBytes: DWORD
        get() = memberAt<DWORDVar>(160).value
        set(value) { memberAt<DWORDVar>(160).value = value }
    
    var LogFileWrites: DWORD
        get() = memberAt<DWORDVar>(164).value
        set(value) { memberAt<DWORDVar>(164).value = value }
    
    var LogFileWriteBytes: DWORD
        get() = memberAt<DWORDVar>(168).value
        set(value) { memberAt<DWORDVar>(168).value = value }
    
    val Allocate: anonymousStruct150
        get() = memberAt(172)
    
}

class anonymousStruct146(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    var Write: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Create: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var SetInfo: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Flush: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
}

class anonymousStruct147(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    var Write: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Create: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var SetInfo: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Flush: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
}

class anonymousStruct148(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(6, 2)
    
    var Write: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Create: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var SetInfo: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
}

class anonymousStruct149(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 2)
    
    var Write: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Create: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var SetInfo: WORD
        get() = memberAt<WORDVar>(4).value
        set(value) { memberAt<WORDVar>(4).value = value }
    
    var Flush: WORD
        get() = memberAt<WORDVar>(6).value
        set(value) { memberAt<WORDVar>(6).value = value }
    
}

class anonymousStruct150(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var Calls: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Clusters: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Hints: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var RunsReturned: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var HintsHonored: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var HintsClusters: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var Cache: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var CacheClusters: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var CacheMiss: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var CacheMissClusters: DWORD
        get() = memberAt<DWORDVar>(36).value
        set(value) { memberAt<DWORDVar>(36).value = value }
    
}

class _FILE_OBJECTID_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 1)
    
    val ObjectId: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
}

class anonymousStruct151(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 1)
    
    val ExtendedInfo: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
}

class anonymousStruct152(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 1)
    
    val BirthVolumeId: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
    val BirthObjectId: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(16)
    
    val DomainId: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(32)
    
}

class _FILE_SET_SPARSE_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    var SetSparse: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
}

class _FILE_ZERO_DATA_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val FileOffset: LARGE_INTEGER
        get() = memberAt(0)
    
    val BeyondFinalZero: LARGE_INTEGER
        get() = memberAt(8)
    
}

class _FILE_ALLOCATED_RANGE_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val FileOffset: LARGE_INTEGER
        get() = memberAt(0)
    
    val Length: LARGE_INTEGER
        get() = memberAt(8)
    
}

class _ENCRYPTION_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var EncryptionOperation: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Private: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
}

class _DECRYPTION_STATUS_BUFFER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(1, 1)
    
    var NoEncryptedStreams: BOOLEAN
        get() = memberAt<BOOLEANVar>(0).value
        set(value) { memberAt<BOOLEANVar>(0).value = value }
    
}

class _REQUEST_RAW_ENCRYPTED_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var FileOffset: LONGLONG
        get() = memberAt<LONGLONGVar>(0).value
        set(value) { memberAt<LONGLONGVar>(0).value = value }
    
    var Length: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _ENCRYPTED_DATA_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var StartingFileOffset: DWORDLONG
        get() = memberAt<DWORDLONGVar>(0).value
        set(value) { memberAt<DWORDLONGVar>(0).value = value }
    
    var OutputBufferOffset: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var BytesWithinFileSize: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var BytesWithinValidDataLength: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var CompressionFormat: WORD
        get() = memberAt<WORDVar>(20).value
        set(value) { memberAt<WORDVar>(20).value = value }
    
    var DataUnitShift: BYTE
        get() = memberAt<BYTEVar>(22).value
        set(value) { memberAt<BYTEVar>(22).value = value }
    
    var ChunkShift: BYTE
        get() = memberAt<BYTEVar>(23).value
        set(value) { memberAt<BYTEVar>(23).value = value }
    
    var ClusterShift: BYTE
        get() = memberAt<BYTEVar>(24).value
        set(value) { memberAt<BYTEVar>(24).value = value }
    
    var EncryptionFormat: BYTE
        get() = memberAt<BYTEVar>(25).value
        set(value) { memberAt<BYTEVar>(25).value = value }
    
    var NumberOfDataBlocks: WORD
        get() = memberAt<WORDVar>(26).value
        set(value) { memberAt<WORDVar>(26).value = value }
    
    val DataBlockSize: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(28)
    
}

class _PLEX_READ_DATA_REQUEST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val ByteOffset: LARGE_INTEGER
        get() = memberAt(0)
    
    var ByteLength: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var PlexNumber: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class _SI_COPYFILE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var SourceFileNameLength: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var DestinationFileNameLength: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val FileNameBuffer: CArrayPointer<WCHARVar>
        get() = arrayMemberAt(12)
    
}

class _STORAGE_DESCRIPTOR_HEADER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _STORAGE_PROPERTY_QUERY(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var PropertyId: STORAGE_PROPERTY_ID
        get() = memberAt<STORAGE_PROPERTY_IDVar>(0).value
        set(value) { memberAt<STORAGE_PROPERTY_IDVar>(0).value = value }
    
    var QueryType: STORAGE_QUERY_TYPE
        get() = memberAt<STORAGE_QUERY_TYPEVar>(4).value
        set(value) { memberAt<STORAGE_QUERY_TYPEVar>(4).value = value }
    
    val AdditionalParameters: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(8)
    
}

class _STORAGE_DEVICE_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 4)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var DeviceType: BYTE
        get() = memberAt<BYTEVar>(8).value
        set(value) { memberAt<BYTEVar>(8).value = value }
    
    var DeviceTypeModifier: BYTE
        get() = memberAt<BYTEVar>(9).value
        set(value) { memberAt<BYTEVar>(9).value = value }
    
    var RemovableMedia: BOOLEAN
        get() = memberAt<BOOLEANVar>(10).value
        set(value) { memberAt<BOOLEANVar>(10).value = value }
    
    var CommandQueueing: BOOLEAN
        get() = memberAt<BOOLEANVar>(11).value
        set(value) { memberAt<BOOLEANVar>(11).value = value }
    
    var VendorIdOffset: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var ProductIdOffset: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var ProductRevisionOffset: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var SerialNumberOffset: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var BusType: STORAGE_BUS_TYPE
        get() = memberAt<STORAGE_BUS_TYPEVar>(28).value
        set(value) { memberAt<STORAGE_BUS_TYPEVar>(28).value = value }
    
    var RawPropertiesLength: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    val RawDeviceProperties: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(36)
    
}

class _STORAGE_ADAPTER_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 4)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var MaximumTransferLength: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var MaximumPhysicalPages: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var AlignmentMask: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var AdapterUsesPio: BOOLEAN
        get() = memberAt<BOOLEANVar>(20).value
        set(value) { memberAt<BOOLEANVar>(20).value = value }
    
    var AdapterScansDown: BOOLEAN
        get() = memberAt<BOOLEANVar>(21).value
        set(value) { memberAt<BOOLEANVar>(21).value = value }
    
    var CommandQueueing: BOOLEAN
        get() = memberAt<BOOLEANVar>(22).value
        set(value) { memberAt<BOOLEANVar>(22).value = value }
    
    var AcceleratedTransfer: BOOLEAN
        get() = memberAt<BOOLEANVar>(23).value
        set(value) { memberAt<BOOLEANVar>(23).value = value }
    
    var BusType: BYTE
        get() = memberAt<BYTEVar>(24).value
        set(value) { memberAt<BYTEVar>(24).value = value }
    
    var BusMajorVersion: WORD
        get() = memberAt<WORDVar>(26).value
        set(value) { memberAt<WORDVar>(26).value = value }
    
    var BusMinorVersion: WORD
        get() = memberAt<WORDVar>(28).value
        set(value) { memberAt<WORDVar>(28).value = value }
    
}

class _STORAGE_DEVICE_ID_DESCRIPTOR(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var NumberOfIdentifiers: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val Identifiers: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(12)
    
}

class _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var GptAttributes: ULONGLONG
        get() = memberAt<ULONGLONGVar>(0).value
        set(value) { memberAt<ULONGLONGVar>(0).value = value }
    
}

class _DISK_EXTENT(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var DiskNumber: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val StartingOffset: LARGE_INTEGER
        get() = memberAt(8)
    
    val ExtentLength: LARGE_INTEGER
        get() = memberAt(16)
    
}

class _VOLUME_DISK_EXTENTS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var NumberOfDiskExtents: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val Extents: CArrayPointer<DISK_EXTENT>
        get() = arrayMemberAt(8)
    
}

class _SCARD_IO_REQUEST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var dwProtocol: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var cbPciLength: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class SCARD_T0_COMMAND(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(5, 1)
    
    var bCla: BYTE
        get() = memberAt<BYTEVar>(0).value
        set(value) { memberAt<BYTEVar>(0).value = value }
    
    var bIns: BYTE
        get() = memberAt<BYTEVar>(1).value
        set(value) { memberAt<BYTEVar>(1).value = value }
    
    var bP1: BYTE
        get() = memberAt<BYTEVar>(2).value
        set(value) { memberAt<BYTEVar>(2).value = value }
    
    var bP2: BYTE
        get() = memberAt<BYTEVar>(3).value
        set(value) { memberAt<BYTEVar>(3).value = value }
    
    var bP3: BYTE
        get() = memberAt<BYTEVar>(4).value
        set(value) { memberAt<BYTEVar>(4).value = value }
    
}

class SCARD_T0_REQUEST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    val ioRequest: SCARD_IO_REQUEST
        get() = memberAt(0)
    
    var bSw1: BYTE
        get() = memberAt<BYTEVar>(8).value
        set(value) { memberAt<BYTEVar>(8).value = value }
    
    var bSw2: BYTE
        get() = memberAt<BYTEVar>(9).value
        set(value) { memberAt<BYTEVar>(9).value = value }
    
}

class anonymousStruct153(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(5, 1)
    
    val CmdBytes: SCARD_T0_COMMAND
        get() = memberAt(0)
    
    val rgbHeader: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(0)
    
}

class SCARD_T1_REQUEST(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    val ioRequest: SCARD_IO_REQUEST
        get() = memberAt(0)
    
}

class SCARD_READERSTATEA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var szReader: LPCSTR?
        get() = memberAt<LPCSTRVar>(0).value
        set(value) { memberAt<LPCSTRVar>(0).value = value }
    
    var pvUserData: LPVOID?
        get() = memberAt<LPVOIDVar>(8).value
        set(value) { memberAt<LPVOIDVar>(8).value = value }
    
    var dwCurrentState: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwEventState: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var cbAtr: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val rgbAtr: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
}

class SCARD_READERSTATEW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var szReader: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(0).value
        set(value) { memberAt<LPCWSTRVar>(0).value = value }
    
    var pvUserData: LPVOID?
        get() = memberAt<LPVOIDVar>(8).value
        set(value) { memberAt<LPVOIDVar>(8).value = value }
    
    var dwCurrentState: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwEventState: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var cbAtr: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    val rgbAtr: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(28)
    
}

class _SCARD_ATRMASK(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(76, 4)
    
    var cbAtr: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val rgbAtr: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(4)
    
    val rgbMask: CArrayPointer<BYTEVar>
        get() = arrayMemberAt(40)
    
}

class OPENCARD_SEARCH_CRITERIAA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 8)
    
    var dwStructSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpstrGroupNames: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var nMaxGroupNames: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgguidInterfaces: LPCGUID?
        get() = memberAt<LPCGUIDVar>(24).value
        set(value) { memberAt<LPCGUIDVar>(24).value = value }
    
    var cguidInterfaces: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var lpstrCardNames: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var nMaxCardNames: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var lpfnCheck: LPOCNCHKPROC?
        get() = memberAt<LPOCNCHKPROCVar>(56).value
        set(value) { memberAt<LPOCNCHKPROCVar>(56).value = value }
    
    var lpfnConnect: LPOCNCONNPROCA?
        get() = memberAt<LPOCNCONNPROCAVar>(64).value
        set(value) { memberAt<LPOCNCONNPROCAVar>(64).value = value }
    
    var lpfnDisconnect: LPOCNDSCPROC?
        get() = memberAt<LPOCNDSCPROCVar>(72).value
        set(value) { memberAt<LPOCNDSCPROCVar>(72).value = value }
    
    var pvUserData: LPVOID?
        get() = memberAt<LPVOIDVar>(80).value
        set(value) { memberAt<LPVOIDVar>(80).value = value }
    
    var dwShareMode: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var dwPreferredProtocols: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
}

class OPENCARD_SEARCH_CRITERIAW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 8)
    
    var dwStructSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpstrGroupNames: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var nMaxGroupNames: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var rgguidInterfaces: LPCGUID?
        get() = memberAt<LPCGUIDVar>(24).value
        set(value) { memberAt<LPCGUIDVar>(24).value = value }
    
    var cguidInterfaces: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var lpstrCardNames: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var nMaxCardNames: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var lpfnCheck: LPOCNCHKPROC?
        get() = memberAt<LPOCNCHKPROCVar>(56).value
        set(value) { memberAt<LPOCNCHKPROCVar>(56).value = value }
    
    var lpfnConnect: LPOCNCONNPROCW?
        get() = memberAt<LPOCNCONNPROCWVar>(64).value
        set(value) { memberAt<LPOCNCONNPROCWVar>(64).value = value }
    
    var lpfnDisconnect: LPOCNDSCPROC?
        get() = memberAt<LPOCNDSCPROCVar>(72).value
        set(value) { memberAt<LPOCNDSCPROCVar>(72).value = value }
    
    var pvUserData: LPVOID?
        get() = memberAt<LPVOIDVar>(80).value
        set(value) { memberAt<LPVOIDVar>(80).value = value }
    
    var dwShareMode: DWORD
        get() = memberAt<DWORDVar>(88).value
        set(value) { memberAt<DWORDVar>(88).value = value }
    
    var dwPreferredProtocols: DWORD
        get() = memberAt<DWORDVar>(92).value
        set(value) { memberAt<DWORDVar>(92).value = value }
    
}

class OPENCARDNAME_EXA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(128, 8)
    
    var dwStructSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hSCardContext: SCARDCONTEXT
        get() = memberAt<SCARDCONTEXTVar>(8).value
        set(value) { memberAt<SCARDCONTEXTVar>(8).value = value }
    
    var hwndOwner: HWND?
        get() = memberAt<HWNDVar>(16).value
        set(value) { memberAt<HWNDVar>(16).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var lpstrTitle: LPCSTR?
        get() = memberAt<LPCSTRVar>(32).value
        set(value) { memberAt<LPCSTRVar>(32).value = value }
    
    var lpstrSearchDesc: LPCSTR?
        get() = memberAt<LPCSTRVar>(40).value
        set(value) { memberAt<LPCSTRVar>(40).value = value }
    
    var hIcon: HICON?
        get() = memberAt<HICONVar>(48).value
        set(value) { memberAt<HICONVar>(48).value = value }
    
    var pOpenCardSearchCriteria: POPENCARD_SEARCH_CRITERIAA?
        get() = memberAt<POPENCARD_SEARCH_CRITERIAAVar>(56).value
        set(value) { memberAt<POPENCARD_SEARCH_CRITERIAAVar>(56).value = value }
    
    var lpfnConnect: LPOCNCONNPROCA?
        get() = memberAt<LPOCNCONNPROCAVar>(64).value
        set(value) { memberAt<LPOCNCONNPROCAVar>(64).value = value }
    
    var pvUserData: LPVOID?
        get() = memberAt<LPVOIDVar>(72).value
        set(value) { memberAt<LPVOIDVar>(72).value = value }
    
    var dwShareMode: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var dwPreferredProtocols: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var lpstrRdr: LPSTR?
        get() = memberAt<LPSTRVar>(88).value
        set(value) { memberAt<LPSTRVar>(88).value = value }
    
    var nMaxRdr: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var lpstrCard: LPSTR?
        get() = memberAt<LPSTRVar>(104).value
        set(value) { memberAt<LPSTRVar>(104).value = value }
    
    var nMaxCard: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var dwActiveProtocol: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
    var hCardHandle: SCARDHANDLE
        get() = memberAt<SCARDHANDLEVar>(120).value
        set(value) { memberAt<SCARDHANDLEVar>(120).value = value }
    
}

class OPENCARDNAME_EXW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(128, 8)
    
    var dwStructSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hSCardContext: SCARDCONTEXT
        get() = memberAt<SCARDCONTEXTVar>(8).value
        set(value) { memberAt<SCARDCONTEXTVar>(8).value = value }
    
    var hwndOwner: HWND?
        get() = memberAt<HWNDVar>(16).value
        set(value) { memberAt<HWNDVar>(16).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var lpstrTitle: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(32).value
        set(value) { memberAt<LPCWSTRVar>(32).value = value }
    
    var lpstrSearchDesc: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(40).value
        set(value) { memberAt<LPCWSTRVar>(40).value = value }
    
    var hIcon: HICON?
        get() = memberAt<HICONVar>(48).value
        set(value) { memberAt<HICONVar>(48).value = value }
    
    var pOpenCardSearchCriteria: POPENCARD_SEARCH_CRITERIAW?
        get() = memberAt<POPENCARD_SEARCH_CRITERIAWVar>(56).value
        set(value) { memberAt<POPENCARD_SEARCH_CRITERIAWVar>(56).value = value }
    
    var lpfnConnect: LPOCNCONNPROCW?
        get() = memberAt<LPOCNCONNPROCWVar>(64).value
        set(value) { memberAt<LPOCNCONNPROCWVar>(64).value = value }
    
    var pvUserData: LPVOID?
        get() = memberAt<LPVOIDVar>(72).value
        set(value) { memberAt<LPVOIDVar>(72).value = value }
    
    var dwShareMode: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var dwPreferredProtocols: DWORD
        get() = memberAt<DWORDVar>(84).value
        set(value) { memberAt<DWORDVar>(84).value = value }
    
    var lpstrRdr: LPWSTR?
        get() = memberAt<LPWSTRVar>(88).value
        set(value) { memberAt<LPWSTRVar>(88).value = value }
    
    var nMaxRdr: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var lpstrCard: LPWSTR?
        get() = memberAt<LPWSTRVar>(104).value
        set(value) { memberAt<LPWSTRVar>(104).value = value }
    
    var nMaxCard: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var dwActiveProtocol: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
    var hCardHandle: SCARDHANDLE
        get() = memberAt<SCARDHANDLEVar>(120).value
        set(value) { memberAt<SCARDHANDLEVar>(120).value = value }
    
}

class OPENCARDNAMEA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(176, 8)
    
    var dwStructSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hwndOwner: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var hSCardContext: SCARDCONTEXT
        get() = memberAt<SCARDCONTEXTVar>(16).value
        set(value) { memberAt<SCARDCONTEXTVar>(16).value = value }
    
    var lpstrGroupNames: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var nMaxGroupNames: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var lpstrCardNames: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var nMaxCardNames: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var rgguidInterfaces: LPCGUID?
        get() = memberAt<LPCGUIDVar>(56).value
        set(value) { memberAt<LPCGUIDVar>(56).value = value }
    
    var cguidInterfaces: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var lpstrRdr: LPSTR?
        get() = memberAt<LPSTRVar>(72).value
        set(value) { memberAt<LPSTRVar>(72).value = value }
    
    var nMaxRdr: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var lpstrCard: LPSTR?
        get() = memberAt<LPSTRVar>(88).value
        set(value) { memberAt<LPSTRVar>(88).value = value }
    
    var nMaxCard: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var lpstrTitle: LPCSTR?
        get() = memberAt<LPCSTRVar>(104).value
        set(value) { memberAt<LPCSTRVar>(104).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var pvUserData: LPVOID?
        get() = memberAt<LPVOIDVar>(120).value
        set(value) { memberAt<LPVOIDVar>(120).value = value }
    
    var dwShareMode: DWORD
        get() = memberAt<DWORDVar>(128).value
        set(value) { memberAt<DWORDVar>(128).value = value }
    
    var dwPreferredProtocols: DWORD
        get() = memberAt<DWORDVar>(132).value
        set(value) { memberAt<DWORDVar>(132).value = value }
    
    var dwActiveProtocol: DWORD
        get() = memberAt<DWORDVar>(136).value
        set(value) { memberAt<DWORDVar>(136).value = value }
    
    var lpfnConnect: LPOCNCONNPROCA?
        get() = memberAt<LPOCNCONNPROCAVar>(144).value
        set(value) { memberAt<LPOCNCONNPROCAVar>(144).value = value }
    
    var lpfnCheck: LPOCNCHKPROC?
        get() = memberAt<LPOCNCHKPROCVar>(152).value
        set(value) { memberAt<LPOCNCHKPROCVar>(152).value = value }
    
    var lpfnDisconnect: LPOCNDSCPROC?
        get() = memberAt<LPOCNDSCPROCVar>(160).value
        set(value) { memberAt<LPOCNDSCPROCVar>(160).value = value }
    
    var hCardHandle: SCARDHANDLE
        get() = memberAt<SCARDHANDLEVar>(168).value
        set(value) { memberAt<SCARDHANDLEVar>(168).value = value }
    
}

class OPENCARDNAMEW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(176, 8)
    
    var dwStructSize: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var hwndOwner: HWND?
        get() = memberAt<HWNDVar>(8).value
        set(value) { memberAt<HWNDVar>(8).value = value }
    
    var hSCardContext: SCARDCONTEXT
        get() = memberAt<SCARDCONTEXTVar>(16).value
        set(value) { memberAt<SCARDCONTEXTVar>(16).value = value }
    
    var lpstrGroupNames: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var nMaxGroupNames: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var lpstrCardNames: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var nMaxCardNames: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var rgguidInterfaces: LPCGUID?
        get() = memberAt<LPCGUIDVar>(56).value
        set(value) { memberAt<LPCGUIDVar>(56).value = value }
    
    var cguidInterfaces: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var lpstrRdr: LPWSTR?
        get() = memberAt<LPWSTRVar>(72).value
        set(value) { memberAt<LPWSTRVar>(72).value = value }
    
    var nMaxRdr: DWORD
        get() = memberAt<DWORDVar>(80).value
        set(value) { memberAt<DWORDVar>(80).value = value }
    
    var lpstrCard: LPWSTR?
        get() = memberAt<LPWSTRVar>(88).value
        set(value) { memberAt<LPWSTRVar>(88).value = value }
    
    var nMaxCard: DWORD
        get() = memberAt<DWORDVar>(96).value
        set(value) { memberAt<DWORDVar>(96).value = value }
    
    var lpstrTitle: LPCWSTR?
        get() = memberAt<LPCWSTRVar>(104).value
        set(value) { memberAt<LPCWSTRVar>(104).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var pvUserData: LPVOID?
        get() = memberAt<LPVOIDVar>(120).value
        set(value) { memberAt<LPVOIDVar>(120).value = value }
    
    var dwShareMode: DWORD
        get() = memberAt<DWORDVar>(128).value
        set(value) { memberAt<DWORDVar>(128).value = value }
    
    var dwPreferredProtocols: DWORD
        get() = memberAt<DWORDVar>(132).value
        set(value) { memberAt<DWORDVar>(132).value = value }
    
    var dwActiveProtocol: DWORD
        get() = memberAt<DWORDVar>(136).value
        set(value) { memberAt<DWORDVar>(136).value = value }
    
    var lpfnConnect: LPOCNCONNPROCW?
        get() = memberAt<LPOCNCONNPROCWVar>(144).value
        set(value) { memberAt<LPOCNCONNPROCWVar>(144).value = value }
    
    var lpfnCheck: LPOCNCHKPROC?
        get() = memberAt<LPOCNCHKPROCVar>(152).value
        set(value) { memberAt<LPOCNCHKPROCVar>(152).value = value }
    
    var lpfnDisconnect: LPOCNDSCPROC?
        get() = memberAt<LPOCNDSCPROCVar>(160).value
        set(value) { memberAt<LPOCNDSCPROCVar>(160).value = value }
    
    var hCardHandle: SCARDHANDLE
        get() = memberAt<SCARDHANDLEVar>(168).value
        set(value) { memberAt<SCARDHANDLEVar>(168).value = value }
    
}

class _PRINTER_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pDescription: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var pComment: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
}

class _PRINTER_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pDescription: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var pComment: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
}

class _PRINTER_INFO_2A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(136, 8)
    
    var pServerName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pPrinterName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pShareName: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var pPortName: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var pDriverName: LPSTR?
        get() = memberAt<LPSTRVar>(32).value
        set(value) { memberAt<LPSTRVar>(32).value = value }
    
    var pComment: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var pLocation: LPSTR?
        get() = memberAt<LPSTRVar>(48).value
        set(value) { memberAt<LPSTRVar>(48).value = value }
    
    var pDevMode: LPDEVMODEA?
        get() = memberAt<LPDEVMODEAVar>(56).value
        set(value) { memberAt<LPDEVMODEAVar>(56).value = value }
    
    var pSepFile: LPSTR?
        get() = memberAt<LPSTRVar>(64).value
        set(value) { memberAt<LPSTRVar>(64).value = value }
    
    var pPrintProcessor: LPSTR?
        get() = memberAt<LPSTRVar>(72).value
        set(value) { memberAt<LPSTRVar>(72).value = value }
    
    var pDatatype: LPSTR?
        get() = memberAt<LPSTRVar>(80).value
        set(value) { memberAt<LPSTRVar>(80).value = value }
    
    var pParameters: LPSTR?
        get() = memberAt<LPSTRVar>(88).value
        set(value) { memberAt<LPSTRVar>(88).value = value }
    
    var pSecurityDescriptor: PSECURITY_DESCRIPTOR?
        get() = memberAt<PSECURITY_DESCRIPTORVar>(96).value
        set(value) { memberAt<PSECURITY_DESCRIPTORVar>(96).value = value }
    
    var Attributes: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var Priority: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    var DefaultPriority: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var StartTime: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
    var UntilTime: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
    var Status: DWORD
        get() = memberAt<DWORDVar>(124).value
        set(value) { memberAt<DWORDVar>(124).value = value }
    
    var cJobs: DWORD
        get() = memberAt<DWORDVar>(128).value
        set(value) { memberAt<DWORDVar>(128).value = value }
    
    var AveragePPM: DWORD
        get() = memberAt<DWORDVar>(132).value
        set(value) { memberAt<DWORDVar>(132).value = value }
    
}

class _PRINTER_INFO_2W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(136, 8)
    
    var pServerName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pPrinterName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pShareName: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var pPortName: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var pDriverName: LPWSTR?
        get() = memberAt<LPWSTRVar>(32).value
        set(value) { memberAt<LPWSTRVar>(32).value = value }
    
    var pComment: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var pLocation: LPWSTR?
        get() = memberAt<LPWSTRVar>(48).value
        set(value) { memberAt<LPWSTRVar>(48).value = value }
    
    var pDevMode: LPDEVMODEW?
        get() = memberAt<LPDEVMODEWVar>(56).value
        set(value) { memberAt<LPDEVMODEWVar>(56).value = value }
    
    var pSepFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(64).value
        set(value) { memberAt<LPWSTRVar>(64).value = value }
    
    var pPrintProcessor: LPWSTR?
        get() = memberAt<LPWSTRVar>(72).value
        set(value) { memberAt<LPWSTRVar>(72).value = value }
    
    var pDatatype: LPWSTR?
        get() = memberAt<LPWSTRVar>(80).value
        set(value) { memberAt<LPWSTRVar>(80).value = value }
    
    var pParameters: LPWSTR?
        get() = memberAt<LPWSTRVar>(88).value
        set(value) { memberAt<LPWSTRVar>(88).value = value }
    
    var pSecurityDescriptor: PSECURITY_DESCRIPTOR?
        get() = memberAt<PSECURITY_DESCRIPTORVar>(96).value
        set(value) { memberAt<PSECURITY_DESCRIPTORVar>(96).value = value }
    
    var Attributes: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var Priority: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    var DefaultPriority: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var StartTime: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
    var UntilTime: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
    var Status: DWORD
        get() = memberAt<DWORDVar>(124).value
        set(value) { memberAt<DWORDVar>(124).value = value }
    
    var cJobs: DWORD
        get() = memberAt<DWORDVar>(128).value
        set(value) { memberAt<DWORDVar>(128).value = value }
    
    var AveragePPM: DWORD
        get() = memberAt<DWORDVar>(132).value
        set(value) { memberAt<DWORDVar>(132).value = value }
    
}

class _PRINTER_INFO_3(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pSecurityDescriptor: PSECURITY_DESCRIPTOR?
        get() = memberAt<PSECURITY_DESCRIPTORVar>(0).value
        set(value) { memberAt<PSECURITY_DESCRIPTORVar>(0).value = value }
    
}

class _PRINTER_INFO_4A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pPrinterName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pServerName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var Attributes: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _PRINTER_INFO_4W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pPrinterName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pServerName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var Attributes: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _PRINTER_INFO_5A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pPrinterName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pPortName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var Attributes: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var DeviceNotSelectedTimeout: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var TransmissionRetryTimeout: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _PRINTER_INFO_5W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pPrinterName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pPortName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var Attributes: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var DeviceNotSelectedTimeout: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var TransmissionRetryTimeout: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _PRINTER_INFO_6(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var dwStatus: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
}

class _PRINTER_INFO_7A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pszObjectGUID: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var dwAction: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _PRINTER_INFO_7W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var pszObjectGUID: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var dwAction: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _PRINTER_INFO_8A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pDevMode: LPDEVMODEA?
        get() = memberAt<LPDEVMODEAVar>(0).value
        set(value) { memberAt<LPDEVMODEAVar>(0).value = value }
    
}

class _PRINTER_INFO_8W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pDevMode: LPDEVMODEW?
        get() = memberAt<LPDEVMODEWVar>(0).value
        set(value) { memberAt<LPDEVMODEWVar>(0).value = value }
    
}

class _PRINTER_INFO_9A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pDevMode: LPDEVMODEA?
        get() = memberAt<LPDEVMODEAVar>(0).value
        set(value) { memberAt<LPDEVMODEAVar>(0).value = value }
    
}

class _PRINTER_INFO_9W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pDevMode: LPDEVMODEW?
        get() = memberAt<LPDEVMODEWVar>(0).value
        set(value) { memberAt<LPDEVMODEWVar>(0).value = value }
    
}

class _JOB_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 8)
    
    var JobId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pPrinterName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pMachineName: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var pUserName: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var pDocument: LPSTR?
        get() = memberAt<LPSTRVar>(32).value
        set(value) { memberAt<LPSTRVar>(32).value = value }
    
    var pDatatype: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var pStatus: LPSTR?
        get() = memberAt<LPSTRVar>(48).value
        set(value) { memberAt<LPSTRVar>(48).value = value }
    
    var Status: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var Priority: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var Position: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var TotalPages: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    var PagesPrinted: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
    val Submitted: SYSTEMTIME
        get() = memberAt(76)
    
}

class _JOB_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(96, 8)
    
    var JobId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pPrinterName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pMachineName: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var pUserName: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var pDocument: LPWSTR?
        get() = memberAt<LPWSTRVar>(32).value
        set(value) { memberAt<LPWSTRVar>(32).value = value }
    
    var pDatatype: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var pStatus: LPWSTR?
        get() = memberAt<LPWSTRVar>(48).value
        set(value) { memberAt<LPWSTRVar>(48).value = value }
    
    var Status: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
    var Priority: DWORD
        get() = memberAt<DWORDVar>(60).value
        set(value) { memberAt<DWORDVar>(60).value = value }
    
    var Position: DWORD
        get() = memberAt<DWORDVar>(64).value
        set(value) { memberAt<DWORDVar>(64).value = value }
    
    var TotalPages: DWORD
        get() = memberAt<DWORDVar>(68).value
        set(value) { memberAt<DWORDVar>(68).value = value }
    
    var PagesPrinted: DWORD
        get() = memberAt<DWORDVar>(72).value
        set(value) { memberAt<DWORDVar>(72).value = value }
    
    val Submitted: SYSTEMTIME
        get() = memberAt(76)
    
}

class _JOB_INFO_2A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(160, 8)
    
    var JobId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pPrinterName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pMachineName: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var pUserName: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var pDocument: LPSTR?
        get() = memberAt<LPSTRVar>(32).value
        set(value) { memberAt<LPSTRVar>(32).value = value }
    
    var pNotifyName: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var pDatatype: LPSTR?
        get() = memberAt<LPSTRVar>(48).value
        set(value) { memberAt<LPSTRVar>(48).value = value }
    
    var pPrintProcessor: LPSTR?
        get() = memberAt<LPSTRVar>(56).value
        set(value) { memberAt<LPSTRVar>(56).value = value }
    
    var pParameters: LPSTR?
        get() = memberAt<LPSTRVar>(64).value
        set(value) { memberAt<LPSTRVar>(64).value = value }
    
    var pDriverName: LPSTR?
        get() = memberAt<LPSTRVar>(72).value
        set(value) { memberAt<LPSTRVar>(72).value = value }
    
    var pDevMode: LPDEVMODEA?
        get() = memberAt<LPDEVMODEAVar>(80).value
        set(value) { memberAt<LPDEVMODEAVar>(80).value = value }
    
    var pStatus: LPSTR?
        get() = memberAt<LPSTRVar>(88).value
        set(value) { memberAt<LPSTRVar>(88).value = value }
    
    var pSecurityDescriptor: PSECURITY_DESCRIPTOR?
        get() = memberAt<PSECURITY_DESCRIPTORVar>(96).value
        set(value) { memberAt<PSECURITY_DESCRIPTORVar>(96).value = value }
    
    var Status: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var Priority: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    var Position: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var StartTime: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
    var UntilTime: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
    var TotalPages: DWORD
        get() = memberAt<DWORDVar>(124).value
        set(value) { memberAt<DWORDVar>(124).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(128).value
        set(value) { memberAt<DWORDVar>(128).value = value }
    
    val Submitted: SYSTEMTIME
        get() = memberAt(132)
    
    var Time: DWORD
        get() = memberAt<DWORDVar>(148).value
        set(value) { memberAt<DWORDVar>(148).value = value }
    
    var PagesPrinted: DWORD
        get() = memberAt<DWORDVar>(152).value
        set(value) { memberAt<DWORDVar>(152).value = value }
    
}

class _JOB_INFO_2W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(160, 8)
    
    var JobId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pPrinterName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pMachineName: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var pUserName: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var pDocument: LPWSTR?
        get() = memberAt<LPWSTRVar>(32).value
        set(value) { memberAt<LPWSTRVar>(32).value = value }
    
    var pNotifyName: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var pDatatype: LPWSTR?
        get() = memberAt<LPWSTRVar>(48).value
        set(value) { memberAt<LPWSTRVar>(48).value = value }
    
    var pPrintProcessor: LPWSTR?
        get() = memberAt<LPWSTRVar>(56).value
        set(value) { memberAt<LPWSTRVar>(56).value = value }
    
    var pParameters: LPWSTR?
        get() = memberAt<LPWSTRVar>(64).value
        set(value) { memberAt<LPWSTRVar>(64).value = value }
    
    var pDriverName: LPWSTR?
        get() = memberAt<LPWSTRVar>(72).value
        set(value) { memberAt<LPWSTRVar>(72).value = value }
    
    var pDevMode: LPDEVMODEW?
        get() = memberAt<LPDEVMODEWVar>(80).value
        set(value) { memberAt<LPDEVMODEWVar>(80).value = value }
    
    var pStatus: LPWSTR?
        get() = memberAt<LPWSTRVar>(88).value
        set(value) { memberAt<LPWSTRVar>(88).value = value }
    
    var pSecurityDescriptor: PSECURITY_DESCRIPTOR?
        get() = memberAt<PSECURITY_DESCRIPTORVar>(96).value
        set(value) { memberAt<PSECURITY_DESCRIPTORVar>(96).value = value }
    
    var Status: DWORD
        get() = memberAt<DWORDVar>(104).value
        set(value) { memberAt<DWORDVar>(104).value = value }
    
    var Priority: DWORD
        get() = memberAt<DWORDVar>(108).value
        set(value) { memberAt<DWORDVar>(108).value = value }
    
    var Position: DWORD
        get() = memberAt<DWORDVar>(112).value
        set(value) { memberAt<DWORDVar>(112).value = value }
    
    var StartTime: DWORD
        get() = memberAt<DWORDVar>(116).value
        set(value) { memberAt<DWORDVar>(116).value = value }
    
    var UntilTime: DWORD
        get() = memberAt<DWORDVar>(120).value
        set(value) { memberAt<DWORDVar>(120).value = value }
    
    var TotalPages: DWORD
        get() = memberAt<DWORDVar>(124).value
        set(value) { memberAt<DWORDVar>(124).value = value }
    
    var Size: DWORD
        get() = memberAt<DWORDVar>(128).value
        set(value) { memberAt<DWORDVar>(128).value = value }
    
    val Submitted: SYSTEMTIME
        get() = memberAt(132)
    
    var Time: DWORD
        get() = memberAt<DWORDVar>(148).value
        set(value) { memberAt<DWORDVar>(148).value = value }
    
    var PagesPrinted: DWORD
        get() = memberAt<DWORDVar>(152).value
        set(value) { memberAt<DWORDVar>(152).value = value }
    
}

class _JOB_INFO_3(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(12, 4)
    
    var JobId: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var NextJobId: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Reserved: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _ADDJOB_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Path: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var JobId: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _ADDJOB_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var Path: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var JobId: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
}

class _DRIVER_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _DRIVER_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
}

class _DRIVER_INFO_2A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pEnvironment: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var pDriverPath: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var pDataFile: LPSTR?
        get() = memberAt<LPSTRVar>(32).value
        set(value) { memberAt<LPSTRVar>(32).value = value }
    
    var pConfigFile: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
}

class _DRIVER_INFO_2W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var cVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pEnvironment: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var pDriverPath: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var pDataFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(32).value
        set(value) { memberAt<LPWSTRVar>(32).value = value }
    
    var pConfigFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
}

class _DRIVER_INFO_3A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var cVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pEnvironment: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var pDriverPath: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var pDataFile: LPSTR?
        get() = memberAt<LPSTRVar>(32).value
        set(value) { memberAt<LPSTRVar>(32).value = value }
    
    var pConfigFile: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var pHelpFile: LPSTR?
        get() = memberAt<LPSTRVar>(48).value
        set(value) { memberAt<LPSTRVar>(48).value = value }
    
    var pDependentFiles: LPSTR?
        get() = memberAt<LPSTRVar>(56).value
        set(value) { memberAt<LPSTRVar>(56).value = value }
    
    var pMonitorName: LPSTR?
        get() = memberAt<LPSTRVar>(64).value
        set(value) { memberAt<LPSTRVar>(64).value = value }
    
    var pDefaultDataType: LPSTR?
        get() = memberAt<LPSTRVar>(72).value
        set(value) { memberAt<LPSTRVar>(72).value = value }
    
}

class _DRIVER_INFO_3W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(80, 8)
    
    var cVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pEnvironment: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var pDriverPath: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var pDataFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(32).value
        set(value) { memberAt<LPWSTRVar>(32).value = value }
    
    var pConfigFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var pHelpFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(48).value
        set(value) { memberAt<LPWSTRVar>(48).value = value }
    
    var pDependentFiles: LPWSTR?
        get() = memberAt<LPWSTRVar>(56).value
        set(value) { memberAt<LPWSTRVar>(56).value = value }
    
    var pMonitorName: LPWSTR?
        get() = memberAt<LPWSTRVar>(64).value
        set(value) { memberAt<LPWSTRVar>(64).value = value }
    
    var pDefaultDataType: LPWSTR?
        get() = memberAt<LPWSTRVar>(72).value
        set(value) { memberAt<LPWSTRVar>(72).value = value }
    
}

class _DRIVER_INFO_4A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 8)
    
    var cVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pEnvironment: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var pDriverPath: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var pDataFile: LPSTR?
        get() = memberAt<LPSTRVar>(32).value
        set(value) { memberAt<LPSTRVar>(32).value = value }
    
    var pConfigFile: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var pHelpFile: LPSTR?
        get() = memberAt<LPSTRVar>(48).value
        set(value) { memberAt<LPSTRVar>(48).value = value }
    
    var pDependentFiles: LPSTR?
        get() = memberAt<LPSTRVar>(56).value
        set(value) { memberAt<LPSTRVar>(56).value = value }
    
    var pMonitorName: LPSTR?
        get() = memberAt<LPSTRVar>(64).value
        set(value) { memberAt<LPSTRVar>(64).value = value }
    
    var pDefaultDataType: LPSTR?
        get() = memberAt<LPSTRVar>(72).value
        set(value) { memberAt<LPSTRVar>(72).value = value }
    
    var pszzPreviousNames: LPSTR?
        get() = memberAt<LPSTRVar>(80).value
        set(value) { memberAt<LPSTRVar>(80).value = value }
    
}

class _DRIVER_INFO_4W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(88, 8)
    
    var cVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pEnvironment: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var pDriverPath: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var pDataFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(32).value
        set(value) { memberAt<LPWSTRVar>(32).value = value }
    
    var pConfigFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var pHelpFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(48).value
        set(value) { memberAt<LPWSTRVar>(48).value = value }
    
    var pDependentFiles: LPWSTR?
        get() = memberAt<LPWSTRVar>(56).value
        set(value) { memberAt<LPWSTRVar>(56).value = value }
    
    var pMonitorName: LPWSTR?
        get() = memberAt<LPWSTRVar>(64).value
        set(value) { memberAt<LPWSTRVar>(64).value = value }
    
    var pDefaultDataType: LPWSTR?
        get() = memberAt<LPWSTRVar>(72).value
        set(value) { memberAt<LPWSTRVar>(72).value = value }
    
    var pszzPreviousNames: LPWSTR?
        get() = memberAt<LPWSTRVar>(80).value
        set(value) { memberAt<LPWSTRVar>(80).value = value }
    
}

class _DRIVER_INFO_5A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var cVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pEnvironment: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var pDriverPath: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var pDataFile: LPSTR?
        get() = memberAt<LPSTRVar>(32).value
        set(value) { memberAt<LPSTRVar>(32).value = value }
    
    var pConfigFile: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var dwDriverAttributes: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var dwConfigVersion: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var dwDriverVersion: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
}

class _DRIVER_INFO_5W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var cVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pEnvironment: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var pDriverPath: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var pDataFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(32).value
        set(value) { memberAt<LPWSTRVar>(32).value = value }
    
    var pConfigFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var dwDriverAttributes: DWORD
        get() = memberAt<DWORDVar>(48).value
        set(value) { memberAt<DWORDVar>(48).value = value }
    
    var dwConfigVersion: DWORD
        get() = memberAt<DWORDVar>(52).value
        set(value) { memberAt<DWORDVar>(52).value = value }
    
    var dwDriverVersion: DWORD
        get() = memberAt<DWORDVar>(56).value
        set(value) { memberAt<DWORDVar>(56).value = value }
    
}

class _DRIVER_INFO_6A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(136, 8)
    
    var cVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pEnvironment: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var pDriverPath: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var pDataFile: LPSTR?
        get() = memberAt<LPSTRVar>(32).value
        set(value) { memberAt<LPSTRVar>(32).value = value }
    
    var pConfigFile: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var pHelpFile: LPSTR?
        get() = memberAt<LPSTRVar>(48).value
        set(value) { memberAt<LPSTRVar>(48).value = value }
    
    var pDependentFiles: LPSTR?
        get() = memberAt<LPSTRVar>(56).value
        set(value) { memberAt<LPSTRVar>(56).value = value }
    
    var pMonitorName: LPSTR?
        get() = memberAt<LPSTRVar>(64).value
        set(value) { memberAt<LPSTRVar>(64).value = value }
    
    var pDefaultDataType: LPSTR?
        get() = memberAt<LPSTRVar>(72).value
        set(value) { memberAt<LPSTRVar>(72).value = value }
    
    var pszzPreviousNames: LPSTR?
        get() = memberAt<LPSTRVar>(80).value
        set(value) { memberAt<LPSTRVar>(80).value = value }
    
    val ftDriverDate: FILETIME
        get() = memberAt(88)
    
    var dwlDriverVersion: DWORDLONG
        get() = memberAt<DWORDLONGVar>(96).value
        set(value) { memberAt<DWORDLONGVar>(96).value = value }
    
    var pszMfgName: LPSTR?
        get() = memberAt<LPSTRVar>(104).value
        set(value) { memberAt<LPSTRVar>(104).value = value }
    
    var pszOEMUrl: LPSTR?
        get() = memberAt<LPSTRVar>(112).value
        set(value) { memberAt<LPSTRVar>(112).value = value }
    
    var pszHardwareID: LPSTR?
        get() = memberAt<LPSTRVar>(120).value
        set(value) { memberAt<LPSTRVar>(120).value = value }
    
    var pszProvider: LPSTR?
        get() = memberAt<LPSTRVar>(128).value
        set(value) { memberAt<LPSTRVar>(128).value = value }
    
}

class _DRIVER_INFO_6W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(136, 8)
    
    var cVersion: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pEnvironment: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var pDriverPath: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var pDataFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(32).value
        set(value) { memberAt<LPWSTRVar>(32).value = value }
    
    var pConfigFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var pHelpFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(48).value
        set(value) { memberAt<LPWSTRVar>(48).value = value }
    
    var pDependentFiles: LPWSTR?
        get() = memberAt<LPWSTRVar>(56).value
        set(value) { memberAt<LPWSTRVar>(56).value = value }
    
    var pMonitorName: LPWSTR?
        get() = memberAt<LPWSTRVar>(64).value
        set(value) { memberAt<LPWSTRVar>(64).value = value }
    
    var pDefaultDataType: LPWSTR?
        get() = memberAt<LPWSTRVar>(72).value
        set(value) { memberAt<LPWSTRVar>(72).value = value }
    
    var pszzPreviousNames: LPWSTR?
        get() = memberAt<LPWSTRVar>(80).value
        set(value) { memberAt<LPWSTRVar>(80).value = value }
    
    val ftDriverDate: FILETIME
        get() = memberAt(88)
    
    var dwlDriverVersion: DWORDLONG
        get() = memberAt<DWORDLONGVar>(96).value
        set(value) { memberAt<DWORDLONGVar>(96).value = value }
    
    var pszMfgName: LPWSTR?
        get() = memberAt<LPWSTRVar>(104).value
        set(value) { memberAt<LPWSTRVar>(104).value = value }
    
    var pszOEMUrl: LPWSTR?
        get() = memberAt<LPWSTRVar>(112).value
        set(value) { memberAt<LPWSTRVar>(112).value = value }
    
    var pszHardwareID: LPWSTR?
        get() = memberAt<LPWSTRVar>(120).value
        set(value) { memberAt<LPWSTRVar>(120).value = value }
    
    var pszProvider: LPWSTR?
        get() = memberAt<LPWSTRVar>(128).value
        set(value) { memberAt<LPWSTRVar>(128).value = value }
    
}

class _DOC_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pDocName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pOutputFile: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pDatatype: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
}

class _DOC_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pDocName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pOutputFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pDatatype: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
}

class _FORM_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    val Size: SIZEL
        get() = memberAt(16)
    
    val ImageableArea: RECTL
        get() = memberAt(24)
    
}

class _FORM_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    val Size: SIZEL
        get() = memberAt(16)
    
    val ImageableArea: RECTL
        get() = memberAt(24)
    
}

class _DOC_INFO_2A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pDocName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pOutputFile: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pDatatype: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var dwMode: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var JobId: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class _DOC_INFO_2W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pDocName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pOutputFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pDatatype: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var dwMode: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var JobId: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class _DOC_INFO_3A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pDocName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pOutputFile: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pDatatype: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _DOC_INFO_3W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pDocName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pOutputFile: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pDatatype: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var dwFlags: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _PRINTPROCESSOR_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _PRINTPROCESSOR_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
}

class _PRINTPROCESSOR_CAPS_1(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 4)
    
    var dwLevel: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwNupOptions: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwPageOrderFlags: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwNumberOfCopies: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
}

class _PORT_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _PORT_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
}

class _PORT_INFO_2A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pPortName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pMonitorName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pDescription: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var fPortType: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var Reserved: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class _PORT_INFO_2W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pPortName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pMonitorName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pDescription: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var fPortType: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var Reserved: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
}

class _PORT_INFO_3A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwStatus: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszStatus: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var dwSeverity: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _PORT_INFO_3W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwStatus: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pszStatus: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var dwSeverity: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _MONITOR_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _MONITOR_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
}

class _MONITOR_INFO_2A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pEnvironment: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pDLLName: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
}

class _MONITOR_INFO_2W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pEnvironment: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pDLLName: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
}

class _DATATYPES_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _DATATYPES_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
}

class _PRINTER_DEFAULTSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pDatatype: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pDevMode: LPDEVMODEA?
        get() = memberAt<LPDEVMODEAVar>(8).value
        set(value) { memberAt<LPDEVMODEAVar>(8).value = value }
    
    var DesiredAccess: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(16).value
        set(value) { memberAt<ACCESS_MASKVar>(16).value = value }
    
}

class _PRINTER_DEFAULTSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pDatatype: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pDevMode: LPDEVMODEW?
        get() = memberAt<LPDEVMODEWVar>(8).value
        set(value) { memberAt<LPDEVMODEWVar>(8).value = value }
    
    var DesiredAccess: ACCESS_MASK
        get() = memberAt<ACCESS_MASKVar>(16).value
        set(value) { memberAt<ACCESS_MASKVar>(16).value = value }
    
}

class _PRINTER_ENUM_VALUESA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pValueName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var cbValueName: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var pData: LPBYTE?
        get() = memberAt<LPBYTEVar>(16).value
        set(value) { memberAt<LPBYTEVar>(16).value = value }
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _PRINTER_ENUM_VALUESW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var pValueName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var cbValueName: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwType: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var pData: LPBYTE?
        get() = memberAt<LPBYTEVar>(16).value
        set(value) { memberAt<LPBYTEVar>(16).value = value }
    
    var cbData: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _PRINTER_NOTIFY_OPTIONS_TYPE(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var Type: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Reserved0: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var Reserved1: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Reserved2: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var pFields: PWORD?
        get() = memberAt<PWORDVar>(16).value
        set(value) { memberAt<PWORDVar>(16).value = value }
    
}

class _PRINTER_NOTIFY_OPTIONS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var pTypes: PPRINTER_NOTIFY_OPTIONS_TYPE?
        get() = memberAt<PPRINTER_NOTIFY_OPTIONS_TYPEVar>(16).value
        set(value) { memberAt<PPRINTER_NOTIFY_OPTIONS_TYPEVar>(16).value = value }
    
}

class _PRINTER_NOTIFY_INFO_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(32, 8)
    
    var Type: WORD
        get() = memberAt<WORDVar>(0).value
        set(value) { memberAt<WORDVar>(0).value = value }
    
    var Field: WORD
        get() = memberAt<WORDVar>(2).value
        set(value) { memberAt<WORDVar>(2).value = value }
    
    var Reserved: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Id: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val NotifyData: anonymousStruct154
        get() = memberAt(16)
    
}

class anonymousStruct154(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    val adwData: CArrayPointer<DWORDVar>
        get() = arrayMemberAt(0)
    
    val Data: anonymousStruct155
        get() = memberAt(0)
    
}

class anonymousStruct155(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbBuf: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pBuf: LPVOID?
        get() = memberAt<LPVOIDVar>(8).value
        set(value) { memberAt<LPVOIDVar>(8).value = value }
    
}

class _PRINTER_NOTIFY_INFO(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val aData: CArrayPointer<PRINTER_NOTIFY_INFO_DATA>
        get() = arrayMemberAt(16)
    
}

class _BINARY_CONTAINER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var cbBuf: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pData: LPBYTE?
        get() = memberAt<LPBYTEVar>(8).value
        set(value) { memberAt<LPBYTEVar>(8).value = value }
    
}

class _BIDI_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var dwBidiType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    val u: anonymousStruct156
        get() = memberAt(8)
    
}

class anonymousStruct156(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var bData: WINBOOL
        get() = memberAt<WINBOOLVar>(0).value
        set(value) { memberAt<WINBOOLVar>(0).value = value }
    
    var iData: LONG
        get() = memberAt<LONGVar>(0).value
        set(value) { memberAt<LONGVar>(0).value = value }
    
    var sData: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var fData: FLOAT
        get() = memberAt<FLOATVar>(0).value
        set(value) { memberAt<FLOATVar>(0).value = value }
    
    val biData: BINARY_CONTAINER
        get() = memberAt(0)
    
}

class _BIDI_REQUEST_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwReqNumber: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var pSchema: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    val data: BIDI_DATA
        get() = memberAt(16)
    
}

class _BIDI_REQUEST_CONTAINER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val aData: CArrayPointer<BIDI_REQUEST_DATA>
        get() = arrayMemberAt(16)
    
}

class _BIDI_RESPONSE_DATA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwResult: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwReqNumber: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var pSchema: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    val data: BIDI_DATA
        get() = memberAt(16)
    
}

class _BIDI_RESPONSE_CONTAINER(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var Version: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var Flags: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var Count: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    val aData: CArrayPointer<BIDI_RESPONSE_DATA>
        get() = arrayMemberAt(16)
    
}

class _PROVIDOR_INFO_1A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var pEnvironment: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var pDLLName: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
}

class _PROVIDOR_INFO_1W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var pName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var pEnvironment: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var pDLLName: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
}

class _PROVIDOR_INFO_2A(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pOrder: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _PROVIDOR_INFO_2W(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var pOrder: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
}

class _SERVICE_DESCRIPTIONA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var lpDescription: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
}

class _SERVICE_DESCRIPTIONW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 8)
    
    var lpDescription: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
}

class _SC_ACTION(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(8, 4)
    
    var Type: SC_ACTION_TYPE
        get() = memberAt<SC_ACTION_TYPEVar>(0).value
        set(value) { memberAt<SC_ACTION_TYPEVar>(0).value = value }
    
    var Delay: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
}

class _SERVICE_FAILURE_ACTIONSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwResetPeriod: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpRebootMsg: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var lpCommand: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var cActions: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var lpsaActions: CPointer<SC_ACTION>?
        get() = memberAt<CPointerVar<SC_ACTION>>(32).value
        set(value) { memberAt<CPointerVar<SC_ACTION>>(32).value = value }
    
}

class _SERVICE_FAILURE_ACTIONSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(40, 8)
    
    var dwResetPeriod: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpRebootMsg: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var lpCommand: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var cActions: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var lpsaActions: CPointer<SC_ACTION>?
        get() = memberAt<CPointerVar<SC_ACTION>>(32).value
        set(value) { memberAt<CPointerVar<SC_ACTION>>(32).value = value }
    
}

class SC_HANDLE__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class SERVICE_STATUS_HANDLE__(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(4, 4)
    
    var unused: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class _SERVICE_STATUS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(28, 4)
    
    var dwServiceType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwCurrentState: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwControlsAccepted: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwWin32ExitCode: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwServiceSpecificExitCode: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwCheckPoint: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var dwWaitHint: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
}

class _SERVICE_STATUS_PROCESS(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(36, 4)
    
    var dwServiceType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwCurrentState: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwControlsAccepted: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var dwWin32ExitCode: DWORD
        get() = memberAt<DWORDVar>(12).value
        set(value) { memberAt<DWORDVar>(12).value = value }
    
    var dwServiceSpecificExitCode: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
    var dwCheckPoint: DWORD
        get() = memberAt<DWORDVar>(20).value
        set(value) { memberAt<DWORDVar>(20).value = value }
    
    var dwWaitHint: DWORD
        get() = memberAt<DWORDVar>(24).value
        set(value) { memberAt<DWORDVar>(24).value = value }
    
    var dwProcessId: DWORD
        get() = memberAt<DWORDVar>(28).value
        set(value) { memberAt<DWORDVar>(28).value = value }
    
    var dwServiceFlags: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
}

class _ENUM_SERVICE_STATUSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var lpServiceName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var lpDisplayName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    val ServiceStatus: SERVICE_STATUS
        get() = memberAt(16)
    
}

class _ENUM_SERVICE_STATUSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(48, 8)
    
    var lpServiceName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var lpDisplayName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    val ServiceStatus: SERVICE_STATUS
        get() = memberAt(16)
    
}

class _ENUM_SERVICE_STATUS_PROCESSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var lpServiceName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var lpDisplayName: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    val ServiceStatusProcess: SERVICE_STATUS_PROCESS
        get() = memberAt(16)
    
}

class _ENUM_SERVICE_STATUS_PROCESSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(56, 8)
    
    var lpServiceName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var lpDisplayName: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    val ServiceStatusProcess: SERVICE_STATUS_PROCESS
        get() = memberAt(16)
    
}

class _QUERY_SERVICE_LOCK_STATUSA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var fIsLocked: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpLockOwner: LPSTR?
        get() = memberAt<LPSTRVar>(8).value
        set(value) { memberAt<LPSTRVar>(8).value = value }
    
    var dwLockDuration: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _QUERY_SERVICE_LOCK_STATUSW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(24, 8)
    
    var fIsLocked: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var lpLockOwner: LPWSTR?
        get() = memberAt<LPWSTRVar>(8).value
        set(value) { memberAt<LPWSTRVar>(8).value = value }
    
    var dwLockDuration: DWORD
        get() = memberAt<DWORDVar>(16).value
        set(value) { memberAt<DWORDVar>(16).value = value }
    
}

class _QUERY_SERVICE_CONFIGA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var dwServiceType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwStartType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwErrorControl: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var lpBinaryPathName: LPSTR?
        get() = memberAt<LPSTRVar>(16).value
        set(value) { memberAt<LPSTRVar>(16).value = value }
    
    var lpLoadOrderGroup: LPSTR?
        get() = memberAt<LPSTRVar>(24).value
        set(value) { memberAt<LPSTRVar>(24).value = value }
    
    var dwTagId: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var lpDependencies: LPSTR?
        get() = memberAt<LPSTRVar>(40).value
        set(value) { memberAt<LPSTRVar>(40).value = value }
    
    var lpServiceStartName: LPSTR?
        get() = memberAt<LPSTRVar>(48).value
        set(value) { memberAt<LPSTRVar>(48).value = value }
    
    var lpDisplayName: LPSTR?
        get() = memberAt<LPSTRVar>(56).value
        set(value) { memberAt<LPSTRVar>(56).value = value }
    
}

class _QUERY_SERVICE_CONFIGW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(64, 8)
    
    var dwServiceType: DWORD
        get() = memberAt<DWORDVar>(0).value
        set(value) { memberAt<DWORDVar>(0).value = value }
    
    var dwStartType: DWORD
        get() = memberAt<DWORDVar>(4).value
        set(value) { memberAt<DWORDVar>(4).value = value }
    
    var dwErrorControl: DWORD
        get() = memberAt<DWORDVar>(8).value
        set(value) { memberAt<DWORDVar>(8).value = value }
    
    var lpBinaryPathName: LPWSTR?
        get() = memberAt<LPWSTRVar>(16).value
        set(value) { memberAt<LPWSTRVar>(16).value = value }
    
    var lpLoadOrderGroup: LPWSTR?
        get() = memberAt<LPWSTRVar>(24).value
        set(value) { memberAt<LPWSTRVar>(24).value = value }
    
    var dwTagId: DWORD
        get() = memberAt<DWORDVar>(32).value
        set(value) { memberAt<DWORDVar>(32).value = value }
    
    var lpDependencies: LPWSTR?
        get() = memberAt<LPWSTRVar>(40).value
        set(value) { memberAt<LPWSTRVar>(40).value = value }
    
    var lpServiceStartName: LPWSTR?
        get() = memberAt<LPWSTRVar>(48).value
        set(value) { memberAt<LPWSTRVar>(48).value = value }
    
    var lpDisplayName: LPWSTR?
        get() = memberAt<LPWSTRVar>(56).value
        set(value) { memberAt<LPWSTRVar>(56).value = value }
    
}

class _SERVICE_TABLE_ENTRYA(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var lpServiceName: LPSTR?
        get() = memberAt<LPSTRVar>(0).value
        set(value) { memberAt<LPSTRVar>(0).value = value }
    
    var lpServiceProc: LPSERVICE_MAIN_FUNCTIONA?
        get() = memberAt<LPSERVICE_MAIN_FUNCTIONAVar>(8).value
        set(value) { memberAt<LPSERVICE_MAIN_FUNCTIONAVar>(8).value = value }
    
}

class _SERVICE_TABLE_ENTRYW(override val rawPtr: NativePtr) : CStructVar() {
    
    companion object : Type(16, 8)
    
    var lpServiceName: LPWSTR?
        get() = memberAt<LPWSTRVar>(0).value
        set(value) { memberAt<LPWSTRVar>(0).value = value }
    
    var lpServiceProc: LPSERVICE_MAIN_FUNCTIONW?
        get() = memberAt<LPSERVICE_MAIN_FUNCTIONWVar>(8).value
        set(value) { memberAt<LPSERVICE_MAIN_FUNCTIONWVar>(8).value = value }
    
}

typealias COMPARTMENT_IDVar = IntVarOf<COMPARTMENT_ID>
typealias COMPARTMENT_ID = Int

val UNSPECIFIED_COMPARTMENT_ID: COMPARTMENT_ID = 0
val DEFAULT_COMPARTMENT_ID: COMPARTMENT_ID = 1

typealias _SID_NAME_USEVar = IntVarOf<_SID_NAME_USE>
typealias _SID_NAME_USE = Int

val SidTypeUser: _SID_NAME_USE = 1
val SidTypeGroup: _SID_NAME_USE = 2
val SidTypeDomain: _SID_NAME_USE = 3
val SidTypeAlias: _SID_NAME_USE = 4
val SidTypeWellKnownGroup: _SID_NAME_USE = 5
val SidTypeDeletedAccount: _SID_NAME_USE = 6
val SidTypeInvalid: _SID_NAME_USE = 7
val SidTypeUnknown: _SID_NAME_USE = 8
val SidTypeComputer: _SID_NAME_USE = 9
val SidTypeLabel: _SID_NAME_USE = 10

typealias WELL_KNOWN_SID_TYPEVar = IntVarOf<WELL_KNOWN_SID_TYPE>
typealias WELL_KNOWN_SID_TYPE = Int

val WinNullSid: WELL_KNOWN_SID_TYPE = 0
val WinWorldSid: WELL_KNOWN_SID_TYPE = 1
val WinLocalSid: WELL_KNOWN_SID_TYPE = 2
val WinCreatorOwnerSid: WELL_KNOWN_SID_TYPE = 3
val WinCreatorGroupSid: WELL_KNOWN_SID_TYPE = 4
val WinCreatorOwnerServerSid: WELL_KNOWN_SID_TYPE = 5
val WinCreatorGroupServerSid: WELL_KNOWN_SID_TYPE = 6
val WinNtAuthoritySid: WELL_KNOWN_SID_TYPE = 7
val WinDialupSid: WELL_KNOWN_SID_TYPE = 8
val WinNetworkSid: WELL_KNOWN_SID_TYPE = 9
val WinBatchSid: WELL_KNOWN_SID_TYPE = 10
val WinInteractiveSid: WELL_KNOWN_SID_TYPE = 11
val WinServiceSid: WELL_KNOWN_SID_TYPE = 12
val WinAnonymousSid: WELL_KNOWN_SID_TYPE = 13
val WinProxySid: WELL_KNOWN_SID_TYPE = 14
val WinEnterpriseControllersSid: WELL_KNOWN_SID_TYPE = 15
val WinSelfSid: WELL_KNOWN_SID_TYPE = 16
val WinAuthenticatedUserSid: WELL_KNOWN_SID_TYPE = 17
val WinRestrictedCodeSid: WELL_KNOWN_SID_TYPE = 18
val WinTerminalServerSid: WELL_KNOWN_SID_TYPE = 19
val WinRemoteLogonIdSid: WELL_KNOWN_SID_TYPE = 20
val WinLogonIdsSid: WELL_KNOWN_SID_TYPE = 21
val WinLocalSystemSid: WELL_KNOWN_SID_TYPE = 22
val WinLocalServiceSid: WELL_KNOWN_SID_TYPE = 23
val WinNetworkServiceSid: WELL_KNOWN_SID_TYPE = 24
val WinBuiltinDomainSid: WELL_KNOWN_SID_TYPE = 25
val WinBuiltinAdministratorsSid: WELL_KNOWN_SID_TYPE = 26
val WinBuiltinUsersSid: WELL_KNOWN_SID_TYPE = 27
val WinBuiltinGuestsSid: WELL_KNOWN_SID_TYPE = 28
val WinBuiltinPowerUsersSid: WELL_KNOWN_SID_TYPE = 29
val WinBuiltinAccountOperatorsSid: WELL_KNOWN_SID_TYPE = 30
val WinBuiltinSystemOperatorsSid: WELL_KNOWN_SID_TYPE = 31
val WinBuiltinPrintOperatorsSid: WELL_KNOWN_SID_TYPE = 32
val WinBuiltinBackupOperatorsSid: WELL_KNOWN_SID_TYPE = 33
val WinBuiltinReplicatorSid: WELL_KNOWN_SID_TYPE = 34
val WinBuiltinPreWindows2000CompatibleAccessSid: WELL_KNOWN_SID_TYPE = 35
val WinBuiltinRemoteDesktopUsersSid: WELL_KNOWN_SID_TYPE = 36
val WinBuiltinNetworkConfigurationOperatorsSid: WELL_KNOWN_SID_TYPE = 37
val WinAccountAdministratorSid: WELL_KNOWN_SID_TYPE = 38
val WinAccountGuestSid: WELL_KNOWN_SID_TYPE = 39
val WinAccountKrbtgtSid: WELL_KNOWN_SID_TYPE = 40
val WinAccountDomainAdminsSid: WELL_KNOWN_SID_TYPE = 41
val WinAccountDomainUsersSid: WELL_KNOWN_SID_TYPE = 42
val WinAccountDomainGuestsSid: WELL_KNOWN_SID_TYPE = 43
val WinAccountComputersSid: WELL_KNOWN_SID_TYPE = 44
val WinAccountControllersSid: WELL_KNOWN_SID_TYPE = 45
val WinAccountCertAdminsSid: WELL_KNOWN_SID_TYPE = 46
val WinAccountSchemaAdminsSid: WELL_KNOWN_SID_TYPE = 47
val WinAccountEnterpriseAdminsSid: WELL_KNOWN_SID_TYPE = 48
val WinAccountPolicyAdminsSid: WELL_KNOWN_SID_TYPE = 49
val WinAccountRasAndIasServersSid: WELL_KNOWN_SID_TYPE = 50
val WinNTLMAuthenticationSid: WELL_KNOWN_SID_TYPE = 51
val WinDigestAuthenticationSid: WELL_KNOWN_SID_TYPE = 52
val WinSChannelAuthenticationSid: WELL_KNOWN_SID_TYPE = 53
val WinThisOrganizationSid: WELL_KNOWN_SID_TYPE = 54
val WinOtherOrganizationSid: WELL_KNOWN_SID_TYPE = 55
val WinBuiltinIncomingForestTrustBuildersSid: WELL_KNOWN_SID_TYPE = 56
val WinBuiltinPerfMonitoringUsersSid: WELL_KNOWN_SID_TYPE = 57
val WinBuiltinPerfLoggingUsersSid: WELL_KNOWN_SID_TYPE = 58
val WinBuiltinAuthorizationAccessSid: WELL_KNOWN_SID_TYPE = 59
val WinBuiltinTerminalServerLicenseServersSid: WELL_KNOWN_SID_TYPE = 60
val WinBuiltinDCOMUsersSid: WELL_KNOWN_SID_TYPE = 61
val WinBuiltinIUsersSid: WELL_KNOWN_SID_TYPE = 62
val WinIUserSid: WELL_KNOWN_SID_TYPE = 63
val WinBuiltinCryptoOperatorsSid: WELL_KNOWN_SID_TYPE = 64
val WinUntrustedLabelSid: WELL_KNOWN_SID_TYPE = 65
val WinLowLabelSid: WELL_KNOWN_SID_TYPE = 66
val WinMediumLabelSid: WELL_KNOWN_SID_TYPE = 67
val WinHighLabelSid: WELL_KNOWN_SID_TYPE = 68
val WinSystemLabelSid: WELL_KNOWN_SID_TYPE = 69
val WinWriteRestrictedCodeSid: WELL_KNOWN_SID_TYPE = 70
val WinCreatorOwnerRightsSid: WELL_KNOWN_SID_TYPE = 71
val WinCacheablePrincipalsGroupSid: WELL_KNOWN_SID_TYPE = 72
val WinNonCacheablePrincipalsGroupSid: WELL_KNOWN_SID_TYPE = 73
val WinEnterpriseReadonlyControllersSid: WELL_KNOWN_SID_TYPE = 74
val WinAccountReadonlyControllersSid: WELL_KNOWN_SID_TYPE = 75
val WinBuiltinEventLogReadersGroup: WELL_KNOWN_SID_TYPE = 76
val WinNewEnterpriseReadonlyControllersSid: WELL_KNOWN_SID_TYPE = 77
val WinBuiltinCertSvcDComAccessGroup: WELL_KNOWN_SID_TYPE = 78
val WinMediumPlusLabelSid: WELL_KNOWN_SID_TYPE = 79
val WinLocalLogonSid: WELL_KNOWN_SID_TYPE = 80
val WinConsoleLogonSid: WELL_KNOWN_SID_TYPE = 81
val WinThisOrganizationCertificateSid: WELL_KNOWN_SID_TYPE = 82
val WinApplicationPackageAuthoritySid: WELL_KNOWN_SID_TYPE = 83
val WinBuiltinAnyPackageSid: WELL_KNOWN_SID_TYPE = 84
val WinCapabilityInternetClientSid: WELL_KNOWN_SID_TYPE = 85
val WinCapabilityInternetClientServerSid: WELL_KNOWN_SID_TYPE = 86
val WinCapabilityPrivateNetworkClientServerSid: WELL_KNOWN_SID_TYPE = 87
val WinCapabilityPicturesLibrarySid: WELL_KNOWN_SID_TYPE = 88
val WinCapabilityVideosLibrarySid: WELL_KNOWN_SID_TYPE = 89
val WinCapabilityMusicLibrarySid: WELL_KNOWN_SID_TYPE = 90
val WinCapabilityDocumentsLibrarySid: WELL_KNOWN_SID_TYPE = 91
val WinCapabilitySharedUserCertificatesSid: WELL_KNOWN_SID_TYPE = 92
val WinCapabilityEnterpriseAuthenticationSid: WELL_KNOWN_SID_TYPE = 93
val WinCapabilityRemovableStorageSid: WELL_KNOWN_SID_TYPE = 94
val WinBuiltinRDSRemoteAccessServersSid: WELL_KNOWN_SID_TYPE = 95
val WinBuiltinRDSEndpointServersSid: WELL_KNOWN_SID_TYPE = 96
val WinBuiltinRDSManagementServersSid: WELL_KNOWN_SID_TYPE = 97
val WinUserModeDriversSid: WELL_KNOWN_SID_TYPE = 98
val WinBuiltinHyperVAdminsSid: WELL_KNOWN_SID_TYPE = 99
val WinAccountCloneableControllersSid: WELL_KNOWN_SID_TYPE = 100
val WinBuiltinAccessControlAssistanceOperatorsSid: WELL_KNOWN_SID_TYPE = 101
val WinBuiltinRemoteManagementUsersSid: WELL_KNOWN_SID_TYPE = 102
val WinAuthenticationAuthorityAssertedSid: WELL_KNOWN_SID_TYPE = 103
val WinAuthenticationServiceAssertedSid: WELL_KNOWN_SID_TYPE = 104

typealias _ACL_INFORMATION_CLASSVar = IntVarOf<_ACL_INFORMATION_CLASS>
typealias _ACL_INFORMATION_CLASS = Int

val AclRevisionInformation: _ACL_INFORMATION_CLASS = 1
val AclSizeInformation: _ACL_INFORMATION_CLASS = 2

enum class _AUDIT_EVENT_TYPE(override val value: Int) : CEnum {
    AuditEventObjectAccess(0),
    AuditEventDirectoryServiceAccess(1),
    ;
    
    companion object {
        fun byValue(value: Int) = _AUDIT_EVENT_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _AUDIT_EVENT_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _ACCESS_REASON_TYPEVar = IntVarOf<_ACCESS_REASON_TYPE>
typealias _ACCESS_REASON_TYPE = Int

val AccessReasonNone: _ACCESS_REASON_TYPE = 0
val AccessReasonAllowedAce: _ACCESS_REASON_TYPE = 65536
val AccessReasonDeniedAce: _ACCESS_REASON_TYPE = 131072
val AccessReasonAllowedParentAce: _ACCESS_REASON_TYPE = 196608
val AccessReasonDeniedParentAce: _ACCESS_REASON_TYPE = 262144
val AccessReasonNotGrantedByCape: _ACCESS_REASON_TYPE = 327680
val AccessReasonNotGrantedByParentCape: _ACCESS_REASON_TYPE = 393216
val AccessReasonNotGrantedToAppContainer: _ACCESS_REASON_TYPE = 458752
val AccessReasonMissingPrivilege: _ACCESS_REASON_TYPE = 1048576
val AccessReasonFromPrivilege: _ACCESS_REASON_TYPE = 2097152
val AccessReasonIntegrityLevel: _ACCESS_REASON_TYPE = 3145728
val AccessReasonOwnership: _ACCESS_REASON_TYPE = 4194304
val AccessReasonNullDacl: _ACCESS_REASON_TYPE = 5242880
val AccessReasonEmptyDacl: _ACCESS_REASON_TYPE = 6291456
val AccessReasonNoSD: _ACCESS_REASON_TYPE = 7340032
val AccessReasonNoGrant: _ACCESS_REASON_TYPE = 8388608

enum class _SECURITY_IMPERSONATION_LEVEL(override val value: Int) : CEnum {
    SecurityAnonymous(0),
    SecurityIdentification(1),
    SecurityImpersonation(2),
    SecurityDelegation(3),
    ;
    
    companion object {
        fun byValue(value: Int) = _SECURITY_IMPERSONATION_LEVEL.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _SECURITY_IMPERSONATION_LEVEL
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _TOKEN_TYPEVar = IntVarOf<_TOKEN_TYPE>
typealias _TOKEN_TYPE = Int

val TokenPrimary: _TOKEN_TYPE = 1
val TokenImpersonation: _TOKEN_TYPE = 2

typealias _TOKEN_ELEVATION_TYPEVar = IntVarOf<_TOKEN_ELEVATION_TYPE>
typealias _TOKEN_ELEVATION_TYPE = Int

val TokenElevationTypeDefault: _TOKEN_ELEVATION_TYPE = 1
val TokenElevationTypeFull: _TOKEN_ELEVATION_TYPE = 2
val TokenElevationTypeLimited: _TOKEN_ELEVATION_TYPE = 3

typealias _TOKEN_INFORMATION_CLASSVar = IntVarOf<_TOKEN_INFORMATION_CLASS>
typealias _TOKEN_INFORMATION_CLASS = Int

val TokenUser: _TOKEN_INFORMATION_CLASS = 1
val TokenGroups: _TOKEN_INFORMATION_CLASS = 2
val TokenPrivileges: _TOKEN_INFORMATION_CLASS = 3
val TokenOwner: _TOKEN_INFORMATION_CLASS = 4
val TokenPrimaryGroup: _TOKEN_INFORMATION_CLASS = 5
val TokenDefaultDacl: _TOKEN_INFORMATION_CLASS = 6
val TokenSource: _TOKEN_INFORMATION_CLASS = 7
val TokenType: _TOKEN_INFORMATION_CLASS = 8
val TokenImpersonationLevel: _TOKEN_INFORMATION_CLASS = 9
val TokenStatistics: _TOKEN_INFORMATION_CLASS = 10
val TokenRestrictedSids: _TOKEN_INFORMATION_CLASS = 11
val TokenSessionId: _TOKEN_INFORMATION_CLASS = 12
val TokenGroupsAndPrivileges: _TOKEN_INFORMATION_CLASS = 13
val TokenSessionReference: _TOKEN_INFORMATION_CLASS = 14
val TokenSandBoxInert: _TOKEN_INFORMATION_CLASS = 15
val TokenAuditPolicy: _TOKEN_INFORMATION_CLASS = 16
val TokenOrigin: _TOKEN_INFORMATION_CLASS = 17
val TokenElevationType: _TOKEN_INFORMATION_CLASS = 18
val TokenLinkedToken: _TOKEN_INFORMATION_CLASS = 19
val TokenElevation: _TOKEN_INFORMATION_CLASS = 20
val TokenHasRestrictions: _TOKEN_INFORMATION_CLASS = 21
val TokenAccessInformation: _TOKEN_INFORMATION_CLASS = 22
val TokenVirtualizationAllowed: _TOKEN_INFORMATION_CLASS = 23
val TokenVirtualizationEnabled: _TOKEN_INFORMATION_CLASS = 24
val TokenIntegrityLevel: _TOKEN_INFORMATION_CLASS = 25
val TokenUIAccess: _TOKEN_INFORMATION_CLASS = 26
val TokenMandatoryPolicy: _TOKEN_INFORMATION_CLASS = 27
val TokenLogonSid: _TOKEN_INFORMATION_CLASS = 28
val TokenIsAppContainer: _TOKEN_INFORMATION_CLASS = 29
val TokenCapabilities: _TOKEN_INFORMATION_CLASS = 30
val TokenAppContainerSid: _TOKEN_INFORMATION_CLASS = 31
val TokenAppContainerNumber: _TOKEN_INFORMATION_CLASS = 32
val TokenUserClaimAttributes: _TOKEN_INFORMATION_CLASS = 33
val TokenDeviceClaimAttributes: _TOKEN_INFORMATION_CLASS = 34
val TokenRestrictedUserClaimAttributes: _TOKEN_INFORMATION_CLASS = 35
val TokenRestrictedDeviceClaimAttributes: _TOKEN_INFORMATION_CLASS = 36
val TokenDeviceGroups: _TOKEN_INFORMATION_CLASS = 37
val TokenRestrictedDeviceGroups: _TOKEN_INFORMATION_CLASS = 38
val TokenSecurityAttributes: _TOKEN_INFORMATION_CLASS = 39
val TokenIsRestricted: _TOKEN_INFORMATION_CLASS = 40
val MaxTokenInfoClass: _TOKEN_INFORMATION_CLASS = 41

typealias _MANDATORY_LEVELVar = IntVarOf<_MANDATORY_LEVEL>
typealias _MANDATORY_LEVEL = Int

val MandatoryLevelUntrusted: _MANDATORY_LEVEL = 0
val MandatoryLevelLow: _MANDATORY_LEVEL = 1
val MandatoryLevelMedium: _MANDATORY_LEVEL = 2
val MandatoryLevelHigh: _MANDATORY_LEVEL = 3
val MandatoryLevelSystem: _MANDATORY_LEVEL = 4
val MandatoryLevelSecureProcess: _MANDATORY_LEVEL = 5
val MandatoryLevelCount: _MANDATORY_LEVEL = 6

typealias _SE_LEARNING_MODE_DATA_TYPEVar = IntVarOf<_SE_LEARNING_MODE_DATA_TYPE>
typealias _SE_LEARNING_MODE_DATA_TYPE = Int

val SeLearningModeInvalidType: _SE_LEARNING_MODE_DATA_TYPE = 0
val SeLearningModeSettings: _SE_LEARNING_MODE_DATA_TYPE = 1
val SeLearningModeMax: _SE_LEARNING_MODE_DATA_TYPE = 2

enum class _HARDWARE_COUNTER_TYPE(override val value: Int) : CEnum {
    PMCCounter(0),
    MaxHardwareCounterType(1),
    ;
    
    companion object {
        fun byValue(value: Int) = _HARDWARE_COUNTER_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _HARDWARE_COUNTER_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _PROCESS_MITIGATION_POLICY(override val value: Int) : CEnum {
    ProcessDEPPolicy(0),
    ProcessASLRPolicy(1),
    ProcessReserved1MitigationPolicy(2),
    ProcessStrictHandleCheckPolicy(3),
    ProcessSystemCallDisablePolicy(4),
    ProcessMitigationOptionsMask(5),
    ProcessExtensionPointDisablePolicy(6),
    MaxProcessMitigationPolicy(7),
    ;
    
    companion object {
        fun byValue(value: Int) = _PROCESS_MITIGATION_POLICY.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _PROCESS_MITIGATION_POLICY
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _JOBOBJECT_RATE_CONTROL_TOLERANCEVar = IntVarOf<_JOBOBJECT_RATE_CONTROL_TOLERANCE>
typealias _JOBOBJECT_RATE_CONTROL_TOLERANCE = Int

val ToleranceLow: _JOBOBJECT_RATE_CONTROL_TOLERANCE = 1
val ToleranceMedium: _JOBOBJECT_RATE_CONTROL_TOLERANCE = 2
val ToleranceHigh: _JOBOBJECT_RATE_CONTROL_TOLERANCE = 3

typealias _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVALVar = IntVarOf<_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL>
typealias _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = Int

val ToleranceIntervalShort: _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 1
val ToleranceIntervalMedium: _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 2
val ToleranceIntervalLong: _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 3

typealias _JOBOBJECTINFOCLASSVar = IntVarOf<_JOBOBJECTINFOCLASS>
typealias _JOBOBJECTINFOCLASS = Int

val JobObjectBasicAccountingInformation: _JOBOBJECTINFOCLASS = 1
val JobObjectBasicLimitInformation: _JOBOBJECTINFOCLASS = 2
val JobObjectBasicProcessIdList: _JOBOBJECTINFOCLASS = 3
val JobObjectBasicUIRestrictions: _JOBOBJECTINFOCLASS = 4
val JobObjectSecurityLimitInformation: _JOBOBJECTINFOCLASS = 5
val JobObjectEndOfJobTimeInformation: _JOBOBJECTINFOCLASS = 6
val JobObjectAssociateCompletionPortInformation: _JOBOBJECTINFOCLASS = 7
val JobObjectBasicAndIoAccountingInformation: _JOBOBJECTINFOCLASS = 8
val JobObjectExtendedLimitInformation: _JOBOBJECTINFOCLASS = 9
val JobObjectJobSetInformation: _JOBOBJECTINFOCLASS = 10
val JobObjectGroupInformation: _JOBOBJECTINFOCLASS = 11
val JobObjectNotificationLimitInformation: _JOBOBJECTINFOCLASS = 12
val JobObjectLimitViolationInformation: _JOBOBJECTINFOCLASS = 13
val JobObjectGroupInformationEx: _JOBOBJECTINFOCLASS = 14
val JobObjectCpuRateControlInformation: _JOBOBJECTINFOCLASS = 15
val JobObjectCompletionFilter: _JOBOBJECTINFOCLASS = 16
val JobObjectCompletionCounter: _JOBOBJECTINFOCLASS = 17
val JobObjectReserved1Information: _JOBOBJECTINFOCLASS = 18
val JobObjectReserved2Information: _JOBOBJECTINFOCLASS = 19
val JobObjectReserved3Information: _JOBOBJECTINFOCLASS = 20
val JobObjectReserved4Information: _JOBOBJECTINFOCLASS = 21
val JobObjectReserved5Information: _JOBOBJECTINFOCLASS = 22
val JobObjectReserved6Information: _JOBOBJECTINFOCLASS = 23
val JobObjectReserved7Information: _JOBOBJECTINFOCLASS = 24
val JobObjectReserved8Information: _JOBOBJECTINFOCLASS = 25
val MaxJobObjectInfoClass: _JOBOBJECTINFOCLASS = 26

enum class _FIRMWARE_TYPE(override val value: Int) : CEnum {
    FirmwareTypeUnknown(0),
    FirmwareTypeBios(1),
    FirmwareTypeUefi(2),
    FirmwareTypeMax(3),
    ;
    
    companion object {
        fun byValue(value: Int) = _FIRMWARE_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _FIRMWARE_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _LOGICAL_PROCESSOR_RELATIONSHIPVar = IntVarOf<_LOGICAL_PROCESSOR_RELATIONSHIP>
typealias _LOGICAL_PROCESSOR_RELATIONSHIP = Int

val RelationProcessorCore: _LOGICAL_PROCESSOR_RELATIONSHIP = 0
val RelationNumaNode: _LOGICAL_PROCESSOR_RELATIONSHIP = 1
val RelationCache: _LOGICAL_PROCESSOR_RELATIONSHIP = 2
val RelationProcessorPackage: _LOGICAL_PROCESSOR_RELATIONSHIP = 3
val RelationGroup: _LOGICAL_PROCESSOR_RELATIONSHIP = 4
val RelationAll: _LOGICAL_PROCESSOR_RELATIONSHIP = 65535

enum class _PROCESSOR_CACHE_TYPE(override val value: Int) : CEnum {
    CacheUnified(0),
    CacheInstruction(1),
    CacheData(2),
    CacheTrace(3),
    ;
    
    companion object {
        fun byValue(value: Int) = _PROCESSOR_CACHE_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _PROCESSOR_CACHE_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _SYSTEM_POWER_STATEVar = IntVarOf<_SYSTEM_POWER_STATE>
typealias _SYSTEM_POWER_STATE = Int

val PowerSystemUnspecified: _SYSTEM_POWER_STATE = 0
val PowerSystemWorking: _SYSTEM_POWER_STATE = 1
val PowerSystemSleeping1: _SYSTEM_POWER_STATE = 2
val PowerSystemSleeping2: _SYSTEM_POWER_STATE = 3
val PowerSystemSleeping3: _SYSTEM_POWER_STATE = 4
val PowerSystemHibernate: _SYSTEM_POWER_STATE = 5
val PowerSystemShutdown: _SYSTEM_POWER_STATE = 6
val PowerSystemMaximum: _SYSTEM_POWER_STATE = 7

typealias POWER_ACTIONVar = IntVarOf<POWER_ACTION>
typealias POWER_ACTION = Int

val PowerActionNone: POWER_ACTION = 0
val PowerActionReserved: POWER_ACTION = 1
val PowerActionSleep: POWER_ACTION = 2
val PowerActionHibernate: POWER_ACTION = 3
val PowerActionShutdown: POWER_ACTION = 4
val PowerActionShutdownReset: POWER_ACTION = 5
val PowerActionShutdownOff: POWER_ACTION = 6
val PowerActionWarmEject: POWER_ACTION = 7

typealias _DEVICE_POWER_STATEVar = IntVarOf<_DEVICE_POWER_STATE>
typealias _DEVICE_POWER_STATE = Int

val PowerDeviceUnspecified: _DEVICE_POWER_STATE = 0
val PowerDeviceD0: _DEVICE_POWER_STATE = 1
val PowerDeviceD1: _DEVICE_POWER_STATE = 2
val PowerDeviceD2: _DEVICE_POWER_STATE = 3
val PowerDeviceD3: _DEVICE_POWER_STATE = 4
val PowerDeviceMaximum: _DEVICE_POWER_STATE = 5

typealias _MONITOR_DISPLAY_STATEVar = IntVarOf<_MONITOR_DISPLAY_STATE>
typealias _MONITOR_DISPLAY_STATE = Int

val PowerMonitorOff: _MONITOR_DISPLAY_STATE = 0
val PowerMonitorOn: _MONITOR_DISPLAY_STATE = 1
val PowerMonitorDim: _MONITOR_DISPLAY_STATE = 2

typealias _USER_ACTIVITY_PRESENCEVar = IntVarOf<_USER_ACTIVITY_PRESENCE>
typealias _USER_ACTIVITY_PRESENCE = Int

val PowerUserPresent: _USER_ACTIVITY_PRESENCE = 0
val PowerUserNotPresent: _USER_ACTIVITY_PRESENCE = 1
val PowerUserInactive: _USER_ACTIVITY_PRESENCE = 2
val PowerUserMaximum: _USER_ACTIVITY_PRESENCE = 3
val PowerUserInvalid: _USER_ACTIVITY_PRESENCE = 3

enum class LATENCY_TIME(override val value: Int) : CEnum {
    LT_DONT_CARE(0),
    LT_LOWEST_LATENCY(1),
    ;
    
    companion object {
        fun byValue(value: Int) = LATENCY_TIME.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: LATENCY_TIME
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _POWER_REQUEST_TYPE(override val value: Int) : CEnum {
    PowerRequestDisplayRequired(0),
    PowerRequestSystemRequired(1),
    PowerRequestAwayModeRequired(2),
    PowerRequestExecutionRequired(3),
    ;
    
    companion object {
        fun byValue(value: Int) = _POWER_REQUEST_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _POWER_REQUEST_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class POWER_INFORMATION_LEVEL(override val value: Int) : CEnum {
    SystemPowerPolicyAc(0),
    SystemPowerPolicyDc(1),
    VerifySystemPolicyAc(2),
    VerifySystemPolicyDc(3),
    SystemPowerCapabilities(4),
    SystemBatteryState(5),
    SystemPowerStateHandler(6),
    ProcessorStateHandler(7),
    SystemPowerPolicyCurrent(8),
    AdministratorPowerPolicy(9),
    SystemReserveHiberFile(10),
    ProcessorInformation(11),
    SystemPowerInformation(12),
    ProcessorStateHandler2(13),
    LastWakeTime(14),
    LastSleepTime(15),
    SystemExecutionState(16),
    SystemPowerStateNotifyHandler(17),
    ProcessorPowerPolicyAc(18),
    ProcessorPowerPolicyDc(19),
    VerifyProcessorPowerPolicyAc(20),
    VerifyProcessorPowerPolicyDc(21),
    ProcessorPowerPolicyCurrent(22),
    SystemPowerStateLogging(23),
    SystemPowerLoggingEntry(24),
    SetPowerSettingValue(25),
    NotifyUserPowerSetting(26),
    PowerInformationLevelUnused0(27),
    SystemMonitorHiberBootPowerOff(28),
    SystemVideoState(29),
    TraceApplicationPowerMessage(30),
    TraceApplicationPowerMessageEnd(31),
    ProcessorPerfStates(32),
    ProcessorIdleStates(33),
    ProcessorCap(34),
    SystemWakeSource(35),
    SystemHiberFileInformation(36),
    TraceServicePowerMessage(37),
    ProcessorLoad(38),
    PowerShutdownNotification(39),
    MonitorCapabilities(40),
    SessionPowerInit(41),
    SessionDisplayState(42),
    PowerRequestCreate(43),
    PowerRequestAction(44),
    GetPowerRequestList(45),
    ProcessorInformationEx(46),
    NotifyUserModeLegacyPowerEvent(47),
    GroupPark(48),
    ProcessorIdleDomains(49),
    WakeTimerList(50),
    SystemHiberFileSize(51),
    ProcessorIdleStatesHv(52),
    ProcessorPerfStatesHv(53),
    ProcessorPerfCapHv(54),
    ProcessorSetIdle(55),
    LogicalProcessorIdling(56),
    UserPresence(57),
    PowerSettingNotificationName(58),
    GetPowerSettingValue(59),
    IdleResiliency(60),
    SessionRITState(61),
    SessionConnectNotification(62),
    SessionPowerCleanup(63),
    SessionLockState(64),
    SystemHiberbootState(65),
    PlatformInformation(66),
    PdcInvocation(67),
    MonitorInvocation(68),
    FirmwareTableInformationRegistered(69),
    SetShutdownSelectedTime(70),
    SuspendResumeInvocation(71),
    PlmPowerRequestCreate(72),
    ScreenOff(73),
    CsDeviceNotification(74),
    PlatformRole(75),
    LastResumePerformance(76),
    DisplayBurst(77),
    ExitLatencySamplingPercentage(78),
    ApplyLowPowerScenarioSettings(79),
    PowerInformationLevelMaximum(80),
    ;
    
    companion object {
        fun byValue(value: Int) = POWER_INFORMATION_LEVEL.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: POWER_INFORMATION_LEVEL
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias POWER_USER_PRESENCE_TYPEVar = IntVarOf<POWER_USER_PRESENCE_TYPE>
typealias POWER_USER_PRESENCE_TYPE = Int

val UserNotPresent: POWER_USER_PRESENCE_TYPE = 0
val UserPresent: POWER_USER_PRESENCE_TYPE = 1
val UserUnknown: POWER_USER_PRESENCE_TYPE = 255

enum class POWER_MONITOR_REQUEST_REASON(override val value: Int) : CEnum {
    MonitorRequestReasonUnknown(0),
    MonitorRequestReasonPowerButton(1),
    MonitorRequestReasonRemoteConnection(2),
    MonitorRequestReasonScMonitorpower(3),
    MonitorRequestReasonUserInput(4),
    MonitorRequestReasonAcDcDisplayBurst(5),
    MonitorRequestReasonUserDisplayBurst(6),
    MonitorRequestReasonPoSetSystemState(7),
    MonitorRequestReasonSetThreadExecutionState(8),
    MonitorRequestReasonFullWake(9),
    MonitorRequestReasonSessionUnlock(10),
    MonitorRequestReasonScreenOffRequest(11),
    MonitorRequestReasonIdleTimeout(12),
    MonitorRequestReasonPolicyChange(13),
    MonitorRequestReasonMax(14),
    ;
    
    companion object {
        fun byValue(value: Int) = POWER_MONITOR_REQUEST_REASON.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: POWER_MONITOR_REQUEST_REASON
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class SYSTEM_POWER_CONDITION(override val value: Int) : CEnum {
    PoAc(0),
    PoDc(1),
    PoHot(2),
    PoConditionMaximum(3),
    ;
    
    companion object {
        fun byValue(value: Int) = SYSTEM_POWER_CONDITION.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: SYSTEM_POWER_CONDITION
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _POWER_PLATFORM_ROLEVar = IntVarOf<_POWER_PLATFORM_ROLE>
typealias _POWER_PLATFORM_ROLE = Int

val PlatformRoleUnspecified: _POWER_PLATFORM_ROLE = 0
val PlatformRoleDesktop: _POWER_PLATFORM_ROLE = 1
val PlatformRoleMobile: _POWER_PLATFORM_ROLE = 2
val PlatformRoleWorkstation: _POWER_PLATFORM_ROLE = 3
val PlatformRoleEnterpriseServer: _POWER_PLATFORM_ROLE = 4
val PlatformRoleSOHOServer: _POWER_PLATFORM_ROLE = 5
val PlatformRoleAppliancePC: _POWER_PLATFORM_ROLE = 6
val PlatformRolePerformanceServer: _POWER_PLATFORM_ROLE = 7
val PlatformRoleSlate: _POWER_PLATFORM_ROLE = 8
val PlatformRoleMaximum: _POWER_PLATFORM_ROLE = 9

typealias IMAGE_AUX_SYMBOL_TYPEVar = IntVarOf<IMAGE_AUX_SYMBOL_TYPE>
typealias IMAGE_AUX_SYMBOL_TYPE = Int

val IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF: IMAGE_AUX_SYMBOL_TYPE = 1

typealias IMPORT_OBJECT_TYPEVar = IntVarOf<IMPORT_OBJECT_TYPE>
typealias IMPORT_OBJECT_TYPE = Int

val IMPORT_OBJECT_CODE: IMPORT_OBJECT_TYPE = 0
val IMPORT_OBJECT_DATA: IMPORT_OBJECT_TYPE = 1
val IMPORT_OBJECT_CONST: IMPORT_OBJECT_TYPE = 2

typealias IMPORT_OBJECT_NAME_TYPEVar = IntVarOf<IMPORT_OBJECT_NAME_TYPE>
typealias IMPORT_OBJECT_NAME_TYPE = Int

val IMPORT_OBJECT_ORDINAL: IMPORT_OBJECT_NAME_TYPE = 0
val IMPORT_OBJECT_NAME: IMPORT_OBJECT_NAME_TYPE = 1
val IMPORT_OBJECT_NAME_NO_PREFIX: IMPORT_OBJECT_NAME_TYPE = 2
val IMPORT_OBJECT_NAME_UNDECORATE: IMPORT_OBJECT_NAME_TYPE = 3

typealias ReplacesCorHdrNumericDefinesVar = IntVarOf<ReplacesCorHdrNumericDefines>
typealias ReplacesCorHdrNumericDefines = Int

val COMIMAGE_FLAGS_ILONLY: ReplacesCorHdrNumericDefines = 1
val COMIMAGE_FLAGS_32BITREQUIRED: ReplacesCorHdrNumericDefines = 2
val COMIMAGE_FLAGS_IL_LIBRARY: ReplacesCorHdrNumericDefines = 4
val COMIMAGE_FLAGS_STRONGNAMESIGNED: ReplacesCorHdrNumericDefines = 8
val COMIMAGE_FLAGS_TRACKDEBUGDATA: ReplacesCorHdrNumericDefines = 65536
val COR_VERSION_MAJOR_V2: ReplacesCorHdrNumericDefines = 2
val COR_VERSION_MAJOR: ReplacesCorHdrNumericDefines = 2
val COR_VERSION_MINOR: ReplacesCorHdrNumericDefines = 0
val COR_DELETED_NAME_LENGTH: ReplacesCorHdrNumericDefines = 8
val COR_VTABLEGAP_NAME_LENGTH: ReplacesCorHdrNumericDefines = 8
val NATIVE_TYPE_MAX_CB: ReplacesCorHdrNumericDefines = 1
val COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE: ReplacesCorHdrNumericDefines = 255
val IMAGE_COR_MIH_METHODRVA: ReplacesCorHdrNumericDefines = 1
val IMAGE_COR_MIH_EHRVA: ReplacesCorHdrNumericDefines = 2
val IMAGE_COR_MIH_BASICBLOCK: ReplacesCorHdrNumericDefines = 8
val COR_VTABLE_32BIT: ReplacesCorHdrNumericDefines = 1
val COR_VTABLE_64BIT: ReplacesCorHdrNumericDefines = 2
val COR_VTABLE_FROM_UNMANAGED: ReplacesCorHdrNumericDefines = 4
val COR_VTABLE_CALL_MOST_DERIVED: ReplacesCorHdrNumericDefines = 16
val IMAGE_COR_EATJ_THUNK_SIZE: ReplacesCorHdrNumericDefines = 32
val MAX_CLASS_NAME: ReplacesCorHdrNumericDefines = 1024
val MAX_PACKAGE_NAME: ReplacesCorHdrNumericDefines = 1024

typealias _RTL_UMS_THREAD_INFO_CLASSVar = IntVarOf<_RTL_UMS_THREAD_INFO_CLASS>
typealias _RTL_UMS_THREAD_INFO_CLASS = Int

val UmsThreadInvalidInfoClass: _RTL_UMS_THREAD_INFO_CLASS = 0
val UmsThreadUserContext: _RTL_UMS_THREAD_INFO_CLASS = 1
val UmsThreadPriority: _RTL_UMS_THREAD_INFO_CLASS = 2
val UmsThreadAffinity: _RTL_UMS_THREAD_INFO_CLASS = 3
val UmsThreadTeb: _RTL_UMS_THREAD_INFO_CLASS = 4
val UmsThreadIsSuspended: _RTL_UMS_THREAD_INFO_CLASS = 5
val UmsThreadIsTerminated: _RTL_UMS_THREAD_INFO_CLASS = 6
val UmsThreadMaxInfoClass: _RTL_UMS_THREAD_INFO_CLASS = 7

typealias _RTL_UMS_SCHEDULER_REASONVar = IntVarOf<_RTL_UMS_SCHEDULER_REASON>
typealias _RTL_UMS_SCHEDULER_REASON = Int

val UmsSchedulerStartup: _RTL_UMS_SCHEDULER_REASON = 0
val UmsSchedulerThreadBlocked: _RTL_UMS_SCHEDULER_REASON = 1
val UmsSchedulerThreadYield: _RTL_UMS_SCHEDULER_REASON = 2

enum class _HEAP_INFORMATION_CLASS(override val value: Int) : CEnum {
    HeapCompatibilityInformation(0),
    HeapEnableTerminationOnCorruption(1),
    ;
    
    companion object {
        fun byValue(value: Int) = _HEAP_INFORMATION_CLASS.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _HEAP_INFORMATION_CLASS
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _ACTIVATION_CONTEXT_INFO_CLASSVar = IntVarOf<_ACTIVATION_CONTEXT_INFO_CLASS>
typealias _ACTIVATION_CONTEXT_INFO_CLASS = Int

val ActivationContextBasicInformation: _ACTIVATION_CONTEXT_INFO_CLASS = 1
val ActivationContextDetailedInformation: _ACTIVATION_CONTEXT_INFO_CLASS = 2
val AssemblyDetailedInformationInActivationContext: _ACTIVATION_CONTEXT_INFO_CLASS = 3
val FileInformationInAssemblyOfAssemblyInActivationContext: _ACTIVATION_CONTEXT_INFO_CLASS = 4
val RunlevelInformationInActivationContext: _ACTIVATION_CONTEXT_INFO_CLASS = 5
val CompatibilityInformationInActivationContext: _ACTIVATION_CONTEXT_INFO_CLASS = 6
val ActivationContextManifestResourceName: _ACTIVATION_CONTEXT_INFO_CLASS = 7
val MaxActivationContextInfoClass: _ACTIVATION_CONTEXT_INFO_CLASS = 8
val AssemblyDetailedInformationInActivationContxt: _ACTIVATION_CONTEXT_INFO_CLASS = 3
val FileInformationInAssemblyOfAssemblyInActivationContxt: _ACTIVATION_CONTEXT_INFO_CLASS = 4

typealias ACTCTX_REQUESTED_RUN_LEVELVar = IntVarOf<ACTCTX_REQUESTED_RUN_LEVEL>
typealias ACTCTX_REQUESTED_RUN_LEVEL = Int

val ACTCTX_RUN_LEVEL_UNSPECIFIED: ACTCTX_REQUESTED_RUN_LEVEL = 0
val ACTCTX_RUN_LEVEL_AS_INVOKER: ACTCTX_REQUESTED_RUN_LEVEL = 1
val ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE: ACTCTX_REQUESTED_RUN_LEVEL = 2
val ACTCTX_RUN_LEVEL_REQUIRE_ADMIN: ACTCTX_REQUESTED_RUN_LEVEL = 3
val ACTCTX_RUN_LEVEL_NUMBERS: ACTCTX_REQUESTED_RUN_LEVEL = 4

typealias ACTCTX_COMPATIBILITY_ELEMENT_TYPEVar = IntVarOf<ACTCTX_COMPATIBILITY_ELEMENT_TYPE>
typealias ACTCTX_COMPATIBILITY_ELEMENT_TYPE = Int

val ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN: ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 0
val ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS: ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 1
val ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION: ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 2

typealias _CM_SERVICE_NODE_TYPEVar = IntVarOf<_CM_SERVICE_NODE_TYPE>
typealias _CM_SERVICE_NODE_TYPE = Int

val DriverType: _CM_SERVICE_NODE_TYPE = 1
val FileSystemType: _CM_SERVICE_NODE_TYPE = 2
val Win32ServiceOwnProcess: _CM_SERVICE_NODE_TYPE = 16
val Win32ServiceShareProcess: _CM_SERVICE_NODE_TYPE = 32
val AdapterType: _CM_SERVICE_NODE_TYPE = 4
val RecognizerType: _CM_SERVICE_NODE_TYPE = 8

typealias _CM_SERVICE_LOAD_TYPEVar = IntVarOf<_CM_SERVICE_LOAD_TYPE>
typealias _CM_SERVICE_LOAD_TYPE = Int

val BootLoad: _CM_SERVICE_LOAD_TYPE = 0
val SystemLoad: _CM_SERVICE_LOAD_TYPE = 1
val AutoLoad: _CM_SERVICE_LOAD_TYPE = 2
val DemandLoad: _CM_SERVICE_LOAD_TYPE = 3
val DisableLoad: _CM_SERVICE_LOAD_TYPE = 4

typealias _CM_ERROR_CONTROL_TYPEVar = IntVarOf<_CM_ERROR_CONTROL_TYPE>
typealias _CM_ERROR_CONTROL_TYPE = Int

val IgnoreError: _CM_ERROR_CONTROL_TYPE = 0
val NormalError: _CM_ERROR_CONTROL_TYPE = 1
val SevereError: _CM_ERROR_CONTROL_TYPE = 2
val CriticalError: _CM_ERROR_CONTROL_TYPE = 3

enum class _TAPE_DRIVE_PROBLEM_TYPE(override val value: Int) : CEnum {
    TapeDriveProblemNone(0),
    TapeDriveReadWriteWarning(1),
    TapeDriveReadWriteError(2),
    TapeDriveReadWarning(3),
    TapeDriveWriteWarning(4),
    TapeDriveReadError(5),
    TapeDriveWriteError(6),
    TapeDriveHardwareError(7),
    TapeDriveUnsupportedMedia(8),
    TapeDriveScsiConnectionError(9),
    TapeDriveTimetoClean(10),
    TapeDriveCleanDriveNow(11),
    TapeDriveMediaLifeExpired(12),
    TapeDriveSnappedTape(13),
    ;
    
    companion object {
        fun byValue(value: Int) = _TAPE_DRIVE_PROBLEM_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _TAPE_DRIVE_PROBLEM_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _TP_CALLBACK_PRIORITYVar = IntVarOf<_TP_CALLBACK_PRIORITY>
typealias _TP_CALLBACK_PRIORITY = Int

val TP_CALLBACK_PRIORITY_HIGH: _TP_CALLBACK_PRIORITY = 0
val TP_CALLBACK_PRIORITY_NORMAL: _TP_CALLBACK_PRIORITY = 1
val TP_CALLBACK_PRIORITY_LOW: _TP_CALLBACK_PRIORITY = 2
val TP_CALLBACK_PRIORITY_INVALID: _TP_CALLBACK_PRIORITY = 3
val TP_CALLBACK_PRIORITY_COUNT: _TP_CALLBACK_PRIORITY = 3

typealias _TRANSACTION_OUTCOMEVar = IntVarOf<_TRANSACTION_OUTCOME>
typealias _TRANSACTION_OUTCOME = Int

val TransactionOutcomeUndetermined: _TRANSACTION_OUTCOME = 1
val TransactionOutcomeCommitted: _TRANSACTION_OUTCOME = 2
val TransactionOutcomeAborted: _TRANSACTION_OUTCOME = 3

typealias _TRANSACTION_STATEVar = IntVarOf<_TRANSACTION_STATE>
typealias _TRANSACTION_STATE = Int

val TransactionStateNormal: _TRANSACTION_STATE = 1
val TransactionStateIndoubt: _TRANSACTION_STATE = 2
val TransactionStateCommittedNotify: _TRANSACTION_STATE = 3

enum class _TRANSACTION_INFORMATION_CLASS(override val value: Int) : CEnum {
    TransactionBasicInformation(0),
    TransactionPropertiesInformation(1),
    TransactionEnlistmentInformation(2),
    TransactionSuperiorEnlistmentInformation(3),
    TransactionBindInformation(4),
    TransactionDTCPrivateInformation(5),
    ;
    
    companion object {
        fun byValue(value: Int) = _TRANSACTION_INFORMATION_CLASS.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _TRANSACTION_INFORMATION_CLASS
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _TRANSACTIONMANAGER_INFORMATION_CLASSVar = IntVarOf<_TRANSACTIONMANAGER_INFORMATION_CLASS>
typealias _TRANSACTIONMANAGER_INFORMATION_CLASS = Int

val TransactionManagerBasicInformation: _TRANSACTIONMANAGER_INFORMATION_CLASS = 0
val TransactionManagerLogInformation: _TRANSACTIONMANAGER_INFORMATION_CLASS = 1
val TransactionManagerLogPathInformation: _TRANSACTIONMANAGER_INFORMATION_CLASS = 2
val TransactionManagerOnlineProbeInformation: _TRANSACTIONMANAGER_INFORMATION_CLASS = 3
val TransactionManagerRecoveryInformation: _TRANSACTIONMANAGER_INFORMATION_CLASS = 4
val TransactionManagerOldestTransactionInformation: _TRANSACTIONMANAGER_INFORMATION_CLASS = 5

enum class _RESOURCEMANAGER_INFORMATION_CLASS(override val value: Int) : CEnum {
    ResourceManagerBasicInformation(0),
    ResourceManagerCompletionInformation(1),
    ;
    
    companion object {
        fun byValue(value: Int) = _RESOURCEMANAGER_INFORMATION_CLASS.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _RESOURCEMANAGER_INFORMATION_CLASS
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _ENLISTMENT_INFORMATION_CLASS(override val value: Int) : CEnum {
    EnlistmentBasicInformation(0),
    EnlistmentRecoveryInformation(1),
    EnlistmentCrmInformation(2),
    ;
    
    companion object {
        fun byValue(value: Int) = _ENLISTMENT_INFORMATION_CLASS.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _ENLISTMENT_INFORMATION_CLASS
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _KTMOBJECT_TYPE(override val value: Int) : CEnum {
    KTMOBJECT_TRANSACTION(0),
    KTMOBJECT_TRANSACTION_MANAGER(1),
    KTMOBJECT_RESOURCE_MANAGER(2),
    KTMOBJECT_ENLISTMENT(3),
    KTMOBJECT_INVALID(4),
    ;
    
    companion object {
        fun byValue(value: Int) = _KTMOBJECT_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _KTMOBJECT_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _THREAD_INFORMATION_CLASS(override val value: Int) : CEnum {
    ThreadMemoryPriority(0),
    ThreadAbsoluteCpuPriority(1),
    ThreadInformationClassMax(2),
    ;
    
    companion object {
        fun byValue(value: Int) = _THREAD_INFORMATION_CLASS.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _THREAD_INFORMATION_CLASS
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _PROCESS_INFORMATION_CLASS(override val value: Int) : CEnum {
    ProcessMemoryPriority(0),
    ProcessInformationClassMax(1),
    ;
    
    companion object {
        fun byValue(value: Int) = _PROCESS_INFORMATION_CLASS.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _PROCESS_INFORMATION_CLASS
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _DEP_SYSTEM_POLICY_TYPEVar = IntVarOf<_DEP_SYSTEM_POLICY_TYPE>
typealias _DEP_SYSTEM_POLICY_TYPE = Int

val DEPPolicyAlwaysOff: _DEP_SYSTEM_POLICY_TYPE = 0
val DEPPolicyAlwaysOn: _DEP_SYSTEM_POLICY_TYPE = 1
val DEPPolicyOptIn: _DEP_SYSTEM_POLICY_TYPE = 2
val DEPPolicyOptOut: _DEP_SYSTEM_POLICY_TYPE = 3
val DEPTotalPolicyCount: _DEP_SYSTEM_POLICY_TYPE = 4

enum class _STREAM_INFO_LEVELS(override val value: Int) : CEnum {
    FindStreamInfoStandard(0),
    FindStreamInfoMaxInfoLevel(1),
    ;
    
    companion object {
        fun byValue(value: Int) = _STREAM_INFO_LEVELS.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _STREAM_INFO_LEVELS
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _COMPUTER_NAME_FORMAT(override val value: Int) : CEnum {
    ComputerNameNetBIOS(0),
    ComputerNameDnsHostname(1),
    ComputerNameDnsDomain(2),
    ComputerNameDnsFullyQualified(3),
    ComputerNamePhysicalNetBIOS(4),
    ComputerNamePhysicalDnsHostname(5),
    ComputerNamePhysicalDnsDomain(6),
    ComputerNamePhysicalDnsFullyQualified(7),
    ComputerNameMax(8),
    ;
    
    companion object {
        fun byValue(value: Int) = _COMPUTER_NAME_FORMAT.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _COMPUTER_NAME_FORMAT
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias SYSNLS_FUNCTIONVar = IntVarOf<SYSNLS_FUNCTION>
typealias SYSNLS_FUNCTION = Int

val COMPARE_STRING: SYSNLS_FUNCTION = 1

typealias SYSGEOTYPEVar = IntVarOf<SYSGEOTYPE>
typealias SYSGEOTYPE = Int

val GEO_NATION: SYSGEOTYPE = 1
val GEO_LATITUDE: SYSGEOTYPE = 2
val GEO_LONGITUDE: SYSGEOTYPE = 3
val GEO_ISO2: SYSGEOTYPE = 4
val GEO_ISO3: SYSGEOTYPE = 5
val GEO_RFC1766: SYSGEOTYPE = 6
val GEO_LCID: SYSGEOTYPE = 7
val GEO_FRIENDLYNAME: SYSGEOTYPE = 8
val GEO_OFFICIALNAME: SYSGEOTYPE = 9
val GEO_TIMEZONES: SYSGEOTYPE = 10
val GEO_OFFICIALLANGUAGES: SYSGEOTYPE = 11
val GEO_ISO_UN_NUMBER: SYSGEOTYPE = 12
val GEO_PARENT: SYSGEOTYPE = 13

typealias SYSGEOCLASSVar = IntVarOf<SYSGEOCLASS>
typealias SYSGEOCLASS = Int

val GEOCLASS_NATION: SYSGEOCLASS = 16
val GEOCLASS_REGION: SYSGEOCLASS = 14
val GEOCLASS_ALL: SYSGEOCLASS = 0

typealias _STORAGE_MEDIA_TYPEVar = IntVarOf<_STORAGE_MEDIA_TYPE>
typealias _STORAGE_MEDIA_TYPE = Int

val DDS_4mm: _STORAGE_MEDIA_TYPE = 32
val MiniQic: _STORAGE_MEDIA_TYPE = 33
val Travan: _STORAGE_MEDIA_TYPE = 34
val QIC: _STORAGE_MEDIA_TYPE = 35
val MP_8mm: _STORAGE_MEDIA_TYPE = 36
val AME_8mm: _STORAGE_MEDIA_TYPE = 37
val AIT1_8mm: _STORAGE_MEDIA_TYPE = 38
val DLT: _STORAGE_MEDIA_TYPE = 39
val NCTP: _STORAGE_MEDIA_TYPE = 40
val IBM_3480: _STORAGE_MEDIA_TYPE = 41
val IBM_3490E: _STORAGE_MEDIA_TYPE = 42
val IBM_Magstar_3590: _STORAGE_MEDIA_TYPE = 43
val IBM_Magstar_MP: _STORAGE_MEDIA_TYPE = 44
val STK_DATA_D3: _STORAGE_MEDIA_TYPE = 45
val SONY_DTF: _STORAGE_MEDIA_TYPE = 46
val DV_6mm: _STORAGE_MEDIA_TYPE = 47
val DMI: _STORAGE_MEDIA_TYPE = 48
val SONY_D2: _STORAGE_MEDIA_TYPE = 49
val CLEANER_CARTRIDGE: _STORAGE_MEDIA_TYPE = 50
val CD_ROM: _STORAGE_MEDIA_TYPE = 51
val CD_R: _STORAGE_MEDIA_TYPE = 52
val CD_RW: _STORAGE_MEDIA_TYPE = 53
val DVD_ROM: _STORAGE_MEDIA_TYPE = 54
val DVD_R: _STORAGE_MEDIA_TYPE = 55
val DVD_RW: _STORAGE_MEDIA_TYPE = 56
val MO_3_RW: _STORAGE_MEDIA_TYPE = 57
val MO_5_WO: _STORAGE_MEDIA_TYPE = 58
val MO_5_RW: _STORAGE_MEDIA_TYPE = 59
val MO_5_LIMDOW: _STORAGE_MEDIA_TYPE = 60
val PC_5_WO: _STORAGE_MEDIA_TYPE = 61
val PC_5_RW: _STORAGE_MEDIA_TYPE = 62
val PD_5_RW: _STORAGE_MEDIA_TYPE = 63
val ABL_5_WO: _STORAGE_MEDIA_TYPE = 64
val PINNACLE_APEX_5_RW: _STORAGE_MEDIA_TYPE = 65
val SONY_12_WO: _STORAGE_MEDIA_TYPE = 66
val PHILIPS_12_WO: _STORAGE_MEDIA_TYPE = 67
val HITACHI_12_WO: _STORAGE_MEDIA_TYPE = 68
val CYGNET_12_WO: _STORAGE_MEDIA_TYPE = 69
val KODAK_14_WO: _STORAGE_MEDIA_TYPE = 70
val MO_NFR_525: _STORAGE_MEDIA_TYPE = 71
val NIKON_12_RW: _STORAGE_MEDIA_TYPE = 72
val IOMEGA_ZIP: _STORAGE_MEDIA_TYPE = 73
val IOMEGA_JAZ: _STORAGE_MEDIA_TYPE = 74
val SYQUEST_EZ135: _STORAGE_MEDIA_TYPE = 75
val SYQUEST_EZFLYER: _STORAGE_MEDIA_TYPE = 76
val SYQUEST_SYJET: _STORAGE_MEDIA_TYPE = 77
val AVATAR_F2: _STORAGE_MEDIA_TYPE = 78
val MP2_8mm: _STORAGE_MEDIA_TYPE = 79
val DST_S: _STORAGE_MEDIA_TYPE = 80
val DST_M: _STORAGE_MEDIA_TYPE = 81
val DST_L: _STORAGE_MEDIA_TYPE = 82
val VXATape_1: _STORAGE_MEDIA_TYPE = 83
val VXATape_2: _STORAGE_MEDIA_TYPE = 84
val STK_9840: _STORAGE_MEDIA_TYPE = 85
val LTO_Ultrium: _STORAGE_MEDIA_TYPE = 86
val LTO_Accelis: _STORAGE_MEDIA_TYPE = 87
val DVD_RAM: _STORAGE_MEDIA_TYPE = 88
val AIT_8mm: _STORAGE_MEDIA_TYPE = 89
val ADR_1: _STORAGE_MEDIA_TYPE = 90
val ADR_2: _STORAGE_MEDIA_TYPE = 91
val STK_9940: _STORAGE_MEDIA_TYPE = 92
val SAIT: _STORAGE_MEDIA_TYPE = 93
val VXATape: _STORAGE_MEDIA_TYPE = 94

typealias _STORAGE_BUS_TYPEVar = IntVarOf<_STORAGE_BUS_TYPE>
typealias _STORAGE_BUS_TYPE = Int

val BusTypeUnknown: _STORAGE_BUS_TYPE = 0
val BusTypeScsi: _STORAGE_BUS_TYPE = 1
val BusTypeAtapi: _STORAGE_BUS_TYPE = 2
val BusTypeAta: _STORAGE_BUS_TYPE = 3
val BusType1394: _STORAGE_BUS_TYPE = 4
val BusTypeSsa: _STORAGE_BUS_TYPE = 5
val BusTypeFibre: _STORAGE_BUS_TYPE = 6
val BusTypeUsb: _STORAGE_BUS_TYPE = 7
val BusTypeRAID: _STORAGE_BUS_TYPE = 8
val BusTypeMax: _STORAGE_BUS_TYPE = 9
val BusTypeMaxReserved: _STORAGE_BUS_TYPE = 127

enum class _MEDIA_TYPE(override val value: Int) : CEnum {
    Unknown(0),
    F5_1Pt2_512(1),
    F3_1Pt44_512(2),
    F3_2Pt88_512(3),
    F3_20Pt8_512(4),
    F3_720_512(5),
    F5_360_512(6),
    F5_320_512(7),
    F5_320_1024(8),
    F5_180_512(9),
    F5_160_512(10),
    RemovableMedia(11),
    FixedMedia(12),
    F3_120M_512(13),
    F3_640_512(14),
    F5_640_512(15),
    F5_720_512(16),
    F3_1Pt2_512(17),
    F3_1Pt23_1024(18),
    F5_1Pt23_1024(19),
    F3_128Mb_512(20),
    F3_230Mb_512(21),
    F8_256_128(22),
    F3_200Mb_512(23),
    F3_240M_512(24),
    F3_32M_512(25),
    ;
    
    companion object {
        fun byValue(value: Int) = _MEDIA_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _MEDIA_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _PARTITION_STYLE(override val value: Int) : CEnum {
    PARTITION_STYLE_MBR(0),
    PARTITION_STYLE_GPT(1),
    PARTITION_STYLE_RAW(2),
    ;
    
    companion object {
        fun byValue(value: Int) = _PARTITION_STYLE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _PARTITION_STYLE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _DETECTION_TYPE(override val value: Int) : CEnum {
    DetectNone(0),
    DetectInt13(1),
    DetectExInt13(2),
    ;
    
    companion object {
        fun byValue(value: Int) = _DETECTION_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _DETECTION_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class DISK_CACHE_RETENTION_PRIORITY(override val value: Int) : CEnum {
    EqualPriority(0),
    KeepPrefetchedData(1),
    KeepReadData(2),
    ;
    
    companion object {
        fun byValue(value: Int) = DISK_CACHE_RETENTION_PRIORITY.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: DISK_CACHE_RETENTION_PRIORITY
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _BIN_TYPES(override val value: Int) : CEnum {
    RequestSize(0),
    RequestLocation(1),
    ;
    
    companion object {
        fun byValue(value: Int) = _BIN_TYPES.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _BIN_TYPES
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _ELEMENT_TYPE(override val value: Int) : CEnum {
    AllElements(0),
    ChangerTransport(1),
    ChangerSlot(2),
    ChangerIEPort(3),
    ChangerDrive(4),
    ChangerDoor(5),
    ChangerKeypad(6),
    ChangerMaxElement(7),
    ;
    
    companion object {
        fun byValue(value: Int) = _ELEMENT_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _ELEMENT_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

enum class _CHANGER_DEVICE_PROBLEM_TYPE(override val value: Int) : CEnum {
    DeviceProblemNone(0),
    DeviceProblemHardware(1),
    DeviceProblemCHMError(2),
    DeviceProblemDoorOpen(3),
    DeviceProblemCalibrationError(4),
    DeviceProblemTargetFailure(5),
    DeviceProblemCHMMoveError(6),
    DeviceProblemCHMZeroError(7),
    DeviceProblemCartridgeInsertError(8),
    DeviceProblemPositionError(9),
    DeviceProblemSensorError(10),
    DeviceProblemCartridgeEjectError(11),
    DeviceProblemGripperError(12),
    DeviceProblemDriveError(13),
    ;
    
    companion object {
        fun byValue(value: Int) = _CHANGER_DEVICE_PROBLEM_TYPE.values().find { it.value == value }!!
    }
    
    class Var(override val rawPtr: NativePtr) : CEnumVar() {
        companion object : Type(IntVar.size.toInt())
        var value: _CHANGER_DEVICE_PROBLEM_TYPE
            get() = byValue(this.reinterpret<IntVar>().value)
            set(value) { this.reinterpret<IntVar>().value = value.value }
    }
}

typealias _STORAGE_PROPERTY_IDVar = IntVarOf<_STORAGE_PROPERTY_ID>
typealias _STORAGE_PROPERTY_ID = Int

val StorageDeviceProperty: _STORAGE_PROPERTY_ID = 0
val StorageAdapterProperty: _STORAGE_PROPERTY_ID = 1
val StorageDeviceIdProperty: _STORAGE_PROPERTY_ID = 2
val StorageDeviceUniqueIdProperty: _STORAGE_PROPERTY_ID = 3
val StorageDeviceWriteCacheProperty: _STORAGE_PROPERTY_ID = 4
val StorageMiniportProperty: _STORAGE_PROPERTY_ID = 5
val StorageAccessAlignmentProperty: _STORAGE_PROPERTY_ID = 6
val StorageDeviceSeekPenaltyProperty: _STORAGE_PROPERTY_ID = 7
val StorageDeviceTrimProperty: _STORAGE_PROPERTY_ID = 8

typealias _STORAGE_QUERY_TYPEVar = IntVarOf<_STORAGE_QUERY_TYPE>
typealias _STORAGE_QUERY_TYPE = Int

val PropertyStandardQuery: _STORAGE_QUERY_TYPE = 0
val PropertyExistsQuery: _STORAGE_QUERY_TYPE = 1
val PropertyMaskQuery: _STORAGE_QUERY_TYPE = 2
val PropertyQueryMaxDefined: _STORAGE_QUERY_TYPE = 3

typealias BIDI_TYPEVar = IntVarOf<BIDI_TYPE>
typealias BIDI_TYPE = Int

val BIDI_NULL: BIDI_TYPE = 0
val BIDI_INT: BIDI_TYPE = 1
val BIDI_FLOAT: BIDI_TYPE = 2
val BIDI_BOOL: BIDI_TYPE = 3
val BIDI_STRING: BIDI_TYPE = 4
val BIDI_TEXT: BIDI_TYPE = 5
val BIDI_ENUM: BIDI_TYPE = 6
val BIDI_BLOB: BIDI_TYPE = 7

typealias _SC_ACTION_TYPEVar = IntVarOf<_SC_ACTION_TYPE>
typealias _SC_ACTION_TYPE = Int

val SC_ACTION_NONE: _SC_ACTION_TYPE = 0
val SC_ACTION_RESTART: _SC_ACTION_TYPE = 1
val SC_ACTION_REBOOT: _SC_ACTION_TYPE = 2
val SC_ACTION_RUN_COMMAND: _SC_ACTION_TYPE = 3

typealias _SC_STATUS_TYPEVar = IntVarOf<_SC_STATUS_TYPE>
typealias _SC_STATUS_TYPE = Int

val SC_STATUS_PROCESS_INFO: _SC_STATUS_TYPE = 0

typealias _SC_ENUM_TYPEVar = IntVarOf<_SC_ENUM_TYPE>
typealias _SC_ENUM_TYPE = Int

val SC_ENUM_PROCESS_INFO: _SC_ENUM_TYPE = 0

typealias PVOIDVar = CPointerVarOf<PVOID>
typealias PVOID = COpaquePointer

typealias PVOID64Var = CPointerVarOf<PVOID64>
typealias PVOID64 = COpaquePointer

typealias CHARVar = ByteVarOf<CHAR>
typealias CHAR = Byte

typealias SHORTVar = ShortVarOf<SHORT>
typealias SHORT = Short

typealias LONGVar = IntVarOf<LONG>
typealias LONG = Int

typealias INTVar = IntVarOf<INT>
typealias INT = Int

typealias wchar_tVar = ShortVarOf<wchar_t>
typealias wchar_t = Short

typealias WCHARVar = ShortVarOf<WCHAR>
typealias WCHAR = wchar_t

typealias PWCHARVar = CPointerVarOf<PWCHAR>
typealias PWCHAR = CPointer<WCHARVar>

typealias LPWCHVar = CPointerVarOf<LPWCH>
typealias LPWCH = CPointer<WCHARVar>

typealias PWCHVar = CPointerVarOf<PWCH>
typealias PWCH = CPointer<WCHARVar>

typealias LPCWCHVar = CPointerVarOf<LPCWCH>
typealias LPCWCH = CPointer<WCHARVar>

typealias PCWCHVar = CPointerVarOf<PCWCH>
typealias PCWCH = CPointer<WCHARVar>

typealias NWPSTRVar = CPointerVarOf<NWPSTR>
typealias NWPSTR = CPointer<WCHARVar>

typealias LPWSTRVar = CPointerVarOf<LPWSTR>
typealias LPWSTR = CPointer<WCHARVar>

typealias PWSTRVar = CPointerVarOf<PWSTR>
typealias PWSTR = CPointer<WCHARVar>

typealias PZPWSTRVar = CPointerVarOf<PZPWSTR>
typealias PZPWSTR = CPointer<PWSTRVar>

typealias PCZPWSTRVar = CPointerVarOf<PCZPWSTR>
typealias PCZPWSTR = CPointer<PWSTRVar>

typealias LPUWSTRVar = CPointerVarOf<LPUWSTR>
typealias LPUWSTR = CPointer<WCHARVar>

typealias PUWSTRVar = CPointerVarOf<PUWSTR>
typealias PUWSTR = CPointer<WCHARVar>

typealias LPCWSTRVar = CPointerVarOf<LPCWSTR>
typealias LPCWSTR = CPointer<WCHARVar>

typealias PCWSTRVar = CPointerVarOf<PCWSTR>
typealias PCWSTR = CPointer<WCHARVar>

typealias PZPCWSTRVar = CPointerVarOf<PZPCWSTR>
typealias PZPCWSTR = CPointer<PCWSTRVar>

typealias LPCUWSTRVar = CPointerVarOf<LPCUWSTR>
typealias LPCUWSTR = CPointer<WCHARVar>

typealias PCUWSTRVar = CPointerVarOf<PCUWSTR>
typealias PCUWSTR = CPointer<WCHARVar>

typealias PZZWSTRVar = CPointerVarOf<PZZWSTR>
typealias PZZWSTR = CPointer<WCHARVar>

typealias PCZZWSTRVar = CPointerVarOf<PCZZWSTR>
typealias PCZZWSTR = CPointer<WCHARVar>

typealias PUZZWSTRVar = CPointerVarOf<PUZZWSTR>
typealias PUZZWSTR = CPointer<WCHARVar>

typealias PCUZZWSTRVar = CPointerVarOf<PCUZZWSTR>
typealias PCUZZWSTR = CPointer<WCHARVar>

typealias PNZWCHVar = CPointerVarOf<PNZWCH>
typealias PNZWCH = CPointer<WCHARVar>

typealias PCNZWCHVar = CPointerVarOf<PCNZWCH>
typealias PCNZWCH = CPointer<WCHARVar>

typealias PUNZWCHVar = CPointerVarOf<PUNZWCH>
typealias PUNZWCH = CPointer<WCHARVar>

typealias PCUNZWCHVar = CPointerVarOf<PCUNZWCH>
typealias PCUNZWCH = CPointer<WCHARVar>

typealias PCHARVar = CPointerVarOf<PCHAR>
typealias PCHAR = CPointer<CHARVar>

typealias LPCHVar = CPointerVarOf<LPCH>
typealias LPCH = CPointer<CHARVar>

typealias PCHVar = CPointerVarOf<PCH>
typealias PCH = CPointer<CHARVar>

typealias LPCCHVar = CPointerVarOf<LPCCH>
typealias LPCCH = CPointer<CHARVar>

typealias PCCHVar = CPointerVarOf<PCCH>
typealias PCCH = CPointer<CHARVar>

typealias NPSTRVar = CPointerVarOf<NPSTR>
typealias NPSTR = CPointer<CHARVar>

typealias LPSTRVar = CPointerVarOf<LPSTR>
typealias LPSTR = CPointer<CHARVar>

typealias PSTRVar = CPointerVarOf<PSTR>
typealias PSTR = CPointer<CHARVar>

typealias PZPSTRVar = CPointerVarOf<PZPSTR>
typealias PZPSTR = CPointer<PSTRVar>

typealias PCZPSTRVar = CPointerVarOf<PCZPSTR>
typealias PCZPSTR = CPointer<PSTRVar>

typealias LPCSTRVar = CPointerVarOf<LPCSTR>
typealias LPCSTR = CPointer<CHARVar>

typealias PCSTRVar = CPointerVarOf<PCSTR>
typealias PCSTR = CPointer<CHARVar>

typealias PZPCSTRVar = CPointerVarOf<PZPCSTR>
typealias PZPCSTR = CPointer<PCSTRVar>

typealias PZZSTRVar = CPointerVarOf<PZZSTR>
typealias PZZSTR = CPointer<CHARVar>

typealias PCZZSTRVar = CPointerVarOf<PCZZSTR>
typealias PCZZSTR = CPointer<CHARVar>

typealias PNZCHVar = CPointerVarOf<PNZCH>
typealias PNZCH = CPointer<CHARVar>

typealias PCNZCHVar = CPointerVarOf<PCNZCH>
typealias PCNZCH = CPointer<CHARVar>

typealias TCHARVar = ShortVarOf<TCHAR>
typealias TCHAR = WCHAR

typealias PTCHARVar = CPointerVarOf<PTCHAR>
typealias PTCHAR = CPointer<WCHARVar>

typealias TBYTEVar = ShortVarOf<TBYTE>
typealias TBYTE = WCHAR

typealias PTBYTEVar = CPointerVarOf<PTBYTE>
typealias PTBYTE = CPointer<WCHARVar>

typealias LPTCHVar = CPointerVarOf<LPTCH>
typealias LPTCH = LPWSTR

typealias PTCHVar = CPointerVarOf<PTCH>
typealias PTCH = LPWSTR

typealias PTSTRVar = CPointerVarOf<PTSTR>
typealias PTSTR = LPWSTR

typealias LPTSTRVar = CPointerVarOf<LPTSTR>
typealias LPTSTR = LPWSTR

typealias PCTSTRVar = CPointerVarOf<PCTSTR>
typealias PCTSTR = LPCWSTR

typealias LPCTSTRVar = CPointerVarOf<LPCTSTR>
typealias LPCTSTR = LPCWSTR

typealias PUTSTRVar = CPointerVarOf<PUTSTR>
typealias PUTSTR = LPUWSTR

typealias LPUTSTRVar = CPointerVarOf<LPUTSTR>
typealias LPUTSTR = LPUWSTR

typealias PCUTSTRVar = CPointerVarOf<PCUTSTR>
typealias PCUTSTR = LPCUWSTR

typealias LPCUTSTRVar = CPointerVarOf<LPCUTSTR>
typealias LPCUTSTR = LPCUWSTR

typealias LPVar = CPointerVarOf<LP>
typealias LP = LPWSTR

typealias PZZTSTRVar = CPointerVarOf<PZZTSTR>
typealias PZZTSTR = PZZWSTR

typealias PCZZTSTRVar = CPointerVarOf<PCZZTSTR>
typealias PCZZTSTR = PCZZWSTR

typealias PUZZTSTRVar = CPointerVarOf<PUZZTSTR>
typealias PUZZTSTR = PUZZWSTR

typealias PCUZZTSTRVar = CPointerVarOf<PCUZZTSTR>
typealias PCUZZTSTR = PCUZZWSTR

typealias PZPTSTRVar = CPointerVarOf<PZPTSTR>
typealias PZPTSTR = PZPWSTR

typealias PNZTCHVar = CPointerVarOf<PNZTCH>
typealias PNZTCH = PNZWCH

typealias PCNZTCHVar = CPointerVarOf<PCNZTCH>
typealias PCNZTCH = PCNZWCH

typealias PUNZTCHVar = CPointerVarOf<PUNZTCH>
typealias PUNZTCH = PUNZWCH

typealias PCUNZTCHVar = CPointerVarOf<PCUNZTCH>
typealias PCUNZTCH = PCUNZWCH

typealias PSHORTVar = CPointerVarOf<PSHORT>
typealias PSHORT = CPointer<SHORTVar>

typealias PLONGVar = CPointerVarOf<PLONG>
typealias PLONG = CPointer<LONGVar>

typealias ULONG_PTRVar = LongVarOf<ULONG_PTR>
typealias ULONG_PTR = Long

typealias KAFFINITYVar = LongVarOf<KAFFINITY>
typealias KAFFINITY = ULONG_PTR

typealias WORDVar = ShortVarOf<WORD>
typealias WORD = Short

typealias GROUP_AFFINITY = _GROUP_AFFINITY

typealias PGROUP_AFFINITYVar = CPointerVarOf<PGROUP_AFFINITY>
typealias PGROUP_AFFINITY = CPointer<_GROUP_AFFINITY>

typealias HANDLEVar = CPointerVarOf<HANDLE>
typealias HANDLE = COpaquePointer

typealias PHANDLEVar = CPointerVarOf<PHANDLE>
typealias PHANDLE = CPointer<HANDLEVar>

typealias BYTEVar = ByteVarOf<BYTE>
typealias BYTE = Byte

typealias FCHARVar = ByteVarOf<FCHAR>
typealias FCHAR = BYTE

typealias FSHORTVar = ShortVarOf<FSHORT>
typealias FSHORT = WORD

typealias DWORDVar = IntVarOf<DWORD>
typealias DWORD = Int

typealias FLONGVar = IntVarOf<FLONG>
typealias FLONG = DWORD

typealias HRESULTVar = IntVarOf<HRESULT>
typealias HRESULT = LONG

typealias CCHARVar = ByteVarOf<CCHAR>
typealias CCHAR = Byte

typealias LCIDVar = IntVarOf<LCID>
typealias LCID = DWORD

typealias PDWORDVar = CPointerVarOf<PDWORD>
typealias PDWORD = CPointer<DWORDVar>

typealias PLCIDVar = CPointerVarOf<PLCID>
typealias PLCID = PDWORD

typealias LANGIDVar = ShortVarOf<LANGID>
typealias LANGID = WORD

typealias PCOMPARTMENT_IDVar = CPointerVarOf<PCOMPARTMENT_ID>
typealias PCOMPARTMENT_ID = CPointer<COMPARTMENT_IDVar>

typealias FLOAT128 = _FLOAT128

typealias PFLOAT128Var = CPointerVarOf<PFLOAT128>
typealias PFLOAT128 = CPointer<FLOAT128>

typealias LONGLONGVar = LongVarOf<LONGLONG>
typealias LONGLONG = Long

typealias ULONGLONGVar = LongVarOf<ULONGLONG>
typealias ULONGLONG = Long

typealias PLONGLONGVar = CPointerVarOf<PLONGLONG>
typealias PLONGLONG = CPointer<LONGLONGVar>

typealias PULONGLONGVar = CPointerVarOf<PULONGLONG>
typealias PULONGLONG = CPointer<ULONGLONGVar>

typealias USNVar = LongVarOf<USN>
typealias USN = LONGLONG

typealias LARGE_INTEGER = _LARGE_INTEGER

typealias PLARGE_INTEGERVar = CPointerVarOf<PLARGE_INTEGER>
typealias PLARGE_INTEGER = CPointer<LARGE_INTEGER>

typealias ULARGE_INTEGER = _ULARGE_INTEGER

typealias PULARGE_INTEGERVar = CPointerVarOf<PULARGE_INTEGER>
typealias PULARGE_INTEGER = CPointer<ULARGE_INTEGER>

typealias LUID = _LUID

typealias PLUIDVar = CPointerVarOf<PLUID>
typealias PLUID = CPointer<_LUID>

typealias DWORDLONGVar = LongVarOf<DWORDLONG>
typealias DWORDLONG = ULONGLONG

typealias PDWORDLONGVar = CPointerVarOf<PDWORDLONG>
typealias PDWORDLONG = CPointer<DWORDLONGVar>

typealias BOOLEANVar = ByteVarOf<BOOLEAN>
typealias BOOLEAN = BYTE

typealias PBOOLEANVar = CPointerVarOf<PBOOLEAN>
typealias PBOOLEAN = CPointer<BOOLEANVar>

typealias LIST_ENTRY = _LIST_ENTRY

typealias PLIST_ENTRYVar = CPointerVarOf<PLIST_ENTRY>
typealias PLIST_ENTRY = CPointer<_LIST_ENTRY>

typealias PRLIST_ENTRYVar = CPointerVarOf<PRLIST_ENTRY>
typealias PRLIST_ENTRY = CPointer<_LIST_ENTRY>

typealias SINGLE_LIST_ENTRY = _SINGLE_LIST_ENTRY

typealias PSINGLE_LIST_ENTRYVar = CPointerVarOf<PSINGLE_LIST_ENTRY>
typealias PSINGLE_LIST_ENTRY = CPointer<_SINGLE_LIST_ENTRY>

typealias PLIST_ENTRY32Var = CPointerVarOf<PLIST_ENTRY32>
typealias PLIST_ENTRY32 = CPointer<LIST_ENTRY32>

typealias PLIST_ENTRY64Var = CPointerVarOf<PLIST_ENTRY64>
typealias PLIST_ENTRY64 = CPointer<LIST_ENTRY64>

typealias GUID = _GUID

typealias OBJECTID = _OBJECTID

typealias DWORD64Var = LongVarOf<DWORD64>
typealias DWORD64 = Long

typealias M128A = _M128A

typealias EXCEPTION_ROUTINE = CFunction<(CPointer<_EXCEPTION_RECORD>?, PVOID?, CPointer<_CONTEXT>?, PVOID?) -> Int>

typealias PEXCEPTION_ROUTINEVar = CPointerVarOf<PEXCEPTION_ROUTINE>
typealias PEXCEPTION_ROUTINE = CPointer<EXCEPTION_ROUTINE>

typealias KSPIN_LOCKVar = LongVarOf<KSPIN_LOCK>
typealias KSPIN_LOCK = ULONG_PTR

typealias PKSPIN_LOCKVar = CPointerVarOf<PKSPIN_LOCK>
typealias PKSPIN_LOCK = CPointer<KSPIN_LOCKVar>

typealias PM128AVar = CPointerVarOf<PM128A>
typealias PM128A = CPointer<_M128A>

typealias XSAVE_FORMAT = _XSAVE_FORMAT

typealias PXSAVE_FORMATVar = CPointerVarOf<PXSAVE_FORMAT>
typealias PXSAVE_FORMAT = CPointer<_XSAVE_FORMAT>

typealias XSAVE_AREA_HEADER = _XSAVE_AREA_HEADER

typealias PXSAVE_AREA_HEADERVar = CPointerVarOf<PXSAVE_AREA_HEADER>
typealias PXSAVE_AREA_HEADER = CPointer<_XSAVE_AREA_HEADER>

typealias XSAVE_AREA = _XSAVE_AREA

typealias PXSAVE_AREAVar = CPointerVarOf<PXSAVE_AREA>
typealias PXSAVE_AREA = CPointer<_XSAVE_AREA>

typealias XSTATE_CONTEXT = _XSTATE_CONTEXT

typealias PXSTATE_CONTEXTVar = CPointerVarOf<PXSTATE_CONTEXT>
typealias PXSTATE_CONTEXT = CPointer<_XSTATE_CONTEXT>

typealias SCOPE_TABLE_AMD64 = _SCOPE_TABLE_AMD64

typealias PSCOPE_TABLE_AMD64Var = CPointerVarOf<PSCOPE_TABLE_AMD64>
typealias PSCOPE_TABLE_AMD64 = CPointer<_SCOPE_TABLE_AMD64>

typealias LONG64Var = LongVarOf<LONG64>
typealias LONG64 = Long

typealias XMM_SAVE_AREA32 = _XMM_SAVE_AREA32

typealias PXMM_SAVE_AREA32Var = CPointerVarOf<PXMM_SAVE_AREA32>
typealias PXMM_SAVE_AREA32 = CPointer<_XMM_SAVE_AREA32>

typealias CONTEXT = _CONTEXT

typealias PCONTEXTVar = CPointerVarOf<PCONTEXT>
typealias PCONTEXT = CPointer<_CONTEXT>

typealias RUNTIME_FUNCTION = _RUNTIME_FUNCTION

typealias PRUNTIME_FUNCTIONVar = CPointerVarOf<PRUNTIME_FUNCTION>
typealias PRUNTIME_FUNCTION = CPointer<_RUNTIME_FUNCTION>

typealias PGET_RUNTIME_FUNCTION_CALLBACKVar = CPointerVarOf<PGET_RUNTIME_FUNCTION_CALLBACK>
typealias PGET_RUNTIME_FUNCTION_CALLBACK = CPointer<CFunction<(DWORD64, PVOID?) -> PRUNTIME_FUNCTION?>>

typealias POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACKVar = CPointerVarOf<POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK>
typealias POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = CPointer<CFunction<(HANDLE?, PVOID?, PDWORD?, CPointer<PRUNTIME_FUNCTIONVar>?) -> DWORD>>

typealias LDT_ENTRY = _LDT_ENTRY

typealias PLDT_ENTRYVar = CPointerVarOf<PLDT_ENTRY>
typealias PLDT_ENTRY = CPointer<_LDT_ENTRY>

typealias EXCEPTION_RECORD = _EXCEPTION_RECORD

typealias PEXCEPTION_RECORDVar = CPointerVarOf<PEXCEPTION_RECORD>
typealias PEXCEPTION_RECORD = CPointer<EXCEPTION_RECORD>

typealias EXCEPTION_RECORD32 = _EXCEPTION_RECORD32

typealias PEXCEPTION_RECORD32Var = CPointerVarOf<PEXCEPTION_RECORD32>
typealias PEXCEPTION_RECORD32 = CPointer<_EXCEPTION_RECORD32>

typealias EXCEPTION_RECORD64 = _EXCEPTION_RECORD64

typealias PEXCEPTION_RECORD64Var = CPointerVarOf<PEXCEPTION_RECORD64>
typealias PEXCEPTION_RECORD64 = CPointer<_EXCEPTION_RECORD64>

typealias EXCEPTION_POINTERS = _EXCEPTION_POINTERS

typealias PEXCEPTION_POINTERSVar = CPointerVarOf<PEXCEPTION_POINTERS>
typealias PEXCEPTION_POINTERS = CPointer<_EXCEPTION_POINTERS>

typealias ULONG64Var = LongVarOf<ULONG64>
typealias ULONG64 = Long

typealias UNWIND_HISTORY_TABLE_ENTRY = _UNWIND_HISTORY_TABLE_ENTRY

typealias PUNWIND_HISTORY_TABLE_ENTRYVar = CPointerVarOf<PUNWIND_HISTORY_TABLE_ENTRY>
typealias PUNWIND_HISTORY_TABLE_ENTRY = CPointer<_UNWIND_HISTORY_TABLE_ENTRY>

typealias ULONGVar = IntVarOf<ULONG>
typealias ULONG = Int

typealias UCHARVar = ByteVarOf<UCHAR>
typealias UCHAR = Byte

typealias UNWIND_HISTORY_TABLE = _UNWIND_HISTORY_TABLE

typealias PUNWIND_HISTORY_TABLEVar = CPointerVarOf<PUNWIND_HISTORY_TABLE>
typealias PUNWIND_HISTORY_TABLE = CPointer<_UNWIND_HISTORY_TABLE>

typealias DISPATCHER_CONTEXT = _DISPATCHER_CONTEXT

typealias PDISPATCHER_CONTEXTVar = CPointerVarOf<PDISPATCHER_CONTEXT>
typealias PDISPATCHER_CONTEXT = CPointer<_DISPATCHER_CONTEXT>

typealias PULONG64Var = CPointerVarOf<PULONG64>
typealias PULONG64 = CPointer<LongVar>

typealias KNONVOLATILE_CONTEXT_POINTERS = _KNONVOLATILE_CONTEXT_POINTERS

typealias PKNONVOLATILE_CONTEXT_POINTERSVar = CPointerVarOf<PKNONVOLATILE_CONTEXT_POINTERS>
typealias PKNONVOLATILE_CONTEXT_POINTERS = CPointer<_KNONVOLATILE_CONTEXT_POINTERS>

typealias PACCESS_TOKENVar = CPointerVarOf<PACCESS_TOKEN>
typealias PACCESS_TOKEN = PVOID

typealias PSECURITY_DESCRIPTORVar = CPointerVarOf<PSECURITY_DESCRIPTOR>
typealias PSECURITY_DESCRIPTOR = PVOID

typealias PSIDVar = CPointerVarOf<PSID>
typealias PSID = PVOID

typealias PCLAIMS_BLOBVar = CPointerVarOf<PCLAIMS_BLOB>
typealias PCLAIMS_BLOB = PVOID

typealias ACCESS_MASKVar = IntVarOf<ACCESS_MASK>
typealias ACCESS_MASK = DWORD

typealias PACCESS_MASKVar = CPointerVarOf<PACCESS_MASK>
typealias PACCESS_MASK = CPointer<ACCESS_MASKVar>

typealias GENERIC_MAPPING = _GENERIC_MAPPING

typealias PGENERIC_MAPPINGVar = CPointerVarOf<PGENERIC_MAPPING>
typealias PGENERIC_MAPPING = CPointer<GENERIC_MAPPING>

typealias LUID_AND_ATTRIBUTES = _LUID_AND_ATTRIBUTES

typealias PLUID_AND_ATTRIBUTESVar = CPointerVarOf<PLUID_AND_ATTRIBUTES>
typealias PLUID_AND_ATTRIBUTES = CPointer<_LUID_AND_ATTRIBUTES>

typealias LUID_AND_ATTRIBUTES_ARRAYVar = CPointerVarOf<LUID_AND_ATTRIBUTES_ARRAY>
typealias LUID_AND_ATTRIBUTES_ARRAY = CArrayPointer<LUID_AND_ATTRIBUTES>

typealias PLUID_AND_ATTRIBUTES_ARRAYVar = CPointerVarOf<PLUID_AND_ATTRIBUTES_ARRAY>
typealias PLUID_AND_ATTRIBUTES_ARRAY = LUID_AND_ATTRIBUTES_ARRAY

typealias SID_IDENTIFIER_AUTHORITY = _SID_IDENTIFIER_AUTHORITY

typealias PSID_IDENTIFIER_AUTHORITYVar = CPointerVarOf<PSID_IDENTIFIER_AUTHORITY>
typealias PSID_IDENTIFIER_AUTHORITY = CPointer<_SID_IDENTIFIER_AUTHORITY>

typealias SID = _SID

typealias PISIDVar = CPointerVarOf<PISID>
typealias PISID = CPointer<_SID>

typealias SID_NAME_USEVar = IntVarOf<SID_NAME_USE>
typealias SID_NAME_USE = _SID_NAME_USE

typealias PSID_NAME_USEVar = CPointerVarOf<PSID_NAME_USE>
typealias PSID_NAME_USE = CPointer<_SID_NAME_USEVar>

typealias SID_AND_ATTRIBUTES = _SID_AND_ATTRIBUTES

typealias PSID_AND_ATTRIBUTESVar = CPointerVarOf<PSID_AND_ATTRIBUTES>
typealias PSID_AND_ATTRIBUTES = CPointer<_SID_AND_ATTRIBUTES>

typealias SID_AND_ATTRIBUTES_ARRAYVar = CPointerVarOf<SID_AND_ATTRIBUTES_ARRAY>
typealias SID_AND_ATTRIBUTES_ARRAY = CArrayPointer<SID_AND_ATTRIBUTES>

typealias PSID_AND_ATTRIBUTES_ARRAYVar = CPointerVarOf<PSID_AND_ATTRIBUTES_ARRAY>
typealias PSID_AND_ATTRIBUTES_ARRAY = SID_AND_ATTRIBUTES_ARRAY

typealias SID_HASH_ENTRYVar = LongVarOf<SID_HASH_ENTRY>
typealias SID_HASH_ENTRY = ULONG_PTR

typealias PSID_HASH_ENTRYVar = CPointerVarOf<PSID_HASH_ENTRY>
typealias PSID_HASH_ENTRY = CPointer<ULONG_PTRVar>

typealias SID_AND_ATTRIBUTES_HASH = _SID_AND_ATTRIBUTES_HASH

typealias PSID_AND_ATTRIBUTES_HASHVar = CPointerVarOf<PSID_AND_ATTRIBUTES_HASH>
typealias PSID_AND_ATTRIBUTES_HASH = CPointer<_SID_AND_ATTRIBUTES_HASH>

typealias ACL = _ACL

typealias PACLVar = CPointerVarOf<PACL>
typealias PACL = CPointer<ACL>

typealias ACE_HEADER = _ACE_HEADER

typealias PACE_HEADERVar = CPointerVarOf<PACE_HEADER>
typealias PACE_HEADER = CPointer<ACE_HEADER>

typealias ACCESS_ALLOWED_ACE = _ACCESS_ALLOWED_ACE

typealias PACCESS_ALLOWED_ACEVar = CPointerVarOf<PACCESS_ALLOWED_ACE>
typealias PACCESS_ALLOWED_ACE = CPointer<ACCESS_ALLOWED_ACE>

typealias ACCESS_DENIED_ACE = _ACCESS_DENIED_ACE

typealias PACCESS_DENIED_ACEVar = CPointerVarOf<PACCESS_DENIED_ACE>
typealias PACCESS_DENIED_ACE = CPointer<ACCESS_DENIED_ACE>

typealias SYSTEM_AUDIT_ACE = _SYSTEM_AUDIT_ACE

typealias PSYSTEM_AUDIT_ACEVar = CPointerVarOf<PSYSTEM_AUDIT_ACE>
typealias PSYSTEM_AUDIT_ACE = CPointer<SYSTEM_AUDIT_ACE>

typealias SYSTEM_ALARM_ACE = _SYSTEM_ALARM_ACE

typealias PSYSTEM_ALARM_ACEVar = CPointerVarOf<PSYSTEM_ALARM_ACE>
typealias PSYSTEM_ALARM_ACE = CPointer<SYSTEM_ALARM_ACE>

typealias SYSTEM_RESOURCE_ATTRIBUTE_ACE = _SYSTEM_RESOURCE_ATTRIBUTE_ACE

typealias PSYSTEM_RESOURCE_ATTRIBUTE_ACEVar = CPointerVarOf<PSYSTEM_RESOURCE_ATTRIBUTE_ACE>
typealias PSYSTEM_RESOURCE_ATTRIBUTE_ACE = CPointer<_SYSTEM_RESOURCE_ATTRIBUTE_ACE>

typealias SYSTEM_SCOPED_POLICY_ID_ACE = _SYSTEM_SCOPED_POLICY_ID_ACE

typealias PSYSTEM_SCOPED_POLICY_ID_ACEVar = CPointerVarOf<PSYSTEM_SCOPED_POLICY_ID_ACE>
typealias PSYSTEM_SCOPED_POLICY_ID_ACE = CPointer<_SYSTEM_SCOPED_POLICY_ID_ACE>

typealias SYSTEM_MANDATORY_LABEL_ACE = _SYSTEM_MANDATORY_LABEL_ACE

typealias PSYSTEM_MANDATORY_LABEL_ACEVar = CPointerVarOf<PSYSTEM_MANDATORY_LABEL_ACE>
typealias PSYSTEM_MANDATORY_LABEL_ACE = CPointer<_SYSTEM_MANDATORY_LABEL_ACE>

typealias ACCESS_ALLOWED_OBJECT_ACE = _ACCESS_ALLOWED_OBJECT_ACE

typealias PACCESS_ALLOWED_OBJECT_ACEVar = CPointerVarOf<PACCESS_ALLOWED_OBJECT_ACE>
typealias PACCESS_ALLOWED_OBJECT_ACE = CPointer<_ACCESS_ALLOWED_OBJECT_ACE>

typealias ACCESS_DENIED_OBJECT_ACE = _ACCESS_DENIED_OBJECT_ACE

typealias PACCESS_DENIED_OBJECT_ACEVar = CPointerVarOf<PACCESS_DENIED_OBJECT_ACE>
typealias PACCESS_DENIED_OBJECT_ACE = CPointer<_ACCESS_DENIED_OBJECT_ACE>

typealias SYSTEM_AUDIT_OBJECT_ACE = _SYSTEM_AUDIT_OBJECT_ACE

typealias PSYSTEM_AUDIT_OBJECT_ACEVar = CPointerVarOf<PSYSTEM_AUDIT_OBJECT_ACE>
typealias PSYSTEM_AUDIT_OBJECT_ACE = CPointer<_SYSTEM_AUDIT_OBJECT_ACE>

typealias SYSTEM_ALARM_OBJECT_ACE = _SYSTEM_ALARM_OBJECT_ACE

typealias PSYSTEM_ALARM_OBJECT_ACEVar = CPointerVarOf<PSYSTEM_ALARM_OBJECT_ACE>
typealias PSYSTEM_ALARM_OBJECT_ACE = CPointer<_SYSTEM_ALARM_OBJECT_ACE>

typealias ACCESS_ALLOWED_CALLBACK_ACE = _ACCESS_ALLOWED_CALLBACK_ACE

typealias PACCESS_ALLOWED_CALLBACK_ACEVar = CPointerVarOf<PACCESS_ALLOWED_CALLBACK_ACE>
typealias PACCESS_ALLOWED_CALLBACK_ACE = CPointer<_ACCESS_ALLOWED_CALLBACK_ACE>

typealias ACCESS_DENIED_CALLBACK_ACE = _ACCESS_DENIED_CALLBACK_ACE

typealias PACCESS_DENIED_CALLBACK_ACEVar = CPointerVarOf<PACCESS_DENIED_CALLBACK_ACE>
typealias PACCESS_DENIED_CALLBACK_ACE = CPointer<_ACCESS_DENIED_CALLBACK_ACE>

typealias SYSTEM_AUDIT_CALLBACK_ACE = _SYSTEM_AUDIT_CALLBACK_ACE

typealias PSYSTEM_AUDIT_CALLBACK_ACEVar = CPointerVarOf<PSYSTEM_AUDIT_CALLBACK_ACE>
typealias PSYSTEM_AUDIT_CALLBACK_ACE = CPointer<_SYSTEM_AUDIT_CALLBACK_ACE>

typealias SYSTEM_ALARM_CALLBACK_ACE = _SYSTEM_ALARM_CALLBACK_ACE

typealias PSYSTEM_ALARM_CALLBACK_ACEVar = CPointerVarOf<PSYSTEM_ALARM_CALLBACK_ACE>
typealias PSYSTEM_ALARM_CALLBACK_ACE = CPointer<_SYSTEM_ALARM_CALLBACK_ACE>

typealias ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE

typealias PACCESS_ALLOWED_CALLBACK_OBJECT_ACEVar = CPointerVarOf<PACCESS_ALLOWED_CALLBACK_OBJECT_ACE>
typealias PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = CPointer<_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE>

typealias ACCESS_DENIED_CALLBACK_OBJECT_ACE = _ACCESS_DENIED_CALLBACK_OBJECT_ACE

typealias PACCESS_DENIED_CALLBACK_OBJECT_ACEVar = CPointerVarOf<PACCESS_DENIED_CALLBACK_OBJECT_ACE>
typealias PACCESS_DENIED_CALLBACK_OBJECT_ACE = CPointer<_ACCESS_DENIED_CALLBACK_OBJECT_ACE>

typealias SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE

typealias PSYSTEM_AUDIT_CALLBACK_OBJECT_ACEVar = CPointerVarOf<PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE>
typealias PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = CPointer<_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE>

typealias SYSTEM_ALARM_CALLBACK_OBJECT_ACE = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE

typealias PSYSTEM_ALARM_CALLBACK_OBJECT_ACEVar = CPointerVarOf<PSYSTEM_ALARM_CALLBACK_OBJECT_ACE>
typealias PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = CPointer<_SYSTEM_ALARM_CALLBACK_OBJECT_ACE>

typealias ACL_INFORMATION_CLASSVar = IntVarOf<ACL_INFORMATION_CLASS>
typealias ACL_INFORMATION_CLASS = _ACL_INFORMATION_CLASS

typealias ACL_REVISION_INFORMATION = _ACL_REVISION_INFORMATION

typealias PACL_REVISION_INFORMATIONVar = CPointerVarOf<PACL_REVISION_INFORMATION>
typealias PACL_REVISION_INFORMATION = CPointer<ACL_REVISION_INFORMATION>

typealias ACL_SIZE_INFORMATION = _ACL_SIZE_INFORMATION

typealias PACL_SIZE_INFORMATIONVar = CPointerVarOf<PACL_SIZE_INFORMATION>
typealias PACL_SIZE_INFORMATION = CPointer<ACL_SIZE_INFORMATION>

typealias SECURITY_DESCRIPTOR_CONTROLVar = ShortVarOf<SECURITY_DESCRIPTOR_CONTROL>
typealias SECURITY_DESCRIPTOR_CONTROL = WORD

typealias PSECURITY_DESCRIPTOR_CONTROLVar = CPointerVarOf<PSECURITY_DESCRIPTOR_CONTROL>
typealias PSECURITY_DESCRIPTOR_CONTROL = CPointer<WORDVar>

typealias SECURITY_DESCRIPTOR_RELATIVE = _SECURITY_DESCRIPTOR_RELATIVE

typealias PISECURITY_DESCRIPTOR_RELATIVEVar = CPointerVarOf<PISECURITY_DESCRIPTOR_RELATIVE>
typealias PISECURITY_DESCRIPTOR_RELATIVE = CPointer<_SECURITY_DESCRIPTOR_RELATIVE>

typealias SECURITY_DESCRIPTOR = _SECURITY_DESCRIPTOR

typealias PISECURITY_DESCRIPTORVar = CPointerVarOf<PISECURITY_DESCRIPTOR>
typealias PISECURITY_DESCRIPTOR = CPointer<_SECURITY_DESCRIPTOR>

typealias OBJECT_TYPE_LIST = _OBJECT_TYPE_LIST

typealias POBJECT_TYPE_LISTVar = CPointerVarOf<POBJECT_TYPE_LIST>
typealias POBJECT_TYPE_LIST = CPointer<_OBJECT_TYPE_LIST>

typealias AUDIT_EVENT_TYPEVar = _AUDIT_EVENT_TYPE.Var
typealias AUDIT_EVENT_TYPE = _AUDIT_EVENT_TYPE

typealias PAUDIT_EVENT_TYPEVar = CPointerVarOf<PAUDIT_EVENT_TYPE>
typealias PAUDIT_EVENT_TYPE = CPointer<_AUDIT_EVENT_TYPE.Var>

typealias PRIVILEGE_SET = _PRIVILEGE_SET

typealias PPRIVILEGE_SETVar = CPointerVarOf<PPRIVILEGE_SET>
typealias PPRIVILEGE_SET = CPointer<_PRIVILEGE_SET>

typealias ACCESS_REASON_TYPEVar = IntVarOf<ACCESS_REASON_TYPE>
typealias ACCESS_REASON_TYPE = _ACCESS_REASON_TYPE

typealias ACCESS_REASONVar = IntVarOf<ACCESS_REASON>
typealias ACCESS_REASON = DWORD

typealias ACCESS_REASONS = _ACCESS_REASONS

typealias PACCESS_REASONSVar = CPointerVarOf<PACCESS_REASONS>
typealias PACCESS_REASONS = CPointer<_ACCESS_REASONS>

typealias SE_SECURITY_DESCRIPTOR = _SE_SECURITY_DESCRIPTOR

typealias PSE_SECURITY_DESCRIPTORVar = CPointerVarOf<PSE_SECURITY_DESCRIPTOR>
typealias PSE_SECURITY_DESCRIPTOR = CPointer<_SE_SECURITY_DESCRIPTOR>

typealias SE_ACCESS_REQUEST = _SE_ACCESS_REQUEST

typealias PSE_ACCESS_REQUESTVar = CPointerVarOf<PSE_ACCESS_REQUEST>
typealias PSE_ACCESS_REQUEST = CPointer<_SE_ACCESS_REQUEST>

typealias SE_ACCESS_REPLY = _SE_ACCESS_REPLY

typealias PSE_ACCESS_REPLYVar = CPointerVarOf<PSE_ACCESS_REPLY>
typealias PSE_ACCESS_REPLY = CPointer<_SE_ACCESS_REPLY>

typealias SECURITY_IMPERSONATION_LEVELVar = _SECURITY_IMPERSONATION_LEVEL.Var
typealias SECURITY_IMPERSONATION_LEVEL = _SECURITY_IMPERSONATION_LEVEL

typealias PSECURITY_IMPERSONATION_LEVELVar = CPointerVarOf<PSECURITY_IMPERSONATION_LEVEL>
typealias PSECURITY_IMPERSONATION_LEVEL = CPointer<_SECURITY_IMPERSONATION_LEVEL.Var>

typealias TOKEN_TYPEVar = IntVarOf<TOKEN_TYPE>
typealias TOKEN_TYPE = _TOKEN_TYPE

typealias PTOKEN_TYPEVar = CPointerVarOf<PTOKEN_TYPE>
typealias PTOKEN_TYPE = CPointer<TOKEN_TYPEVar>

typealias TOKEN_ELEVATION_TYPEVar = IntVarOf<TOKEN_ELEVATION_TYPE>
typealias TOKEN_ELEVATION_TYPE = _TOKEN_ELEVATION_TYPE

typealias PTOKEN_ELEVATION_TYPEVar = CPointerVarOf<PTOKEN_ELEVATION_TYPE>
typealias PTOKEN_ELEVATION_TYPE = CPointer<_TOKEN_ELEVATION_TYPEVar>

typealias TOKEN_INFORMATION_CLASSVar = IntVarOf<TOKEN_INFORMATION_CLASS>
typealias TOKEN_INFORMATION_CLASS = _TOKEN_INFORMATION_CLASS

typealias PTOKEN_INFORMATION_CLASSVar = CPointerVarOf<PTOKEN_INFORMATION_CLASS>
typealias PTOKEN_INFORMATION_CLASS = CPointer<_TOKEN_INFORMATION_CLASSVar>

typealias TOKEN_USER = _TOKEN_USER

typealias PTOKEN_USERVar = CPointerVarOf<PTOKEN_USER>
typealias PTOKEN_USER = CPointer<_TOKEN_USER>

typealias TOKEN_GROUPS = _TOKEN_GROUPS

typealias PTOKEN_GROUPSVar = CPointerVarOf<PTOKEN_GROUPS>
typealias PTOKEN_GROUPS = CPointer<_TOKEN_GROUPS>

typealias TOKEN_PRIVILEGES = _TOKEN_PRIVILEGES

typealias PTOKEN_PRIVILEGESVar = CPointerVarOf<PTOKEN_PRIVILEGES>
typealias PTOKEN_PRIVILEGES = CPointer<_TOKEN_PRIVILEGES>

typealias TOKEN_OWNER = _TOKEN_OWNER

typealias PTOKEN_OWNERVar = CPointerVarOf<PTOKEN_OWNER>
typealias PTOKEN_OWNER = CPointer<_TOKEN_OWNER>

typealias TOKEN_PRIMARY_GROUP = _TOKEN_PRIMARY_GROUP

typealias PTOKEN_PRIMARY_GROUPVar = CPointerVarOf<PTOKEN_PRIMARY_GROUP>
typealias PTOKEN_PRIMARY_GROUP = CPointer<_TOKEN_PRIMARY_GROUP>

typealias TOKEN_DEFAULT_DACL = _TOKEN_DEFAULT_DACL

typealias PTOKEN_DEFAULT_DACLVar = CPointerVarOf<PTOKEN_DEFAULT_DACL>
typealias PTOKEN_DEFAULT_DACL = CPointer<_TOKEN_DEFAULT_DACL>

typealias TOKEN_USER_CLAIMS = _TOKEN_USER_CLAIMS

typealias PTOKEN_USER_CLAIMSVar = CPointerVarOf<PTOKEN_USER_CLAIMS>
typealias PTOKEN_USER_CLAIMS = CPointer<_TOKEN_USER_CLAIMS>

typealias TOKEN_DEVICE_CLAIMS = _TOKEN_DEVICE_CLAIMS

typealias PTOKEN_DEVICE_CLAIMSVar = CPointerVarOf<PTOKEN_DEVICE_CLAIMS>
typealias PTOKEN_DEVICE_CLAIMS = CPointer<_TOKEN_DEVICE_CLAIMS>

typealias TOKEN_GROUPS_AND_PRIVILEGES = _TOKEN_GROUPS_AND_PRIVILEGES

typealias PTOKEN_GROUPS_AND_PRIVILEGESVar = CPointerVarOf<PTOKEN_GROUPS_AND_PRIVILEGES>
typealias PTOKEN_GROUPS_AND_PRIVILEGES = CPointer<_TOKEN_GROUPS_AND_PRIVILEGES>

typealias TOKEN_LINKED_TOKEN = _TOKEN_LINKED_TOKEN

typealias PTOKEN_LINKED_TOKENVar = CPointerVarOf<PTOKEN_LINKED_TOKEN>
typealias PTOKEN_LINKED_TOKEN = CPointer<_TOKEN_LINKED_TOKEN>

typealias TOKEN_ELEVATION = _TOKEN_ELEVATION

typealias PTOKEN_ELEVATIONVar = CPointerVarOf<PTOKEN_ELEVATION>
typealias PTOKEN_ELEVATION = CPointer<_TOKEN_ELEVATION>

typealias TOKEN_MANDATORY_LABEL = _TOKEN_MANDATORY_LABEL

typealias PTOKEN_MANDATORY_LABELVar = CPointerVarOf<PTOKEN_MANDATORY_LABEL>
typealias PTOKEN_MANDATORY_LABEL = CPointer<_TOKEN_MANDATORY_LABEL>

typealias TOKEN_MANDATORY_POLICY = _TOKEN_MANDATORY_POLICY

typealias PTOKEN_MANDATORY_POLICYVar = CPointerVarOf<PTOKEN_MANDATORY_POLICY>
typealias PTOKEN_MANDATORY_POLICY = CPointer<_TOKEN_MANDATORY_POLICY>

typealias TOKEN_ACCESS_INFORMATION = _TOKEN_ACCESS_INFORMATION

typealias PTOKEN_ACCESS_INFORMATIONVar = CPointerVarOf<PTOKEN_ACCESS_INFORMATION>
typealias PTOKEN_ACCESS_INFORMATION = CPointer<_TOKEN_ACCESS_INFORMATION>

typealias TOKEN_AUDIT_POLICY = _TOKEN_AUDIT_POLICY

typealias PTOKEN_AUDIT_POLICYVar = CPointerVarOf<PTOKEN_AUDIT_POLICY>
typealias PTOKEN_AUDIT_POLICY = CPointer<_TOKEN_AUDIT_POLICY>

typealias TOKEN_SOURCE = _TOKEN_SOURCE

typealias PTOKEN_SOURCEVar = CPointerVarOf<PTOKEN_SOURCE>
typealias PTOKEN_SOURCE = CPointer<_TOKEN_SOURCE>

typealias TOKEN_STATISTICS = _TOKEN_STATISTICS

typealias PTOKEN_STATISTICSVar = CPointerVarOf<PTOKEN_STATISTICS>
typealias PTOKEN_STATISTICS = CPointer<_TOKEN_STATISTICS>

typealias TOKEN_CONTROL = _TOKEN_CONTROL

typealias PTOKEN_CONTROLVar = CPointerVarOf<PTOKEN_CONTROL>
typealias PTOKEN_CONTROL = CPointer<_TOKEN_CONTROL>

typealias TOKEN_ORIGIN = _TOKEN_ORIGIN

typealias PTOKEN_ORIGINVar = CPointerVarOf<PTOKEN_ORIGIN>
typealias PTOKEN_ORIGIN = CPointer<_TOKEN_ORIGIN>

typealias MANDATORY_LEVELVar = IntVarOf<MANDATORY_LEVEL>
typealias MANDATORY_LEVEL = _MANDATORY_LEVEL

typealias PMANDATORY_LEVELVar = CPointerVarOf<PMANDATORY_LEVEL>
typealias PMANDATORY_LEVEL = CPointer<_MANDATORY_LEVELVar>

typealias TOKEN_APPCONTAINER_INFORMATION = _TOKEN_APPCONTAINER_INFORMATION

typealias PTOKEN_APPCONTAINER_INFORMATIONVar = CPointerVarOf<PTOKEN_APPCONTAINER_INFORMATION>
typealias PTOKEN_APPCONTAINER_INFORMATION = CPointer<_TOKEN_APPCONTAINER_INFORMATION>

typealias CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE

typealias PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUEVar = CPointerVarOf<PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE>
typealias PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = CPointer<_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE>

typealias CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE

typealias PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUEVar = CPointerVarOf<PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE>
typealias PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = CPointer<_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE>

typealias PLONG64Var = CPointerVarOf<PLONG64>
typealias PLONG64 = CPointer<LongVar>

typealias PDWORD64Var = CPointerVarOf<PDWORD64>
typealias PDWORD64 = CPointer<LongVar>

typealias CLAIM_SECURITY_ATTRIBUTE_V1 = _CLAIM_SECURITY_ATTRIBUTE_V1

typealias PCLAIM_SECURITY_ATTRIBUTE_V1Var = CPointerVarOf<PCLAIM_SECURITY_ATTRIBUTE_V1>
typealias PCLAIM_SECURITY_ATTRIBUTE_V1 = CPointer<_CLAIM_SECURITY_ATTRIBUTE_V1>

typealias CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1

typealias PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1Var = CPointerVarOf<PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1>
typealias PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = CPointer<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1>

typealias CLAIM_SECURITY_ATTRIBUTES_INFORMATION = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION

typealias PCLAIM_SECURITY_ATTRIBUTES_INFORMATIONVar = CPointerVarOf<PCLAIM_SECURITY_ATTRIBUTES_INFORMATION>
typealias PCLAIM_SECURITY_ATTRIBUTES_INFORMATION = CPointer<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION>

typealias SECURITY_CONTEXT_TRACKING_MODEVar = ByteVarOf<SECURITY_CONTEXT_TRACKING_MODE>
typealias SECURITY_CONTEXT_TRACKING_MODE = BOOLEAN

typealias PSECURITY_CONTEXT_TRACKING_MODEVar = CPointerVarOf<PSECURITY_CONTEXT_TRACKING_MODE>
typealias PSECURITY_CONTEXT_TRACKING_MODE = CPointer<BOOLEANVar>

typealias SECURITY_QUALITY_OF_SERVICE = _SECURITY_QUALITY_OF_SERVICE

typealias PSECURITY_QUALITY_OF_SERVICEVar = CPointerVarOf<PSECURITY_QUALITY_OF_SERVICE>
typealias PSECURITY_QUALITY_OF_SERVICE = CPointer<_SECURITY_QUALITY_OF_SERVICE>

typealias SE_IMPERSONATION_STATE = _SE_IMPERSONATION_STATE

typealias PSE_IMPERSONATION_STATEVar = CPointerVarOf<PSE_IMPERSONATION_STATE>
typealias PSE_IMPERSONATION_STATE = CPointer<_SE_IMPERSONATION_STATE>

typealias SECURITY_INFORMATIONVar = IntVarOf<SECURITY_INFORMATION>
typealias SECURITY_INFORMATION = DWORD

typealias PSECURITY_INFORMATIONVar = CPointerVarOf<PSECURITY_INFORMATION>
typealias PSECURITY_INFORMATION = CPointer<DWORDVar>

typealias SE_LEARNING_MODE_DATA_TYPEVar = IntVarOf<SE_LEARNING_MODE_DATA_TYPE>
typealias SE_LEARNING_MODE_DATA_TYPE = _SE_LEARNING_MODE_DATA_TYPE

typealias SECURITY_CAPABILITIES = _SECURITY_CAPABILITIES

typealias PSECURITY_CAPABILITIESVar = CPointerVarOf<PSECURITY_CAPABILITIES>
typealias PSECURITY_CAPABILITIES = CPointer<_SECURITY_CAPABILITIES>

typealias LPSECURITY_CAPABILITIESVar = CPointerVarOf<LPSECURITY_CAPABILITIES>
typealias LPSECURITY_CAPABILITIES = CPointer<_SECURITY_CAPABILITIES>

typealias JOB_SET_ARRAY = _JOB_SET_ARRAY

typealias PJOB_SET_ARRAYVar = CPointerVarOf<PJOB_SET_ARRAY>
typealias PJOB_SET_ARRAY = CPointer<_JOB_SET_ARRAY>

typealias EXCEPTION_REGISTRATION_RECORD = _EXCEPTION_REGISTRATION_RECORD

typealias PEXCEPTION_REGISTRATION_RECORDVar = CPointerVarOf<PEXCEPTION_REGISTRATION_RECORD>
typealias PEXCEPTION_REGISTRATION_RECORD = CPointer<EXCEPTION_REGISTRATION_RECORD>

typealias EXCEPTION_REGISTRATION = EXCEPTION_REGISTRATION_RECORD

typealias PEXCEPTION_REGISTRATIONVar = CPointerVarOf<PEXCEPTION_REGISTRATION>
typealias PEXCEPTION_REGISTRATION = PEXCEPTION_REGISTRATION_RECORD

typealias NT_TIB = _NT_TIB

typealias PNT_TIBVar = CPointerVarOf<PNT_TIB>
typealias PNT_TIB = CPointer<NT_TIB>

typealias NT_TIB32 = _NT_TIB32

typealias PNT_TIB32Var = CPointerVarOf<PNT_TIB32>
typealias PNT_TIB32 = CPointer<_NT_TIB32>

typealias NT_TIB64 = _NT_TIB64

typealias PNT_TIB64Var = CPointerVarOf<PNT_TIB64>
typealias PNT_TIB64 = CPointer<_NT_TIB64>

typealias UMS_CREATE_THREAD_ATTRIBUTES = _UMS_CREATE_THREAD_ATTRIBUTES

typealias PUMS_CREATE_THREAD_ATTRIBUTESVar = CPointerVarOf<PUMS_CREATE_THREAD_ATTRIBUTES>
typealias PUMS_CREATE_THREAD_ATTRIBUTES = CPointer<_UMS_CREATE_THREAD_ATTRIBUTES>

typealias SIZE_TVar = LongVarOf<SIZE_T>
typealias SIZE_T = ULONG_PTR

typealias QUOTA_LIMITS = _QUOTA_LIMITS

typealias PQUOTA_LIMITSVar = CPointerVarOf<PQUOTA_LIMITS>
typealias PQUOTA_LIMITS = CPointer<_QUOTA_LIMITS>

typealias RATE_QUOTA_LIMIT = _RATE_QUOTA_LIMIT

typealias PRATE_QUOTA_LIMITVar = CPointerVarOf<PRATE_QUOTA_LIMIT>
typealias PRATE_QUOTA_LIMIT = CPointer<_RATE_QUOTA_LIMIT>

typealias QUOTA_LIMITS_EX = _QUOTA_LIMITS_EX

typealias PQUOTA_LIMITS_EXVar = CPointerVarOf<PQUOTA_LIMITS_EX>
typealias PQUOTA_LIMITS_EX = CPointer<_QUOTA_LIMITS_EX>

typealias IO_COUNTERS = _IO_COUNTERS

typealias PIO_COUNTERSVar = CPointerVarOf<PIO_COUNTERS>
typealias PIO_COUNTERS = CPointer<IO_COUNTERS>

typealias HARDWARE_COUNTER_TYPEVar = _HARDWARE_COUNTER_TYPE.Var
typealias HARDWARE_COUNTER_TYPE = _HARDWARE_COUNTER_TYPE

typealias PHARDWARE_COUNTER_TYPEVar = CPointerVarOf<PHARDWARE_COUNTER_TYPE>
typealias PHARDWARE_COUNTER_TYPE = CPointer<_HARDWARE_COUNTER_TYPE.Var>

typealias PROCESS_MITIGATION_POLICYVar = _PROCESS_MITIGATION_POLICY.Var
typealias PROCESS_MITIGATION_POLICY = _PROCESS_MITIGATION_POLICY

typealias PPROCESS_MITIGATION_POLICYVar = CPointerVarOf<PPROCESS_MITIGATION_POLICY>
typealias PPROCESS_MITIGATION_POLICY = CPointer<_PROCESS_MITIGATION_POLICY.Var>

typealias PROCESS_MITIGATION_ASLR_POLICY = _PROCESS_MITIGATION_ASLR_POLICY

typealias PPROCESS_MITIGATION_ASLR_POLICYVar = CPointerVarOf<PPROCESS_MITIGATION_ASLR_POLICY>
typealias PPROCESS_MITIGATION_ASLR_POLICY = CPointer<_PROCESS_MITIGATION_ASLR_POLICY>

typealias PROCESS_MITIGATION_DEP_POLICY = _PROCESS_MITIGATION_DEP_POLICY

typealias PPROCESS_MITIGATION_DEP_POLICYVar = CPointerVarOf<PPROCESS_MITIGATION_DEP_POLICY>
typealias PPROCESS_MITIGATION_DEP_POLICY = CPointer<_PROCESS_MITIGATION_DEP_POLICY>

typealias PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY

typealias PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICYVar = CPointerVarOf<PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY>
typealias PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = CPointer<_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY>

typealias PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY

typealias PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICYVar = CPointerVarOf<PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY>
typealias PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = CPointer<_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY>

typealias PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY

typealias PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICYVar = CPointerVarOf<PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY>
typealias PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = CPointer<_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY>

typealias JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION

typealias PJOBOBJECT_BASIC_ACCOUNTING_INFORMATIONVar = CPointerVarOf<PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION>
typealias PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = CPointer<_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION>

typealias JOBOBJECT_BASIC_LIMIT_INFORMATION = _JOBOBJECT_BASIC_LIMIT_INFORMATION

typealias PJOBOBJECT_BASIC_LIMIT_INFORMATIONVar = CPointerVarOf<PJOBOBJECT_BASIC_LIMIT_INFORMATION>
typealias PJOBOBJECT_BASIC_LIMIT_INFORMATION = CPointer<_JOBOBJECT_BASIC_LIMIT_INFORMATION>

typealias JOBOBJECT_EXTENDED_LIMIT_INFORMATION = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION

typealias PJOBOBJECT_EXTENDED_LIMIT_INFORMATIONVar = CPointerVarOf<PJOBOBJECT_EXTENDED_LIMIT_INFORMATION>
typealias PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = CPointer<_JOBOBJECT_EXTENDED_LIMIT_INFORMATION>

typealias JOBOBJECT_BASIC_PROCESS_ID_LIST = _JOBOBJECT_BASIC_PROCESS_ID_LIST

typealias PJOBOBJECT_BASIC_PROCESS_ID_LISTVar = CPointerVarOf<PJOBOBJECT_BASIC_PROCESS_ID_LIST>
typealias PJOBOBJECT_BASIC_PROCESS_ID_LIST = CPointer<_JOBOBJECT_BASIC_PROCESS_ID_LIST>

typealias JOBOBJECT_BASIC_UI_RESTRICTIONS = _JOBOBJECT_BASIC_UI_RESTRICTIONS

typealias PJOBOBJECT_BASIC_UI_RESTRICTIONSVar = CPointerVarOf<PJOBOBJECT_BASIC_UI_RESTRICTIONS>
typealias PJOBOBJECT_BASIC_UI_RESTRICTIONS = CPointer<_JOBOBJECT_BASIC_UI_RESTRICTIONS>

typealias JOBOBJECT_SECURITY_LIMIT_INFORMATION = _JOBOBJECT_SECURITY_LIMIT_INFORMATION

typealias PJOBOBJECT_SECURITY_LIMIT_INFORMATIONVar = CPointerVarOf<PJOBOBJECT_SECURITY_LIMIT_INFORMATION>
typealias PJOBOBJECT_SECURITY_LIMIT_INFORMATION = CPointer<_JOBOBJECT_SECURITY_LIMIT_INFORMATION>

typealias JOBOBJECT_END_OF_JOB_TIME_INFORMATION = _JOBOBJECT_END_OF_JOB_TIME_INFORMATION

typealias PJOBOBJECT_END_OF_JOB_TIME_INFORMATIONVar = CPointerVarOf<PJOBOBJECT_END_OF_JOB_TIME_INFORMATION>
typealias PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = CPointer<_JOBOBJECT_END_OF_JOB_TIME_INFORMATION>

typealias JOBOBJECT_ASSOCIATE_COMPLETION_PORT = _JOBOBJECT_ASSOCIATE_COMPLETION_PORT

typealias PJOBOBJECT_ASSOCIATE_COMPLETION_PORTVar = CPointerVarOf<PJOBOBJECT_ASSOCIATE_COMPLETION_PORT>
typealias PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = CPointer<_JOBOBJECT_ASSOCIATE_COMPLETION_PORT>

typealias JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION

typealias PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATIONVar = CPointerVarOf<PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION>
typealias PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = CPointer<_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION>

typealias JOBOBJECT_JOBSET_INFORMATION = _JOBOBJECT_JOBSET_INFORMATION

typealias PJOBOBJECT_JOBSET_INFORMATIONVar = CPointerVarOf<PJOBOBJECT_JOBSET_INFORMATION>
typealias PJOBOBJECT_JOBSET_INFORMATION = CPointer<_JOBOBJECT_JOBSET_INFORMATION>

typealias JOBOBJECT_RATE_CONTROL_TOLERANCEVar = IntVarOf<JOBOBJECT_RATE_CONTROL_TOLERANCE>
typealias JOBOBJECT_RATE_CONTROL_TOLERANCE = _JOBOBJECT_RATE_CONTROL_TOLERANCE

typealias JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVALVar = IntVarOf<JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL>
typealias JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL

typealias JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION

typealias PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATIONVar = CPointerVarOf<PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION>
typealias PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = CPointer<_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION>

typealias JOBOBJECT_LIMIT_VIOLATION_INFORMATION = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION

typealias PJOBOBJECT_LIMIT_VIOLATION_INFORMATIONVar = CPointerVarOf<PJOBOBJECT_LIMIT_VIOLATION_INFORMATION>
typealias PJOBOBJECT_LIMIT_VIOLATION_INFORMATION = CPointer<_JOBOBJECT_LIMIT_VIOLATION_INFORMATION>

typealias JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION

typealias PJOBOBJECT_CPU_RATE_CONTROL_INFORMATIONVar = CPointerVarOf<PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION>
typealias PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = CPointer<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION>

typealias JOBOBJECTINFOCLASSVar = IntVarOf<JOBOBJECTINFOCLASS>
typealias JOBOBJECTINFOCLASS = _JOBOBJECTINFOCLASS

typealias FIRMWARE_TYPEVar = _FIRMWARE_TYPE.Var
typealias FIRMWARE_TYPE = _FIRMWARE_TYPE

typealias PFIRMWARE_TYPEVar = CPointerVarOf<PFIRMWARE_TYPE>
typealias PFIRMWARE_TYPE = CPointer<_FIRMWARE_TYPE.Var>

typealias LOGICAL_PROCESSOR_RELATIONSHIPVar = IntVarOf<LOGICAL_PROCESSOR_RELATIONSHIP>
typealias LOGICAL_PROCESSOR_RELATIONSHIP = _LOGICAL_PROCESSOR_RELATIONSHIP

typealias PROCESSOR_CACHE_TYPEVar = _PROCESSOR_CACHE_TYPE.Var
typealias PROCESSOR_CACHE_TYPE = _PROCESSOR_CACHE_TYPE

typealias CACHE_DESCRIPTOR = _CACHE_DESCRIPTOR

typealias PCACHE_DESCRIPTORVar = CPointerVarOf<PCACHE_DESCRIPTOR>
typealias PCACHE_DESCRIPTOR = CPointer<_CACHE_DESCRIPTOR>

typealias SYSTEM_LOGICAL_PROCESSOR_INFORMATION = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION

typealias PSYSTEM_LOGICAL_PROCESSOR_INFORMATIONVar = CPointerVarOf<PSYSTEM_LOGICAL_PROCESSOR_INFORMATION>
typealias PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = CPointer<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION>

typealias PROCESSOR_RELATIONSHIP = _PROCESSOR_RELATIONSHIP

typealias PPROCESSOR_RELATIONSHIPVar = CPointerVarOf<PPROCESSOR_RELATIONSHIP>
typealias PPROCESSOR_RELATIONSHIP = CPointer<_PROCESSOR_RELATIONSHIP>

typealias NUMA_NODE_RELATIONSHIP = _NUMA_NODE_RELATIONSHIP

typealias PNUMA_NODE_RELATIONSHIPVar = CPointerVarOf<PNUMA_NODE_RELATIONSHIP>
typealias PNUMA_NODE_RELATIONSHIP = CPointer<_NUMA_NODE_RELATIONSHIP>

typealias CACHE_RELATIONSHIP = _CACHE_RELATIONSHIP

typealias PCACHE_RELATIONSHIPVar = CPointerVarOf<PCACHE_RELATIONSHIP>
typealias PCACHE_RELATIONSHIP = CPointer<_CACHE_RELATIONSHIP>

typealias PROCESSOR_GROUP_INFO = _PROCESSOR_GROUP_INFO

typealias PPROCESSOR_GROUP_INFOVar = CPointerVarOf<PPROCESSOR_GROUP_INFO>
typealias PPROCESSOR_GROUP_INFO = CPointer<_PROCESSOR_GROUP_INFO>

typealias GROUP_RELATIONSHIP = _GROUP_RELATIONSHIP

typealias PGROUP_RELATIONSHIPVar = CPointerVarOf<PGROUP_RELATIONSHIP>
typealias PGROUP_RELATIONSHIP = CPointer<_GROUP_RELATIONSHIP>

typealias SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX

typealias PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EXVar = CPointerVarOf<PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX>
typealias PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = CPointer<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX>

typealias SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION

typealias PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATIONVar = CPointerVarOf<PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION>
typealias PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = CPointer<_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION>

typealias XSTATE_FEATURE = _XSTATE_FEATURE

typealias PXSTATE_FEATUREVar = CPointerVarOf<PXSTATE_FEATURE>
typealias PXSTATE_FEATURE = CPointer<_XSTATE_FEATURE>

typealias XSTATE_CONFIGURATION = _XSTATE_CONFIGURATION

typealias PXSTATE_CONFIGURATIONVar = CPointerVarOf<PXSTATE_CONFIGURATION>
typealias PXSTATE_CONFIGURATION = CPointer<_XSTATE_CONFIGURATION>

typealias MEMORY_BASIC_INFORMATION = _MEMORY_BASIC_INFORMATION

typealias PMEMORY_BASIC_INFORMATIONVar = CPointerVarOf<PMEMORY_BASIC_INFORMATION>
typealias PMEMORY_BASIC_INFORMATION = CPointer<_MEMORY_BASIC_INFORMATION>

typealias MEMORY_BASIC_INFORMATION32 = _MEMORY_BASIC_INFORMATION32

typealias PMEMORY_BASIC_INFORMATION32Var = CPointerVarOf<PMEMORY_BASIC_INFORMATION32>
typealias PMEMORY_BASIC_INFORMATION32 = CPointer<_MEMORY_BASIC_INFORMATION32>

typealias MEMORY_BASIC_INFORMATION64 = _MEMORY_BASIC_INFORMATION64

typealias PMEMORY_BASIC_INFORMATION64Var = CPointerVarOf<PMEMORY_BASIC_INFORMATION64>
typealias PMEMORY_BASIC_INFORMATION64 = CPointer<_MEMORY_BASIC_INFORMATION64>

typealias PFILE_ID_128Var = CPointerVarOf<PFILE_ID_128>
typealias PFILE_ID_128 = CPointer<FILE_ID_128>

typealias FILE_NOTIFY_INFORMATION = _FILE_NOTIFY_INFORMATION

typealias PFILE_NOTIFY_INFORMATIONVar = CPointerVarOf<PFILE_NOTIFY_INFORMATION>
typealias PFILE_NOTIFY_INFORMATION = CPointer<_FILE_NOTIFY_INFORMATION>

typealias FILE_SEGMENT_ELEMENT = _FILE_SEGMENT_ELEMENT

typealias PFILE_SEGMENT_ELEMENTVar = CPointerVarOf<PFILE_SEGMENT_ELEMENT>
typealias PFILE_SEGMENT_ELEMENT = CPointer<_FILE_SEGMENT_ELEMENT>

typealias REPARSE_GUID_DATA_BUFFER = _REPARSE_GUID_DATA_BUFFER

typealias PREPARSE_GUID_DATA_BUFFERVar = CPointerVarOf<PREPARSE_GUID_DATA_BUFFER>
typealias PREPARSE_GUID_DATA_BUFFER = CPointer<_REPARSE_GUID_DATA_BUFFER>

typealias SYSTEM_POWER_STATEVar = IntVarOf<SYSTEM_POWER_STATE>
typealias SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE

typealias PSYSTEM_POWER_STATEVar = CPointerVarOf<PSYSTEM_POWER_STATE>
typealias PSYSTEM_POWER_STATE = CPointer<_SYSTEM_POWER_STATEVar>

typealias PPOWER_ACTIONVar = CPointerVarOf<PPOWER_ACTION>
typealias PPOWER_ACTION = CPointer<POWER_ACTIONVar>

typealias DEVICE_POWER_STATEVar = IntVarOf<DEVICE_POWER_STATE>
typealias DEVICE_POWER_STATE = _DEVICE_POWER_STATE

typealias PDEVICE_POWER_STATEVar = CPointerVarOf<PDEVICE_POWER_STATE>
typealias PDEVICE_POWER_STATE = CPointer<_DEVICE_POWER_STATEVar>

typealias MONITOR_DISPLAY_STATEVar = IntVarOf<MONITOR_DISPLAY_STATE>
typealias MONITOR_DISPLAY_STATE = _MONITOR_DISPLAY_STATE

typealias PMONITOR_DISPLAY_STATEVar = CPointerVarOf<PMONITOR_DISPLAY_STATE>
typealias PMONITOR_DISPLAY_STATE = CPointer<_MONITOR_DISPLAY_STATEVar>

typealias USER_ACTIVITY_PRESENCEVar = IntVarOf<USER_ACTIVITY_PRESENCE>
typealias USER_ACTIVITY_PRESENCE = _USER_ACTIVITY_PRESENCE

typealias PUSER_ACTIVITY_PRESENCEVar = CPointerVarOf<PUSER_ACTIVITY_PRESENCE>
typealias PUSER_ACTIVITY_PRESENCE = CPointer<_USER_ACTIVITY_PRESENCEVar>

typealias EXECUTION_STATEVar = IntVarOf<EXECUTION_STATE>
typealias EXECUTION_STATE = DWORD

typealias PEXECUTION_STATEVar = CPointerVarOf<PEXECUTION_STATE>
typealias PEXECUTION_STATE = CPointer<DWORDVar>

typealias POWER_REQUEST_TYPEVar = _POWER_REQUEST_TYPE.Var
typealias POWER_REQUEST_TYPE = _POWER_REQUEST_TYPE

typealias PPOWER_REQUEST_TYPEVar = CPointerVarOf<PPOWER_REQUEST_TYPE>
typealias PPOWER_REQUEST_TYPE = CPointer<_POWER_REQUEST_TYPE.Var>

typealias CM_POWER_DATA = CM_Power_Data_s

typealias PCM_POWER_DATAVar = CPointerVarOf<PCM_POWER_DATA>
typealias PCM_POWER_DATA = CPointer<CM_Power_Data_s>

typealias PPOWER_USER_PRESENCE_TYPEVar = CPointerVarOf<PPOWER_USER_PRESENCE_TYPE>
typealias PPOWER_USER_PRESENCE_TYPE = CPointer<POWER_USER_PRESENCE_TYPEVar>

typealias POWER_USER_PRESENCE = _POWER_USER_PRESENCE

typealias PPOWER_USER_PRESENCEVar = CPointerVarOf<PPOWER_USER_PRESENCE>
typealias PPOWER_USER_PRESENCE = CPointer<_POWER_USER_PRESENCE>

typealias POWER_SESSION_CONNECT = _POWER_SESSION_CONNECT

typealias PPOWER_SESSION_CONNECTVar = CPointerVarOf<PPOWER_SESSION_CONNECT>
typealias PPOWER_SESSION_CONNECT = CPointer<_POWER_SESSION_CONNECT>

typealias POWER_SESSION_TIMEOUTS = _POWER_SESSION_TIMEOUTS

typealias PPOWER_SESSION_TIMEOUTSVar = CPointerVarOf<PPOWER_SESSION_TIMEOUTS>
typealias PPOWER_SESSION_TIMEOUTS = CPointer<_POWER_SESSION_TIMEOUTS>

typealias POWER_SESSION_RIT_STATE = _POWER_SESSION_RIT_STATE

typealias PPOWER_SESSION_RIT_STATEVar = CPointerVarOf<PPOWER_SESSION_RIT_STATE>
typealias PPOWER_SESSION_RIT_STATE = CPointer<_POWER_SESSION_RIT_STATE>

typealias POWER_SESSION_WINLOGON = _POWER_SESSION_WINLOGON

typealias PPOWER_SESSION_WINLOGONVar = CPointerVarOf<PPOWER_SESSION_WINLOGON>
typealias PPOWER_SESSION_WINLOGON = CPointer<_POWER_SESSION_WINLOGON>

typealias POWER_IDLE_RESILIENCY = _POWER_IDLE_RESILIENCY

typealias PPOWER_IDLE_RESILIENCYVar = CPointerVarOf<PPOWER_IDLE_RESILIENCY>
typealias PPOWER_IDLE_RESILIENCY = CPointer<_POWER_IDLE_RESILIENCY>

typealias POWER_MONITOR_INVOCATION = _POWER_MONITOR_INVOCATION

typealias PPOWER_MONITOR_INVOCATIONVar = CPointerVarOf<PPOWER_MONITOR_INVOCATION>
typealias PPOWER_MONITOR_INVOCATION = CPointer<_POWER_MONITOR_INVOCATION>

typealias RESUME_PERFORMANCE = _RESUME_PERFORMANCE

typealias PRESUME_PERFORMANCEVar = CPointerVarOf<PRESUME_PERFORMANCE>
typealias PRESUME_PERFORMANCE = CPointer<_RESUME_PERFORMANCE>

typealias PSET_POWER_SETTING_VALUEVar = CPointerVarOf<PSET_POWER_SETTING_VALUE>
typealias PSET_POWER_SETTING_VALUE = CPointer<SET_POWER_SETTING_VALUE>

typealias PNOTIFY_USER_POWER_SETTINGVar = CPointerVarOf<PNOTIFY_USER_POWER_SETTING>
typealias PNOTIFY_USER_POWER_SETTING = CPointer<NOTIFY_USER_POWER_SETTING>

typealias APPLICATIONLAUNCH_SETTING_VALUE = _APPLICATIONLAUNCH_SETTING_VALUE

typealias PAPPLICATIONLAUNCH_SETTING_VALUEVar = CPointerVarOf<PAPPLICATIONLAUNCH_SETTING_VALUE>
typealias PAPPLICATIONLAUNCH_SETTING_VALUE = CPointer<_APPLICATIONLAUNCH_SETTING_VALUE>

typealias POWER_PLATFORM_ROLEVar = IntVarOf<POWER_PLATFORM_ROLE>
typealias POWER_PLATFORM_ROLE = _POWER_PLATFORM_ROLE

typealias PPOWER_PLATFORM_ROLEVar = CPointerVarOf<PPOWER_PLATFORM_ROLE>
typealias PPOWER_PLATFORM_ROLE = CPointer<_POWER_PLATFORM_ROLEVar>

typealias POWER_PLATFORM_INFORMATION = _POWER_PLATFORM_INFORMATION

typealias PPOWER_PLATFORM_INFORMATIONVar = CPointerVarOf<PPOWER_PLATFORM_INFORMATION>
typealias PPOWER_PLATFORM_INFORMATION = CPointer<_POWER_PLATFORM_INFORMATION>

typealias PBATTERY_REPORTING_SCALEVar = CPointerVarOf<PBATTERY_REPORTING_SCALE>
typealias PBATTERY_REPORTING_SCALE = CPointer<BATTERY_REPORTING_SCALE>

typealias PPPM_WMI_LEGACY_PERFSTATEVar = CPointerVarOf<PPPM_WMI_LEGACY_PERFSTATE>
typealias PPPM_WMI_LEGACY_PERFSTATE = CPointer<PPM_WMI_LEGACY_PERFSTATE>

typealias PPPM_WMI_IDLE_STATEVar = CPointerVarOf<PPPM_WMI_IDLE_STATE>
typealias PPPM_WMI_IDLE_STATE = CPointer<PPM_WMI_IDLE_STATE>

typealias PPPM_WMI_IDLE_STATESVar = CPointerVarOf<PPPM_WMI_IDLE_STATES>
typealias PPPM_WMI_IDLE_STATES = CPointer<PPM_WMI_IDLE_STATES>

typealias PPPM_WMI_IDLE_STATES_EXVar = CPointerVarOf<PPPM_WMI_IDLE_STATES_EX>
typealias PPPM_WMI_IDLE_STATES_EX = CPointer<PPM_WMI_IDLE_STATES_EX>

typealias PPPM_WMI_PERF_STATEVar = CPointerVarOf<PPPM_WMI_PERF_STATE>
typealias PPPM_WMI_PERF_STATE = CPointer<PPM_WMI_PERF_STATE>

typealias PPPM_WMI_PERF_STATESVar = CPointerVarOf<PPPM_WMI_PERF_STATES>
typealias PPPM_WMI_PERF_STATES = CPointer<PPM_WMI_PERF_STATES>

typealias PPPM_WMI_PERF_STATES_EXVar = CPointerVarOf<PPPM_WMI_PERF_STATES_EX>
typealias PPPM_WMI_PERF_STATES_EX = CPointer<PPM_WMI_PERF_STATES_EX>

typealias PPPM_IDLE_STATE_ACCOUNTINGVar = CPointerVarOf<PPPM_IDLE_STATE_ACCOUNTING>
typealias PPPM_IDLE_STATE_ACCOUNTING = CPointer<PPM_IDLE_STATE_ACCOUNTING>

typealias PPPM_IDLE_ACCOUNTINGVar = CPointerVarOf<PPPM_IDLE_ACCOUNTING>
typealias PPPM_IDLE_ACCOUNTING = CPointer<PPM_IDLE_ACCOUNTING>

typealias PPPM_IDLE_STATE_BUCKET_EXVar = CPointerVarOf<PPPM_IDLE_STATE_BUCKET_EX>
typealias PPPM_IDLE_STATE_BUCKET_EX = CPointer<PPM_IDLE_STATE_BUCKET_EX>

typealias PPPM_IDLE_STATE_ACCOUNTING_EXVar = CPointerVarOf<PPPM_IDLE_STATE_ACCOUNTING_EX>
typealias PPPM_IDLE_STATE_ACCOUNTING_EX = CPointer<PPM_IDLE_STATE_ACCOUNTING_EX>

typealias PPPM_IDLE_ACCOUNTING_EXVar = CPointerVarOf<PPPM_IDLE_ACCOUNTING_EX>
typealias PPPM_IDLE_ACCOUNTING_EX = CPointer<PPM_IDLE_ACCOUNTING_EX>

typealias PPPM_PERFSTATE_EVENTVar = CPointerVarOf<PPPM_PERFSTATE_EVENT>
typealias PPPM_PERFSTATE_EVENT = CPointer<PPM_PERFSTATE_EVENT>

typealias PPPM_PERFSTATE_DOMAIN_EVENTVar = CPointerVarOf<PPPM_PERFSTATE_DOMAIN_EVENT>
typealias PPPM_PERFSTATE_DOMAIN_EVENT = CPointer<PPM_PERFSTATE_DOMAIN_EVENT>

typealias PPPM_IDLESTATE_EVENTVar = CPointerVarOf<PPPM_IDLESTATE_EVENT>
typealias PPPM_IDLESTATE_EVENT = CPointer<PPM_IDLESTATE_EVENT>

typealias PPPM_THERMALCHANGE_EVENTVar = CPointerVarOf<PPPM_THERMALCHANGE_EVENT>
typealias PPPM_THERMALCHANGE_EVENT = CPointer<PPM_THERMALCHANGE_EVENT>

typealias PPPM_THERMAL_POLICY_EVENTVar = CPointerVarOf<PPPM_THERMAL_POLICY_EVENT>
typealias PPPM_THERMAL_POLICY_EVENT = CPointer<PPM_THERMAL_POLICY_EVENT>

typealias PPOWER_ACTION_POLICYVar = CPointerVarOf<PPOWER_ACTION_POLICY>
typealias PPOWER_ACTION_POLICY = CPointer<POWER_ACTION_POLICY>

typealias PPROCESSOR_IDLESTATE_INFOVar = CPointerVarOf<PPROCESSOR_IDLESTATE_INFO>
typealias PPROCESSOR_IDLESTATE_INFO = CPointer<PROCESSOR_IDLESTATE_INFO>

typealias PSYSTEM_POWER_LEVELVar = CPointerVarOf<PSYSTEM_POWER_LEVEL>
typealias PSYSTEM_POWER_LEVEL = CPointer<SYSTEM_POWER_LEVEL>

typealias SYSTEM_POWER_POLICY = _SYSTEM_POWER_POLICY

typealias PSYSTEM_POWER_POLICYVar = CPointerVarOf<PSYSTEM_POWER_POLICY>
typealias PSYSTEM_POWER_POLICY = CPointer<_SYSTEM_POWER_POLICY>

typealias PPROCESSOR_IDLESTATE_POLICYVar = CPointerVarOf<PPROCESSOR_IDLESTATE_POLICY>
typealias PPROCESSOR_IDLESTATE_POLICY = CPointer<PROCESSOR_IDLESTATE_POLICY>

typealias PROCESSOR_POWER_POLICY_INFO = _PROCESSOR_POWER_POLICY_INFO

typealias PPROCESSOR_POWER_POLICY_INFOVar = CPointerVarOf<PPROCESSOR_POWER_POLICY_INFO>
typealias PPROCESSOR_POWER_POLICY_INFO = CPointer<_PROCESSOR_POWER_POLICY_INFO>

typealias PROCESSOR_POWER_POLICY = _PROCESSOR_POWER_POLICY

typealias PPROCESSOR_POWER_POLICYVar = CPointerVarOf<PPROCESSOR_POWER_POLICY>
typealias PPROCESSOR_POWER_POLICY = CPointer<_PROCESSOR_POWER_POLICY>

typealias PPROCESSOR_PERFSTATE_POLICYVar = CPointerVarOf<PPROCESSOR_PERFSTATE_POLICY>
typealias PPROCESSOR_PERFSTATE_POLICY = CPointer<PROCESSOR_PERFSTATE_POLICY>

typealias ADMINISTRATOR_POWER_POLICY = _ADMINISTRATOR_POWER_POLICY

typealias PADMINISTRATOR_POWER_POLICYVar = CPointerVarOf<PADMINISTRATOR_POWER_POLICY>
typealias PADMINISTRATOR_POWER_POLICY = CPointer<_ADMINISTRATOR_POWER_POLICY>

typealias PSYSTEM_POWER_CAPABILITIESVar = CPointerVarOf<PSYSTEM_POWER_CAPABILITIES>
typealias PSYSTEM_POWER_CAPABILITIES = CPointer<SYSTEM_POWER_CAPABILITIES>

typealias PSYSTEM_BATTERY_STATEVar = CPointerVarOf<PSYSTEM_BATTERY_STATE>
typealias PSYSTEM_BATTERY_STATE = CPointer<SYSTEM_BATTERY_STATE>

typealias IMAGE_DOS_HEADER = _IMAGE_DOS_HEADER

typealias PIMAGE_DOS_HEADERVar = CPointerVarOf<PIMAGE_DOS_HEADER>
typealias PIMAGE_DOS_HEADER = CPointer<_IMAGE_DOS_HEADER>

typealias IMAGE_OS2_HEADER = _IMAGE_OS2_HEADER

typealias PIMAGE_OS2_HEADERVar = CPointerVarOf<PIMAGE_OS2_HEADER>
typealias PIMAGE_OS2_HEADER = CPointer<_IMAGE_OS2_HEADER>

typealias IMAGE_VXD_HEADER = _IMAGE_VXD_HEADER

typealias PIMAGE_VXD_HEADERVar = CPointerVarOf<PIMAGE_VXD_HEADER>
typealias PIMAGE_VXD_HEADER = CPointer<_IMAGE_VXD_HEADER>

typealias IMAGE_FILE_HEADER = _IMAGE_FILE_HEADER

typealias PIMAGE_FILE_HEADERVar = CPointerVarOf<PIMAGE_FILE_HEADER>
typealias PIMAGE_FILE_HEADER = CPointer<_IMAGE_FILE_HEADER>

typealias IMAGE_DATA_DIRECTORY = _IMAGE_DATA_DIRECTORY

typealias PIMAGE_DATA_DIRECTORYVar = CPointerVarOf<PIMAGE_DATA_DIRECTORY>
typealias PIMAGE_DATA_DIRECTORY = CPointer<_IMAGE_DATA_DIRECTORY>

typealias IMAGE_OPTIONAL_HEADER32 = _IMAGE_OPTIONAL_HEADER

typealias PIMAGE_OPTIONAL_HEADER32Var = CPointerVarOf<PIMAGE_OPTIONAL_HEADER32>
typealias PIMAGE_OPTIONAL_HEADER32 = CPointer<_IMAGE_OPTIONAL_HEADER>

typealias IMAGE_ROM_OPTIONAL_HEADER = _IMAGE_ROM_OPTIONAL_HEADER

typealias PIMAGE_ROM_OPTIONAL_HEADERVar = CPointerVarOf<PIMAGE_ROM_OPTIONAL_HEADER>
typealias PIMAGE_ROM_OPTIONAL_HEADER = CPointer<_IMAGE_ROM_OPTIONAL_HEADER>

typealias IMAGE_OPTIONAL_HEADER64 = _IMAGE_OPTIONAL_HEADER64

typealias PIMAGE_OPTIONAL_HEADER64Var = CPointerVarOf<PIMAGE_OPTIONAL_HEADER64>
typealias PIMAGE_OPTIONAL_HEADER64 = CPointer<_IMAGE_OPTIONAL_HEADER64>

typealias IMAGE_OPTIONAL_HEADER = IMAGE_OPTIONAL_HEADER64

typealias PIMAGE_OPTIONAL_HEADERVar = CPointerVarOf<PIMAGE_OPTIONAL_HEADER>
typealias PIMAGE_OPTIONAL_HEADER = PIMAGE_OPTIONAL_HEADER64

typealias IMAGE_NT_HEADERS64 = _IMAGE_NT_HEADERS64

typealias PIMAGE_NT_HEADERS64Var = CPointerVarOf<PIMAGE_NT_HEADERS64>
typealias PIMAGE_NT_HEADERS64 = CPointer<_IMAGE_NT_HEADERS64>

typealias IMAGE_NT_HEADERS32 = _IMAGE_NT_HEADERS

typealias PIMAGE_NT_HEADERS32Var = CPointerVarOf<PIMAGE_NT_HEADERS32>
typealias PIMAGE_NT_HEADERS32 = CPointer<_IMAGE_NT_HEADERS>

typealias IMAGE_ROM_HEADERS = _IMAGE_ROM_HEADERS

typealias PIMAGE_ROM_HEADERSVar = CPointerVarOf<PIMAGE_ROM_HEADERS>
typealias PIMAGE_ROM_HEADERS = CPointer<_IMAGE_ROM_HEADERS>

typealias IMAGE_NT_HEADERS = IMAGE_NT_HEADERS64

typealias PIMAGE_NT_HEADERSVar = CPointerVarOf<PIMAGE_NT_HEADERS>
typealias PIMAGE_NT_HEADERS = PIMAGE_NT_HEADERS64

typealias CLSID = GUID

typealias IMAGE_SECTION_HEADER = _IMAGE_SECTION_HEADER

typealias PIMAGE_SECTION_HEADERVar = CPointerVarOf<PIMAGE_SECTION_HEADER>
typealias PIMAGE_SECTION_HEADER = CPointer<_IMAGE_SECTION_HEADER>

typealias IMAGE_SYMBOL = _IMAGE_SYMBOL

typealias PIMAGE_SYMBOLVar = CPointerVarOf<PIMAGE_SYMBOL>
typealias PIMAGE_SYMBOL = CPointer<IMAGE_SYMBOL>

typealias IMAGE_SYMBOL_EX = _IMAGE_SYMBOL_EX

typealias PIMAGE_SYMBOL_EXVar = CPointerVarOf<PIMAGE_SYMBOL_EX>
typealias PIMAGE_SYMBOL_EX = CPointer<_IMAGE_SYMBOL_EX>

typealias PIMAGE_AUX_SYMBOL_TOKEN_DEFVar = CPointerVarOf<PIMAGE_AUX_SYMBOL_TOKEN_DEF>
typealias PIMAGE_AUX_SYMBOL_TOKEN_DEF = CPointer<IMAGE_AUX_SYMBOL_TOKEN_DEF>

typealias IMAGE_AUX_SYMBOL = _IMAGE_AUX_SYMBOL

typealias PIMAGE_AUX_SYMBOLVar = CPointerVarOf<PIMAGE_AUX_SYMBOL>
typealias PIMAGE_AUX_SYMBOL = CPointer<_IMAGE_AUX_SYMBOL>

typealias IMAGE_AUX_SYMBOL_EX = _IMAGE_AUX_SYMBOL_EX

typealias PIMAGE_AUX_SYMBOL_EXVar = CPointerVarOf<PIMAGE_AUX_SYMBOL_EX>
typealias PIMAGE_AUX_SYMBOL_EX = CPointer<_IMAGE_AUX_SYMBOL_EX>

typealias IMAGE_RELOCATION = _IMAGE_RELOCATION

typealias PIMAGE_RELOCATIONVar = CPointerVarOf<PIMAGE_RELOCATION>
typealias PIMAGE_RELOCATION = CPointer<IMAGE_RELOCATION>

typealias IMAGE_LINENUMBER = _IMAGE_LINENUMBER

typealias PIMAGE_LINENUMBERVar = CPointerVarOf<PIMAGE_LINENUMBER>
typealias PIMAGE_LINENUMBER = CPointer<IMAGE_LINENUMBER>

typealias IMAGE_BASE_RELOCATION = _IMAGE_BASE_RELOCATION

typealias PIMAGE_BASE_RELOCATIONVar = CPointerVarOf<PIMAGE_BASE_RELOCATION>
typealias PIMAGE_BASE_RELOCATION = CPointer<IMAGE_BASE_RELOCATION>

typealias IMAGE_ARCHIVE_MEMBER_HEADER = _IMAGE_ARCHIVE_MEMBER_HEADER

typealias PIMAGE_ARCHIVE_MEMBER_HEADERVar = CPointerVarOf<PIMAGE_ARCHIVE_MEMBER_HEADER>
typealias PIMAGE_ARCHIVE_MEMBER_HEADER = CPointer<_IMAGE_ARCHIVE_MEMBER_HEADER>

typealias IMAGE_EXPORT_DIRECTORY = _IMAGE_EXPORT_DIRECTORY

typealias PIMAGE_EXPORT_DIRECTORYVar = CPointerVarOf<PIMAGE_EXPORT_DIRECTORY>
typealias PIMAGE_EXPORT_DIRECTORY = CPointer<_IMAGE_EXPORT_DIRECTORY>

typealias IMAGE_IMPORT_BY_NAME = _IMAGE_IMPORT_BY_NAME

typealias PIMAGE_IMPORT_BY_NAMEVar = CPointerVarOf<PIMAGE_IMPORT_BY_NAME>
typealias PIMAGE_IMPORT_BY_NAME = CPointer<_IMAGE_IMPORT_BY_NAME>

typealias IMAGE_THUNK_DATA64 = _IMAGE_THUNK_DATA64

typealias PIMAGE_THUNK_DATA64Var = CPointerVarOf<PIMAGE_THUNK_DATA64>
typealias PIMAGE_THUNK_DATA64 = CPointer<IMAGE_THUNK_DATA64>

typealias IMAGE_THUNK_DATA32 = _IMAGE_THUNK_DATA32

typealias PIMAGE_THUNK_DATA32Var = CPointerVarOf<PIMAGE_THUNK_DATA32>
typealias PIMAGE_THUNK_DATA32 = CPointer<IMAGE_THUNK_DATA32>

typealias PIMAGE_TLS_CALLBACKVar = CPointerVarOf<PIMAGE_TLS_CALLBACK>
typealias PIMAGE_TLS_CALLBACK = CPointer<CFunction<(PVOID?, DWORD, PVOID?) -> Unit>>

typealias IMAGE_TLS_DIRECTORY64 = _IMAGE_TLS_DIRECTORY64

typealias PIMAGE_TLS_DIRECTORY64Var = CPointerVarOf<PIMAGE_TLS_DIRECTORY64>
typealias PIMAGE_TLS_DIRECTORY64 = CPointer<IMAGE_TLS_DIRECTORY64>

typealias IMAGE_TLS_DIRECTORY32 = _IMAGE_TLS_DIRECTORY32

typealias PIMAGE_TLS_DIRECTORY32Var = CPointerVarOf<PIMAGE_TLS_DIRECTORY32>
typealias PIMAGE_TLS_DIRECTORY32 = CPointer<IMAGE_TLS_DIRECTORY32>

typealias IMAGE_THUNK_DATA = IMAGE_THUNK_DATA64

typealias PIMAGE_THUNK_DATAVar = CPointerVarOf<PIMAGE_THUNK_DATA>
typealias PIMAGE_THUNK_DATA = PIMAGE_THUNK_DATA64

typealias IMAGE_TLS_DIRECTORY = IMAGE_TLS_DIRECTORY64

typealias PIMAGE_TLS_DIRECTORYVar = CPointerVarOf<PIMAGE_TLS_DIRECTORY>
typealias PIMAGE_TLS_DIRECTORY = PIMAGE_TLS_DIRECTORY64

typealias IMAGE_IMPORT_DESCRIPTOR = _IMAGE_IMPORT_DESCRIPTOR

typealias PIMAGE_IMPORT_DESCRIPTORVar = CPointerVarOf<PIMAGE_IMPORT_DESCRIPTOR>
typealias PIMAGE_IMPORT_DESCRIPTOR = CPointer<IMAGE_IMPORT_DESCRIPTOR>

typealias IMAGE_BOUND_IMPORT_DESCRIPTOR = _IMAGE_BOUND_IMPORT_DESCRIPTOR

typealias PIMAGE_BOUND_IMPORT_DESCRIPTORVar = CPointerVarOf<PIMAGE_BOUND_IMPORT_DESCRIPTOR>
typealias PIMAGE_BOUND_IMPORT_DESCRIPTOR = CPointer<_IMAGE_BOUND_IMPORT_DESCRIPTOR>

typealias IMAGE_BOUND_FORWARDER_REF = _IMAGE_BOUND_FORWARDER_REF

typealias PIMAGE_BOUND_FORWARDER_REFVar = CPointerVarOf<PIMAGE_BOUND_FORWARDER_REF>
typealias PIMAGE_BOUND_FORWARDER_REF = CPointer<_IMAGE_BOUND_FORWARDER_REF>

typealias IMAGE_DELAYLOAD_DESCRIPTOR = _IMAGE_DELAYLOAD_DESCRIPTOR

typealias PIMAGE_DELAYLOAD_DESCRIPTORVar = CPointerVarOf<PIMAGE_DELAYLOAD_DESCRIPTOR>
typealias PIMAGE_DELAYLOAD_DESCRIPTOR = CPointer<_IMAGE_DELAYLOAD_DESCRIPTOR>

typealias PCIMAGE_DELAYLOAD_DESCRIPTORVar = CPointerVarOf<PCIMAGE_DELAYLOAD_DESCRIPTOR>
typealias PCIMAGE_DELAYLOAD_DESCRIPTOR = CPointer<IMAGE_DELAYLOAD_DESCRIPTOR>

typealias IMAGE_RESOURCE_DIRECTORY = _IMAGE_RESOURCE_DIRECTORY

typealias PIMAGE_RESOURCE_DIRECTORYVar = CPointerVarOf<PIMAGE_RESOURCE_DIRECTORY>
typealias PIMAGE_RESOURCE_DIRECTORY = CPointer<_IMAGE_RESOURCE_DIRECTORY>

typealias IMAGE_RESOURCE_DIRECTORY_ENTRY = _IMAGE_RESOURCE_DIRECTORY_ENTRY

typealias PIMAGE_RESOURCE_DIRECTORY_ENTRYVar = CPointerVarOf<PIMAGE_RESOURCE_DIRECTORY_ENTRY>
typealias PIMAGE_RESOURCE_DIRECTORY_ENTRY = CPointer<_IMAGE_RESOURCE_DIRECTORY_ENTRY>

typealias IMAGE_RESOURCE_DIRECTORY_STRING = _IMAGE_RESOURCE_DIRECTORY_STRING

typealias PIMAGE_RESOURCE_DIRECTORY_STRINGVar = CPointerVarOf<PIMAGE_RESOURCE_DIRECTORY_STRING>
typealias PIMAGE_RESOURCE_DIRECTORY_STRING = CPointer<_IMAGE_RESOURCE_DIRECTORY_STRING>

typealias IMAGE_RESOURCE_DIR_STRING_U = _IMAGE_RESOURCE_DIR_STRING_U

typealias PIMAGE_RESOURCE_DIR_STRING_UVar = CPointerVarOf<PIMAGE_RESOURCE_DIR_STRING_U>
typealias PIMAGE_RESOURCE_DIR_STRING_U = CPointer<_IMAGE_RESOURCE_DIR_STRING_U>

typealias IMAGE_RESOURCE_DATA_ENTRY = _IMAGE_RESOURCE_DATA_ENTRY

typealias PIMAGE_RESOURCE_DATA_ENTRYVar = CPointerVarOf<PIMAGE_RESOURCE_DATA_ENTRY>
typealias PIMAGE_RESOURCE_DATA_ENTRY = CPointer<_IMAGE_RESOURCE_DATA_ENTRY>

typealias PIMAGE_LOAD_CONFIG_DIRECTORY32Var = CPointerVarOf<PIMAGE_LOAD_CONFIG_DIRECTORY32>
typealias PIMAGE_LOAD_CONFIG_DIRECTORY32 = CPointer<IMAGE_LOAD_CONFIG_DIRECTORY32>

typealias PIMAGE_LOAD_CONFIG_DIRECTORY64Var = CPointerVarOf<PIMAGE_LOAD_CONFIG_DIRECTORY64>
typealias PIMAGE_LOAD_CONFIG_DIRECTORY64 = CPointer<IMAGE_LOAD_CONFIG_DIRECTORY64>

typealias IMAGE_LOAD_CONFIG_DIRECTORY = IMAGE_LOAD_CONFIG_DIRECTORY64

typealias PIMAGE_LOAD_CONFIG_DIRECTORYVar = CPointerVarOf<PIMAGE_LOAD_CONFIG_DIRECTORY>
typealias PIMAGE_LOAD_CONFIG_DIRECTORY = PIMAGE_LOAD_CONFIG_DIRECTORY64

typealias IMAGE_CE_RUNTIME_FUNCTION_ENTRY = _IMAGE_CE_RUNTIME_FUNCTION_ENTRY

typealias PIMAGE_CE_RUNTIME_FUNCTION_ENTRYVar = CPointerVarOf<PIMAGE_CE_RUNTIME_FUNCTION_ENTRY>
typealias PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = CPointer<_IMAGE_CE_RUNTIME_FUNCTION_ENTRY>

typealias IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY

typealias PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRYVar = CPointerVarOf<PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY>
typealias PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = CPointer<_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY>

typealias IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY

typealias PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRYVar = CPointerVarOf<PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY>
typealias PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = CPointer<_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY>

typealias IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY

typealias PIMAGE_ARM_RUNTIME_FUNCTION_ENTRYVar = CPointerVarOf<PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY>
typealias PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = CPointer<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY>

typealias _PIMAGE_RUNTIME_FUNCTION_ENTRYVar = CPointerVarOf<_PIMAGE_RUNTIME_FUNCTION_ENTRY>
typealias _PIMAGE_RUNTIME_FUNCTION_ENTRY = CPointer<_IMAGE_RUNTIME_FUNCTION_ENTRY>

typealias IMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY

typealias PIMAGE_IA64_RUNTIME_FUNCTION_ENTRYVar = CPointerVarOf<PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY>
typealias PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY

typealias IMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY

typealias PIMAGE_RUNTIME_FUNCTION_ENTRYVar = CPointerVarOf<PIMAGE_RUNTIME_FUNCTION_ENTRY>
typealias PIMAGE_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY

typealias IMAGE_DEBUG_DIRECTORY = _IMAGE_DEBUG_DIRECTORY

typealias PIMAGE_DEBUG_DIRECTORYVar = CPointerVarOf<PIMAGE_DEBUG_DIRECTORY>
typealias PIMAGE_DEBUG_DIRECTORY = CPointer<_IMAGE_DEBUG_DIRECTORY>

typealias IMAGE_COFF_SYMBOLS_HEADER = _IMAGE_COFF_SYMBOLS_HEADER

typealias PIMAGE_COFF_SYMBOLS_HEADERVar = CPointerVarOf<PIMAGE_COFF_SYMBOLS_HEADER>
typealias PIMAGE_COFF_SYMBOLS_HEADER = CPointer<_IMAGE_COFF_SYMBOLS_HEADER>

typealias FPO_DATA = _FPO_DATA

typealias PFPO_DATAVar = CPointerVarOf<PFPO_DATA>
typealias PFPO_DATA = CPointer<_FPO_DATA>

typealias IMAGE_DEBUG_MISC = _IMAGE_DEBUG_MISC

typealias PIMAGE_DEBUG_MISCVar = CPointerVarOf<PIMAGE_DEBUG_MISC>
typealias PIMAGE_DEBUG_MISC = CPointer<_IMAGE_DEBUG_MISC>

typealias IMAGE_FUNCTION_ENTRY = _IMAGE_FUNCTION_ENTRY

typealias PIMAGE_FUNCTION_ENTRYVar = CPointerVarOf<PIMAGE_FUNCTION_ENTRY>
typealias PIMAGE_FUNCTION_ENTRY = CPointer<_IMAGE_FUNCTION_ENTRY>

typealias IMAGE_FUNCTION_ENTRY64 = _IMAGE_FUNCTION_ENTRY64

typealias PIMAGE_FUNCTION_ENTRY64Var = CPointerVarOf<PIMAGE_FUNCTION_ENTRY64>
typealias PIMAGE_FUNCTION_ENTRY64 = CPointer<_IMAGE_FUNCTION_ENTRY64>

typealias IMAGE_SEPARATE_DEBUG_HEADER = _IMAGE_SEPARATE_DEBUG_HEADER

typealias PIMAGE_SEPARATE_DEBUG_HEADERVar = CPointerVarOf<PIMAGE_SEPARATE_DEBUG_HEADER>
typealias PIMAGE_SEPARATE_DEBUG_HEADER = CPointer<_IMAGE_SEPARATE_DEBUG_HEADER>

typealias NON_PAGED_DEBUG_INFO = _NON_PAGED_DEBUG_INFO

typealias PNON_PAGED_DEBUG_INFOVar = CPointerVarOf<PNON_PAGED_DEBUG_INFO>
typealias PNON_PAGED_DEBUG_INFO = CPointer<_NON_PAGED_DEBUG_INFO>

typealias IMAGE_ARCHITECTURE_HEADER = _ImageArchitectureHeader

typealias PIMAGE_ARCHITECTURE_HEADERVar = CPointerVarOf<PIMAGE_ARCHITECTURE_HEADER>
typealias PIMAGE_ARCHITECTURE_HEADER = CPointer<_ImageArchitectureHeader>

typealias IMAGE_ARCHITECTURE_ENTRY = _ImageArchitectureEntry

typealias PIMAGE_ARCHITECTURE_ENTRYVar = CPointerVarOf<PIMAGE_ARCHITECTURE_ENTRY>
typealias PIMAGE_ARCHITECTURE_ENTRY = CPointer<_ImageArchitectureEntry>

typealias PIMAGE_COR20_HEADERVar = CPointerVarOf<PIMAGE_COR20_HEADER>
typealias PIMAGE_COR20_HEADER = CPointer<IMAGE_COR20_HEADER>

typealias SLIST_ENTRY = _SLIST_ENTRY

typealias PSLIST_ENTRYVar = CPointerVarOf<PSLIST_ENTRY>
typealias PSLIST_ENTRY = CPointer<_SLIST_ENTRY>

typealias SLIST_HEADER = _SLIST_HEADER

typealias PSLIST_HEADERVar = CPointerVarOf<PSLIST_HEADER>
typealias PSLIST_HEADER = CPointer<_SLIST_HEADER>

typealias RTL_RUN_ONCE = _RTL_RUN_ONCE

typealias PRTL_RUN_ONCEVar = CPointerVarOf<PRTL_RUN_ONCE>
typealias PRTL_RUN_ONCE = CPointer<_RTL_RUN_ONCE>

typealias PRTL_RUN_ONCE_INIT_FNVar = CPointerVarOf<PRTL_RUN_ONCE_INIT_FN>
typealias PRTL_RUN_ONCE_INIT_FN = CPointer<CFunction<(PRTL_RUN_ONCE?, PVOID?, CPointer<PVOIDVar>?) -> DWORD>>

typealias RTL_BARRIER = _RTL_BARRIER

typealias PRTL_BARRIERVar = CPointerVarOf<PRTL_BARRIER>
typealias PRTL_BARRIER = CPointer<_RTL_BARRIER>

typealias MESSAGE_RESOURCE_ENTRY = _MESSAGE_RESOURCE_ENTRY

typealias PMESSAGE_RESOURCE_ENTRYVar = CPointerVarOf<PMESSAGE_RESOURCE_ENTRY>
typealias PMESSAGE_RESOURCE_ENTRY = CPointer<_MESSAGE_RESOURCE_ENTRY>

typealias MESSAGE_RESOURCE_BLOCK = _MESSAGE_RESOURCE_BLOCK

typealias PMESSAGE_RESOURCE_BLOCKVar = CPointerVarOf<PMESSAGE_RESOURCE_BLOCK>
typealias PMESSAGE_RESOURCE_BLOCK = CPointer<_MESSAGE_RESOURCE_BLOCK>

typealias MESSAGE_RESOURCE_DATA = _MESSAGE_RESOURCE_DATA

typealias PMESSAGE_RESOURCE_DATAVar = CPointerVarOf<PMESSAGE_RESOURCE_DATA>
typealias PMESSAGE_RESOURCE_DATA = CPointer<_MESSAGE_RESOURCE_DATA>

typealias OSVERSIONINFOA = _OSVERSIONINFOA

typealias POSVERSIONINFOAVar = CPointerVarOf<POSVERSIONINFOA>
typealias POSVERSIONINFOA = CPointer<_OSVERSIONINFOA>

typealias LPOSVERSIONINFOAVar = CPointerVarOf<LPOSVERSIONINFOA>
typealias LPOSVERSIONINFOA = CPointer<_OSVERSIONINFOA>

typealias OSVERSIONINFOW = _OSVERSIONINFOW

typealias POSVERSIONINFOWVar = CPointerVarOf<POSVERSIONINFOW>
typealias POSVERSIONINFOW = CPointer<_OSVERSIONINFOW>

typealias LPOSVERSIONINFOWVar = CPointerVarOf<LPOSVERSIONINFOW>
typealias LPOSVERSIONINFOW = CPointer<_OSVERSIONINFOW>

typealias RTL_OSVERSIONINFOW = _OSVERSIONINFOW

typealias PRTL_OSVERSIONINFOWVar = CPointerVarOf<PRTL_OSVERSIONINFOW>
typealias PRTL_OSVERSIONINFOW = CPointer<_OSVERSIONINFOW>

typealias OSVERSIONINFO = OSVERSIONINFOW

typealias POSVERSIONINFOVar = CPointerVarOf<POSVERSIONINFO>
typealias POSVERSIONINFO = POSVERSIONINFOW

typealias LPOSVERSIONINFOVar = CPointerVarOf<LPOSVERSIONINFO>
typealias LPOSVERSIONINFO = LPOSVERSIONINFOW

typealias OSVERSIONINFOEXA = _OSVERSIONINFOEXA

typealias POSVERSIONINFOEXAVar = CPointerVarOf<POSVERSIONINFOEXA>
typealias POSVERSIONINFOEXA = CPointer<_OSVERSIONINFOEXA>

typealias LPOSVERSIONINFOEXAVar = CPointerVarOf<LPOSVERSIONINFOEXA>
typealias LPOSVERSIONINFOEXA = CPointer<_OSVERSIONINFOEXA>

typealias OSVERSIONINFOEXW = _OSVERSIONINFOEXW

typealias POSVERSIONINFOEXWVar = CPointerVarOf<POSVERSIONINFOEXW>
typealias POSVERSIONINFOEXW = CPointer<_OSVERSIONINFOEXW>

typealias LPOSVERSIONINFOEXWVar = CPointerVarOf<LPOSVERSIONINFOEXW>
typealias LPOSVERSIONINFOEXW = CPointer<_OSVERSIONINFOEXW>

typealias RTL_OSVERSIONINFOEXW = _OSVERSIONINFOEXW

typealias PRTL_OSVERSIONINFOEXWVar = CPointerVarOf<PRTL_OSVERSIONINFOEXW>
typealias PRTL_OSVERSIONINFOEXW = CPointer<_OSVERSIONINFOEXW>

typealias OSVERSIONINFOEX = OSVERSIONINFOEXW

typealias POSVERSIONINFOEXVar = CPointerVarOf<POSVERSIONINFOEX>
typealias POSVERSIONINFOEX = POSVERSIONINFOEXW

typealias LPOSVERSIONINFOEXVar = CPointerVarOf<LPOSVERSIONINFOEX>
typealias LPOSVERSIONINFOEX = LPOSVERSIONINFOEXW

typealias RTL_UMS_THREAD_INFO_CLASSVar = IntVarOf<RTL_UMS_THREAD_INFO_CLASS>
typealias RTL_UMS_THREAD_INFO_CLASS = _RTL_UMS_THREAD_INFO_CLASS

typealias PRTL_UMS_THREAD_INFO_CLASSVar = CPointerVarOf<PRTL_UMS_THREAD_INFO_CLASS>
typealias PRTL_UMS_THREAD_INFO_CLASS = CPointer<_RTL_UMS_THREAD_INFO_CLASSVar>

typealias RTL_UMS_SCHEDULER_REASONVar = IntVarOf<RTL_UMS_SCHEDULER_REASON>
typealias RTL_UMS_SCHEDULER_REASON = _RTL_UMS_SCHEDULER_REASON

typealias PRTL_UMS_SCHEDULER_REASONVar = CPointerVarOf<PRTL_UMS_SCHEDULER_REASON>
typealias PRTL_UMS_SCHEDULER_REASON = CPointer<_RTL_UMS_SCHEDULER_REASONVar>

typealias RTL_UMS_SCHEDULER_ENTRY_POINT = CFunction<(RTL_UMS_SCHEDULER_REASON, ULONG_PTR, PVOID?) -> Unit>

typealias PRTL_UMS_SCHEDULER_ENTRY_POINTVar = CPointerVarOf<PRTL_UMS_SCHEDULER_ENTRY_POINT>
typealias PRTL_UMS_SCHEDULER_ENTRY_POINT = CPointer<RTL_UMS_SCHEDULER_ENTRY_POINT>

typealias PRTL_CRITICAL_SECTION_DEBUGVar = CPointerVarOf<PRTL_CRITICAL_SECTION_DEBUG>
typealias PRTL_CRITICAL_SECTION_DEBUG = CPointer<_RTL_CRITICAL_SECTION_DEBUG>

typealias RTL_CRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG

typealias RTL_RESOURCE_DEBUG = _RTL_CRITICAL_SECTION_DEBUG

typealias PRTL_RESOURCE_DEBUGVar = CPointerVarOf<PRTL_RESOURCE_DEBUG>
typealias PRTL_RESOURCE_DEBUG = CPointer<_RTL_CRITICAL_SECTION_DEBUG>

typealias RTL_CRITICAL_SECTION = _RTL_CRITICAL_SECTION

typealias PRTL_CRITICAL_SECTIONVar = CPointerVarOf<PRTL_CRITICAL_SECTION>
typealias PRTL_CRITICAL_SECTION = CPointer<_RTL_CRITICAL_SECTION>

typealias RTL_SRWLOCK = _RTL_SRWLOCK

typealias PRTL_SRWLOCKVar = CPointerVarOf<PRTL_SRWLOCK>
typealias PRTL_SRWLOCK = CPointer<_RTL_SRWLOCK>

typealias RTL_CONDITION_VARIABLE = _RTL_CONDITION_VARIABLE

typealias PRTL_CONDITION_VARIABLEVar = CPointerVarOf<PRTL_CONDITION_VARIABLE>
typealias PRTL_CONDITION_VARIABLE = CPointer<_RTL_CONDITION_VARIABLE>

typealias PAPCFUNCVar = CPointerVarOf<PAPCFUNC>
typealias PAPCFUNC = CPointer<CFunction<(ULONG_PTR) -> Unit>>

typealias PVECTORED_EXCEPTION_HANDLERVar = CPointerVarOf<PVECTORED_EXCEPTION_HANDLER>
typealias PVECTORED_EXCEPTION_HANDLER = CPointer<CFunction<(CPointer<_EXCEPTION_POINTERS>?) -> LONG>>

typealias HEAP_INFORMATION_CLASSVar = _HEAP_INFORMATION_CLASS.Var
typealias HEAP_INFORMATION_CLASS = _HEAP_INFORMATION_CLASS

typealias WORKERCALLBACKFUNCVar = CPointerVarOf<WORKERCALLBACKFUNC>
typealias WORKERCALLBACKFUNC = CPointer<CFunction<(PVOID?) -> Unit>>

typealias APC_CALLBACK_FUNCTIONVar = CPointerVarOf<APC_CALLBACK_FUNCTION>
typealias APC_CALLBACK_FUNCTION = CPointer<CFunction<(DWORD, PVOID?, PVOID?) -> Unit>>

typealias WAITORTIMERCALLBACKFUNCVar = CPointerVarOf<WAITORTIMERCALLBACKFUNC>
typealias WAITORTIMERCALLBACKFUNC = CPointer<CFunction<(PVOID?, BOOLEAN) -> Unit>>

typealias WAITORTIMERCALLBACKVar = CPointerVarOf<WAITORTIMERCALLBACK>
typealias WAITORTIMERCALLBACK = WAITORTIMERCALLBACKFUNC

typealias PFLS_CALLBACK_FUNCTIONVar = CPointerVarOf<PFLS_CALLBACK_FUNCTION>
typealias PFLS_CALLBACK_FUNCTION = CPointer<CFunction<(PVOID?) -> Unit>>

typealias PSECURE_MEMORY_CACHE_CALLBACKVar = CPointerVarOf<PSECURE_MEMORY_CACHE_CALLBACK>
typealias PSECURE_MEMORY_CACHE_CALLBACK = CPointer<CFunction<(PVOID?, SIZE_T) -> BOOLEAN>>

typealias ACTIVATION_CONTEXT_INFO_CLASSVar = IntVarOf<ACTIVATION_CONTEXT_INFO_CLASS>
typealias ACTIVATION_CONTEXT_INFO_CLASS = _ACTIVATION_CONTEXT_INFO_CLASS

typealias ACTIVATION_CONTEXT_QUERY_INDEX = _ACTIVATION_CONTEXT_QUERY_INDEX

typealias PACTIVATION_CONTEXT_QUERY_INDEXVar = CPointerVarOf<PACTIVATION_CONTEXT_QUERY_INDEX>
typealias PACTIVATION_CONTEXT_QUERY_INDEX = CPointer<_ACTIVATION_CONTEXT_QUERY_INDEX>

typealias ASSEMBLY_FILE_DETAILED_INFORMATION = _ASSEMBLY_FILE_DETAILED_INFORMATION

typealias PASSEMBLY_FILE_DETAILED_INFORMATIONVar = CPointerVarOf<PASSEMBLY_FILE_DETAILED_INFORMATION>
typealias PASSEMBLY_FILE_DETAILED_INFORMATION = CPointer<_ASSEMBLY_FILE_DETAILED_INFORMATION>

typealias ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION

typealias PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATIONVar = CPointerVarOf<PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION>
typealias PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = CPointer<_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION>

typealias ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION

typealias PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATIONVar = CPointerVarOf<PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION>
typealias PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = CPointer<_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION>

typealias COMPATIBILITY_CONTEXT_ELEMENT = _COMPATIBILITY_CONTEXT_ELEMENT

typealias PCOMPATIBILITY_CONTEXT_ELEMENTVar = CPointerVarOf<PCOMPATIBILITY_CONTEXT_ELEMENT>
typealias PCOMPATIBILITY_CONTEXT_ELEMENT = CPointer<_COMPATIBILITY_CONTEXT_ELEMENT>

typealias ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION

typealias PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATIONVar = CPointerVarOf<PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION>
typealias PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = CPointer<_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION>

typealias SUPPORTED_OS_INFO = _SUPPORTED_OS_INFO

typealias PSUPPORTED_OS_INFOVar = CPointerVarOf<PSUPPORTED_OS_INFO>
typealias PSUPPORTED_OS_INFO = CPointer<_SUPPORTED_OS_INFO>

typealias ACTIVATION_CONTEXT_DETAILED_INFORMATION = _ACTIVATION_CONTEXT_DETAILED_INFORMATION

typealias PACTIVATION_CONTEXT_DETAILED_INFORMATIONVar = CPointerVarOf<PACTIVATION_CONTEXT_DETAILED_INFORMATION>
typealias PACTIVATION_CONTEXT_DETAILED_INFORMATION = CPointer<_ACTIVATION_CONTEXT_DETAILED_INFORMATION>

typealias PCACTIVATION_CONTEXT_QUERY_INDEXVar = CPointerVarOf<PCACTIVATION_CONTEXT_QUERY_INDEX>
typealias PCACTIVATION_CONTEXT_QUERY_INDEX = CPointer<_ACTIVATION_CONTEXT_QUERY_INDEX>

typealias PCASSEMBLY_FILE_DETAILED_INFORMATIONVar = CPointerVarOf<PCASSEMBLY_FILE_DETAILED_INFORMATION>
typealias PCASSEMBLY_FILE_DETAILED_INFORMATION = CPointer<ASSEMBLY_FILE_DETAILED_INFORMATION>

typealias PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATIONVar = CPointerVarOf<PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION>
typealias PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = CPointer<_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION>

typealias PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATIONVar = CPointerVarOf<PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION>
typealias PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = CPointer<_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION>

typealias PCCOMPATIBILITY_CONTEXT_ELEMENTVar = CPointerVarOf<PCCOMPATIBILITY_CONTEXT_ELEMENT>
typealias PCCOMPATIBILITY_CONTEXT_ELEMENT = CPointer<_COMPATIBILITY_CONTEXT_ELEMENT>

typealias PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATIONVar = CPointerVarOf<PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION>
typealias PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = CPointer<_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION>

typealias PCACTIVATION_CONTEXT_DETAILED_INFORMATIONVar = CPointerVarOf<PCACTIVATION_CONTEXT_DETAILED_INFORMATION>
typealias PCACTIVATION_CONTEXT_DETAILED_INFORMATION = CPointer<_ACTIVATION_CONTEXT_DETAILED_INFORMATION>

typealias RTL_VERIFIER_DLL_LOAD_CALLBACKVar = CPointerVarOf<RTL_VERIFIER_DLL_LOAD_CALLBACK>
typealias RTL_VERIFIER_DLL_LOAD_CALLBACK = CPointer<CFunction<(PWSTR?, PVOID?, SIZE_T, PVOID?) -> Unit>>

typealias RTL_VERIFIER_DLL_UNLOAD_CALLBACKVar = CPointerVarOf<RTL_VERIFIER_DLL_UNLOAD_CALLBACK>
typealias RTL_VERIFIER_DLL_UNLOAD_CALLBACK = CPointer<CFunction<(PWSTR?, PVOID?, SIZE_T, PVOID?) -> Unit>>

typealias RTL_VERIFIER_NTDLLHEAPFREE_CALLBACKVar = CPointerVarOf<RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK>
typealias RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK = CPointer<CFunction<(PVOID?, SIZE_T) -> Unit>>

typealias RTL_VERIFIER_THUNK_DESCRIPTOR = _RTL_VERIFIER_THUNK_DESCRIPTOR

typealias PRTL_VERIFIER_THUNK_DESCRIPTORVar = CPointerVarOf<PRTL_VERIFIER_THUNK_DESCRIPTOR>
typealias PRTL_VERIFIER_THUNK_DESCRIPTOR = CPointer<_RTL_VERIFIER_THUNK_DESCRIPTOR>

typealias RTL_VERIFIER_DLL_DESCRIPTOR = _RTL_VERIFIER_DLL_DESCRIPTOR

typealias PRTL_VERIFIER_DLL_DESCRIPTORVar = CPointerVarOf<PRTL_VERIFIER_DLL_DESCRIPTOR>
typealias PRTL_VERIFIER_DLL_DESCRIPTOR = CPointer<_RTL_VERIFIER_DLL_DESCRIPTOR>

typealias RTL_VERIFIER_PROVIDER_DESCRIPTOR = _RTL_VERIFIER_PROVIDER_DESCRIPTOR

typealias PRTL_VERIFIER_PROVIDER_DESCRIPTORVar = CPointerVarOf<PRTL_VERIFIER_PROVIDER_DESCRIPTOR>
typealias PRTL_VERIFIER_PROVIDER_DESCRIPTOR = CPointer<_RTL_VERIFIER_PROVIDER_DESCRIPTOR>

typealias PSIZE_TVar = CPointerVarOf<PSIZE_T>
typealias PSIZE_T = CPointer<ULONG_PTRVar>

typealias HARDWARE_COUNTER_DATA = _HARDWARE_COUNTER_DATA

typealias PHARDWARE_COUNTER_DATAVar = CPointerVarOf<PHARDWARE_COUNTER_DATA>
typealias PHARDWARE_COUNTER_DATA = CPointer<_HARDWARE_COUNTER_DATA>

typealias PERFORMANCE_DATA = _PERFORMANCE_DATA

typealias PPERFORMANCE_DATAVar = CPointerVarOf<PPERFORMANCE_DATA>
typealias PPERFORMANCE_DATA = CPointer<_PERFORMANCE_DATA>

typealias EVENTLOGRECORD = _EVENTLOGRECORD

typealias PEVENTLOGRECORDVar = CPointerVarOf<PEVENTLOGRECORD>
typealias PEVENTLOGRECORD = CPointer<_EVENTLOGRECORD>

typealias EVENTSFORLOGFILE = _EVENTSFORLOGFILE

typealias PEVENTSFORLOGFILEVar = CPointerVarOf<PEVENTSFORLOGFILE>
typealias PEVENTSFORLOGFILE = CPointer<_EVENTSFORLOGFILE>

typealias PACKEDEVENTINFO = _PACKEDEVENTINFO

typealias PPACKEDEVENTINFOVar = CPointerVarOf<PPACKEDEVENTINFO>
typealias PPACKEDEVENTINFO = CPointer<_PACKEDEVENTINFO>

typealias SERVICE_NODE_TYPEVar = IntVarOf<SERVICE_NODE_TYPE>
typealias SERVICE_NODE_TYPE = _CM_SERVICE_NODE_TYPE

typealias SERVICE_LOAD_TYPEVar = IntVarOf<SERVICE_LOAD_TYPE>
typealias SERVICE_LOAD_TYPE = _CM_SERVICE_LOAD_TYPE

typealias SERVICE_ERROR_TYPEVar = IntVarOf<SERVICE_ERROR_TYPE>
typealias SERVICE_ERROR_TYPE = _CM_ERROR_CONTROL_TYPE

typealias TAPE_ERASE = _TAPE_ERASE

typealias PTAPE_ERASEVar = CPointerVarOf<PTAPE_ERASE>
typealias PTAPE_ERASE = CPointer<_TAPE_ERASE>

typealias TAPE_PREPARE = _TAPE_PREPARE

typealias PTAPE_PREPAREVar = CPointerVarOf<PTAPE_PREPARE>
typealias PTAPE_PREPARE = CPointer<_TAPE_PREPARE>

typealias TAPE_WRITE_MARKS = _TAPE_WRITE_MARKS

typealias PTAPE_WRITE_MARKSVar = CPointerVarOf<PTAPE_WRITE_MARKS>
typealias PTAPE_WRITE_MARKS = CPointer<_TAPE_WRITE_MARKS>

typealias TAPE_GET_POSITION = _TAPE_GET_POSITION

typealias PTAPE_GET_POSITIONVar = CPointerVarOf<PTAPE_GET_POSITION>
typealias PTAPE_GET_POSITION = CPointer<_TAPE_GET_POSITION>

typealias TAPE_SET_POSITION = _TAPE_SET_POSITION

typealias PTAPE_SET_POSITIONVar = CPointerVarOf<PTAPE_SET_POSITION>
typealias PTAPE_SET_POSITION = CPointer<_TAPE_SET_POSITION>

typealias TAPE_GET_DRIVE_PARAMETERS = _TAPE_GET_DRIVE_PARAMETERS

typealias PTAPE_GET_DRIVE_PARAMETERSVar = CPointerVarOf<PTAPE_GET_DRIVE_PARAMETERS>
typealias PTAPE_GET_DRIVE_PARAMETERS = CPointer<_TAPE_GET_DRIVE_PARAMETERS>

typealias TAPE_SET_DRIVE_PARAMETERS = _TAPE_SET_DRIVE_PARAMETERS

typealias PTAPE_SET_DRIVE_PARAMETERSVar = CPointerVarOf<PTAPE_SET_DRIVE_PARAMETERS>
typealias PTAPE_SET_DRIVE_PARAMETERS = CPointer<_TAPE_SET_DRIVE_PARAMETERS>

typealias TAPE_GET_MEDIA_PARAMETERS = _TAPE_GET_MEDIA_PARAMETERS

typealias PTAPE_GET_MEDIA_PARAMETERSVar = CPointerVarOf<PTAPE_GET_MEDIA_PARAMETERS>
typealias PTAPE_GET_MEDIA_PARAMETERS = CPointer<_TAPE_GET_MEDIA_PARAMETERS>

typealias TAPE_SET_MEDIA_PARAMETERS = _TAPE_SET_MEDIA_PARAMETERS

typealias PTAPE_SET_MEDIA_PARAMETERSVar = CPointerVarOf<PTAPE_SET_MEDIA_PARAMETERS>
typealias PTAPE_SET_MEDIA_PARAMETERS = CPointer<_TAPE_SET_MEDIA_PARAMETERS>

typealias TAPE_CREATE_PARTITION = _TAPE_CREATE_PARTITION

typealias PTAPE_CREATE_PARTITIONVar = CPointerVarOf<PTAPE_CREATE_PARTITION>
typealias PTAPE_CREATE_PARTITION = CPointer<_TAPE_CREATE_PARTITION>

typealias TAPE_WMI_OPERATIONS = _TAPE_WMI_OPERATIONS

typealias PTAPE_WMI_OPERATIONSVar = CPointerVarOf<PTAPE_WMI_OPERATIONS>
typealias PTAPE_WMI_OPERATIONS = CPointer<_TAPE_WMI_OPERATIONS>

typealias TAPE_DRIVE_PROBLEM_TYPEVar = _TAPE_DRIVE_PROBLEM_TYPE.Var
typealias TAPE_DRIVE_PROBLEM_TYPE = _TAPE_DRIVE_PROBLEM_TYPE

typealias TP_VERSIONVar = IntVarOf<TP_VERSION>
typealias TP_VERSION = DWORD

typealias PTP_VERSIONVar = CPointerVarOf<PTP_VERSION>
typealias PTP_VERSION = CPointer<DWORDVar>

typealias TP_CALLBACK_INSTANCE = _TP_CALLBACK_INSTANCE

typealias PTP_CALLBACK_INSTANCEVar = CPointerVarOf<PTP_CALLBACK_INSTANCE>
typealias PTP_CALLBACK_INSTANCE = CPointer<_TP_CALLBACK_INSTANCE>

typealias PTP_SIMPLE_CALLBACKVar = CPointerVarOf<PTP_SIMPLE_CALLBACK>
typealias PTP_SIMPLE_CALLBACK = CPointer<CFunction<(PTP_CALLBACK_INSTANCE?, PVOID?) -> Unit>>

typealias TP_POOL = _TP_POOL

typealias PTP_POOLVar = CPointerVarOf<PTP_POOL>
typealias PTP_POOL = CPointer<_TP_POOL>

typealias TP_CALLBACK_PRIORITYVar = IntVarOf<TP_CALLBACK_PRIORITY>
typealias TP_CALLBACK_PRIORITY = _TP_CALLBACK_PRIORITY

typealias TP_POOL_STACK_INFORMATION = _TP_POOL_STACK_INFORMATION

typealias PTP_POOL_STACK_INFORMATIONVar = CPointerVarOf<PTP_POOL_STACK_INFORMATION>
typealias PTP_POOL_STACK_INFORMATION = CPointer<_TP_POOL_STACK_INFORMATION>

typealias TP_CLEANUP_GROUP = _TP_CLEANUP_GROUP

typealias PTP_CLEANUP_GROUPVar = CPointerVarOf<PTP_CLEANUP_GROUP>
typealias PTP_CLEANUP_GROUP = CPointer<_TP_CLEANUP_GROUP>

typealias PTP_CLEANUP_GROUP_CANCEL_CALLBACKVar = CPointerVarOf<PTP_CLEANUP_GROUP_CANCEL_CALLBACK>
typealias PTP_CLEANUP_GROUP_CANCEL_CALLBACK = CPointer<CFunction<(PVOID?, PVOID?) -> Unit>>

typealias TP_CALLBACK_ENVIRON_V1 = _TP_CALLBACK_ENVIRON_V1

typealias TP_CALLBACK_ENVIRON = TP_CALLBACK_ENVIRON_V1

typealias PTP_CALLBACK_ENVIRONVar = CPointerVarOf<PTP_CALLBACK_ENVIRON>
typealias PTP_CALLBACK_ENVIRON = CPointer<TP_CALLBACK_ENVIRON_V1>

typealias TP_WORK = _TP_WORK

typealias PTP_WORKVar = CPointerVarOf<PTP_WORK>
typealias PTP_WORK = CPointer<_TP_WORK>

typealias PTP_WORK_CALLBACKVar = CPointerVarOf<PTP_WORK_CALLBACK>
typealias PTP_WORK_CALLBACK = CPointer<CFunction<(PTP_CALLBACK_INSTANCE?, PVOID?, PTP_WORK?) -> Unit>>

typealias TP_TIMER = _TP_TIMER

typealias PTP_TIMERVar = CPointerVarOf<PTP_TIMER>
typealias PTP_TIMER = CPointer<_TP_TIMER>

typealias PTP_TIMER_CALLBACKVar = CPointerVarOf<PTP_TIMER_CALLBACK>
typealias PTP_TIMER_CALLBACK = CPointer<CFunction<(PTP_CALLBACK_INSTANCE?, PVOID?, PTP_TIMER?) -> Unit>>

typealias TP_WAIT_RESULTVar = IntVarOf<TP_WAIT_RESULT>
typealias TP_WAIT_RESULT = DWORD

typealias TP_WAIT = _TP_WAIT

typealias PTP_WAITVar = CPointerVarOf<PTP_WAIT>
typealias PTP_WAIT = CPointer<_TP_WAIT>

typealias PTP_WAIT_CALLBACKVar = CPointerVarOf<PTP_WAIT_CALLBACK>
typealias PTP_WAIT_CALLBACK = CPointer<CFunction<(PTP_CALLBACK_INSTANCE?, PVOID?, PTP_WAIT?, TP_WAIT_RESULT) -> Unit>>

typealias TP_IO = _TP_IO

typealias PTP_IOVar = CPointerVarOf<PTP_IO>
typealias PTP_IO = CPointer<_TP_IO>

typealias TRANSACTION_OUTCOMEVar = IntVarOf<TRANSACTION_OUTCOME>
typealias TRANSACTION_OUTCOME = _TRANSACTION_OUTCOME

typealias TRANSACTION_STATEVar = IntVarOf<TRANSACTION_STATE>
typealias TRANSACTION_STATE = _TRANSACTION_STATE

typealias TRANSACTION_BASIC_INFORMATION = _TRANSACTION_BASIC_INFORMATION

typealias PTRANSACTION_BASIC_INFORMATIONVar = CPointerVarOf<PTRANSACTION_BASIC_INFORMATION>
typealias PTRANSACTION_BASIC_INFORMATION = CPointer<_TRANSACTION_BASIC_INFORMATION>

typealias TRANSACTIONMANAGER_BASIC_INFORMATION = _TRANSACTIONMANAGER_BASIC_INFORMATION

typealias PTRANSACTIONMANAGER_BASIC_INFORMATIONVar = CPointerVarOf<PTRANSACTIONMANAGER_BASIC_INFORMATION>
typealias PTRANSACTIONMANAGER_BASIC_INFORMATION = CPointer<_TRANSACTIONMANAGER_BASIC_INFORMATION>

typealias TRANSACTIONMANAGER_LOG_INFORMATION = _TRANSACTIONMANAGER_LOG_INFORMATION

typealias PTRANSACTIONMANAGER_LOG_INFORMATIONVar = CPointerVarOf<PTRANSACTIONMANAGER_LOG_INFORMATION>
typealias PTRANSACTIONMANAGER_LOG_INFORMATION = CPointer<_TRANSACTIONMANAGER_LOG_INFORMATION>

typealias TRANSACTIONMANAGER_LOGPATH_INFORMATION = _TRANSACTIONMANAGER_LOGPATH_INFORMATION

typealias PTRANSACTIONMANAGER_LOGPATH_INFORMATIONVar = CPointerVarOf<PTRANSACTIONMANAGER_LOGPATH_INFORMATION>
typealias PTRANSACTIONMANAGER_LOGPATH_INFORMATION = CPointer<_TRANSACTIONMANAGER_LOGPATH_INFORMATION>

typealias TRANSACTIONMANAGER_RECOVERY_INFORMATION = _TRANSACTIONMANAGER_RECOVERY_INFORMATION

typealias PTRANSACTIONMANAGER_RECOVERY_INFORMATIONVar = CPointerVarOf<PTRANSACTIONMANAGER_RECOVERY_INFORMATION>
typealias PTRANSACTIONMANAGER_RECOVERY_INFORMATION = CPointer<_TRANSACTIONMANAGER_RECOVERY_INFORMATION>

typealias TRANSACTIONMANAGER_OLDEST_INFORMATION = _TRANSACTIONMANAGER_OLDEST_INFORMATION

typealias PTRANSACTIONMANAGER_OLDEST_INFORMATIONVar = CPointerVarOf<PTRANSACTIONMANAGER_OLDEST_INFORMATION>
typealias PTRANSACTIONMANAGER_OLDEST_INFORMATION = CPointer<_TRANSACTIONMANAGER_OLDEST_INFORMATION>

typealias TRANSACTION_PROPERTIES_INFORMATION = _TRANSACTION_PROPERTIES_INFORMATION

typealias PTRANSACTION_PROPERTIES_INFORMATIONVar = CPointerVarOf<PTRANSACTION_PROPERTIES_INFORMATION>
typealias PTRANSACTION_PROPERTIES_INFORMATION = CPointer<_TRANSACTION_PROPERTIES_INFORMATION>

typealias TRANSACTION_BIND_INFORMATION = _TRANSACTION_BIND_INFORMATION

typealias PTRANSACTION_BIND_INFORMATIONVar = CPointerVarOf<PTRANSACTION_BIND_INFORMATION>
typealias PTRANSACTION_BIND_INFORMATION = CPointer<_TRANSACTION_BIND_INFORMATION>

typealias TRANSACTION_ENLISTMENT_PAIR = _TRANSACTION_ENLISTMENT_PAIR

typealias PTRANSACTION_ENLISTMENT_PAIRVar = CPointerVarOf<PTRANSACTION_ENLISTMENT_PAIR>
typealias PTRANSACTION_ENLISTMENT_PAIR = CPointer<_TRANSACTION_ENLISTMENT_PAIR>

typealias TRANSACTION_ENLISTMENTS_INFORMATION = _TRANSACTION_ENLISTMENTS_INFORMATION

typealias PTRANSACTION_ENLISTMENTS_INFORMATIONVar = CPointerVarOf<PTRANSACTION_ENLISTMENTS_INFORMATION>
typealias PTRANSACTION_ENLISTMENTS_INFORMATION = CPointer<_TRANSACTION_ENLISTMENTS_INFORMATION>

typealias TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION

typealias PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATIONVar = CPointerVarOf<PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION>
typealias PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = CPointer<_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION>

typealias RESOURCEMANAGER_BASIC_INFORMATION = _RESOURCEMANAGER_BASIC_INFORMATION

typealias PRESOURCEMANAGER_BASIC_INFORMATIONVar = CPointerVarOf<PRESOURCEMANAGER_BASIC_INFORMATION>
typealias PRESOURCEMANAGER_BASIC_INFORMATION = CPointer<_RESOURCEMANAGER_BASIC_INFORMATION>

typealias RESOURCEMANAGER_COMPLETION_INFORMATION = _RESOURCEMANAGER_COMPLETION_INFORMATION

typealias PRESOURCEMANAGER_COMPLETION_INFORMATIONVar = CPointerVarOf<PRESOURCEMANAGER_COMPLETION_INFORMATION>
typealias PRESOURCEMANAGER_COMPLETION_INFORMATION = CPointer<_RESOURCEMANAGER_COMPLETION_INFORMATION>

typealias TRANSACTION_INFORMATION_CLASSVar = _TRANSACTION_INFORMATION_CLASS.Var
typealias TRANSACTION_INFORMATION_CLASS = _TRANSACTION_INFORMATION_CLASS

typealias TRANSACTIONMANAGER_INFORMATION_CLASSVar = IntVarOf<TRANSACTIONMANAGER_INFORMATION_CLASS>
typealias TRANSACTIONMANAGER_INFORMATION_CLASS = _TRANSACTIONMANAGER_INFORMATION_CLASS

typealias RESOURCEMANAGER_INFORMATION_CLASSVar = _RESOURCEMANAGER_INFORMATION_CLASS.Var
typealias RESOURCEMANAGER_INFORMATION_CLASS = _RESOURCEMANAGER_INFORMATION_CLASS

typealias ENLISTMENT_BASIC_INFORMATION = _ENLISTMENT_BASIC_INFORMATION

typealias PENLISTMENT_BASIC_INFORMATIONVar = CPointerVarOf<PENLISTMENT_BASIC_INFORMATION>
typealias PENLISTMENT_BASIC_INFORMATION = CPointer<_ENLISTMENT_BASIC_INFORMATION>

typealias ENLISTMENT_CRM_INFORMATION = _ENLISTMENT_CRM_INFORMATION

typealias PENLISTMENT_CRM_INFORMATIONVar = CPointerVarOf<PENLISTMENT_CRM_INFORMATION>
typealias PENLISTMENT_CRM_INFORMATION = CPointer<_ENLISTMENT_CRM_INFORMATION>

typealias ENLISTMENT_INFORMATION_CLASSVar = _ENLISTMENT_INFORMATION_CLASS.Var
typealias ENLISTMENT_INFORMATION_CLASS = _ENLISTMENT_INFORMATION_CLASS

typealias TRANSACTION_LIST_ENTRY = _TRANSACTION_LIST_ENTRY

typealias PTRANSACTION_LIST_ENTRYVar = CPointerVarOf<PTRANSACTION_LIST_ENTRY>
typealias PTRANSACTION_LIST_ENTRY = CPointer<_TRANSACTION_LIST_ENTRY>

typealias TRANSACTION_LIST_INFORMATION = _TRANSACTION_LIST_INFORMATION

typealias PTRANSACTION_LIST_INFORMATIONVar = CPointerVarOf<PTRANSACTION_LIST_INFORMATION>
typealias PTRANSACTION_LIST_INFORMATION = CPointer<_TRANSACTION_LIST_INFORMATION>

typealias KTMOBJECT_TYPEVar = _KTMOBJECT_TYPE.Var
typealias KTMOBJECT_TYPE = _KTMOBJECT_TYPE

typealias PKTMOBJECT_TYPEVar = CPointerVarOf<PKTMOBJECT_TYPE>
typealias PKTMOBJECT_TYPE = CPointer<_KTMOBJECT_TYPE.Var>

typealias KTMOBJECT_CURSOR = _KTMOBJECT_CURSOR

typealias PKTMOBJECT_CURSORVar = CPointerVarOf<PKTMOBJECT_CURSOR>
typealias PKTMOBJECT_CURSOR = CPointer<_KTMOBJECT_CURSOR>

typealias WOW64_FLOATING_SAVE_AREA = _WOW64_FLOATING_SAVE_AREA

typealias PWOW64_FLOATING_SAVE_AREAVar = CPointerVarOf<PWOW64_FLOATING_SAVE_AREA>
typealias PWOW64_FLOATING_SAVE_AREA = CPointer<_WOW64_FLOATING_SAVE_AREA>

typealias WOW64_CONTEXT = _WOW64_CONTEXT

typealias PWOW64_CONTEXTVar = CPointerVarOf<PWOW64_CONTEXT>
typealias PWOW64_CONTEXT = CPointer<_WOW64_CONTEXT>

typealias WOW64_LDT_ENTRY = _WOW64_LDT_ENTRY

typealias PWOW64_LDT_ENTRYVar = CPointerVarOf<PWOW64_LDT_ENTRY>
typealias PWOW64_LDT_ENTRY = CPointer<_WOW64_LDT_ENTRY>

typealias WOW64_DESCRIPTOR_TABLE_ENTRY = _WOW64_DESCRIPTOR_TABLE_ENTRY

typealias PWOW64_DESCRIPTOR_TABLE_ENTRYVar = CPointerVarOf<PWOW64_DESCRIPTOR_TABLE_ENTRY>
typealias PWOW64_DESCRIPTOR_TABLE_ENTRY = CPointer<_WOW64_DESCRIPTOR_TABLE_ENTRY>

typealias HWNDVar = CPointerVarOf<HWND>
typealias HWND = CPointer<HWND__>

typealias HHOOKVar = CPointerVarOf<HHOOK>
typealias HHOOK = CPointer<HHOOK__>

typealias HGDIOBJVar = CPointerVarOf<HGDIOBJ>
typealias HGDIOBJ = COpaquePointer

typealias HACCELVar = CPointerVarOf<HACCEL>
typealias HACCEL = CPointer<HACCEL__>

typealias HBITMAPVar = CPointerVarOf<HBITMAP>
typealias HBITMAP = CPointer<HBITMAP__>

typealias HBRUSHVar = CPointerVarOf<HBRUSH>
typealias HBRUSH = CPointer<HBRUSH__>

typealias HCOLORSPACEVar = CPointerVarOf<HCOLORSPACE>
typealias HCOLORSPACE = CPointer<HCOLORSPACE__>

typealias HDCVar = CPointerVarOf<HDC>
typealias HDC = CPointer<HDC__>

typealias HGLRCVar = CPointerVarOf<HGLRC>
typealias HGLRC = CPointer<HGLRC__>

typealias HDESKVar = CPointerVarOf<HDESK>
typealias HDESK = CPointer<HDESK__>

typealias HENHMETAFILEVar = CPointerVarOf<HENHMETAFILE>
typealias HENHMETAFILE = CPointer<HENHMETAFILE__>

typealias HFONTVar = CPointerVarOf<HFONT>
typealias HFONT = CPointer<HFONT__>

typealias HICONVar = CPointerVarOf<HICON>
typealias HICON = CPointer<HICON__>

typealias HMENUVar = CPointerVarOf<HMENU>
typealias HMENU = CPointer<HMENU__>

typealias HPALETTEVar = CPointerVarOf<HPALETTE>
typealias HPALETTE = CPointer<HPALETTE__>

typealias HPENVar = CPointerVarOf<HPEN>
typealias HPEN = CPointer<HPEN__>

typealias HMONITORVar = CPointerVarOf<HMONITOR>
typealias HMONITOR = CPointer<HMONITOR__>

typealias HWINEVENTHOOKVar = CPointerVarOf<HWINEVENTHOOK>
typealias HWINEVENTHOOK = CPointer<HWINEVENTHOOK__>

typealias HCURSORVar = CPointerVarOf<HCURSOR>
typealias HCURSOR = HICON

typealias COLORREFVar = IntVarOf<COLORREF>
typealias COLORREF = DWORD

typealias HUMPDVar = CPointerVarOf<HUMPD>
typealias HUMPD = CPointer<HUMPD__>

typealias LPCOLORREFVar = CPointerVarOf<LPCOLORREF>
typealias LPCOLORREF = CPointer<DWORDVar>

typealias RECT = tagRECT

typealias PRECTVar = CPointerVarOf<PRECT>
typealias PRECT = CPointer<tagRECT>

typealias NPRECTVar = CPointerVarOf<NPRECT>
typealias NPRECT = CPointer<tagRECT>

typealias LPRECTVar = CPointerVarOf<LPRECT>
typealias LPRECT = CPointer<tagRECT>

typealias LPCRECTVar = CPointerVarOf<LPCRECT>
typealias LPCRECT = CPointer<RECT>

typealias RECTL = _RECTL

typealias PRECTLVar = CPointerVarOf<PRECTL>
typealias PRECTL = CPointer<_RECTL>

typealias LPRECTLVar = CPointerVarOf<LPRECTL>
typealias LPRECTL = CPointer<_RECTL>

typealias LPCRECTLVar = CPointerVarOf<LPCRECTL>
typealias LPCRECTL = CPointer<RECTL>

typealias POINT = tagPOINT

typealias PPOINTVar = CPointerVarOf<PPOINT>
typealias PPOINT = CPointer<tagPOINT>

typealias NPPOINTVar = CPointerVarOf<NPPOINT>
typealias NPPOINT = CPointer<tagPOINT>

typealias LPPOINTVar = CPointerVarOf<LPPOINT>
typealias LPPOINT = CPointer<tagPOINT>

typealias POINTL = _POINTL

typealias PPOINTLVar = CPointerVarOf<PPOINTL>
typealias PPOINTL = CPointer<_POINTL>

typealias SIZE = tagSIZE

typealias PSIZEVar = CPointerVarOf<PSIZE>
typealias PSIZE = CPointer<tagSIZE>

typealias LPSIZEVar = CPointerVarOf<LPSIZE>
typealias LPSIZE = CPointer<tagSIZE>

typealias SIZEL = SIZE

typealias PSIZELVar = CPointerVarOf<PSIZEL>
typealias PSIZEL = CPointer<SIZE>

typealias LPSIZELVar = CPointerVarOf<LPSIZEL>
typealias LPSIZEL = CPointer<SIZE>

typealias POINTS = tagPOINTS

typealias PPOINTSVar = CPointerVarOf<PPOINTS>
typealias PPOINTS = CPointer<tagPOINTS>

typealias LPPOINTSVar = CPointerVarOf<LPPOINTS>
typealias LPPOINTS = CPointer<tagPOINTS>

typealias LPVOIDVar = CPointerVarOf<LPVOID>
typealias LPVOID = COpaquePointer

typealias PFIBER_START_ROUTINEVar = CPointerVarOf<PFIBER_START_ROUTINE>
typealias PFIBER_START_ROUTINE = CPointer<CFunction<(LPVOID?) -> Unit>>

typealias LPFIBER_START_ROUTINEVar = CPointerVarOf<LPFIBER_START_ROUTINE>
typealias LPFIBER_START_ROUTINE = PFIBER_START_ROUTINE

typealias LPLDT_ENTRYVar = CPointerVarOf<LPLDT_ENTRY>
typealias LPLDT_ENTRY = LPVOID

typealias COMMPROP = _COMMPROP

typealias LPCOMMPROPVar = CPointerVarOf<LPCOMMPROP>
typealias LPCOMMPROP = CPointer<_COMMPROP>

typealias COMSTAT = _COMSTAT

typealias LPCOMSTATVar = CPointerVarOf<LPCOMSTAT>
typealias LPCOMSTAT = CPointer<_COMSTAT>

typealias DCB = _DCB

typealias LPDCBVar = CPointerVarOf<LPDCB>
typealias LPDCB = CPointer<_DCB>

typealias COMMTIMEOUTS = _COMMTIMEOUTS

typealias LPCOMMTIMEOUTSVar = CPointerVarOf<LPCOMMTIMEOUTS>
typealias LPCOMMTIMEOUTS = CPointer<_COMMTIMEOUTS>

typealias COMMCONFIG = _COMMCONFIG

typealias LPCOMMCONFIGVar = CPointerVarOf<LPCOMMCONFIG>
typealias LPCOMMCONFIG = CPointer<_COMMCONFIG>

typealias MEMORYSTATUS = _MEMORYSTATUS

typealias LPMEMORYSTATUSVar = CPointerVarOf<LPMEMORYSTATUS>
typealias LPMEMORYSTATUS = CPointer<_MEMORYSTATUS>

typealias JIT_DEBUG_INFO = _JIT_DEBUG_INFO

typealias LPJIT_DEBUG_INFOVar = CPointerVarOf<LPJIT_DEBUG_INFO>
typealias LPJIT_DEBUG_INFO = CPointer<_JIT_DEBUG_INFO>

typealias JIT_DEBUG_INFO32 = JIT_DEBUG_INFO

typealias LPJIT_DEBUG_INFO32Var = CPointerVarOf<LPJIT_DEBUG_INFO32>
typealias LPJIT_DEBUG_INFO32 = CPointer<JIT_DEBUG_INFO>

typealias JIT_DEBUG_INFO64 = JIT_DEBUG_INFO

typealias LPJIT_DEBUG_INFO64Var = CPointerVarOf<LPJIT_DEBUG_INFO64>
typealias LPJIT_DEBUG_INFO64 = CPointer<JIT_DEBUG_INFO>

typealias LPEXCEPTION_RECORDVar = CPointerVarOf<LPEXCEPTION_RECORD>
typealias LPEXCEPTION_RECORD = PEXCEPTION_RECORD

typealias LPEXCEPTION_POINTERSVar = CPointerVarOf<LPEXCEPTION_POINTERS>
typealias LPEXCEPTION_POINTERS = PEXCEPTION_POINTERS

typealias OFSTRUCT = _OFSTRUCT

typealias LPOFSTRUCTVar = CPointerVarOf<LPOFSTRUCT>
typealias LPOFSTRUCT = CPointer<_OFSTRUCT>

typealias POFSTRUCTVar = CPointerVarOf<POFSTRUCT>
typealias POFSTRUCT = CPointer<_OFSTRUCT>

typealias HLOCALVar = CPointerVarOf<HLOCAL>
typealias HLOCAL = HANDLE

typealias UINTVar = IntVarOf<UINT>
typealias UINT = Int

typealias HINSTANCEVar = CPointerVarOf<HINSTANCE>
typealias HINSTANCE = CPointer<HINSTANCE__>

typealias HGLOBALVar = CPointerVarOf<HGLOBAL>
typealias HGLOBAL = HANDLE

typealias LPCVOIDVar = CPointerVarOf<LPCVOID>
typealias LPCVOID = COpaquePointer

typealias WINBOOLVar = IntVarOf<WINBOOL>
typealias WINBOOL = Int

typealias LPDWORDVar = CPointerVarOf<LPDWORD>
typealias LPDWORD = CPointer<DWORDVar>

typealias PDWORD_PTRVar = CPointerVarOf<PDWORD_PTR>
typealias PDWORD_PTR = CPointer<ULONG_PTRVar>

typealias DWORD_PTRVar = LongVarOf<DWORD_PTR>
typealias DWORD_PTR = ULONG_PTR

typealias THREAD_INFORMATION_CLASSVar = _THREAD_INFORMATION_CLASS.Var
typealias THREAD_INFORMATION_CLASS = _THREAD_INFORMATION_CLASS

typealias PROCESS_INFORMATION_CLASSVar = _PROCESS_INFORMATION_CLASS.Var
typealias PROCESS_INFORMATION_CLASS = _PROCESS_INFORMATION_CLASS

typealias PBOOLVar = CPointerVarOf<PBOOL>
typealias PBOOL = CPointer<WINBOOLVar>

typealias DEP_SYSTEM_POLICY_TYPEVar = IntVarOf<DEP_SYSTEM_POLICY_TYPE>
typealias DEP_SYSTEM_POLICY_TYPE = _DEP_SYSTEM_POLICY_TYPE

typealias ATOMVar = ShortVarOf<ATOM>
typealias ATOM = WORD

typealias LPOVERLAPPEDVar = CPointerVarOf<LPOVERLAPPED>
typealias LPOVERLAPPED = CPointer<_OVERLAPPED>

typealias LPFILETIMEVar = CPointerVarOf<LPFILETIME>
typealias LPFILETIME = CPointer<_FILETIME>

typealias FILETIME = _FILETIME

typealias LPWORDVar = CPointerVarOf<LPWORD>
typealias LPWORD = CPointer<WORDVar>

typealias __builtin_va_listVar = CPointerVarOf<__builtin_va_list>
typealias __builtin_va_list = CPointer<ByteVar>

typealias PBYTEVar = CPointerVarOf<PBYTE>
typealias PBYTE = CPointer<BYTEVar>

typealias PFE_EXPORT_FUNCVar = CPointerVarOf<PFE_EXPORT_FUNC>
typealias PFE_EXPORT_FUNC = CPointer<CFunction<(PBYTE?, PVOID?, ULONG) -> DWORD>>

typealias PULONGVar = CPointerVarOf<PULONG>
typealias PULONG = CPointer<ULONGVar>

typealias PFE_IMPORT_FUNCVar = CPointerVarOf<PFE_IMPORT_FUNC>
typealias PFE_IMPORT_FUNC = CPointer<CFunction<(PBYTE?, PVOID?, PULONG?) -> DWORD>>

typealias LPSECURITY_ATTRIBUTESVar = CPointerVarOf<LPSECURITY_ATTRIBUTES>
typealias LPSECURITY_ATTRIBUTES = CPointer<_SECURITY_ATTRIBUTES>

typealias HFILEVar = IntVarOf<HFILE>
typealias HFILE = Int

typealias LPINTVar = CPointerVarOf<LPINT>
typealias LPINT = CPointer<IntVar>

typealias LPBYTEVar = CPointerVarOf<LPBYTE>
typealias LPBYTE = CPointer<BYTEVar>

typealias WIN32_STREAM_ID = _WIN32_STREAM_ID

typealias LPWIN32_STREAM_IDVar = CPointerVarOf<LPWIN32_STREAM_ID>
typealias LPWIN32_STREAM_ID = CPointer<_WIN32_STREAM_ID>

typealias HMODULEVar = CPointerVarOf<HMODULE>
typealias HMODULE = HINSTANCE

typealias LPSTARTUPINFOAVar = CPointerVarOf<LPSTARTUPINFOA>
typealias LPSTARTUPINFOA = CPointer<_STARTUPINFOA>

typealias HRSRCVar = CPointerVarOf<HRSRC>
typealias HRSRC = CPointer<HRSRC__>

typealias LONG_PTRVar = LongVarOf<LONG_PTR>
typealias LONG_PTR = Long

typealias ENUMRESTYPEPROCAVar = CPointerVarOf<ENUMRESTYPEPROCA>
typealias ENUMRESTYPEPROCA = CPointer<CFunction<(HMODULE?, LPSTR?, LONG_PTR) -> WINBOOL>>

typealias ENUMRESTYPEPROCWVar = CPointerVarOf<ENUMRESTYPEPROCW>
typealias ENUMRESTYPEPROCW = CPointer<CFunction<(HMODULE?, LPWSTR?, LONG_PTR) -> WINBOOL>>

typealias ENUMRESNAMEPROCAVar = CPointerVarOf<ENUMRESNAMEPROCA>
typealias ENUMRESNAMEPROCA = CPointer<CFunction<(HMODULE?, LPCSTR?, LPSTR?, LONG_PTR) -> WINBOOL>>

typealias ENUMRESNAMEPROCWVar = CPointerVarOf<ENUMRESNAMEPROCW>
typealias ENUMRESNAMEPROCW = CPointer<CFunction<(HMODULE?, LPCWSTR?, LPWSTR?, LONG_PTR) -> WINBOOL>>

typealias ENUMRESLANGPROCAVar = CPointerVarOf<ENUMRESLANGPROCA>
typealias ENUMRESLANGPROCA = CPointer<CFunction<(HMODULE?, LPCSTR?, LPCSTR?, WORD, LONG_PTR) -> WINBOOL>>

typealias ENUMRESLANGPROCWVar = CPointerVarOf<ENUMRESLANGPROCW>
typealias ENUMRESLANGPROCW = CPointer<CFunction<(HMODULE?, LPCWSTR?, LPCWSTR?, WORD, LONG_PTR) -> WINBOOL>>

typealias PGET_SYSTEM_WOW64_DIRECTORY_AVar = CPointerVarOf<PGET_SYSTEM_WOW64_DIRECTORY_A>
typealias PGET_SYSTEM_WOW64_DIRECTORY_A = CPointer<CFunction<(LPSTR?, UINT) -> UINT>>

typealias PGET_SYSTEM_WOW64_DIRECTORY_WVar = CPointerVarOf<PGET_SYSTEM_WOW64_DIRECTORY_W>
typealias PGET_SYSTEM_WOW64_DIRECTORY_W = CPointer<CFunction<(LPWSTR?, UINT) -> UINT>>

typealias LPPROGRESS_ROUTINEVar = CPointerVarOf<LPPROGRESS_ROUTINE>
typealias LPPROGRESS_ROUTINE = CPointer<CFunction<(CValue<LARGE_INTEGER>, CValue<LARGE_INTEGER>, CValue<LARGE_INTEGER>, CValue<LARGE_INTEGER>, DWORD, DWORD, HANDLE?, HANDLE?, LPVOID?) -> DWORD>>

typealias LPBOOLVar = CPointerVarOf<LPBOOL>
typealias LPBOOL = CPointer<WINBOOLVar>

typealias STREAM_INFO_LEVELSVar = _STREAM_INFO_LEVELS.Var
typealias STREAM_INFO_LEVELS = _STREAM_INFO_LEVELS

typealias WIN32_FIND_STREAM_DATA = _WIN32_FIND_STREAM_DATA

typealias PWIN32_FIND_STREAM_DATAVar = CPointerVarOf<PWIN32_FIND_STREAM_DATA>
typealias PWIN32_FIND_STREAM_DATA = CPointer<_WIN32_FIND_STREAM_DATA>

typealias EVENTLOG_FULL_INFORMATION = _EVENTLOG_FULL_INFORMATION

typealias LPEVENTLOG_FULL_INFORMATIONVar = CPointerVarOf<LPEVENTLOG_FULL_INFORMATION>
typealias LPEVENTLOG_FULL_INFORMATION = CPointer<_EVENTLOG_FULL_INFORMATION>

typealias LPOVERLAPPED_COMPLETION_ROUTINEVar = CPointerVarOf<LPOVERLAPPED_COMPLETION_ROUTINE>
typealias LPOVERLAPPED_COMPLETION_ROUTINE = CPointer<CFunction<(DWORD, DWORD, LPOVERLAPPED?) -> Unit>>

typealias UINT_PTRVar = LongVarOf<UINT_PTR>
typealias UINT_PTR = Long

typealias COMPUTER_NAME_FORMATVar = _COMPUTER_NAME_FORMAT.Var
typealias COMPUTER_NAME_FORMAT = _COMPUTER_NAME_FORMAT

typealias LPPROCESS_INFORMATIONVar = CPointerVarOf<LPPROCESS_INFORMATION>
typealias LPPROCESS_INFORMATION = CPointer<_PROCESS_INFORMATION>

typealias LPSTARTUPINFOWVar = CPointerVarOf<LPSTARTUPINFOW>
typealias LPSTARTUPINFOW = CPointer<_STARTUPINFOW>

typealias HW_PROFILE_INFOA = tagHW_PROFILE_INFOA

typealias LPHW_PROFILE_INFOAVar = CPointerVarOf<LPHW_PROFILE_INFOA>
typealias LPHW_PROFILE_INFOA = CPointer<tagHW_PROFILE_INFOA>

typealias HW_PROFILE_INFOW = tagHW_PROFILE_INFOW

typealias LPHW_PROFILE_INFOWVar = CPointerVarOf<LPHW_PROFILE_INFOW>
typealias LPHW_PROFILE_INFOW = CPointer<tagHW_PROFILE_INFOW>

typealias HW_PROFILE_INFO = HW_PROFILE_INFOW

typealias LPHW_PROFILE_INFOVar = CPointerVarOf<LPHW_PROFILE_INFO>
typealias LPHW_PROFILE_INFO = LPHW_PROFILE_INFOW

typealias SYSTEM_POWER_STATUS = _SYSTEM_POWER_STATUS

typealias LPSYSTEM_POWER_STATUSVar = CPointerVarOf<LPSYSTEM_POWER_STATUS>
typealias LPSYSTEM_POWER_STATUS = CPointer<_SYSTEM_POWER_STATUS>

typealias PULONG_PTRVar = CPointerVarOf<PULONG_PTR>
typealias PULONG_PTR = CPointer<LongVar>

typealias USHORTVar = ShortVarOf<USHORT>
typealias USHORT = Short

typealias ACTCTXA = tagACTCTXA

typealias PACTCTXAVar = CPointerVarOf<PACTCTXA>
typealias PACTCTXA = CPointer<tagACTCTXA>

typealias ACTCTXW = tagACTCTXW

typealias PACTCTXWVar = CPointerVarOf<PACTCTXW>
typealias PACTCTXW = CPointer<tagACTCTXW>

typealias ACTCTX = ACTCTXW

typealias PACTCTXVar = CPointerVarOf<PACTCTX>
typealias PACTCTX = PACTCTXW

typealias PCACTCTXAVar = CPointerVarOf<PCACTCTXA>
typealias PCACTCTXA = CPointer<ACTCTXA>

typealias PCACTCTXWVar = CPointerVarOf<PCACTCTXW>
typealias PCACTCTXW = CPointer<ACTCTXW>

typealias PCACTCTXVar = CPointerVarOf<PCACTCTX>
typealias PCACTCTX = PCACTCTXW

typealias ACTCTX_SECTION_KEYED_DATA_2600 = tagACTCTX_SECTION_KEYED_DATA_2600

typealias PACTCTX_SECTION_KEYED_DATA_2600Var = CPointerVarOf<PACTCTX_SECTION_KEYED_DATA_2600>
typealias PACTCTX_SECTION_KEYED_DATA_2600 = CPointer<tagACTCTX_SECTION_KEYED_DATA_2600>

typealias PCACTCTX_SECTION_KEYED_DATA_2600Var = CPointerVarOf<PCACTCTX_SECTION_KEYED_DATA_2600>
typealias PCACTCTX_SECTION_KEYED_DATA_2600 = CPointer<ACTCTX_SECTION_KEYED_DATA_2600>

typealias ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA

typealias PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATAVar = CPointerVarOf<PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA>
typealias PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = CPointer<tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA>

typealias PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATAVar = CPointerVarOf<PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA>
typealias PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = CPointer<ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA>

typealias ACTCTX_SECTION_KEYED_DATA = tagACTCTX_SECTION_KEYED_DATA

typealias PACTCTX_SECTION_KEYED_DATAVar = CPointerVarOf<PACTCTX_SECTION_KEYED_DATA>
typealias PACTCTX_SECTION_KEYED_DATA = CPointer<tagACTCTX_SECTION_KEYED_DATA>

typealias PCACTCTX_SECTION_KEYED_DATAVar = CPointerVarOf<PCACTCTX_SECTION_KEYED_DATA>
typealias PCACTCTX_SECTION_KEYED_DATA = CPointer<ACTCTX_SECTION_KEYED_DATA>

typealias ACTIVATION_CONTEXT_BASIC_INFORMATION = _ACTIVATION_CONTEXT_BASIC_INFORMATION

typealias PACTIVATION_CONTEXT_BASIC_INFORMATIONVar = CPointerVarOf<PACTIVATION_CONTEXT_BASIC_INFORMATION>
typealias PACTIVATION_CONTEXT_BASIC_INFORMATION = CPointer<_ACTIVATION_CONTEXT_BASIC_INFORMATION>

typealias PCACTIVATION_CONTEXT_BASIC_INFORMATIONVar = CPointerVarOf<PCACTIVATION_CONTEXT_BASIC_INFORMATION>
typealias PCACTIVATION_CONTEXT_BASIC_INFORMATION = CPointer<_ACTIVATION_CONTEXT_BASIC_INFORMATION>

typealias PQUERYACTCTXW_FUNCVar = CPointerVarOf<PQUERYACTCTXW_FUNC>
typealias PQUERYACTCTXW_FUNC = CPointer<CFunction<(DWORD, HANDLE?, PVOID?, ULONG, PVOID?, SIZE_T, CPointer<SIZE_TVar>?) -> WINBOOL>>

typealias PUCHARVar = CPointerVarOf<PUCHAR>
typealias PUCHAR = CPointer<UCHARVar>

typealias APPLICATION_RECOVERY_CALLBACKVar = CPointerVarOf<APPLICATION_RECOVERY_CALLBACK>
typealias APPLICATION_RECOVERY_CALLBACK = CPointer<CFunction<(PVOID?) -> DWORD>>

typealias DRAWPATRECT = _DRAWPATRECT

typealias PDRAWPATRECTVar = CPointerVarOf<PDRAWPATRECT>
typealias PDRAWPATRECT = CPointer<_DRAWPATRECT>

typealias PSINJECTDATA = _PSINJECTDATA

typealias PPSINJECTDATAVar = CPointerVarOf<PPSINJECTDATA>
typealias PPSINJECTDATA = CPointer<_PSINJECTDATA>

typealias PSFEATURE_OUTPUT = _PSFEATURE_OUTPUT

typealias PPSFEATURE_OUTPUTVar = CPointerVarOf<PPSFEATURE_OUTPUT>
typealias PPSFEATURE_OUTPUT = CPointer<_PSFEATURE_OUTPUT>

typealias PSFEATURE_CUSTPAPER = _PSFEATURE_CUSTPAPER

typealias PPSFEATURE_CUSTPAPERVar = CPointerVarOf<PPSFEATURE_CUSTPAPER>
typealias PPSFEATURE_CUSTPAPER = CPointer<_PSFEATURE_CUSTPAPER>

typealias FLOATVar = FloatVarOf<FLOAT>
typealias FLOAT = Float

typealias XFORM = tagXFORM

typealias PXFORMVar = CPointerVarOf<PXFORM>
typealias PXFORM = CPointer<tagXFORM>

typealias LPXFORMVar = CPointerVarOf<LPXFORM>
typealias LPXFORM = CPointer<tagXFORM>

typealias BITMAP = tagBITMAP

typealias PBITMAPVar = CPointerVarOf<PBITMAP>
typealias PBITMAP = CPointer<tagBITMAP>

typealias NPBITMAPVar = CPointerVarOf<NPBITMAP>
typealias NPBITMAP = CPointer<tagBITMAP>

typealias LPBITMAPVar = CPointerVarOf<LPBITMAP>
typealias LPBITMAP = CPointer<tagBITMAP>

typealias RGBTRIPLE = tagRGBTRIPLE

typealias RGBQUAD = tagRGBQUAD

typealias LPRGBQUADVar = CPointerVarOf<LPRGBQUAD>
typealias LPRGBQUAD = CPointer<RGBQUAD>

typealias LCSCSTYPEVar = IntVarOf<LCSCSTYPE>
typealias LCSCSTYPE = LONG

typealias LCSGAMUTMATCHVar = IntVarOf<LCSGAMUTMATCH>
typealias LCSGAMUTMATCH = LONG

typealias FXPT16DOT16Var = IntVarOf<FXPT16DOT16>
typealias FXPT16DOT16 = Int

typealias LPFXPT16DOT16Var = CPointerVarOf<LPFXPT16DOT16>
typealias LPFXPT16DOT16 = CPointer<IntVar>

typealias FXPT2DOT30Var = IntVarOf<FXPT2DOT30>
typealias FXPT2DOT30 = Int

typealias LPFXPT2DOT30Var = CPointerVarOf<LPFXPT2DOT30>
typealias LPFXPT2DOT30 = CPointer<IntVar>

typealias CIEXYZ = tagCIEXYZ

typealias LPCIEXYZVar = CPointerVarOf<LPCIEXYZ>
typealias LPCIEXYZ = CPointer<CIEXYZ>

typealias CIEXYZTRIPLE = tagICEXYZTRIPLE

typealias LPCIEXYZTRIPLEVar = CPointerVarOf<LPCIEXYZTRIPLE>
typealias LPCIEXYZTRIPLE = CPointer<CIEXYZTRIPLE>

typealias LOGCOLORSPACEA = tagLOGCOLORSPACEA

typealias LPLOGCOLORSPACEAVar = CPointerVarOf<LPLOGCOLORSPACEA>
typealias LPLOGCOLORSPACEA = CPointer<tagLOGCOLORSPACEA>

typealias LOGCOLORSPACEW = tagLOGCOLORSPACEW

typealias LPLOGCOLORSPACEWVar = CPointerVarOf<LPLOGCOLORSPACEW>
typealias LPLOGCOLORSPACEW = CPointer<tagLOGCOLORSPACEW>

typealias LOGCOLORSPACE = LOGCOLORSPACEW

typealias LPLOGCOLORSPACEVar = CPointerVarOf<LPLOGCOLORSPACE>
typealias LPLOGCOLORSPACE = LPLOGCOLORSPACEW

typealias BITMAPCOREHEADER = tagBITMAPCOREHEADER

typealias LPBITMAPCOREHEADERVar = CPointerVarOf<LPBITMAPCOREHEADER>
typealias LPBITMAPCOREHEADER = CPointer<tagBITMAPCOREHEADER>

typealias PBITMAPCOREHEADERVar = CPointerVarOf<PBITMAPCOREHEADER>
typealias PBITMAPCOREHEADER = CPointer<tagBITMAPCOREHEADER>

typealias BITMAPINFOHEADER = tagBITMAPINFOHEADER

typealias LPBITMAPINFOHEADERVar = CPointerVarOf<LPBITMAPINFOHEADER>
typealias LPBITMAPINFOHEADER = CPointer<tagBITMAPINFOHEADER>

typealias PBITMAPINFOHEADERVar = CPointerVarOf<PBITMAPINFOHEADER>
typealias PBITMAPINFOHEADER = CPointer<tagBITMAPINFOHEADER>

typealias LPBITMAPV4HEADERVar = CPointerVarOf<LPBITMAPV4HEADER>
typealias LPBITMAPV4HEADER = CPointer<BITMAPV4HEADER>

typealias PBITMAPV4HEADERVar = CPointerVarOf<PBITMAPV4HEADER>
typealias PBITMAPV4HEADER = CPointer<BITMAPV4HEADER>

typealias LPBITMAPV5HEADERVar = CPointerVarOf<LPBITMAPV5HEADER>
typealias LPBITMAPV5HEADER = CPointer<BITMAPV5HEADER>

typealias PBITMAPV5HEADERVar = CPointerVarOf<PBITMAPV5HEADER>
typealias PBITMAPV5HEADER = CPointer<BITMAPV5HEADER>

typealias BITMAPINFO = tagBITMAPINFO

typealias LPBITMAPINFOVar = CPointerVarOf<LPBITMAPINFO>
typealias LPBITMAPINFO = CPointer<tagBITMAPINFO>

typealias PBITMAPINFOVar = CPointerVarOf<PBITMAPINFO>
typealias PBITMAPINFO = CPointer<tagBITMAPINFO>

typealias BITMAPCOREINFO = tagBITMAPCOREINFO

typealias LPBITMAPCOREINFOVar = CPointerVarOf<LPBITMAPCOREINFO>
typealias LPBITMAPCOREINFO = CPointer<tagBITMAPCOREINFO>

typealias PBITMAPCOREINFOVar = CPointerVarOf<PBITMAPCOREINFO>
typealias PBITMAPCOREINFO = CPointer<tagBITMAPCOREINFO>

typealias BITMAPFILEHEADER = tagBITMAPFILEHEADER

typealias LPBITMAPFILEHEADERVar = CPointerVarOf<LPBITMAPFILEHEADER>
typealias LPBITMAPFILEHEADER = CPointer<tagBITMAPFILEHEADER>

typealias PBITMAPFILEHEADERVar = CPointerVarOf<PBITMAPFILEHEADER>
typealias PBITMAPFILEHEADER = CPointer<tagBITMAPFILEHEADER>

typealias FONTSIGNATURE = tagFONTSIGNATURE

typealias PFONTSIGNATUREVar = CPointerVarOf<PFONTSIGNATURE>
typealias PFONTSIGNATURE = CPointer<tagFONTSIGNATURE>

typealias LPFONTSIGNATUREVar = CPointerVarOf<LPFONTSIGNATURE>
typealias LPFONTSIGNATURE = CPointer<tagFONTSIGNATURE>

typealias CHARSETINFO = tagCHARSETINFO

typealias PCHARSETINFOVar = CPointerVarOf<PCHARSETINFO>
typealias PCHARSETINFO = CPointer<tagCHARSETINFO>

typealias NPCHARSETINFOVar = CPointerVarOf<NPCHARSETINFO>
typealias NPCHARSETINFO = CPointer<tagCHARSETINFO>

typealias LPCHARSETINFOVar = CPointerVarOf<LPCHARSETINFO>
typealias LPCHARSETINFO = CPointer<tagCHARSETINFO>

typealias LOCALESIGNATURE = tagLOCALESIGNATURE

typealias PLOCALESIGNATUREVar = CPointerVarOf<PLOCALESIGNATURE>
typealias PLOCALESIGNATURE = CPointer<tagLOCALESIGNATURE>

typealias LPLOCALESIGNATUREVar = CPointerVarOf<LPLOCALESIGNATURE>
typealias LPLOCALESIGNATURE = CPointer<tagLOCALESIGNATURE>

typealias HANDLETABLE = tagHANDLETABLE

typealias PHANDLETABLEVar = CPointerVarOf<PHANDLETABLE>
typealias PHANDLETABLE = CPointer<tagHANDLETABLE>

typealias LPHANDLETABLEVar = CPointerVarOf<LPHANDLETABLE>
typealias LPHANDLETABLE = CPointer<tagHANDLETABLE>

typealias METARECORD = tagMETARECORD

typealias PMETARECORDVar = CPointerVarOf<PMETARECORD>
typealias PMETARECORD = CPointer<tagMETARECORD>

typealias LPMETARECORDVar = CPointerVarOf<LPMETARECORD>
typealias LPMETARECORD = CPointer<tagMETARECORD>

typealias HMETAFILEVar = CPointerVarOf<HMETAFILE>
typealias HMETAFILE = CPointer<HMETAFILE__>

typealias METAFILEPICT = tagMETAFILEPICT

typealias LPMETAFILEPICTVar = CPointerVarOf<LPMETAFILEPICT>
typealias LPMETAFILEPICT = CPointer<tagMETAFILEPICT>

typealias METAHEADER = tagMETAHEADER

typealias PMETAHEADERVar = CPointerVarOf<PMETAHEADER>
typealias PMETAHEADER = CPointer<tagMETAHEADER>

typealias LPMETAHEADERVar = CPointerVarOf<LPMETAHEADER>
typealias LPMETAHEADER = CPointer<tagMETAHEADER>

typealias ENHMETARECORD = tagENHMETARECORD

typealias PENHMETARECORDVar = CPointerVarOf<PENHMETARECORD>
typealias PENHMETARECORD = CPointer<tagENHMETARECORD>

typealias LPENHMETARECORDVar = CPointerVarOf<LPENHMETARECORD>
typealias LPENHMETARECORD = CPointer<tagENHMETARECORD>

typealias ENHMETAHEADER = tagENHMETAHEADER

typealias PENHMETAHEADERVar = CPointerVarOf<PENHMETAHEADER>
typealias PENHMETAHEADER = CPointer<tagENHMETAHEADER>

typealias LPENHMETAHEADERVar = CPointerVarOf<LPENHMETAHEADER>
typealias LPENHMETAHEADER = CPointer<tagENHMETAHEADER>

typealias BCHARVar = ShortVarOf<BCHAR>
typealias BCHAR = WCHAR

typealias TEXTMETRICA = tagTEXTMETRICA

typealias PTEXTMETRICAVar = CPointerVarOf<PTEXTMETRICA>
typealias PTEXTMETRICA = CPointer<tagTEXTMETRICA>

typealias NPTEXTMETRICAVar = CPointerVarOf<NPTEXTMETRICA>
typealias NPTEXTMETRICA = CPointer<tagTEXTMETRICA>

typealias LPTEXTMETRICAVar = CPointerVarOf<LPTEXTMETRICA>
typealias LPTEXTMETRICA = CPointer<tagTEXTMETRICA>

typealias TEXTMETRICW = tagTEXTMETRICW

typealias PTEXTMETRICWVar = CPointerVarOf<PTEXTMETRICW>
typealias PTEXTMETRICW = CPointer<tagTEXTMETRICW>

typealias NPTEXTMETRICWVar = CPointerVarOf<NPTEXTMETRICW>
typealias NPTEXTMETRICW = CPointer<tagTEXTMETRICW>

typealias LPTEXTMETRICWVar = CPointerVarOf<LPTEXTMETRICW>
typealias LPTEXTMETRICW = CPointer<tagTEXTMETRICW>

typealias TEXTMETRIC = TEXTMETRICW

typealias PTEXTMETRICVar = CPointerVarOf<PTEXTMETRIC>
typealias PTEXTMETRIC = PTEXTMETRICW

typealias NPTEXTMETRICVar = CPointerVarOf<NPTEXTMETRIC>
typealias NPTEXTMETRIC = NPTEXTMETRICW

typealias LPTEXTMETRICVar = CPointerVarOf<LPTEXTMETRIC>
typealias LPTEXTMETRIC = LPTEXTMETRICW

typealias NEWTEXTMETRICA = tagNEWTEXTMETRICA

typealias PNEWTEXTMETRICAVar = CPointerVarOf<PNEWTEXTMETRICA>
typealias PNEWTEXTMETRICA = CPointer<tagNEWTEXTMETRICA>

typealias NPNEWTEXTMETRICAVar = CPointerVarOf<NPNEWTEXTMETRICA>
typealias NPNEWTEXTMETRICA = CPointer<tagNEWTEXTMETRICA>

typealias LPNEWTEXTMETRICAVar = CPointerVarOf<LPNEWTEXTMETRICA>
typealias LPNEWTEXTMETRICA = CPointer<tagNEWTEXTMETRICA>

typealias NEWTEXTMETRICW = tagNEWTEXTMETRICW

typealias PNEWTEXTMETRICWVar = CPointerVarOf<PNEWTEXTMETRICW>
typealias PNEWTEXTMETRICW = CPointer<tagNEWTEXTMETRICW>

typealias NPNEWTEXTMETRICWVar = CPointerVarOf<NPNEWTEXTMETRICW>
typealias NPNEWTEXTMETRICW = CPointer<tagNEWTEXTMETRICW>

typealias LPNEWTEXTMETRICWVar = CPointerVarOf<LPNEWTEXTMETRICW>
typealias LPNEWTEXTMETRICW = CPointer<tagNEWTEXTMETRICW>

typealias NEWTEXTMETRIC = NEWTEXTMETRICW

typealias PNEWTEXTMETRICVar = CPointerVarOf<PNEWTEXTMETRIC>
typealias PNEWTEXTMETRIC = PNEWTEXTMETRICW

typealias NPNEWTEXTMETRICVar = CPointerVarOf<NPNEWTEXTMETRIC>
typealias NPNEWTEXTMETRIC = NPNEWTEXTMETRICW

typealias LPNEWTEXTMETRICVar = CPointerVarOf<LPNEWTEXTMETRIC>
typealias LPNEWTEXTMETRIC = LPNEWTEXTMETRICW

typealias NEWTEXTMETRICEXA = tagNEWTEXTMETRICEXA

typealias NEWTEXTMETRICEXW = tagNEWTEXTMETRICEXW

typealias NEWTEXTMETRICEX = NEWTEXTMETRICEXW

typealias PELARRAY = tagPELARRAY

typealias PPELARRAYVar = CPointerVarOf<PPELARRAY>
typealias PPELARRAY = CPointer<tagPELARRAY>

typealias NPPELARRAYVar = CPointerVarOf<NPPELARRAY>
typealias NPPELARRAY = CPointer<tagPELARRAY>

typealias LPPELARRAYVar = CPointerVarOf<LPPELARRAY>
typealias LPPELARRAY = CPointer<tagPELARRAY>

typealias LOGBRUSH = tagLOGBRUSH

typealias PLOGBRUSHVar = CPointerVarOf<PLOGBRUSH>
typealias PLOGBRUSH = CPointer<tagLOGBRUSH>

typealias NPLOGBRUSHVar = CPointerVarOf<NPLOGBRUSH>
typealias NPLOGBRUSH = CPointer<tagLOGBRUSH>

typealias LPLOGBRUSHVar = CPointerVarOf<LPLOGBRUSH>
typealias LPLOGBRUSH = CPointer<tagLOGBRUSH>

typealias LOGBRUSH32 = tagLOGBRUSH32

typealias PLOGBRUSH32Var = CPointerVarOf<PLOGBRUSH32>
typealias PLOGBRUSH32 = CPointer<tagLOGBRUSH32>

typealias NPLOGBRUSH32Var = CPointerVarOf<NPLOGBRUSH32>
typealias NPLOGBRUSH32 = CPointer<tagLOGBRUSH32>

typealias LPLOGBRUSH32Var = CPointerVarOf<LPLOGBRUSH32>
typealias LPLOGBRUSH32 = CPointer<tagLOGBRUSH32>

typealias PATTERN = LOGBRUSH

typealias PPATTERNVar = CPointerVarOf<PPATTERN>
typealias PPATTERN = CPointer<PATTERN>

typealias NPPATTERNVar = CPointerVarOf<NPPATTERN>
typealias NPPATTERN = CPointer<PATTERN>

typealias LPPATTERNVar = CPointerVarOf<LPPATTERN>
typealias LPPATTERN = CPointer<PATTERN>

typealias LOGPEN = tagLOGPEN

typealias PLOGPENVar = CPointerVarOf<PLOGPEN>
typealias PLOGPEN = CPointer<tagLOGPEN>

typealias NPLOGPENVar = CPointerVarOf<NPLOGPEN>
typealias NPLOGPEN = CPointer<tagLOGPEN>

typealias LPLOGPENVar = CPointerVarOf<LPLOGPEN>
typealias LPLOGPEN = CPointer<tagLOGPEN>

typealias EXTLOGPEN = tagEXTLOGPEN

typealias PEXTLOGPENVar = CPointerVarOf<PEXTLOGPEN>
typealias PEXTLOGPEN = CPointer<tagEXTLOGPEN>

typealias NPEXTLOGPENVar = CPointerVarOf<NPEXTLOGPEN>
typealias NPEXTLOGPEN = CPointer<tagEXTLOGPEN>

typealias LPEXTLOGPENVar = CPointerVarOf<LPEXTLOGPEN>
typealias LPEXTLOGPEN = CPointer<tagEXTLOGPEN>

typealias EXTLOGPEN32 = tagEXTLOGPEN32

typealias PEXTLOGPEN32Var = CPointerVarOf<PEXTLOGPEN32>
typealias PEXTLOGPEN32 = CPointer<tagEXTLOGPEN32>

typealias NPEXTLOGPEN32Var = CPointerVarOf<NPEXTLOGPEN32>
typealias NPEXTLOGPEN32 = CPointer<tagEXTLOGPEN32>

typealias LPEXTLOGPEN32Var = CPointerVarOf<LPEXTLOGPEN32>
typealias LPEXTLOGPEN32 = CPointer<tagEXTLOGPEN32>

typealias PALETTEENTRY = tagPALETTEENTRY

typealias PPALETTEENTRYVar = CPointerVarOf<PPALETTEENTRY>
typealias PPALETTEENTRY = CPointer<tagPALETTEENTRY>

typealias LPPALETTEENTRYVar = CPointerVarOf<LPPALETTEENTRY>
typealias LPPALETTEENTRY = CPointer<tagPALETTEENTRY>

typealias LOGPALETTE = tagLOGPALETTE

typealias PLOGPALETTEVar = CPointerVarOf<PLOGPALETTE>
typealias PLOGPALETTE = CPointer<tagLOGPALETTE>

typealias NPLOGPALETTEVar = CPointerVarOf<NPLOGPALETTE>
typealias NPLOGPALETTE = CPointer<tagLOGPALETTE>

typealias LPLOGPALETTEVar = CPointerVarOf<LPLOGPALETTE>
typealias LPLOGPALETTE = CPointer<tagLOGPALETTE>

typealias LOGFONTA = tagLOGFONTA

typealias PLOGFONTAVar = CPointerVarOf<PLOGFONTA>
typealias PLOGFONTA = CPointer<tagLOGFONTA>

typealias NPLOGFONTAVar = CPointerVarOf<NPLOGFONTA>
typealias NPLOGFONTA = CPointer<tagLOGFONTA>

typealias LPLOGFONTAVar = CPointerVarOf<LPLOGFONTA>
typealias LPLOGFONTA = CPointer<tagLOGFONTA>

typealias LOGFONTW = tagLOGFONTW

typealias PLOGFONTWVar = CPointerVarOf<PLOGFONTW>
typealias PLOGFONTW = CPointer<tagLOGFONTW>

typealias NPLOGFONTWVar = CPointerVarOf<NPLOGFONTW>
typealias NPLOGFONTW = CPointer<tagLOGFONTW>

typealias LPLOGFONTWVar = CPointerVarOf<LPLOGFONTW>
typealias LPLOGFONTW = CPointer<tagLOGFONTW>

typealias LOGFONT = LOGFONTW

typealias PLOGFONTVar = CPointerVarOf<PLOGFONT>
typealias PLOGFONT = PLOGFONTW

typealias NPLOGFONTVar = CPointerVarOf<NPLOGFONT>
typealias NPLOGFONT = NPLOGFONTW

typealias LPLOGFONTVar = CPointerVarOf<LPLOGFONT>
typealias LPLOGFONT = LPLOGFONTW

typealias ENUMLOGFONTA = tagENUMLOGFONTA

typealias LPENUMLOGFONTAVar = CPointerVarOf<LPENUMLOGFONTA>
typealias LPENUMLOGFONTA = CPointer<tagENUMLOGFONTA>

typealias ENUMLOGFONTW = tagENUMLOGFONTW

typealias LPENUMLOGFONTWVar = CPointerVarOf<LPENUMLOGFONTW>
typealias LPENUMLOGFONTW = CPointer<tagENUMLOGFONTW>

typealias ENUMLOGFONT = ENUMLOGFONTW

typealias LPENUMLOGFONTVar = CPointerVarOf<LPENUMLOGFONT>
typealias LPENUMLOGFONT = LPENUMLOGFONTW

typealias ENUMLOGFONTEXA = tagENUMLOGFONTEXA

typealias LPENUMLOGFONTEXAVar = CPointerVarOf<LPENUMLOGFONTEXA>
typealias LPENUMLOGFONTEXA = CPointer<tagENUMLOGFONTEXA>

typealias ENUMLOGFONTEXW = tagENUMLOGFONTEXW

typealias LPENUMLOGFONTEXWVar = CPointerVarOf<LPENUMLOGFONTEXW>
typealias LPENUMLOGFONTEXW = CPointer<tagENUMLOGFONTEXW>

typealias ENUMLOGFONTEX = ENUMLOGFONTEXW

typealias LPENUMLOGFONTEXVar = CPointerVarOf<LPENUMLOGFONTEX>
typealias LPENUMLOGFONTEX = LPENUMLOGFONTEXW

typealias PANOSE = tagPANOSE

typealias LPPANOSEVar = CPointerVarOf<LPPANOSE>
typealias LPPANOSE = CPointer<tagPANOSE>

typealias EXTLOGFONTA = tagEXTLOGFONTA

typealias PEXTLOGFONTAVar = CPointerVarOf<PEXTLOGFONTA>
typealias PEXTLOGFONTA = CPointer<tagEXTLOGFONTA>

typealias NPEXTLOGFONTAVar = CPointerVarOf<NPEXTLOGFONTA>
typealias NPEXTLOGFONTA = CPointer<tagEXTLOGFONTA>

typealias LPEXTLOGFONTAVar = CPointerVarOf<LPEXTLOGFONTA>
typealias LPEXTLOGFONTA = CPointer<tagEXTLOGFONTA>

typealias EXTLOGFONTW = tagEXTLOGFONTW

typealias PEXTLOGFONTWVar = CPointerVarOf<PEXTLOGFONTW>
typealias PEXTLOGFONTW = CPointer<tagEXTLOGFONTW>

typealias NPEXTLOGFONTWVar = CPointerVarOf<NPEXTLOGFONTW>
typealias NPEXTLOGFONTW = CPointer<tagEXTLOGFONTW>

typealias LPEXTLOGFONTWVar = CPointerVarOf<LPEXTLOGFONTW>
typealias LPEXTLOGFONTW = CPointer<tagEXTLOGFONTW>

typealias EXTLOGFONT = EXTLOGFONTW

typealias PEXTLOGFONTVar = CPointerVarOf<PEXTLOGFONT>
typealias PEXTLOGFONT = PEXTLOGFONTW

typealias NPEXTLOGFONTVar = CPointerVarOf<NPEXTLOGFONT>
typealias NPEXTLOGFONT = NPEXTLOGFONTW

typealias LPEXTLOGFONTVar = CPointerVarOf<LPEXTLOGFONT>
typealias LPEXTLOGFONT = LPEXTLOGFONTW

typealias DEVMODEA = _devicemodeA

typealias PDEVMODEAVar = CPointerVarOf<PDEVMODEA>
typealias PDEVMODEA = CPointer<_devicemodeA>

typealias NPDEVMODEAVar = CPointerVarOf<NPDEVMODEA>
typealias NPDEVMODEA = CPointer<_devicemodeA>

typealias LPDEVMODEAVar = CPointerVarOf<LPDEVMODEA>
typealias LPDEVMODEA = CPointer<_devicemodeA>

typealias DEVMODEW = _devicemodeW

typealias PDEVMODEWVar = CPointerVarOf<PDEVMODEW>
typealias PDEVMODEW = CPointer<_devicemodeW>

typealias NPDEVMODEWVar = CPointerVarOf<NPDEVMODEW>
typealias NPDEVMODEW = CPointer<_devicemodeW>

typealias LPDEVMODEWVar = CPointerVarOf<LPDEVMODEW>
typealias LPDEVMODEW = CPointer<_devicemodeW>

typealias DEVMODE = DEVMODEW

typealias PDEVMODEVar = CPointerVarOf<PDEVMODE>
typealias PDEVMODE = PDEVMODEW

typealias NPDEVMODEVar = CPointerVarOf<NPDEVMODE>
typealias NPDEVMODE = NPDEVMODEW

typealias LPDEVMODEVar = CPointerVarOf<LPDEVMODE>
typealias LPDEVMODE = LPDEVMODEW

typealias DISPLAY_DEVICEA = _DISPLAY_DEVICEA

typealias PDISPLAY_DEVICEAVar = CPointerVarOf<PDISPLAY_DEVICEA>
typealias PDISPLAY_DEVICEA = CPointer<_DISPLAY_DEVICEA>

typealias LPDISPLAY_DEVICEAVar = CPointerVarOf<LPDISPLAY_DEVICEA>
typealias LPDISPLAY_DEVICEA = CPointer<_DISPLAY_DEVICEA>

typealias DISPLAY_DEVICEW = _DISPLAY_DEVICEW

typealias PDISPLAY_DEVICEWVar = CPointerVarOf<PDISPLAY_DEVICEW>
typealias PDISPLAY_DEVICEW = CPointer<_DISPLAY_DEVICEW>

typealias LPDISPLAY_DEVICEWVar = CPointerVarOf<LPDISPLAY_DEVICEW>
typealias LPDISPLAY_DEVICEW = CPointer<_DISPLAY_DEVICEW>

typealias DISPLAY_DEVICE = DISPLAY_DEVICEW

typealias PDISPLAY_DEVICEVar = CPointerVarOf<PDISPLAY_DEVICE>
typealias PDISPLAY_DEVICE = PDISPLAY_DEVICEW

typealias LPDISPLAY_DEVICEVar = CPointerVarOf<LPDISPLAY_DEVICE>
typealias LPDISPLAY_DEVICE = LPDISPLAY_DEVICEW

typealias RGNDATAHEADER = _RGNDATAHEADER

typealias PRGNDATAHEADERVar = CPointerVarOf<PRGNDATAHEADER>
typealias PRGNDATAHEADER = CPointer<_RGNDATAHEADER>

typealias RGNDATA = _RGNDATA

typealias PRGNDATAVar = CPointerVarOf<PRGNDATA>
typealias PRGNDATA = CPointer<_RGNDATA>

typealias NPRGNDATAVar = CPointerVarOf<NPRGNDATA>
typealias NPRGNDATA = CPointer<_RGNDATA>

typealias LPRGNDATAVar = CPointerVarOf<LPRGNDATA>
typealias LPRGNDATA = CPointer<_RGNDATA>

typealias ABC = _ABC

typealias PABCVar = CPointerVarOf<PABC>
typealias PABC = CPointer<_ABC>

typealias NPABCVar = CPointerVarOf<NPABC>
typealias NPABC = CPointer<_ABC>

typealias LPABCVar = CPointerVarOf<LPABC>
typealias LPABC = CPointer<_ABC>

typealias ABCFLOAT = _ABCFLOAT

typealias PABCFLOATVar = CPointerVarOf<PABCFLOAT>
typealias PABCFLOAT = CPointer<_ABCFLOAT>

typealias NPABCFLOATVar = CPointerVarOf<NPABCFLOAT>
typealias NPABCFLOAT = CPointer<_ABCFLOAT>

typealias LPABCFLOATVar = CPointerVarOf<LPABCFLOAT>
typealias LPABCFLOAT = CPointer<_ABCFLOAT>

typealias OUTLINETEXTMETRICA = _OUTLINETEXTMETRICA

typealias POUTLINETEXTMETRICAVar = CPointerVarOf<POUTLINETEXTMETRICA>
typealias POUTLINETEXTMETRICA = CPointer<_OUTLINETEXTMETRICA>

typealias NPOUTLINETEXTMETRICAVar = CPointerVarOf<NPOUTLINETEXTMETRICA>
typealias NPOUTLINETEXTMETRICA = CPointer<_OUTLINETEXTMETRICA>

typealias LPOUTLINETEXTMETRICAVar = CPointerVarOf<LPOUTLINETEXTMETRICA>
typealias LPOUTLINETEXTMETRICA = CPointer<_OUTLINETEXTMETRICA>

typealias OUTLINETEXTMETRICW = _OUTLINETEXTMETRICW

typealias POUTLINETEXTMETRICWVar = CPointerVarOf<POUTLINETEXTMETRICW>
typealias POUTLINETEXTMETRICW = CPointer<_OUTLINETEXTMETRICW>

typealias NPOUTLINETEXTMETRICWVar = CPointerVarOf<NPOUTLINETEXTMETRICW>
typealias NPOUTLINETEXTMETRICW = CPointer<_OUTLINETEXTMETRICW>

typealias LPOUTLINETEXTMETRICWVar = CPointerVarOf<LPOUTLINETEXTMETRICW>
typealias LPOUTLINETEXTMETRICW = CPointer<_OUTLINETEXTMETRICW>

typealias OUTLINETEXTMETRIC = OUTLINETEXTMETRICW

typealias POUTLINETEXTMETRICVar = CPointerVarOf<POUTLINETEXTMETRIC>
typealias POUTLINETEXTMETRIC = POUTLINETEXTMETRICW

typealias NPOUTLINETEXTMETRICVar = CPointerVarOf<NPOUTLINETEXTMETRIC>
typealias NPOUTLINETEXTMETRIC = NPOUTLINETEXTMETRICW

typealias LPOUTLINETEXTMETRICVar = CPointerVarOf<LPOUTLINETEXTMETRIC>
typealias LPOUTLINETEXTMETRIC = LPOUTLINETEXTMETRICW

typealias POLYTEXTA = tagPOLYTEXTA

typealias PPOLYTEXTAVar = CPointerVarOf<PPOLYTEXTA>
typealias PPOLYTEXTA = CPointer<tagPOLYTEXTA>

typealias NPPOLYTEXTAVar = CPointerVarOf<NPPOLYTEXTA>
typealias NPPOLYTEXTA = CPointer<tagPOLYTEXTA>

typealias LPPOLYTEXTAVar = CPointerVarOf<LPPOLYTEXTA>
typealias LPPOLYTEXTA = CPointer<tagPOLYTEXTA>

typealias POLYTEXTW = tagPOLYTEXTW

typealias PPOLYTEXTWVar = CPointerVarOf<PPOLYTEXTW>
typealias PPOLYTEXTW = CPointer<tagPOLYTEXTW>

typealias NPPOLYTEXTWVar = CPointerVarOf<NPPOLYTEXTW>
typealias NPPOLYTEXTW = CPointer<tagPOLYTEXTW>

typealias LPPOLYTEXTWVar = CPointerVarOf<LPPOLYTEXTW>
typealias LPPOLYTEXTW = CPointer<tagPOLYTEXTW>

typealias POLYTEXT = POLYTEXTW

typealias PPOLYTEXTVar = CPointerVarOf<PPOLYTEXT>
typealias PPOLYTEXT = PPOLYTEXTW

typealias NPPOLYTEXTVar = CPointerVarOf<NPPOLYTEXT>
typealias NPPOLYTEXT = NPPOLYTEXTW

typealias LPPOLYTEXTVar = CPointerVarOf<LPPOLYTEXT>
typealias LPPOLYTEXT = LPPOLYTEXTW

typealias FIXED = _FIXED

typealias MAT2 = _MAT2

typealias LPMAT2Var = CPointerVarOf<LPMAT2>
typealias LPMAT2 = CPointer<_MAT2>

typealias GLYPHMETRICS = _GLYPHMETRICS

typealias LPGLYPHMETRICSVar = CPointerVarOf<LPGLYPHMETRICS>
typealias LPGLYPHMETRICS = CPointer<_GLYPHMETRICS>

typealias POINTFX = tagPOINTFX

typealias LPPOINTFXVar = CPointerVarOf<LPPOINTFX>
typealias LPPOINTFX = CPointer<tagPOINTFX>

typealias TTPOLYCURVE = tagTTPOLYCURVE

typealias LPTTPOLYCURVEVar = CPointerVarOf<LPTTPOLYCURVE>
typealias LPTTPOLYCURVE = CPointer<tagTTPOLYCURVE>

typealias TTPOLYGONHEADER = tagTTPOLYGONHEADER

typealias LPTTPOLYGONHEADERVar = CPointerVarOf<LPTTPOLYGONHEADER>
typealias LPTTPOLYGONHEADER = CPointer<tagTTPOLYGONHEADER>

typealias GCP_RESULTSA = tagGCP_RESULTSA

typealias LPGCP_RESULTSAVar = CPointerVarOf<LPGCP_RESULTSA>
typealias LPGCP_RESULTSA = CPointer<tagGCP_RESULTSA>

typealias GCP_RESULTSW = tagGCP_RESULTSW

typealias LPGCP_RESULTSWVar = CPointerVarOf<LPGCP_RESULTSW>
typealias LPGCP_RESULTSW = CPointer<tagGCP_RESULTSW>

typealias GCP_RESULTS = GCP_RESULTSW

typealias LPGCP_RESULTSVar = CPointerVarOf<LPGCP_RESULTS>
typealias LPGCP_RESULTS = LPGCP_RESULTSW

typealias RASTERIZER_STATUS = _RASTERIZER_STATUS

typealias LPRASTERIZER_STATUSVar = CPointerVarOf<LPRASTERIZER_STATUS>
typealias LPRASTERIZER_STATUS = CPointer<_RASTERIZER_STATUS>

typealias PIXELFORMATDESCRIPTOR = tagPIXELFORMATDESCRIPTOR

typealias PPIXELFORMATDESCRIPTORVar = CPointerVarOf<PPIXELFORMATDESCRIPTOR>
typealias PPIXELFORMATDESCRIPTOR = CPointer<tagPIXELFORMATDESCRIPTOR>

typealias LPPIXELFORMATDESCRIPTORVar = CPointerVarOf<LPPIXELFORMATDESCRIPTOR>
typealias LPPIXELFORMATDESCRIPTOR = CPointer<tagPIXELFORMATDESCRIPTOR>

typealias LPARAMVar = LongVarOf<LPARAM>
typealias LPARAM = LONG_PTR

typealias OLDFONTENUMPROCAVar = CPointerVarOf<OLDFONTENUMPROCA>
typealias OLDFONTENUMPROCA = CPointer<CFunction<(CPointer<LOGFONTA>?, CPointer<TEXTMETRICA>?, DWORD, LPARAM) -> Int>>

typealias OLDFONTENUMPROCWVar = CPointerVarOf<OLDFONTENUMPROCW>
typealias OLDFONTENUMPROCW = CPointer<CFunction<(CPointer<LOGFONTW>?, CPointer<TEXTMETRICW>?, DWORD, LPARAM) -> Int>>

typealias FONTENUMPROCAVar = CPointerVarOf<FONTENUMPROCA>
typealias FONTENUMPROCA = OLDFONTENUMPROCA

typealias FONTENUMPROCWVar = CPointerVarOf<FONTENUMPROCW>
typealias FONTENUMPROCW = OLDFONTENUMPROCW

typealias FONTENUMPROCVar = CPointerVarOf<FONTENUMPROC>
typealias FONTENUMPROC = FONTENUMPROCW

typealias GOBJENUMPROCVar = CPointerVarOf<GOBJENUMPROC>
typealias GOBJENUMPROC = CPointer<CFunction<(LPVOID?, LPARAM) -> Int>>

typealias LINEDDAPROCVar = CPointerVarOf<LINEDDAPROC>
typealias LINEDDAPROC = CPointer<CFunction<(Int, Int, LPARAM) -> Unit>>

typealias HRGNVar = CPointerVarOf<HRGN>
typealias HRGN = CPointer<HRGN__>

typealias LPFNDEVMODEVar = CPointerVarOf<LPFNDEVMODE>
typealias LPFNDEVMODE = CPointer<CFunction<(HWND?, HMODULE?, LPDEVMODE?, LPSTR?, LPSTR?, LPDEVMODE?, LPSTR?, UINT) -> UINT>>

typealias LPFNDEVCAPSVar = CPointerVarOf<LPFNDEVCAPS>
typealias LPFNDEVCAPS = CPointer<CFunction<(LPSTR?, LPSTR?, UINT, LPSTR?, LPDEVMODE?) -> DWORD>>

typealias PFLOATVar = CPointerVarOf<PFLOAT>
typealias PFLOAT = CPointer<FLOATVar>

typealias WCRANGE = tagWCRANGE

typealias PWCRANGEVar = CPointerVarOf<PWCRANGE>
typealias PWCRANGE = CPointer<tagWCRANGE>

typealias LPWCRANGEVar = CPointerVarOf<LPWCRANGE>
typealias LPWCRANGE = CPointer<tagWCRANGE>

typealias GLYPHSET = tagGLYPHSET

typealias PGLYPHSETVar = CPointerVarOf<PGLYPHSET>
typealias PGLYPHSET = CPointer<tagGLYPHSET>

typealias LPGLYPHSETVar = CPointerVarOf<LPGLYPHSET>
typealias LPGLYPHSET = CPointer<tagGLYPHSET>

typealias DESIGNVECTOR = tagDESIGNVECTOR

typealias PDESIGNVECTORVar = CPointerVarOf<PDESIGNVECTOR>
typealias PDESIGNVECTOR = CPointer<tagDESIGNVECTOR>

typealias LPDESIGNVECTORVar = CPointerVarOf<LPDESIGNVECTOR>
typealias LPDESIGNVECTOR = CPointer<tagDESIGNVECTOR>

typealias AXISINFOA = tagAXISINFOA

typealias PAXISINFOAVar = CPointerVarOf<PAXISINFOA>
typealias PAXISINFOA = CPointer<tagAXISINFOA>

typealias LPAXISINFOAVar = CPointerVarOf<LPAXISINFOA>
typealias LPAXISINFOA = CPointer<tagAXISINFOA>

typealias AXISINFOW = tagAXISINFOW

typealias PAXISINFOWVar = CPointerVarOf<PAXISINFOW>
typealias PAXISINFOW = CPointer<tagAXISINFOW>

typealias LPAXISINFOWVar = CPointerVarOf<LPAXISINFOW>
typealias LPAXISINFOW = CPointer<tagAXISINFOW>

typealias AXISINFO = AXISINFOW

typealias PAXISINFOVar = CPointerVarOf<PAXISINFO>
typealias PAXISINFO = PAXISINFOW

typealias LPAXISINFOVar = CPointerVarOf<LPAXISINFO>
typealias LPAXISINFO = LPAXISINFOW

typealias AXESLISTA = tagAXESLISTA

typealias PAXESLISTAVar = CPointerVarOf<PAXESLISTA>
typealias PAXESLISTA = CPointer<tagAXESLISTA>

typealias LPAXESLISTAVar = CPointerVarOf<LPAXESLISTA>
typealias LPAXESLISTA = CPointer<tagAXESLISTA>

typealias AXESLISTW = tagAXESLISTW

typealias PAXESLISTWVar = CPointerVarOf<PAXESLISTW>
typealias PAXESLISTW = CPointer<tagAXESLISTW>

typealias LPAXESLISTWVar = CPointerVarOf<LPAXESLISTW>
typealias LPAXESLISTW = CPointer<tagAXESLISTW>

typealias AXESLIST = AXESLISTW

typealias PAXESLISTVar = CPointerVarOf<PAXESLIST>
typealias PAXESLIST = PAXESLISTW

typealias LPAXESLISTVar = CPointerVarOf<LPAXESLIST>
typealias LPAXESLIST = LPAXESLISTW

typealias ENUMLOGFONTEXDVA = tagENUMLOGFONTEXDVA

typealias PENUMLOGFONTEXDVAVar = CPointerVarOf<PENUMLOGFONTEXDVA>
typealias PENUMLOGFONTEXDVA = CPointer<tagENUMLOGFONTEXDVA>

typealias LPENUMLOGFONTEXDVAVar = CPointerVarOf<LPENUMLOGFONTEXDVA>
typealias LPENUMLOGFONTEXDVA = CPointer<tagENUMLOGFONTEXDVA>

typealias ENUMLOGFONTEXDVW = tagENUMLOGFONTEXDVW

typealias PENUMLOGFONTEXDVWVar = CPointerVarOf<PENUMLOGFONTEXDVW>
typealias PENUMLOGFONTEXDVW = CPointer<tagENUMLOGFONTEXDVW>

typealias LPENUMLOGFONTEXDVWVar = CPointerVarOf<LPENUMLOGFONTEXDVW>
typealias LPENUMLOGFONTEXDVW = CPointer<tagENUMLOGFONTEXDVW>

typealias ENUMLOGFONTEXDV = ENUMLOGFONTEXDVW

typealias PENUMLOGFONTEXDVVar = CPointerVarOf<PENUMLOGFONTEXDV>
typealias PENUMLOGFONTEXDV = PENUMLOGFONTEXDVW

typealias LPENUMLOGFONTEXDVVar = CPointerVarOf<LPENUMLOGFONTEXDV>
typealias LPENUMLOGFONTEXDV = LPENUMLOGFONTEXDVW

typealias ENUMTEXTMETRICA = tagENUMTEXTMETRICA

typealias PENUMTEXTMETRICAVar = CPointerVarOf<PENUMTEXTMETRICA>
typealias PENUMTEXTMETRICA = CPointer<tagENUMTEXTMETRICA>

typealias LPENUMTEXTMETRICAVar = CPointerVarOf<LPENUMTEXTMETRICA>
typealias LPENUMTEXTMETRICA = CPointer<tagENUMTEXTMETRICA>

typealias ENUMTEXTMETRICW = tagENUMTEXTMETRICW

typealias PENUMTEXTMETRICWVar = CPointerVarOf<PENUMTEXTMETRICW>
typealias PENUMTEXTMETRICW = CPointer<tagENUMTEXTMETRICW>

typealias LPENUMTEXTMETRICWVar = CPointerVarOf<LPENUMTEXTMETRICW>
typealias LPENUMTEXTMETRICW = CPointer<tagENUMTEXTMETRICW>

typealias ENUMTEXTMETRIC = ENUMTEXTMETRICW

typealias PENUMTEXTMETRICVar = CPointerVarOf<PENUMTEXTMETRIC>
typealias PENUMTEXTMETRIC = PENUMTEXTMETRICW

typealias LPENUMTEXTMETRICVar = CPointerVarOf<LPENUMTEXTMETRIC>
typealias LPENUMTEXTMETRIC = LPENUMTEXTMETRICW

typealias COLOR16Var = ShortVarOf<COLOR16>
typealias COLOR16 = USHORT

typealias TRIVERTEX = _TRIVERTEX

typealias PTRIVERTEXVar = CPointerVarOf<PTRIVERTEX>
typealias PTRIVERTEX = CPointer<_TRIVERTEX>

typealias LPTRIVERTEXVar = CPointerVarOf<LPTRIVERTEX>
typealias LPTRIVERTEX = CPointer<_TRIVERTEX>

typealias GRADIENT_TRIANGLE = _GRADIENT_TRIANGLE

typealias PGRADIENT_TRIANGLEVar = CPointerVarOf<PGRADIENT_TRIANGLE>
typealias PGRADIENT_TRIANGLE = CPointer<_GRADIENT_TRIANGLE>

typealias LPGRADIENT_TRIANGLEVar = CPointerVarOf<LPGRADIENT_TRIANGLE>
typealias LPGRADIENT_TRIANGLE = CPointer<_GRADIENT_TRIANGLE>

typealias GRADIENT_RECT = _GRADIENT_RECT

typealias PGRADIENT_RECTVar = CPointerVarOf<PGRADIENT_RECT>
typealias PGRADIENT_RECT = CPointer<_GRADIENT_RECT>

typealias LPGRADIENT_RECTVar = CPointerVarOf<LPGRADIENT_RECT>
typealias LPGRADIENT_RECT = CPointer<_GRADIENT_RECT>

typealias BLENDFUNCTION = _BLENDFUNCTION

typealias PBLENDFUNCTIONVar = CPointerVarOf<PBLENDFUNCTION>
typealias PBLENDFUNCTION = CPointer<_BLENDFUNCTION>

typealias MFENUMPROCVar = CPointerVarOf<MFENUMPROC>
typealias MFENUMPROC = CPointer<CFunction<(HDC?, CPointer<HANDLETABLE>?, CPointer<METARECORD>?, Int, LPARAM) -> Int>>

typealias ENHMFENUMPROCVar = CPointerVarOf<ENHMFENUMPROC>
typealias ENHMFENUMPROC = CPointer<CFunction<(HDC?, CPointer<HANDLETABLE>?, CPointer<ENHMETARECORD>?, Int, LPARAM) -> Int>>

typealias DIBSECTION = tagDIBSECTION

typealias LPDIBSECTIONVar = CPointerVarOf<LPDIBSECTION>
typealias LPDIBSECTION = CPointer<tagDIBSECTION>

typealias PDIBSECTIONVar = CPointerVarOf<PDIBSECTION>
typealias PDIBSECTION = CPointer<tagDIBSECTION>

typealias COLORADJUSTMENT = tagCOLORADJUSTMENT

typealias PCOLORADJUSTMENTVar = CPointerVarOf<PCOLORADJUSTMENT>
typealias PCOLORADJUSTMENT = CPointer<tagCOLORADJUSTMENT>

typealias LPCOLORADJUSTMENTVar = CPointerVarOf<LPCOLORADJUSTMENT>
typealias LPCOLORADJUSTMENT = CPointer<tagCOLORADJUSTMENT>

typealias ABORTPROCVar = CPointerVarOf<ABORTPROC>
typealias ABORTPROC = CPointer<CFunction<(HDC?, Int) -> WINBOOL>>

typealias DOCINFOA = _DOCINFOA

typealias LPDOCINFOAVar = CPointerVarOf<LPDOCINFOA>
typealias LPDOCINFOA = CPointer<_DOCINFOA>

typealias DOCINFOW = _DOCINFOW

typealias LPDOCINFOWVar = CPointerVarOf<LPDOCINFOW>
typealias LPDOCINFOW = CPointer<_DOCINFOW>

typealias DOCINFO = DOCINFOW

typealias LPDOCINFOVar = CPointerVarOf<LPDOCINFO>
typealias LPDOCINFO = LPDOCINFOW

typealias KERNINGPAIR = tagKERNINGPAIR

typealias LPKERNINGPAIRVar = CPointerVarOf<LPKERNINGPAIR>
typealias LPKERNINGPAIR = CPointer<tagKERNINGPAIR>

typealias ICMENUMPROCAVar = CPointerVarOf<ICMENUMPROCA>
typealias ICMENUMPROCA = CPointer<CFunction<(LPSTR?, LPARAM) -> Int>>

typealias ICMENUMPROCWVar = CPointerVarOf<ICMENUMPROCW>
typealias ICMENUMPROCW = CPointer<CFunction<(LPWSTR?, LPARAM) -> Int>>

typealias EMR = tagEMR

typealias PEMRVar = CPointerVarOf<PEMR>
typealias PEMR = CPointer<tagEMR>

typealias EMRTEXT = tagEMRTEXT

typealias PEMRTEXTVar = CPointerVarOf<PEMRTEXT>
typealias PEMRTEXT = CPointer<tagEMRTEXT>

typealias EMRABORTPATH = tagABORTPATH

typealias PEMRABORTPATHVar = CPointerVarOf<PEMRABORTPATH>
typealias PEMRABORTPATH = CPointer<tagABORTPATH>

typealias EMRBEGINPATH = tagABORTPATH

typealias PEMRBEGINPATHVar = CPointerVarOf<PEMRBEGINPATH>
typealias PEMRBEGINPATH = CPointer<tagABORTPATH>

typealias EMRENDPATH = tagABORTPATH

typealias PEMRENDPATHVar = CPointerVarOf<PEMRENDPATH>
typealias PEMRENDPATH = CPointer<tagABORTPATH>

typealias EMRCLOSEFIGURE = tagABORTPATH

typealias PEMRCLOSEFIGUREVar = CPointerVarOf<PEMRCLOSEFIGURE>
typealias PEMRCLOSEFIGURE = CPointer<tagABORTPATH>

typealias EMRFLATTENPATH = tagABORTPATH

typealias PEMRFLATTENPATHVar = CPointerVarOf<PEMRFLATTENPATH>
typealias PEMRFLATTENPATH = CPointer<tagABORTPATH>

typealias EMRWIDENPATH = tagABORTPATH

typealias PEMRWIDENPATHVar = CPointerVarOf<PEMRWIDENPATH>
typealias PEMRWIDENPATH = CPointer<tagABORTPATH>

typealias EMRSETMETARGN = tagABORTPATH

typealias PEMRSETMETARGNVar = CPointerVarOf<PEMRSETMETARGN>
typealias PEMRSETMETARGN = CPointer<tagABORTPATH>

typealias EMRSAVEDC = tagABORTPATH

typealias PEMRSAVEDCVar = CPointerVarOf<PEMRSAVEDC>
typealias PEMRSAVEDC = CPointer<tagABORTPATH>

typealias EMRREALIZEPALETTE = tagABORTPATH

typealias PEMRREALIZEPALETTEVar = CPointerVarOf<PEMRREALIZEPALETTE>
typealias PEMRREALIZEPALETTE = CPointer<tagABORTPATH>

typealias EMRSELECTCLIPPATH = tagEMRSELECTCLIPPATH

typealias PEMRSELECTCLIPPATHVar = CPointerVarOf<PEMRSELECTCLIPPATH>
typealias PEMRSELECTCLIPPATH = CPointer<tagEMRSELECTCLIPPATH>

typealias EMRSETBKMODE = tagEMRSELECTCLIPPATH

typealias PEMRSETBKMODEVar = CPointerVarOf<PEMRSETBKMODE>
typealias PEMRSETBKMODE = CPointer<tagEMRSELECTCLIPPATH>

typealias EMRSETMAPMODE = tagEMRSELECTCLIPPATH

typealias PEMRSETMAPMODEVar = CPointerVarOf<PEMRSETMAPMODE>
typealias PEMRSETMAPMODE = CPointer<tagEMRSELECTCLIPPATH>

typealias EMRSETLAYOUT = tagEMRSELECTCLIPPATH

typealias PEMRSETLAYOUTVar = CPointerVarOf<PEMRSETLAYOUT>
typealias PEMRSETLAYOUT = CPointer<tagEMRSELECTCLIPPATH>

typealias EMRSETPOLYFILLMODE = tagEMRSELECTCLIPPATH

typealias PEMRSETPOLYFILLMODEVar = CPointerVarOf<PEMRSETPOLYFILLMODE>
typealias PEMRSETPOLYFILLMODE = CPointer<tagEMRSELECTCLIPPATH>

typealias EMRSETROP2 = tagEMRSELECTCLIPPATH

typealias PEMRSETROP2Var = CPointerVarOf<PEMRSETROP2>
typealias PEMRSETROP2 = CPointer<tagEMRSELECTCLIPPATH>

typealias EMRSETSTRETCHBLTMODE = tagEMRSELECTCLIPPATH

typealias PEMRSETSTRETCHBLTMODEVar = CPointerVarOf<PEMRSETSTRETCHBLTMODE>
typealias PEMRSETSTRETCHBLTMODE = CPointer<tagEMRSELECTCLIPPATH>

typealias EMRSETICMMODE = tagEMRSELECTCLIPPATH

typealias PEMRSETICMMODEVar = CPointerVarOf<PEMRSETICMMODE>
typealias PEMRSETICMMODE = CPointer<tagEMRSELECTCLIPPATH>

typealias EMRSETTEXTALIGN = tagEMRSELECTCLIPPATH

typealias PEMRSETTEXTALIGNVar = CPointerVarOf<PEMRSETTEXTALIGN>
typealias PEMRSETTEXTALIGN = CPointer<tagEMRSELECTCLIPPATH>

typealias EMRSETMITERLIMIT = tagEMRSETMITERLIMIT

typealias PEMRSETMITERLIMITVar = CPointerVarOf<PEMRSETMITERLIMIT>
typealias PEMRSETMITERLIMIT = CPointer<tagEMRSETMITERLIMIT>

typealias EMRRESTOREDC = tagEMRRESTOREDC

typealias PEMRRESTOREDCVar = CPointerVarOf<PEMRRESTOREDC>
typealias PEMRRESTOREDC = CPointer<tagEMRRESTOREDC>

typealias EMRSETARCDIRECTION = tagEMRSETARCDIRECTION

typealias PEMRSETARCDIRECTIONVar = CPointerVarOf<PEMRSETARCDIRECTION>
typealias PEMRSETARCDIRECTION = CPointer<tagEMRSETARCDIRECTION>

typealias EMRSETMAPPERFLAGS = tagEMRSETMAPPERFLAGS

typealias PEMRSETMAPPERFLAGSVar = CPointerVarOf<PEMRSETMAPPERFLAGS>
typealias PEMRSETMAPPERFLAGS = CPointer<tagEMRSETMAPPERFLAGS>

typealias EMRSETBKCOLOR = tagEMRSETTEXTCOLOR

typealias PEMRSETBKCOLORVar = CPointerVarOf<PEMRSETBKCOLOR>
typealias PEMRSETBKCOLOR = CPointer<tagEMRSETTEXTCOLOR>

typealias EMRSETTEXTCOLOR = tagEMRSETTEXTCOLOR

typealias PEMRSETTEXTCOLORVar = CPointerVarOf<PEMRSETTEXTCOLOR>
typealias PEMRSETTEXTCOLOR = CPointer<tagEMRSETTEXTCOLOR>

typealias EMRSELECTOBJECT = tagEMRSELECTOBJECT

typealias PEMRSELECTOBJECTVar = CPointerVarOf<PEMRSELECTOBJECT>
typealias PEMRSELECTOBJECT = CPointer<tagEMRSELECTOBJECT>

typealias EMRDELETEOBJECT = tagEMRSELECTOBJECT

typealias PEMRDELETEOBJECTVar = CPointerVarOf<PEMRDELETEOBJECT>
typealias PEMRDELETEOBJECT = CPointer<tagEMRSELECTOBJECT>

typealias EMRSELECTPALETTE = tagEMRSELECTPALETTE

typealias PEMRSELECTPALETTEVar = CPointerVarOf<PEMRSELECTPALETTE>
typealias PEMRSELECTPALETTE = CPointer<tagEMRSELECTPALETTE>

typealias EMRRESIZEPALETTE = tagEMRRESIZEPALETTE

typealias PEMRRESIZEPALETTEVar = CPointerVarOf<PEMRRESIZEPALETTE>
typealias PEMRRESIZEPALETTE = CPointer<tagEMRRESIZEPALETTE>

typealias EMRSETPALETTEENTRIES = tagEMRSETPALETTEENTRIES

typealias PEMRSETPALETTEENTRIESVar = CPointerVarOf<PEMRSETPALETTEENTRIES>
typealias PEMRSETPALETTEENTRIES = CPointer<tagEMRSETPALETTEENTRIES>

typealias EMRSETCOLORADJUSTMENT = tagEMRSETCOLORADJUSTMENT

typealias PEMRSETCOLORADJUSTMENTVar = CPointerVarOf<PEMRSETCOLORADJUSTMENT>
typealias PEMRSETCOLORADJUSTMENT = CPointer<tagEMRSETCOLORADJUSTMENT>

typealias EMRGDICOMMENT = tagEMRGDICOMMENT

typealias PEMRGDICOMMENTVar = CPointerVarOf<PEMRGDICOMMENT>
typealias PEMRGDICOMMENT = CPointer<tagEMRGDICOMMENT>

typealias EMREOF = tagEMREOF

typealias PEMREOFVar = CPointerVarOf<PEMREOF>
typealias PEMREOF = CPointer<tagEMREOF>

typealias EMRLINETO = tagEMRLINETO

typealias PEMRLINETOVar = CPointerVarOf<PEMRLINETO>
typealias PEMRLINETO = CPointer<tagEMRLINETO>

typealias EMRMOVETOEX = tagEMRLINETO

typealias PEMRMOVETOEXVar = CPointerVarOf<PEMRMOVETOEX>
typealias PEMRMOVETOEX = CPointer<tagEMRLINETO>

typealias EMROFFSETCLIPRGN = tagEMROFFSETCLIPRGN

typealias PEMROFFSETCLIPRGNVar = CPointerVarOf<PEMROFFSETCLIPRGN>
typealias PEMROFFSETCLIPRGN = CPointer<tagEMROFFSETCLIPRGN>

typealias EMRFILLPATH = tagEMRFILLPATH

typealias PEMRFILLPATHVar = CPointerVarOf<PEMRFILLPATH>
typealias PEMRFILLPATH = CPointer<tagEMRFILLPATH>

typealias EMRSTROKEANDFILLPATH = tagEMRFILLPATH

typealias PEMRSTROKEANDFILLPATHVar = CPointerVarOf<PEMRSTROKEANDFILLPATH>
typealias PEMRSTROKEANDFILLPATH = CPointer<tagEMRFILLPATH>

typealias EMRSTROKEPATH = tagEMRFILLPATH

typealias PEMRSTROKEPATHVar = CPointerVarOf<PEMRSTROKEPATH>
typealias PEMRSTROKEPATH = CPointer<tagEMRFILLPATH>

typealias EMREXCLUDECLIPRECT = tagEMREXCLUDECLIPRECT

typealias PEMREXCLUDECLIPRECTVar = CPointerVarOf<PEMREXCLUDECLIPRECT>
typealias PEMREXCLUDECLIPRECT = CPointer<tagEMREXCLUDECLIPRECT>

typealias EMRINTERSECTCLIPRECT = tagEMREXCLUDECLIPRECT

typealias PEMRINTERSECTCLIPRECTVar = CPointerVarOf<PEMRINTERSECTCLIPRECT>
typealias PEMRINTERSECTCLIPRECT = CPointer<tagEMREXCLUDECLIPRECT>

typealias EMRSETVIEWPORTORGEX = tagEMRSETVIEWPORTORGEX

typealias PEMRSETVIEWPORTORGEXVar = CPointerVarOf<PEMRSETVIEWPORTORGEX>
typealias PEMRSETVIEWPORTORGEX = CPointer<tagEMRSETVIEWPORTORGEX>

typealias EMRSETWINDOWORGEX = tagEMRSETVIEWPORTORGEX

typealias PEMRSETWINDOWORGEXVar = CPointerVarOf<PEMRSETWINDOWORGEX>
typealias PEMRSETWINDOWORGEX = CPointer<tagEMRSETVIEWPORTORGEX>

typealias EMRSETBRUSHORGEX = tagEMRSETVIEWPORTORGEX

typealias PEMRSETBRUSHORGEXVar = CPointerVarOf<PEMRSETBRUSHORGEX>
typealias PEMRSETBRUSHORGEX = CPointer<tagEMRSETVIEWPORTORGEX>

typealias EMRSETVIEWPORTEXTEX = tagEMRSETVIEWPORTEXTEX

typealias PEMRSETVIEWPORTEXTEXVar = CPointerVarOf<PEMRSETVIEWPORTEXTEX>
typealias PEMRSETVIEWPORTEXTEX = CPointer<tagEMRSETVIEWPORTEXTEX>

typealias EMRSETWINDOWEXTEX = tagEMRSETVIEWPORTEXTEX

typealias PEMRSETWINDOWEXTEXVar = CPointerVarOf<PEMRSETWINDOWEXTEX>
typealias PEMRSETWINDOWEXTEX = CPointer<tagEMRSETVIEWPORTEXTEX>

typealias EMRSCALEVIEWPORTEXTEX = tagEMRSCALEVIEWPORTEXTEX

typealias PEMRSCALEVIEWPORTEXTEXVar = CPointerVarOf<PEMRSCALEVIEWPORTEXTEX>
typealias PEMRSCALEVIEWPORTEXTEX = CPointer<tagEMRSCALEVIEWPORTEXTEX>

typealias EMRSCALEWINDOWEXTEX = tagEMRSCALEVIEWPORTEXTEX

typealias PEMRSCALEWINDOWEXTEXVar = CPointerVarOf<PEMRSCALEWINDOWEXTEX>
typealias PEMRSCALEWINDOWEXTEX = CPointer<tagEMRSCALEVIEWPORTEXTEX>

typealias EMRSETWORLDTRANSFORM = tagEMRSETWORLDTRANSFORM

typealias PEMRSETWORLDTRANSFORMVar = CPointerVarOf<PEMRSETWORLDTRANSFORM>
typealias PEMRSETWORLDTRANSFORM = CPointer<tagEMRSETWORLDTRANSFORM>

typealias EMRMODIFYWORLDTRANSFORM = tagEMRMODIFYWORLDTRANSFORM

typealias PEMRMODIFYWORLDTRANSFORMVar = CPointerVarOf<PEMRMODIFYWORLDTRANSFORM>
typealias PEMRMODIFYWORLDTRANSFORM = CPointer<tagEMRMODIFYWORLDTRANSFORM>

typealias EMRSETPIXELV = tagEMRSETPIXELV

typealias PEMRSETPIXELVVar = CPointerVarOf<PEMRSETPIXELV>
typealias PEMRSETPIXELV = CPointer<tagEMRSETPIXELV>

typealias EMREXTFLOODFILL = tagEMREXTFLOODFILL

typealias PEMREXTFLOODFILLVar = CPointerVarOf<PEMREXTFLOODFILL>
typealias PEMREXTFLOODFILL = CPointer<tagEMREXTFLOODFILL>

typealias EMRELLIPSE = tagEMRELLIPSE

typealias PEMRELLIPSEVar = CPointerVarOf<PEMRELLIPSE>
typealias PEMRELLIPSE = CPointer<tagEMRELLIPSE>

typealias EMRRECTANGLE = tagEMRELLIPSE

typealias PEMRRECTANGLEVar = CPointerVarOf<PEMRRECTANGLE>
typealias PEMRRECTANGLE = CPointer<tagEMRELLIPSE>

typealias EMRROUNDRECT = tagEMRROUNDRECT

typealias PEMRROUNDRECTVar = CPointerVarOf<PEMRROUNDRECT>
typealias PEMRROUNDRECT = CPointer<tagEMRROUNDRECT>

typealias EMRARC = tagEMRARC

typealias PEMRARCVar = CPointerVarOf<PEMRARC>
typealias PEMRARC = CPointer<tagEMRARC>

typealias EMRARCTO = tagEMRARC

typealias PEMRARCTOVar = CPointerVarOf<PEMRARCTO>
typealias PEMRARCTO = CPointer<tagEMRARC>

typealias EMRCHORD = tagEMRARC

typealias PEMRCHORDVar = CPointerVarOf<PEMRCHORD>
typealias PEMRCHORD = CPointer<tagEMRARC>

typealias EMRPIE = tagEMRARC

typealias PEMRPIEVar = CPointerVarOf<PEMRPIE>
typealias PEMRPIE = CPointer<tagEMRARC>

typealias EMRANGLEARC = tagEMRANGLEARC

typealias PEMRANGLEARCVar = CPointerVarOf<PEMRANGLEARC>
typealias PEMRANGLEARC = CPointer<tagEMRANGLEARC>

typealias EMRPOLYLINE = tagEMRPOLYLINE

typealias PEMRPOLYLINEVar = CPointerVarOf<PEMRPOLYLINE>
typealias PEMRPOLYLINE = CPointer<tagEMRPOLYLINE>

typealias EMRPOLYBEZIER = tagEMRPOLYLINE

typealias PEMRPOLYBEZIERVar = CPointerVarOf<PEMRPOLYBEZIER>
typealias PEMRPOLYBEZIER = CPointer<tagEMRPOLYLINE>

typealias EMRPOLYGON = tagEMRPOLYLINE

typealias PEMRPOLYGONVar = CPointerVarOf<PEMRPOLYGON>
typealias PEMRPOLYGON = CPointer<tagEMRPOLYLINE>

typealias EMRPOLYBEZIERTO = tagEMRPOLYLINE

typealias PEMRPOLYBEZIERTOVar = CPointerVarOf<PEMRPOLYBEZIERTO>
typealias PEMRPOLYBEZIERTO = CPointer<tagEMRPOLYLINE>

typealias EMRPOLYLINETO = tagEMRPOLYLINE

typealias PEMRPOLYLINETOVar = CPointerVarOf<PEMRPOLYLINETO>
typealias PEMRPOLYLINETO = CPointer<tagEMRPOLYLINE>

typealias EMRPOLYLINE16 = tagEMRPOLYLINE16

typealias PEMRPOLYLINE16Var = CPointerVarOf<PEMRPOLYLINE16>
typealias PEMRPOLYLINE16 = CPointer<tagEMRPOLYLINE16>

typealias EMRPOLYBEZIER16 = tagEMRPOLYLINE16

typealias PEMRPOLYBEZIER16Var = CPointerVarOf<PEMRPOLYBEZIER16>
typealias PEMRPOLYBEZIER16 = CPointer<tagEMRPOLYLINE16>

typealias EMRPOLYGON16 = tagEMRPOLYLINE16

typealias PEMRPOLYGON16Var = CPointerVarOf<PEMRPOLYGON16>
typealias PEMRPOLYGON16 = CPointer<tagEMRPOLYLINE16>

typealias EMRPOLYBEZIERTO16 = tagEMRPOLYLINE16

typealias PEMRPOLYBEZIERTO16Var = CPointerVarOf<PEMRPOLYBEZIERTO16>
typealias PEMRPOLYBEZIERTO16 = CPointer<tagEMRPOLYLINE16>

typealias EMRPOLYLINETO16 = tagEMRPOLYLINE16

typealias PEMRPOLYLINETO16Var = CPointerVarOf<PEMRPOLYLINETO16>
typealias PEMRPOLYLINETO16 = CPointer<tagEMRPOLYLINE16>

typealias EMRPOLYDRAW = tagEMRPOLYDRAW

typealias PEMRPOLYDRAWVar = CPointerVarOf<PEMRPOLYDRAW>
typealias PEMRPOLYDRAW = CPointer<tagEMRPOLYDRAW>

typealias EMRPOLYDRAW16 = tagEMRPOLYDRAW16

typealias PEMRPOLYDRAW16Var = CPointerVarOf<PEMRPOLYDRAW16>
typealias PEMRPOLYDRAW16 = CPointer<tagEMRPOLYDRAW16>

typealias EMRPOLYPOLYLINE = tagEMRPOLYPOLYLINE

typealias PEMRPOLYPOLYLINEVar = CPointerVarOf<PEMRPOLYPOLYLINE>
typealias PEMRPOLYPOLYLINE = CPointer<tagEMRPOLYPOLYLINE>

typealias EMRPOLYPOLYGON = tagEMRPOLYPOLYLINE

typealias PEMRPOLYPOLYGONVar = CPointerVarOf<PEMRPOLYPOLYGON>
typealias PEMRPOLYPOLYGON = CPointer<tagEMRPOLYPOLYLINE>

typealias EMRPOLYPOLYLINE16 = tagEMRPOLYPOLYLINE16

typealias PEMRPOLYPOLYLINE16Var = CPointerVarOf<PEMRPOLYPOLYLINE16>
typealias PEMRPOLYPOLYLINE16 = CPointer<tagEMRPOLYPOLYLINE16>

typealias EMRPOLYPOLYGON16 = tagEMRPOLYPOLYLINE16

typealias PEMRPOLYPOLYGON16Var = CPointerVarOf<PEMRPOLYPOLYGON16>
typealias PEMRPOLYPOLYGON16 = CPointer<tagEMRPOLYPOLYLINE16>

typealias EMRINVERTRGN = tagEMRINVERTRGN

typealias PEMRINVERTRGNVar = CPointerVarOf<PEMRINVERTRGN>
typealias PEMRINVERTRGN = CPointer<tagEMRINVERTRGN>

typealias EMRPAINTRGN = tagEMRINVERTRGN

typealias PEMRPAINTRGNVar = CPointerVarOf<PEMRPAINTRGN>
typealias PEMRPAINTRGN = CPointer<tagEMRINVERTRGN>

typealias EMRFILLRGN = tagEMRFILLRGN

typealias PEMRFILLRGNVar = CPointerVarOf<PEMRFILLRGN>
typealias PEMRFILLRGN = CPointer<tagEMRFILLRGN>

typealias EMRFRAMERGN = tagEMRFRAMERGN

typealias PEMRFRAMERGNVar = CPointerVarOf<PEMRFRAMERGN>
typealias PEMRFRAMERGN = CPointer<tagEMRFRAMERGN>

typealias EMREXTSELECTCLIPRGN = tagEMREXTSELECTCLIPRGN

typealias PEMREXTSELECTCLIPRGNVar = CPointerVarOf<PEMREXTSELECTCLIPRGN>
typealias PEMREXTSELECTCLIPRGN = CPointer<tagEMREXTSELECTCLIPRGN>

typealias EMREXTTEXTOUTA = tagEMREXTTEXTOUTA

typealias PEMREXTTEXTOUTAVar = CPointerVarOf<PEMREXTTEXTOUTA>
typealias PEMREXTTEXTOUTA = CPointer<tagEMREXTTEXTOUTA>

typealias EMREXTTEXTOUTW = tagEMREXTTEXTOUTA

typealias PEMREXTTEXTOUTWVar = CPointerVarOf<PEMREXTTEXTOUTW>
typealias PEMREXTTEXTOUTW = CPointer<tagEMREXTTEXTOUTA>

typealias EMRPOLYTEXTOUTA = tagEMRPOLYTEXTOUTA

typealias PEMRPOLYTEXTOUTAVar = CPointerVarOf<PEMRPOLYTEXTOUTA>
typealias PEMRPOLYTEXTOUTA = CPointer<tagEMRPOLYTEXTOUTA>

typealias EMRPOLYTEXTOUTW = tagEMRPOLYTEXTOUTA

typealias PEMRPOLYTEXTOUTWVar = CPointerVarOf<PEMRPOLYTEXTOUTW>
typealias PEMRPOLYTEXTOUTW = CPointer<tagEMRPOLYTEXTOUTA>

typealias EMRBITBLT = tagEMRBITBLT

typealias PEMRBITBLTVar = CPointerVarOf<PEMRBITBLT>
typealias PEMRBITBLT = CPointer<tagEMRBITBLT>

typealias EMRSTRETCHBLT = tagEMRSTRETCHBLT

typealias PEMRSTRETCHBLTVar = CPointerVarOf<PEMRSTRETCHBLT>
typealias PEMRSTRETCHBLT = CPointer<tagEMRSTRETCHBLT>

typealias EMRMASKBLT = tagEMRMASKBLT

typealias PEMRMASKBLTVar = CPointerVarOf<PEMRMASKBLT>
typealias PEMRMASKBLT = CPointer<tagEMRMASKBLT>

typealias EMRPLGBLT = tagEMRPLGBLT

typealias PEMRPLGBLTVar = CPointerVarOf<PEMRPLGBLT>
typealias PEMRPLGBLT = CPointer<tagEMRPLGBLT>

typealias EMRSETDIBITSTODEVICE = tagEMRSETDIBITSTODEVICE

typealias PEMRSETDIBITSTODEVICEVar = CPointerVarOf<PEMRSETDIBITSTODEVICE>
typealias PEMRSETDIBITSTODEVICE = CPointer<tagEMRSETDIBITSTODEVICE>

typealias EMRSTRETCHDIBITS = tagEMRSTRETCHDIBITS

typealias PEMRSTRETCHDIBITSVar = CPointerVarOf<PEMRSTRETCHDIBITS>
typealias PEMRSTRETCHDIBITS = CPointer<tagEMRSTRETCHDIBITS>

typealias EMREXTCREATEFONTINDIRECTW = tagEMREXTCREATEFONTINDIRECTW

typealias PEMREXTCREATEFONTINDIRECTWVar = CPointerVarOf<PEMREXTCREATEFONTINDIRECTW>
typealias PEMREXTCREATEFONTINDIRECTW = CPointer<tagEMREXTCREATEFONTINDIRECTW>

typealias EMRCREATEPALETTE = tagEMRCREATEPALETTE

typealias PEMRCREATEPALETTEVar = CPointerVarOf<PEMRCREATEPALETTE>
typealias PEMRCREATEPALETTE = CPointer<tagEMRCREATEPALETTE>

typealias EMRCREATEPEN = tagEMRCREATEPEN

typealias PEMRCREATEPENVar = CPointerVarOf<PEMRCREATEPEN>
typealias PEMRCREATEPEN = CPointer<tagEMRCREATEPEN>

typealias EMREXTCREATEPEN = tagEMREXTCREATEPEN

typealias PEMREXTCREATEPENVar = CPointerVarOf<PEMREXTCREATEPEN>
typealias PEMREXTCREATEPEN = CPointer<tagEMREXTCREATEPEN>

typealias EMRCREATEBRUSHINDIRECT = tagEMRCREATEBRUSHINDIRECT

typealias PEMRCREATEBRUSHINDIRECTVar = CPointerVarOf<PEMRCREATEBRUSHINDIRECT>
typealias PEMRCREATEBRUSHINDIRECT = CPointer<tagEMRCREATEBRUSHINDIRECT>

typealias EMRCREATEMONOBRUSH = tagEMRCREATEMONOBRUSH

typealias PEMRCREATEMONOBRUSHVar = CPointerVarOf<PEMRCREATEMONOBRUSH>
typealias PEMRCREATEMONOBRUSH = CPointer<tagEMRCREATEMONOBRUSH>

typealias EMRCREATEDIBPATTERNBRUSHPT = tagEMRCREATEDIBPATTERNBRUSHPT

typealias PEMRCREATEDIBPATTERNBRUSHPTVar = CPointerVarOf<PEMRCREATEDIBPATTERNBRUSHPT>
typealias PEMRCREATEDIBPATTERNBRUSHPT = CPointer<tagEMRCREATEDIBPATTERNBRUSHPT>

typealias EMRFORMAT = tagEMRFORMAT

typealias PEMRFORMATVar = CPointerVarOf<PEMRFORMAT>
typealias PEMRFORMAT = CPointer<tagEMRFORMAT>

typealias EMRGLSRECORD = tagEMRGLSRECORD

typealias PEMRGLSRECORDVar = CPointerVarOf<PEMRGLSRECORD>
typealias PEMRGLSRECORD = CPointer<tagEMRGLSRECORD>

typealias EMRGLSBOUNDEDRECORD = tagEMRGLSBOUNDEDRECORD

typealias PEMRGLSBOUNDEDRECORDVar = CPointerVarOf<PEMRGLSBOUNDEDRECORD>
typealias PEMRGLSBOUNDEDRECORD = CPointer<tagEMRGLSBOUNDEDRECORD>

typealias EMRPIXELFORMAT = tagEMRPIXELFORMAT

typealias PEMRPIXELFORMATVar = CPointerVarOf<PEMRPIXELFORMAT>
typealias PEMRPIXELFORMAT = CPointer<tagEMRPIXELFORMAT>

typealias EMRCREATECOLORSPACE = tagEMRCREATECOLORSPACE

typealias PEMRCREATECOLORSPACEVar = CPointerVarOf<PEMRCREATECOLORSPACE>
typealias PEMRCREATECOLORSPACE = CPointer<tagEMRCREATECOLORSPACE>

typealias EMRSETCOLORSPACE = tagEMRSETCOLORSPACE

typealias PEMRSETCOLORSPACEVar = CPointerVarOf<PEMRSETCOLORSPACE>
typealias PEMRSETCOLORSPACE = CPointer<tagEMRSETCOLORSPACE>

typealias EMRSELECTCOLORSPACE = tagEMRSETCOLORSPACE

typealias PEMRSELECTCOLORSPACEVar = CPointerVarOf<PEMRSELECTCOLORSPACE>
typealias PEMRSELECTCOLORSPACE = CPointer<tagEMRSETCOLORSPACE>

typealias EMRDELETECOLORSPACE = tagEMRSETCOLORSPACE

typealias PEMRDELETECOLORSPACEVar = CPointerVarOf<PEMRDELETECOLORSPACE>
typealias PEMRDELETECOLORSPACE = CPointer<tagEMRSETCOLORSPACE>

typealias EMREXTESCAPE = tagEMREXTESCAPE

typealias PEMREXTESCAPEVar = CPointerVarOf<PEMREXTESCAPE>
typealias PEMREXTESCAPE = CPointer<tagEMREXTESCAPE>

typealias EMRDRAWESCAPE = tagEMREXTESCAPE

typealias PEMRDRAWESCAPEVar = CPointerVarOf<PEMRDRAWESCAPE>
typealias PEMRDRAWESCAPE = CPointer<tagEMREXTESCAPE>

typealias EMRNAMEDESCAPE = tagEMRNAMEDESCAPE

typealias PEMRNAMEDESCAPEVar = CPointerVarOf<PEMRNAMEDESCAPE>
typealias PEMRNAMEDESCAPE = CPointer<tagEMRNAMEDESCAPE>

typealias EMRSETICMPROFILE = tagEMRSETICMPROFILE

typealias PEMRSETICMPROFILEVar = CPointerVarOf<PEMRSETICMPROFILE>
typealias PEMRSETICMPROFILE = CPointer<tagEMRSETICMPROFILE>

typealias EMRSETICMPROFILEA = tagEMRSETICMPROFILE

typealias PEMRSETICMPROFILEAVar = CPointerVarOf<PEMRSETICMPROFILEA>
typealias PEMRSETICMPROFILEA = CPointer<tagEMRSETICMPROFILE>

typealias EMRSETICMPROFILEW = tagEMRSETICMPROFILE

typealias PEMRSETICMPROFILEWVar = CPointerVarOf<PEMRSETICMPROFILEW>
typealias PEMRSETICMPROFILEW = CPointer<tagEMRSETICMPROFILE>

typealias EMRCREATECOLORSPACEW = tagEMRCREATECOLORSPACEW

typealias PEMRCREATECOLORSPACEWVar = CPointerVarOf<PEMRCREATECOLORSPACEW>
typealias PEMRCREATECOLORSPACEW = CPointer<tagEMRCREATECOLORSPACEW>

typealias EMRCOLORMATCHTOTARGET = tagCOLORMATCHTOTARGET

typealias PEMRCOLORMATCHTOTARGETVar = CPointerVarOf<PEMRCOLORMATCHTOTARGET>
typealias PEMRCOLORMATCHTOTARGET = CPointer<tagCOLORMATCHTOTARGET>

typealias EMRCOLORCORRECTPALETTE = tagCOLORCORRECTPALETTE

typealias PEMRCOLORCORRECTPALETTEVar = CPointerVarOf<PEMRCOLORCORRECTPALETTE>
typealias PEMRCOLORCORRECTPALETTE = CPointer<tagCOLORCORRECTPALETTE>

typealias EMRALPHABLEND = tagEMRALPHABLEND

typealias PEMRALPHABLENDVar = CPointerVarOf<PEMRALPHABLEND>
typealias PEMRALPHABLEND = CPointer<tagEMRALPHABLEND>

typealias EMRGRADIENTFILL = tagEMRGRADIENTFILL

typealias PEMRGRADIENTFILLVar = CPointerVarOf<PEMRGRADIENTFILL>
typealias PEMRGRADIENTFILL = CPointer<tagEMRGRADIENTFILL>

typealias EMRTRANSPARENTBLT = tagEMRTRANSPARENTBLT

typealias PEMRTRANSPARENTBLTVar = CPointerVarOf<PEMRTRANSPARENTBLT>
typealias PEMRTRANSPARENTBLT = CPointer<tagEMRTRANSPARENTBLT>

typealias POINTFLOAT = _POINTFLOAT

typealias PPOINTFLOATVar = CPointerVarOf<PPOINTFLOAT>
typealias PPOINTFLOAT = CPointer<_POINTFLOAT>

typealias GLYPHMETRICSFLOAT = _GLYPHMETRICSFLOAT

typealias PGLYPHMETRICSFLOATVar = CPointerVarOf<PGLYPHMETRICSFLOAT>
typealias PGLYPHMETRICSFLOAT = CPointer<_GLYPHMETRICSFLOAT>

typealias LPGLYPHMETRICSFLOATVar = CPointerVarOf<LPGLYPHMETRICSFLOAT>
typealias LPGLYPHMETRICSFLOAT = CPointer<_GLYPHMETRICSFLOAT>

typealias LAYERPLANEDESCRIPTOR = tagLAYERPLANEDESCRIPTOR

typealias PLAYERPLANEDESCRIPTORVar = CPointerVarOf<PLAYERPLANEDESCRIPTOR>
typealias PLAYERPLANEDESCRIPTOR = CPointer<tagLAYERPLANEDESCRIPTOR>

typealias LPLAYERPLANEDESCRIPTORVar = CPointerVarOf<LPLAYERPLANEDESCRIPTOR>
typealias LPLAYERPLANEDESCRIPTOR = CPointer<tagLAYERPLANEDESCRIPTOR>

typealias WGLSWAP = _WGLSWAP

typealias PWGLSWAPVar = CPointerVarOf<PWGLSWAP>
typealias PWGLSWAP = CPointer<_WGLSWAP>

typealias LPWGLSWAPVar = CPointerVarOf<LPWGLSWAP>
typealias LPWGLSWAP = CPointer<_WGLSWAP>

typealias HDWPVar = CPointerVarOf<HDWP>
typealias HDWP = HANDLE

typealias LPMENUTEMPLATEAVar = CPointerVarOf<LPMENUTEMPLATEA>
typealias LPMENUTEMPLATEA = PVOID

typealias LPMENUTEMPLATEWVar = CPointerVarOf<LPMENUTEMPLATEW>
typealias LPMENUTEMPLATEW = PVOID

typealias LPMENUTEMPLATEVar = CPointerVarOf<LPMENUTEMPLATE>
typealias LPMENUTEMPLATE = LPMENUTEMPLATEW

typealias LRESULTVar = LongVarOf<LRESULT>
typealias LRESULT = LONG_PTR

typealias WPARAMVar = LongVarOf<WPARAM>
typealias WPARAM = UINT_PTR

typealias WNDPROCVar = CPointerVarOf<WNDPROC>
typealias WNDPROC = CPointer<CFunction<(HWND?, UINT, WPARAM, LPARAM) -> LRESULT>>

typealias INT_PTRVar = LongVarOf<INT_PTR>
typealias INT_PTR = Long

typealias DLGPROCVar = CPointerVarOf<DLGPROC>
typealias DLGPROC = CPointer<CFunction<(HWND?, UINT, WPARAM, LPARAM) -> INT_PTR>>

typealias TIMERPROCVar = CPointerVarOf<TIMERPROC>
typealias TIMERPROC = CPointer<CFunction<(HWND?, UINT, UINT_PTR, DWORD) -> Unit>>

typealias GRAYSTRINGPROCVar = CPointerVarOf<GRAYSTRINGPROC>
typealias GRAYSTRINGPROC = CPointer<CFunction<(HDC?, LPARAM, Int) -> WINBOOL>>

typealias WNDENUMPROCVar = CPointerVarOf<WNDENUMPROC>
typealias WNDENUMPROC = CPointer<CFunction<(HWND?, LPARAM) -> WINBOOL>>

typealias HOOKPROCVar = CPointerVarOf<HOOKPROC>
typealias HOOKPROC = CPointer<CFunction<(Int, WPARAM, LPARAM) -> LRESULT>>

typealias SENDASYNCPROCVar = CPointerVarOf<SENDASYNCPROC>
typealias SENDASYNCPROC = CPointer<CFunction<(HWND?, UINT, ULONG_PTR, LRESULT) -> Unit>>

typealias PROPENUMPROCAVar = CPointerVarOf<PROPENUMPROCA>
typealias PROPENUMPROCA = CPointer<CFunction<(HWND?, LPCSTR?, HANDLE?) -> WINBOOL>>

typealias PROPENUMPROCWVar = CPointerVarOf<PROPENUMPROCW>
typealias PROPENUMPROCW = CPointer<CFunction<(HWND?, LPCWSTR?, HANDLE?) -> WINBOOL>>

typealias PROPENUMPROCEXAVar = CPointerVarOf<PROPENUMPROCEXA>
typealias PROPENUMPROCEXA = CPointer<CFunction<(HWND?, LPSTR?, HANDLE?, ULONG_PTR) -> WINBOOL>>

typealias PROPENUMPROCEXWVar = CPointerVarOf<PROPENUMPROCEXW>
typealias PROPENUMPROCEXW = CPointer<CFunction<(HWND?, LPWSTR?, HANDLE?, ULONG_PTR) -> WINBOOL>>

typealias EDITWORDBREAKPROCAVar = CPointerVarOf<EDITWORDBREAKPROCA>
typealias EDITWORDBREAKPROCA = CPointer<CFunction<(LPSTR?, Int, Int, Int) -> Int>>

typealias EDITWORDBREAKPROCWVar = CPointerVarOf<EDITWORDBREAKPROCW>
typealias EDITWORDBREAKPROCW = CPointer<CFunction<(LPWSTR?, Int, Int, Int) -> Int>>

typealias DRAWSTATEPROCVar = CPointerVarOf<DRAWSTATEPROC>
typealias DRAWSTATEPROC = CPointer<CFunction<(HDC?, LPARAM, WPARAM, Int, Int) -> WINBOOL>>

typealias PROPENUMPROCVar = CPointerVarOf<PROPENUMPROC>
typealias PROPENUMPROC = PROPENUMPROCW

typealias PROPENUMPROCEXVar = CPointerVarOf<PROPENUMPROCEX>
typealias PROPENUMPROCEX = PROPENUMPROCEXW

typealias EDITWORDBREAKPROCVar = CPointerVarOf<EDITWORDBREAKPROC>
typealias EDITWORDBREAKPROC = EDITWORDBREAKPROCW

typealias NAMEENUMPROCAVar = CPointerVarOf<NAMEENUMPROCA>
typealias NAMEENUMPROCA = CPointer<CFunction<(LPSTR?, LPARAM) -> WINBOOL>>

typealias NAMEENUMPROCWVar = CPointerVarOf<NAMEENUMPROCW>
typealias NAMEENUMPROCW = CPointer<CFunction<(LPWSTR?, LPARAM) -> WINBOOL>>

typealias WINSTAENUMPROCAVar = CPointerVarOf<WINSTAENUMPROCA>
typealias WINSTAENUMPROCA = NAMEENUMPROCA

typealias WINSTAENUMPROCWVar = CPointerVarOf<WINSTAENUMPROCW>
typealias WINSTAENUMPROCW = NAMEENUMPROCW

typealias DESKTOPENUMPROCAVar = CPointerVarOf<DESKTOPENUMPROCA>
typealias DESKTOPENUMPROCA = NAMEENUMPROCA

typealias DESKTOPENUMPROCWVar = CPointerVarOf<DESKTOPENUMPROCW>
typealias DESKTOPENUMPROCW = NAMEENUMPROCW

typealias WINSTAENUMPROCVar = CPointerVarOf<WINSTAENUMPROC>
typealias WINSTAENUMPROC = WINSTAENUMPROCW

typealias DESKTOPENUMPROCVar = CPointerVarOf<DESKTOPENUMPROC>
typealias DESKTOPENUMPROC = DESKTOPENUMPROCW

typealias CBT_CREATEWNDA = tagCBT_CREATEWNDA

typealias LPCBT_CREATEWNDAVar = CPointerVarOf<LPCBT_CREATEWNDA>
typealias LPCBT_CREATEWNDA = CPointer<tagCBT_CREATEWNDA>

typealias CBT_CREATEWNDW = tagCBT_CREATEWNDW

typealias LPCBT_CREATEWNDWVar = CPointerVarOf<LPCBT_CREATEWNDW>
typealias LPCBT_CREATEWNDW = CPointer<tagCBT_CREATEWNDW>

typealias CBT_CREATEWND = CBT_CREATEWNDW

typealias LPCBT_CREATEWNDVar = CPointerVarOf<LPCBT_CREATEWND>
typealias LPCBT_CREATEWND = LPCBT_CREATEWNDW

typealias CBTACTIVATESTRUCT = tagCBTACTIVATESTRUCT

typealias LPCBTACTIVATESTRUCTVar = CPointerVarOf<LPCBTACTIVATESTRUCT>
typealias LPCBTACTIVATESTRUCT = CPointer<tagCBTACTIVATESTRUCT>

typealias WTSSESSION_NOTIFICATION = tagWTSSESSION_NOTIFICATION

typealias PWTSSESSION_NOTIFICATIONVar = CPointerVarOf<PWTSSESSION_NOTIFICATION>
typealias PWTSSESSION_NOTIFICATION = CPointer<tagWTSSESSION_NOTIFICATION>

typealias LPSHELLHOOKINFOVar = CPointerVarOf<LPSHELLHOOKINFO>
typealias LPSHELLHOOKINFO = CPointer<SHELLHOOKINFO>

typealias EVENTMSG = tagEVENTMSG

typealias PEVENTMSGMSGVar = CPointerVarOf<PEVENTMSGMSG>
typealias PEVENTMSGMSG = CPointer<tagEVENTMSG>

typealias NPEVENTMSGMSGVar = CPointerVarOf<NPEVENTMSGMSG>
typealias NPEVENTMSGMSG = CPointer<tagEVENTMSG>

typealias LPEVENTMSGMSGVar = CPointerVarOf<LPEVENTMSGMSG>
typealias LPEVENTMSGMSG = CPointer<tagEVENTMSG>

typealias PEVENTMSGVar = CPointerVarOf<PEVENTMSG>
typealias PEVENTMSG = CPointer<tagEVENTMSG>

typealias NPEVENTMSGVar = CPointerVarOf<NPEVENTMSG>
typealias NPEVENTMSG = CPointer<tagEVENTMSG>

typealias LPEVENTMSGVar = CPointerVarOf<LPEVENTMSG>
typealias LPEVENTMSG = CPointer<tagEVENTMSG>

typealias CWPSTRUCT = tagCWPSTRUCT

typealias PCWPSTRUCTVar = CPointerVarOf<PCWPSTRUCT>
typealias PCWPSTRUCT = CPointer<tagCWPSTRUCT>

typealias NPCWPSTRUCTVar = CPointerVarOf<NPCWPSTRUCT>
typealias NPCWPSTRUCT = CPointer<tagCWPSTRUCT>

typealias LPCWPSTRUCTVar = CPointerVarOf<LPCWPSTRUCT>
typealias LPCWPSTRUCT = CPointer<tagCWPSTRUCT>

typealias CWPRETSTRUCT = tagCWPRETSTRUCT

typealias PCWPRETSTRUCTVar = CPointerVarOf<PCWPRETSTRUCT>
typealias PCWPRETSTRUCT = CPointer<tagCWPRETSTRUCT>

typealias NPCWPRETSTRUCTVar = CPointerVarOf<NPCWPRETSTRUCT>
typealias NPCWPRETSTRUCT = CPointer<tagCWPRETSTRUCT>

typealias LPCWPRETSTRUCTVar = CPointerVarOf<LPCWPRETSTRUCT>
typealias LPCWPRETSTRUCT = CPointer<tagCWPRETSTRUCT>

typealias KBDLLHOOKSTRUCT = tagKBDLLHOOKSTRUCT

typealias LPKBDLLHOOKSTRUCTVar = CPointerVarOf<LPKBDLLHOOKSTRUCT>
typealias LPKBDLLHOOKSTRUCT = CPointer<tagKBDLLHOOKSTRUCT>

typealias PKBDLLHOOKSTRUCTVar = CPointerVarOf<PKBDLLHOOKSTRUCT>
typealias PKBDLLHOOKSTRUCT = CPointer<tagKBDLLHOOKSTRUCT>

typealias MSLLHOOKSTRUCT = tagMSLLHOOKSTRUCT

typealias LPMSLLHOOKSTRUCTVar = CPointerVarOf<LPMSLLHOOKSTRUCT>
typealias LPMSLLHOOKSTRUCT = CPointer<tagMSLLHOOKSTRUCT>

typealias PMSLLHOOKSTRUCTVar = CPointerVarOf<PMSLLHOOKSTRUCT>
typealias PMSLLHOOKSTRUCT = CPointer<tagMSLLHOOKSTRUCT>

typealias DEBUGHOOKINFO = tagDEBUGHOOKINFO

typealias PDEBUGHOOKINFOVar = CPointerVarOf<PDEBUGHOOKINFO>
typealias PDEBUGHOOKINFO = CPointer<tagDEBUGHOOKINFO>

typealias NPDEBUGHOOKINFOVar = CPointerVarOf<NPDEBUGHOOKINFO>
typealias NPDEBUGHOOKINFO = CPointer<tagDEBUGHOOKINFO>

typealias LPDEBUGHOOKINFOVar = CPointerVarOf<LPDEBUGHOOKINFO>
typealias LPDEBUGHOOKINFO = CPointer<tagDEBUGHOOKINFO>

typealias MOUSEHOOKSTRUCT = tagMOUSEHOOKSTRUCT

typealias LPMOUSEHOOKSTRUCTVar = CPointerVarOf<LPMOUSEHOOKSTRUCT>
typealias LPMOUSEHOOKSTRUCT = CPointer<tagMOUSEHOOKSTRUCT>

typealias PMOUSEHOOKSTRUCTVar = CPointerVarOf<PMOUSEHOOKSTRUCT>
typealias PMOUSEHOOKSTRUCT = CPointer<tagMOUSEHOOKSTRUCT>

typealias MOUSEHOOKSTRUCTEX = tagMOUSEHOOKSTRUCTEX

typealias LPMOUSEHOOKSTRUCTEXVar = CPointerVarOf<LPMOUSEHOOKSTRUCTEX>
typealias LPMOUSEHOOKSTRUCTEX = CPointer<tagMOUSEHOOKSTRUCTEX>

typealias PMOUSEHOOKSTRUCTEXVar = CPointerVarOf<PMOUSEHOOKSTRUCTEX>
typealias PMOUSEHOOKSTRUCTEX = CPointer<tagMOUSEHOOKSTRUCTEX>

typealias HARDWAREHOOKSTRUCT = tagHARDWAREHOOKSTRUCT

typealias LPHARDWAREHOOKSTRUCTVar = CPointerVarOf<LPHARDWAREHOOKSTRUCT>
typealias LPHARDWAREHOOKSTRUCT = CPointer<tagHARDWAREHOOKSTRUCT>

typealias PHARDWAREHOOKSTRUCTVar = CPointerVarOf<PHARDWAREHOOKSTRUCT>
typealias PHARDWAREHOOKSTRUCT = CPointer<tagHARDWAREHOOKSTRUCT>

typealias HKLVar = CPointerVarOf<HKL>
typealias HKL = CPointer<HKL__>

typealias MOUSEMOVEPOINT = tagMOUSEMOVEPOINT

typealias PMOUSEMOVEPOINTVar = CPointerVarOf<PMOUSEMOVEPOINT>
typealias PMOUSEMOVEPOINT = CPointer<tagMOUSEMOVEPOINT>

typealias LPMOUSEMOVEPOINTVar = CPointerVarOf<LPMOUSEMOVEPOINT>
typealias LPMOUSEMOVEPOINT = CPointer<tagMOUSEMOVEPOINT>

typealias HWINSTAVar = CPointerVarOf<HWINSTA>
typealias HWINSTA = CPointer<HWINSTA__>

typealias USEROBJECTFLAGS = tagUSEROBJECTFLAGS

typealias PUSEROBJECTFLAGSVar = CPointerVarOf<PUSEROBJECTFLAGS>
typealias PUSEROBJECTFLAGS = CPointer<tagUSEROBJECTFLAGS>

typealias WNDCLASSEXA = tagWNDCLASSEXA

typealias PWNDCLASSEXAVar = CPointerVarOf<PWNDCLASSEXA>
typealias PWNDCLASSEXA = CPointer<tagWNDCLASSEXA>

typealias NPWNDCLASSEXAVar = CPointerVarOf<NPWNDCLASSEXA>
typealias NPWNDCLASSEXA = CPointer<tagWNDCLASSEXA>

typealias LPWNDCLASSEXAVar = CPointerVarOf<LPWNDCLASSEXA>
typealias LPWNDCLASSEXA = CPointer<tagWNDCLASSEXA>

typealias WNDCLASSEXW = tagWNDCLASSEXW

typealias PWNDCLASSEXWVar = CPointerVarOf<PWNDCLASSEXW>
typealias PWNDCLASSEXW = CPointer<tagWNDCLASSEXW>

typealias NPWNDCLASSEXWVar = CPointerVarOf<NPWNDCLASSEXW>
typealias NPWNDCLASSEXW = CPointer<tagWNDCLASSEXW>

typealias LPWNDCLASSEXWVar = CPointerVarOf<LPWNDCLASSEXW>
typealias LPWNDCLASSEXW = CPointer<tagWNDCLASSEXW>

typealias WNDCLASSEX = WNDCLASSEXW

typealias PWNDCLASSEXVar = CPointerVarOf<PWNDCLASSEX>
typealias PWNDCLASSEX = PWNDCLASSEXW

typealias NPWNDCLASSEXVar = CPointerVarOf<NPWNDCLASSEX>
typealias NPWNDCLASSEX = NPWNDCLASSEXW

typealias LPWNDCLASSEXVar = CPointerVarOf<LPWNDCLASSEX>
typealias LPWNDCLASSEX = LPWNDCLASSEXW

typealias WNDCLASSA = tagWNDCLASSA

typealias PWNDCLASSAVar = CPointerVarOf<PWNDCLASSA>
typealias PWNDCLASSA = CPointer<tagWNDCLASSA>

typealias NPWNDCLASSAVar = CPointerVarOf<NPWNDCLASSA>
typealias NPWNDCLASSA = CPointer<tagWNDCLASSA>

typealias LPWNDCLASSAVar = CPointerVarOf<LPWNDCLASSA>
typealias LPWNDCLASSA = CPointer<tagWNDCLASSA>

typealias WNDCLASSW = tagWNDCLASSW

typealias PWNDCLASSWVar = CPointerVarOf<PWNDCLASSW>
typealias PWNDCLASSW = CPointer<tagWNDCLASSW>

typealias NPWNDCLASSWVar = CPointerVarOf<NPWNDCLASSW>
typealias NPWNDCLASSW = CPointer<tagWNDCLASSW>

typealias LPWNDCLASSWVar = CPointerVarOf<LPWNDCLASSW>
typealias LPWNDCLASSW = CPointer<tagWNDCLASSW>

typealias WNDCLASS = WNDCLASSW

typealias PWNDCLASSVar = CPointerVarOf<PWNDCLASS>
typealias PWNDCLASS = PWNDCLASSW

typealias NPWNDCLASSVar = CPointerVarOf<NPWNDCLASS>
typealias NPWNDCLASS = NPWNDCLASSW

typealias LPWNDCLASSVar = CPointerVarOf<LPWNDCLASS>
typealias LPWNDCLASS = LPWNDCLASSW

typealias MSG = tagMSG

typealias PMSGVar = CPointerVarOf<PMSG>
typealias PMSG = CPointer<tagMSG>

typealias NPMSGVar = CPointerVarOf<NPMSG>
typealias NPMSG = CPointer<tagMSG>

typealias LPMSGVar = CPointerVarOf<LPMSG>
typealias LPMSG = CPointer<tagMSG>

typealias MINMAXINFO = tagMINMAXINFO

typealias PMINMAXINFOVar = CPointerVarOf<PMINMAXINFO>
typealias PMINMAXINFO = CPointer<tagMINMAXINFO>

typealias LPMINMAXINFOVar = CPointerVarOf<LPMINMAXINFO>
typealias LPMINMAXINFO = CPointer<tagMINMAXINFO>

typealias COPYDATASTRUCT = tagCOPYDATASTRUCT

typealias PCOPYDATASTRUCTVar = CPointerVarOf<PCOPYDATASTRUCT>
typealias PCOPYDATASTRUCT = CPointer<tagCOPYDATASTRUCT>

typealias MDINEXTMENU = tagMDINEXTMENU

typealias PMDINEXTMENUVar = CPointerVarOf<PMDINEXTMENU>
typealias PMDINEXTMENU = CPointer<tagMDINEXTMENU>

typealias LPMDINEXTMENUVar = CPointerVarOf<LPMDINEXTMENU>
typealias LPMDINEXTMENU = CPointer<tagMDINEXTMENU>

typealias PPOWERBROADCAST_SETTINGVar = CPointerVarOf<PPOWERBROADCAST_SETTING>
typealias PPOWERBROADCAST_SETTING = CPointer<POWERBROADCAST_SETTING>

typealias WINDOWPOS = tagWINDOWPOS

typealias LPWINDOWPOSVar = CPointerVarOf<LPWINDOWPOS>
typealias LPWINDOWPOS = CPointer<tagWINDOWPOS>

typealias PWINDOWPOSVar = CPointerVarOf<PWINDOWPOS>
typealias PWINDOWPOS = CPointer<tagWINDOWPOS>

typealias NCCALCSIZE_PARAMS = tagNCCALCSIZE_PARAMS

typealias LPNCCALCSIZE_PARAMSVar = CPointerVarOf<LPNCCALCSIZE_PARAMS>
typealias LPNCCALCSIZE_PARAMS = CPointer<tagNCCALCSIZE_PARAMS>

typealias TRACKMOUSEEVENT = tagTRACKMOUSEEVENT

typealias LPTRACKMOUSEEVENTVar = CPointerVarOf<LPTRACKMOUSEEVENT>
typealias LPTRACKMOUSEEVENT = CPointer<tagTRACKMOUSEEVENT>

typealias ACCEL = tagACCEL

typealias LPACCELVar = CPointerVarOf<LPACCEL>
typealias LPACCEL = CPointer<tagACCEL>

typealias PAINTSTRUCT = tagPAINTSTRUCT

typealias PPAINTSTRUCTVar = CPointerVarOf<PPAINTSTRUCT>
typealias PPAINTSTRUCT = CPointer<tagPAINTSTRUCT>

typealias NPPAINTSTRUCTVar = CPointerVarOf<NPPAINTSTRUCT>
typealias NPPAINTSTRUCT = CPointer<tagPAINTSTRUCT>

typealias LPPAINTSTRUCTVar = CPointerVarOf<LPPAINTSTRUCT>
typealias LPPAINTSTRUCT = CPointer<tagPAINTSTRUCT>

typealias CREATESTRUCTA = tagCREATESTRUCTA

typealias LPCREATESTRUCTAVar = CPointerVarOf<LPCREATESTRUCTA>
typealias LPCREATESTRUCTA = CPointer<tagCREATESTRUCTA>

typealias CREATESTRUCTW = tagCREATESTRUCTW

typealias LPCREATESTRUCTWVar = CPointerVarOf<LPCREATESTRUCTW>
typealias LPCREATESTRUCTW = CPointer<tagCREATESTRUCTW>

typealias CREATESTRUCT = CREATESTRUCTW

typealias LPCREATESTRUCTVar = CPointerVarOf<LPCREATESTRUCT>
typealias LPCREATESTRUCT = LPCREATESTRUCTW

typealias WINDOWPLACEMENT = tagWINDOWPLACEMENT

typealias PWINDOWPLACEMENTVar = CPointerVarOf<PWINDOWPLACEMENT>
typealias PWINDOWPLACEMENT = CPointer<WINDOWPLACEMENT>

typealias LPWINDOWPLACEMENTVar = CPointerVarOf<LPWINDOWPLACEMENT>
typealias LPWINDOWPLACEMENT = CPointer<WINDOWPLACEMENT>

typealias NMHDR = tagNMHDR

typealias LPNMHDRVar = CPointerVarOf<LPNMHDR>
typealias LPNMHDR = CPointer<NMHDR>

typealias STYLESTRUCT = tagSTYLESTRUCT

typealias LPSTYLESTRUCTVar = CPointerVarOf<LPSTYLESTRUCT>
typealias LPSTYLESTRUCT = CPointer<tagSTYLESTRUCT>

typealias MEASUREITEMSTRUCT = tagMEASUREITEMSTRUCT

typealias PMEASUREITEMSTRUCTVar = CPointerVarOf<PMEASUREITEMSTRUCT>
typealias PMEASUREITEMSTRUCT = CPointer<tagMEASUREITEMSTRUCT>

typealias LPMEASUREITEMSTRUCTVar = CPointerVarOf<LPMEASUREITEMSTRUCT>
typealias LPMEASUREITEMSTRUCT = CPointer<tagMEASUREITEMSTRUCT>

typealias DRAWITEMSTRUCT = tagDRAWITEMSTRUCT

typealias PDRAWITEMSTRUCTVar = CPointerVarOf<PDRAWITEMSTRUCT>
typealias PDRAWITEMSTRUCT = CPointer<tagDRAWITEMSTRUCT>

typealias LPDRAWITEMSTRUCTVar = CPointerVarOf<LPDRAWITEMSTRUCT>
typealias LPDRAWITEMSTRUCT = CPointer<tagDRAWITEMSTRUCT>

typealias DELETEITEMSTRUCT = tagDELETEITEMSTRUCT

typealias PDELETEITEMSTRUCTVar = CPointerVarOf<PDELETEITEMSTRUCT>
typealias PDELETEITEMSTRUCT = CPointer<tagDELETEITEMSTRUCT>

typealias LPDELETEITEMSTRUCTVar = CPointerVarOf<LPDELETEITEMSTRUCT>
typealias LPDELETEITEMSTRUCT = CPointer<tagDELETEITEMSTRUCT>

typealias COMPAREITEMSTRUCT = tagCOMPAREITEMSTRUCT

typealias PCOMPAREITEMSTRUCTVar = CPointerVarOf<PCOMPAREITEMSTRUCT>
typealias PCOMPAREITEMSTRUCT = CPointer<tagCOMPAREITEMSTRUCT>

typealias LPCOMPAREITEMSTRUCTVar = CPointerVarOf<LPCOMPAREITEMSTRUCT>
typealias LPCOMPAREITEMSTRUCT = CPointer<tagCOMPAREITEMSTRUCT>

typealias PBSMINFOVar = CPointerVarOf<PBSMINFO>
typealias PBSMINFO = CPointer<BSMINFO>

typealias HDEVNOTIFYVar = CPointerVarOf<HDEVNOTIFY>
typealias HDEVNOTIFY = PVOID

typealias PHDEVNOTIFYVar = CPointerVarOf<PHDEVNOTIFY>
typealias PHDEVNOTIFY = CPointer<HDEVNOTIFYVar>

typealias HPOWERNOTIFYVar = CPointerVarOf<HPOWERNOTIFY>
typealias HPOWERNOTIFY = HANDLE

typealias PHPOWERNOTIFYVar = CPointerVarOf<PHPOWERNOTIFY>
typealias PHPOWERNOTIFY = CPointer<HPOWERNOTIFYVar>

typealias LPCGUIDVar = CPointerVarOf<LPCGUID>
typealias LPCGUID = CPointer<GUID>

typealias PREGISTERCLASSNAMEWVar = CPointerVarOf<PREGISTERCLASSNAMEW>
typealias PREGISTERCLASSNAMEW = CPointer<CFunction<(LPCWSTR?) -> BOOLEAN>>

typealias UPDATELAYEREDWINDOWINFO = tagUPDATELAYEREDWINDOWINFO

typealias PUPDATELAYEREDWINDOWINFOVar = CPointerVarOf<PUPDATELAYEREDWINDOWINFO>
typealias PUPDATELAYEREDWINDOWINFO = CPointer<tagUPDATELAYEREDWINDOWINFO>

typealias PFLASHWINFOVar = CPointerVarOf<PFLASHWINFO>
typealias PFLASHWINFO = CPointer<FLASHWINFO>

typealias LPDLGTEMPLATEAVar = CPointerVarOf<LPDLGTEMPLATEA>
typealias LPDLGTEMPLATEA = CPointer<DLGTEMPLATE>

typealias LPDLGTEMPLATEWVar = CPointerVarOf<LPDLGTEMPLATEW>
typealias LPDLGTEMPLATEW = CPointer<DLGTEMPLATE>

typealias LPDLGTEMPLATEVar = CPointerVarOf<LPDLGTEMPLATE>
typealias LPDLGTEMPLATE = LPDLGTEMPLATEW

typealias LPCDLGTEMPLATEAVar = CPointerVarOf<LPCDLGTEMPLATEA>
typealias LPCDLGTEMPLATEA = CPointer<DLGTEMPLATE>

typealias LPCDLGTEMPLATEWVar = CPointerVarOf<LPCDLGTEMPLATEW>
typealias LPCDLGTEMPLATEW = CPointer<DLGTEMPLATE>

typealias LPCDLGTEMPLATEVar = CPointerVarOf<LPCDLGTEMPLATE>
typealias LPCDLGTEMPLATE = LPCDLGTEMPLATEW

typealias PDLGITEMTEMPLATEAVar = CPointerVarOf<PDLGITEMTEMPLATEA>
typealias PDLGITEMTEMPLATEA = CPointer<DLGITEMTEMPLATE>

typealias PDLGITEMTEMPLATEWVar = CPointerVarOf<PDLGITEMTEMPLATEW>
typealias PDLGITEMTEMPLATEW = CPointer<DLGITEMTEMPLATE>

typealias PDLGITEMTEMPLATEVar = CPointerVarOf<PDLGITEMTEMPLATE>
typealias PDLGITEMTEMPLATE = PDLGITEMTEMPLATEW

typealias LPDLGITEMTEMPLATEAVar = CPointerVarOf<LPDLGITEMTEMPLATEA>
typealias LPDLGITEMTEMPLATEA = CPointer<DLGITEMTEMPLATE>

typealias LPDLGITEMTEMPLATEWVar = CPointerVarOf<LPDLGITEMTEMPLATEW>
typealias LPDLGITEMTEMPLATEW = CPointer<DLGITEMTEMPLATE>

typealias LPDLGITEMTEMPLATEVar = CPointerVarOf<LPDLGITEMTEMPLATE>
typealias LPDLGITEMTEMPLATE = LPDLGITEMTEMPLATEW

typealias MOUSEINPUT = tagMOUSEINPUT

typealias PMOUSEINPUTVar = CPointerVarOf<PMOUSEINPUT>
typealias PMOUSEINPUT = CPointer<tagMOUSEINPUT>

typealias LPMOUSEINPUTVar = CPointerVarOf<LPMOUSEINPUT>
typealias LPMOUSEINPUT = CPointer<tagMOUSEINPUT>

typealias KEYBDINPUT = tagKEYBDINPUT

typealias PKEYBDINPUTVar = CPointerVarOf<PKEYBDINPUT>
typealias PKEYBDINPUT = CPointer<tagKEYBDINPUT>

typealias LPKEYBDINPUTVar = CPointerVarOf<LPKEYBDINPUT>
typealias LPKEYBDINPUT = CPointer<tagKEYBDINPUT>

typealias HARDWAREINPUT = tagHARDWAREINPUT

typealias PHARDWAREINPUTVar = CPointerVarOf<PHARDWAREINPUT>
typealias PHARDWAREINPUT = CPointer<tagHARDWAREINPUT>

typealias LPHARDWAREINPUTVar = CPointerVarOf<LPHARDWAREINPUT>
typealias LPHARDWAREINPUT = CPointer<tagHARDWAREINPUT>

typealias INPUT = tagINPUT

typealias PINPUTVar = CPointerVarOf<PINPUT>
typealias PINPUT = CPointer<tagINPUT>

typealias LPINPUTVar = CPointerVarOf<LPINPUT>
typealias LPINPUT = CPointer<tagINPUT>

typealias LASTINPUTINFO = tagLASTINPUTINFO

typealias PLASTINPUTINFOVar = CPointerVarOf<PLASTINPUTINFO>
typealias PLASTINPUTINFO = CPointer<tagLASTINPUTINFO>

typealias TPMPARAMS = tagTPMPARAMS

typealias MENUINFO = tagMENUINFO

typealias LPMENUINFOVar = CPointerVarOf<LPMENUINFO>
typealias LPMENUINFO = CPointer<tagMENUINFO>

typealias LPTPMPARAMSVar = CPointerVarOf<LPTPMPARAMS>
typealias LPTPMPARAMS = CPointer<TPMPARAMS>

typealias LPCMENUINFOVar = CPointerVarOf<LPCMENUINFO>
typealias LPCMENUINFO = CPointer<MENUINFO>

typealias MENUGETOBJECTINFO = tagMENUGETOBJECTINFO

typealias PMENUGETOBJECTINFOVar = CPointerVarOf<PMENUGETOBJECTINFO>
typealias PMENUGETOBJECTINFO = CPointer<tagMENUGETOBJECTINFO>

typealias MENUITEMINFOA = tagMENUITEMINFOA

typealias LPMENUITEMINFOAVar = CPointerVarOf<LPMENUITEMINFOA>
typealias LPMENUITEMINFOA = CPointer<tagMENUITEMINFOA>

typealias MENUITEMINFOW = tagMENUITEMINFOW

typealias LPMENUITEMINFOWVar = CPointerVarOf<LPMENUITEMINFOW>
typealias LPMENUITEMINFOW = CPointer<tagMENUITEMINFOW>

typealias MENUITEMINFO = MENUITEMINFOW

typealias LPMENUITEMINFOVar = CPointerVarOf<LPMENUITEMINFO>
typealias LPMENUITEMINFO = LPMENUITEMINFOW

typealias LPCMENUITEMINFOAVar = CPointerVarOf<LPCMENUITEMINFOA>
typealias LPCMENUITEMINFOA = CPointer<MENUITEMINFOA>

typealias LPCMENUITEMINFOWVar = CPointerVarOf<LPCMENUITEMINFOW>
typealias LPCMENUITEMINFOW = CPointer<MENUITEMINFOW>

typealias LPCMENUITEMINFOVar = CPointerVarOf<LPCMENUITEMINFO>
typealias LPCMENUITEMINFO = LPCMENUITEMINFOW

typealias DROPSTRUCT = tagDROPSTRUCT

typealias PDROPSTRUCTVar = CPointerVarOf<PDROPSTRUCT>
typealias PDROPSTRUCT = CPointer<tagDROPSTRUCT>

typealias LPDROPSTRUCTVar = CPointerVarOf<LPDROPSTRUCT>
typealias LPDROPSTRUCT = CPointer<tagDROPSTRUCT>

typealias DRAWTEXTPARAMS = tagDRAWTEXTPARAMS

typealias LPDRAWTEXTPARAMSVar = CPointerVarOf<LPDRAWTEXTPARAMS>
typealias LPDRAWTEXTPARAMS = CPointer<tagDRAWTEXTPARAMS>

typealias HELPINFO = tagHELPINFO

typealias LPHELPINFOVar = CPointerVarOf<LPHELPINFO>
typealias LPHELPINFO = CPointer<tagHELPINFO>

typealias MSGBOXCALLBACKVar = CPointerVarOf<MSGBOXCALLBACK>
typealias MSGBOXCALLBACK = CPointer<CFunction<(LPHELPINFO?) -> Unit>>

typealias MSGBOXPARAMSA = tagMSGBOXPARAMSA

typealias PMSGBOXPARAMSAVar = CPointerVarOf<PMSGBOXPARAMSA>
typealias PMSGBOXPARAMSA = CPointer<tagMSGBOXPARAMSA>

typealias LPMSGBOXPARAMSAVar = CPointerVarOf<LPMSGBOXPARAMSA>
typealias LPMSGBOXPARAMSA = CPointer<tagMSGBOXPARAMSA>

typealias MSGBOXPARAMSW = tagMSGBOXPARAMSW

typealias PMSGBOXPARAMSWVar = CPointerVarOf<PMSGBOXPARAMSW>
typealias PMSGBOXPARAMSW = CPointer<tagMSGBOXPARAMSW>

typealias LPMSGBOXPARAMSWVar = CPointerVarOf<LPMSGBOXPARAMSW>
typealias LPMSGBOXPARAMSW = CPointer<tagMSGBOXPARAMSW>

typealias MSGBOXPARAMS = MSGBOXPARAMSW

typealias PMSGBOXPARAMSVar = CPointerVarOf<PMSGBOXPARAMS>
typealias PMSGBOXPARAMS = PMSGBOXPARAMSW

typealias LPMSGBOXPARAMSVar = CPointerVarOf<LPMSGBOXPARAMS>
typealias LPMSGBOXPARAMS = LPMSGBOXPARAMSW

typealias PMENUITEMTEMPLATEHEADERVar = CPointerVarOf<PMENUITEMTEMPLATEHEADER>
typealias PMENUITEMTEMPLATEHEADER = CPointer<MENUITEMTEMPLATEHEADER>

typealias PMENUITEMTEMPLATEVar = CPointerVarOf<PMENUITEMTEMPLATE>
typealias PMENUITEMTEMPLATE = CPointer<MENUITEMTEMPLATE>

typealias ICONINFO = _ICONINFO

typealias PICONINFOVar = CPointerVarOf<PICONINFO>
typealias PICONINFO = CPointer<ICONINFO>

typealias CURSORSHAPE = tagCURSORSHAPE

typealias LPCURSORSHAPEVar = CPointerVarOf<LPCURSORSHAPE>
typealias LPCURSORSHAPE = CPointer<tagCURSORSHAPE>

typealias SCROLLINFO = tagSCROLLINFO

typealias LPSCROLLINFOVar = CPointerVarOf<LPSCROLLINFO>
typealias LPSCROLLINFO = CPointer<tagSCROLLINFO>

typealias LPCSCROLLINFOVar = CPointerVarOf<LPCSCROLLINFO>
typealias LPCSCROLLINFO = CPointer<SCROLLINFO>

typealias MDICREATESTRUCTA = tagMDICREATESTRUCTA

typealias LPMDICREATESTRUCTAVar = CPointerVarOf<LPMDICREATESTRUCTA>
typealias LPMDICREATESTRUCTA = CPointer<tagMDICREATESTRUCTA>

typealias MDICREATESTRUCTW = tagMDICREATESTRUCTW

typealias LPMDICREATESTRUCTWVar = CPointerVarOf<LPMDICREATESTRUCTW>
typealias LPMDICREATESTRUCTW = CPointer<tagMDICREATESTRUCTW>

typealias MDICREATESTRUCT = MDICREATESTRUCTW

typealias LPMDICREATESTRUCTVar = CPointerVarOf<LPMDICREATESTRUCT>
typealias LPMDICREATESTRUCT = LPMDICREATESTRUCTW

typealias CLIENTCREATESTRUCT = tagCLIENTCREATESTRUCT

typealias LPCLIENTCREATESTRUCTVar = CPointerVarOf<LPCLIENTCREATESTRUCT>
typealias LPCLIENTCREATESTRUCT = CPointer<tagCLIENTCREATESTRUCT>

typealias HELPPOLYVar = IntVarOf<HELPPOLY>
typealias HELPPOLY = DWORD

typealias MULTIKEYHELPA = tagMULTIKEYHELPA

typealias PMULTIKEYHELPAVar = CPointerVarOf<PMULTIKEYHELPA>
typealias PMULTIKEYHELPA = CPointer<tagMULTIKEYHELPA>

typealias LPMULTIKEYHELPAVar = CPointerVarOf<LPMULTIKEYHELPA>
typealias LPMULTIKEYHELPA = CPointer<tagMULTIKEYHELPA>

typealias MULTIKEYHELPW = tagMULTIKEYHELPW

typealias PMULTIKEYHELPWVar = CPointerVarOf<PMULTIKEYHELPW>
typealias PMULTIKEYHELPW = CPointer<tagMULTIKEYHELPW>

typealias LPMULTIKEYHELPWVar = CPointerVarOf<LPMULTIKEYHELPW>
typealias LPMULTIKEYHELPW = CPointer<tagMULTIKEYHELPW>

typealias MULTIKEYHELP = MULTIKEYHELPW

typealias PMULTIKEYHELPVar = CPointerVarOf<PMULTIKEYHELP>
typealias PMULTIKEYHELP = PMULTIKEYHELPW

typealias LPMULTIKEYHELPVar = CPointerVarOf<LPMULTIKEYHELP>
typealias LPMULTIKEYHELP = LPMULTIKEYHELPW

typealias HELPWININFOA = tagHELPWININFOA

typealias PHELPWININFOAVar = CPointerVarOf<PHELPWININFOA>
typealias PHELPWININFOA = CPointer<tagHELPWININFOA>

typealias LPHELPWININFOAVar = CPointerVarOf<LPHELPWININFOA>
typealias LPHELPWININFOA = CPointer<tagHELPWININFOA>

typealias HELPWININFOW = tagHELPWININFOW

typealias PHELPWININFOWVar = CPointerVarOf<PHELPWININFOW>
typealias PHELPWININFOW = CPointer<tagHELPWININFOW>

typealias LPHELPWININFOWVar = CPointerVarOf<LPHELPWININFOW>
typealias LPHELPWININFOW = CPointer<tagHELPWININFOW>

typealias HELPWININFO = HELPWININFOW

typealias PHELPWININFOVar = CPointerVarOf<PHELPWININFO>
typealias PHELPWININFO = PHELPWININFOW

typealias LPHELPWININFOVar = CPointerVarOf<LPHELPWININFO>
typealias LPHELPWININFO = LPHELPWININFOW

typealias NONCLIENTMETRICSA = tagNONCLIENTMETRICSA

typealias PNONCLIENTMETRICSAVar = CPointerVarOf<PNONCLIENTMETRICSA>
typealias PNONCLIENTMETRICSA = CPointer<tagNONCLIENTMETRICSA>

typealias LPNONCLIENTMETRICSAVar = CPointerVarOf<LPNONCLIENTMETRICSA>
typealias LPNONCLIENTMETRICSA = CPointer<tagNONCLIENTMETRICSA>

typealias NONCLIENTMETRICSW = tagNONCLIENTMETRICSW

typealias PNONCLIENTMETRICSWVar = CPointerVarOf<PNONCLIENTMETRICSW>
typealias PNONCLIENTMETRICSW = CPointer<tagNONCLIENTMETRICSW>

typealias LPNONCLIENTMETRICSWVar = CPointerVarOf<LPNONCLIENTMETRICSW>
typealias LPNONCLIENTMETRICSW = CPointer<tagNONCLIENTMETRICSW>

typealias NONCLIENTMETRICS = NONCLIENTMETRICSW

typealias PNONCLIENTMETRICSVar = CPointerVarOf<PNONCLIENTMETRICS>
typealias PNONCLIENTMETRICS = PNONCLIENTMETRICSW

typealias LPNONCLIENTMETRICSVar = CPointerVarOf<LPNONCLIENTMETRICS>
typealias LPNONCLIENTMETRICS = LPNONCLIENTMETRICSW

typealias MINIMIZEDMETRICS = tagMINIMIZEDMETRICS

typealias PMINIMIZEDMETRICSVar = CPointerVarOf<PMINIMIZEDMETRICS>
typealias PMINIMIZEDMETRICS = CPointer<tagMINIMIZEDMETRICS>

typealias LPMINIMIZEDMETRICSVar = CPointerVarOf<LPMINIMIZEDMETRICS>
typealias LPMINIMIZEDMETRICS = CPointer<tagMINIMIZEDMETRICS>

typealias ICONMETRICSA = tagICONMETRICSA

typealias PICONMETRICSAVar = CPointerVarOf<PICONMETRICSA>
typealias PICONMETRICSA = CPointer<tagICONMETRICSA>

typealias LPICONMETRICSAVar = CPointerVarOf<LPICONMETRICSA>
typealias LPICONMETRICSA = CPointer<tagICONMETRICSA>

typealias ICONMETRICSW = tagICONMETRICSW

typealias PICONMETRICSWVar = CPointerVarOf<PICONMETRICSW>
typealias PICONMETRICSW = CPointer<tagICONMETRICSW>

typealias LPICONMETRICSWVar = CPointerVarOf<LPICONMETRICSW>
typealias LPICONMETRICSW = CPointer<tagICONMETRICSW>

typealias ICONMETRICS = ICONMETRICSW

typealias PICONMETRICSVar = CPointerVarOf<PICONMETRICS>
typealias PICONMETRICS = PICONMETRICSW

typealias LPICONMETRICSVar = CPointerVarOf<LPICONMETRICS>
typealias LPICONMETRICS = LPICONMETRICSW

typealias ANIMATIONINFO = tagANIMATIONINFO

typealias LPANIMATIONINFOVar = CPointerVarOf<LPANIMATIONINFO>
typealias LPANIMATIONINFO = CPointer<tagANIMATIONINFO>

typealias SERIALKEYSA = tagSERIALKEYSA

typealias LPSERIALKEYSAVar = CPointerVarOf<LPSERIALKEYSA>
typealias LPSERIALKEYSA = CPointer<tagSERIALKEYSA>

typealias SERIALKEYSW = tagSERIALKEYSW

typealias LPSERIALKEYSWVar = CPointerVarOf<LPSERIALKEYSW>
typealias LPSERIALKEYSW = CPointer<tagSERIALKEYSW>

typealias SERIALKEYS = SERIALKEYSW

typealias LPSERIALKEYSVar = CPointerVarOf<LPSERIALKEYS>
typealias LPSERIALKEYS = LPSERIALKEYSW

typealias HIGHCONTRASTA = tagHIGHCONTRASTA

typealias LPHIGHCONTRASTAVar = CPointerVarOf<LPHIGHCONTRASTA>
typealias LPHIGHCONTRASTA = CPointer<tagHIGHCONTRASTA>

typealias HIGHCONTRASTW = tagHIGHCONTRASTW

typealias LPHIGHCONTRASTWVar = CPointerVarOf<LPHIGHCONTRASTW>
typealias LPHIGHCONTRASTW = CPointer<tagHIGHCONTRASTW>

typealias HIGHCONTRAST = HIGHCONTRASTW

typealias LPHIGHCONTRASTVar = CPointerVarOf<LPHIGHCONTRAST>
typealias LPHIGHCONTRAST = LPHIGHCONTRASTW

typealias FILTERKEYS = tagFILTERKEYS

typealias LPFILTERKEYSVar = CPointerVarOf<LPFILTERKEYS>
typealias LPFILTERKEYS = CPointer<tagFILTERKEYS>

typealias STICKYKEYS = tagSTICKYKEYS

typealias LPSTICKYKEYSVar = CPointerVarOf<LPSTICKYKEYS>
typealias LPSTICKYKEYS = CPointer<tagSTICKYKEYS>

typealias MOUSEKEYS = tagMOUSEKEYS

typealias LPMOUSEKEYSVar = CPointerVarOf<LPMOUSEKEYS>
typealias LPMOUSEKEYS = CPointer<tagMOUSEKEYS>

typealias ACCESSTIMEOUT = tagACCESSTIMEOUT

typealias LPACCESSTIMEOUTVar = CPointerVarOf<LPACCESSTIMEOUT>
typealias LPACCESSTIMEOUT = CPointer<tagACCESSTIMEOUT>

typealias SOUNDSENTRYA = tagSOUNDSENTRYA

typealias LPSOUNDSENTRYAVar = CPointerVarOf<LPSOUNDSENTRYA>
typealias LPSOUNDSENTRYA = CPointer<tagSOUNDSENTRYA>

typealias SOUNDSENTRYW = tagSOUNDSENTRYW

typealias LPSOUNDSENTRYWVar = CPointerVarOf<LPSOUNDSENTRYW>
typealias LPSOUNDSENTRYW = CPointer<tagSOUNDSENTRYW>

typealias SOUNDSENTRY = SOUNDSENTRYW

typealias LPSOUNDSENTRYVar = CPointerVarOf<LPSOUNDSENTRY>
typealias LPSOUNDSENTRY = LPSOUNDSENTRYW

typealias TOGGLEKEYS = tagTOGGLEKEYS

typealias LPTOGGLEKEYSVar = CPointerVarOf<LPTOGGLEKEYS>
typealias LPTOGGLEKEYS = CPointer<tagTOGGLEKEYS>

typealias MONITORINFO = tagMONITORINFO

typealias LPMONITORINFOVar = CPointerVarOf<LPMONITORINFO>
typealias LPMONITORINFO = CPointer<tagMONITORINFO>

typealias MONITORINFOEXA = tagMONITORINFOEXA

typealias LPMONITORINFOEXAVar = CPointerVarOf<LPMONITORINFOEXA>
typealias LPMONITORINFOEXA = CPointer<tagMONITORINFOEXA>

typealias MONITORINFOEXW = tagMONITORINFOEXW

typealias LPMONITORINFOEXWVar = CPointerVarOf<LPMONITORINFOEXW>
typealias LPMONITORINFOEXW = CPointer<tagMONITORINFOEXW>

typealias MONITORINFOEX = MONITORINFOEXW

typealias LPMONITORINFOEXVar = CPointerVarOf<LPMONITORINFOEX>
typealias LPMONITORINFOEX = LPMONITORINFOEXW

typealias MONITORENUMPROCVar = CPointerVarOf<MONITORENUMPROC>
typealias MONITORENUMPROC = CPointer<CFunction<(HMONITOR?, HDC?, LPRECT?, LPARAM) -> WINBOOL>>

typealias WINEVENTPROCVar = CPointerVarOf<WINEVENTPROC>
typealias WINEVENTPROC = CPointer<CFunction<(HWINEVENTHOOK?, DWORD, HWND?, LONG, LONG, DWORD, DWORD) -> Unit>>

typealias GUITHREADINFO = tagGUITHREADINFO

typealias PGUITHREADINFOVar = CPointerVarOf<PGUITHREADINFO>
typealias PGUITHREADINFO = CPointer<tagGUITHREADINFO>

typealias LPGUITHREADINFOVar = CPointerVarOf<LPGUITHREADINFO>
typealias LPGUITHREADINFO = CPointer<tagGUITHREADINFO>

typealias CURSORINFO = tagCURSORINFO

typealias PCURSORINFOVar = CPointerVarOf<PCURSORINFO>
typealias PCURSORINFO = CPointer<tagCURSORINFO>

typealias LPCURSORINFOVar = CPointerVarOf<LPCURSORINFO>
typealias LPCURSORINFO = CPointer<tagCURSORINFO>

typealias WINDOWINFO = tagWINDOWINFO

typealias PWINDOWINFOVar = CPointerVarOf<PWINDOWINFO>
typealias PWINDOWINFO = CPointer<tagWINDOWINFO>

typealias LPWINDOWINFOVar = CPointerVarOf<LPWINDOWINFO>
typealias LPWINDOWINFO = CPointer<tagWINDOWINFO>

typealias TITLEBARINFO = tagTITLEBARINFO

typealias PTITLEBARINFOVar = CPointerVarOf<PTITLEBARINFO>
typealias PTITLEBARINFO = CPointer<tagTITLEBARINFO>

typealias LPTITLEBARINFOVar = CPointerVarOf<LPTITLEBARINFO>
typealias LPTITLEBARINFO = CPointer<tagTITLEBARINFO>

typealias MENUBARINFO = tagMENUBARINFO

typealias PMENUBARINFOVar = CPointerVarOf<PMENUBARINFO>
typealias PMENUBARINFO = CPointer<tagMENUBARINFO>

typealias LPMENUBARINFOVar = CPointerVarOf<LPMENUBARINFO>
typealias LPMENUBARINFO = CPointer<tagMENUBARINFO>

typealias SCROLLBARINFO = tagSCROLLBARINFO

typealias PSCROLLBARINFOVar = CPointerVarOf<PSCROLLBARINFO>
typealias PSCROLLBARINFO = CPointer<tagSCROLLBARINFO>

typealias LPSCROLLBARINFOVar = CPointerVarOf<LPSCROLLBARINFO>
typealias LPSCROLLBARINFO = CPointer<tagSCROLLBARINFO>

typealias COMBOBOXINFO = tagCOMBOBOXINFO

typealias PCOMBOBOXINFOVar = CPointerVarOf<PCOMBOBOXINFO>
typealias PCOMBOBOXINFO = CPointer<tagCOMBOBOXINFO>

typealias LPCOMBOBOXINFOVar = CPointerVarOf<LPCOMBOBOXINFO>
typealias LPCOMBOBOXINFO = CPointer<tagCOMBOBOXINFO>

typealias ALTTABINFO = tagALTTABINFO

typealias PALTTABINFOVar = CPointerVarOf<PALTTABINFO>
typealias PALTTABINFO = CPointer<tagALTTABINFO>

typealias LPALTTABINFOVar = CPointerVarOf<LPALTTABINFO>
typealias LPALTTABINFO = CPointer<tagALTTABINFO>

typealias HRAWINPUTVar = CPointerVarOf<HRAWINPUT>
typealias HRAWINPUT = CPointer<HRAWINPUT__>

typealias RAWINPUTHEADER = tagRAWINPUTHEADER

typealias PRAWINPUTHEADERVar = CPointerVarOf<PRAWINPUTHEADER>
typealias PRAWINPUTHEADER = CPointer<tagRAWINPUTHEADER>

typealias LPRAWINPUTHEADERVar = CPointerVarOf<LPRAWINPUTHEADER>
typealias LPRAWINPUTHEADER = CPointer<tagRAWINPUTHEADER>

typealias RAWMOUSE = tagRAWMOUSE

typealias PRAWMOUSEVar = CPointerVarOf<PRAWMOUSE>
typealias PRAWMOUSE = CPointer<tagRAWMOUSE>

typealias LPRAWMOUSEVar = CPointerVarOf<LPRAWMOUSE>
typealias LPRAWMOUSE = CPointer<tagRAWMOUSE>

typealias RAWKEYBOARD = tagRAWKEYBOARD

typealias PRAWKEYBOARDVar = CPointerVarOf<PRAWKEYBOARD>
typealias PRAWKEYBOARD = CPointer<tagRAWKEYBOARD>

typealias LPRAWKEYBOARDVar = CPointerVarOf<LPRAWKEYBOARD>
typealias LPRAWKEYBOARD = CPointer<tagRAWKEYBOARD>

typealias RAWHID = tagRAWHID

typealias PRAWHIDVar = CPointerVarOf<PRAWHID>
typealias PRAWHID = CPointer<tagRAWHID>

typealias LPRAWHIDVar = CPointerVarOf<LPRAWHID>
typealias LPRAWHID = CPointer<tagRAWHID>

typealias RAWINPUT = tagRAWINPUT

typealias PRAWINPUTVar = CPointerVarOf<PRAWINPUT>
typealias PRAWINPUT = CPointer<tagRAWINPUT>

typealias LPRAWINPUTVar = CPointerVarOf<LPRAWINPUT>
typealias LPRAWINPUT = CPointer<tagRAWINPUT>

typealias PUINTVar = CPointerVarOf<PUINT>
typealias PUINT = CPointer<IntVar>

typealias RID_DEVICE_INFO_MOUSE = tagRID_DEVICE_INFO_MOUSE

typealias PRID_DEVICE_INFO_MOUSEVar = CPointerVarOf<PRID_DEVICE_INFO_MOUSE>
typealias PRID_DEVICE_INFO_MOUSE = CPointer<tagRID_DEVICE_INFO_MOUSE>

typealias RID_DEVICE_INFO_KEYBOARD = tagRID_DEVICE_INFO_KEYBOARD

typealias PRID_DEVICE_INFO_KEYBOARDVar = CPointerVarOf<PRID_DEVICE_INFO_KEYBOARD>
typealias PRID_DEVICE_INFO_KEYBOARD = CPointer<tagRID_DEVICE_INFO_KEYBOARD>

typealias RID_DEVICE_INFO_HID = tagRID_DEVICE_INFO_HID

typealias PRID_DEVICE_INFO_HIDVar = CPointerVarOf<PRID_DEVICE_INFO_HID>
typealias PRID_DEVICE_INFO_HID = CPointer<tagRID_DEVICE_INFO_HID>

typealias RID_DEVICE_INFO = tagRID_DEVICE_INFO

typealias PRID_DEVICE_INFOVar = CPointerVarOf<PRID_DEVICE_INFO>
typealias PRID_DEVICE_INFO = CPointer<tagRID_DEVICE_INFO>

typealias LPRID_DEVICE_INFOVar = CPointerVarOf<LPRID_DEVICE_INFO>
typealias LPRID_DEVICE_INFO = CPointer<tagRID_DEVICE_INFO>

typealias RAWINPUTDEVICE = tagRAWINPUTDEVICE

typealias PRAWINPUTDEVICEVar = CPointerVarOf<PRAWINPUTDEVICE>
typealias PRAWINPUTDEVICE = CPointer<tagRAWINPUTDEVICE>

typealias LPRAWINPUTDEVICEVar = CPointerVarOf<LPRAWINPUTDEVICE>
typealias LPRAWINPUTDEVICE = CPointer<tagRAWINPUTDEVICE>

typealias PCRAWINPUTDEVICEVar = CPointerVarOf<PCRAWINPUTDEVICE>
typealias PCRAWINPUTDEVICE = CPointer<RAWINPUTDEVICE>

typealias RAWINPUTDEVICELIST = tagRAWINPUTDEVICELIST

typealias PRAWINPUTDEVICELISTVar = CPointerVarOf<PRAWINPUTDEVICELIST>
typealias PRAWINPUTDEVICELIST = CPointer<tagRAWINPUTDEVICELIST>

typealias LGRPIDVar = IntVarOf<LGRPID>
typealias LGRPID = DWORD

typealias LCTYPEVar = IntVarOf<LCTYPE>
typealias LCTYPE = DWORD

typealias CALTYPEVar = IntVarOf<CALTYPE>
typealias CALTYPE = DWORD

typealias CALIDVar = IntVarOf<CALID>
typealias CALID = DWORD

typealias CPINFO = _cpinfo

typealias LPCPINFOVar = CPointerVarOf<LPCPINFO>
typealias LPCPINFO = CPointer<_cpinfo>

typealias CPINFOEXA = _cpinfoexA

typealias LPCPINFOEXAVar = CPointerVarOf<LPCPINFOEXA>
typealias LPCPINFOEXA = CPointer<_cpinfoexA>

typealias CPINFOEXW = _cpinfoexW

typealias LPCPINFOEXWVar = CPointerVarOf<LPCPINFOEXW>
typealias LPCPINFOEXW = CPointer<_cpinfoexW>

typealias CPINFOEX = CPINFOEXW

typealias LPCPINFOEXVar = CPointerVarOf<LPCPINFOEX>
typealias LPCPINFOEX = LPCPINFOEXW

typealias NUMBERFMTA = _numberfmtA

typealias LPNUMBERFMTAVar = CPointerVarOf<LPNUMBERFMTA>
typealias LPNUMBERFMTA = CPointer<_numberfmtA>

typealias NUMBERFMTW = _numberfmtW

typealias LPNUMBERFMTWVar = CPointerVarOf<LPNUMBERFMTW>
typealias LPNUMBERFMTW = CPointer<_numberfmtW>

typealias NUMBERFMT = NUMBERFMTW

typealias LPNUMBERFMTVar = CPointerVarOf<LPNUMBERFMT>
typealias LPNUMBERFMT = LPNUMBERFMTW

typealias CURRENCYFMTA = _currencyfmtA

typealias LPCURRENCYFMTAVar = CPointerVarOf<LPCURRENCYFMTA>
typealias LPCURRENCYFMTA = CPointer<_currencyfmtA>

typealias CURRENCYFMTW = _currencyfmtW

typealias LPCURRENCYFMTWVar = CPointerVarOf<LPCURRENCYFMTW>
typealias LPCURRENCYFMTW = CPointer<_currencyfmtW>

typealias CURRENCYFMT = CURRENCYFMTW

typealias LPCURRENCYFMTVar = CPointerVarOf<LPCURRENCYFMT>
typealias LPCURRENCYFMT = LPCURRENCYFMTW

typealias NLS_FUNCTIONVar = IntVarOf<NLS_FUNCTION>
typealias NLS_FUNCTION = DWORD

typealias NLSVERSIONINFO = _nlsversioninfo

typealias LPNLSVERSIONINFOVar = CPointerVarOf<LPNLSVERSIONINFO>
typealias LPNLSVERSIONINFO = CPointer<_nlsversioninfo>

typealias NLSVERSIONINFOEX = _nlsversioninfoex

typealias LPNLSVERSIONINFOEXVar = CPointerVarOf<LPNLSVERSIONINFOEX>
typealias LPNLSVERSIONINFOEX = CPointer<_nlsversioninfoex>

typealias GEOIDVar = IntVarOf<GEOID>
typealias GEOID = LONG

typealias GEOTYPEVar = IntVarOf<GEOTYPE>
typealias GEOTYPE = DWORD

typealias GEOCLASSVar = IntVarOf<GEOCLASS>
typealias GEOCLASS = DWORD

typealias LANGUAGEGROUP_ENUMPROCAVar = CPointerVarOf<LANGUAGEGROUP_ENUMPROCA>
typealias LANGUAGEGROUP_ENUMPROCA = CPointer<CFunction<(LGRPID, LPSTR?, LPSTR?, DWORD, LONG_PTR) -> WINBOOL>>

typealias LANGGROUPLOCALE_ENUMPROCAVar = CPointerVarOf<LANGGROUPLOCALE_ENUMPROCA>
typealias LANGGROUPLOCALE_ENUMPROCA = CPointer<CFunction<(LGRPID, LCID, LPSTR?, LONG_PTR) -> WINBOOL>>

typealias UILANGUAGE_ENUMPROCAVar = CPointerVarOf<UILANGUAGE_ENUMPROCA>
typealias UILANGUAGE_ENUMPROCA = CPointer<CFunction<(LPSTR?, LONG_PTR) -> WINBOOL>>

typealias CODEPAGE_ENUMPROCAVar = CPointerVarOf<CODEPAGE_ENUMPROCA>
typealias CODEPAGE_ENUMPROCA = CPointer<CFunction<(LPSTR?) -> WINBOOL>>

typealias DATEFMT_ENUMPROCAVar = CPointerVarOf<DATEFMT_ENUMPROCA>
typealias DATEFMT_ENUMPROCA = CPointer<CFunction<(LPSTR?) -> WINBOOL>>

typealias DATEFMT_ENUMPROCEXAVar = CPointerVarOf<DATEFMT_ENUMPROCEXA>
typealias DATEFMT_ENUMPROCEXA = CPointer<CFunction<(LPSTR?, CALID) -> WINBOOL>>

typealias TIMEFMT_ENUMPROCAVar = CPointerVarOf<TIMEFMT_ENUMPROCA>
typealias TIMEFMT_ENUMPROCA = CPointer<CFunction<(LPSTR?) -> WINBOOL>>

typealias CALINFO_ENUMPROCAVar = CPointerVarOf<CALINFO_ENUMPROCA>
typealias CALINFO_ENUMPROCA = CPointer<CFunction<(LPSTR?) -> WINBOOL>>

typealias CALINFO_ENUMPROCEXAVar = CPointerVarOf<CALINFO_ENUMPROCEXA>
typealias CALINFO_ENUMPROCEXA = CPointer<CFunction<(LPSTR?, CALID) -> WINBOOL>>

typealias LOCALE_ENUMPROCAVar = CPointerVarOf<LOCALE_ENUMPROCA>
typealias LOCALE_ENUMPROCA = CPointer<CFunction<(LPSTR?) -> WINBOOL>>

typealias LOCALE_ENUMPROCWVar = CPointerVarOf<LOCALE_ENUMPROCW>
typealias LOCALE_ENUMPROCW = CPointer<CFunction<(LPWSTR?) -> WINBOOL>>

typealias LANGUAGEGROUP_ENUMPROCWVar = CPointerVarOf<LANGUAGEGROUP_ENUMPROCW>
typealias LANGUAGEGROUP_ENUMPROCW = CPointer<CFunction<(LGRPID, LPWSTR?, LPWSTR?, DWORD, LONG_PTR) -> WINBOOL>>

typealias LANGGROUPLOCALE_ENUMPROCWVar = CPointerVarOf<LANGGROUPLOCALE_ENUMPROCW>
typealias LANGGROUPLOCALE_ENUMPROCW = CPointer<CFunction<(LGRPID, LCID, LPWSTR?, LONG_PTR) -> WINBOOL>>

typealias UILANGUAGE_ENUMPROCWVar = CPointerVarOf<UILANGUAGE_ENUMPROCW>
typealias UILANGUAGE_ENUMPROCW = CPointer<CFunction<(LPWSTR?, LONG_PTR) -> WINBOOL>>

typealias CODEPAGE_ENUMPROCWVar = CPointerVarOf<CODEPAGE_ENUMPROCW>
typealias CODEPAGE_ENUMPROCW = CPointer<CFunction<(LPWSTR?) -> WINBOOL>>

typealias DATEFMT_ENUMPROCWVar = CPointerVarOf<DATEFMT_ENUMPROCW>
typealias DATEFMT_ENUMPROCW = CPointer<CFunction<(LPWSTR?) -> WINBOOL>>

typealias DATEFMT_ENUMPROCEXWVar = CPointerVarOf<DATEFMT_ENUMPROCEXW>
typealias DATEFMT_ENUMPROCEXW = CPointer<CFunction<(LPWSTR?, CALID) -> WINBOOL>>

typealias TIMEFMT_ENUMPROCWVar = CPointerVarOf<TIMEFMT_ENUMPROCW>
typealias TIMEFMT_ENUMPROCW = CPointer<CFunction<(LPWSTR?) -> WINBOOL>>

typealias CALINFO_ENUMPROCWVar = CPointerVarOf<CALINFO_ENUMPROCW>
typealias CALINFO_ENUMPROCW = CPointer<CFunction<(LPWSTR?) -> WINBOOL>>

typealias CALINFO_ENUMPROCEXWVar = CPointerVarOf<CALINFO_ENUMPROCEXW>
typealias CALINFO_ENUMPROCEXW = CPointer<CFunction<(LPWSTR?, CALID) -> WINBOOL>>

typealias GEO_ENUMPROCVar = CPointerVarOf<GEO_ENUMPROC>
typealias GEO_ENUMPROC = CPointer<CFunction<(GEOID) -> WINBOOL>>

typealias FILEMUIINFO = _FILEMUIINFO

typealias PFILEMUIINFOVar = CPointerVarOf<PFILEMUIINFO>
typealias PFILEMUIINFO = CPointer<_FILEMUIINFO>

typealias COORD = _COORD

typealias PCOORDVar = CPointerVarOf<PCOORD>
typealias PCOORD = CPointer<_COORD>

typealias SMALL_RECT = _SMALL_RECT

typealias PSMALL_RECTVar = CPointerVarOf<PSMALL_RECT>
typealias PSMALL_RECT = CPointer<_SMALL_RECT>

typealias KEY_EVENT_RECORD = _KEY_EVENT_RECORD

typealias PKEY_EVENT_RECORDVar = CPointerVarOf<PKEY_EVENT_RECORD>
typealias PKEY_EVENT_RECORD = CPointer<_KEY_EVENT_RECORD>

typealias MOUSE_EVENT_RECORD = _MOUSE_EVENT_RECORD

typealias PMOUSE_EVENT_RECORDVar = CPointerVarOf<PMOUSE_EVENT_RECORD>
typealias PMOUSE_EVENT_RECORD = CPointer<_MOUSE_EVENT_RECORD>

typealias WINDOW_BUFFER_SIZE_RECORD = _WINDOW_BUFFER_SIZE_RECORD

typealias PWINDOW_BUFFER_SIZE_RECORDVar = CPointerVarOf<PWINDOW_BUFFER_SIZE_RECORD>
typealias PWINDOW_BUFFER_SIZE_RECORD = CPointer<_WINDOW_BUFFER_SIZE_RECORD>

typealias MENU_EVENT_RECORD = _MENU_EVENT_RECORD

typealias PMENU_EVENT_RECORDVar = CPointerVarOf<PMENU_EVENT_RECORD>
typealias PMENU_EVENT_RECORD = CPointer<_MENU_EVENT_RECORD>

typealias FOCUS_EVENT_RECORD = _FOCUS_EVENT_RECORD

typealias PFOCUS_EVENT_RECORDVar = CPointerVarOf<PFOCUS_EVENT_RECORD>
typealias PFOCUS_EVENT_RECORD = CPointer<_FOCUS_EVENT_RECORD>

typealias INPUT_RECORD = _INPUT_RECORD

typealias PINPUT_RECORDVar = CPointerVarOf<PINPUT_RECORD>
typealias PINPUT_RECORD = CPointer<_INPUT_RECORD>

typealias CHAR_INFO = _CHAR_INFO

typealias PCHAR_INFOVar = CPointerVarOf<PCHAR_INFO>
typealias PCHAR_INFO = CPointer<_CHAR_INFO>

typealias CONSOLE_SCREEN_BUFFER_INFO = _CONSOLE_SCREEN_BUFFER_INFO

typealias PCONSOLE_SCREEN_BUFFER_INFOVar = CPointerVarOf<PCONSOLE_SCREEN_BUFFER_INFO>
typealias PCONSOLE_SCREEN_BUFFER_INFO = CPointer<_CONSOLE_SCREEN_BUFFER_INFO>

typealias CONSOLE_CURSOR_INFO = _CONSOLE_CURSOR_INFO

typealias PCONSOLE_CURSOR_INFOVar = CPointerVarOf<PCONSOLE_CURSOR_INFO>
typealias PCONSOLE_CURSOR_INFO = CPointer<_CONSOLE_CURSOR_INFO>

typealias CONSOLE_FONT_INFO = _CONSOLE_FONT_INFO

typealias PCONSOLE_FONT_INFOVar = CPointerVarOf<PCONSOLE_FONT_INFO>
typealias PCONSOLE_FONT_INFO = CPointer<_CONSOLE_FONT_INFO>

typealias CONSOLE_SELECTION_INFO = _CONSOLE_SELECTION_INFO

typealias PCONSOLE_SELECTION_INFOVar = CPointerVarOf<PCONSOLE_SELECTION_INFO>
typealias PCONSOLE_SELECTION_INFO = CPointer<_CONSOLE_SELECTION_INFO>

typealias PHANDLER_ROUTINEVar = CPointerVarOf<PHANDLER_ROUTINE>
typealias PHANDLER_ROUTINE = CPointer<CFunction<(DWORD) -> WINBOOL>>

typealias SECURITY_ATTRIBUTES = _SECURITY_ATTRIBUTES

typealias CONSOLE_FONT_INFOEX = _CONSOLE_FONT_INFOEX

typealias PCONSOLE_FONT_INFOEXVar = CPointerVarOf<PCONSOLE_FONT_INFOEX>
typealias PCONSOLE_FONT_INFOEX = CPointer<_CONSOLE_FONT_INFOEX>

typealias CONSOLE_HISTORY_INFO = _CONSOLE_HISTORY_INFO

typealias PCONSOLE_HISTORY_INFOVar = CPointerVarOf<PCONSOLE_HISTORY_INFO>
typealias PCONSOLE_HISTORY_INFO = CPointer<_CONSOLE_HISTORY_INFO>

typealias CONSOLE_READCONSOLE_CONTROL = _CONSOLE_READCONSOLE_CONTROL

typealias PCONSOLE_READCONSOLE_CONTROLVar = CPointerVarOf<PCONSOLE_READCONSOLE_CONTROL>
typealias PCONSOLE_READCONSOLE_CONTROL = CPointer<_CONSOLE_READCONSOLE_CONTROL>

typealias CONSOLE_SCREEN_BUFFER_INFOEX = _CONSOLE_SCREEN_BUFFER_INFOEX

typealias PCONSOLE_SCREEN_BUFFER_INFOEXVar = CPointerVarOf<PCONSOLE_SCREEN_BUFFER_INFOEX>
typealias PCONSOLE_SCREEN_BUFFER_INFOEX = CPointer<_CONSOLE_SCREEN_BUFFER_INFOEX>

typealias VS_FIXEDFILEINFO = tagVS_FIXEDFILEINFO

typealias REGSAMVar = IntVarOf<REGSAM>
typealias REGSAM = ACCESS_MASK

typealias LSTATUSVar = IntVarOf<LSTATUS>
typealias LSTATUS = LONG

typealias PVALCONTEXTVar = CPointerVarOf<PVALCONTEXT>
typealias PVALCONTEXT = CPointer<val_context>

typealias PVALUEA = pvalueA

typealias PPVALUEAVar = CPointerVarOf<PPVALUEA>
typealias PPVALUEA = CPointer<pvalueA>

typealias PVALUEW = pvalueW

typealias PPVALUEWVar = CPointerVarOf<PPVALUEW>
typealias PPVALUEW = CPointer<pvalueW>

typealias PVALUE = PVALUEW

typealias PPVALUEVar = CPointerVarOf<PPVALUE>
typealias PPVALUE = PPVALUEW

typealias PQUERYHANDLERVar = CPointerVarOf<PQUERYHANDLER>
typealias PQUERYHANDLER = CPointer<CFunction<(LPVOID?, PVALCONTEXT?, DWORD, LPVOID?, CPointer<DWORDVar>?, DWORD) -> DWORD>>

typealias REG_PROVIDER = provider_info

typealias PPROVIDERVar = CPointerVarOf<PPROVIDER>
typealias PPROVIDER = CPointer<provider_info>

typealias VALENTA = value_entA

typealias PVALENTAVar = CPointerVarOf<PVALENTA>
typealias PVALENTA = CPointer<value_entA>

typealias VALENTW = value_entW

typealias PVALENTWVar = CPointerVarOf<PVALENTW>
typealias PVALENTW = CPointer<value_entW>

typealias VALENT = VALENTW

typealias PVALENTVar = CPointerVarOf<PVALENT>
typealias PVALENT = PVALENTW

typealias HKEYVar = CPointerVarOf<HKEY>
typealias HKEY = CPointer<HKEY__>

typealias PHKEYVar = CPointerVarOf<PHKEY>
typealias PHKEY = CPointer<HKEYVar>

typealias PFILETIMEVar = CPointerVarOf<PFILETIME>
typealias PFILETIME = CPointer<_FILETIME>

typealias NETRESOURCEA = _NETRESOURCEA

typealias LPNETRESOURCEAVar = CPointerVarOf<LPNETRESOURCEA>
typealias LPNETRESOURCEA = CPointer<_NETRESOURCEA>

typealias NETRESOURCEW = _NETRESOURCEW

typealias LPNETRESOURCEWVar = CPointerVarOf<LPNETRESOURCEW>
typealias LPNETRESOURCEW = CPointer<_NETRESOURCEW>

typealias NETRESOURCE = NETRESOURCEW

typealias LPNETRESOURCEVar = CPointerVarOf<LPNETRESOURCE>
typealias LPNETRESOURCE = LPNETRESOURCEW

typealias CONNECTDLGSTRUCTA = _CONNECTDLGSTRUCTA

typealias LPCONNECTDLGSTRUCTAVar = CPointerVarOf<LPCONNECTDLGSTRUCTA>
typealias LPCONNECTDLGSTRUCTA = CPointer<_CONNECTDLGSTRUCTA>

typealias CONNECTDLGSTRUCTW = _CONNECTDLGSTRUCTW

typealias LPCONNECTDLGSTRUCTWVar = CPointerVarOf<LPCONNECTDLGSTRUCTW>
typealias LPCONNECTDLGSTRUCTW = CPointer<_CONNECTDLGSTRUCTW>

typealias CONNECTDLGSTRUCT = CONNECTDLGSTRUCTW

typealias LPCONNECTDLGSTRUCTVar = CPointerVarOf<LPCONNECTDLGSTRUCT>
typealias LPCONNECTDLGSTRUCT = LPCONNECTDLGSTRUCTW

typealias DISCDLGSTRUCTA = _DISCDLGSTRUCTA

typealias LPDISCDLGSTRUCTAVar = CPointerVarOf<LPDISCDLGSTRUCTA>
typealias LPDISCDLGSTRUCTA = CPointer<_DISCDLGSTRUCTA>

typealias DISCDLGSTRUCTW = _DISCDLGSTRUCTW

typealias LPDISCDLGSTRUCTWVar = CPointerVarOf<LPDISCDLGSTRUCTW>
typealias LPDISCDLGSTRUCTW = CPointer<_DISCDLGSTRUCTW>

typealias DISCDLGSTRUCT = DISCDLGSTRUCTW

typealias LPDISCDLGSTRUCTVar = CPointerVarOf<LPDISCDLGSTRUCT>
typealias LPDISCDLGSTRUCT = LPDISCDLGSTRUCTW

typealias LPHANDLEVar = CPointerVarOf<LPHANDLE>
typealias LPHANDLE = CPointer<HANDLEVar>

typealias UNIVERSAL_NAME_INFOA = _UNIVERSAL_NAME_INFOA

typealias LPUNIVERSAL_NAME_INFOAVar = CPointerVarOf<LPUNIVERSAL_NAME_INFOA>
typealias LPUNIVERSAL_NAME_INFOA = CPointer<_UNIVERSAL_NAME_INFOA>

typealias UNIVERSAL_NAME_INFOW = _UNIVERSAL_NAME_INFOW

typealias LPUNIVERSAL_NAME_INFOWVar = CPointerVarOf<LPUNIVERSAL_NAME_INFOW>
typealias LPUNIVERSAL_NAME_INFOW = CPointer<_UNIVERSAL_NAME_INFOW>

typealias UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOW

typealias LPUNIVERSAL_NAME_INFOVar = CPointerVarOf<LPUNIVERSAL_NAME_INFO>
typealias LPUNIVERSAL_NAME_INFO = LPUNIVERSAL_NAME_INFOW

typealias REMOTE_NAME_INFOA = _REMOTE_NAME_INFOA

typealias LPREMOTE_NAME_INFOAVar = CPointerVarOf<LPREMOTE_NAME_INFOA>
typealias LPREMOTE_NAME_INFOA = CPointer<_REMOTE_NAME_INFOA>

typealias REMOTE_NAME_INFOW = _REMOTE_NAME_INFOW

typealias LPREMOTE_NAME_INFOWVar = CPointerVarOf<LPREMOTE_NAME_INFOW>
typealias LPREMOTE_NAME_INFOW = CPointer<_REMOTE_NAME_INFOW>

typealias REMOTE_NAME_INFO = REMOTE_NAME_INFOW

typealias LPREMOTE_NAME_INFOVar = CPointerVarOf<LPREMOTE_NAME_INFO>
typealias LPREMOTE_NAME_INFO = LPREMOTE_NAME_INFOW

typealias NETINFOSTRUCT = _NETINFOSTRUCT

typealias LPNETINFOSTRUCTVar = CPointerVarOf<LPNETINFOSTRUCT>
typealias LPNETINFOSTRUCT = CPointer<_NETINFOSTRUCT>

typealias PFNGETPROFILEPATHAVar = CPointerVarOf<PFNGETPROFILEPATHA>
typealias PFNGETPROFILEPATHA = CPointer<CFunction<(LPCSTR?, LPSTR?, UINT) -> UINT>>

typealias PFNGETPROFILEPATHWVar = CPointerVarOf<PFNGETPROFILEPATHW>
typealias PFNGETPROFILEPATHW = CPointer<CFunction<(LPCWSTR?, LPWSTR?, UINT) -> UINT>>

typealias PFNRECONCILEPROFILEAVar = CPointerVarOf<PFNRECONCILEPROFILEA>
typealias PFNRECONCILEPROFILEA = CPointer<CFunction<(LPCSTR?, LPCSTR?, DWORD) -> UINT>>

typealias PFNRECONCILEPROFILEWVar = CPointerVarOf<PFNRECONCILEPROFILEW>
typealias PFNRECONCILEPROFILEW = CPointer<CFunction<(LPCWSTR?, LPCWSTR?, DWORD) -> UINT>>

typealias PFNPROCESSPOLICIESAVar = CPointerVarOf<PFNPROCESSPOLICIESA>
typealias PFNPROCESSPOLICIESA = CPointer<CFunction<(HWND?, LPCSTR?, LPCSTR?, LPCSTR?, DWORD) -> WINBOOL>>

typealias PFNPROCESSPOLICIESWVar = CPointerVarOf<PFNPROCESSPOLICIESW>
typealias PFNPROCESSPOLICIESW = CPointer<CFunction<(HWND?, LPCWSTR?, LPCWSTR?, LPCWSTR?, DWORD) -> WINBOOL>>

typealias NETCONNECTINFOSTRUCT = _NETCONNECTINFOSTRUCT

typealias LPNETCONNECTINFOSTRUCTVar = CPointerVarOf<LPNETCONNECTINFOSTRUCT>
typealias LPNETCONNECTINFOSTRUCT = CPointer<_NETCONNECTINFOSTRUCT>

typealias SYSTEMTIME = _SYSTEMTIME

typealias PERF_DATA_BLOCK = _PERF_DATA_BLOCK

typealias PPERF_DATA_BLOCKVar = CPointerVarOf<PPERF_DATA_BLOCK>
typealias PPERF_DATA_BLOCK = CPointer<_PERF_DATA_BLOCK>

typealias PERF_OBJECT_TYPE = _PERF_OBJECT_TYPE

typealias PPERF_OBJECT_TYPEVar = CPointerVarOf<PPERF_OBJECT_TYPE>
typealias PPERF_OBJECT_TYPE = CPointer<_PERF_OBJECT_TYPE>

typealias PERF_COUNTER_DEFINITION = _PERF_COUNTER_DEFINITION

typealias PPERF_COUNTER_DEFINITIONVar = CPointerVarOf<PPERF_COUNTER_DEFINITION>
typealias PPERF_COUNTER_DEFINITION = CPointer<_PERF_COUNTER_DEFINITION>

typealias PERF_INSTANCE_DEFINITION = _PERF_INSTANCE_DEFINITION

typealias PPERF_INSTANCE_DEFINITIONVar = CPointerVarOf<PPERF_INSTANCE_DEFINITION>
typealias PPERF_INSTANCE_DEFINITION = CPointer<_PERF_INSTANCE_DEFINITION>

typealias PERF_COUNTER_BLOCK = _PERF_COUNTER_BLOCK

typealias PPERF_COUNTER_BLOCKVar = CPointerVarOf<PPERF_COUNTER_BLOCK>
typealias PPERF_COUNTER_BLOCK = CPointer<_PERF_COUNTER_BLOCK>

typealias PM_OPEN_PROC = CFunction<(LPWSTR?) -> DWORD>

typealias PM_COLLECT_PROC = CFunction<(LPWSTR?, CPointer<LPVOIDVar>?, LPDWORD?, LPDWORD?) -> DWORD>

typealias PM_CLOSE_PROC = CFunction<() -> DWORD>

typealias PM_QUERY_PROC = CFunction<(LPDWORD?, CPointer<LPVOIDVar>?, LPDWORD?, LPDWORD?) -> DWORD>

typealias SOCKETVar = LongVarOf<SOCKET>
typealias SOCKET = UINT_PTR

typealias u_shortVar = ShortVarOf<u_short>
typealias u_short = Short

typealias u_longVar = IntVarOf<u_long>
typealias u_long = Int

typealias u_charVar = ByteVarOf<u_char>
typealias u_char = Byte

typealias u_intVar = IntVarOf<u_int>
typealias u_int = Int

typealias PTIMEVALVar = CPointerVarOf<PTIMEVAL>
typealias PTIMEVAL = CPointer<timeval>

typealias LPWSADATAVar = CPointerVarOf<LPWSADATA>
typealias LPWSADATA = CPointer<WSAData>

typealias LPTRANSMIT_FILE_BUFFERSVar = CPointerVarOf<LPTRANSMIT_FILE_BUFFERS>
typealias LPTRANSMIT_FILE_BUFFERS = CPointer<_TRANSMIT_FILE_BUFFERS>

typealias ALG_IDVar = IntVarOf<ALG_ID>
typealias ALG_ID = Int

typealias HCRYPTHASHVar = LongVarOf<HCRYPTHASH>
typealias HCRYPTHASH = ULONG_PTR

typealias HCRYPTKEYVar = LongVarOf<HCRYPTKEY>
typealias HCRYPTKEY = ULONG_PTR

typealias HCRYPTPROVVar = LongVarOf<HCRYPTPROV>
typealias HCRYPTPROV = ULONG_PTR

typealias CMS_KEY_INFO = _CMS_KEY_INFO

typealias PCMS_KEY_INFOVar = CPointerVarOf<PCMS_KEY_INFO>
typealias PCMS_KEY_INFO = CPointer<_CMS_KEY_INFO>

typealias HMAC_INFO = _HMAC_Info

typealias PHMAC_INFOVar = CPointerVarOf<PHMAC_INFO>
typealias PHMAC_INFO = CPointer<_HMAC_Info>

typealias SCHANNEL_ALG = _SCHANNEL_ALG

typealias PSCHANNEL_ALGVar = CPointerVarOf<PSCHANNEL_ALG>
typealias PSCHANNEL_ALG = CPointer<_SCHANNEL_ALG>

typealias PROV_ENUMALGS = _PROV_ENUMALGS

typealias PROV_ENUMALGS_EX = _PROV_ENUMALGS_EX

typealias BLOBHEADER = _PUBLICKEYSTRUC

typealias PUBLICKEYSTRUC = _PUBLICKEYSTRUC

typealias RSAPUBKEY = _RSAPUBKEY

typealias DHPUBKEY = _PUBKEY

typealias DSSPUBKEY = _PUBKEY

typealias KEAPUBKEY = _PUBKEY

typealias TEKPUBKEY = _PUBKEY

typealias DSSSEED = _DSSSEED

typealias DHPUBKEY_VER3 = _PUBKEYVER3

typealias DSSPUBKEY_VER3 = _PUBKEYVER3

typealias DHPRIVKEY_VER3 = _PRIVKEYVER3

typealias DSSPRIVKEY_VER3 = _PRIVKEYVER3

typealias KEY_TYPE_SUBTYPE = _KEY_TYPE_SUBTYPE

typealias PKEY_TYPE_SUBTYPEVar = CPointerVarOf<PKEY_TYPE_SUBTYPE>
typealias PKEY_TYPE_SUBTYPE = CPointer<_KEY_TYPE_SUBTYPE>

typealias CERT_FORTEZZA_DATA_PROP = _CERT_FORTEZZA_DATA_PROP

typealias CRYPT_RC4_KEY_STATE = _CRYPT_RC4_KEY_STATE

typealias PCRYPT_RC4_KEY_STATEVar = CPointerVarOf<PCRYPT_RC4_KEY_STATE>
typealias PCRYPT_RC4_KEY_STATE = CPointer<_CRYPT_RC4_KEY_STATE>

typealias CRYPT_DES_KEY_STATE = _CRYPT_DES_KEY_STATE

typealias PCRYPT_DES_KEY_STATEVar = CPointerVarOf<PCRYPT_DES_KEY_STATE>
typealias PCRYPT_DES_KEY_STATE = CPointer<_CRYPT_DES_KEY_STATE>

typealias CRYPT_3DES_KEY_STATE = _CRYPT_3DES_KEY_STATE

typealias PCRYPT_3DES_KEY_STATEVar = CPointerVarOf<PCRYPT_3DES_KEY_STATE>
typealias PCRYPT_3DES_KEY_STATE = CPointer<_CRYPT_3DES_KEY_STATE>

typealias CRYPT_INTEGER_BLOB = _CRYPTOAPI_BLOB

typealias PCRYPT_INTEGER_BLOBVar = CPointerVarOf<PCRYPT_INTEGER_BLOB>
typealias PCRYPT_INTEGER_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CRYPT_UINT_BLOB = _CRYPTOAPI_BLOB

typealias PCRYPT_UINT_BLOBVar = CPointerVarOf<PCRYPT_UINT_BLOB>
typealias PCRYPT_UINT_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CRYPT_OBJID_BLOB = _CRYPTOAPI_BLOB

typealias PCRYPT_OBJID_BLOBVar = CPointerVarOf<PCRYPT_OBJID_BLOB>
typealias PCRYPT_OBJID_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CERT_NAME_BLOB = _CRYPTOAPI_BLOB

typealias PCERT_NAME_BLOBVar = CPointerVarOf<PCERT_NAME_BLOB>
typealias PCERT_NAME_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CERT_RDN_VALUE_BLOB = _CRYPTOAPI_BLOB

typealias PCERT_RDN_VALUE_BLOBVar = CPointerVarOf<PCERT_RDN_VALUE_BLOB>
typealias PCERT_RDN_VALUE_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CERT_BLOB = _CRYPTOAPI_BLOB

typealias PCERT_BLOBVar = CPointerVarOf<PCERT_BLOB>
typealias PCERT_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CRL_BLOB = _CRYPTOAPI_BLOB

typealias PCRL_BLOBVar = CPointerVarOf<PCRL_BLOB>
typealias PCRL_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias DATA_BLOB = _CRYPTOAPI_BLOB

typealias PDATA_BLOBVar = CPointerVarOf<PDATA_BLOB>
typealias PDATA_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CRYPT_DATA_BLOB = _CRYPTOAPI_BLOB

typealias PCRYPT_DATA_BLOBVar = CPointerVarOf<PCRYPT_DATA_BLOB>
typealias PCRYPT_DATA_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CRYPT_HASH_BLOB = _CRYPTOAPI_BLOB

typealias PCRYPT_HASH_BLOBVar = CPointerVarOf<PCRYPT_HASH_BLOB>
typealias PCRYPT_HASH_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CRYPT_DIGEST_BLOB = _CRYPTOAPI_BLOB

typealias PCRYPT_DIGEST_BLOBVar = CPointerVarOf<PCRYPT_DIGEST_BLOB>
typealias PCRYPT_DIGEST_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CRYPT_DER_BLOB = _CRYPTOAPI_BLOB

typealias PCRYPT_DER_BLOBVar = CPointerVarOf<PCRYPT_DER_BLOB>
typealias PCRYPT_DER_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CRYPT_ATTR_BLOB = _CRYPTOAPI_BLOB

typealias PCRYPT_ATTR_BLOBVar = CPointerVarOf<PCRYPT_ATTR_BLOB>
typealias PCRYPT_ATTR_BLOB = CPointer<_CRYPTOAPI_BLOB>

typealias CMS_DH_KEY_INFO = _CMS_DH_KEY_INFO

typealias PCMS_DH_KEY_INFOVar = CPointerVarOf<PCMS_DH_KEY_INFO>
typealias PCMS_DH_KEY_INFO = CPointer<_CMS_DH_KEY_INFO>

typealias HCRYPTPROV_OR_NCRYPT_KEY_HANDLEVar = LongVarOf<HCRYPTPROV_OR_NCRYPT_KEY_HANDLE>
typealias HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = ULONG_PTR

typealias HCRYPTPROV_LEGACYVar = LongVarOf<HCRYPTPROV_LEGACY>
typealias HCRYPTPROV_LEGACY = ULONG_PTR

typealias CRYPT_BIT_BLOB = _CRYPT_BIT_BLOB

typealias PCRYPT_BIT_BLOBVar = CPointerVarOf<PCRYPT_BIT_BLOB>
typealias PCRYPT_BIT_BLOB = CPointer<_CRYPT_BIT_BLOB>

typealias CRYPT_ALGORITHM_IDENTIFIER = _CRYPT_ALGORITHM_IDENTIFIER

typealias PCRYPT_ALGORITHM_IDENTIFIERVar = CPointerVarOf<PCRYPT_ALGORITHM_IDENTIFIER>
typealias PCRYPT_ALGORITHM_IDENTIFIER = CPointer<_CRYPT_ALGORITHM_IDENTIFIER>

typealias CRYPT_OBJID_TABLE = _CRYPT_OBJID_TABLE

typealias PCRYPT_OBJID_TABLEVar = CPointerVarOf<PCRYPT_OBJID_TABLE>
typealias PCRYPT_OBJID_TABLE = CPointer<_CRYPT_OBJID_TABLE>

typealias CRYPT_HASH_INFO = _CRYPT_HASH_INFO

typealias PCRYPT_HASH_INFOVar = CPointerVarOf<PCRYPT_HASH_INFO>
typealias PCRYPT_HASH_INFO = CPointer<_CRYPT_HASH_INFO>

typealias CERT_EXTENSION = _CERT_EXTENSION

typealias PCERT_EXTENSIONVar = CPointerVarOf<PCERT_EXTENSION>
typealias PCERT_EXTENSION = CPointer<_CERT_EXTENSION>

typealias PCCERT_EXTENSIONVar = CPointerVarOf<PCCERT_EXTENSION>
typealias PCCERT_EXTENSION = CPointer<CERT_EXTENSION>

typealias CRYPT_ATTRIBUTE_TYPE_VALUE = _CRYPT_ATTRIBUTE_TYPE_VALUE

typealias PCRYPT_ATTRIBUTE_TYPE_VALUEVar = CPointerVarOf<PCRYPT_ATTRIBUTE_TYPE_VALUE>
typealias PCRYPT_ATTRIBUTE_TYPE_VALUE = CPointer<_CRYPT_ATTRIBUTE_TYPE_VALUE>

typealias CRYPT_ATTRIBUTE = _CRYPT_ATTRIBUTE

typealias PCRYPT_ATTRIBUTEVar = CPointerVarOf<PCRYPT_ATTRIBUTE>
typealias PCRYPT_ATTRIBUTE = CPointer<_CRYPT_ATTRIBUTE>

typealias CRYPT_ATTRIBUTES = _CRYPT_ATTRIBUTES

typealias PCRYPT_ATTRIBUTESVar = CPointerVarOf<PCRYPT_ATTRIBUTES>
typealias PCRYPT_ATTRIBUTES = CPointer<_CRYPT_ATTRIBUTES>

typealias CERT_RDN_ATTR = _CERT_RDN_ATTR

typealias PCERT_RDN_ATTRVar = CPointerVarOf<PCERT_RDN_ATTR>
typealias PCERT_RDN_ATTR = CPointer<_CERT_RDN_ATTR>

typealias CERT_RDN = _CERT_RDN

typealias PCERT_RDNVar = CPointerVarOf<PCERT_RDN>
typealias PCERT_RDN = CPointer<_CERT_RDN>

typealias CERT_NAME_INFO = _CERT_NAME_INFO

typealias PCERT_NAME_INFOVar = CPointerVarOf<PCERT_NAME_INFO>
typealias PCERT_NAME_INFO = CPointer<_CERT_NAME_INFO>

typealias CERT_NAME_VALUE = _CERT_NAME_VALUE

typealias PCERT_NAME_VALUEVar = CPointerVarOf<PCERT_NAME_VALUE>
typealias PCERT_NAME_VALUE = CPointer<_CERT_NAME_VALUE>

typealias CERT_PUBLIC_KEY_INFO = _CERT_PUBLIC_KEY_INFO

typealias PCERT_PUBLIC_KEY_INFOVar = CPointerVarOf<PCERT_PUBLIC_KEY_INFO>
typealias PCERT_PUBLIC_KEY_INFO = CPointer<_CERT_PUBLIC_KEY_INFO>

typealias CRYPT_ECC_PRIVATE_KEY_INFO = _CRYPT_ECC_PRIVATE_KEY_INFO

typealias PCRYPT_ECC_PRIVATE_KEY_INFOVar = CPointerVarOf<PCRYPT_ECC_PRIVATE_KEY_INFO>
typealias PCRYPT_ECC_PRIVATE_KEY_INFO = CPointer<_CRYPT_ECC_PRIVATE_KEY_INFO>

typealias CRYPT_PRIVATE_KEY_INFO = _CRYPT_PRIVATE_KEY_INFO

typealias PCRYPT_PRIVATE_KEY_INFOVar = CPointerVarOf<PCRYPT_PRIVATE_KEY_INFO>
typealias PCRYPT_PRIVATE_KEY_INFO = CPointer<_CRYPT_PRIVATE_KEY_INFO>

typealias CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO

typealias PCRYPT_ENCRYPTED_PRIVATE_KEY_INFOVar = CPointerVarOf<PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO>
typealias PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO = CPointer<_CRYPT_ENCRYPTED_PRIVATE_KEY_INFO>

typealias PCRYPT_DECRYPT_PRIVATE_KEY_FUNCVar = CPointerVarOf<PCRYPT_DECRYPT_PRIVATE_KEY_FUNC>
typealias PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = CPointer<CFunction<(CValue<CRYPT_ALGORITHM_IDENTIFIER>, CValue<CRYPT_DATA_BLOB>, CPointer<BYTEVar>?, CPointer<DWORDVar>?, LPVOID?) -> WINBOOL>>

typealias PCRYPT_ENCRYPT_PRIVATE_KEY_FUNCVar = CPointerVarOf<PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC>
typealias PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = CPointer<CFunction<(CPointer<CRYPT_ALGORITHM_IDENTIFIER>?, CPointer<CRYPT_DATA_BLOB>?, CPointer<BYTEVar>?, CPointer<DWORDVar>?, LPVOID?) -> WINBOOL>>

typealias PCRYPT_RESOLVE_HCRYPTPROV_FUNCVar = CPointerVarOf<PCRYPT_RESOLVE_HCRYPTPROV_FUNC>
typealias PCRYPT_RESOLVE_HCRYPTPROV_FUNC = CPointer<CFunction<(CPointer<CRYPT_PRIVATE_KEY_INFO>?, CPointer<HCRYPTPROVVar>?, LPVOID?) -> WINBOOL>>

typealias CRYPT_PKCS8_IMPORT_PARAMS = _CRYPT_PKCS8_IMPORT_PARAMS

typealias PCRYPT_PKCS8_IMPORT_PARAMSVar = CPointerVarOf<PCRYPT_PKCS8_IMPORT_PARAMS>
typealias PCRYPT_PKCS8_IMPORT_PARAMS = CPointer<_CRYPT_PKCS8_IMPORT_PARAMS>

typealias CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = _CRYPT_PKCS8_IMPORT_PARAMS

typealias PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMSVar = CPointerVarOf<PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS>
typealias PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = CPointer<_CRYPT_PKCS8_IMPORT_PARAMS>

typealias CRYPT_PKCS8_EXPORT_PARAMS = _CRYPT_PKCS8_EXPORT_PARAMS

typealias PCRYPT_PKCS8_EXPORT_PARAMSVar = CPointerVarOf<PCRYPT_PKCS8_EXPORT_PARAMS>
typealias PCRYPT_PKCS8_EXPORT_PARAMS = CPointer<_CRYPT_PKCS8_EXPORT_PARAMS>

typealias CERT_INFO = _CERT_INFO

typealias PCERT_INFOVar = CPointerVarOf<PCERT_INFO>
typealias PCERT_INFO = CPointer<_CERT_INFO>

typealias CRL_ENTRY = _CRL_ENTRY

typealias PCRL_ENTRYVar = CPointerVarOf<PCRL_ENTRY>
typealias PCRL_ENTRY = CPointer<_CRL_ENTRY>

typealias CRL_INFO = _CRL_INFO

typealias PCRL_INFOVar = CPointerVarOf<PCRL_INFO>
typealias PCRL_INFO = CPointer<_CRL_INFO>

typealias CERT_OR_CRL_BLOB = _CERT_OR_CRL_BLOB

typealias PCERT_OR_CRL_BLOBVar = CPointerVarOf<PCERT_OR_CRL_BLOB>
typealias PCERT_OR_CRL_BLOB = CPointer<_CERT_OR_CRL_BLOB>

typealias CERT_OR_CRL_BUNDLE = _CERT_OR_CRL_BUNDLE

typealias PCERT_OR_CRL_BUNDLEVar = CPointerVarOf<PCERT_OR_CRL_BUNDLE>
typealias PCERT_OR_CRL_BUNDLE = CPointer<_CERT_OR_CRL_BUNDLE>

typealias CERT_REQUEST_INFO = _CERT_REQUEST_INFO

typealias PCERT_REQUEST_INFOVar = CPointerVarOf<PCERT_REQUEST_INFO>
typealias PCERT_REQUEST_INFO = CPointer<_CERT_REQUEST_INFO>

typealias CERT_KEYGEN_REQUEST_INFO = _CERT_KEYGEN_REQUEST_INFO

typealias PCERT_KEYGEN_REQUEST_INFOVar = CPointerVarOf<PCERT_KEYGEN_REQUEST_INFO>
typealias PCERT_KEYGEN_REQUEST_INFO = CPointer<_CERT_KEYGEN_REQUEST_INFO>

typealias CERT_SIGNED_CONTENT_INFO = _CERT_SIGNED_CONTENT_INFO

typealias PCERT_SIGNED_CONTENT_INFOVar = CPointerVarOf<PCERT_SIGNED_CONTENT_INFO>
typealias PCERT_SIGNED_CONTENT_INFO = CPointer<_CERT_SIGNED_CONTENT_INFO>

typealias CTL_USAGE = _CTL_USAGE

typealias PCTL_USAGEVar = CPointerVarOf<PCTL_USAGE>
typealias PCTL_USAGE = CPointer<_CTL_USAGE>

typealias CERT_ENHKEY_USAGE = _CTL_USAGE

typealias PCERT_ENHKEY_USAGEVar = CPointerVarOf<PCERT_ENHKEY_USAGE>
typealias PCERT_ENHKEY_USAGE = CPointer<_CTL_USAGE>

typealias PCCTL_USAGEVar = CPointerVarOf<PCCTL_USAGE>
typealias PCCTL_USAGE = CPointer<CTL_USAGE>

typealias PCCERT_ENHKEY_USAGEVar = CPointerVarOf<PCCERT_ENHKEY_USAGE>
typealias PCCERT_ENHKEY_USAGE = CPointer<CERT_ENHKEY_USAGE>

typealias CTL_ENTRY = _CTL_ENTRY

typealias PCTL_ENTRYVar = CPointerVarOf<PCTL_ENTRY>
typealias PCTL_ENTRY = CPointer<_CTL_ENTRY>

typealias CTL_INFO = _CTL_INFO

typealias PCTL_INFOVar = CPointerVarOf<PCTL_INFO>
typealias PCTL_INFO = CPointer<_CTL_INFO>

typealias CRYPT_TIME_STAMP_REQUEST_INFO = _CRYPT_TIME_STAMP_REQUEST_INFO

typealias PCRYPT_TIME_STAMP_REQUEST_INFOVar = CPointerVarOf<PCRYPT_TIME_STAMP_REQUEST_INFO>
typealias PCRYPT_TIME_STAMP_REQUEST_INFO = CPointer<_CRYPT_TIME_STAMP_REQUEST_INFO>

typealias CRYPT_ENROLLMENT_NAME_VALUE_PAIR = _CRYPT_ENROLLMENT_NAME_VALUE_PAIR

typealias PCRYPT_ENROLLMENT_NAME_VALUE_PAIRVar = CPointerVarOf<PCRYPT_ENROLLMENT_NAME_VALUE_PAIR>
typealias PCRYPT_ENROLLMENT_NAME_VALUE_PAIR = CPointer<_CRYPT_ENROLLMENT_NAME_VALUE_PAIR>

typealias CRYPT_CSP_PROVIDER = _CRYPT_CSP_PROVIDER

typealias PCRYPT_CSP_PROVIDERVar = CPointerVarOf<PCRYPT_CSP_PROVIDER>
typealias PCRYPT_CSP_PROVIDER = CPointer<_CRYPT_CSP_PROVIDER>

typealias size_tVar = LongVarOf<size_t>
typealias size_t = Long

typealias PFN_CRYPT_ALLOCVar = CPointerVarOf<PFN_CRYPT_ALLOC>
typealias PFN_CRYPT_ALLOC = CPointer<CFunction<(size_t) -> LPVOID?>>

typealias PFN_CRYPT_FREEVar = CPointerVarOf<PFN_CRYPT_FREE>
typealias PFN_CRYPT_FREE = CPointer<CFunction<(LPVOID?) -> Unit>>

typealias CRYPT_ENCODE_PARA = _CRYPT_ENCODE_PARA

typealias PCRYPT_ENCODE_PARAVar = CPointerVarOf<PCRYPT_ENCODE_PARA>
typealias PCRYPT_ENCODE_PARA = CPointer<_CRYPT_ENCODE_PARA>

typealias CRYPT_DECODE_PARA = _CRYPT_DECODE_PARA

typealias PCRYPT_DECODE_PARAVar = CPointerVarOf<PCRYPT_DECODE_PARA>
typealias PCRYPT_DECODE_PARA = CPointer<_CRYPT_DECODE_PARA>

typealias CERT_EXTENSIONS = _CERT_EXTENSIONS

typealias PCERT_EXTENSIONSVar = CPointerVarOf<PCERT_EXTENSIONS>
typealias PCERT_EXTENSIONS = CPointer<_CERT_EXTENSIONS>

typealias CERT_AUTHORITY_KEY_ID_INFO = _CERT_AUTHORITY_KEY_ID_INFO

typealias PCERT_AUTHORITY_KEY_ID_INFOVar = CPointerVarOf<PCERT_AUTHORITY_KEY_ID_INFO>
typealias PCERT_AUTHORITY_KEY_ID_INFO = CPointer<_CERT_AUTHORITY_KEY_ID_INFO>

typealias CERT_PRIVATE_KEY_VALIDITY = _CERT_PRIVATE_KEY_VALIDITY

typealias PCERT_PRIVATE_KEY_VALIDITYVar = CPointerVarOf<PCERT_PRIVATE_KEY_VALIDITY>
typealias PCERT_PRIVATE_KEY_VALIDITY = CPointer<_CERT_PRIVATE_KEY_VALIDITY>

typealias CERT_KEY_ATTRIBUTES_INFO = _CERT_KEY_ATTRIBUTES_INFO

typealias PCERT_KEY_ATTRIBUTES_INFOVar = CPointerVarOf<PCERT_KEY_ATTRIBUTES_INFO>
typealias PCERT_KEY_ATTRIBUTES_INFO = CPointer<_CERT_KEY_ATTRIBUTES_INFO>

typealias CERT_POLICY_ID = _CERT_POLICY_ID

typealias PCERT_POLICY_IDVar = CPointerVarOf<PCERT_POLICY_ID>
typealias PCERT_POLICY_ID = CPointer<_CERT_POLICY_ID>

typealias CERT_KEY_USAGE_RESTRICTION_INFO = _CERT_KEY_USAGE_RESTRICTION_INFO

typealias PCERT_KEY_USAGE_RESTRICTION_INFOVar = CPointerVarOf<PCERT_KEY_USAGE_RESTRICTION_INFO>
typealias PCERT_KEY_USAGE_RESTRICTION_INFO = CPointer<_CERT_KEY_USAGE_RESTRICTION_INFO>

typealias CERT_OTHER_NAME = _CERT_OTHER_NAME

typealias PCERT_OTHER_NAMEVar = CPointerVarOf<PCERT_OTHER_NAME>
typealias PCERT_OTHER_NAME = CPointer<_CERT_OTHER_NAME>

typealias CERT_ALT_NAME_ENTRY = _CERT_ALT_NAME_ENTRY

typealias PCERT_ALT_NAME_ENTRYVar = CPointerVarOf<PCERT_ALT_NAME_ENTRY>
typealias PCERT_ALT_NAME_ENTRY = CPointer<_CERT_ALT_NAME_ENTRY>

typealias CERT_ALT_NAME_INFO = _CERT_ALT_NAME_INFO

typealias PCERT_ALT_NAME_INFOVar = CPointerVarOf<PCERT_ALT_NAME_INFO>
typealias PCERT_ALT_NAME_INFO = CPointer<_CERT_ALT_NAME_INFO>

typealias CERT_BASIC_CONSTRAINTS_INFO = _CERT_BASIC_CONSTRAINTS_INFO

typealias PCERT_BASIC_CONSTRAINTS_INFOVar = CPointerVarOf<PCERT_BASIC_CONSTRAINTS_INFO>
typealias PCERT_BASIC_CONSTRAINTS_INFO = CPointer<_CERT_BASIC_CONSTRAINTS_INFO>

typealias CERT_BASIC_CONSTRAINTS2_INFO = _CERT_BASIC_CONSTRAINTS2_INFO

typealias PCERT_BASIC_CONSTRAINTS2_INFOVar = CPointerVarOf<PCERT_BASIC_CONSTRAINTS2_INFO>
typealias PCERT_BASIC_CONSTRAINTS2_INFO = CPointer<_CERT_BASIC_CONSTRAINTS2_INFO>

typealias CERT_POLICY_QUALIFIER_INFO = _CERT_POLICY_QUALIFIER_INFO

typealias PCERT_POLICY_QUALIFIER_INFOVar = CPointerVarOf<PCERT_POLICY_QUALIFIER_INFO>
typealias PCERT_POLICY_QUALIFIER_INFO = CPointer<_CERT_POLICY_QUALIFIER_INFO>

typealias CERT_POLICY_INFO = _CERT_POLICY_INFO

typealias PCERT_POLICY_INFOVar = CPointerVarOf<PCERT_POLICY_INFO>
typealias PCERT_POLICY_INFO = CPointer<_CERT_POLICY_INFO>

typealias CERT_POLICIES_INFO = _CERT_POLICIES_INFO

typealias PCERT_POLICIES_INFOVar = CPointerVarOf<PCERT_POLICIES_INFO>
typealias PCERT_POLICIES_INFO = CPointer<_CERT_POLICIES_INFO>

typealias CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE

typealias PCERT_POLICY_QUALIFIER_NOTICE_REFERENCEVar = CPointerVarOf<PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE>
typealias PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE = CPointer<_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE>

typealias CERT_POLICY_QUALIFIER_USER_NOTICE = _CERT_POLICY_QUALIFIER_USER_NOTICE

typealias PCERT_POLICY_QUALIFIER_USER_NOTICEVar = CPointerVarOf<PCERT_POLICY_QUALIFIER_USER_NOTICE>
typealias PCERT_POLICY_QUALIFIER_USER_NOTICE = CPointer<_CERT_POLICY_QUALIFIER_USER_NOTICE>

typealias CPS_URLS = _CPS_URLS

typealias PCPS_URLSVar = CPointerVarOf<PCPS_URLS>
typealias PCPS_URLS = CPointer<_CPS_URLS>

typealias CERT_POLICY95_QUALIFIER1 = _CERT_POLICY95_QUALIFIER1

typealias PCERT_POLICY95_QUALIFIER1Var = CPointerVarOf<PCERT_POLICY95_QUALIFIER1>
typealias PCERT_POLICY95_QUALIFIER1 = CPointer<_CERT_POLICY95_QUALIFIER1>

typealias CERT_POLICY_MAPPING = _CERT_POLICY_MAPPING

typealias PCERT_POLICY_MAPPINGVar = CPointerVarOf<PCERT_POLICY_MAPPING>
typealias PCERT_POLICY_MAPPING = CPointer<_CERT_POLICY_MAPPING>

typealias CERT_POLICY_MAPPINGS_INFO = _CERT_POLICY_MAPPINGS_INFO

typealias PCERT_POLICY_MAPPINGS_INFOVar = CPointerVarOf<PCERT_POLICY_MAPPINGS_INFO>
typealias PCERT_POLICY_MAPPINGS_INFO = CPointer<_CERT_POLICY_MAPPINGS_INFO>

typealias CERT_POLICY_CONSTRAINTS_INFO = _CERT_POLICY_CONSTRAINTS_INFO

typealias PCERT_POLICY_CONSTRAINTS_INFOVar = CPointerVarOf<PCERT_POLICY_CONSTRAINTS_INFO>
typealias PCERT_POLICY_CONSTRAINTS_INFO = CPointer<_CERT_POLICY_CONSTRAINTS_INFO>

typealias CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY

typealias PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANYVar = CPointerVarOf<PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY>
typealias PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = CPointer<_CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY>

typealias CRYPT_CONTENT_INFO = _CRYPT_CONTENT_INFO

typealias PCRYPT_CONTENT_INFOVar = CPointerVarOf<PCRYPT_CONTENT_INFO>
typealias PCRYPT_CONTENT_INFO = CPointer<_CRYPT_CONTENT_INFO>

typealias CRYPT_SEQUENCE_OF_ANY = _CRYPT_SEQUENCE_OF_ANY

typealias PCRYPT_SEQUENCE_OF_ANYVar = CPointerVarOf<PCRYPT_SEQUENCE_OF_ANY>
typealias PCRYPT_SEQUENCE_OF_ANY = CPointer<_CRYPT_SEQUENCE_OF_ANY>

typealias CERT_AUTHORITY_KEY_ID2_INFO = _CERT_AUTHORITY_KEY_ID2_INFO

typealias PCERT_AUTHORITY_KEY_ID2_INFOVar = CPointerVarOf<PCERT_AUTHORITY_KEY_ID2_INFO>
typealias PCERT_AUTHORITY_KEY_ID2_INFO = CPointer<_CERT_AUTHORITY_KEY_ID2_INFO>

typealias CERT_ACCESS_DESCRIPTION = _CERT_ACCESS_DESCRIPTION

typealias PCERT_ACCESS_DESCRIPTIONVar = CPointerVarOf<PCERT_ACCESS_DESCRIPTION>
typealias PCERT_ACCESS_DESCRIPTION = CPointer<_CERT_ACCESS_DESCRIPTION>

typealias CERT_AUTHORITY_INFO_ACCESS = _CERT_AUTHORITY_INFO_ACCESS

typealias PCERT_AUTHORITY_INFO_ACCESSVar = CPointerVarOf<PCERT_AUTHORITY_INFO_ACCESS>
typealias PCERT_AUTHORITY_INFO_ACCESS = CPointer<_CERT_AUTHORITY_INFO_ACCESS>

typealias CERT_SUBJECT_INFO_ACCESS = CERT_AUTHORITY_INFO_ACCESS

typealias PCERT_SUBJECT_INFO_ACCESSVar = CPointerVarOf<PCERT_SUBJECT_INFO_ACCESS>
typealias PCERT_SUBJECT_INFO_ACCESS = CPointer<CERT_AUTHORITY_INFO_ACCESS>

typealias CRL_DIST_POINT_NAME = _CRL_DIST_POINT_NAME

typealias PCRL_DIST_POINT_NAMEVar = CPointerVarOf<PCRL_DIST_POINT_NAME>
typealias PCRL_DIST_POINT_NAME = CPointer<_CRL_DIST_POINT_NAME>

typealias CRL_DIST_POINT = _CRL_DIST_POINT

typealias PCRL_DIST_POINTVar = CPointerVarOf<PCRL_DIST_POINT>
typealias PCRL_DIST_POINT = CPointer<_CRL_DIST_POINT>

typealias CRL_DIST_POINTS_INFO = _CRL_DIST_POINTS_INFO

typealias PCRL_DIST_POINTS_INFOVar = CPointerVarOf<PCRL_DIST_POINTS_INFO>
typealias PCRL_DIST_POINTS_INFO = CPointer<_CRL_DIST_POINTS_INFO>

typealias CROSS_CERT_DIST_POINTS_INFO = _CROSS_CERT_DIST_POINTS_INFO

typealias PCROSS_CERT_DIST_POINTS_INFOVar = CPointerVarOf<PCROSS_CERT_DIST_POINTS_INFO>
typealias PCROSS_CERT_DIST_POINTS_INFO = CPointer<_CROSS_CERT_DIST_POINTS_INFO>

typealias CERT_PAIR = _CERT_PAIR

typealias PCERT_PAIRVar = CPointerVarOf<PCERT_PAIR>
typealias PCERT_PAIR = CPointer<_CERT_PAIR>

typealias CRL_ISSUING_DIST_POINT = _CRL_ISSUING_DIST_POINT

typealias PCRL_ISSUING_DIST_POINTVar = CPointerVarOf<PCRL_ISSUING_DIST_POINT>
typealias PCRL_ISSUING_DIST_POINT = CPointer<_CRL_ISSUING_DIST_POINT>

typealias CERT_GENERAL_SUBTREE = _CERT_GENERAL_SUBTREE

typealias PCERT_GENERAL_SUBTREEVar = CPointerVarOf<PCERT_GENERAL_SUBTREE>
typealias PCERT_GENERAL_SUBTREE = CPointer<_CERT_GENERAL_SUBTREE>

typealias CERT_NAME_CONSTRAINTS_INFO = _CERT_NAME_CONSTRAINTS_INFO

typealias PCERT_NAME_CONSTRAINTS_INFOVar = CPointerVarOf<PCERT_NAME_CONSTRAINTS_INFO>
typealias PCERT_NAME_CONSTRAINTS_INFO = CPointer<_CERT_NAME_CONSTRAINTS_INFO>

typealias CERT_DSS_PARAMETERS = _CERT_DSS_PARAMETERS

typealias PCERT_DSS_PARAMETERSVar = CPointerVarOf<PCERT_DSS_PARAMETERS>
typealias PCERT_DSS_PARAMETERS = CPointer<_CERT_DSS_PARAMETERS>

typealias CERT_DH_PARAMETERS = _CERT_DH_PARAMETERS

typealias PCERT_DH_PARAMETERSVar = CPointerVarOf<PCERT_DH_PARAMETERS>
typealias PCERT_DH_PARAMETERS = CPointer<_CERT_DH_PARAMETERS>

typealias CERT_ECC_SIGNATURE = _CERT_ECC_SIGNATURE

typealias PCERT_ECC_SIGNATUREVar = CPointerVarOf<PCERT_ECC_SIGNATURE>
typealias PCERT_ECC_SIGNATURE = CPointer<_CERT_ECC_SIGNATURE>

typealias CERT_X942_DH_VALIDATION_PARAMS = _CERT_X942_DH_VALIDATION_PARAMS

typealias PCERT_X942_DH_VALIDATION_PARAMSVar = CPointerVarOf<PCERT_X942_DH_VALIDATION_PARAMS>
typealias PCERT_X942_DH_VALIDATION_PARAMS = CPointer<_CERT_X942_DH_VALIDATION_PARAMS>

typealias CERT_X942_DH_PARAMETERS = _CERT_X942_DH_PARAMETERS

typealias PCERT_X942_DH_PARAMETERSVar = CPointerVarOf<PCERT_X942_DH_PARAMETERS>
typealias PCERT_X942_DH_PARAMETERS = CPointer<_CERT_X942_DH_PARAMETERS>

typealias CRYPT_X942_OTHER_INFO = _CRYPT_X942_OTHER_INFO

typealias PCRYPT_X942_OTHER_INFOVar = CPointerVarOf<PCRYPT_X942_OTHER_INFO>
typealias PCRYPT_X942_OTHER_INFO = CPointer<_CRYPT_X942_OTHER_INFO>

typealias CRYPT_ECC_CMS_SHARED_INFO = _CRYPT_ECC_CMS_SHARED_INFO

typealias PCRYPT_ECC_CMS_SHARED_INFOVar = CPointerVarOf<PCRYPT_ECC_CMS_SHARED_INFO>
typealias PCRYPT_ECC_CMS_SHARED_INFO = CPointer<_CRYPT_ECC_CMS_SHARED_INFO>

typealias CRYPT_RC2_CBC_PARAMETERS = _CRYPT_RC2_CBC_PARAMETERS

typealias PCRYPT_RC2_CBC_PARAMETERSVar = CPointerVarOf<PCRYPT_RC2_CBC_PARAMETERS>
typealias PCRYPT_RC2_CBC_PARAMETERS = CPointer<_CRYPT_RC2_CBC_PARAMETERS>

typealias CRYPT_SMIME_CAPABILITY = _CRYPT_SMIME_CAPABILITY

typealias PCRYPT_SMIME_CAPABILITYVar = CPointerVarOf<PCRYPT_SMIME_CAPABILITY>
typealias PCRYPT_SMIME_CAPABILITY = CPointer<_CRYPT_SMIME_CAPABILITY>

typealias CRYPT_SMIME_CAPABILITIES = _CRYPT_SMIME_CAPABILITIES

typealias PCRYPT_SMIME_CAPABILITIESVar = CPointerVarOf<PCRYPT_SMIME_CAPABILITIES>
typealias PCRYPT_SMIME_CAPABILITIES = CPointer<_CRYPT_SMIME_CAPABILITIES>

typealias CERT_QC_STATEMENT = _CERT_QC_STATEMENT

typealias PCERT_QC_STATEMENTVar = CPointerVarOf<PCERT_QC_STATEMENT>
typealias PCERT_QC_STATEMENT = CPointer<_CERT_QC_STATEMENT>

typealias CERT_QC_STATEMENTS_EXT_INFO = _CERT_QC_STATEMENTS_EXT_INFO

typealias PCERT_QC_STATEMENTS_EXT_INFOVar = CPointerVarOf<PCERT_QC_STATEMENTS_EXT_INFO>
typealias PCERT_QC_STATEMENTS_EXT_INFO = CPointer<_CERT_QC_STATEMENTS_EXT_INFO>

typealias CRYPT_MASK_GEN_ALGORITHM = _CRYPT_MASK_GEN_ALGORITHM

typealias PCRYPT_MASK_GEN_ALGORITHMVar = CPointerVarOf<PCRYPT_MASK_GEN_ALGORITHM>
typealias PCRYPT_MASK_GEN_ALGORITHM = CPointer<_CRYPT_MASK_GEN_ALGORITHM>

typealias CRYPT_RSA_SSA_PSS_PARAMETERS = _CRYPT_RSA_SSA_PSS_PARAMETERS

typealias PCRYPT_RSA_SSA_PSS_PARAMETERSVar = CPointerVarOf<PCRYPT_RSA_SSA_PSS_PARAMETERS>
typealias PCRYPT_RSA_SSA_PSS_PARAMETERS = CPointer<_CRYPT_RSA_SSA_PSS_PARAMETERS>

typealias CRYPT_PSOURCE_ALGORITHM = _CRYPT_PSOURCE_ALGORITHM

typealias PCRYPT_PSOURCE_ALGORITHMVar = CPointerVarOf<PCRYPT_PSOURCE_ALGORITHM>
typealias PCRYPT_PSOURCE_ALGORITHM = CPointer<_CRYPT_PSOURCE_ALGORITHM>

typealias CRYPT_RSAES_OAEP_PARAMETERS = _CRYPT_RSAES_OAEP_PARAMETERS

typealias PCRYPT_RSAES_OAEP_PARAMETERSVar = CPointerVarOf<PCRYPT_RSAES_OAEP_PARAMETERS>
typealias PCRYPT_RSAES_OAEP_PARAMETERS = CPointer<_CRYPT_RSAES_OAEP_PARAMETERS>

typealias CMC_TAGGED_ATTRIBUTE = _CMC_TAGGED_ATTRIBUTE

typealias PCMC_TAGGED_ATTRIBUTEVar = CPointerVarOf<PCMC_TAGGED_ATTRIBUTE>
typealias PCMC_TAGGED_ATTRIBUTE = CPointer<_CMC_TAGGED_ATTRIBUTE>

typealias CMC_TAGGED_CERT_REQUEST = _CMC_TAGGED_CERT_REQUEST

typealias PCMC_TAGGED_CERT_REQUESTVar = CPointerVarOf<PCMC_TAGGED_CERT_REQUEST>
typealias PCMC_TAGGED_CERT_REQUEST = CPointer<_CMC_TAGGED_CERT_REQUEST>

typealias CMC_TAGGED_REQUEST = _CMC_TAGGED_REQUEST

typealias PCMC_TAGGED_REQUESTVar = CPointerVarOf<PCMC_TAGGED_REQUEST>
typealias PCMC_TAGGED_REQUEST = CPointer<_CMC_TAGGED_REQUEST>

typealias CMC_TAGGED_CONTENT_INFO = _CMC_TAGGED_CONTENT_INFO

typealias PCMC_TAGGED_CONTENT_INFOVar = CPointerVarOf<PCMC_TAGGED_CONTENT_INFO>
typealias PCMC_TAGGED_CONTENT_INFO = CPointer<_CMC_TAGGED_CONTENT_INFO>

typealias CMC_TAGGED_OTHER_MSG = _CMC_TAGGED_OTHER_MSG

typealias PCMC_TAGGED_OTHER_MSGVar = CPointerVarOf<PCMC_TAGGED_OTHER_MSG>
typealias PCMC_TAGGED_OTHER_MSG = CPointer<_CMC_TAGGED_OTHER_MSG>

typealias CMC_DATA_INFO = _CMC_DATA_INFO

typealias PCMC_DATA_INFOVar = CPointerVarOf<PCMC_DATA_INFO>
typealias PCMC_DATA_INFO = CPointer<_CMC_DATA_INFO>

typealias CMC_RESPONSE_INFO = _CMC_RESPONSE_INFO

typealias PCMC_RESPONSE_INFOVar = CPointerVarOf<PCMC_RESPONSE_INFO>
typealias PCMC_RESPONSE_INFO = CPointer<_CMC_RESPONSE_INFO>

typealias CMC_PEND_INFO = _CMC_PEND_INFO

typealias PCMC_PEND_INFOVar = CPointerVarOf<PCMC_PEND_INFO>
typealias PCMC_PEND_INFO = CPointer<_CMC_PEND_INFO>

typealias CMC_STATUS_INFO = _CMC_STATUS_INFO

typealias PCMC_STATUS_INFOVar = CPointerVarOf<PCMC_STATUS_INFO>
typealias PCMC_STATUS_INFO = CPointer<_CMC_STATUS_INFO>

typealias CMC_ADD_EXTENSIONS_INFO = _CMC_ADD_EXTENSIONS_INFO

typealias PCMC_ADD_EXTENSIONS_INFOVar = CPointerVarOf<PCMC_ADD_EXTENSIONS_INFO>
typealias PCMC_ADD_EXTENSIONS_INFO = CPointer<_CMC_ADD_EXTENSIONS_INFO>

typealias CMC_ADD_ATTRIBUTES_INFO = _CMC_ADD_ATTRIBUTES_INFO

typealias PCMC_ADD_ATTRIBUTES_INFOVar = CPointerVarOf<PCMC_ADD_ATTRIBUTES_INFO>
typealias PCMC_ADD_ATTRIBUTES_INFO = CPointer<_CMC_ADD_ATTRIBUTES_INFO>

typealias CERT_TEMPLATE_EXT = _CERT_TEMPLATE_EXT

typealias PCERT_TEMPLATE_EXTVar = CPointerVarOf<PCERT_TEMPLATE_EXT>
typealias PCERT_TEMPLATE_EXT = CPointer<_CERT_TEMPLATE_EXT>

typealias CERT_HASHED_URL = _CERT_HASHED_URL

typealias PCERT_HASHED_URLVar = CPointerVarOf<PCERT_HASHED_URL>
typealias PCERT_HASHED_URL = CPointer<_CERT_HASHED_URL>

typealias CERT_LOGOTYPE_DETAILS = _CERT_LOGOTYPE_DETAILS

typealias PCERT_LOGOTYPE_DETAILSVar = CPointerVarOf<PCERT_LOGOTYPE_DETAILS>
typealias PCERT_LOGOTYPE_DETAILS = CPointer<_CERT_LOGOTYPE_DETAILS>

typealias CERT_LOGOTYPE_REFERENCE = _CERT_LOGOTYPE_REFERENCE

typealias PCERT_LOGOTYPE_REFERENCEVar = CPointerVarOf<PCERT_LOGOTYPE_REFERENCE>
typealias PCERT_LOGOTYPE_REFERENCE = CPointer<_CERT_LOGOTYPE_REFERENCE>

typealias CERT_LOGOTYPE_IMAGE_INFO = _CERT_LOGOTYPE_IMAGE_INFO

typealias PCERT_LOGOTYPE_IMAGE_INFOVar = CPointerVarOf<PCERT_LOGOTYPE_IMAGE_INFO>
typealias PCERT_LOGOTYPE_IMAGE_INFO = CPointer<_CERT_LOGOTYPE_IMAGE_INFO>

typealias CERT_LOGOTYPE_IMAGE = _CERT_LOGOTYPE_IMAGE

typealias PCERT_LOGOTYPE_IMAGEVar = CPointerVarOf<PCERT_LOGOTYPE_IMAGE>
typealias PCERT_LOGOTYPE_IMAGE = CPointer<_CERT_LOGOTYPE_IMAGE>

typealias CERT_LOGOTYPE_AUDIO_INFO = _CERT_LOGOTYPE_AUDIO_INFO

typealias PCERT_LOGOTYPE_AUDIO_INFOVar = CPointerVarOf<PCERT_LOGOTYPE_AUDIO_INFO>
typealias PCERT_LOGOTYPE_AUDIO_INFO = CPointer<_CERT_LOGOTYPE_AUDIO_INFO>

typealias CERT_LOGOTYPE_AUDIO = _CERT_LOGOTYPE_AUDIO

typealias PCERT_LOGOTYPE_AUDIOVar = CPointerVarOf<PCERT_LOGOTYPE_AUDIO>
typealias PCERT_LOGOTYPE_AUDIO = CPointer<_CERT_LOGOTYPE_AUDIO>

typealias CERT_LOGOTYPE_DATA = _CERT_LOGOTYPE_DATA

typealias PCERT_LOGOTYPE_DATAVar = CPointerVarOf<PCERT_LOGOTYPE_DATA>
typealias PCERT_LOGOTYPE_DATA = CPointer<_CERT_LOGOTYPE_DATA>

typealias CERT_LOGOTYPE_INFO = _CERT_LOGOTYPE_INFO

typealias PCERT_LOGOTYPE_INFOVar = CPointerVarOf<PCERT_LOGOTYPE_INFO>
typealias PCERT_LOGOTYPE_INFO = CPointer<_CERT_LOGOTYPE_INFO>

typealias CERT_OTHER_LOGOTYPE_INFO = _CERT_OTHER_LOGOTYPE_INFO

typealias PCERT_OTHER_LOGOTYPE_INFOVar = CPointerVarOf<PCERT_OTHER_LOGOTYPE_INFO>
typealias PCERT_OTHER_LOGOTYPE_INFO = CPointer<_CERT_OTHER_LOGOTYPE_INFO>

typealias CERT_LOGOTYPE_EXT_INFO = _CERT_LOGOTYPE_EXT_INFO

typealias PCERT_LOGOTYPE_EXT_INFOVar = CPointerVarOf<PCERT_LOGOTYPE_EXT_INFO>
typealias PCERT_LOGOTYPE_EXT_INFO = CPointer<_CERT_LOGOTYPE_EXT_INFO>

typealias CERT_BIOMETRIC_DATA = _CERT_BIOMETRIC_DATA

typealias PCERT_BIOMETRIC_DATAVar = CPointerVarOf<PCERT_BIOMETRIC_DATA>
typealias PCERT_BIOMETRIC_DATA = CPointer<_CERT_BIOMETRIC_DATA>

typealias CERT_BIOMETRIC_EXT_INFO = _CERT_BIOMETRIC_EXT_INFO

typealias PCERT_BIOMETRIC_EXT_INFOVar = CPointerVarOf<PCERT_BIOMETRIC_EXT_INFO>
typealias PCERT_BIOMETRIC_EXT_INFO = CPointer<_CERT_BIOMETRIC_EXT_INFO>

typealias OCSP_SIGNATURE_INFO = _OCSP_SIGNATURE_INFO

typealias POCSP_SIGNATURE_INFOVar = CPointerVarOf<POCSP_SIGNATURE_INFO>
typealias POCSP_SIGNATURE_INFO = CPointer<_OCSP_SIGNATURE_INFO>

typealias OCSP_SIGNED_REQUEST_INFO = _OCSP_SIGNED_REQUEST_INFO

typealias POCSP_SIGNED_REQUEST_INFOVar = CPointerVarOf<POCSP_SIGNED_REQUEST_INFO>
typealias POCSP_SIGNED_REQUEST_INFO = CPointer<_OCSP_SIGNED_REQUEST_INFO>

typealias OCSP_CERT_ID = _OCSP_CERT_ID

typealias POCSP_CERT_IDVar = CPointerVarOf<POCSP_CERT_ID>
typealias POCSP_CERT_ID = CPointer<_OCSP_CERT_ID>

typealias OCSP_REQUEST_ENTRY = _OCSP_REQUEST_ENTRY

typealias POCSP_REQUEST_ENTRYVar = CPointerVarOf<POCSP_REQUEST_ENTRY>
typealias POCSP_REQUEST_ENTRY = CPointer<_OCSP_REQUEST_ENTRY>

typealias OCSP_REQUEST_INFO = _OCSP_REQUEST_INFO

typealias POCSP_REQUEST_INFOVar = CPointerVarOf<POCSP_REQUEST_INFO>
typealias POCSP_REQUEST_INFO = CPointer<_OCSP_REQUEST_INFO>

typealias OCSP_RESPONSE_INFO = _OCSP_RESPONSE_INFO

typealias POCSP_RESPONSE_INFOVar = CPointerVarOf<POCSP_RESPONSE_INFO>
typealias POCSP_RESPONSE_INFO = CPointer<_OCSP_RESPONSE_INFO>

typealias OCSP_BASIC_SIGNED_RESPONSE_INFO = _OCSP_BASIC_SIGNED_RESPONSE_INFO

typealias POCSP_BASIC_SIGNED_RESPONSE_INFOVar = CPointerVarOf<POCSP_BASIC_SIGNED_RESPONSE_INFO>
typealias POCSP_BASIC_SIGNED_RESPONSE_INFO = CPointer<_OCSP_BASIC_SIGNED_RESPONSE_INFO>

typealias OCSP_BASIC_REVOKED_INFO = _OCSP_BASIC_REVOKED_INFO

typealias POCSP_BASIC_REVOKED_INFOVar = CPointerVarOf<POCSP_BASIC_REVOKED_INFO>
typealias POCSP_BASIC_REVOKED_INFO = CPointer<_OCSP_BASIC_REVOKED_INFO>

typealias OCSP_BASIC_RESPONSE_ENTRY = _OCSP_BASIC_RESPONSE_ENTRY

typealias POCSP_BASIC_RESPONSE_ENTRYVar = CPointerVarOf<POCSP_BASIC_RESPONSE_ENTRY>
typealias POCSP_BASIC_RESPONSE_ENTRY = CPointer<_OCSP_BASIC_RESPONSE_ENTRY>

typealias OCSP_BASIC_RESPONSE_INFO = _OCSP_BASIC_RESPONSE_INFO

typealias POCSP_BASIC_RESPONSE_INFOVar = CPointerVarOf<POCSP_BASIC_RESPONSE_INFO>
typealias POCSP_BASIC_RESPONSE_INFO = CPointer<_OCSP_BASIC_RESPONSE_INFO>

typealias HCRYPTOIDFUNCSETVar = CPointerVarOf<HCRYPTOIDFUNCSET>
typealias HCRYPTOIDFUNCSET = COpaquePointer

typealias HCRYPTOIDFUNCADDRVar = CPointerVarOf<HCRYPTOIDFUNCADDR>
typealias HCRYPTOIDFUNCADDR = COpaquePointer

typealias CRYPT_OID_FUNC_ENTRY = _CRYPT_OID_FUNC_ENTRY

typealias PCRYPT_OID_FUNC_ENTRYVar = CPointerVarOf<PCRYPT_OID_FUNC_ENTRY>
typealias PCRYPT_OID_FUNC_ENTRY = CPointer<_CRYPT_OID_FUNC_ENTRY>

typealias PFN_CRYPT_ENUM_OID_FUNCVar = CPointerVarOf<PFN_CRYPT_ENUM_OID_FUNC>
typealias PFN_CRYPT_ENUM_OID_FUNC = CPointer<CFunction<(DWORD, LPCSTR?, LPCSTR?, DWORD, CArrayPointer<DWORDVar>?, CArrayPointer<LPCWSTRVar>?, CArrayPointer<CPointerVar<BYTEVar>>?, CArrayPointer<DWORDVar>?, COpaquePointer?) -> WINBOOL>>

typealias CRYPT_OID_INFO = _CRYPT_OID_INFO

typealias PCRYPT_OID_INFOVar = CPointerVarOf<PCRYPT_OID_INFO>
typealias PCRYPT_OID_INFO = CPointer<_CRYPT_OID_INFO>

typealias CCRYPT_OID_INFO = CRYPT_OID_INFO

typealias PCCRYPT_OID_INFOVar = CPointerVarOf<PCCRYPT_OID_INFO>
typealias PCCRYPT_OID_INFO = CPointer<CRYPT_OID_INFO>

typealias PFN_CRYPT_ENUM_OID_INFOVar = CPointerVarOf<PFN_CRYPT_ENUM_OID_INFO>
typealias PFN_CRYPT_ENUM_OID_INFO = CPointer<CFunction<(PCCRYPT_OID_INFO?, COpaquePointer?) -> WINBOOL>>

typealias CERT_STRONG_SIGN_SERIALIZED_INFO = _CERT_STRONG_SIGN_SERIALIZED_INFO

typealias PCERT_STRONG_SIGN_SERIALIZED_INFOVar = CPointerVarOf<PCERT_STRONG_SIGN_SERIALIZED_INFO>
typealias PCERT_STRONG_SIGN_SERIALIZED_INFO = CPointer<_CERT_STRONG_SIGN_SERIALIZED_INFO>

typealias CERT_STRONG_SIGN_PARA = _CERT_STRONG_SIGN_PARA

typealias PCERT_STRONG_SIGN_PARAVar = CPointerVarOf<PCERT_STRONG_SIGN_PARA>
typealias PCERT_STRONG_SIGN_PARA = CPointer<_CERT_STRONG_SIGN_PARA>

typealias PCCERT_STRONG_SIGN_PARAVar = CPointerVarOf<PCCERT_STRONG_SIGN_PARA>
typealias PCCERT_STRONG_SIGN_PARA = CPointer<CERT_STRONG_SIGN_PARA>

typealias HCRYPTMSGVar = CPointerVarOf<HCRYPTMSG>
typealias HCRYPTMSG = COpaquePointer

typealias CERT_ISSUER_SERIAL_NUMBER = _CERT_ISSUER_SERIAL_NUMBER

typealias PCERT_ISSUER_SERIAL_NUMBERVar = CPointerVarOf<PCERT_ISSUER_SERIAL_NUMBER>
typealias PCERT_ISSUER_SERIAL_NUMBER = CPointer<_CERT_ISSUER_SERIAL_NUMBER>

typealias CERT_ID = _CERT_ID

typealias PCERT_IDVar = CPointerVarOf<PCERT_ID>
typealias PCERT_ID = CPointer<_CERT_ID>

typealias CMSG_SIGNER_ENCODE_INFO = _CMSG_SIGNER_ENCODE_INFO

typealias NCRYPT_KEY_HANDLEVar = LongVarOf<NCRYPT_KEY_HANDLE>
typealias NCRYPT_KEY_HANDLE = ULONG_PTR

typealias PCMSG_SIGNER_ENCODE_INFOVar = CPointerVarOf<PCMSG_SIGNER_ENCODE_INFO>
typealias PCMSG_SIGNER_ENCODE_INFO = CPointer<_CMSG_SIGNER_ENCODE_INFO>

typealias CMSG_SIGNED_ENCODE_INFO = _CMSG_SIGNED_ENCODE_INFO

typealias PCMSG_SIGNED_ENCODE_INFOVar = CPointerVarOf<PCMSG_SIGNED_ENCODE_INFO>
typealias PCMSG_SIGNED_ENCODE_INFO = CPointer<_CMSG_SIGNED_ENCODE_INFO>

typealias CMSG_RECIPIENT_ENCODE_INFO = _CMSG_RECIPIENT_ENCODE_INFO

typealias PCMSG_RECIPIENT_ENCODE_INFOVar = CPointerVarOf<PCMSG_RECIPIENT_ENCODE_INFO>
typealias PCMSG_RECIPIENT_ENCODE_INFO = CPointer<_CMSG_RECIPIENT_ENCODE_INFO>

typealias CMSG_ENVELOPED_ENCODE_INFO = _CMSG_ENVELOPED_ENCODE_INFO

typealias PCMSG_ENVELOPED_ENCODE_INFOVar = CPointerVarOf<PCMSG_ENVELOPED_ENCODE_INFO>
typealias PCMSG_ENVELOPED_ENCODE_INFO = CPointer<_CMSG_ENVELOPED_ENCODE_INFO>

typealias CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO

typealias PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFOVar = CPointerVarOf<PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO>
typealias PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = CPointer<_CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO>

typealias CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO

typealias PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFOVar = CPointerVarOf<PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO>
typealias PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = CPointer<_CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO>

typealias CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO

typealias PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFOVar = CPointerVarOf<PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO>
typealias PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = CPointer<_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO>

typealias CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO

typealias PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFOVar = CPointerVarOf<PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO>
typealias PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = CPointer<_CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO>

typealias CMSG_RC2_AUX_INFO = _CMSG_RC2_AUX_INFO

typealias PCMSG_RC2_AUX_INFOVar = CPointerVarOf<PCMSG_RC2_AUX_INFO>
typealias PCMSG_RC2_AUX_INFO = CPointer<_CMSG_RC2_AUX_INFO>

typealias CMSG_SP3_COMPATIBLE_AUX_INFO = _CMSG_SP3_COMPATIBLE_AUX_INFO

typealias PCMSG_SP3_COMPATIBLE_AUX_INFOVar = CPointerVarOf<PCMSG_SP3_COMPATIBLE_AUX_INFO>
typealias PCMSG_SP3_COMPATIBLE_AUX_INFO = CPointer<_CMSG_SP3_COMPATIBLE_AUX_INFO>

typealias CMSG_RC4_AUX_INFO = _CMSG_RC4_AUX_INFO

typealias PCMSG_RC4_AUX_INFOVar = CPointerVarOf<PCMSG_RC4_AUX_INFO>
typealias PCMSG_RC4_AUX_INFO = CPointer<_CMSG_RC4_AUX_INFO>

typealias CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO

typealias PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFOVar = CPointerVarOf<PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO>
typealias PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = CPointer<_CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO>

typealias CMSG_HASHED_ENCODE_INFO = _CMSG_HASHED_ENCODE_INFO

typealias PCMSG_HASHED_ENCODE_INFOVar = CPointerVarOf<PCMSG_HASHED_ENCODE_INFO>
typealias PCMSG_HASHED_ENCODE_INFO = CPointer<_CMSG_HASHED_ENCODE_INFO>

typealias CMSG_ENCRYPTED_ENCODE_INFO = _CMSG_ENCRYPTED_ENCODE_INFO

typealias PCMSG_ENCRYPTED_ENCODE_INFOVar = CPointerVarOf<PCMSG_ENCRYPTED_ENCODE_INFO>
typealias PCMSG_ENCRYPTED_ENCODE_INFO = CPointer<_CMSG_ENCRYPTED_ENCODE_INFO>

typealias PFN_CMSG_STREAM_OUTPUTVar = CPointerVarOf<PFN_CMSG_STREAM_OUTPUT>
typealias PFN_CMSG_STREAM_OUTPUT = CPointer<CFunction<(COpaquePointer?, CPointer<BYTEVar>?, DWORD, WINBOOL) -> WINBOOL>>

typealias CMSG_STREAM_INFO = _CMSG_STREAM_INFO

typealias PCMSG_STREAM_INFOVar = CPointerVarOf<PCMSG_STREAM_INFO>
typealias PCMSG_STREAM_INFO = CPointer<_CMSG_STREAM_INFO>

typealias CMSG_SIGNER_INFO = _CMSG_SIGNER_INFO

typealias PCMSG_SIGNER_INFOVar = CPointerVarOf<PCMSG_SIGNER_INFO>
typealias PCMSG_SIGNER_INFO = CPointer<_CMSG_SIGNER_INFO>

typealias CMSG_CMS_SIGNER_INFO = _CMSG_CMS_SIGNER_INFO

typealias PCMSG_CMS_SIGNER_INFOVar = CPointerVarOf<PCMSG_CMS_SIGNER_INFO>
typealias PCMSG_CMS_SIGNER_INFO = CPointer<_CMSG_CMS_SIGNER_INFO>

typealias CMSG_ATTR = CRYPT_ATTRIBUTES

typealias PCMSG_ATTRVar = CPointerVarOf<PCMSG_ATTR>
typealias PCMSG_ATTR = CPointer<CRYPT_ATTRIBUTES>

typealias CMSG_KEY_TRANS_RECIPIENT_INFO = _CMSG_KEY_TRANS_RECIPIENT_INFO

typealias PCMSG_KEY_TRANS_RECIPIENT_INFOVar = CPointerVarOf<PCMSG_KEY_TRANS_RECIPIENT_INFO>
typealias PCMSG_KEY_TRANS_RECIPIENT_INFO = CPointer<_CMSG_KEY_TRANS_RECIPIENT_INFO>

typealias CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO

typealias PCMSG_RECIPIENT_ENCRYPTED_KEY_INFOVar = CPointerVarOf<PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO>
typealias PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO = CPointer<_CMSG_RECIPIENT_ENCRYPTED_KEY_INFO>

typealias CMSG_KEY_AGREE_RECIPIENT_INFO = _CMSG_KEY_AGREE_RECIPIENT_INFO

typealias PCMSG_KEY_AGREE_RECIPIENT_INFOVar = CPointerVarOf<PCMSG_KEY_AGREE_RECIPIENT_INFO>
typealias PCMSG_KEY_AGREE_RECIPIENT_INFO = CPointer<_CMSG_KEY_AGREE_RECIPIENT_INFO>

typealias CMSG_MAIL_LIST_RECIPIENT_INFO = _CMSG_MAIL_LIST_RECIPIENT_INFO

typealias PCMSG_MAIL_LIST_RECIPIENT_INFOVar = CPointerVarOf<PCMSG_MAIL_LIST_RECIPIENT_INFO>
typealias PCMSG_MAIL_LIST_RECIPIENT_INFO = CPointer<_CMSG_MAIL_LIST_RECIPIENT_INFO>

typealias CMSG_CMS_RECIPIENT_INFO = _CMSG_CMS_RECIPIENT_INFO

typealias PCMSG_CMS_RECIPIENT_INFOVar = CPointerVarOf<PCMSG_CMS_RECIPIENT_INFO>
typealias PCMSG_CMS_RECIPIENT_INFO = CPointer<_CMSG_CMS_RECIPIENT_INFO>

typealias CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA

typealias PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARAVar = CPointerVarOf<PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA>
typealias PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = CPointer<_CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA>

typealias CMSG_CTRL_DECRYPT_PARA = _CMSG_CTRL_DECRYPT_PARA

typealias PCMSG_CTRL_DECRYPT_PARAVar = CPointerVarOf<PCMSG_CTRL_DECRYPT_PARA>
typealias PCMSG_CTRL_DECRYPT_PARA = CPointer<_CMSG_CTRL_DECRYPT_PARA>

typealias CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA

typealias PCMSG_CTRL_KEY_TRANS_DECRYPT_PARAVar = CPointerVarOf<PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA>
typealias PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA = CPointer<_CMSG_CTRL_KEY_TRANS_DECRYPT_PARA>

typealias CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA

typealias PCMSG_CTRL_KEY_AGREE_DECRYPT_PARAVar = CPointerVarOf<PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA>
typealias PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA = CPointer<_CMSG_CTRL_KEY_AGREE_DECRYPT_PARA>

typealias CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA

typealias PCMSG_CTRL_MAIL_LIST_DECRYPT_PARAVar = CPointerVarOf<PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA>
typealias PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA = CPointer<_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA>

typealias CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA

typealias PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARAVar = CPointerVarOf<PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA>
typealias PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = CPointer<_CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA>

typealias CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA

typealias PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARAVar = CPointerVarOf<PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA>
typealias PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = CPointer<_CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA>

typealias PFN_CMSG_ALLOCVar = CPointerVarOf<PFN_CMSG_ALLOC>
typealias PFN_CMSG_ALLOC = CPointer<CFunction<(size_t) -> COpaquePointer?>>

typealias PFN_CMSG_FREEVar = CPointerVarOf<PFN_CMSG_FREE>
typealias PFN_CMSG_FREE = CPointer<CFunction<(COpaquePointer?) -> Unit>>

typealias PFN_CMSG_GEN_ENCRYPT_KEYVar = CPointerVarOf<PFN_CMSG_GEN_ENCRYPT_KEY>
typealias PFN_CMSG_GEN_ENCRYPT_KEY = CPointer<CFunction<(CPointer<HCRYPTPROVVar>?, PCRYPT_ALGORITHM_IDENTIFIER?, PVOID?, PCERT_PUBLIC_KEY_INFO?, PFN_CMSG_ALLOC?, CPointer<HCRYPTKEYVar>?, CPointer<PBYTEVar>?, PDWORD?) -> WINBOOL>>

typealias PFN_CMSG_EXPORT_ENCRYPT_KEYVar = CPointerVarOf<PFN_CMSG_EXPORT_ENCRYPT_KEY>
typealias PFN_CMSG_EXPORT_ENCRYPT_KEY = CPointer<CFunction<(HCRYPTPROV, HCRYPTKEY, PCERT_PUBLIC_KEY_INFO?, PBYTE?, PDWORD?) -> WINBOOL>>

typealias PFN_CMSG_IMPORT_ENCRYPT_KEYVar = CPointerVarOf<PFN_CMSG_IMPORT_ENCRYPT_KEY>
typealias PFN_CMSG_IMPORT_ENCRYPT_KEY = CPointer<CFunction<(HCRYPTPROV, DWORD, PCRYPT_ALGORITHM_IDENTIFIER?, PCRYPT_ALGORITHM_IDENTIFIER?, PBYTE?, DWORD, CPointer<HCRYPTKEYVar>?) -> WINBOOL>>

typealias CMSG_CONTENT_ENCRYPT_INFO = _CMSG_CONTENT_ENCRYPT_INFO

typealias BCRYPT_KEY_HANDLEVar = CPointerVarOf<BCRYPT_KEY_HANDLE>
typealias BCRYPT_KEY_HANDLE = PVOID

typealias PCMSG_CONTENT_ENCRYPT_INFOVar = CPointerVarOf<PCMSG_CONTENT_ENCRYPT_INFO>
typealias PCMSG_CONTENT_ENCRYPT_INFO = CPointer<_CMSG_CONTENT_ENCRYPT_INFO>

typealias PFN_CMSG_GEN_CONTENT_ENCRYPT_KEYVar = CPointerVarOf<PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY>
typealias PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = CPointer<CFunction<(PCMSG_CONTENT_ENCRYPT_INFO?, DWORD, COpaquePointer?) -> WINBOOL>>

typealias CMSG_KEY_TRANS_ENCRYPT_INFO = _CMSG_KEY_TRANS_ENCRYPT_INFO

typealias PCMSG_KEY_TRANS_ENCRYPT_INFOVar = CPointerVarOf<PCMSG_KEY_TRANS_ENCRYPT_INFO>
typealias PCMSG_KEY_TRANS_ENCRYPT_INFO = CPointer<_CMSG_KEY_TRANS_ENCRYPT_INFO>

typealias PFN_CMSG_EXPORT_KEY_TRANSVar = CPointerVarOf<PFN_CMSG_EXPORT_KEY_TRANS>
typealias PFN_CMSG_EXPORT_KEY_TRANS = CPointer<CFunction<(PCMSG_CONTENT_ENCRYPT_INFO?, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO?, PCMSG_KEY_TRANS_ENCRYPT_INFO?, DWORD, COpaquePointer?) -> WINBOOL>>

typealias CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO

typealias PCMSG_KEY_AGREE_KEY_ENCRYPT_INFOVar = CPointerVarOf<PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO>
typealias PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO = CPointer<_CMSG_KEY_AGREE_KEY_ENCRYPT_INFO>

typealias CMSG_KEY_AGREE_ENCRYPT_INFO = _CMSG_KEY_AGREE_ENCRYPT_INFO

typealias PCMSG_KEY_AGREE_ENCRYPT_INFOVar = CPointerVarOf<PCMSG_KEY_AGREE_ENCRYPT_INFO>
typealias PCMSG_KEY_AGREE_ENCRYPT_INFO = CPointer<_CMSG_KEY_AGREE_ENCRYPT_INFO>

typealias PFN_CMSG_EXPORT_KEY_AGREEVar = CPointerVarOf<PFN_CMSG_EXPORT_KEY_AGREE>
typealias PFN_CMSG_EXPORT_KEY_AGREE = CPointer<CFunction<(PCMSG_CONTENT_ENCRYPT_INFO?, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO?, PCMSG_KEY_AGREE_ENCRYPT_INFO?, DWORD, COpaquePointer?) -> WINBOOL>>

typealias CMSG_MAIL_LIST_ENCRYPT_INFO = _CMSG_MAIL_LIST_ENCRYPT_INFO

typealias PCMSG_MAIL_LIST_ENCRYPT_INFOVar = CPointerVarOf<PCMSG_MAIL_LIST_ENCRYPT_INFO>
typealias PCMSG_MAIL_LIST_ENCRYPT_INFO = CPointer<_CMSG_MAIL_LIST_ENCRYPT_INFO>

typealias PFN_CMSG_EXPORT_MAIL_LISTVar = CPointerVarOf<PFN_CMSG_EXPORT_MAIL_LIST>
typealias PFN_CMSG_EXPORT_MAIL_LIST = CPointer<CFunction<(PCMSG_CONTENT_ENCRYPT_INFO?, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO?, PCMSG_MAIL_LIST_ENCRYPT_INFO?, DWORD, COpaquePointer?) -> WINBOOL>>

typealias PFN_CMSG_IMPORT_KEY_TRANSVar = CPointerVarOf<PFN_CMSG_IMPORT_KEY_TRANS>
typealias PFN_CMSG_IMPORT_KEY_TRANS = CPointer<CFunction<(PCRYPT_ALGORITHM_IDENTIFIER?, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA?, DWORD, COpaquePointer?, CPointer<HCRYPTKEYVar>?) -> WINBOOL>>

typealias PFN_CMSG_IMPORT_KEY_AGREEVar = CPointerVarOf<PFN_CMSG_IMPORT_KEY_AGREE>
typealias PFN_CMSG_IMPORT_KEY_AGREE = CPointer<CFunction<(PCRYPT_ALGORITHM_IDENTIFIER?, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA?, DWORD, COpaquePointer?, CPointer<HCRYPTKEYVar>?) -> WINBOOL>>

typealias PFN_CMSG_IMPORT_MAIL_LISTVar = CPointerVarOf<PFN_CMSG_IMPORT_MAIL_LIST>
typealias PFN_CMSG_IMPORT_MAIL_LIST = CPointer<CFunction<(PCRYPT_ALGORITHM_IDENTIFIER?, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA?, DWORD, COpaquePointer?, CPointer<HCRYPTKEYVar>?) -> WINBOOL>>

typealias CMSG_CNG_CONTENT_DECRYPT_INFO = _CMSG_CNG_CONTENT_DECRYPT_INFO

typealias PCMSG_CNG_CONTENT_DECRYPT_INFOVar = CPointerVarOf<PCMSG_CNG_CONTENT_DECRYPT_INFO>
typealias PCMSG_CNG_CONTENT_DECRYPT_INFO = CPointer<_CMSG_CNG_CONTENT_DECRYPT_INFO>

typealias PFN_CMSG_CNG_IMPORT_KEY_TRANSVar = CPointerVarOf<PFN_CMSG_CNG_IMPORT_KEY_TRANS>
typealias PFN_CMSG_CNG_IMPORT_KEY_TRANS = CPointer<CFunction<(PCMSG_CNG_CONTENT_DECRYPT_INFO?, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA?, DWORD, COpaquePointer?) -> WINBOOL>>

typealias PFN_CMSG_CNG_IMPORT_KEY_AGREEVar = CPointerVarOf<PFN_CMSG_CNG_IMPORT_KEY_AGREE>
typealias PFN_CMSG_CNG_IMPORT_KEY_AGREE = CPointer<CFunction<(PCMSG_CNG_CONTENT_DECRYPT_INFO?, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA?, DWORD, COpaquePointer?) -> WINBOOL>>

typealias PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEYVar = CPointerVarOf<PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY>
typealias PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = CPointer<CFunction<(PCMSG_CNG_CONTENT_DECRYPT_INFO?, DWORD, COpaquePointer?) -> WINBOOL>>

typealias HCERTSTOREVar = CPointerVarOf<HCERTSTORE>
typealias HCERTSTORE = COpaquePointer

typealias CERT_CONTEXT = _CERT_CONTEXT

typealias PCERT_CONTEXTVar = CPointerVarOf<PCERT_CONTEXT>
typealias PCERT_CONTEXT = CPointer<_CERT_CONTEXT>

typealias PCCERT_CONTEXTVar = CPointerVarOf<PCCERT_CONTEXT>
typealias PCCERT_CONTEXT = CPointer<CERT_CONTEXT>

typealias CRL_CONTEXT = _CRL_CONTEXT

typealias PCRL_CONTEXTVar = CPointerVarOf<PCRL_CONTEXT>
typealias PCRL_CONTEXT = CPointer<_CRL_CONTEXT>

typealias PCCRL_CONTEXTVar = CPointerVarOf<PCCRL_CONTEXT>
typealias PCCRL_CONTEXT = CPointer<CRL_CONTEXT>

typealias CTL_CONTEXT = _CTL_CONTEXT

typealias PCTL_CONTEXTVar = CPointerVarOf<PCTL_CONTEXT>
typealias PCTL_CONTEXT = CPointer<_CTL_CONTEXT>

typealias PCCTL_CONTEXTVar = CPointerVarOf<PCCTL_CONTEXT>
typealias PCCTL_CONTEXT = CPointer<CTL_CONTEXT>

typealias CRYPT_KEY_PROV_PARAM = _CRYPT_KEY_PROV_PARAM

typealias PCRYPT_KEY_PROV_PARAMVar = CPointerVarOf<PCRYPT_KEY_PROV_PARAM>
typealias PCRYPT_KEY_PROV_PARAM = CPointer<_CRYPT_KEY_PROV_PARAM>

typealias CRYPT_KEY_PROV_INFO = _CRYPT_KEY_PROV_INFO

typealias PCRYPT_KEY_PROV_INFOVar = CPointerVarOf<PCRYPT_KEY_PROV_INFO>
typealias PCRYPT_KEY_PROV_INFO = CPointer<_CRYPT_KEY_PROV_INFO>

typealias CERT_KEY_CONTEXT = _CERT_KEY_CONTEXT

typealias PCERT_KEY_CONTEXTVar = CPointerVarOf<PCERT_KEY_CONTEXT>
typealias PCERT_KEY_CONTEXT = CPointer<_CERT_KEY_CONTEXT>

typealias ROOT_INFO_LUID = _ROOT_INFO_LUID

typealias PROOT_INFO_LUIDVar = CPointerVarOf<PROOT_INFO_LUID>
typealias PROOT_INFO_LUID = CPointer<_ROOT_INFO_LUID>

typealias CRYPT_SMART_CARD_ROOT_INFO = _CRYPT_SMART_CARD_ROOT_INFO

typealias PCRYPT_SMART_CARD_ROOT_INFOVar = CPointerVarOf<PCRYPT_SMART_CARD_ROOT_INFO>
typealias PCRYPT_SMART_CARD_ROOT_INFO = CPointer<_CRYPT_SMART_CARD_ROOT_INFO>

typealias CERT_SYSTEM_STORE_RELOCATE_PARA = _CERT_SYSTEM_STORE_RELOCATE_PARA

typealias PCERT_SYSTEM_STORE_RELOCATE_PARAVar = CPointerVarOf<PCERT_SYSTEM_STORE_RELOCATE_PARA>
typealias PCERT_SYSTEM_STORE_RELOCATE_PARA = CPointer<_CERT_SYSTEM_STORE_RELOCATE_PARA>

typealias CERT_REGISTRY_STORE_CLIENT_GPT_PARA = _CERT_REGISTRY_STORE_CLIENT_GPT_PARA

typealias PCERT_REGISTRY_STORE_CLIENT_GPT_PARAVar = CPointerVarOf<PCERT_REGISTRY_STORE_CLIENT_GPT_PARA>
typealias PCERT_REGISTRY_STORE_CLIENT_GPT_PARA = CPointer<_CERT_REGISTRY_STORE_CLIENT_GPT_PARA>

typealias CERT_REGISTRY_STORE_ROAMING_PARA = _CERT_REGISTRY_STORE_ROAMING_PARA

typealias PCERT_REGISTRY_STORE_ROAMING_PARAVar = CPointerVarOf<PCERT_REGISTRY_STORE_ROAMING_PARA>
typealias PCERT_REGISTRY_STORE_ROAMING_PARA = CPointer<_CERT_REGISTRY_STORE_ROAMING_PARA>

typealias CERT_LDAP_STORE_OPENED_PARA = _CERT_LDAP_STORE_OPENED_PARA

typealias PCERT_LDAP_STORE_OPENED_PARAVar = CPointerVarOf<PCERT_LDAP_STORE_OPENED_PARA>
typealias PCERT_LDAP_STORE_OPENED_PARA = CPointer<_CERT_LDAP_STORE_OPENED_PARA>

typealias HCERTSTOREPROVVar = CPointerVarOf<HCERTSTOREPROV>
typealias HCERTSTOREPROV = COpaquePointer

typealias CERT_STORE_PROV_INFO = _CERT_STORE_PROV_INFO

typealias PCERT_STORE_PROV_INFOVar = CPointerVarOf<PCERT_STORE_PROV_INFO>
typealias PCERT_STORE_PROV_INFO = CPointer<_CERT_STORE_PROV_INFO>

typealias PFN_CERT_DLL_OPEN_STORE_PROV_FUNCVar = CPointerVarOf<PFN_CERT_DLL_OPEN_STORE_PROV_FUNC>
typealias PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = CPointer<CFunction<(LPCSTR?, DWORD, HCRYPTPROV_LEGACY, DWORD, COpaquePointer?, HCERTSTORE?, PCERT_STORE_PROV_INFO?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_CLOSEVar = CPointerVarOf<PFN_CERT_STORE_PROV_CLOSE>
typealias PFN_CERT_STORE_PROV_CLOSE = CPointer<CFunction<(HCERTSTOREPROV?, DWORD) -> Unit>>

typealias PFN_CERT_STORE_PROV_READ_CERTVar = CPointerVarOf<PFN_CERT_STORE_PROV_READ_CERT>
typealias PFN_CERT_STORE_PROV_READ_CERT = CPointer<CFunction<(HCERTSTOREPROV?, PCCERT_CONTEXT?, DWORD, CPointer<PCCERT_CONTEXTVar>?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_WRITE_CERTVar = CPointerVarOf<PFN_CERT_STORE_PROV_WRITE_CERT>
typealias PFN_CERT_STORE_PROV_WRITE_CERT = CPointer<CFunction<(HCERTSTOREPROV?, PCCERT_CONTEXT?, DWORD) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_DELETE_CERTVar = CPointerVarOf<PFN_CERT_STORE_PROV_DELETE_CERT>
typealias PFN_CERT_STORE_PROV_DELETE_CERT = CPointer<CFunction<(HCERTSTOREPROV?, PCCERT_CONTEXT?, DWORD) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_SET_CERT_PROPERTYVar = CPointerVarOf<PFN_CERT_STORE_PROV_SET_CERT_PROPERTY>
typealias PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = CPointer<CFunction<(HCERTSTOREPROV?, PCCERT_CONTEXT?, DWORD, DWORD, COpaquePointer?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_READ_CRLVar = CPointerVarOf<PFN_CERT_STORE_PROV_READ_CRL>
typealias PFN_CERT_STORE_PROV_READ_CRL = CPointer<CFunction<(HCERTSTOREPROV?, PCCRL_CONTEXT?, DWORD, CPointer<PCCRL_CONTEXTVar>?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_WRITE_CRLVar = CPointerVarOf<PFN_CERT_STORE_PROV_WRITE_CRL>
typealias PFN_CERT_STORE_PROV_WRITE_CRL = CPointer<CFunction<(HCERTSTOREPROV?, PCCRL_CONTEXT?, DWORD) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_DELETE_CRLVar = CPointerVarOf<PFN_CERT_STORE_PROV_DELETE_CRL>
typealias PFN_CERT_STORE_PROV_DELETE_CRL = CPointer<CFunction<(HCERTSTOREPROV?, PCCRL_CONTEXT?, DWORD) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_SET_CRL_PROPERTYVar = CPointerVarOf<PFN_CERT_STORE_PROV_SET_CRL_PROPERTY>
typealias PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = CPointer<CFunction<(HCERTSTOREPROV?, PCCRL_CONTEXT?, DWORD, DWORD, COpaquePointer?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_READ_CTLVar = CPointerVarOf<PFN_CERT_STORE_PROV_READ_CTL>
typealias PFN_CERT_STORE_PROV_READ_CTL = CPointer<CFunction<(HCERTSTOREPROV?, PCCTL_CONTEXT?, DWORD, CPointer<PCCTL_CONTEXTVar>?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_WRITE_CTLVar = CPointerVarOf<PFN_CERT_STORE_PROV_WRITE_CTL>
typealias PFN_CERT_STORE_PROV_WRITE_CTL = CPointer<CFunction<(HCERTSTOREPROV?, PCCTL_CONTEXT?, DWORD) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_DELETE_CTLVar = CPointerVarOf<PFN_CERT_STORE_PROV_DELETE_CTL>
typealias PFN_CERT_STORE_PROV_DELETE_CTL = CPointer<CFunction<(HCERTSTOREPROV?, PCCTL_CONTEXT?, DWORD) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_SET_CTL_PROPERTYVar = CPointerVarOf<PFN_CERT_STORE_PROV_SET_CTL_PROPERTY>
typealias PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = CPointer<CFunction<(HCERTSTOREPROV?, PCCTL_CONTEXT?, DWORD, DWORD, COpaquePointer?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_CONTROLVar = CPointerVarOf<PFN_CERT_STORE_PROV_CONTROL>
typealias PFN_CERT_STORE_PROV_CONTROL = CPointer<CFunction<(HCERTSTOREPROV?, DWORD, DWORD, COpaquePointer?) -> WINBOOL>>

typealias CERT_STORE_PROV_FIND_INFO = _CERT_STORE_PROV_FIND_INFO

typealias PCERT_STORE_PROV_FIND_INFOVar = CPointerVarOf<PCERT_STORE_PROV_FIND_INFO>
typealias PCERT_STORE_PROV_FIND_INFO = CPointer<_CERT_STORE_PROV_FIND_INFO>

typealias CCERT_STORE_PROV_FIND_INFO = CERT_STORE_PROV_FIND_INFO

typealias PCCERT_STORE_PROV_FIND_INFOVar = CPointerVarOf<PCCERT_STORE_PROV_FIND_INFO>
typealias PCCERT_STORE_PROV_FIND_INFO = CPointer<CERT_STORE_PROV_FIND_INFO>

typealias PFN_CERT_STORE_PROV_FIND_CERTVar = CPointerVarOf<PFN_CERT_STORE_PROV_FIND_CERT>
typealias PFN_CERT_STORE_PROV_FIND_CERT = CPointer<CFunction<(HCERTSTOREPROV?, PCCERT_STORE_PROV_FIND_INFO?, PCCERT_CONTEXT?, DWORD, CPointer<COpaquePointerVar>?, CPointer<PCCERT_CONTEXTVar>?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_FREE_FIND_CERTVar = CPointerVarOf<PFN_CERT_STORE_PROV_FREE_FIND_CERT>
typealias PFN_CERT_STORE_PROV_FREE_FIND_CERT = CPointer<CFunction<(HCERTSTOREPROV?, PCCERT_CONTEXT?, COpaquePointer?, DWORD) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_GET_CERT_PROPERTYVar = CPointerVarOf<PFN_CERT_STORE_PROV_GET_CERT_PROPERTY>
typealias PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = CPointer<CFunction<(HCERTSTOREPROV?, PCCERT_CONTEXT?, DWORD, DWORD, COpaquePointer?, CPointer<DWORDVar>?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_FIND_CRLVar = CPointerVarOf<PFN_CERT_STORE_PROV_FIND_CRL>
typealias PFN_CERT_STORE_PROV_FIND_CRL = CPointer<CFunction<(HCERTSTOREPROV?, PCCERT_STORE_PROV_FIND_INFO?, PCCRL_CONTEXT?, DWORD, CPointer<COpaquePointerVar>?, CPointer<PCCRL_CONTEXTVar>?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_FREE_FIND_CRLVar = CPointerVarOf<PFN_CERT_STORE_PROV_FREE_FIND_CRL>
typealias PFN_CERT_STORE_PROV_FREE_FIND_CRL = CPointer<CFunction<(HCERTSTOREPROV?, PCCRL_CONTEXT?, COpaquePointer?, DWORD) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_GET_CRL_PROPERTYVar = CPointerVarOf<PFN_CERT_STORE_PROV_GET_CRL_PROPERTY>
typealias PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = CPointer<CFunction<(HCERTSTOREPROV?, PCCRL_CONTEXT?, DWORD, DWORD, COpaquePointer?, CPointer<DWORDVar>?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_FIND_CTLVar = CPointerVarOf<PFN_CERT_STORE_PROV_FIND_CTL>
typealias PFN_CERT_STORE_PROV_FIND_CTL = CPointer<CFunction<(HCERTSTOREPROV?, PCCERT_STORE_PROV_FIND_INFO?, PCCTL_CONTEXT?, DWORD, CPointer<COpaquePointerVar>?, CPointer<PCCTL_CONTEXTVar>?) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_FREE_FIND_CTLVar = CPointerVarOf<PFN_CERT_STORE_PROV_FREE_FIND_CTL>
typealias PFN_CERT_STORE_PROV_FREE_FIND_CTL = CPointer<CFunction<(HCERTSTOREPROV?, PCCTL_CONTEXT?, COpaquePointer?, DWORD) -> WINBOOL>>

typealias PFN_CERT_STORE_PROV_GET_CTL_PROPERTYVar = CPointerVarOf<PFN_CERT_STORE_PROV_GET_CTL_PROPERTY>
typealias PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = CPointer<CFunction<(HCERTSTOREPROV?, PCCTL_CONTEXT?, DWORD, DWORD, COpaquePointer?, CPointer<DWORDVar>?) -> WINBOOL>>

typealias CRL_FIND_ISSUED_FOR_PARA = _CRL_FIND_ISSUED_FOR_PARA

typealias PCRL_FIND_ISSUED_FOR_PARAVar = CPointerVarOf<PCRL_FIND_ISSUED_FOR_PARA>
typealias PCRL_FIND_ISSUED_FOR_PARA = CPointer<_CRL_FIND_ISSUED_FOR_PARA>

typealias CTL_ANY_SUBJECT_INFO = _CTL_ANY_SUBJECT_INFO

typealias PCTL_ANY_SUBJECT_INFOVar = CPointerVarOf<PCTL_ANY_SUBJECT_INFO>
typealias PCTL_ANY_SUBJECT_INFO = CPointer<_CTL_ANY_SUBJECT_INFO>

typealias CTL_FIND_USAGE_PARA = _CTL_FIND_USAGE_PARA

typealias PCTL_FIND_USAGE_PARAVar = CPointerVarOf<PCTL_FIND_USAGE_PARA>
typealias PCTL_FIND_USAGE_PARA = CPointer<_CTL_FIND_USAGE_PARA>

typealias CTL_FIND_SUBJECT_PARA = _CTL_FIND_SUBJECT_PARA

typealias PCTL_FIND_SUBJECT_PARAVar = CPointerVarOf<PCTL_FIND_SUBJECT_PARA>
typealias PCTL_FIND_SUBJECT_PARA = CPointer<_CTL_FIND_SUBJECT_PARA>

typealias PFN_CERT_CREATE_CONTEXT_SORT_FUNCVar = CPointerVarOf<PFN_CERT_CREATE_CONTEXT_SORT_FUNC>
typealias PFN_CERT_CREATE_CONTEXT_SORT_FUNC = CPointer<CFunction<(DWORD, DWORD, DWORD, COpaquePointer?) -> WINBOOL>>

typealias CERT_CREATE_CONTEXT_PARA = _CERT_CREATE_CONTEXT_PARA

typealias PCERT_CREATE_CONTEXT_PARAVar = CPointerVarOf<PCERT_CREATE_CONTEXT_PARA>
typealias PCERT_CREATE_CONTEXT_PARA = CPointer<_CERT_CREATE_CONTEXT_PARA>

typealias CERT_SYSTEM_STORE_INFO = _CERT_SYSTEM_STORE_INFO

typealias PCERT_SYSTEM_STORE_INFOVar = CPointerVarOf<PCERT_SYSTEM_STORE_INFO>
typealias PCERT_SYSTEM_STORE_INFO = CPointer<_CERT_SYSTEM_STORE_INFO>

typealias CERT_PHYSICAL_STORE_INFO = _CERT_PHYSICAL_STORE_INFO

typealias PCERT_PHYSICAL_STORE_INFOVar = CPointerVarOf<PCERT_PHYSICAL_STORE_INFO>
typealias PCERT_PHYSICAL_STORE_INFO = CPointer<_CERT_PHYSICAL_STORE_INFO>

typealias PFN_CERT_ENUM_SYSTEM_STORE_LOCATIONVar = CPointerVarOf<PFN_CERT_ENUM_SYSTEM_STORE_LOCATION>
typealias PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = CPointer<CFunction<(LPCWSTR?, DWORD, COpaquePointer?, COpaquePointer?) -> WINBOOL>>

typealias PFN_CERT_ENUM_SYSTEM_STOREVar = CPointerVarOf<PFN_CERT_ENUM_SYSTEM_STORE>
typealias PFN_CERT_ENUM_SYSTEM_STORE = CPointer<CFunction<(COpaquePointer?, DWORD, PCERT_SYSTEM_STORE_INFO?, COpaquePointer?, COpaquePointer?) -> WINBOOL>>

typealias PFN_CERT_ENUM_PHYSICAL_STOREVar = CPointerVarOf<PFN_CERT_ENUM_PHYSICAL_STORE>
typealias PFN_CERT_ENUM_PHYSICAL_STORE = CPointer<CFunction<(COpaquePointer?, DWORD, LPCWSTR?, PCERT_PHYSICAL_STORE_INFO?, COpaquePointer?, COpaquePointer?) -> WINBOOL>>

typealias CTL_VERIFY_USAGE_PARA = _CTL_VERIFY_USAGE_PARA

typealias PCTL_VERIFY_USAGE_PARAVar = CPointerVarOf<PCTL_VERIFY_USAGE_PARA>
typealias PCTL_VERIFY_USAGE_PARA = CPointer<_CTL_VERIFY_USAGE_PARA>

typealias CTL_VERIFY_USAGE_STATUS = _CTL_VERIFY_USAGE_STATUS

typealias PCTL_VERIFY_USAGE_STATUSVar = CPointerVarOf<PCTL_VERIFY_USAGE_STATUS>
typealias PCTL_VERIFY_USAGE_STATUS = CPointer<_CTL_VERIFY_USAGE_STATUS>

typealias CERT_REVOCATION_CRL_INFO = _CERT_REVOCATION_CRL_INFO

typealias PCERT_REVOCATION_CRL_INFOVar = CPointerVarOf<PCERT_REVOCATION_CRL_INFO>
typealias PCERT_REVOCATION_CRL_INFO = CPointer<_CERT_REVOCATION_CRL_INFO>

typealias HCERTCHAINENGINEVar = CPointerVarOf<HCERTCHAINENGINE>
typealias HCERTCHAINENGINE = HANDLE

typealias CERT_REVOCATION_CHAIN_PARA = _CERT_REVOCATION_CHAIN_PARA

typealias PCERT_REVOCATION_CHAIN_PARAVar = CPointerVarOf<PCERT_REVOCATION_CHAIN_PARA>
typealias PCERT_REVOCATION_CHAIN_PARA = CPointer<_CERT_REVOCATION_CHAIN_PARA>

typealias CERT_REVOCATION_PARA = _CERT_REVOCATION_PARA

typealias PCERT_REVOCATION_PARAVar = CPointerVarOf<PCERT_REVOCATION_PARA>
typealias PCERT_REVOCATION_PARA = CPointer<_CERT_REVOCATION_PARA>

typealias CERT_REVOCATION_STATUS = _CERT_REVOCATION_STATUS

typealias PCERT_REVOCATION_STATUSVar = CPointerVarOf<PCERT_REVOCATION_STATUS>
typealias PCERT_REVOCATION_STATUS = CPointer<_CERT_REVOCATION_STATUS>

typealias CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO

typealias PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFOVar = CPointerVarOf<PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO>
typealias PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = CPointer<_CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO>

typealias PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNCVar = CPointerVarOf<PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC>
typealias PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = CPointer<CFunction<(DWORD, PCRYPT_ALGORITHM_IDENTIFIER?, CPointer<COpaquePointerVar>?, CPointer<LPWSTRVar>?) -> WINBOOL>>

typealias PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNCVar = CPointerVarOf<PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC>
typealias PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = CPointer<CFunction<(NCRYPT_KEY_HANDLE, DWORD, PCRYPT_ALGORITHM_IDENTIFIER?, COpaquePointer?, LPCWSTR?, LPCWSTR?, CPointer<BYTEVar>?, DWORD, CPointer<BYTEVar>?, CPointer<DWORDVar>?) -> WINBOOL>>

typealias PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNCVar = CPointerVarOf<PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC>
typealias PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = CPointer<CFunction<(DWORD, PCERT_PUBLIC_KEY_INFO?, PCRYPT_ALGORITHM_IDENTIFIER?, COpaquePointer?, LPCWSTR?, LPCWSTR?, CPointer<BYTEVar>?, DWORD, CPointer<BYTEVar>?, DWORD) -> WINBOOL>>

typealias HCRYPTDEFAULTCONTEXTVar = CPointerVarOf<HCRYPTDEFAULTCONTEXT>
typealias HCRYPTDEFAULTCONTEXT = COpaquePointer

typealias CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA

typealias PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARAVar = CPointerVarOf<PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA>
typealias PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = CPointer<_CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA>

typealias PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNCVar = CPointerVarOf<PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC>
typealias PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = CPointer<CFunction<(NCRYPT_KEY_HANDLE, DWORD, LPSTR?, DWORD, COpaquePointer?, PCERT_PUBLIC_KEY_INFO?, CPointer<DWORDVar>?) -> WINBOOL>>

typealias PFN_IMPORT_PRIV_KEY_FUNCVar = CPointerVarOf<PFN_IMPORT_PRIV_KEY_FUNC>
typealias PFN_IMPORT_PRIV_KEY_FUNC = CPointer<CFunction<(HCRYPTPROV, CPointer<CRYPT_PRIVATE_KEY_INFO>?, DWORD, COpaquePointer?) -> WINBOOL>>

typealias PFN_EXPORT_PRIV_KEY_FUNCVar = CPointerVarOf<PFN_EXPORT_PRIV_KEY_FUNC>
typealias PFN_EXPORT_PRIV_KEY_FUNC = CPointer<CFunction<(HCRYPTPROV, DWORD, LPSTR?, DWORD, COpaquePointer?, CPointer<CRYPT_PRIVATE_KEY_INFO>?, CPointer<DWORDVar>?) -> WINBOOL>>

typealias PFN_CRYPT_GET_SIGNER_CERTIFICATEVar = CPointerVarOf<PFN_CRYPT_GET_SIGNER_CERTIFICATE>
typealias PFN_CRYPT_GET_SIGNER_CERTIFICATE = CPointer<CFunction<(COpaquePointer?, DWORD, PCERT_INFO?, HCERTSTORE?) -> PCCERT_CONTEXT?>>

typealias CRYPT_SIGN_MESSAGE_PARA = _CRYPT_SIGN_MESSAGE_PARA

typealias PCRYPT_SIGN_MESSAGE_PARAVar = CPointerVarOf<PCRYPT_SIGN_MESSAGE_PARA>
typealias PCRYPT_SIGN_MESSAGE_PARA = CPointer<_CRYPT_SIGN_MESSAGE_PARA>

typealias CRYPT_VERIFY_MESSAGE_PARA = _CRYPT_VERIFY_MESSAGE_PARA

typealias PCRYPT_VERIFY_MESSAGE_PARAVar = CPointerVarOf<PCRYPT_VERIFY_MESSAGE_PARA>
typealias PCRYPT_VERIFY_MESSAGE_PARA = CPointer<_CRYPT_VERIFY_MESSAGE_PARA>

typealias CRYPT_ENCRYPT_MESSAGE_PARA = _CRYPT_ENCRYPT_MESSAGE_PARA

typealias PCRYPT_ENCRYPT_MESSAGE_PARAVar = CPointerVarOf<PCRYPT_ENCRYPT_MESSAGE_PARA>
typealias PCRYPT_ENCRYPT_MESSAGE_PARA = CPointer<_CRYPT_ENCRYPT_MESSAGE_PARA>

typealias CRYPT_DECRYPT_MESSAGE_PARA = _CRYPT_DECRYPT_MESSAGE_PARA

typealias PCRYPT_DECRYPT_MESSAGE_PARAVar = CPointerVarOf<PCRYPT_DECRYPT_MESSAGE_PARA>
typealias PCRYPT_DECRYPT_MESSAGE_PARA = CPointer<_CRYPT_DECRYPT_MESSAGE_PARA>

typealias CRYPT_HASH_MESSAGE_PARA = _CRYPT_HASH_MESSAGE_PARA

typealias PCRYPT_HASH_MESSAGE_PARAVar = CPointerVarOf<PCRYPT_HASH_MESSAGE_PARA>
typealias PCRYPT_HASH_MESSAGE_PARA = CPointer<_CRYPT_HASH_MESSAGE_PARA>

typealias CRYPT_KEY_SIGN_MESSAGE_PARA = _CRYPT_KEY_SIGN_MESSAGE_PARA

typealias PCRYPT_KEY_SIGN_MESSAGE_PARAVar = CPointerVarOf<PCRYPT_KEY_SIGN_MESSAGE_PARA>
typealias PCRYPT_KEY_SIGN_MESSAGE_PARA = CPointer<_CRYPT_KEY_SIGN_MESSAGE_PARA>

typealias CRYPT_KEY_VERIFY_MESSAGE_PARA = _CRYPT_KEY_VERIFY_MESSAGE_PARA

typealias PCRYPT_KEY_VERIFY_MESSAGE_PARAVar = CPointerVarOf<PCRYPT_KEY_VERIFY_MESSAGE_PARA>
typealias PCRYPT_KEY_VERIFY_MESSAGE_PARA = CPointer<_CRYPT_KEY_VERIFY_MESSAGE_PARA>

typealias CERT_CHAIN = _CERT_CHAIN

typealias PCERT_CHAINVar = CPointerVarOf<PCERT_CHAIN>
typealias PCERT_CHAIN = CPointer<_CERT_CHAIN>

typealias HCRYPTASYNCVar = CPointerVarOf<HCRYPTASYNC>
typealias HCRYPTASYNC = HANDLE

typealias PHCRYPTASYNCVar = CPointerVarOf<PHCRYPTASYNC>
typealias PHCRYPTASYNC = CPointer<HANDLEVar>

typealias PFN_CRYPT_ASYNC_PARAM_FREE_FUNCVar = CPointerVarOf<PFN_CRYPT_ASYNC_PARAM_FREE_FUNC>
typealias PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = CPointer<CFunction<(LPSTR?, LPVOID?) -> Unit>>

typealias CRYPT_BLOB_ARRAY = _CRYPT_BLOB_ARRAY

typealias PCRYPT_BLOB_ARRAYVar = CPointerVarOf<PCRYPT_BLOB_ARRAY>
typealias PCRYPT_BLOB_ARRAY = CPointer<_CRYPT_BLOB_ARRAY>

typealias CRYPT_CREDENTIALS = _CRYPT_CREDENTIALS

typealias PCRYPT_CREDENTIALSVar = CPointerVarOf<PCRYPT_CREDENTIALS>
typealias PCRYPT_CREDENTIALS = CPointer<_CRYPT_CREDENTIALS>

typealias CRYPT_PASSWORD_CREDENTIALSA = _CRYPT_PASSWORD_CREDENTIALSA

typealias PCRYPT_PASSWORD_CREDENTIALSAVar = CPointerVarOf<PCRYPT_PASSWORD_CREDENTIALSA>
typealias PCRYPT_PASSWORD_CREDENTIALSA = CPointer<_CRYPT_PASSWORD_CREDENTIALSA>

typealias CRYPT_PASSWORD_CREDENTIALSW = _CRYPT_PASSWORD_CREDENTIALSW

typealias PCRYPT_PASSWORD_CREDENTIALSWVar = CPointerVarOf<PCRYPT_PASSWORD_CREDENTIALSW>
typealias PCRYPT_PASSWORD_CREDENTIALSW = CPointer<_CRYPT_PASSWORD_CREDENTIALSW>

typealias CRYPT_PASSWORD_CREDENTIALS = CRYPT_PASSWORD_CREDENTIALSW

typealias PCRYPT_PASSWORD_CREDENTIALSVar = CPointerVarOf<PCRYPT_PASSWORD_CREDENTIALS>
typealias PCRYPT_PASSWORD_CREDENTIALS = PCRYPT_PASSWORD_CREDENTIALSW

typealias PFN_FREE_ENCODED_OBJECT_FUNCVar = CPointerVarOf<PFN_FREE_ENCODED_OBJECT_FUNC>
typealias PFN_FREE_ENCODED_OBJECT_FUNC = CPointer<CFunction<(LPCSTR?, PCRYPT_BLOB_ARRAY?, LPVOID?) -> Unit>>

typealias CRYPTNET_URL_CACHE_PRE_FETCH_INFO = _CRYPTNET_URL_CACHE_PRE_FETCH_INFO

typealias PCRYPTNET_URL_CACHE_PRE_FETCH_INFOVar = CPointerVarOf<PCRYPTNET_URL_CACHE_PRE_FETCH_INFO>
typealias PCRYPTNET_URL_CACHE_PRE_FETCH_INFO = CPointer<_CRYPTNET_URL_CACHE_PRE_FETCH_INFO>

typealias CRYPTNET_URL_CACHE_FLUSH_INFO = _CRYPTNET_URL_CACHE_FLUSH_INFO

typealias PCRYPTNET_URL_CACHE_FLUSH_INFOVar = CPointerVarOf<PCRYPTNET_URL_CACHE_FLUSH_INFO>
typealias PCRYPTNET_URL_CACHE_FLUSH_INFO = CPointer<_CRYPTNET_URL_CACHE_FLUSH_INFO>

typealias CRYPTNET_URL_CACHE_RESPONSE_INFO = _CRYPTNET_URL_CACHE_RESPONSE_INFO

typealias PCRYPTNET_URL_CACHE_RESPONSE_INFOVar = CPointerVarOf<PCRYPTNET_URL_CACHE_RESPONSE_INFO>
typealias PCRYPTNET_URL_CACHE_RESPONSE_INFO = CPointer<_CRYPTNET_URL_CACHE_RESPONSE_INFO>

typealias CRYPT_RETRIEVE_AUX_INFO = _CRYPT_RETRIEVE_AUX_INFO

typealias PCRYPT_RETRIEVE_AUX_INFOVar = CPointerVarOf<PCRYPT_RETRIEVE_AUX_INFO>
typealias PCRYPT_RETRIEVE_AUX_INFO = CPointer<_CRYPT_RETRIEVE_AUX_INFO>

typealias PFN_CRYPT_CANCEL_RETRIEVALVar = CPointerVarOf<PFN_CRYPT_CANCEL_RETRIEVAL>
typealias PFN_CRYPT_CANCEL_RETRIEVAL = CPointer<CFunction<(DWORD, COpaquePointer?) -> WINBOOL>>

typealias PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNCVar = CPointerVarOf<PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC>
typealias PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = CPointer<CFunction<(LPVOID?, DWORD, LPCSTR?, LPSTR?, LPVOID?) -> Unit>>

typealias CRYPT_ASYNC_RETRIEVAL_COMPLETION = _CRYPT_ASYNC_RETRIEVAL_COMPLETION

typealias PCRYPT_ASYNC_RETRIEVAL_COMPLETIONVar = CPointerVarOf<PCRYPT_ASYNC_RETRIEVAL_COMPLETION>
typealias PCRYPT_ASYNC_RETRIEVAL_COMPLETION = CPointer<_CRYPT_ASYNC_RETRIEVAL_COMPLETION>

typealias PFN_CANCEL_ASYNC_RETRIEVAL_FUNCVar = CPointerVarOf<PFN_CANCEL_ASYNC_RETRIEVAL_FUNC>
typealias PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = CPointer<CFunction<(HCRYPTASYNC?) -> WINBOOL>>

typealias CRYPT_URL_ARRAY = _CRYPT_URL_ARRAY

typealias PCRYPT_URL_ARRAYVar = CPointerVarOf<PCRYPT_URL_ARRAY>
typealias PCRYPT_URL_ARRAY = CPointer<_CRYPT_URL_ARRAY>

typealias CRYPT_URL_INFO = _CRYPT_URL_INFO

typealias PCRYPT_URL_INFOVar = CPointerVarOf<PCRYPT_URL_INFO>
typealias PCRYPT_URL_INFO = CPointer<_CRYPT_URL_INFO>

typealias CERT_CRL_CONTEXT_PAIR = _CERT_CRL_CONTEXT_PAIR

typealias PCERT_CRL_CONTEXT_PAIRVar = CPointerVarOf<PCERT_CRL_CONTEXT_PAIR>
typealias PCERT_CRL_CONTEXT_PAIR = CPointer<_CERT_CRL_CONTEXT_PAIR>

typealias PCCERT_CRL_CONTEXT_PAIRVar = CPointerVarOf<PCCERT_CRL_CONTEXT_PAIR>
typealias PCCERT_CRL_CONTEXT_PAIR = CPointer<CERT_CRL_CONTEXT_PAIR>

typealias CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO

typealias PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFOVar = CPointerVarOf<PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO>
typealias PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = CPointer<_CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO>

typealias PFN_CRYPT_ENUM_KEYID_PROPVar = CPointerVarOf<PFN_CRYPT_ENUM_KEYID_PROP>
typealias PFN_CRYPT_ENUM_KEYID_PROP = CPointer<CFunction<(CPointer<CRYPT_HASH_BLOB>?, DWORD, COpaquePointer?, COpaquePointer?, DWORD, CPointer<DWORDVar>?, CPointer<COpaquePointerVar>?, CPointer<DWORDVar>?) -> WINBOOL>>

typealias PSYSTEMTIMEVar = CPointerVarOf<PSYSTEMTIME>
typealias PSYSTEMTIME = CPointer<_SYSTEMTIME>

typealias CERT_CHAIN_ENGINE_CONFIG = _CERT_CHAIN_ENGINE_CONFIG

typealias PCERT_CHAIN_ENGINE_CONFIGVar = CPointerVarOf<PCERT_CHAIN_ENGINE_CONFIG>
typealias PCERT_CHAIN_ENGINE_CONFIG = CPointer<_CERT_CHAIN_ENGINE_CONFIG>

typealias CERT_TRUST_STATUS = _CERT_TRUST_STATUS

typealias PCERT_TRUST_STATUSVar = CPointerVarOf<PCERT_TRUST_STATUS>
typealias PCERT_TRUST_STATUS = CPointer<_CERT_TRUST_STATUS>

typealias CERT_REVOCATION_INFO = _CERT_REVOCATION_INFO

typealias PCERT_REVOCATION_INFOVar = CPointerVarOf<PCERT_REVOCATION_INFO>
typealias PCERT_REVOCATION_INFO = CPointer<_CERT_REVOCATION_INFO>

typealias CERT_TRUST_LIST_INFO = _CERT_TRUST_LIST_INFO

typealias PCERT_TRUST_LIST_INFOVar = CPointerVarOf<PCERT_TRUST_LIST_INFO>
typealias PCERT_TRUST_LIST_INFO = CPointer<_CERT_TRUST_LIST_INFO>

typealias CERT_CHAIN_ELEMENT = _CERT_CHAIN_ELEMENT

typealias PCERT_CHAIN_ELEMENTVar = CPointerVarOf<PCERT_CHAIN_ELEMENT>
typealias PCERT_CHAIN_ELEMENT = CPointer<_CERT_CHAIN_ELEMENT>

typealias PCCERT_CHAIN_ELEMENTVar = CPointerVarOf<PCCERT_CHAIN_ELEMENT>
typealias PCCERT_CHAIN_ELEMENT = CPointer<CERT_CHAIN_ELEMENT>

typealias CERT_SIMPLE_CHAIN = _CERT_SIMPLE_CHAIN

typealias PCERT_SIMPLE_CHAINVar = CPointerVarOf<PCERT_SIMPLE_CHAIN>
typealias PCERT_SIMPLE_CHAIN = CPointer<_CERT_SIMPLE_CHAIN>

typealias PCCERT_SIMPLE_CHAINVar = CPointerVarOf<PCCERT_SIMPLE_CHAIN>
typealias PCCERT_SIMPLE_CHAIN = CPointer<CERT_SIMPLE_CHAIN>

typealias CERT_CHAIN_CONTEXT = _CERT_CHAIN_CONTEXT

typealias PCCERT_CHAIN_CONTEXTVar = CPointerVarOf<PCCERT_CHAIN_CONTEXT>
typealias PCCERT_CHAIN_CONTEXT = CPointer<CERT_CHAIN_CONTEXT>

typealias PCERT_CHAIN_CONTEXTVar = CPointerVarOf<PCERT_CHAIN_CONTEXT>
typealias PCERT_CHAIN_CONTEXT = CPointer<_CERT_CHAIN_CONTEXT>

typealias CERT_USAGE_MATCH = _CERT_USAGE_MATCH

typealias PCERT_USAGE_MATCHVar = CPointerVarOf<PCERT_USAGE_MATCH>
typealias PCERT_USAGE_MATCH = CPointer<_CERT_USAGE_MATCH>

typealias CTL_USAGE_MATCH = _CTL_USAGE_MATCH

typealias PCTL_USAGE_MATCHVar = CPointerVarOf<PCTL_USAGE_MATCH>
typealias PCTL_USAGE_MATCH = CPointer<_CTL_USAGE_MATCH>

typealias CERT_CHAIN_PARA = _CERT_CHAIN_PARA

typealias PCERT_CHAIN_PARAVar = CPointerVarOf<PCERT_CHAIN_PARA>
typealias PCERT_CHAIN_PARA = CPointer<_CERT_CHAIN_PARA>

typealias CRL_REVOCATION_INFO = _CRL_REVOCATION_INFO

typealias PCRL_REVOCATION_INFOVar = CPointerVarOf<PCRL_REVOCATION_INFO>
typealias PCRL_REVOCATION_INFO = CPointer<_CRL_REVOCATION_INFO>

typealias PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACKVar = CPointerVarOf<PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK>
typealias PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = CPointer<CFunction<(PCCERT_CONTEXT?, COpaquePointer?) -> WINBOOL>>

typealias CERT_CHAIN_FIND_ISSUER_PARA = _CERT_CHAIN_FIND_BY_ISSUER_PARA

typealias PCERT_CHAIN_FIND_ISSUER_PARAVar = CPointerVarOf<PCERT_CHAIN_FIND_ISSUER_PARA>
typealias PCERT_CHAIN_FIND_ISSUER_PARA = CPointer<_CERT_CHAIN_FIND_BY_ISSUER_PARA>

typealias CERT_CHAIN_FIND_BY_ISSUER_PARA = _CERT_CHAIN_FIND_BY_ISSUER_PARA

typealias PCERT_CHAIN_FIND_BY_ISSUER_PARAVar = CPointerVarOf<PCERT_CHAIN_FIND_BY_ISSUER_PARA>
typealias PCERT_CHAIN_FIND_BY_ISSUER_PARA = CPointer<_CERT_CHAIN_FIND_BY_ISSUER_PARA>

typealias CERT_CHAIN_POLICY_PARA = _CERT_CHAIN_POLICY_PARA

typealias PCERT_CHAIN_POLICY_PARAVar = CPointerVarOf<PCERT_CHAIN_POLICY_PARA>
typealias PCERT_CHAIN_POLICY_PARA = CPointer<_CERT_CHAIN_POLICY_PARA>

typealias CERT_CHAIN_POLICY_STATUS = _CERT_CHAIN_POLICY_STATUS

typealias PCERT_CHAIN_POLICY_STATUSVar = CPointerVarOf<PCERT_CHAIN_POLICY_STATUS>
typealias PCERT_CHAIN_POLICY_STATUS = CPointer<_CERT_CHAIN_POLICY_STATUS>

typealias AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA

typealias PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARAVar = CPointerVarOf<PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA>
typealias PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = CPointer<_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA>

typealias AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS

typealias PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUSVar = CPointerVarOf<PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS>
typealias PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = CPointer<_AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS>

typealias AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA

typealias PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARAVar = CPointerVarOf<PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA>
typealias PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = CPointer<_AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA>

typealias HTTPSPolicyCallbackData = _HTTPSPolicyCallbackData

typealias PHTTPSPolicyCallbackDataVar = CPointerVarOf<PHTTPSPolicyCallbackData>
typealias PHTTPSPolicyCallbackData = CPointer<_HTTPSPolicyCallbackData>

typealias SSL_EXTRA_CERT_CHAIN_POLICY_PARA = _HTTPSPolicyCallbackData

typealias PSSL_EXTRA_CERT_CHAIN_POLICY_PARAVar = CPointerVarOf<PSSL_EXTRA_CERT_CHAIN_POLICY_PARA>
typealias PSSL_EXTRA_CERT_CHAIN_POLICY_PARA = CPointer<_HTTPSPolicyCallbackData>

typealias EV_EXTRA_CERT_CHAIN_POLICY_PARA = _EV_EXTRA_CERT_CHAIN_POLICY_PARA

typealias PEV_EXTRA_CERT_CHAIN_POLICY_PARAVar = CPointerVarOf<PEV_EXTRA_CERT_CHAIN_POLICY_PARA>
typealias PEV_EXTRA_CERT_CHAIN_POLICY_PARA = CPointer<_EV_EXTRA_CERT_CHAIN_POLICY_PARA>

typealias EV_EXTRA_CERT_CHAIN_POLICY_STATUS = _EV_EXTRA_CERT_CHAIN_POLICY_STATUS

typealias PEV_EXTRA_CERT_CHAIN_POLICY_STATUSVar = CPointerVarOf<PEV_EXTRA_CERT_CHAIN_POLICY_STATUS>
typealias PEV_EXTRA_CERT_CHAIN_POLICY_STATUS = CPointer<_EV_EXTRA_CERT_CHAIN_POLICY_STATUS>

typealias CRYPT_PKCS12_PBE_PARAMS = _CRYPT_PKCS12_PBE_PARAMS

typealias EFS_CERTIFICATE_BLOB = _CERTIFICATE_BLOB

typealias PEFS_CERTIFICATE_BLOBVar = CPointerVarOf<PEFS_CERTIFICATE_BLOB>
typealias PEFS_CERTIFICATE_BLOB = CPointer<_CERTIFICATE_BLOB>

typealias EFS_HASH_BLOB = _EFS_HASH_BLOB

typealias PEFS_HASH_BLOBVar = CPointerVarOf<PEFS_HASH_BLOB>
typealias PEFS_HASH_BLOB = CPointer<_EFS_HASH_BLOB>

typealias EFS_RPC_BLOB = _EFS_RPC_BLOB

typealias PEFS_RPC_BLOBVar = CPointerVarOf<PEFS_RPC_BLOB>
typealias PEFS_RPC_BLOB = CPointer<_EFS_RPC_BLOB>

typealias EFS_KEY_INFO = _EFS_KEY_INFO

typealias PEFS_KEY_INFOVar = CPointerVarOf<PEFS_KEY_INFO>
typealias PEFS_KEY_INFO = CPointer<_EFS_KEY_INFO>

typealias ENCRYPTION_CERTIFICATE = _ENCRYPTION_CERTIFICATE

typealias PENCRYPTION_CERTIFICATEVar = CPointerVarOf<PENCRYPTION_CERTIFICATE>
typealias PENCRYPTION_CERTIFICATE = CPointer<_ENCRYPTION_CERTIFICATE>

typealias ENCRYPTION_CERTIFICATE_HASH = _ENCRYPTION_CERTIFICATE_HASH

typealias PENCRYPTION_CERTIFICATE_HASHVar = CPointerVarOf<PENCRYPTION_CERTIFICATE_HASH>
typealias PENCRYPTION_CERTIFICATE_HASH = CPointer<_ENCRYPTION_CERTIFICATE_HASH>

typealias ENCRYPTION_CERTIFICATE_HASH_LIST = _ENCRYPTION_CERTIFICATE_HASH_LIST

typealias PENCRYPTION_CERTIFICATE_HASH_LISTVar = CPointerVarOf<PENCRYPTION_CERTIFICATE_HASH_LIST>
typealias PENCRYPTION_CERTIFICATE_HASH_LIST = CPointer<_ENCRYPTION_CERTIFICATE_HASH_LIST>

typealias ENCRYPTION_CERTIFICATE_LIST = _ENCRYPTION_CERTIFICATE_LIST

typealias PENCRYPTION_CERTIFICATE_LISTVar = CPointerVarOf<PENCRYPTION_CERTIFICATE_LIST>
typealias PENCRYPTION_CERTIFICATE_LIST = CPointer<_ENCRYPTION_CERTIFICATE_LIST>

typealias STORAGE_READ_CAPACITY = _STORAGE_READ_CAPACITY

typealias PSTORAGE_READ_CAPACITYVar = CPointerVarOf<PSTORAGE_READ_CAPACITY>
typealias PSTORAGE_READ_CAPACITY = CPointer<_STORAGE_READ_CAPACITY>

typealias booleanVar = ByteVarOf<boolean>
typealias boolean = Byte

typealias STORAGE_HOTPLUG_INFO = _STORAGE_HOTPLUG_INFO

typealias PSTORAGE_HOTPLUG_INFOVar = CPointerVarOf<PSTORAGE_HOTPLUG_INFO>
typealias PSTORAGE_HOTPLUG_INFO = CPointer<_STORAGE_HOTPLUG_INFO>

typealias STORAGE_DEVICE_NUMBER = _STORAGE_DEVICE_NUMBER

typealias PSTORAGE_DEVICE_NUMBERVar = CPointerVarOf<PSTORAGE_DEVICE_NUMBER>
typealias PSTORAGE_DEVICE_NUMBER = CPointer<_STORAGE_DEVICE_NUMBER>

typealias STORAGE_BUS_RESET_REQUEST = _STORAGE_BUS_RESET_REQUEST

typealias PSTORAGE_BUS_RESET_REQUESTVar = CPointerVarOf<PSTORAGE_BUS_RESET_REQUEST>
typealias PSTORAGE_BUS_RESET_REQUEST = CPointer<_STORAGE_BUS_RESET_REQUEST>

typealias PSTORAGE_BREAK_RESERVATION_REQUESTVar = CPointerVarOf<PSTORAGE_BREAK_RESERVATION_REQUEST>
typealias PSTORAGE_BREAK_RESERVATION_REQUEST = CPointer<STORAGE_BREAK_RESERVATION_REQUEST>

typealias PREVENT_MEDIA_REMOVAL = _PREVENT_MEDIA_REMOVAL

typealias PPREVENT_MEDIA_REMOVALVar = CPointerVarOf<PPREVENT_MEDIA_REMOVAL>
typealias PPREVENT_MEDIA_REMOVAL = CPointer<_PREVENT_MEDIA_REMOVAL>

typealias CLASS_MEDIA_CHANGE_CONTEXT = _CLASS_MEDIA_CHANGE_CONTEXT

typealias PCLASS_MEDIA_CHANGE_CONTEXTVar = CPointerVarOf<PCLASS_MEDIA_CHANGE_CONTEXT>
typealias PCLASS_MEDIA_CHANGE_CONTEXT = CPointer<_CLASS_MEDIA_CHANGE_CONTEXT>

typealias TAPE_STATISTICS = _TAPE_STATISTICS

typealias PTAPE_STATISTICSVar = CPointerVarOf<PTAPE_STATISTICS>
typealias PTAPE_STATISTICS = CPointer<_TAPE_STATISTICS>

typealias TAPE_GET_STATISTICS = _TAPE_GET_STATISTICS

typealias PTAPE_GET_STATISTICSVar = CPointerVarOf<PTAPE_GET_STATISTICS>
typealias PTAPE_GET_STATISTICS = CPointer<_TAPE_GET_STATISTICS>

typealias STORAGE_MEDIA_TYPEVar = IntVarOf<STORAGE_MEDIA_TYPE>
typealias STORAGE_MEDIA_TYPE = _STORAGE_MEDIA_TYPE

typealias PSTORAGE_MEDIA_TYPEVar = CPointerVarOf<PSTORAGE_MEDIA_TYPE>
typealias PSTORAGE_MEDIA_TYPE = CPointer<_STORAGE_MEDIA_TYPEVar>

typealias STORAGE_BUS_TYPEVar = IntVarOf<STORAGE_BUS_TYPE>
typealias STORAGE_BUS_TYPE = _STORAGE_BUS_TYPE

typealias PSTORAGE_BUS_TYPEVar = CPointerVarOf<PSTORAGE_BUS_TYPE>
typealias PSTORAGE_BUS_TYPE = CPointer<_STORAGE_BUS_TYPEVar>

typealias DEVICE_MEDIA_INFO = _DEVICE_MEDIA_INFO

typealias PDEVICE_MEDIA_INFOVar = CPointerVarOf<PDEVICE_MEDIA_INFO>
typealias PDEVICE_MEDIA_INFO = CPointer<_DEVICE_MEDIA_INFO>

typealias GET_MEDIA_TYPES = _GET_MEDIA_TYPES

typealias PGET_MEDIA_TYPESVar = CPointerVarOf<PGET_MEDIA_TYPES>
typealias PGET_MEDIA_TYPES = CPointer<_GET_MEDIA_TYPES>

typealias STORAGE_PREDICT_FAILURE = _STORAGE_PREDICT_FAILURE

typealias PSTORAGE_PREDICT_FAILUREVar = CPointerVarOf<PSTORAGE_PREDICT_FAILURE>
typealias PSTORAGE_PREDICT_FAILURE = CPointer<_STORAGE_PREDICT_FAILURE>

typealias MEDIA_TYPEVar = _MEDIA_TYPE.Var
typealias MEDIA_TYPE = _MEDIA_TYPE

typealias PMEDIA_TYPEVar = CPointerVarOf<PMEDIA_TYPE>
typealias PMEDIA_TYPE = CPointer<_MEDIA_TYPE.Var>

typealias FORMAT_PARAMETERS = _FORMAT_PARAMETERS

typealias PFORMAT_PARAMETERSVar = CPointerVarOf<PFORMAT_PARAMETERS>
typealias PFORMAT_PARAMETERS = CPointer<_FORMAT_PARAMETERS>

typealias BAD_TRACK_NUMBERVar = ShortVarOf<BAD_TRACK_NUMBER>
typealias BAD_TRACK_NUMBER = WORD

typealias PBAD_TRACK_NUMBERVar = CPointerVarOf<PBAD_TRACK_NUMBER>
typealias PBAD_TRACK_NUMBER = CPointer<WORDVar>

typealias FORMAT_EX_PARAMETERS = _FORMAT_EX_PARAMETERS

typealias PFORMAT_EX_PARAMETERSVar = CPointerVarOf<PFORMAT_EX_PARAMETERS>
typealias PFORMAT_EX_PARAMETERS = CPointer<_FORMAT_EX_PARAMETERS>

typealias DISK_GEOMETRY = _DISK_GEOMETRY

typealias PDISK_GEOMETRYVar = CPointerVarOf<PDISK_GEOMETRY>
typealias PDISK_GEOMETRY = CPointer<_DISK_GEOMETRY>

typealias PARTITION_INFORMATION = _PARTITION_INFORMATION

typealias PPARTITION_INFORMATIONVar = CPointerVarOf<PPARTITION_INFORMATION>
typealias PPARTITION_INFORMATION = CPointer<_PARTITION_INFORMATION>

typealias SET_PARTITION_INFORMATION = _SET_PARTITION_INFORMATION

typealias PSET_PARTITION_INFORMATIONVar = CPointerVarOf<PSET_PARTITION_INFORMATION>
typealias PSET_PARTITION_INFORMATION = CPointer<_SET_PARTITION_INFORMATION>

typealias DRIVE_LAYOUT_INFORMATION = _DRIVE_LAYOUT_INFORMATION

typealias PDRIVE_LAYOUT_INFORMATIONVar = CPointerVarOf<PDRIVE_LAYOUT_INFORMATION>
typealias PDRIVE_LAYOUT_INFORMATION = CPointer<_DRIVE_LAYOUT_INFORMATION>

typealias VERIFY_INFORMATION = _VERIFY_INFORMATION

typealias PVERIFY_INFORMATIONVar = CPointerVarOf<PVERIFY_INFORMATION>
typealias PVERIFY_INFORMATION = CPointer<_VERIFY_INFORMATION>

typealias REASSIGN_BLOCKS = _REASSIGN_BLOCKS

typealias PREASSIGN_BLOCKSVar = CPointerVarOf<PREASSIGN_BLOCKS>
typealias PREASSIGN_BLOCKS = CPointer<_REASSIGN_BLOCKS>

typealias REASSIGN_BLOCKS_EX = _REASSIGN_BLOCKS_EX

typealias PREASSIGN_BLOCKS_EXVar = CPointerVarOf<PREASSIGN_BLOCKS_EX>
typealias PREASSIGN_BLOCKS_EX = CPointer<_REASSIGN_BLOCKS_EX>

typealias PARTITION_STYLEVar = _PARTITION_STYLE.Var
typealias PARTITION_STYLE = _PARTITION_STYLE

typealias PARTITION_INFORMATION_GPT = _PARTITION_INFORMATION_GPT

typealias PPARTITION_INFORMATION_GPTVar = CPointerVarOf<PPARTITION_INFORMATION_GPT>
typealias PPARTITION_INFORMATION_GPT = CPointer<_PARTITION_INFORMATION_GPT>

typealias PARTITION_INFORMATION_MBR = _PARTITION_INFORMATION_MBR

typealias PPARTITION_INFORMATION_MBRVar = CPointerVarOf<PPARTITION_INFORMATION_MBR>
typealias PPARTITION_INFORMATION_MBR = CPointer<_PARTITION_INFORMATION_MBR>

typealias SET_PARTITION_INFORMATION_MBR = SET_PARTITION_INFORMATION

typealias SET_PARTITION_INFORMATION_GPT = PARTITION_INFORMATION_GPT

typealias SET_PARTITION_INFORMATION_EX = _SET_PARTITION_INFORMATION_EX

typealias PSET_PARTITION_INFORMATION_EXVar = CPointerVarOf<PSET_PARTITION_INFORMATION_EX>
typealias PSET_PARTITION_INFORMATION_EX = CPointer<_SET_PARTITION_INFORMATION_EX>

typealias CREATE_DISK_GPT = _CREATE_DISK_GPT

typealias PCREATE_DISK_GPTVar = CPointerVarOf<PCREATE_DISK_GPT>
typealias PCREATE_DISK_GPT = CPointer<_CREATE_DISK_GPT>

typealias CREATE_DISK_MBR = _CREATE_DISK_MBR

typealias PCREATE_DISK_MBRVar = CPointerVarOf<PCREATE_DISK_MBR>
typealias PCREATE_DISK_MBR = CPointer<_CREATE_DISK_MBR>

typealias CREATE_DISK = _CREATE_DISK

typealias PCREATE_DISKVar = CPointerVarOf<PCREATE_DISK>
typealias PCREATE_DISK = CPointer<_CREATE_DISK>

typealias GET_LENGTH_INFORMATION = _GET_LENGTH_INFORMATION

typealias PGET_LENGTH_INFORMATIONVar = CPointerVarOf<PGET_LENGTH_INFORMATION>
typealias PGET_LENGTH_INFORMATION = CPointer<_GET_LENGTH_INFORMATION>

typealias PARTITION_INFORMATION_EX = _PARTITION_INFORMATION_EX

typealias PPARTITION_INFORMATION_EXVar = CPointerVarOf<PPARTITION_INFORMATION_EX>
typealias PPARTITION_INFORMATION_EX = CPointer<_PARTITION_INFORMATION_EX>

typealias DRIVE_LAYOUT_INFORMATION_GPT = _DRIVE_LAYOUT_INFORMATION_GPT

typealias PDRIVE_LAYOUT_INFORMATION_GPTVar = CPointerVarOf<PDRIVE_LAYOUT_INFORMATION_GPT>
typealias PDRIVE_LAYOUT_INFORMATION_GPT = CPointer<_DRIVE_LAYOUT_INFORMATION_GPT>

typealias DRIVE_LAYOUT_INFORMATION_MBR = _DRIVE_LAYOUT_INFORMATION_MBR

typealias PDRIVE_LAYOUT_INFORMATION_MBRVar = CPointerVarOf<PDRIVE_LAYOUT_INFORMATION_MBR>
typealias PDRIVE_LAYOUT_INFORMATION_MBR = CPointer<_DRIVE_LAYOUT_INFORMATION_MBR>

typealias DRIVE_LAYOUT_INFORMATION_EX = _DRIVE_LAYOUT_INFORMATION_EX

typealias PDRIVE_LAYOUT_INFORMATION_EXVar = CPointerVarOf<PDRIVE_LAYOUT_INFORMATION_EX>
typealias PDRIVE_LAYOUT_INFORMATION_EX = CPointer<_DRIVE_LAYOUT_INFORMATION_EX>

typealias DETECTION_TYPEVar = _DETECTION_TYPE.Var
typealias DETECTION_TYPE = _DETECTION_TYPE

typealias DISK_INT13_INFO = _DISK_INT13_INFO

typealias PDISK_INT13_INFOVar = CPointerVarOf<PDISK_INT13_INFO>
typealias PDISK_INT13_INFO = CPointer<_DISK_INT13_INFO>

typealias DISK_EX_INT13_INFO = _DISK_EX_INT13_INFO

typealias PDISK_EX_INT13_INFOVar = CPointerVarOf<PDISK_EX_INT13_INFO>
typealias PDISK_EX_INT13_INFO = CPointer<_DISK_EX_INT13_INFO>

typealias DISK_DETECTION_INFO = _DISK_DETECTION_INFO

typealias PDISK_DETECTION_INFOVar = CPointerVarOf<PDISK_DETECTION_INFO>
typealias PDISK_DETECTION_INFO = CPointer<_DISK_DETECTION_INFO>

typealias DISK_PARTITION_INFO = _DISK_PARTITION_INFO

typealias PDISK_PARTITION_INFOVar = CPointerVarOf<PDISK_PARTITION_INFO>
typealias PDISK_PARTITION_INFO = CPointer<_DISK_PARTITION_INFO>

typealias DISK_GEOMETRY_EX = _DISK_GEOMETRY_EX

typealias PDISK_GEOMETRY_EXVar = CPointerVarOf<PDISK_GEOMETRY_EX>
typealias PDISK_GEOMETRY_EX = CPointer<_DISK_GEOMETRY_EX>

typealias DISK_CONTROLLER_NUMBER = _DISK_CONTROLLER_NUMBER

typealias PDISK_CONTROLLER_NUMBERVar = CPointerVarOf<PDISK_CONTROLLER_NUMBER>
typealias PDISK_CONTROLLER_NUMBER = CPointer<_DISK_CONTROLLER_NUMBER>

typealias DISK_CACHE_INFORMATION = _DISK_CACHE_INFORMATION

typealias PDISK_CACHE_INFORMATIONVar = CPointerVarOf<PDISK_CACHE_INFORMATION>
typealias PDISK_CACHE_INFORMATION = CPointer<_DISK_CACHE_INFORMATION>

typealias DISK_GROW_PARTITION = _DISK_GROW_PARTITION

typealias PDISK_GROW_PARTITIONVar = CPointerVarOf<PDISK_GROW_PARTITION>
typealias PDISK_GROW_PARTITION = CPointer<_DISK_GROW_PARTITION>

typealias HISTOGRAM_BUCKET = _HISTOGRAM_BUCKET

typealias PHISTOGRAM_BUCKETVar = CPointerVarOf<PHISTOGRAM_BUCKET>
typealias PHISTOGRAM_BUCKET = CPointer<_HISTOGRAM_BUCKET>

typealias DISK_HISTOGRAM = _DISK_HISTOGRAM

typealias PDISK_HISTOGRAMVar = CPointerVarOf<PDISK_HISTOGRAM>
typealias PDISK_HISTOGRAM = CPointer<_DISK_HISTOGRAM>

typealias DISK_PERFORMANCE = _DISK_PERFORMANCE

typealias PDISK_PERFORMANCEVar = CPointerVarOf<PDISK_PERFORMANCE>
typealias PDISK_PERFORMANCE = CPointer<_DISK_PERFORMANCE>

typealias DISK_RECORD = _DISK_RECORD

typealias PDISK_RECORDVar = CPointerVarOf<PDISK_RECORD>
typealias PDISK_RECORD = CPointer<_DISK_RECORD>

typealias DISK_LOGGING = _DISK_LOGGING

typealias PDISK_LOGGINGVar = CPointerVarOf<PDISK_LOGGING>
typealias PDISK_LOGGING = CPointer<_DISK_LOGGING>

typealias BIN_TYPESVar = _BIN_TYPES.Var
typealias BIN_TYPES = _BIN_TYPES

typealias BIN_RANGE = _BIN_RANGE

typealias PBIN_RANGEVar = CPointerVarOf<PBIN_RANGE>
typealias PBIN_RANGE = CPointer<_BIN_RANGE>

typealias PERF_BIN = _PERF_BIN

typealias PPERF_BINVar = CPointerVarOf<PPERF_BIN>
typealias PPERF_BIN = CPointer<_PERF_BIN>

typealias BIN_COUNT = _BIN_COUNT

typealias PBIN_COUNTVar = CPointerVarOf<PBIN_COUNT>
typealias PBIN_COUNT = CPointer<_BIN_COUNT>

typealias BIN_RESULTS = _BIN_RESULTS

typealias PBIN_RESULTSVar = CPointerVarOf<PBIN_RESULTS>
typealias PBIN_RESULTS = CPointer<_BIN_RESULTS>

typealias GETVERSIONINPARAMS = _GETVERSIONINPARAMS

typealias PGETVERSIONINPARAMSVar = CPointerVarOf<PGETVERSIONINPARAMS>
typealias PGETVERSIONINPARAMS = CPointer<_GETVERSIONINPARAMS>

typealias LPGETVERSIONINPARAMSVar = CPointerVarOf<LPGETVERSIONINPARAMS>
typealias LPGETVERSIONINPARAMS = CPointer<_GETVERSIONINPARAMS>

typealias IDEREGS = _IDEREGS

typealias PIDEREGSVar = CPointerVarOf<PIDEREGS>
typealias PIDEREGS = CPointer<_IDEREGS>

typealias LPIDEREGSVar = CPointerVarOf<LPIDEREGS>
typealias LPIDEREGS = CPointer<_IDEREGS>

typealias SENDCMDINPARAMS = _SENDCMDINPARAMS

typealias PSENDCMDINPARAMSVar = CPointerVarOf<PSENDCMDINPARAMS>
typealias PSENDCMDINPARAMS = CPointer<_SENDCMDINPARAMS>

typealias LPSENDCMDINPARAMSVar = CPointerVarOf<LPSENDCMDINPARAMS>
typealias LPSENDCMDINPARAMS = CPointer<_SENDCMDINPARAMS>

typealias DRIVERSTATUS = _DRIVERSTATUS

typealias PDRIVERSTATUSVar = CPointerVarOf<PDRIVERSTATUS>
typealias PDRIVERSTATUS = CPointer<_DRIVERSTATUS>

typealias LPDRIVERSTATUSVar = CPointerVarOf<LPDRIVERSTATUS>
typealias LPDRIVERSTATUS = CPointer<_DRIVERSTATUS>

typealias SENDCMDOUTPARAMS = _SENDCMDOUTPARAMS

typealias PSENDCMDOUTPARAMSVar = CPointerVarOf<PSENDCMDOUTPARAMS>
typealias PSENDCMDOUTPARAMS = CPointer<_SENDCMDOUTPARAMS>

typealias LPSENDCMDOUTPARAMSVar = CPointerVarOf<LPSENDCMDOUTPARAMS>
typealias LPSENDCMDOUTPARAMS = CPointer<_SENDCMDOUTPARAMS>

typealias ELEMENT_TYPEVar = _ELEMENT_TYPE.Var
typealias ELEMENT_TYPE = _ELEMENT_TYPE

typealias PELEMENT_TYPEVar = CPointerVarOf<PELEMENT_TYPE>
typealias PELEMENT_TYPE = CPointer<_ELEMENT_TYPE.Var>

typealias CHANGER_ELEMENT = _CHANGER_ELEMENT

typealias PCHANGER_ELEMENTVar = CPointerVarOf<PCHANGER_ELEMENT>
typealias PCHANGER_ELEMENT = CPointer<_CHANGER_ELEMENT>

typealias CHANGER_ELEMENT_LIST = _CHANGER_ELEMENT_LIST

typealias PCHANGER_ELEMENT_LISTVar = CPointerVarOf<PCHANGER_ELEMENT_LIST>
typealias PCHANGER_ELEMENT_LIST = CPointer<_CHANGER_ELEMENT_LIST>

typealias GET_CHANGER_PARAMETERS = _GET_CHANGER_PARAMETERS

typealias PGET_CHANGER_PARAMETERSVar = CPointerVarOf<PGET_CHANGER_PARAMETERS>
typealias PGET_CHANGER_PARAMETERS = CPointer<_GET_CHANGER_PARAMETERS>

typealias CHANGER_PRODUCT_DATA = _CHANGER_PRODUCT_DATA

typealias PCHANGER_PRODUCT_DATAVar = CPointerVarOf<PCHANGER_PRODUCT_DATA>
typealias PCHANGER_PRODUCT_DATA = CPointer<_CHANGER_PRODUCT_DATA>

typealias CHANGER_SET_ACCESS = _CHANGER_SET_ACCESS

typealias PCHANGER_SET_ACCESSVar = CPointerVarOf<PCHANGER_SET_ACCESS>
typealias PCHANGER_SET_ACCESS = CPointer<_CHANGER_SET_ACCESS>

typealias CHANGER_READ_ELEMENT_STATUS = _CHANGER_READ_ELEMENT_STATUS

typealias PCHANGER_READ_ELEMENT_STATUSVar = CPointerVarOf<PCHANGER_READ_ELEMENT_STATUS>
typealias PCHANGER_READ_ELEMENT_STATUS = CPointer<_CHANGER_READ_ELEMENT_STATUS>

typealias CHANGER_ELEMENT_STATUS = _CHANGER_ELEMENT_STATUS

typealias PCHANGER_ELEMENT_STATUSVar = CPointerVarOf<PCHANGER_ELEMENT_STATUS>
typealias PCHANGER_ELEMENT_STATUS = CPointer<_CHANGER_ELEMENT_STATUS>

typealias CHANGER_ELEMENT_STATUS_EX = _CHANGER_ELEMENT_STATUS_EX

typealias PCHANGER_ELEMENT_STATUS_EXVar = CPointerVarOf<PCHANGER_ELEMENT_STATUS_EX>
typealias PCHANGER_ELEMENT_STATUS_EX = CPointer<_CHANGER_ELEMENT_STATUS_EX>

typealias CHANGER_INITIALIZE_ELEMENT_STATUS = _CHANGER_INITIALIZE_ELEMENT_STATUS

typealias PCHANGER_INITIALIZE_ELEMENT_STATUSVar = CPointerVarOf<PCHANGER_INITIALIZE_ELEMENT_STATUS>
typealias PCHANGER_INITIALIZE_ELEMENT_STATUS = CPointer<_CHANGER_INITIALIZE_ELEMENT_STATUS>

typealias CHANGER_SET_POSITION = _CHANGER_SET_POSITION

typealias PCHANGER_SET_POSITIONVar = CPointerVarOf<PCHANGER_SET_POSITION>
typealias PCHANGER_SET_POSITION = CPointer<_CHANGER_SET_POSITION>

typealias CHANGER_EXCHANGE_MEDIUM = _CHANGER_EXCHANGE_MEDIUM

typealias PCHANGER_EXCHANGE_MEDIUMVar = CPointerVarOf<PCHANGER_EXCHANGE_MEDIUM>
typealias PCHANGER_EXCHANGE_MEDIUM = CPointer<_CHANGER_EXCHANGE_MEDIUM>

typealias CHANGER_MOVE_MEDIUM = _CHANGER_MOVE_MEDIUM

typealias PCHANGER_MOVE_MEDIUMVar = CPointerVarOf<PCHANGER_MOVE_MEDIUM>
typealias PCHANGER_MOVE_MEDIUM = CPointer<_CHANGER_MOVE_MEDIUM>

typealias CHANGER_SEND_VOLUME_TAG_INFORMATION = _CHANGER_SEND_VOLUME_TAG_INFORMATION

typealias PCHANGER_SEND_VOLUME_TAG_INFORMATIONVar = CPointerVarOf<PCHANGER_SEND_VOLUME_TAG_INFORMATION>
typealias PCHANGER_SEND_VOLUME_TAG_INFORMATION = CPointer<_CHANGER_SEND_VOLUME_TAG_INFORMATION>

typealias READ_ELEMENT_ADDRESS_INFO = _READ_ELEMENT_ADDRESS_INFO

typealias PREAD_ELEMENT_ADDRESS_INFOVar = CPointerVarOf<PREAD_ELEMENT_ADDRESS_INFO>
typealias PREAD_ELEMENT_ADDRESS_INFO = CPointer<_READ_ELEMENT_ADDRESS_INFO>

typealias CHANGER_DEVICE_PROBLEM_TYPEVar = _CHANGER_DEVICE_PROBLEM_TYPE.Var
typealias CHANGER_DEVICE_PROBLEM_TYPE = _CHANGER_DEVICE_PROBLEM_TYPE

typealias PCHANGER_DEVICE_PROBLEM_TYPEVar = CPointerVarOf<PCHANGER_DEVICE_PROBLEM_TYPE>
typealias PCHANGER_DEVICE_PROBLEM_TYPE = CPointer<_CHANGER_DEVICE_PROBLEM_TYPE.Var>

typealias PATHNAME_BUFFER = _PATHNAME_BUFFER

typealias PPATHNAME_BUFFERVar = CPointerVarOf<PPATHNAME_BUFFER>
typealias PPATHNAME_BUFFER = CPointer<_PATHNAME_BUFFER>

typealias FSCTL_QUERY_FAT_BPB_BUFFER = _FSCTL_QUERY_FAT_BPB_BUFFER

typealias PFSCTL_QUERY_FAT_BPB_BUFFERVar = CPointerVarOf<PFSCTL_QUERY_FAT_BPB_BUFFER>
typealias PFSCTL_QUERY_FAT_BPB_BUFFER = CPointer<_FSCTL_QUERY_FAT_BPB_BUFFER>

typealias PNTFS_VOLUME_DATA_BUFFERVar = CPointerVarOf<PNTFS_VOLUME_DATA_BUFFER>
typealias PNTFS_VOLUME_DATA_BUFFER = CPointer<NTFS_VOLUME_DATA_BUFFER>

typealias PNTFS_EXTENDED_VOLUME_DATAVar = CPointerVarOf<PNTFS_EXTENDED_VOLUME_DATA>
typealias PNTFS_EXTENDED_VOLUME_DATA = CPointer<NTFS_EXTENDED_VOLUME_DATA>

typealias PSTARTING_LCN_INPUT_BUFFERVar = CPointerVarOf<PSTARTING_LCN_INPUT_BUFFER>
typealias PSTARTING_LCN_INPUT_BUFFER = CPointer<STARTING_LCN_INPUT_BUFFER>

typealias PVOLUME_BITMAP_BUFFERVar = CPointerVarOf<PVOLUME_BITMAP_BUFFER>
typealias PVOLUME_BITMAP_BUFFER = CPointer<VOLUME_BITMAP_BUFFER>

typealias PSTARTING_VCN_INPUT_BUFFERVar = CPointerVarOf<PSTARTING_VCN_INPUT_BUFFER>
typealias PSTARTING_VCN_INPUT_BUFFER = CPointer<STARTING_VCN_INPUT_BUFFER>

typealias PRETRIEVAL_POINTERS_BUFFERVar = CPointerVarOf<PRETRIEVAL_POINTERS_BUFFER>
typealias PRETRIEVAL_POINTERS_BUFFER = CPointer<RETRIEVAL_POINTERS_BUFFER>

typealias PNTFS_FILE_RECORD_INPUT_BUFFERVar = CPointerVarOf<PNTFS_FILE_RECORD_INPUT_BUFFER>
typealias PNTFS_FILE_RECORD_INPUT_BUFFER = CPointer<NTFS_FILE_RECORD_INPUT_BUFFER>

typealias PNTFS_FILE_RECORD_OUTPUT_BUFFERVar = CPointerVarOf<PNTFS_FILE_RECORD_OUTPUT_BUFFER>
typealias PNTFS_FILE_RECORD_OUTPUT_BUFFER = CPointer<NTFS_FILE_RECORD_OUTPUT_BUFFER>

typealias PMOVE_FILE_DATAVar = CPointerVarOf<PMOVE_FILE_DATA>
typealias PMOVE_FILE_DATA = CPointer<MOVE_FILE_DATA>

typealias UINT32Var = IntVarOf<UINT32>
typealias UINT32 = Int

typealias MOVE_FILE_DATA32 = _MOVE_FILE_DATA32

typealias PMOVE_FILE_DATA32Var = CPointerVarOf<PMOVE_FILE_DATA32>
typealias PMOVE_FILE_DATA32 = CPointer<_MOVE_FILE_DATA32>

typealias PFIND_BY_SID_DATAVar = CPointerVarOf<PFIND_BY_SID_DATA>
typealias PFIND_BY_SID_DATA = CPointer<FIND_BY_SID_DATA>

typealias PFIND_BY_SID_OUTPUTVar = CPointerVarOf<PFIND_BY_SID_OUTPUT>
typealias PFIND_BY_SID_OUTPUT = CPointer<FIND_BY_SID_OUTPUT>

typealias PMFT_ENUM_DATAVar = CPointerVarOf<PMFT_ENUM_DATA>
typealias PMFT_ENUM_DATA = CPointer<MFT_ENUM_DATA>

typealias PCREATE_USN_JOURNAL_DATAVar = CPointerVarOf<PCREATE_USN_JOURNAL_DATA>
typealias PCREATE_USN_JOURNAL_DATA = CPointer<CREATE_USN_JOURNAL_DATA>

typealias PREAD_USN_JOURNAL_DATAVar = CPointerVarOf<PREAD_USN_JOURNAL_DATA>
typealias PREAD_USN_JOURNAL_DATA = CPointer<READ_USN_JOURNAL_DATA>

typealias PUSN_RECORDVar = CPointerVarOf<PUSN_RECORD>
typealias PUSN_RECORD = CPointer<USN_RECORD>

typealias PUSN_JOURNAL_DATAVar = CPointerVarOf<PUSN_JOURNAL_DATA>
typealias PUSN_JOURNAL_DATA = CPointer<USN_JOURNAL_DATA>

typealias PDELETE_USN_JOURNAL_DATAVar = CPointerVarOf<PDELETE_USN_JOURNAL_DATA>
typealias PDELETE_USN_JOURNAL_DATA = CPointer<DELETE_USN_JOURNAL_DATA>

typealias PMARK_HANDLE_INFOVar = CPointerVarOf<PMARK_HANDLE_INFO>
typealias PMARK_HANDLE_INFO = CPointer<MARK_HANDLE_INFO>

typealias PMARK_HANDLE_INFO32Var = CPointerVarOf<PMARK_HANDLE_INFO32>
typealias PMARK_HANDLE_INFO32 = CPointer<MARK_HANDLE_INFO32>

typealias PBULK_SECURITY_TEST_DATAVar = CPointerVarOf<PBULK_SECURITY_TEST_DATA>
typealias PBULK_SECURITY_TEST_DATA = CPointer<BULK_SECURITY_TEST_DATA>

typealias FILE_PREFETCH = _FILE_PREFETCH

typealias PFILE_PREFETCHVar = CPointerVarOf<PFILE_PREFETCH>
typealias PFILE_PREFETCH = CPointer<_FILE_PREFETCH>

typealias FILESYSTEM_STATISTICS = _FILESYSTEM_STATISTICS

typealias PFILESYSTEM_STATISTICSVar = CPointerVarOf<PFILESYSTEM_STATISTICS>
typealias PFILESYSTEM_STATISTICS = CPointer<_FILESYSTEM_STATISTICS>

typealias FAT_STATISTICS = _FAT_STATISTICS

typealias PFAT_STATISTICSVar = CPointerVarOf<PFAT_STATISTICS>
typealias PFAT_STATISTICS = CPointer<_FAT_STATISTICS>

typealias EXFAT_STATISTICS = _EXFAT_STATISTICS

typealias PEXFAT_STATISTICSVar = CPointerVarOf<PEXFAT_STATISTICS>
typealias PEXFAT_STATISTICS = CPointer<_EXFAT_STATISTICS>

typealias NTFS_STATISTICS = _NTFS_STATISTICS

typealias PNTFS_STATISTICSVar = CPointerVarOf<PNTFS_STATISTICS>
typealias PNTFS_STATISTICS = CPointer<_NTFS_STATISTICS>

typealias FILE_OBJECTID_BUFFER = _FILE_OBJECTID_BUFFER

typealias PFILE_OBJECTID_BUFFERVar = CPointerVarOf<PFILE_OBJECTID_BUFFER>
typealias PFILE_OBJECTID_BUFFER = CPointer<_FILE_OBJECTID_BUFFER>

typealias FILE_SET_SPARSE_BUFFER = _FILE_SET_SPARSE_BUFFER

typealias PFILE_SET_SPARSE_BUFFERVar = CPointerVarOf<PFILE_SET_SPARSE_BUFFER>
typealias PFILE_SET_SPARSE_BUFFER = CPointer<_FILE_SET_SPARSE_BUFFER>

typealias FILE_ZERO_DATA_INFORMATION = _FILE_ZERO_DATA_INFORMATION

typealias PFILE_ZERO_DATA_INFORMATIONVar = CPointerVarOf<PFILE_ZERO_DATA_INFORMATION>
typealias PFILE_ZERO_DATA_INFORMATION = CPointer<_FILE_ZERO_DATA_INFORMATION>

typealias FILE_ALLOCATED_RANGE_BUFFER = _FILE_ALLOCATED_RANGE_BUFFER

typealias PFILE_ALLOCATED_RANGE_BUFFERVar = CPointerVarOf<PFILE_ALLOCATED_RANGE_BUFFER>
typealias PFILE_ALLOCATED_RANGE_BUFFER = CPointer<_FILE_ALLOCATED_RANGE_BUFFER>

typealias ENCRYPTION_BUFFER = _ENCRYPTION_BUFFER

typealias PENCRYPTION_BUFFERVar = CPointerVarOf<PENCRYPTION_BUFFER>
typealias PENCRYPTION_BUFFER = CPointer<_ENCRYPTION_BUFFER>

typealias DECRYPTION_STATUS_BUFFER = _DECRYPTION_STATUS_BUFFER

typealias PDECRYPTION_STATUS_BUFFERVar = CPointerVarOf<PDECRYPTION_STATUS_BUFFER>
typealias PDECRYPTION_STATUS_BUFFER = CPointer<_DECRYPTION_STATUS_BUFFER>

typealias REQUEST_RAW_ENCRYPTED_DATA = _REQUEST_RAW_ENCRYPTED_DATA

typealias PREQUEST_RAW_ENCRYPTED_DATAVar = CPointerVarOf<PREQUEST_RAW_ENCRYPTED_DATA>
typealias PREQUEST_RAW_ENCRYPTED_DATA = CPointer<_REQUEST_RAW_ENCRYPTED_DATA>

typealias ENCRYPTED_DATA_INFO = _ENCRYPTED_DATA_INFO

typealias PENCRYPTED_DATA_INFOVar = CPointerVarOf<PENCRYPTED_DATA_INFO>
typealias PENCRYPTED_DATA_INFO = CPointer<ENCRYPTED_DATA_INFO>

typealias PLEX_READ_DATA_REQUEST = _PLEX_READ_DATA_REQUEST

typealias PPLEX_READ_DATA_REQUESTVar = CPointerVarOf<PPLEX_READ_DATA_REQUEST>
typealias PPLEX_READ_DATA_REQUEST = CPointer<_PLEX_READ_DATA_REQUEST>

typealias SI_COPYFILE = _SI_COPYFILE

typealias PSI_COPYFILEVar = CPointerVarOf<PSI_COPYFILE>
typealias PSI_COPYFILE = CPointer<_SI_COPYFILE>

typealias STORAGE_DESCRIPTOR_HEADER = _STORAGE_DESCRIPTOR_HEADER

typealias PSTORAGE_DESCRIPTOR_HEADERVar = CPointerVarOf<PSTORAGE_DESCRIPTOR_HEADER>
typealias PSTORAGE_DESCRIPTOR_HEADER = CPointer<_STORAGE_DESCRIPTOR_HEADER>

typealias STORAGE_PROPERTY_IDVar = IntVarOf<STORAGE_PROPERTY_ID>
typealias STORAGE_PROPERTY_ID = _STORAGE_PROPERTY_ID

typealias PSTORAGE_PROPERTY_IDVar = CPointerVarOf<PSTORAGE_PROPERTY_ID>
typealias PSTORAGE_PROPERTY_ID = CPointer<_STORAGE_PROPERTY_IDVar>

typealias STORAGE_QUERY_TYPEVar = IntVarOf<STORAGE_QUERY_TYPE>
typealias STORAGE_QUERY_TYPE = _STORAGE_QUERY_TYPE

typealias PSTORAGE_QUERY_TYPEVar = CPointerVarOf<PSTORAGE_QUERY_TYPE>
typealias PSTORAGE_QUERY_TYPE = CPointer<_STORAGE_QUERY_TYPEVar>

typealias STORAGE_PROPERTY_QUERY = _STORAGE_PROPERTY_QUERY

typealias PSTORAGE_PROPERTY_QUERYVar = CPointerVarOf<PSTORAGE_PROPERTY_QUERY>
typealias PSTORAGE_PROPERTY_QUERY = CPointer<_STORAGE_PROPERTY_QUERY>

typealias STORAGE_DEVICE_DESCRIPTOR = _STORAGE_DEVICE_DESCRIPTOR

typealias PSTORAGE_DEVICE_DESCRIPTORVar = CPointerVarOf<PSTORAGE_DEVICE_DESCRIPTOR>
typealias PSTORAGE_DEVICE_DESCRIPTOR = CPointer<_STORAGE_DEVICE_DESCRIPTOR>

typealias STORAGE_ADAPTER_DESCRIPTOR = _STORAGE_ADAPTER_DESCRIPTOR

typealias PSTORAGE_ADAPTER_DESCRIPTORVar = CPointerVarOf<PSTORAGE_ADAPTER_DESCRIPTOR>
typealias PSTORAGE_ADAPTER_DESCRIPTOR = CPointer<_STORAGE_ADAPTER_DESCRIPTOR>

typealias STORAGE_DEVICE_ID_DESCRIPTOR = _STORAGE_DEVICE_ID_DESCRIPTOR

typealias PSTORAGE_DEVICE_ID_DESCRIPTORVar = CPointerVarOf<PSTORAGE_DEVICE_ID_DESCRIPTOR>
typealias PSTORAGE_DEVICE_ID_DESCRIPTOR = CPointer<_STORAGE_DEVICE_ID_DESCRIPTOR>

typealias VOLUME_GET_GPT_ATTRIBUTES_INFORMATION = _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION

typealias PVOLUME_GET_GPT_ATTRIBUTES_INFORMATIONVar = CPointerVarOf<PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION>
typealias PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION = CPointer<_VOLUME_GET_GPT_ATTRIBUTES_INFORMATION>

typealias DISK_EXTENT = _DISK_EXTENT

typealias PDISK_EXTENTVar = CPointerVarOf<PDISK_EXTENT>
typealias PDISK_EXTENT = CPointer<_DISK_EXTENT>

typealias VOLUME_DISK_EXTENTS = _VOLUME_DISK_EXTENTS

typealias PVOLUME_DISK_EXTENTSVar = CPointerVarOf<PVOLUME_DISK_EXTENTS>
typealias PVOLUME_DISK_EXTENTS = CPointer<_VOLUME_DISK_EXTENTS>

typealias UWORDVar = ShortVarOf<UWORD>
typealias UWORD = WORD

typealias SCARD_IO_REQUEST = _SCARD_IO_REQUEST

typealias PSCARD_IO_REQUESTVar = CPointerVarOf<PSCARD_IO_REQUEST>
typealias PSCARD_IO_REQUEST = CPointer<_SCARD_IO_REQUEST>

typealias LPSCARD_IO_REQUESTVar = CPointerVarOf<LPSCARD_IO_REQUEST>
typealias LPSCARD_IO_REQUEST = CPointer<_SCARD_IO_REQUEST>

typealias LPCSCARD_IO_REQUESTVar = CPointerVarOf<LPCSCARD_IO_REQUEST>
typealias LPCSCARD_IO_REQUEST = CPointer<SCARD_IO_REQUEST>

typealias LPSCARD_T0_COMMANDVar = CPointerVarOf<LPSCARD_T0_COMMAND>
typealias LPSCARD_T0_COMMAND = CPointer<SCARD_T0_COMMAND>

typealias PSCARD_T0_REQUESTVar = CPointerVarOf<PSCARD_T0_REQUEST>
typealias PSCARD_T0_REQUEST = CPointer<SCARD_T0_REQUEST>

typealias LPSCARD_T0_REQUESTVar = CPointerVarOf<LPSCARD_T0_REQUEST>
typealias LPSCARD_T0_REQUEST = CPointer<SCARD_T0_REQUEST>

typealias PSCARD_T1_REQUESTVar = CPointerVarOf<PSCARD_T1_REQUEST>
typealias PSCARD_T1_REQUEST = CPointer<SCARD_T1_REQUEST>

typealias LPSCARD_T1_REQUESTVar = CPointerVarOf<LPSCARD_T1_REQUEST>
typealias LPSCARD_T1_REQUEST = CPointer<SCARD_T1_REQUEST>

typealias LPCBYTEVar = CPointerVarOf<LPCBYTE>
typealias LPCBYTE = CPointer<BYTEVar>

typealias SCARDCONTEXTVar = LongVarOf<SCARDCONTEXT>
typealias SCARDCONTEXT = ULONG_PTR

typealias PSCARDCONTEXTVar = CPointerVarOf<PSCARDCONTEXT>
typealias PSCARDCONTEXT = CPointer<SCARDCONTEXTVar>

typealias LPSCARDCONTEXTVar = CPointerVarOf<LPSCARDCONTEXT>
typealias LPSCARDCONTEXT = CPointer<SCARDCONTEXTVar>

typealias SCARDHANDLEVar = LongVarOf<SCARDHANDLE>
typealias SCARDHANDLE = ULONG_PTR

typealias PSCARDHANDLEVar = CPointerVarOf<PSCARDHANDLE>
typealias PSCARDHANDLE = CPointer<SCARDHANDLEVar>

typealias LPSCARDHANDLEVar = CPointerVarOf<LPSCARDHANDLE>
typealias LPSCARDHANDLE = CPointer<SCARDHANDLEVar>

typealias LPGUIDVar = CPointerVarOf<LPGUID>
typealias LPGUID = CPointer<GUID>

typealias PSCARD_READERSTATEAVar = CPointerVarOf<PSCARD_READERSTATEA>
typealias PSCARD_READERSTATEA = CPointer<SCARD_READERSTATEA>

typealias LPSCARD_READERSTATEAVar = CPointerVarOf<LPSCARD_READERSTATEA>
typealias LPSCARD_READERSTATEA = CPointer<SCARD_READERSTATEA>

typealias PSCARD_READERSTATEWVar = CPointerVarOf<PSCARD_READERSTATEW>
typealias PSCARD_READERSTATEW = CPointer<SCARD_READERSTATEW>

typealias LPSCARD_READERSTATEWVar = CPointerVarOf<LPSCARD_READERSTATEW>
typealias LPSCARD_READERSTATEW = CPointer<SCARD_READERSTATEW>

typealias SCARD_READERSTATE = SCARD_READERSTATEW

typealias PSCARD_READERSTATEVar = CPointerVarOf<PSCARD_READERSTATE>
typealias PSCARD_READERSTATE = PSCARD_READERSTATEW

typealias LPSCARD_READERSTATEVar = CPointerVarOf<LPSCARD_READERSTATE>
typealias LPSCARD_READERSTATE = LPSCARD_READERSTATEW

typealias SCARD_ATRMASK = _SCARD_ATRMASK

typealias PSCARD_ATRMASKVar = CPointerVarOf<PSCARD_ATRMASK>
typealias PSCARD_ATRMASK = CPointer<_SCARD_ATRMASK>

typealias LPSCARD_ATRMASKVar = CPointerVarOf<LPSCARD_ATRMASK>
typealias LPSCARD_ATRMASK = CPointer<_SCARD_ATRMASK>

typealias LPOCNCONNPROCAVar = CPointerVarOf<LPOCNCONNPROCA>
typealias LPOCNCONNPROCA = CPointer<CFunction<(SCARDCONTEXT, LPSTR?, LPSTR?, PVOID?) -> SCARDHANDLE>>

typealias LPOCNCONNPROCWVar = CPointerVarOf<LPOCNCONNPROCW>
typealias LPOCNCONNPROCW = CPointer<CFunction<(SCARDCONTEXT, LPWSTR?, LPWSTR?, PVOID?) -> SCARDHANDLE>>

typealias LPOCNCHKPROCVar = CPointerVarOf<LPOCNCHKPROC>
typealias LPOCNCHKPROC = CPointer<CFunction<(SCARDCONTEXT, SCARDHANDLE, PVOID?) -> WINBOOL>>

typealias LPOCNDSCPROCVar = CPointerVarOf<LPOCNDSCPROC>
typealias LPOCNDSCPROC = CPointer<CFunction<(SCARDCONTEXT, SCARDHANDLE, PVOID?) -> Unit>>

typealias POPENCARD_SEARCH_CRITERIAAVar = CPointerVarOf<POPENCARD_SEARCH_CRITERIAA>
typealias POPENCARD_SEARCH_CRITERIAA = CPointer<OPENCARD_SEARCH_CRITERIAA>

typealias LPOPENCARD_SEARCH_CRITERIAAVar = CPointerVarOf<LPOPENCARD_SEARCH_CRITERIAA>
typealias LPOPENCARD_SEARCH_CRITERIAA = CPointer<OPENCARD_SEARCH_CRITERIAA>

typealias POPENCARD_SEARCH_CRITERIAWVar = CPointerVarOf<POPENCARD_SEARCH_CRITERIAW>
typealias POPENCARD_SEARCH_CRITERIAW = CPointer<OPENCARD_SEARCH_CRITERIAW>

typealias LPOPENCARD_SEARCH_CRITERIAWVar = CPointerVarOf<LPOPENCARD_SEARCH_CRITERIAW>
typealias LPOPENCARD_SEARCH_CRITERIAW = CPointer<OPENCARD_SEARCH_CRITERIAW>

typealias OPENCARD_SEARCH_CRITERIA = OPENCARD_SEARCH_CRITERIAW

typealias POPENCARD_SEARCH_CRITERIAVar = CPointerVarOf<POPENCARD_SEARCH_CRITERIA>
typealias POPENCARD_SEARCH_CRITERIA = POPENCARD_SEARCH_CRITERIAW

typealias LPOPENCARD_SEARCH_CRITERIAVar = CPointerVarOf<LPOPENCARD_SEARCH_CRITERIA>
typealias LPOPENCARD_SEARCH_CRITERIA = LPOPENCARD_SEARCH_CRITERIAW

typealias POPENCARDNAME_EXAVar = CPointerVarOf<POPENCARDNAME_EXA>
typealias POPENCARDNAME_EXA = CPointer<OPENCARDNAME_EXA>

typealias LPOPENCARDNAME_EXAVar = CPointerVarOf<LPOPENCARDNAME_EXA>
typealias LPOPENCARDNAME_EXA = CPointer<OPENCARDNAME_EXA>

typealias POPENCARDNAME_EXWVar = CPointerVarOf<POPENCARDNAME_EXW>
typealias POPENCARDNAME_EXW = CPointer<OPENCARDNAME_EXW>

typealias LPOPENCARDNAME_EXWVar = CPointerVarOf<LPOPENCARDNAME_EXW>
typealias LPOPENCARDNAME_EXW = CPointer<OPENCARDNAME_EXW>

typealias OPENCARDNAME_EX = OPENCARDNAME_EXW

typealias POPENCARDNAME_EXVar = CPointerVarOf<POPENCARDNAME_EX>
typealias POPENCARDNAME_EX = POPENCARDNAME_EXW

typealias LPOPENCARDNAME_EXVar = CPointerVarOf<LPOPENCARDNAME_EX>
typealias LPOPENCARDNAME_EX = LPOPENCARDNAME_EXW

typealias POPENCARDNAMEAVar = CPointerVarOf<POPENCARDNAMEA>
typealias POPENCARDNAMEA = CPointer<OPENCARDNAMEA>

typealias LPOPENCARDNAMEAVar = CPointerVarOf<LPOPENCARDNAMEA>
typealias LPOPENCARDNAMEA = CPointer<OPENCARDNAMEA>

typealias POPENCARDNAMEWVar = CPointerVarOf<POPENCARDNAMEW>
typealias POPENCARDNAMEW = CPointer<OPENCARDNAMEW>

typealias LPOPENCARDNAMEWVar = CPointerVarOf<LPOPENCARDNAMEW>
typealias LPOPENCARDNAMEW = CPointer<OPENCARDNAMEW>

typealias OPENCARDNAME = OPENCARDNAMEW

typealias POPENCARDNAMEVar = CPointerVarOf<POPENCARDNAME>
typealias POPENCARDNAME = POPENCARDNAMEW

typealias LPOPENCARDNAMEVar = CPointerVarOf<LPOPENCARDNAME>
typealias LPOPENCARDNAME = LPOPENCARDNAMEW

typealias PRINTER_INFO_1A = _PRINTER_INFO_1A

typealias PPRINTER_INFO_1AVar = CPointerVarOf<PPRINTER_INFO_1A>
typealias PPRINTER_INFO_1A = CPointer<_PRINTER_INFO_1A>

typealias LPPRINTER_INFO_1AVar = CPointerVarOf<LPPRINTER_INFO_1A>
typealias LPPRINTER_INFO_1A = CPointer<_PRINTER_INFO_1A>

typealias PRINTER_INFO_1W = _PRINTER_INFO_1W

typealias PPRINTER_INFO_1WVar = CPointerVarOf<PPRINTER_INFO_1W>
typealias PPRINTER_INFO_1W = CPointer<_PRINTER_INFO_1W>

typealias LPPRINTER_INFO_1WVar = CPointerVarOf<LPPRINTER_INFO_1W>
typealias LPPRINTER_INFO_1W = CPointer<_PRINTER_INFO_1W>

typealias PRINTER_INFO_1 = PRINTER_INFO_1W

typealias PPRINTER_INFO_1Var = CPointerVarOf<PPRINTER_INFO_1>
typealias PPRINTER_INFO_1 = PPRINTER_INFO_1W

typealias LPPRINTER_INFO_1Var = CPointerVarOf<LPPRINTER_INFO_1>
typealias LPPRINTER_INFO_1 = LPPRINTER_INFO_1W

typealias PRINTER_INFO_2A = _PRINTER_INFO_2A

typealias PPRINTER_INFO_2AVar = CPointerVarOf<PPRINTER_INFO_2A>
typealias PPRINTER_INFO_2A = CPointer<_PRINTER_INFO_2A>

typealias LPPRINTER_INFO_2AVar = CPointerVarOf<LPPRINTER_INFO_2A>
typealias LPPRINTER_INFO_2A = CPointer<_PRINTER_INFO_2A>

typealias PRINTER_INFO_2W = _PRINTER_INFO_2W

typealias PPRINTER_INFO_2WVar = CPointerVarOf<PPRINTER_INFO_2W>
typealias PPRINTER_INFO_2W = CPointer<_PRINTER_INFO_2W>

typealias LPPRINTER_INFO_2WVar = CPointerVarOf<LPPRINTER_INFO_2W>
typealias LPPRINTER_INFO_2W = CPointer<_PRINTER_INFO_2W>

typealias PRINTER_INFO_2 = PRINTER_INFO_2W

typealias PPRINTER_INFO_2Var = CPointerVarOf<PPRINTER_INFO_2>
typealias PPRINTER_INFO_2 = PPRINTER_INFO_2W

typealias LPPRINTER_INFO_2Var = CPointerVarOf<LPPRINTER_INFO_2>
typealias LPPRINTER_INFO_2 = LPPRINTER_INFO_2W

typealias PRINTER_INFO_3 = _PRINTER_INFO_3

typealias PPRINTER_INFO_3Var = CPointerVarOf<PPRINTER_INFO_3>
typealias PPRINTER_INFO_3 = CPointer<_PRINTER_INFO_3>

typealias LPPRINTER_INFO_3Var = CPointerVarOf<LPPRINTER_INFO_3>
typealias LPPRINTER_INFO_3 = CPointer<_PRINTER_INFO_3>

typealias PRINTER_INFO_4A = _PRINTER_INFO_4A

typealias PPRINTER_INFO_4AVar = CPointerVarOf<PPRINTER_INFO_4A>
typealias PPRINTER_INFO_4A = CPointer<_PRINTER_INFO_4A>

typealias LPPRINTER_INFO_4AVar = CPointerVarOf<LPPRINTER_INFO_4A>
typealias LPPRINTER_INFO_4A = CPointer<_PRINTER_INFO_4A>

typealias PRINTER_INFO_4W = _PRINTER_INFO_4W

typealias PPRINTER_INFO_4WVar = CPointerVarOf<PPRINTER_INFO_4W>
typealias PPRINTER_INFO_4W = CPointer<_PRINTER_INFO_4W>

typealias LPPRINTER_INFO_4WVar = CPointerVarOf<LPPRINTER_INFO_4W>
typealias LPPRINTER_INFO_4W = CPointer<_PRINTER_INFO_4W>

typealias PRINTER_INFO_4 = PRINTER_INFO_4W

typealias PPRINTER_INFO_4Var = CPointerVarOf<PPRINTER_INFO_4>
typealias PPRINTER_INFO_4 = PPRINTER_INFO_4W

typealias LPPRINTER_INFO_4Var = CPointerVarOf<LPPRINTER_INFO_4>
typealias LPPRINTER_INFO_4 = LPPRINTER_INFO_4W

typealias PRINTER_INFO_5A = _PRINTER_INFO_5A

typealias PPRINTER_INFO_5AVar = CPointerVarOf<PPRINTER_INFO_5A>
typealias PPRINTER_INFO_5A = CPointer<_PRINTER_INFO_5A>

typealias LPPRINTER_INFO_5AVar = CPointerVarOf<LPPRINTER_INFO_5A>
typealias LPPRINTER_INFO_5A = CPointer<_PRINTER_INFO_5A>

typealias PRINTER_INFO_5W = _PRINTER_INFO_5W

typealias PPRINTER_INFO_5WVar = CPointerVarOf<PPRINTER_INFO_5W>
typealias PPRINTER_INFO_5W = CPointer<_PRINTER_INFO_5W>

typealias LPPRINTER_INFO_5WVar = CPointerVarOf<LPPRINTER_INFO_5W>
typealias LPPRINTER_INFO_5W = CPointer<_PRINTER_INFO_5W>

typealias PRINTER_INFO_5 = PRINTER_INFO_5W

typealias PPRINTER_INFO_5Var = CPointerVarOf<PPRINTER_INFO_5>
typealias PPRINTER_INFO_5 = PPRINTER_INFO_5W

typealias LPPRINTER_INFO_5Var = CPointerVarOf<LPPRINTER_INFO_5>
typealias LPPRINTER_INFO_5 = LPPRINTER_INFO_5W

typealias PRINTER_INFO_6 = _PRINTER_INFO_6

typealias PPRINTER_INFO_6Var = CPointerVarOf<PPRINTER_INFO_6>
typealias PPRINTER_INFO_6 = CPointer<_PRINTER_INFO_6>

typealias LPPRINTER_INFO_6Var = CPointerVarOf<LPPRINTER_INFO_6>
typealias LPPRINTER_INFO_6 = CPointer<_PRINTER_INFO_6>

typealias PRINTER_INFO_7A = _PRINTER_INFO_7A

typealias PPRINTER_INFO_7AVar = CPointerVarOf<PPRINTER_INFO_7A>
typealias PPRINTER_INFO_7A = CPointer<_PRINTER_INFO_7A>

typealias LPPRINTER_INFO_7AVar = CPointerVarOf<LPPRINTER_INFO_7A>
typealias LPPRINTER_INFO_7A = CPointer<_PRINTER_INFO_7A>

typealias PRINTER_INFO_7W = _PRINTER_INFO_7W

typealias PPRINTER_INFO_7WVar = CPointerVarOf<PPRINTER_INFO_7W>
typealias PPRINTER_INFO_7W = CPointer<_PRINTER_INFO_7W>

typealias LPPRINTER_INFO_7WVar = CPointerVarOf<LPPRINTER_INFO_7W>
typealias LPPRINTER_INFO_7W = CPointer<_PRINTER_INFO_7W>

typealias PRINTER_INFO_7 = PRINTER_INFO_7W

typealias PPRINTER_INFO_7Var = CPointerVarOf<PPRINTER_INFO_7>
typealias PPRINTER_INFO_7 = PPRINTER_INFO_7W

typealias LPPRINTER_INFO_7Var = CPointerVarOf<LPPRINTER_INFO_7>
typealias LPPRINTER_INFO_7 = LPPRINTER_INFO_7W

typealias PRINTER_INFO_8A = _PRINTER_INFO_8A

typealias PPRINTER_INFO_8AVar = CPointerVarOf<PPRINTER_INFO_8A>
typealias PPRINTER_INFO_8A = CPointer<_PRINTER_INFO_8A>

typealias LPPRINTER_INFO_8AVar = CPointerVarOf<LPPRINTER_INFO_8A>
typealias LPPRINTER_INFO_8A = CPointer<_PRINTER_INFO_8A>

typealias PRINTER_INFO_8W = _PRINTER_INFO_8W

typealias PPRINTER_INFO_8WVar = CPointerVarOf<PPRINTER_INFO_8W>
typealias PPRINTER_INFO_8W = CPointer<_PRINTER_INFO_8W>

typealias LPPRINTER_INFO_8WVar = CPointerVarOf<LPPRINTER_INFO_8W>
typealias LPPRINTER_INFO_8W = CPointer<_PRINTER_INFO_8W>

typealias PRINTER_INFO_8 = PRINTER_INFO_8W

typealias PPRINTER_INFO_8Var = CPointerVarOf<PPRINTER_INFO_8>
typealias PPRINTER_INFO_8 = PPRINTER_INFO_8W

typealias LPPRINTER_INFO_8Var = CPointerVarOf<LPPRINTER_INFO_8>
typealias LPPRINTER_INFO_8 = LPPRINTER_INFO_8W

typealias PRINTER_INFO_9A = _PRINTER_INFO_9A

typealias PPRINTER_INFO_9AVar = CPointerVarOf<PPRINTER_INFO_9A>
typealias PPRINTER_INFO_9A = CPointer<_PRINTER_INFO_9A>

typealias LPPRINTER_INFO_9AVar = CPointerVarOf<LPPRINTER_INFO_9A>
typealias LPPRINTER_INFO_9A = CPointer<_PRINTER_INFO_9A>

typealias PRINTER_INFO_9W = _PRINTER_INFO_9W

typealias PPRINTER_INFO_9WVar = CPointerVarOf<PPRINTER_INFO_9W>
typealias PPRINTER_INFO_9W = CPointer<_PRINTER_INFO_9W>

typealias LPPRINTER_INFO_9WVar = CPointerVarOf<LPPRINTER_INFO_9W>
typealias LPPRINTER_INFO_9W = CPointer<_PRINTER_INFO_9W>

typealias PRINTER_INFO_9 = PRINTER_INFO_9W

typealias PPRINTER_INFO_9Var = CPointerVarOf<PPRINTER_INFO_9>
typealias PPRINTER_INFO_9 = PPRINTER_INFO_9W

typealias LPPRINTER_INFO_9Var = CPointerVarOf<LPPRINTER_INFO_9>
typealias LPPRINTER_INFO_9 = LPPRINTER_INFO_9W

typealias JOB_INFO_1A = _JOB_INFO_1A

typealias PJOB_INFO_1AVar = CPointerVarOf<PJOB_INFO_1A>
typealias PJOB_INFO_1A = CPointer<_JOB_INFO_1A>

typealias LPJOB_INFO_1AVar = CPointerVarOf<LPJOB_INFO_1A>
typealias LPJOB_INFO_1A = CPointer<_JOB_INFO_1A>

typealias JOB_INFO_1W = _JOB_INFO_1W

typealias PJOB_INFO_1WVar = CPointerVarOf<PJOB_INFO_1W>
typealias PJOB_INFO_1W = CPointer<_JOB_INFO_1W>

typealias LPJOB_INFO_1WVar = CPointerVarOf<LPJOB_INFO_1W>
typealias LPJOB_INFO_1W = CPointer<_JOB_INFO_1W>

typealias JOB_INFO_1 = JOB_INFO_1W

typealias PJOB_INFO_1Var = CPointerVarOf<PJOB_INFO_1>
typealias PJOB_INFO_1 = PJOB_INFO_1W

typealias LPJOB_INFO_1Var = CPointerVarOf<LPJOB_INFO_1>
typealias LPJOB_INFO_1 = LPJOB_INFO_1W

typealias JOB_INFO_2A = _JOB_INFO_2A

typealias PJOB_INFO_2AVar = CPointerVarOf<PJOB_INFO_2A>
typealias PJOB_INFO_2A = CPointer<_JOB_INFO_2A>

typealias LPJOB_INFO_2AVar = CPointerVarOf<LPJOB_INFO_2A>
typealias LPJOB_INFO_2A = CPointer<_JOB_INFO_2A>

typealias JOB_INFO_2W = _JOB_INFO_2W

typealias PJOB_INFO_2WVar = CPointerVarOf<PJOB_INFO_2W>
typealias PJOB_INFO_2W = CPointer<_JOB_INFO_2W>

typealias LPJOB_INFO_2WVar = CPointerVarOf<LPJOB_INFO_2W>
typealias LPJOB_INFO_2W = CPointer<_JOB_INFO_2W>

typealias JOB_INFO_2 = JOB_INFO_2W

typealias PJOB_INFO_2Var = CPointerVarOf<PJOB_INFO_2>
typealias PJOB_INFO_2 = PJOB_INFO_2W

typealias LPJOB_INFO_2Var = CPointerVarOf<LPJOB_INFO_2>
typealias LPJOB_INFO_2 = LPJOB_INFO_2W

typealias JOB_INFO_3 = _JOB_INFO_3

typealias PJOB_INFO_3Var = CPointerVarOf<PJOB_INFO_3>
typealias PJOB_INFO_3 = CPointer<_JOB_INFO_3>

typealias LPJOB_INFO_3Var = CPointerVarOf<LPJOB_INFO_3>
typealias LPJOB_INFO_3 = CPointer<_JOB_INFO_3>

typealias ADDJOB_INFO_1A = _ADDJOB_INFO_1A

typealias PADDJOB_INFO_1AVar = CPointerVarOf<PADDJOB_INFO_1A>
typealias PADDJOB_INFO_1A = CPointer<_ADDJOB_INFO_1A>

typealias LPADDJOB_INFO_1AVar = CPointerVarOf<LPADDJOB_INFO_1A>
typealias LPADDJOB_INFO_1A = CPointer<_ADDJOB_INFO_1A>

typealias ADDJOB_INFO_1W = _ADDJOB_INFO_1W

typealias PADDJOB_INFO_1WVar = CPointerVarOf<PADDJOB_INFO_1W>
typealias PADDJOB_INFO_1W = CPointer<_ADDJOB_INFO_1W>

typealias LPADDJOB_INFO_1WVar = CPointerVarOf<LPADDJOB_INFO_1W>
typealias LPADDJOB_INFO_1W = CPointer<_ADDJOB_INFO_1W>

typealias ADDJOB_INFO_1 = ADDJOB_INFO_1W

typealias PADDJOB_INFO_1Var = CPointerVarOf<PADDJOB_INFO_1>
typealias PADDJOB_INFO_1 = PADDJOB_INFO_1W

typealias LPADDJOB_INFO_1Var = CPointerVarOf<LPADDJOB_INFO_1>
typealias LPADDJOB_INFO_1 = LPADDJOB_INFO_1W

typealias DRIVER_INFO_1A = _DRIVER_INFO_1A

typealias PDRIVER_INFO_1AVar = CPointerVarOf<PDRIVER_INFO_1A>
typealias PDRIVER_INFO_1A = CPointer<_DRIVER_INFO_1A>

typealias LPDRIVER_INFO_1AVar = CPointerVarOf<LPDRIVER_INFO_1A>
typealias LPDRIVER_INFO_1A = CPointer<_DRIVER_INFO_1A>

typealias DRIVER_INFO_1W = _DRIVER_INFO_1W

typealias PDRIVER_INFO_1WVar = CPointerVarOf<PDRIVER_INFO_1W>
typealias PDRIVER_INFO_1W = CPointer<_DRIVER_INFO_1W>

typealias LPDRIVER_INFO_1WVar = CPointerVarOf<LPDRIVER_INFO_1W>
typealias LPDRIVER_INFO_1W = CPointer<_DRIVER_INFO_1W>

typealias DRIVER_INFO_1 = DRIVER_INFO_1W

typealias PDRIVER_INFO_1Var = CPointerVarOf<PDRIVER_INFO_1>
typealias PDRIVER_INFO_1 = PDRIVER_INFO_1W

typealias LPDRIVER_INFO_1Var = CPointerVarOf<LPDRIVER_INFO_1>
typealias LPDRIVER_INFO_1 = LPDRIVER_INFO_1W

typealias DRIVER_INFO_2A = _DRIVER_INFO_2A

typealias PDRIVER_INFO_2AVar = CPointerVarOf<PDRIVER_INFO_2A>
typealias PDRIVER_INFO_2A = CPointer<_DRIVER_INFO_2A>

typealias LPDRIVER_INFO_2AVar = CPointerVarOf<LPDRIVER_INFO_2A>
typealias LPDRIVER_INFO_2A = CPointer<_DRIVER_INFO_2A>

typealias DRIVER_INFO_2W = _DRIVER_INFO_2W

typealias PDRIVER_INFO_2WVar = CPointerVarOf<PDRIVER_INFO_2W>
typealias PDRIVER_INFO_2W = CPointer<_DRIVER_INFO_2W>

typealias LPDRIVER_INFO_2WVar = CPointerVarOf<LPDRIVER_INFO_2W>
typealias LPDRIVER_INFO_2W = CPointer<_DRIVER_INFO_2W>

typealias DRIVER_INFO_2 = DRIVER_INFO_2W

typealias PDRIVER_INFO_2Var = CPointerVarOf<PDRIVER_INFO_2>
typealias PDRIVER_INFO_2 = PDRIVER_INFO_2W

typealias LPDRIVER_INFO_2Var = CPointerVarOf<LPDRIVER_INFO_2>
typealias LPDRIVER_INFO_2 = LPDRIVER_INFO_2W

typealias DRIVER_INFO_3A = _DRIVER_INFO_3A

typealias PDRIVER_INFO_3AVar = CPointerVarOf<PDRIVER_INFO_3A>
typealias PDRIVER_INFO_3A = CPointer<_DRIVER_INFO_3A>

typealias LPDRIVER_INFO_3AVar = CPointerVarOf<LPDRIVER_INFO_3A>
typealias LPDRIVER_INFO_3A = CPointer<_DRIVER_INFO_3A>

typealias DRIVER_INFO_3W = _DRIVER_INFO_3W

typealias PDRIVER_INFO_3WVar = CPointerVarOf<PDRIVER_INFO_3W>
typealias PDRIVER_INFO_3W = CPointer<_DRIVER_INFO_3W>

typealias LPDRIVER_INFO_3WVar = CPointerVarOf<LPDRIVER_INFO_3W>
typealias LPDRIVER_INFO_3W = CPointer<_DRIVER_INFO_3W>

typealias DRIVER_INFO_3 = DRIVER_INFO_3W

typealias PDRIVER_INFO_3Var = CPointerVarOf<PDRIVER_INFO_3>
typealias PDRIVER_INFO_3 = PDRIVER_INFO_3W

typealias LPDRIVER_INFO_3Var = CPointerVarOf<LPDRIVER_INFO_3>
typealias LPDRIVER_INFO_3 = LPDRIVER_INFO_3W

typealias DRIVER_INFO_4A = _DRIVER_INFO_4A

typealias PDRIVER_INFO_4AVar = CPointerVarOf<PDRIVER_INFO_4A>
typealias PDRIVER_INFO_4A = CPointer<_DRIVER_INFO_4A>

typealias LPDRIVER_INFO_4AVar = CPointerVarOf<LPDRIVER_INFO_4A>
typealias LPDRIVER_INFO_4A = CPointer<_DRIVER_INFO_4A>

typealias DRIVER_INFO_4W = _DRIVER_INFO_4W

typealias PDRIVER_INFO_4WVar = CPointerVarOf<PDRIVER_INFO_4W>
typealias PDRIVER_INFO_4W = CPointer<_DRIVER_INFO_4W>

typealias LPDRIVER_INFO_4WVar = CPointerVarOf<LPDRIVER_INFO_4W>
typealias LPDRIVER_INFO_4W = CPointer<_DRIVER_INFO_4W>

typealias DRIVER_INFO_4 = DRIVER_INFO_4W

typealias PDRIVER_INFO_4Var = CPointerVarOf<PDRIVER_INFO_4>
typealias PDRIVER_INFO_4 = PDRIVER_INFO_4W

typealias LPDRIVER_INFO_4Var = CPointerVarOf<LPDRIVER_INFO_4>
typealias LPDRIVER_INFO_4 = LPDRIVER_INFO_4W

typealias DRIVER_INFO_5A = _DRIVER_INFO_5A

typealias PDRIVER_INFO_5AVar = CPointerVarOf<PDRIVER_INFO_5A>
typealias PDRIVER_INFO_5A = CPointer<_DRIVER_INFO_5A>

typealias LPDRIVER_INFO_5AVar = CPointerVarOf<LPDRIVER_INFO_5A>
typealias LPDRIVER_INFO_5A = CPointer<_DRIVER_INFO_5A>

typealias DRIVER_INFO_5W = _DRIVER_INFO_5W

typealias PDRIVER_INFO_5WVar = CPointerVarOf<PDRIVER_INFO_5W>
typealias PDRIVER_INFO_5W = CPointer<_DRIVER_INFO_5W>

typealias LPDRIVER_INFO_5WVar = CPointerVarOf<LPDRIVER_INFO_5W>
typealias LPDRIVER_INFO_5W = CPointer<_DRIVER_INFO_5W>

typealias DRIVER_INFO_5 = DRIVER_INFO_5W

typealias PDRIVER_INFO_5Var = CPointerVarOf<PDRIVER_INFO_5>
typealias PDRIVER_INFO_5 = PDRIVER_INFO_5W

typealias LPDRIVER_INFO_5Var = CPointerVarOf<LPDRIVER_INFO_5>
typealias LPDRIVER_INFO_5 = LPDRIVER_INFO_5W

typealias DRIVER_INFO_6A = _DRIVER_INFO_6A

typealias PDRIVER_INFO_6AVar = CPointerVarOf<PDRIVER_INFO_6A>
typealias PDRIVER_INFO_6A = CPointer<_DRIVER_INFO_6A>

typealias LPDRIVER_INFO_6AVar = CPointerVarOf<LPDRIVER_INFO_6A>
typealias LPDRIVER_INFO_6A = CPointer<_DRIVER_INFO_6A>

typealias DRIVER_INFO_6W = _DRIVER_INFO_6W

typealias PDRIVER_INFO_6WVar = CPointerVarOf<PDRIVER_INFO_6W>
typealias PDRIVER_INFO_6W = CPointer<_DRIVER_INFO_6W>

typealias LPDRIVER_INFO_6WVar = CPointerVarOf<LPDRIVER_INFO_6W>
typealias LPDRIVER_INFO_6W = CPointer<_DRIVER_INFO_6W>

typealias DRIVER_INFO_6 = DRIVER_INFO_6W

typealias PDRIVER_INFO_6Var = CPointerVarOf<PDRIVER_INFO_6>
typealias PDRIVER_INFO_6 = PDRIVER_INFO_6W

typealias LPDRIVER_INFO_6Var = CPointerVarOf<LPDRIVER_INFO_6>
typealias LPDRIVER_INFO_6 = LPDRIVER_INFO_6W

typealias DOC_INFO_1A = _DOC_INFO_1A

typealias PDOC_INFO_1AVar = CPointerVarOf<PDOC_INFO_1A>
typealias PDOC_INFO_1A = CPointer<_DOC_INFO_1A>

typealias LPDOC_INFO_1AVar = CPointerVarOf<LPDOC_INFO_1A>
typealias LPDOC_INFO_1A = CPointer<_DOC_INFO_1A>

typealias DOC_INFO_1W = _DOC_INFO_1W

typealias PDOC_INFO_1WVar = CPointerVarOf<PDOC_INFO_1W>
typealias PDOC_INFO_1W = CPointer<_DOC_INFO_1W>

typealias LPDOC_INFO_1WVar = CPointerVarOf<LPDOC_INFO_1W>
typealias LPDOC_INFO_1W = CPointer<_DOC_INFO_1W>

typealias DOC_INFO_1 = DOC_INFO_1W

typealias PDOC_INFO_1Var = CPointerVarOf<PDOC_INFO_1>
typealias PDOC_INFO_1 = PDOC_INFO_1W

typealias LPDOC_INFO_1Var = CPointerVarOf<LPDOC_INFO_1>
typealias LPDOC_INFO_1 = LPDOC_INFO_1W

typealias FORM_INFO_1A = _FORM_INFO_1A

typealias PFORM_INFO_1AVar = CPointerVarOf<PFORM_INFO_1A>
typealias PFORM_INFO_1A = CPointer<_FORM_INFO_1A>

typealias LPFORM_INFO_1AVar = CPointerVarOf<LPFORM_INFO_1A>
typealias LPFORM_INFO_1A = CPointer<_FORM_INFO_1A>

typealias FORM_INFO_1W = _FORM_INFO_1W

typealias PFORM_INFO_1WVar = CPointerVarOf<PFORM_INFO_1W>
typealias PFORM_INFO_1W = CPointer<_FORM_INFO_1W>

typealias LPFORM_INFO_1WVar = CPointerVarOf<LPFORM_INFO_1W>
typealias LPFORM_INFO_1W = CPointer<_FORM_INFO_1W>

typealias FORM_INFO_1 = FORM_INFO_1W

typealias PFORM_INFO_1Var = CPointerVarOf<PFORM_INFO_1>
typealias PFORM_INFO_1 = PFORM_INFO_1W

typealias LPFORM_INFO_1Var = CPointerVarOf<LPFORM_INFO_1>
typealias LPFORM_INFO_1 = LPFORM_INFO_1W

typealias DOC_INFO_2A = _DOC_INFO_2A

typealias PDOC_INFO_2AVar = CPointerVarOf<PDOC_INFO_2A>
typealias PDOC_INFO_2A = CPointer<_DOC_INFO_2A>

typealias LPDOC_INFO_2AVar = CPointerVarOf<LPDOC_INFO_2A>
typealias LPDOC_INFO_2A = CPointer<_DOC_INFO_2A>

typealias DOC_INFO_2W = _DOC_INFO_2W

typealias PDOC_INFO_2WVar = CPointerVarOf<PDOC_INFO_2W>
typealias PDOC_INFO_2W = CPointer<_DOC_INFO_2W>

typealias LPDOC_INFO_2WVar = CPointerVarOf<LPDOC_INFO_2W>
typealias LPDOC_INFO_2W = CPointer<_DOC_INFO_2W>

typealias DOC_INFO_2 = DOC_INFO_2W

typealias PDOC_INFO_2Var = CPointerVarOf<PDOC_INFO_2>
typealias PDOC_INFO_2 = PDOC_INFO_2W

typealias LPDOC_INFO_2Var = CPointerVarOf<LPDOC_INFO_2>
typealias LPDOC_INFO_2 = LPDOC_INFO_2W

typealias DOC_INFO_3A = _DOC_INFO_3A

typealias PDOC_INFO_3AVar = CPointerVarOf<PDOC_INFO_3A>
typealias PDOC_INFO_3A = CPointer<_DOC_INFO_3A>

typealias LPDOC_INFO_3AVar = CPointerVarOf<LPDOC_INFO_3A>
typealias LPDOC_INFO_3A = CPointer<_DOC_INFO_3A>

typealias DOC_INFO_3W = _DOC_INFO_3W

typealias PDOC_INFO_3WVar = CPointerVarOf<PDOC_INFO_3W>
typealias PDOC_INFO_3W = CPointer<_DOC_INFO_3W>

typealias LPDOC_INFO_3WVar = CPointerVarOf<LPDOC_INFO_3W>
typealias LPDOC_INFO_3W = CPointer<_DOC_INFO_3W>

typealias DOC_INFO_3 = DOC_INFO_3W

typealias PDOC_INFO_3Var = CPointerVarOf<PDOC_INFO_3>
typealias PDOC_INFO_3 = PDOC_INFO_3W

typealias LPDOC_INFO_3Var = CPointerVarOf<LPDOC_INFO_3>
typealias LPDOC_INFO_3 = LPDOC_INFO_3W

typealias PRINTPROCESSOR_INFO_1A = _PRINTPROCESSOR_INFO_1A

typealias PPRINTPROCESSOR_INFO_1AVar = CPointerVarOf<PPRINTPROCESSOR_INFO_1A>
typealias PPRINTPROCESSOR_INFO_1A = CPointer<_PRINTPROCESSOR_INFO_1A>

typealias LPPRINTPROCESSOR_INFO_1AVar = CPointerVarOf<LPPRINTPROCESSOR_INFO_1A>
typealias LPPRINTPROCESSOR_INFO_1A = CPointer<_PRINTPROCESSOR_INFO_1A>

typealias PRINTPROCESSOR_INFO_1W = _PRINTPROCESSOR_INFO_1W

typealias PPRINTPROCESSOR_INFO_1WVar = CPointerVarOf<PPRINTPROCESSOR_INFO_1W>
typealias PPRINTPROCESSOR_INFO_1W = CPointer<_PRINTPROCESSOR_INFO_1W>

typealias LPPRINTPROCESSOR_INFO_1WVar = CPointerVarOf<LPPRINTPROCESSOR_INFO_1W>
typealias LPPRINTPROCESSOR_INFO_1W = CPointer<_PRINTPROCESSOR_INFO_1W>

typealias PRINTPROCESSOR_INFO_1 = PRINTPROCESSOR_INFO_1W

typealias PPRINTPROCESSOR_INFO_1Var = CPointerVarOf<PPRINTPROCESSOR_INFO_1>
typealias PPRINTPROCESSOR_INFO_1 = PPRINTPROCESSOR_INFO_1W

typealias LPPRINTPROCESSOR_INFO_1Var = CPointerVarOf<LPPRINTPROCESSOR_INFO_1>
typealias LPPRINTPROCESSOR_INFO_1 = LPPRINTPROCESSOR_INFO_1W

typealias PRINTPROCESSOR_CAPS_1 = _PRINTPROCESSOR_CAPS_1

typealias PPRINTPROCESSOR_CAPS_1Var = CPointerVarOf<PPRINTPROCESSOR_CAPS_1>
typealias PPRINTPROCESSOR_CAPS_1 = CPointer<_PRINTPROCESSOR_CAPS_1>

typealias PORT_INFO_1A = _PORT_INFO_1A

typealias PPORT_INFO_1AVar = CPointerVarOf<PPORT_INFO_1A>
typealias PPORT_INFO_1A = CPointer<_PORT_INFO_1A>

typealias LPPORT_INFO_1AVar = CPointerVarOf<LPPORT_INFO_1A>
typealias LPPORT_INFO_1A = CPointer<_PORT_INFO_1A>

typealias PORT_INFO_1W = _PORT_INFO_1W

typealias PPORT_INFO_1WVar = CPointerVarOf<PPORT_INFO_1W>
typealias PPORT_INFO_1W = CPointer<_PORT_INFO_1W>

typealias LPPORT_INFO_1WVar = CPointerVarOf<LPPORT_INFO_1W>
typealias LPPORT_INFO_1W = CPointer<_PORT_INFO_1W>

typealias PORT_INFO_1 = PORT_INFO_1W

typealias PPORT_INFO_1Var = CPointerVarOf<PPORT_INFO_1>
typealias PPORT_INFO_1 = PPORT_INFO_1W

typealias LPPORT_INFO_1Var = CPointerVarOf<LPPORT_INFO_1>
typealias LPPORT_INFO_1 = LPPORT_INFO_1W

typealias PORT_INFO_2A = _PORT_INFO_2A

typealias PPORT_INFO_2AVar = CPointerVarOf<PPORT_INFO_2A>
typealias PPORT_INFO_2A = CPointer<_PORT_INFO_2A>

typealias LPPORT_INFO_2AVar = CPointerVarOf<LPPORT_INFO_2A>
typealias LPPORT_INFO_2A = CPointer<_PORT_INFO_2A>

typealias PORT_INFO_2W = _PORT_INFO_2W

typealias PPORT_INFO_2WVar = CPointerVarOf<PPORT_INFO_2W>
typealias PPORT_INFO_2W = CPointer<_PORT_INFO_2W>

typealias LPPORT_INFO_2WVar = CPointerVarOf<LPPORT_INFO_2W>
typealias LPPORT_INFO_2W = CPointer<_PORT_INFO_2W>

typealias PORT_INFO_2 = PORT_INFO_2W

typealias PPORT_INFO_2Var = CPointerVarOf<PPORT_INFO_2>
typealias PPORT_INFO_2 = PPORT_INFO_2W

typealias LPPORT_INFO_2Var = CPointerVarOf<LPPORT_INFO_2>
typealias LPPORT_INFO_2 = LPPORT_INFO_2W

typealias PORT_INFO_3A = _PORT_INFO_3A

typealias PPORT_INFO_3AVar = CPointerVarOf<PPORT_INFO_3A>
typealias PPORT_INFO_3A = CPointer<_PORT_INFO_3A>

typealias LPPORT_INFO_3AVar = CPointerVarOf<LPPORT_INFO_3A>
typealias LPPORT_INFO_3A = CPointer<_PORT_INFO_3A>

typealias PORT_INFO_3W = _PORT_INFO_3W

typealias PPORT_INFO_3WVar = CPointerVarOf<PPORT_INFO_3W>
typealias PPORT_INFO_3W = CPointer<_PORT_INFO_3W>

typealias LPPORT_INFO_3WVar = CPointerVarOf<LPPORT_INFO_3W>
typealias LPPORT_INFO_3W = CPointer<_PORT_INFO_3W>

typealias PORT_INFO_3 = PORT_INFO_3W

typealias PPORT_INFO_3Var = CPointerVarOf<PPORT_INFO_3>
typealias PPORT_INFO_3 = PPORT_INFO_3W

typealias LPPORT_INFO_3Var = CPointerVarOf<LPPORT_INFO_3>
typealias LPPORT_INFO_3 = LPPORT_INFO_3W

typealias MONITOR_INFO_1A = _MONITOR_INFO_1A

typealias PMONITOR_INFO_1AVar = CPointerVarOf<PMONITOR_INFO_1A>
typealias PMONITOR_INFO_1A = CPointer<_MONITOR_INFO_1A>

typealias LPMONITOR_INFO_1AVar = CPointerVarOf<LPMONITOR_INFO_1A>
typealias LPMONITOR_INFO_1A = CPointer<_MONITOR_INFO_1A>

typealias MONITOR_INFO_1W = _MONITOR_INFO_1W

typealias PMONITOR_INFO_1WVar = CPointerVarOf<PMONITOR_INFO_1W>
typealias PMONITOR_INFO_1W = CPointer<_MONITOR_INFO_1W>

typealias LPMONITOR_INFO_1WVar = CPointerVarOf<LPMONITOR_INFO_1W>
typealias LPMONITOR_INFO_1W = CPointer<_MONITOR_INFO_1W>

typealias MONITOR_INFO_1 = MONITOR_INFO_1W

typealias PMONITOR_INFO_1Var = CPointerVarOf<PMONITOR_INFO_1>
typealias PMONITOR_INFO_1 = PMONITOR_INFO_1W

typealias LPMONITOR_INFO_1Var = CPointerVarOf<LPMONITOR_INFO_1>
typealias LPMONITOR_INFO_1 = LPMONITOR_INFO_1W

typealias MONITOR_INFO_2A = _MONITOR_INFO_2A

typealias PMONITOR_INFO_2AVar = CPointerVarOf<PMONITOR_INFO_2A>
typealias PMONITOR_INFO_2A = CPointer<_MONITOR_INFO_2A>

typealias LPMONITOR_INFO_2AVar = CPointerVarOf<LPMONITOR_INFO_2A>
typealias LPMONITOR_INFO_2A = CPointer<_MONITOR_INFO_2A>

typealias MONITOR_INFO_2W = _MONITOR_INFO_2W

typealias PMONITOR_INFO_2WVar = CPointerVarOf<PMONITOR_INFO_2W>
typealias PMONITOR_INFO_2W = CPointer<_MONITOR_INFO_2W>

typealias LPMONITOR_INFO_2WVar = CPointerVarOf<LPMONITOR_INFO_2W>
typealias LPMONITOR_INFO_2W = CPointer<_MONITOR_INFO_2W>

typealias MONITOR_INFO_2 = MONITOR_INFO_2W

typealias PMONITOR_INFO_2Var = CPointerVarOf<PMONITOR_INFO_2>
typealias PMONITOR_INFO_2 = PMONITOR_INFO_2W

typealias LPMONITOR_INFO_2Var = CPointerVarOf<LPMONITOR_INFO_2>
typealias LPMONITOR_INFO_2 = LPMONITOR_INFO_2W

typealias DATATYPES_INFO_1A = _DATATYPES_INFO_1A

typealias PDATATYPES_INFO_1AVar = CPointerVarOf<PDATATYPES_INFO_1A>
typealias PDATATYPES_INFO_1A = CPointer<_DATATYPES_INFO_1A>

typealias LPDATATYPES_INFO_1AVar = CPointerVarOf<LPDATATYPES_INFO_1A>
typealias LPDATATYPES_INFO_1A = CPointer<_DATATYPES_INFO_1A>

typealias DATATYPES_INFO_1W = _DATATYPES_INFO_1W

typealias PDATATYPES_INFO_1WVar = CPointerVarOf<PDATATYPES_INFO_1W>
typealias PDATATYPES_INFO_1W = CPointer<_DATATYPES_INFO_1W>

typealias LPDATATYPES_INFO_1WVar = CPointerVarOf<LPDATATYPES_INFO_1W>
typealias LPDATATYPES_INFO_1W = CPointer<_DATATYPES_INFO_1W>

typealias DATATYPES_INFO_1 = DATATYPES_INFO_1W

typealias PDATATYPES_INFO_1Var = CPointerVarOf<PDATATYPES_INFO_1>
typealias PDATATYPES_INFO_1 = PDATATYPES_INFO_1W

typealias LPDATATYPES_INFO_1Var = CPointerVarOf<LPDATATYPES_INFO_1>
typealias LPDATATYPES_INFO_1 = LPDATATYPES_INFO_1W

typealias PRINTER_DEFAULTSA = _PRINTER_DEFAULTSA

typealias PPRINTER_DEFAULTSAVar = CPointerVarOf<PPRINTER_DEFAULTSA>
typealias PPRINTER_DEFAULTSA = CPointer<_PRINTER_DEFAULTSA>

typealias LPPRINTER_DEFAULTSAVar = CPointerVarOf<LPPRINTER_DEFAULTSA>
typealias LPPRINTER_DEFAULTSA = CPointer<_PRINTER_DEFAULTSA>

typealias PRINTER_DEFAULTSW = _PRINTER_DEFAULTSW

typealias PPRINTER_DEFAULTSWVar = CPointerVarOf<PPRINTER_DEFAULTSW>
typealias PPRINTER_DEFAULTSW = CPointer<_PRINTER_DEFAULTSW>

typealias LPPRINTER_DEFAULTSWVar = CPointerVarOf<LPPRINTER_DEFAULTSW>
typealias LPPRINTER_DEFAULTSW = CPointer<_PRINTER_DEFAULTSW>

typealias PRINTER_DEFAULTS = PRINTER_DEFAULTSW

typealias PPRINTER_DEFAULTSVar = CPointerVarOf<PPRINTER_DEFAULTS>
typealias PPRINTER_DEFAULTS = PPRINTER_DEFAULTSW

typealias LPPRINTER_DEFAULTSVar = CPointerVarOf<LPPRINTER_DEFAULTS>
typealias LPPRINTER_DEFAULTS = LPPRINTER_DEFAULTSW

typealias PRINTER_ENUM_VALUESA = _PRINTER_ENUM_VALUESA

typealias PPRINTER_ENUM_VALUESAVar = CPointerVarOf<PPRINTER_ENUM_VALUESA>
typealias PPRINTER_ENUM_VALUESA = CPointer<_PRINTER_ENUM_VALUESA>

typealias LPPRINTER_ENUM_VALUESAVar = CPointerVarOf<LPPRINTER_ENUM_VALUESA>
typealias LPPRINTER_ENUM_VALUESA = CPointer<_PRINTER_ENUM_VALUESA>

typealias PRINTER_ENUM_VALUESW = _PRINTER_ENUM_VALUESW

typealias PPRINTER_ENUM_VALUESWVar = CPointerVarOf<PPRINTER_ENUM_VALUESW>
typealias PPRINTER_ENUM_VALUESW = CPointer<_PRINTER_ENUM_VALUESW>

typealias LPPRINTER_ENUM_VALUESWVar = CPointerVarOf<LPPRINTER_ENUM_VALUESW>
typealias LPPRINTER_ENUM_VALUESW = CPointer<_PRINTER_ENUM_VALUESW>

typealias PRINTER_ENUM_VALUES = PRINTER_ENUM_VALUESW

typealias PPRINTER_ENUM_VALUESVar = CPointerVarOf<PPRINTER_ENUM_VALUES>
typealias PPRINTER_ENUM_VALUES = PPRINTER_ENUM_VALUESW

typealias LPPRINTER_ENUM_VALUESVar = CPointerVarOf<LPPRINTER_ENUM_VALUES>
typealias LPPRINTER_ENUM_VALUES = LPPRINTER_ENUM_VALUESW

typealias PWORDVar = CPointerVarOf<PWORD>
typealias PWORD = CPointer<WORDVar>

typealias PRINTER_NOTIFY_OPTIONS_TYPE = _PRINTER_NOTIFY_OPTIONS_TYPE

typealias PPRINTER_NOTIFY_OPTIONS_TYPEVar = CPointerVarOf<PPRINTER_NOTIFY_OPTIONS_TYPE>
typealias PPRINTER_NOTIFY_OPTIONS_TYPE = CPointer<_PRINTER_NOTIFY_OPTIONS_TYPE>

typealias LPPRINTER_NOTIFY_OPTIONS_TYPEVar = CPointerVarOf<LPPRINTER_NOTIFY_OPTIONS_TYPE>
typealias LPPRINTER_NOTIFY_OPTIONS_TYPE = CPointer<_PRINTER_NOTIFY_OPTIONS_TYPE>

typealias PRINTER_NOTIFY_OPTIONS = _PRINTER_NOTIFY_OPTIONS

typealias PPRINTER_NOTIFY_OPTIONSVar = CPointerVarOf<PPRINTER_NOTIFY_OPTIONS>
typealias PPRINTER_NOTIFY_OPTIONS = CPointer<_PRINTER_NOTIFY_OPTIONS>

typealias LPPRINTER_NOTIFY_OPTIONSVar = CPointerVarOf<LPPRINTER_NOTIFY_OPTIONS>
typealias LPPRINTER_NOTIFY_OPTIONS = CPointer<_PRINTER_NOTIFY_OPTIONS>

typealias PRINTER_NOTIFY_INFO_DATA = _PRINTER_NOTIFY_INFO_DATA

typealias PPRINTER_NOTIFY_INFO_DATAVar = CPointerVarOf<PPRINTER_NOTIFY_INFO_DATA>
typealias PPRINTER_NOTIFY_INFO_DATA = CPointer<_PRINTER_NOTIFY_INFO_DATA>

typealias LPPRINTER_NOTIFY_INFO_DATAVar = CPointerVarOf<LPPRINTER_NOTIFY_INFO_DATA>
typealias LPPRINTER_NOTIFY_INFO_DATA = CPointer<_PRINTER_NOTIFY_INFO_DATA>

typealias PRINTER_NOTIFY_INFO = _PRINTER_NOTIFY_INFO

typealias PPRINTER_NOTIFY_INFOVar = CPointerVarOf<PPRINTER_NOTIFY_INFO>
typealias PPRINTER_NOTIFY_INFO = CPointer<_PRINTER_NOTIFY_INFO>

typealias LPPRINTER_NOTIFY_INFOVar = CPointerVarOf<LPPRINTER_NOTIFY_INFO>
typealias LPPRINTER_NOTIFY_INFO = CPointer<_PRINTER_NOTIFY_INFO>

typealias BINARY_CONTAINER = _BINARY_CONTAINER

typealias PBINARY_CONTAINERVar = CPointerVarOf<PBINARY_CONTAINER>
typealias PBINARY_CONTAINER = CPointer<_BINARY_CONTAINER>

typealias BIDI_DATA = _BIDI_DATA

typealias PBIDI_DATAVar = CPointerVarOf<PBIDI_DATA>
typealias PBIDI_DATA = CPointer<_BIDI_DATA>

typealias LPBIDI_DATAVar = CPointerVarOf<LPBIDI_DATA>
typealias LPBIDI_DATA = CPointer<_BIDI_DATA>

typealias BIDI_REQUEST_DATA = _BIDI_REQUEST_DATA

typealias PBIDI_REQUEST_DATAVar = CPointerVarOf<PBIDI_REQUEST_DATA>
typealias PBIDI_REQUEST_DATA = CPointer<_BIDI_REQUEST_DATA>

typealias LPBIDI_REQUEST_DATAVar = CPointerVarOf<LPBIDI_REQUEST_DATA>
typealias LPBIDI_REQUEST_DATA = CPointer<_BIDI_REQUEST_DATA>

typealias BIDI_REQUEST_CONTAINER = _BIDI_REQUEST_CONTAINER

typealias PBIDI_REQUEST_CONTAINERVar = CPointerVarOf<PBIDI_REQUEST_CONTAINER>
typealias PBIDI_REQUEST_CONTAINER = CPointer<_BIDI_REQUEST_CONTAINER>

typealias LPBIDI_REQUEST_CONTAINERVar = CPointerVarOf<LPBIDI_REQUEST_CONTAINER>
typealias LPBIDI_REQUEST_CONTAINER = CPointer<_BIDI_REQUEST_CONTAINER>

typealias BIDI_RESPONSE_DATA = _BIDI_RESPONSE_DATA

typealias PBIDI_RESPONSE_DATAVar = CPointerVarOf<PBIDI_RESPONSE_DATA>
typealias PBIDI_RESPONSE_DATA = CPointer<_BIDI_RESPONSE_DATA>

typealias LPBIDI_RESPONSE_DATAVar = CPointerVarOf<LPBIDI_RESPONSE_DATA>
typealias LPBIDI_RESPONSE_DATA = CPointer<_BIDI_RESPONSE_DATA>

typealias BIDI_RESPONSE_CONTAINER = _BIDI_RESPONSE_CONTAINER

typealias PBIDI_RESPONSE_CONTAINERVar = CPointerVarOf<PBIDI_RESPONSE_CONTAINER>
typealias PBIDI_RESPONSE_CONTAINER = CPointer<_BIDI_RESPONSE_CONTAINER>

typealias LPBIDI_RESPONSE_CONTAINERVar = CPointerVarOf<LPBIDI_RESPONSE_CONTAINER>
typealias LPBIDI_RESPONSE_CONTAINER = CPointer<_BIDI_RESPONSE_CONTAINER>

typealias PROVIDOR_INFO_1A = _PROVIDOR_INFO_1A

typealias PPROVIDOR_INFO_1AVar = CPointerVarOf<PPROVIDOR_INFO_1A>
typealias PPROVIDOR_INFO_1A = CPointer<_PROVIDOR_INFO_1A>

typealias LPPROVIDOR_INFO_1AVar = CPointerVarOf<LPPROVIDOR_INFO_1A>
typealias LPPROVIDOR_INFO_1A = CPointer<_PROVIDOR_INFO_1A>

typealias PROVIDOR_INFO_1W = _PROVIDOR_INFO_1W

typealias PPROVIDOR_INFO_1WVar = CPointerVarOf<PPROVIDOR_INFO_1W>
typealias PPROVIDOR_INFO_1W = CPointer<_PROVIDOR_INFO_1W>

typealias LPPROVIDOR_INFO_1WVar = CPointerVarOf<LPPROVIDOR_INFO_1W>
typealias LPPROVIDOR_INFO_1W = CPointer<_PROVIDOR_INFO_1W>

typealias PROVIDOR_INFO_1 = PROVIDOR_INFO_1W

typealias PPROVIDOR_INFO_1Var = CPointerVarOf<PPROVIDOR_INFO_1>
typealias PPROVIDOR_INFO_1 = PPROVIDOR_INFO_1W

typealias LPPROVIDOR_INFO_1Var = CPointerVarOf<LPPROVIDOR_INFO_1>
typealias LPPROVIDOR_INFO_1 = LPPROVIDOR_INFO_1W

typealias PROVIDOR_INFO_2A = _PROVIDOR_INFO_2A

typealias PPROVIDOR_INFO_2AVar = CPointerVarOf<PPROVIDOR_INFO_2A>
typealias PPROVIDOR_INFO_2A = CPointer<_PROVIDOR_INFO_2A>

typealias LPPROVIDOR_INFO_2AVar = CPointerVarOf<LPPROVIDOR_INFO_2A>
typealias LPPROVIDOR_INFO_2A = CPointer<_PROVIDOR_INFO_2A>

typealias PROVIDOR_INFO_2W = _PROVIDOR_INFO_2W

typealias PPROVIDOR_INFO_2WVar = CPointerVarOf<PPROVIDOR_INFO_2W>
typealias PPROVIDOR_INFO_2W = CPointer<_PROVIDOR_INFO_2W>

typealias LPPROVIDOR_INFO_2WVar = CPointerVarOf<LPPROVIDOR_INFO_2W>
typealias LPPROVIDOR_INFO_2W = CPointer<_PROVIDOR_INFO_2W>

typealias PROVIDOR_INFO_2 = PROVIDOR_INFO_2W

typealias PPROVIDOR_INFO_2Var = CPointerVarOf<PPROVIDOR_INFO_2>
typealias PPROVIDOR_INFO_2 = PPROVIDOR_INFO_2W

typealias LPPROVIDOR_INFO_2Var = CPointerVarOf<LPPROVIDOR_INFO_2>
typealias LPPROVIDOR_INFO_2 = LPPROVIDOR_INFO_2W

typealias SERVICE_DESCRIPTIONA = _SERVICE_DESCRIPTIONA

typealias LPSERVICE_DESCRIPTIONAVar = CPointerVarOf<LPSERVICE_DESCRIPTIONA>
typealias LPSERVICE_DESCRIPTIONA = CPointer<_SERVICE_DESCRIPTIONA>

typealias SERVICE_DESCRIPTIONW = _SERVICE_DESCRIPTIONW

typealias LPSERVICE_DESCRIPTIONWVar = CPointerVarOf<LPSERVICE_DESCRIPTIONW>
typealias LPSERVICE_DESCRIPTIONW = CPointer<_SERVICE_DESCRIPTIONW>

typealias SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONW

typealias LPSERVICE_DESCRIPTIONVar = CPointerVarOf<LPSERVICE_DESCRIPTION>
typealias LPSERVICE_DESCRIPTION = LPSERVICE_DESCRIPTIONW

typealias SC_ACTION_TYPEVar = IntVarOf<SC_ACTION_TYPE>
typealias SC_ACTION_TYPE = _SC_ACTION_TYPE

typealias SC_ACTION = _SC_ACTION

typealias LPSC_ACTIONVar = CPointerVarOf<LPSC_ACTION>
typealias LPSC_ACTION = CPointer<_SC_ACTION>

typealias SERVICE_FAILURE_ACTIONSA = _SERVICE_FAILURE_ACTIONSA

typealias LPSERVICE_FAILURE_ACTIONSAVar = CPointerVarOf<LPSERVICE_FAILURE_ACTIONSA>
typealias LPSERVICE_FAILURE_ACTIONSA = CPointer<_SERVICE_FAILURE_ACTIONSA>

typealias SERVICE_FAILURE_ACTIONSW = _SERVICE_FAILURE_ACTIONSW

typealias LPSERVICE_FAILURE_ACTIONSWVar = CPointerVarOf<LPSERVICE_FAILURE_ACTIONSW>
typealias LPSERVICE_FAILURE_ACTIONSW = CPointer<_SERVICE_FAILURE_ACTIONSW>

typealias SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSW

typealias LPSERVICE_FAILURE_ACTIONSVar = CPointerVarOf<LPSERVICE_FAILURE_ACTIONS>
typealias LPSERVICE_FAILURE_ACTIONS = LPSERVICE_FAILURE_ACTIONSW

typealias SC_HANDLEVar = CPointerVarOf<SC_HANDLE>
typealias SC_HANDLE = CPointer<SC_HANDLE__>

typealias LPSC_HANDLEVar = CPointerVarOf<LPSC_HANDLE>
typealias LPSC_HANDLE = CPointer<SC_HANDLEVar>

typealias SERVICE_STATUS_HANDLEVar = CPointerVarOf<SERVICE_STATUS_HANDLE>
typealias SERVICE_STATUS_HANDLE = CPointer<SERVICE_STATUS_HANDLE__>

typealias SC_STATUS_TYPEVar = IntVarOf<SC_STATUS_TYPE>
typealias SC_STATUS_TYPE = _SC_STATUS_TYPE

typealias SC_ENUM_TYPEVar = IntVarOf<SC_ENUM_TYPE>
typealias SC_ENUM_TYPE = _SC_ENUM_TYPE

typealias SERVICE_STATUS = _SERVICE_STATUS

typealias LPSERVICE_STATUSVar = CPointerVarOf<LPSERVICE_STATUS>
typealias LPSERVICE_STATUS = CPointer<_SERVICE_STATUS>

typealias SERVICE_STATUS_PROCESS = _SERVICE_STATUS_PROCESS

typealias LPSERVICE_STATUS_PROCESSVar = CPointerVarOf<LPSERVICE_STATUS_PROCESS>
typealias LPSERVICE_STATUS_PROCESS = CPointer<_SERVICE_STATUS_PROCESS>

typealias ENUM_SERVICE_STATUSA = _ENUM_SERVICE_STATUSA

typealias LPENUM_SERVICE_STATUSAVar = CPointerVarOf<LPENUM_SERVICE_STATUSA>
typealias LPENUM_SERVICE_STATUSA = CPointer<_ENUM_SERVICE_STATUSA>

typealias ENUM_SERVICE_STATUSW = _ENUM_SERVICE_STATUSW

typealias LPENUM_SERVICE_STATUSWVar = CPointerVarOf<LPENUM_SERVICE_STATUSW>
typealias LPENUM_SERVICE_STATUSW = CPointer<_ENUM_SERVICE_STATUSW>

typealias ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSW

typealias LPENUM_SERVICE_STATUSVar = CPointerVarOf<LPENUM_SERVICE_STATUS>
typealias LPENUM_SERVICE_STATUS = LPENUM_SERVICE_STATUSW

typealias ENUM_SERVICE_STATUS_PROCESSA = _ENUM_SERVICE_STATUS_PROCESSA

typealias LPENUM_SERVICE_STATUS_PROCESSAVar = CPointerVarOf<LPENUM_SERVICE_STATUS_PROCESSA>
typealias LPENUM_SERVICE_STATUS_PROCESSA = CPointer<_ENUM_SERVICE_STATUS_PROCESSA>

typealias ENUM_SERVICE_STATUS_PROCESSW = _ENUM_SERVICE_STATUS_PROCESSW

typealias LPENUM_SERVICE_STATUS_PROCESSWVar = CPointerVarOf<LPENUM_SERVICE_STATUS_PROCESSW>
typealias LPENUM_SERVICE_STATUS_PROCESSW = CPointer<_ENUM_SERVICE_STATUS_PROCESSW>

typealias ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSW

typealias LPENUM_SERVICE_STATUS_PROCESSVar = CPointerVarOf<LPENUM_SERVICE_STATUS_PROCESS>
typealias LPENUM_SERVICE_STATUS_PROCESS = LPENUM_SERVICE_STATUS_PROCESSW

typealias SC_LOCKVar = CPointerVarOf<SC_LOCK>
typealias SC_LOCK = LPVOID

typealias QUERY_SERVICE_LOCK_STATUSA = _QUERY_SERVICE_LOCK_STATUSA

typealias LPQUERY_SERVICE_LOCK_STATUSAVar = CPointerVarOf<LPQUERY_SERVICE_LOCK_STATUSA>
typealias LPQUERY_SERVICE_LOCK_STATUSA = CPointer<_QUERY_SERVICE_LOCK_STATUSA>

typealias QUERY_SERVICE_LOCK_STATUSW = _QUERY_SERVICE_LOCK_STATUSW

typealias LPQUERY_SERVICE_LOCK_STATUSWVar = CPointerVarOf<LPQUERY_SERVICE_LOCK_STATUSW>
typealias LPQUERY_SERVICE_LOCK_STATUSW = CPointer<_QUERY_SERVICE_LOCK_STATUSW>

typealias QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSW

typealias LPQUERY_SERVICE_LOCK_STATUSVar = CPointerVarOf<LPQUERY_SERVICE_LOCK_STATUS>
typealias LPQUERY_SERVICE_LOCK_STATUS = LPQUERY_SERVICE_LOCK_STATUSW

typealias QUERY_SERVICE_CONFIGA = _QUERY_SERVICE_CONFIGA

typealias LPQUERY_SERVICE_CONFIGAVar = CPointerVarOf<LPQUERY_SERVICE_CONFIGA>
typealias LPQUERY_SERVICE_CONFIGA = CPointer<_QUERY_SERVICE_CONFIGA>

typealias QUERY_SERVICE_CONFIGW = _QUERY_SERVICE_CONFIGW

typealias LPQUERY_SERVICE_CONFIGWVar = CPointerVarOf<LPQUERY_SERVICE_CONFIGW>
typealias LPQUERY_SERVICE_CONFIGW = CPointer<_QUERY_SERVICE_CONFIGW>

typealias QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGW

typealias LPQUERY_SERVICE_CONFIGVar = CPointerVarOf<LPQUERY_SERVICE_CONFIG>
typealias LPQUERY_SERVICE_CONFIG = LPQUERY_SERVICE_CONFIGW

typealias LPSERVICE_MAIN_FUNCTIONWVar = CPointerVarOf<LPSERVICE_MAIN_FUNCTIONW>
typealias LPSERVICE_MAIN_FUNCTIONW = CPointer<CFunction<(DWORD, CPointer<LPWSTRVar>?) -> Unit>>

typealias LPSERVICE_MAIN_FUNCTIONAVar = CPointerVarOf<LPSERVICE_MAIN_FUNCTIONA>
typealias LPSERVICE_MAIN_FUNCTIONA = CPointer<CFunction<(DWORD, CPointer<LPSTRVar>?) -> Unit>>

typealias SERVICE_TABLE_ENTRYA = _SERVICE_TABLE_ENTRYA

typealias LPSERVICE_TABLE_ENTRYAVar = CPointerVarOf<LPSERVICE_TABLE_ENTRYA>
typealias LPSERVICE_TABLE_ENTRYA = CPointer<_SERVICE_TABLE_ENTRYA>

typealias SERVICE_TABLE_ENTRYW = _SERVICE_TABLE_ENTRYW

typealias LPSERVICE_TABLE_ENTRYWVar = CPointerVarOf<LPSERVICE_TABLE_ENTRYW>
typealias LPSERVICE_TABLE_ENTRYW = CPointer<_SERVICE_TABLE_ENTRYW>

typealias SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYW

typealias LPSERVICE_TABLE_ENTRYVar = CPointerVarOf<LPSERVICE_TABLE_ENTRY>
typealias LPSERVICE_TABLE_ENTRY = LPSERVICE_TABLE_ENTRYW

typealias LPHANDLER_FUNCTIONVar = CPointerVarOf<LPHANDLER_FUNCTION>
typealias LPHANDLER_FUNCTION = CPointer<CFunction<(DWORD) -> Unit>>

typealias LPHANDLER_FUNCTION_EXVar = CPointerVarOf<LPHANDLER_FUNCTION_EX>
typealias LPHANDLER_FUNCTION_EX = CPointer<CFunction<(DWORD, DWORD, LPVOID?, LPVOID?) -> DWORD>>

